Set the discoverability window for the device.  A timeout of zero makes the device permanently discoverable (if the device is discoverable).  Setting the timeout to a nonzero value does not make a device discoverable; you need to call setMode() to make the device explicitly discoverable.
Returns the user-friendly name of a remote device.  This value is returned from our local cache, which is updated when onPropertyChange event is received. Do not expect to retrieve the updated remote name immediately after changing the name on the remote device.
Returns alias of a remote device.  This value is returned from our local cache, which is updated when onPropertyChange event is received.
Set the alias of a remote device.
Get the discoverability window for the device.  A timeout of zero means that the device is permanently discoverable (if the device is in the discoverable mode).
Sets the remote device trust state.
Gets the remote device trust state as boolean. Note: this value may be retrieved from cache if we retrieved the data before
Gets the remote major, minor classes encoded as a 32-bit integer. Note: this value is retrieved from cache, because we get it during
Gets the UUIDs supported by the remote device
Connect and fetch new UUID's using SDP. The UUID's found are broadcast as intents. Optionally takes a uuid and callback to fetch the RFCOMM channel for the a given uuid. TODO: Don't wait UUID_INTENT_DELAY to broadcast UUID intents on success TODO: Don't wait UUID_INTENT_DELAY to handle the failure case for callback and broadcast intents.
Gets the rfcomm channel associated with the UUID. Pulls records from the cache only.
b is a handle to a Binder instance, so that this service can be notified for Applications that terminate unexpectedly, to clean there service records
Returns true if airplane mode is currently on
Broadcast the Uuid intent
Handlers for PAN  Profile TODO: This needs to be converted to a state machine.
Handlers for Input Device Profile This needs to be converted to state machine
Handle incoming profile acceptance for profiles handled by Bluetooth Service, currently PAN and HID. This also is the catch all for all rejections for profiles that is not supported.
Handlers for Health Device Profile TODO: All these need to be converted to a state machine.
A batch process of onGetSuggestions. This function will run on the incoming IPC thread. So, this is not called on the main thread, but will be called in series on another thread.
Cast an IBinder object into an android.service.wallpaper.IWallpaperConnection interface, generating a proxy if needed.
Cast an IBinder object into an android.service.wallpaper.IWallpaperEngine interface, generating a proxy if needed.
Cast an IBinder object into an android.service.wallpaper.IWallpaperService interface, generating a proxy if needed.
Provides access to the surface in which this wallpaper is drawn.
Convenience for {@link WallpaperManager#getDesiredMinimumWidth() WallpaperManager.getDesiredMinimumWidth()}, returning the width that the system would like this wallpaper to run in.
Convenience for {@link WallpaperManager#getDesiredMinimumHeight() WallpaperManager.getDesiredMinimumHeight()}, returning the height that the system would like this wallpaper to run in.
Return whether the wallpaper is currently visible to the user, this is the last value supplied to {@link #onVisibilityChanged(boolean)}.
Returns true if this engine is running in preview mode -- that is, it is being shown to the user before they select it as the actual wallpaper.
Control whether this wallpaper will receive raw touch events from the window manager as the user interacts with the window that is currently displaying the wallpaper.  By default they are turned off.  If enabled, the events will be received in {@link #onTouchEvent(MotionEvent)}.
Called to inform you of the wallpaper's offsets changing within its contain, corresponding to the container's call to {@link WallpaperManager#setWallpaperOffsets(IBinder, float, float) WallpaperManager.setWallpaperOffsets()}.
Process a command that was sent to the wallpaper with {@link WallpaperManager#sendWallpaperCommand}. The default implementation does nothing, and always returns null as the result. what to do and how to interpret the rest of the arguments. a result, appropriate for the command, be returned back. result data in to it.  Otherwise return null.
This allows subclasses to change the thread that most callbacks occur on.  Currently hidden because it is mostly needed for the image wallpaper (which runs in the system process and doesn't want to get stuck running on that seriously in use main thread).  Not exposed right now because the semantics of this are not totally well defined and some callbacks can still happen on the main thread).
MicrophoneInputStream constructor. This determines how long an application may delay before losing data.
Get the pathname of the SREC configuration directory corresponding to the language indicated by the Locale. This directory contains dictionaries, speech models, configuration files, and other data needed by the Recognizer. or null for default, currently <code>Locale.US</code>.
Create an instance of a SREC speech recognizer. which in turn contains references to dictionaries, speech models, and other data needed to configure and operate the recognizer. A separate config file is needed for each audio sample rate. Two files, baseline11k.par and baseline8k.par, which correspond to 11025 and 8000 hz, are present in the directory indicated by {@link #getConfigDir}.
Create a <code>Grammar</code> instance.
Reset all slots.
Add a word to a slot.
Compile all slots.
Setup <code>Grammar</code> with <code>Recognizer</code>.
Save <code>Grammar</code> to g2g file.
Release resources associated with this <code>Grammar</code>.
Clean up resources.
Start recognition
Process some audio and return the current status. <ul> <li><code>EVENT_INVALID</code> <li><code>EVENT_NO_MATCH</code> <li><code>EVENT_INCOMPLETE</code> <li><code>EVENT_STARTED</code> <li><code>EVENT_STOPPED</code> <li><code>EVENT_START_OF_VOICING</code> <li><code>EVENT_END_OF_VOICING</code> <li><code>EVENT_SPOKE_TOO_SOON</code> <li><code>EVENT_RECOGNITION_RESULT</code> <li><code>EVENT_START_OF_UTTERANCE_TIMEOUT</code> <li><code>EVENT_RECOGNITION_TIMEOUT</code> <li><code>EVENT_NEED_MORE_AUDIO</code> <li><code>EVENT_MAX_SPEECH</code> </ul>
Put audio samples into the <code>Recognizer</code>.
Read audio samples from an <code>InputStream</code> and put them in the <code>Recognizer</code>.
Get the number of recognition results.  Must be called after <code>EVENT_RECOGNITION_RESULT</code> is returned by <code>advance</code>, but before <code>stop</code>.
Get a set of keys for the result.  Must be called after <code>EVENT_RECOGNITION_RESULT</code> is returned by <code>advance</code>, but before <code>stop</code>.
Get a result value.  Must be called after <code>EVENT_RECOGNITION_RESULT</code> is returned by <code>advance</code>, but before <code>stop</code>. <code>KEY_CONFIDENCE</code>, <code>KEY_LITERAL</code>, or <code>KEY_MEANING</code>, but the user can also define their own keys in a grxml file, or in the <code>tag</code> slot of <code>Grammar.addWordToSlot</code>.
Stop the <code>Recognizer</code>.
Reset the acoustic state vectorto it's default value.
Set the acoustic state vector.
Get the acoustic state vector.
Clean up resources.
Produce a displayable string from an <code>advance</code> event.
Compute the maximum of the absolute value of the pcm samples. The return value can be used to set ulaw encoder scaling.
Create an InputStream which takes 16 bit pcm data and produces ulaw data.
Construct a WaveHeader, with fields initialized. one of {@link #FORMAT_PCM}, {@link #FORMAT_ULAW}, or {@link #FORMAT_ALAW}.
Get the format field. one of {@link #FORMAT_PCM}, {@link #FORMAT_ULAW}, or {@link #FORMAT_ALAW}.
Set the format field. one of {@link #FORMAT_PCM}, {@link #FORMAT_ULAW}, or {@link #FORMAT_ALAW}.
Get the number of channels.
Set the number of channels.
Get the sample rate.
Set the sample rate.
Get the number of bits per sample. usually 16 for PCM, 8 for ULAW or 8 for ALAW.
Set the number of bits per sample. usually 16 for PCM, 8 for ULAW or 8 for ALAW.
Get the size of audio data after this header, in bytes.
Set the size of audio data after this header, in bytes.
Read and initialize a WaveHeader.
Write a WAVE file header.
Stops all synthesis for a given {@code token}. If the current token is currently being processed, an effort will be made to stop it but that is not guaranteed. NOTE: This assumes that all other messages in the queue with {@code token} have been removed already. NOTE: Must be called synchronized on {@code AudioPlaybackHandler.this}.
----------------------------------------------------- Methods that add and remove elements from the queue. These do not need to be synchronized strictly speaking, but they make the behaviour a lot more predictable. (though it would still be correct without synchronization). -----------------------------------------------------
Shut down the audio playback thread.
Atomically clear the queue of all messages.
Remove all messages that originate from a given calling app.
----------------------------------------- Methods for dealing with individual messages, the methods below do the actual work. -----------------------------------------
Currently implemented as blocking the audio playback thread for the specified duration. If a call to stop() is made, the thread unblocks.
Plays back audio from a given URI. No TTS engine involvement here.
Denotes the start of a new synthesis request. We create a new audio track, and prepare it for incoming data. Note that since all TTS synthesis happens on a single thread, we should ALWAYS see the following order : handleSynthesisStart -> handleSynthesisDataAvailable(*) -> handleSynthesisDone OR handleSynthesisCompleteDataAvailable.
More data available to be flushed to the audio track.
Wait for the audio track to stop playing, and then release its resources.
Creates a new blocking media player. Creating a blocking media player is a cheap operation.
Starts playback and waits for it to finish. Can be called from any thread.
Stops playback. Can be called multiple times. Can be called from any thread.
Starts playback. Called on the handler thread.
Stops playback and release the media player. Called on the handler thread.
Notifies the logger that this request has been selected from the processing queue for processing. Engine latency / total time is measured from this baseline.
Notifies the logger that a chunk of data has been received from the engine. Might be called multiple times.
Notifies the logger that the engine has finished processing data. Will be called exactly once.
Notifies the logger that audio playback has started for some section of the synthesis. This is normally some amount of time after the engine has synthesized data and varides depending on utterances and other audio currently in the queue.
Notifies the logger that the current synthesis was stopped. Latency numbers are not reported for stopped syntheses.
Notifies the logger that the current synthesis resulted in an error. This is logged using {@link EventLogTags#writeTtsSpeakFailure}.
Notifies the logger that the current synthesis has completed. All available data is not logged.
Returns a formatted locale string from the synthesis params of the form lang-country-variant.
Must be called while holding the monitor on {@link #mStateLock}.
Must be called while holding the monitor on {@link #mStateLock}.
Cast an IBinder object into an android.speech.tts.ITextToSpeechCallback interface, generating a proxy if needed.
Cast an IBinder object into an android.speech.tts.ITextToSpeechService interface, generating a proxy if needed.
Tells the engine to synthesize some speech and play it back.
Tells the engine to synthesize some speech and write it to a file.
Plays an existing audio resource.
Plays silence.
Checks whether the service is currently playing some audio.
Interrupts the current utterance (if from the given app) and removes any utterances in the queue that are from the given app.
Returns the language, country and variant currently being used by the TTS engine. Can be called from multiple threads.
Checks whether the engine supports a given language.
Notifies the engine that it should load a speech synthesis language.
Sets the callback that will be notified when playback of utterance from the given app are completed.
Must be called synchronized on this.
Gets the text which should be synthesized.
Gets the ISO 3-letter language code for the language to use.
Gets the ISO 3-letter country code for the language to use.
Gets the language variant to use.
Gets the speech rate to use. The normal rate is 100.
Gets the pitch to use. The normal pitch is 100.
Gets the additional params, if any.
Sets the locale for the request.
Sets the speech rate.
Sets the pitch.
The constructor for the TextToSpeech class, using the default TTS engine. This will also initialize the associated TextToSpeech engine if it isn't already running.
The constructor for the TextToSpeech class, using the given TTS engine. This will also initialize the associated TextToSpeech engine if it isn't already running.
Releases the resources used by the TextToSpeech engine. It is good practice for instance to call this method in the onDestroy() method of an Activity so the TextToSpeech engine can be cleanly stopped.
Adds a mapping between a string of text and a sound resource in a package. After a call to this method, subsequent calls to {@link #speak(String, int, HashMap)} will play the specified sound resource if it is available, or synthesize the text it is missing.
Adds a mapping between a string of text and a sound file. Using this, it is possible to add custom pronounciations for a string of text. After a call to this method, subsequent calls to {@link #speak(String, int, HashMap)} will play the specified sound resource if it is available, or synthesize the text it is missing.
Adds a mapping between a string of text and a sound resource in a package. Use this to add custom earcons.
Adds a mapping between a string of text and a sound file. Use this to add custom earcons.
Speaks the string using the specified queuing strategy and speech parameters.
Plays the earcon using the specified queueing mode and parameters. The earcon must already have been added with {@link #addEarcon(String, String)} or {@link #addEarcon(String, String, int)}.
Plays silence for the specified amount of time using the specified queue mode.
Checks whether the TTS engine is busy speaking. Note that a speech item is considered complete once it's audio data has been sent to the audio mixer, or written to a file. There might be a finite lag between this point, and when the audio hardware completes playback.
Interrupts the current utterance (whether played or rendered to file) and discards other utterances in the queue.
Sets the speech rate. This has no effect on any pre-recorded speech.
Sets the speech pitch for the TextToSpeech engine. This has no effect on any pre-recorded speech.
Sets the text-to-speech language. The TTS engine will try to use the closest match to the specified language as represented by the Locale, but there is no guarantee that the exact same Locale will be used. Use {@link #isLanguageAvailable(Locale)} to check the level of support before choosing the language to use for the next utterances.
Returns a Locale instance describing the language currently being used by the TextToSpeech engine.
Checks if the specified language as represented by the Locale is available and supported.
Synthesizes the given text to a file using the specified parameters.
Sets the listener that will be notified when synthesis of an utterance completes.
Gets the package name of the default speech synthesis engine.
Checks whether the user's settings should override settings requested by the calling application. As of the Ice cream sandwich release, user settings never forcibly override the app's settings.
Gets a list of all installed TTS engines.
Adds a speech item to the queue. Called on a service binder thread.
Stops all speech output and removes any utterances still in the queue for the calling app. Called on a service binder thread.
Plays the speech item. Blocks until playback is finished. Must not be called more than once. Only called on the synthesis thread.
Stops the speech item. Must not be called more than once. Can be called on multiple threads,  but not on the synthesis thread.
Checks that the given file can be used for synthesis output.
Binder returned from {@code #onBind(Intent)}. The methods in this class can be called called from several different threads. NOTE: All calls that are passed in a calling app are interned so that they can be used as message objects (which are tested for equality using ==).
Returns the engine info for a given engine name. Note that engines are identified by their package name.
Returns the locale string for a given TTS engine. Attempts to read the value from {@link Settings.Secure#TTS_DEFAULT_LOCALE}, failing which the old style value from {@link Settings.Secure#TTS_DEFAULT_LANG} is read. If both these values are empty, the default phone locale is returned.
Parses a locale preference value delimited by {@link #LOCALE_DELIMITER}. Varies from {@link String#split} in that it will always return an array of length 3 with non null values.
Parses a comma separated list of engine locale preferences. The list is of the form {@code "engine_name_1:locale_1,engine_name_2:locale2"} and so on and so forth. Returns null if the list is empty, malformed or if there is no engine specific preference in the list.
Updates the value for a given key in a comma separated list of key value pairs, each of which are delimited by a colon. If no value exists for the given key, the kay value pair are appended to the end of the list.
Cast an IBinder object into an android.speech.IRecognitionListener interface, generating a proxy if needed.
Called when the endpointer is ready for the user to start speaking.
The user has started to speak.
The sound level in the audio stream has changed.
More sound has been received.
Called after the user stops speaking.
A network or recognition error occurred.
Called when recognition results are ready.
Called when recognition partial results are ready.
Reserved for adding future events.
Cast an IBinder object into an android.speech.IRecognitionService interface, generating a proxy if needed.
Starts listening for speech. Please note that the recognition service supports one listener only, therefore, if this function is called from two different threads, only the latest one will get the notifications
Stops listening for speech. Speech captured so far will be recognized as if the user had stopped speaking at this point. The function has no effect unless it is called during the speech capturing.
Cancels the speech recognition.
Checks whether the caller has sufficient permissions
The service should call this method when the user has started to speak.
The service should call this method when sound has been received. The purpose of this function is to allow giving feedback to the user regarding the captured audio.
The service should call this method after the user stops speaking.
The service should call this method when a network or recognition error occurred.
The service should call this method when partial recognition results are available. This method can be called at any time between {@link #beginningOfSpeech()} and {@link #results(Bundle)} when partial results are ready. This method may be called zero, one or multiple times for each call to {@link SpeechRecognizer#startListening(Intent)}, depending on the speech recognition service implementation.
The service should call this method when the endpointer is ready for the user to start speaking.
The service should call this method when recognition results are ready.
The service should call this method when the sound level in the audio stream has changed. There is no guarantee that this method will be called.
Returns the broadcast intent to fire with {@link Context#sendOrderedBroadcast(Intent, String, BroadcastReceiver, android.os.Handler, int, String, Bundle)} to receive details from the package that implements voice search. <p> This is based on the value specified by the voice search {@link Activity} in {@link #DETAILS_META_DATA}, and if this is not specified, will return null. Also if there is no chosen default to resolve for {@link #ACTION_WEB_SEARCH}, this will return null. <p> If an intent is returned and is fired, a {@link Bundle} of extras will be returned to the provided result receiver, and should ideally contain values for {@link #EXTRA_LANGUAGE_PREFERENCE} and {@link #EXTRA_SUPPORTED_LANGUAGES}. <p> (Whether these are actually provided is up to the particular implementation. It is recommended that {@link Activity}s implementing {@link #ACTION_WEB_SEARCH} provide this information, but it is not required.)
Handler that will execute the main tasks
The right way to create a {@code SpeechRecognizer} is by using {@link #createSpeechRecognizer} static factory method
Checks whether a speech recognition service is available on the system. If this method returns {@code false}, {@link SpeechRecognizer#createSpeechRecognizer(Context)} will fail.
Factory method to create a new {@code SpeechRecognizer}. Please note that {@link #setRecognitionListener(RecognitionListener)} should be called before dispatching any command to the created {@code SpeechRecognizer}, otherwise no notifications will be received.
Factory method to create a new {@code SpeechRecognizer}. Please note that {@link #setRecognitionListener(RecognitionListener)} should be called before dispatching any command to the created {@code SpeechRecognizer}, otherwise no notifications will be received. Use this version of the method to specify a specific service to direct this {@link SpeechRecognizer} to. Normally you would not use this; use {@link #createSpeechRecognizer(Context)} instead to use the system default recognition service.
Sets the listener that will receive all the callbacks. The previous unfinished commands will be executed with the old listener, while any following command will be executed with the new listener.
Starts listening for speech. Please note that {@link #setRecognitionListener(RecognitionListener)} should be called beforehand, otherwise no notifications will be received.
Stops listening for speech. Speech captured so far will be recognized as if the user had stopped speaking at this point. Note that in the default case, this does not need to be called, as the speech endpointer will automatically stop the recognizer listening when it determines speech has completed. However, you can manipulate endpointer parameters directly using the intent extras defined in {@link RecognizerIntent}, in which case you may sometimes want to manually call this method to stop listening sooner. Please note that {@link #setRecognitionListener(RecognitionListener)} should be called beforehand, otherwise no notifications will be received.
Cancels the speech recognition. Please note that {@link #setRecognitionListener(RecognitionListener)} should be called beforehand, otherwise no notifications will be received.
sends the actual message to the service
sends the actual message to the service
sends the actual message to the service
changes the listener
Destroys the {@code SpeechRecognizer} object.
Empty constructor. Initializes the BID, SID, NID and base station latitude and longitude to invalid values.
Initialize the object from a bundle.
Invalidate this object.  The cell location data is set to invalid values.
Set the cell location data.
Test whether two objects hold the same data values or both are null
Fill the cell location data into the intent notifier Bundle based on service state
Empty constructor.  Initializes the LAC and CID to -1.
Initialize the object from a bundle.
On a UMTS network, returns the primary scrambling code of the serving cell.
Invalidate this object.  The location area code and the cell id are set to -1.
Set the location area code and the cell id.
Set the primary scrambling code.
Set intent notifier Bundle based on service state
This method returns the reference to a specific SmsMessage object, which is used for accessing its static methods.
Request an update of the current location.  If the location has changed, a broadcast will be sent to everyone registered with {@link PhoneStateListener#LISTEN_CELL_LOCATION}.
Create a new CellLocation from a intent notifier Bundle This method is used by PhoneStateIntentReceiver and maybe by external applications.
Return a new CellLocation object representing an unknown location, or null for unknown/none phone radio types.
Initialize the object from rssi, location string, and radioType radioType is one of following {@link TelephonyManager#NETWORK_TYPE_GPRS TelephonyManager.NETWORK_TYPE_GPRS}, {@link TelephonyManager#NETWORK_TYPE_EDGE TelephonyManager.NETWORK_TYPE_EDGE}, {@link TelephonyManager#NETWORK_TYPE_UMTS TelephonyManager.NETWORK_TYPE_UMTS}, {@link TelephonyManager#NETWORK_TYPE_HSDPA TelephonyManager.NETWORK_TYPE_HSDPA}, {@link TelephonyManager#NETWORK_TYPE_HSUPA TelephonyManager.NETWORK_TYPE_HSUPA}, and {@link TelephonyManager#NETWORK_TYPE_HSPA TelephonyManager.NETWORK_TYPE_HSPA}.
Initialize the object from a parcel.
For GSM, it is in "asu" ranging from 0 to 31 (dBm = -113 + 2*asu) 0 means "-113 dBm or less" and 31 means "-51 dBm or greater" For UMTS, it is the Level index of CPICH RSCP defined in TS 25.125
UNKNOWN_CID if in UMTS or CMDA or unknown
UNKNOWN_CID if in UMTS or CDMA or unknown
UNKNOWN_CID if in GSM or CMDA or unknown
Return {@link TelephonyManager#NETWORK_TYPE_UNKNOWN TelephonyManager.NETWORK_TYPE_UNKNOWN} means that the location information is unavailable. Return {@link TelephonyManager#NETWORK_TYPE_GPRS TelephonyManager.NETWORK_TYPE_GPRS} or {@link TelephonyManager#NETWORK_TYPE_EDGE TelephonyManager.NETWORK_TYPE_EDGE} means that Neighboring Cell information is stored for GSM network, in which {@link NeighboringCellInfo#getLac NeighboringCellInfo.getLac} and {@link NeighboringCellInfo#getCid NeighboringCellInfo.getCid} should be called to access location. Return {@link TelephonyManager#NETWORK_TYPE_UMTS TelephonyManager.NETWORK_TYPE_UMTS}, {@link TelephonyManager#NETWORK_TYPE_HSDPA TelephonyManager.NETWORK_TYPE_HSDPA}, {@link TelephonyManager#NETWORK_TYPE_HSUPA TelephonyManager.NETWORK_TYPE_HSUPA}, or {@link TelephonyManager#NETWORK_TYPE_HSPA TelephonyManager.NETWORK_TYPE_HSPA} means that Neighboring Cell information is stored for UMTS network, in which {@link NeighboringCellInfo#getPsc NeighboringCellInfo.getPsc} should be called to access location.
The formatting is based on the current system locale and future locale changes may not take effect on this instance.
The formatting is based on the given <code>countryCode</code>. where the phone number is being entered.
Generate the formatted number by ignoring all non-dialable chars and stick the cursor to the nearest dialable char to the left. For instance, if the number is  (650) 123-45678 and '4' is removed then the cursor should be behind '3' instead of '-'.
Returns true if ch is not dialable or alpha char
Extracts the phone number from an Intent.
Extracts the network address portion and canonicalize. This function is equivalent to extractNetworkPortion(), except for allowing the PLUS character to occur at arbitrary positions in the address portion, not just the first position.
Strips separators from a phone number string.
Converts pause and tonewait pause characters to Android representation. RFC 3601 says pause is 'p' and tonewait is 'w'.
Compare phone numbers a and b, return true if they're identical enough for caller ID purposes.
Compare phone numbers a and b, and return true if they're identical enough for caller ID purposes. Checks a resource to determine whether to use a strict or loose comparison algorithm.
Return true iff the network portion of <code>address</code> is, as far as we can tell on the device, suitable for use as an SMS destination address.
Breaks the given number down and formats it according to the rules for the country the number is from. formatting rules aren't known for the number
Formats the given number with the given formatting type. Currently {@link #FORMAT_NANP} and {@link #FORMAT_JAPAN} are supported as a formating type. not begin with +[country_code]
Returns the phone number formatting type for the given locale. rules are not known for the given locale
Formats a phone number in-place. Currently {@link #FORMAT_JAPAN} and {@link #FORMAT_NANP} is supported as a second argument. not begin with +[country_code]
Formats a phone number in-place using the NANP formatting rules. Numbers will be formatted as: <p><code> xxxxx xxx-xxxx xxx-xxx-xxxx 1-xxx-xxx-xxxx +1-xxx-xxx-xxxx </code></p>
Formats a phone number in-place using the Japanese formatting rules. Numbers will be formatted as: <p><code> 03-xxxx-xxxx 090-xxxx-xxxx 0120-xxx-xxx +81-3-xxxx-xxxx +81-90-xxxx-xxxx </code></p> the formatting
Removes all dashes from the number.
Format the given phoneNumber to the E.164 representation. <p> The given phone number must have an area code and could have a country code. <p> The defaultCountryIso is used to validate the given number and generate the E.164 phone number if the given number doesn't have a country code.
Format a phone number. <p> If the given number doesn't have the country code, the phone will be formatted to the default country's convention.
Format the phone number only if the given number hasn't been formatted. <p> The number which has only dailable character is treated as not being formatted.
Normalize a phone number by removing the characters other than digits. If the given number has keypad letters, the letters will be converted to digits first.
isEmergencyNumber: checks a given number against the list of emergency numbers provided by the RIL and SIM card. listed in the ril / sim, then return true, otherwise false.
Checks if a given number is an emergency number for a specific country. otherwise false
Checks if a given number is an emergency number for the country that the user is in. The current country is determined using the CountryDetector. CountryDetector.
isVoiceMailNumber: checks a given number against the voicemail number provided by the RIL and SIM card. The caller must have the READ_PHONE_STATE credential. otherwise, including if the caller does not have the permission to read the VM number.
Translates any alphabetic letters (i.e. [A-Za-z]) in the specified phone number into the equivalent numeric digits, according to the phone keypad letter mapping described in ITU E.161 and ISO/IEC 9995-8.
This function checks if there is a plus sign (+) in the passed-in dialing number. If there is, it processes the plus sign based on the default telephone numbering plan of the system when the phone is activated and the current telephone numbering plan of the system that the phone is camped on. Currently, we only support the case that the default and current telephone numbering plans are North American Numbering Plan(NANP). The passed-in dialStr should only contain the valid format as described below, 1) the 1st character in the dialStr should be one of the really dialable 2) the dialStr should already strip out the separator characters, Otherwise, this function returns the dial string passed in and if there is the "+" in the original dial string. Otherwise, the original dial string returns. This API is for CDMA only
This function gets the default international dialing prefix
This function checks if the passed in string conforms to the NANP format i.e. NXX-NXX-XXXX, N is any digit 2-9 and X is any digit 0-9
This function checks if the passed in string conforms to 1-NANP format
Determines if the specified number is actually a URI (i.e. a SIP address) rather than a regular PSTN phone number, based on whether or not the number contains an "@" character.
This function handles the plus code conversion within NANP CDMA network If the number format is 1)+1NANP,remove +, 2)other than +1NANP, any + numbers,replace + with the current IDP
This function finds the index of the dialable character(s) in the post dial string
Returns integer corresponding to the input if input "ch" is ISO-LATIN characters 0-9. Returns -1 otherwise
Note that this function does not strictly care the country calling code with 3 length (like Morocco: +212), assuming it is enough to use the first two digit to compare two phone numbers.
Currently this function simply ignore the first digit assuming it is trunk prefix. Actually trunk prefix is different in each country. e.g. "+79161234567" equals "89161234567" (Russian trunk digit is 8) "+33123456789" equals "0123456789" (French trunk digit is 0)
Return true if the prefix of "str" is "ignorable". Here, "ignorable" means that "str" has only one digit and separator characters. The one digit is assumed to be trunk prefix.
Callback invoked when device service state changes.
Callback invoked when the message-waiting indicator changes.
Callback invoked when the call-forwarding indicator changes.
Callback invoked when device cell location changes.
Callback invoked when device call state changes.
Callback invoked when connection state changes.
Callback invoked when data activity state changes.
Callback invoked when network signal strengths changes.
The Over The Air Service Provisioning (OTASP) has changed. Requires the READ_PHONE_STATE permission. means the value is currently unknown and the system should wait until <code>OTASP_NEEDED=2<code> or <code>OTASP_NOT_NEEDED=3<code> is received before making the decisision to perform OTASP or not.
The callback methods need to be called on the handler thread where this object was created.  If the binder did that for us it'd be nice.
Create a new ServiceState from a intent notifier Bundle This method is used by PhoneStateIntentReceiver and maybe by external applications.
Copy constructors
Construct a ServiceState object from the given parcel.
Get current service state of phone
Get current roaming indicator of phone (note: not just decoding from TS 27.007 7.2)
Get current registered operator name in long alphanumeric format. In GSM/UMTS, long format can be up to 16 characters long. In CDMA, returns the ERI text, if set. Otherwise, returns the ONS.
Get current registered operator name in short alphanumeric format. In GSM/UMTS, short format can be up to 8 characters long.
Get current registered operator numeric id. In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit network code. The country code can be decoded using {@link com.android.internal.telephony.MccTable#countryCodeForMcc(int)}.
Get current network selection mode.
Convert radio technology to String
In CDMA, mOperatorAlphaLong can be set from the ERI text. This is done from the CDMAPhone and not from the CdmaServiceStateTracker.
Test whether two objects hold the same data values or both are null.
Set ServiceState based on intent notifier map.
Set intent notifier Bundle based on service state.
Create a new SignalStrength from a intent notifier Bundle This method is used by PhoneStateIntentReceiver and maybe by external applications.
Empty constructor
Copy constructors
Construct a SignalStrength object from the given parcel.
{@link Parcelable#writeToParcel}
{@link Parcelable#describeContents}
{@link Parcelable.Creator}
Get the GSM Signal Strength, valid values are (0-31, 99) as defined in TS 27.007 8.5
Get the GSM bit error rate (0-7, 99) as defined in TS 27.007 8.5
Get the CDMA RSSI value in dBm
Get the CDMA Ec/Io value in dB*10
Get the EVDO RSSI value in dBm
Get the EVDO Ec/Io value in dB*10
Get the signal to noise ratio. Valid values are 0-8. 8 is the highest.
Get signal level as an int from 0..4
Get the signal level as an asu value between 0..31, 99 is unknown
Get the signal strength as dBm
Get Gsm signal strength as dBm
Get gsm as level 0..4
Get the gsm signal level as an asu value between 0..31, 99 is unknown
Get cdma as level 0..4
Get the cdma signal level as an asu value between 0..31, 99 is unknown
Get Evdo as level 0..4
Get the evdo signal level as an asu value between 0..31, 99 is unknown
Get LTE as dBm
Get LTE as level 0..4
Get the LTE signal level as an asu value between 0..97, 99 is unknown Asu is calculated based on 3GPP RSRP. Refer to 3GPP 27.007 (Ver 10.3.0) Sec 8.69
Set SignalStrength based on intent notifier map
Set intent notifier Bundle based on SignalStrength
Create an instance of this class from a received PDU
Return the geographical scope of this message, one of {@link #GEOGRAPHICAL_SCOPE_CELL_WIDE_IMMEDIATE}, {@link #GEOGRAPHICAL_SCOPE_PLMN_WIDE}, {@link #GEOGRAPHICAL_SCOPE_LA_WIDE}, {@link #GEOGRAPHICAL_SCOPE_CELL_WIDE}
Get the ISO-639-1 language code for this message, or null if unspecified
Get the body of this message, or null if no body available
Get the message identifier of this message (0-65535)
Get the message code of this message (0-1023)
Get the update number of this message (0-15)
Get the format of this message.
For ETWS primary notifications, return the emergency user alert flag.
For ETWS primary notifications, return the popup flag.
For ETWS primary notifications, return the warning type.
For ETWS primary notifications, return the Warning-Security-Information timestamp.
For ETWS primary notifications, return the 43 byte digital signature.
Parse and unpack the body text according to the encoding in the DCS. After completing successfully this method will have assigned the body text into mBody, and optionally the language code into mLanguage
Unpack body text from the pdu using the given encoding, position and length within the pdu
Parses an ETWS primary notification timestamp and returns a currentTimeMillis()-style timestamp. Copied from com.android.internal.telephony.gsm.SmsMessage.
Append text to the message body. This is used to concatenate multi-page GSM broadcasts.
Send a text based SMS. the current default SMSC broadcast when the message is successfully sent, or failed. The result code will be <code>Activity.RESULT_OK</code> for success, or one of these errors:<br> <code>RESULT_ERROR_GENERIC_FAILURE</code><br> <code>RESULT_ERROR_RADIO_OFF</code><br> <code>RESULT_ERROR_NULL_PDU</code><br> For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include the extra "errorCode" containing a radio technology specific value, generally only useful for troubleshooting.<br> The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period. broadcast when the message is delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Divide a message text into several fragments, none bigger than the maximum SMS message size. comprise the original message
Send a multi-part text based SMS.  The callee should have already divided the message into correctly sized parts by calling <code>divideMessage</code>. the current default SMSC comprise the original message <code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be <code>Activity.RESULT_OK</code> for success, or one of these errors:<br> <code>RESULT_ERROR_GENERIC_FAILURE</code><br> <code>RESULT_ERROR_RADIO_OFF</code><br> <code>RESULT_ERROR_NULL_PDU</code><br> For <code>RESULT_ERROR_GENERIC_FAILURE</code> each sentIntent may include the extra "errorCode" containing a radio technology specific value, generally only useful for troubleshooting.<br> The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period. <code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Send a data based SMS to a specific application port. the current default SMSC broadcast when the message is successfully sent, or failed. The result code will be <code>Activity.RESULT_OK</code> for success, or one of these errors:<br> <code>RESULT_ERROR_GENERIC_FAILURE</code><br> <code>RESULT_ERROR_RADIO_OFF</code><br> <code>RESULT_ERROR_NULL_PDU</code><br> For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include the extra "errorCode" containing a radio technology specific value, generally only useful for troubleshooting.<br> The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period. broadcast when the message is delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Get the default instance of the SmsManager
Copy a raw SMS PDU to the ICC. ICC (Integrated Circuit Card) is the card of the device. For example, this can be the SIM or USIM for GSM. {@hide}
Update the specified message on the ICC. ICC (Integrated Circuit Card) is the card of the device. For example, this can be the SIM or USIM for GSM. {@hide}
Retrieves all messages currently stored on ICC. ICC (Integrated Circuit Card) is the card of the device. For example, this can be the SIM or USIM for GSM. {@hide}
Enable reception of cell broadcast (SMS-CB) messages with the given message identifier. Note that if two different clients enable the same message identifier, they must both disable it for the device to stop receiving those messages. All received messages will be broadcast in an intent with the action "android.provider.Telephony.SMS_CB_RECEIVED". Note: This call is blocking, callers may want to avoid calling it from the main thread of an application. {@hide}
Disable reception of cell broadcast (SMS-CB) messages with the given message identifier. Note that if two different clients enable the same message identifier, they must both disable it for the device to stop receiving those messages. Note: This call is blocking, callers may want to avoid calling it from the main thread of an application. {@hide}
Enable reception of cell broadcast (SMS-CB) messages with the given message identifier range. Note that if two different clients enable the same message identifier, they must both disable it for the device to stop receiving those messages. All received messages will be broadcast in an intent with the action "android.provider.Telephony.SMS_CB_RECEIVED". Note: This call is blocking, callers may want to avoid calling it from the main thread of an application. {@hide}
Disable reception of cell broadcast (SMS-CB) messages with the given message identifier range. Note that if two different clients enable the same message identifier, they must both disable it for the device to stop receiving those messages. Note: This call is blocking, callers may want to avoid calling it from the main thread of an application. {@hide}
Create a list of <code>SmsMessage</code>s from a list of RawSmsData records returned by <code>getAllMessagesFromIcc()</code> <code>getAllMessagesFromIcc</code>
Create an SmsMessage from a raw PDU. <p><b>This method will soon be deprecated</b> and all applications which handle incoming SMS messages by processing the {@code SMS_RECEIVED_ACTION} broadcast intent <b>must</b> now pass the new {@code format} String extra from the intent into the new method {@code createFromPdu(byte[], String)} which takes an extra format parameter. This is required in order to correctly decode the PDU on devices that require support for both 3GPP and 3GPP2 formats at the same time, such as dual-mode GSM/CDMA and CDMA/LTE phones.
Create an SmsMessage from a raw PDU with the specified message format. The message format is passed in the {@code SMS_RECEIVED_ACTION} as the {@code format} String extra, and will be either "3gpp" for GSM/UMTS/LTE messages in 3GPP format or "3gpp2" for CDMA/LTE messages in 3GPP2 format.
TS 27.005 3.4.1 lines[0] and lines[1] are the two lines read from the +CMT unsolicited response (PDU mode, of course) +CMT: [&lt;alpha>],<length><CR><LF><pdu> Only public for debugging and for RIL {@hide}
Create an SmsMessage from an SMS EF record.
Get the TP-Layer-Length for the given SMS-SUBMIT PDU Basically, the length in bytes (not hex chars) less the SMSC header FIXME: This method is only used by a CTS test case that isn't run on CDMA devices. We should probably deprecate it and remove the obsolete test case.
Calculates the number of SMS's required to encode the message body and the number of characters remaining until the next message.
Divide a message text into several fragments, none bigger than the maximum SMS message text size. comprise the original msg text
Calculates the number of SMS's required to encode the message body and the number of characters remaining until the next message, given the current encoding.
Get an SMS-SUBMIT PDU for a destination address and a message. This method will not attempt to use any GSM national language 7 bit encodings.
Get an SMS-SUBMIT PDU for a data message to a destination address &amp; port. This method will not attempt to use any GSM national language 7 bit encodings.
Returns the address of the SMS service center that relayed this message or null if there is none.
Returns the originating address (sender) of this SMS message in String form or null if unavailable
Returns the originating address, or email from address if this message was from an email gateway. Returns null if originating address unavailable.
Returns the message body as a String, if it exists and is text based.
Returns the class of this message.
Returns the message body, or email message body if this message was from an email gateway. Returns null if message body unavailable.
Unofficial convention of a subject line enclosed in parens empty string if not present
Returns the service centre timestamp in currentTimeMillis() format
Returns true if message is an email.
Get protocol identifier.
See TS 23.040 9.2.3.9 returns true if this is a "replace short message" SMS
Returns true for CPHS MWI toggle message.
returns true if this message is a CPHS voicemail / message waiting indicator (MWI) clear message
returns true if this message is a CPHS voicemail / message waiting indicator (MWI) set message
returns true if this message is a "Message Waiting Indication Group: Discard Message" notification and should not be stored.
returns the user data section minus the user data header if one was present.
Returns the raw PDU for the message.
Returns the status of the message on the SIM (read, unread, sent, unsent).
Returns the status of the message on the ICC (read, unread, sent, unsent).
Returns the record index of the message on the SIM (1-based index).
Returns the record index of the message on the ICC (1-based index).
GSM: For an SMS-STATUS-REPORT message, this returns the status field from the status report.  This field indicates the status of a previously submitted SMS, if requested.  See TS 23.040, 9.2.3.15 TP-Status for a description of values. CDMA: For not interfering with status codes from GSM, the value is shifted to the bits 31-16. The value is composed of an error class (bits 25-24) and a status code (bits 23-16). Possible codes are described in C.S0015-B, v2.0, 4.5.21.
Return true iff the message is a SMS-STATUS-REPORT message.
Returns true iff the <code>TP-Reply-Path</code> bit is set in this message.
Returns the software version number for the device, for example, the IMEI/SV for GSM phones. Return null if the software version is not available. <p>Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones. Return null if device ID is not available. <p>Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
Returns the current location of the device. Return null if current location is not available. <p>Requires Permission: {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION} or {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_FINE_LOCATION}.
Enables location update notifications.  {@link PhoneStateListener#onCellLocationChanged PhoneStateListener.onCellLocationChanged} will be called on location updates. <p>Requires Permission: {@link android.Manifest.permission#CONTROL_LOCATION_UPDATES CONTROL_LOCATION_UPDATES}
Disables location update notifications.  {@link PhoneStateListener#onCellLocationChanged PhoneStateListener.onCellLocationChanged} will be called on location updates. <p>Requires Permission: {@link android.Manifest.permission#CONTROL_LOCATION_UPDATES CONTROL_LOCATION_UPDATES}
Returns the neighboring cell information of the device. <p>Requires Permission: (@link android.Manifest.permission#ACCESS_COARSE_UPDATES}
Returns the current phone type. TODO: This is a last minute change and hence hidden. {@hide}
Returns a constant indicating the device phone type.  This indicates the type of radio used to transmit voice calls.
Returns the alphabetic name of current registered operator. <p> Availability: Only when user is registered to a network. Result may be unreliable on CDMA networks (use {@link #getPhoneType()} to determine if on a CDMA network).
Returns the numeric name (MCC+MNC) of current registered operator. <p> Availability: Only when user is registered to a network. Result may be unreliable on CDMA networks (use {@link #getPhoneType()} to determine if on a CDMA network).
Returns true if the device is considered roaming on the current network, for GSM purposes. <p> Availability: Only when user registered to a network.
Returns the ISO country code equivalent of the current registered operator's MCC (Mobile Country Code). <p> Availability: Only when user is registered to a network. Result may be unreliable on CDMA networks (use {@link #getPhoneType()} to determine if on a CDMA network).
Returns a constant indicating the radio technology (network type) currently in use on the device for data transmission.
Returns a string representation of the radio technology (network type) currently in use on the device.
Returns a constant indicating the state of the device SIM card.
Returns the MCC+MNC (mobile country code + mobile network code) of the provider of the SIM. 5 or 6 decimal digits. <p> Availability: SIM state must be {@link #SIM_STATE_READY}
Returns the Service Provider Name (SPN). <p> Availability: SIM state must be {@link #SIM_STATE_READY}
Returns the ISO country code equivalent for the SIM provider's country code.
Returns the serial number of the SIM, if applicable. Return null if it is unavailable. <p> Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
Return if the current radio is LTE on CDMA. This is a tri-state return value as for a period of time the mode may be unknown. or {@link Phone#LTE_ON_CDMA_TRUE}
Returns the unique subscriber ID, for example, the IMSI for a GSM phone. Return null if it is unavailable. <p> Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
Returns the phone number string for line 1, for example, the MSISDN for a GSM phone. Return null if it is unavailable. <p> Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
Returns the alphabetic identifier associated with the line 1 number. Return null if it is unavailable. <p> Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE} nobody seems to call this.
Returns the MSISDN string. for a GSM phone. Return null if it is unavailable. <p> Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
Returns the voice mail number. Return null if it is unavailable. <p> Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
Returns the complete voice mail number. Return null if it is unavailable. <p> Requires Permission: {@link android.Manifest.permission#CALL_PRIVILEGED CALL_PRIVILEGED}
Returns the voice mail count. Return 0 if unavailable. <p> Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
Retrieves the alphabetic identifier associated with the voice mail number. <p> Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
Returns the IMS private user identity (IMPI) that was loaded from the ISIM.
Returns the IMS home network domain name that was loaded from the ISIM.
Returns the IMS public user identities (IMPU) that were loaded from the ISIM.
Returns a constant indicating the call state (cellular) on the device.
Returns a constant indicating the type of activity on a data connection (cellular).
Returns a constant indicating the current data connection state (cellular).
Registers a listener object to receive notification of changes in specified telephony states. <p> To register a listener, pass a {@link PhoneStateListener} and specify at least one telephony state of interest in the events argument. At registration, and when a specified telephony state changes, the telephony manager invokes the appropriate callback method on the listener object and passes the current (udpated) values. <p> To unregister a listener, pass the listener object and set the events argument to {@link PhoneStateListener#LISTEN_NONE LISTEN_NONE} (0).
Returns the CDMA ERI icon index to display
Returns the CDMA ERI icon mode, 0 - ON 1 - FLASHING
Returns the CDMA ERI text,
<p> "Voice capable" means that this device supports circuit-switched (i.e. voice) phone calls over the telephony network, and is allowed to display the in-call UI while a cellular voice call is active. This will be false on "data only" devices which can't make voice calls and don't support any in-call UI. <p> Note: the meaning of this flag is subtly different from the PackageManager.FEATURE_TELEPHONY system feature, which is available on any device with a telephony radio, even if the device is data-only.
<p> If true, this means that the device supports both sending and receiving sms via the telephony network. <p> Note: Voicemail waiting sms, cell broadcasting sms, and MMS are
Test context can be used to access resources from the test's own package as opposed to the resources from the test target package. Access to the latter is provided by the context set with the {@link #setContext} method.
Asserts that launching a given activity is protected by a particular permission by attempting to start the activity and validating that a {@link SecurityException} is thrown that mentions the permission in its error message. Note that an instrumentation isn't needed because all we are looking for is a security error and we don't need to wait for the activity to launch and get a handle to the activity.
Asserts that reading from the content uri requires a particular permission by querying the uri and ensuring a {@link SecurityException} is thrown mentioning the particular permission.
Asserts that writing to the content uri requires a particular permission by inserting into the uri and ensuring a {@link SecurityException} is thrown mentioning the particular permission.
This function is called by various TestCase implementations, at tearDown() time, in order to scrub out any class variables.  This protects against memory leaks in the case where a test case creates a non-static inner class (thus referencing the test case) and gives it to someone else to hold onto.
Injects instrumentation into this test case. This method is called by the test runner during test setup.
Inheritors can access the instrumentation using this.
Utility method for launching an activity. <p>The {@link Intent} used to launch the Activity is: action = {@link Intent#ACTION_MAIN} extras = null, unless a custom bundle is provided here All other fields are null or empty. <p><b>NOTE:</b> The parameter <i>pkg</i> must refer to the package identifier of the package hosting the activity to be launched, which is specified in the AndroidManifest.xml file.  This is not necessarily the same as the java package name.
Helper for running portions of a test on the UI thread. Note, in most cases it is simpler to annotate the test method with {@link android.test.UiThreadTest}, which will run the entire test method on the UI thread. Use this method if you need to switch in and out of the UI thread to perform your test.
For backwards-compatibility after adding isRepetitive
Sends a series of key events through instrumentation and waits for idle. The sequence of keys is a string containing the key names as specified in KeyEvent, without the KEYCODE_ prefix. For instance: sendKeys("DPAD_LEFT A B C DPAD_CENTER"). Each key can be repeated by using the N* prefix. For instance, to send two KEYCODE_DPAD_LEFT, use the following: sendKeys("2*DPAD_LEFT").
Sends a series of key events through instrumentation and waits for idle. For instance: sendKeys(KEYCODE_DPAD_LEFT, KEYCODE_DPAD_CENTER).
Sends a series of key events through instrumentation and waits for idle. Each key code must be preceded by the number of times the key code must be sent. For instance: sendRepeatedKeys(1, KEYCODE_DPAD_CENTER, 2, KEYCODE_DPAD_LEFT).
test before running it.
Returns true if user preference is set to 24-hour format.
Returns a {@link java.text.DateFormat} object that can format the time according to the current locale and the user's 12-/24-hour clock preference.
Returns a {@link java.text.DateFormat} object that can format the date in short form (such as 12/31/1999) according to the current locale and the user's date-order preference.
Returns a {@link java.text.DateFormat} object to format the date as if the date format setting were set to <code>value</code>, including null to use the locale's default format.
Returns a {@link java.text.DateFormat} object that can format the date in long form (such as December 31, 1999) for the current locale.
Returns a {@link java.text.DateFormat} object that can format the date in medium form (such as Dec. 31, 1999) for the current locale.
Gets the current date format stored as a char array. The array will contain 3 elements ({@link #DATE}, {@link #MONTH}, and {@link #YEAR}) in the order specified by the user's format preference.  Note that this order is only appropriate for all-numeric dates; spelled-out (MEDIUM and LONG) dates will generally contain other punctuation, spaces, or words, not just the day, month, and year, and not necessarily in the same order returned here.
Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns a CharSequence containing the requested date.
Given a format string and a {@link java.util.Date} object, returns a CharSequence containing the requested date.
Given a format string and a {@link java.util.Calendar} object, returns a CharSequence containing the requested date.
Return a string for the day of the week.
Return a localized string for AM or PM.
Return a localized string for the month of the year.
Return a localized string for the month of the year, for contexts where the month is not formatted together with a day of the month.
Returns a string describing the elapsed time since startTime.
Returns a string describing 'time' as a time relative to 'now'. <p> Time spans in the past are formatted like "42 minutes ago". Time spans in the future are formatted like "in 42 minutes".
Returns a string describing 'time' as a time relative to 'now'. <p> Time spans in the past are formatted like "42 minutes ago". Time spans in the future are formatted like "in 42 minutes". <p> Can use {@link #FORMAT_ABBREV_RELATIVE} flag to use abbreviated relative times, like "42 mins ago".
Returns the number of days passed between two dates.
Return string describing the elapsed time since startTime formatted like "[relative time/date], [time]". <p> Example output strings for the US date format. <ul> <li>3 mins ago, 10:15 AM</li> <li>yesterday, 12:20 PM</li> <li>Dec 12, 4:12 AM</li> <li>11/14/2007, 8:20 AM</li> </ul>
Returns a string describing a day relative to the current day. For example if the day is today this function returns "Today", if the day was a week ago it returns "7 days ago", and if the day is in 2 weeks it returns "in 14 days".
Format a time so it appears like it would in the status bar clock.
Formats an elapsed time in the form "MM:SS" or "H:MM:SS" for display on the call-in-progress screen.
Fast formatting of h:mm:ss
Fast formatting of m:ss
Format a date / time such that if the then is on the same day as now, it shows just the time and if it's a different day, it shows just the date. <p>The parameters dateFormat and timeFormat should each be one of {@link java.text.DateFormat#DEFAULT}, {@link java.text.DateFormat#FULL}, {@link java.text.DateFormat#LONG}, {@link java.text.DateFormat#MEDIUM} {@link java.text.DateFormat#SHORT}
Return true if this date string is local time
Return a string containing the date and time in RFC2445 format. Ensures that the time is written in UTC.  The Calendar class doesn't really help out with this, so this is slower than it ought to be.
Return a string containing the date and time in RFC2445 format. be written at the end as per RFC2445.  Otherwise, the time is considered in localtime.
Return a string containing the date and time in RFC2445 format.
Formats a date or a time range according to the local conventions. <p> Note that this is a convenience method. Using it involves creating an internal {@link java.util.Formatter} instance on-the-fly, which is somewhat costly in terms of memory and time. This is probably acceptable if you use the method only rarely, but if you rely on it for formatting a large number of dates, consider creating and reusing your own {@link java.util.Formatter} instance and use the version of {@link #formatDateRange(Context, long, long, int) formatDateRange} that takes a {@link java.util.Formatter}. {@link #formatDateRange(Context, Formatter, long, long, int, String) formatDateRange}
Formats a date or a time range according to the local conventions. <p> Note that this is a convenience method for formatting the date or time range in the local time zone. If you want to specify the time zone please use {@link #formatDateRange(Context, Formatter, long, long, int, String) formatDateRange}. Note: be sure to call setLength(0) on StringBuilder passed to the Formatter constructor unless you want the results to accumulate. {@link #formatDateRange(Context, Formatter, long, long, int, String) formatDateRange}
Formats a date or a time range according to the local conventions. <p> Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): <ul> <li>10:15am</li> <li>3:00pm - 4:00pm</li> <li>3pm - 4pm</li> <li>3PM - 4PM</li> <li>08:00 - 17:00</li> <li>Oct 9</li> <li>Tue, Oct 9</li> <li>October 9, 2007</li> <li>Oct 9 - 10</li> <li>Oct 9 - 10, 2007</li> <li>Oct 28 - Nov 3, 2007</li> <li>Dec 31, 2007 - Jan 1, 2008</li> <li>Oct 9, 8:00am - Oct 10, 5:00pm</li> <li>12/31/2007 - 01/01/2008</li> </ul> <p> The flags argument is a bitmask of options from the following list: <ul> <li>FORMAT_SHOW_TIME</li> <li>FORMAT_SHOW_WEEKDAY</li> <li>FORMAT_SHOW_YEAR</li> <li>FORMAT_NO_YEAR</li> <li>FORMAT_SHOW_DATE</li> <li>FORMAT_NO_MONTH_DAY</li> <li>FORMAT_12HOUR</li> <li>FORMAT_24HOUR</li> <li>FORMAT_CAP_AMPM</li> <li>FORMAT_NO_NOON</li> <li>FORMAT_CAP_NOON</li> <li>FORMAT_NO_MIDNIGHT</li> <li>FORMAT_CAP_MIDNIGHT</li> <li>FORMAT_UTC</li> <li>FORMAT_ABBREV_TIME</li> <li>FORMAT_ABBREV_WEEKDAY</li> <li>FORMAT_ABBREV_MONTH</li> <li>FORMAT_ABBREV_ALL</li> <li>FORMAT_NUMERIC_DATE</li> </ul> <p> If FORMAT_SHOW_TIME is set, the time is shown as part of the date range. If the start and end time are the same, then just the start time is shown. <p> If FORMAT_SHOW_WEEKDAY is set, then the weekday is shown. <p> If FORMAT_SHOW_YEAR is set, then the year is always shown. If FORMAT_NO_YEAR is set, then the year is not shown. If neither FORMAT_SHOW_YEAR nor FORMAT_NO_YEAR are set, then the year is shown only if it is different from the current year, or if the start and end dates fall on different years.  If both are set, FORMAT_SHOW_YEAR takes precedence. <p> Normally the date is shown unless the start and end day are the same. If FORMAT_SHOW_DATE is set, then the date is always shown, even for same day ranges. <p> If FORMAT_NO_MONTH_DAY is set, then if the date is shown, just the month name will be shown, not the day of the month.  For example, "January, 2008" instead of "January 6 - 12, 2008". <p> If FORMAT_CAP_AMPM is set and 12-hour time is used, then the "AM" and "PM" are capitalized.  You should not use this flag because in some locales these terms cannot be capitalized, and in many others it doesn't make sense to do so even though it is possible. <p> If FORMAT_NO_NOON is set and 12-hour time is used, then "12pm" is shown instead of "noon". <p> If FORMAT_CAP_NOON is set and 12-hour time is used, then "Noon" is shown instead of "noon".  You should probably not use this flag because in many locales it will not make sense to capitalize the term. <p> If FORMAT_NO_MIDNIGHT is set and 12-hour time is used, then "12am" is shown instead of "midnight". <p> If FORMAT_CAP_MIDNIGHT is set and 12-hour time is used, then "Midnight" is shown instead of "midnight".  You should probably not use this flag because in many locales it will not make sense to capitalize the term. <p> If FORMAT_12HOUR is set and the time is shown, then the time is shown in the 12-hour time format. You should not normally set this. Instead, let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. <p> If FORMAT_24HOUR is set and the time is shown, then the time is shown in the 24-hour time format. You should not normally set this. Instead, let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. <p> If FORMAT_UTC is set, then the UTC time zone is used for the start and end milliseconds unless a time zone is specified. If a time zone is specified it will be used regardless of the FORMAT_UTC flag. <p> If FORMAT_ABBREV_TIME is set and 12-hour time format is used, then the start and end times (if shown) are abbreviated by not showing the minutes if they are zero.  For example, instead of "3:00pm" the time would be abbreviated to "3pm". <p> If FORMAT_ABBREV_WEEKDAY is set, then the weekday (if shown) is abbreviated to a 3-letter string. <p> If FORMAT_ABBREV_MONTH is set, then the month (if shown) is abbreviated to a 3-letter string. <p> If FORMAT_ABBREV_ALL is set, then the weekday and the month (if shown) are abbreviated to 3-letter strings. <p> If FORMAT_NUMERIC_DATE is set, then the date is shown in numeric format instead of using the name of the month.  For example, "12/31/2008" instead of "December 31, 2008". Note: be sure to call setLength(0) on StringBuilder passed to the Formatter constructor unless you want the results to accumulate. or if the FORMAT_UTC flag is being used.
Formats a date or a time according to the local conventions. There are lots of options that allow the caller to control, for example, if the time is shown, if the day of the week is shown, if the month name is abbreviated, if noon is shown instead of 12pm, and so on. For the complete list of options, see the documentation for {@link #formatDateRange}. <p> Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): <ul> <li>10:15am</li> <li>3:00pm</li> <li>3pm</li> <li>3PM</li> <li>08:00</li> <li>17:00</li> <li>noon</li> <li>Noon</li> <li>midnight</li> <li>Midnight</li> <li>Oct 31</li> <li>Oct 31, 2007</li> <li>October 31, 2007</li> <li>10am, Oct 31</li> <li>17:00, Oct 31</li> <li>Wed</li> <li>Wednesday</li> <li>10am, Wed, Oct 31</li> <li>Wed, Oct 31</li> <li>Wednesday, Oct 31</li> <li>Wed, Oct 31, 2007</li> <li>Wed, October 31</li> <li>10/31/2007</li> </ul>
are counted starting at midnight, which means that assuming that the current time is March 31st, 0:30: <ul> <li>"millis=0:10 today" will be displayed as "0:10"</li> <li>"millis=11:30pm the day before" will be displayed as "Mar 30"</li> </ul> If the given millis is in a different year, then the full date is returned in numeric format (e.g., "10/12/2008"). preposition ("at 9:20am", "on 10/12/2008" or "on May 29").
Convenience function to return relative time string without preposition.
Formats a content size to be in the form of bytes, kilobytes, megabytes, etc
Like {@link #formatFileSize}, but trying to generate shorter numbers (showing fewer digits of precision).
Construct a Time object in the timezone named by the string argument "timezone". The time is initialized to Jan 1, 1970.
Construct a Time object in the default timezone. The time is initialized to Jan 1, 1970.
A copy constructor.  Construct a Time object by copying the given Time object.  No normalization occurs.
Return the maximum possible value for the given field given the value of the other fields. Requires that it be normalized for MONTH_DAY and YEAR_DAY.
Clears all values, setting the timezone to the given timezone. Sets isDst to a negative value to mean "unknown".
Compare two {@code Time} objects and return a negative number if {@code a} is less than {@code b}, a positive number if {@code a} is greater than {@code b}, or 0 if they are equal.
Print the current value given the format string provided. See man strftime for what means what. The final string must be less than 256 characters.
Parses a date-time string in either the RFC 2445 format or an abbreviated format that does not include the "time" field.  For example, all of the following strings are valid: <ul> <li>"20081013T160000Z"</li> <li>"20081013T160000"</li> <li>"20081013"</li> </ul> Returns whether or not the time is in UTC (ends with Z).  If the string ends with "Z" then the timezone is set to UTC.  If the date-time string included only a date and no time field, then the <code>allDay</code> field of this Time class is set to true and the <code>hour</code>, <code>minute</code>, and <code>second</code> fields are set to zero; otherwise (a time field was included in the date-time string) <code>allDay</code> is set to false. The fields <code>weekDay</code>, <code>yearDay</code>, and <code>gmtoff</code> are always set to zero, and the field <code>isDst</code> is set to -1 (unknown).  To set those fields, call {@link #normalize(boolean)} after parsing. To parse a date-time string and convert it to UTC milliseconds, do something like this: <pre> Time time = new Time(); String date = "20081013T160000Z"; time.parse(date); long millis = time.normalize(false); </pre>
Parse a time in RFC 3339 format.  This method also parses simple dates (that is, strings that contain no time or time offset).  For example, all of the following strings are valid: <ul> <li>"2008-10-13T16:00:00.000Z"</li> <li>"2008-10-13T16:00:00.000+07:00"</li> <li>"2008-10-13T16:00:00.000-07:00"</li> <li>"2008-10-13"</li> </ul> <p> If the string contains a time and time offset, then the time offset will be used to convert the time value to UTC. </p> <p> If the given string contains just a date (with no time field), then the {@link #allDay} field is set to true and the {@link #hour}, {@link #minute}, and  {@link #second} fields are set to zero. </p> <p> Returns true if the resulting time value is in UTC time. </p>
Returns the timezone string that is currently set for the device.
Copy the value of that to this Time object. No normalization happens.
Sets the fields. Sets weekDay, yearDay and gmtoff to 0, and isDst to -1. Call {@link #normalize(boolean)} if you need those.
Sets the date from the given fields.  Also sets allDay to true. Sets weekDay, yearDay and gmtoff to 0, and isDst to -1. Call {@link #normalize(boolean)} if you need those.
Returns true if the time represented by this Time object occurs before the given time.
Returns true if the time represented by this Time object occurs after the given time.
Computes the week number according to ISO 8601.  The current Time object must already be normalized because this method uses the yearDay and weekDay fields. <p> In IS0 8601, weeks start on Monday. The first week of the year (week 1) is defined by ISO 8601 as the first week with four or more of its days in the starting year. Or equivalently, the week containing January 4.  Or equivalently, the week with the year's first Thursday in it. </p> <p> The week number can be calculated by counting Thursdays.  Week N contains the Nth Thursday of the year. </p>
Return a string in the RFC 3339 format. <p> If allDay is true, expresses the time as Y-M-D</p> <p> Otherwise, if the timezone is UTC, expresses the time as Y-M-D-T-H-M-S UTC</p> <p> Otherwise the time is expressed the time as Y-M-D-T-H-M-S +- GMT</p>
Returns true if the day of the given time is the epoch on the Julian Calendar (January 1, 1970 on the Gregorian calendar).
Computes the Julian day number, given the UTC milliseconds and the offset (in seconds) from UTC.  The Julian day for a given date will be the same for every timezone.  For example, the Julian day for July 1, 2008 is 2454649.  This is the same value no matter what timezone is being used.  The Julian day is useful for testing if two events occur on the same day and for determining the relative time of an event from the present ("yesterday", "3 days ago", etc.). <p> Use {@link #toMillis(boolean)} to get the milliseconds.
<p>Sets the time from the given Julian day number, which must be based on the same timezone that is set in this Time object.  The "gmtoff" field need not be initialized because the given Julian day may have a different GMT offset than whatever is currently stored in this Time object anyway. After this method returns all the fields will be normalized and the time will be set to 12am at the beginning of the given Julian day. </p> <p> The only exception to this is if 12am does not exist for that day because of daylight saving time.  For example, Cairo, Eqypt moves time ahead one hour at 12am on April 25, 2008 and there are a few other places that also change daylight saving time at 12am.  In those cases, the time will be set to 1am. </p>
Returns the week since {@link #EPOCH_JULIAN_DAY} (Jan 1, 1970) adjusted for first day of week. This takes a julian day and the week start day and calculates which week since {@link #EPOCH_JULIAN_DAY} that day occurs in, starting at 0. *Do not* use this to compute the ISO week number for the year.
Takes a number of weeks since the epoch and calculates the Julian day of the Monday for that week. This assumes that the week containing the {@link #EPOCH_JULIAN_DAY} is considered week 0. It returns the Julian day for the Monday week weeks after the Monday of the week containing the epoch.
Performs the action that happens when you press the {@link KeyEvent#KEYCODE_DEL} key in a {@link TextView}.  If there is a selection, deletes the selection; otherwise, deletes the character before the cursor, if any; ALT+DEL deletes everything on the line the cursor is on.
Performs the action that happens when you press the {@link KeyEvent#KEYCODE_FORWARD_DEL} key in a {@link TextView}.  If there is a selection, deletes the selection; otherwise, deletes the character before the cursor, if any; ALT+FORWARD_DEL deletes everything on the line the cursor is on.
Base implementation handles ACTION_MULTIPLE KEYCODE_UNKNOWN by inserting the event's text into the content.
Gets the meta state used for movement using the modifiers tracked by the text buffer as well as those present in the key event. The movement meta state excludes the state of locked modifiers or the SHIFT key since they are not used by movement actions (but they may be used for selection).
Performs a movement key action. The default implementation decodes the key down and invokes movement actions such as {@link #down} and {@link #up}. {@link #onKeyDown(TextView, Spannable, int, KeyEvent)} calls this method once to handle an {@link KeyEvent#ACTION_DOWN}. {@link #onKeyOther(TextView, Spannable, KeyEvent)} calls this method repeatedly to handle each repetition of an {@link KeyEvent#ACTION_MULTIPLE}.
Performs a left movement action. Moves the cursor or scrolls left by one character.
Performs a right movement action. Moves the cursor or scrolls right by one character.
Performs an up movement action. Moves the cursor or scrolls up by one line.
Performs a down movement action. Moves the cursor or scrolls down by one line.
Performs a page-up movement action. Moves the cursor or scrolls up by one page.
Performs a page-down movement action. Moves the cursor or scrolls down by one page.
Performs a top movement action. Moves the cursor or scrolls to the top of the buffer.
Performs a bottom movement action. Moves the cursor or scrolls to the bottom of the buffer.
Performs a line-start movement action. Moves the cursor or scrolls to the start of the line.
Performs an line-end movement action. Moves the cursor or scrolls to the end of the line.
Performs a home movement action. Moves the cursor or scrolls to the start of the line or to the top of the document depending on whether the insertion point is being moved or the document is being scrolled.
Performs an end movement action. Moves the cursor or scrolls to the start of the line or to the top of the document depending on whether the insertion point is being moved or the document is being scrolled.
Performs a scroll left action. Scrolls left by the specified number of characters.
Performs a scroll right action. Scrolls right by the specified number of characters.
Performs a scroll up action. Scrolls up by the specified number of lines.
Performs a scroll down action. Scrolls down by the specified number of lines.
Performs a scroll page up action. Scrolls up by one page.
Performs a scroll page up action. Scrolls down by one page.
Performs a scroll to top action. Scrolls to the top of the document.
Performs a scroll to bottom action. Scrolls to the bottom of the document.
Performs a scroll to line start action. Scrolls to the start of the line.
Performs a scroll to line end action. Scrolls to the end of the line.
Creates a new CharacterPickerDialog that presents the specified <code>options</code> for insertion or replacement (depending on the sense of <code>insert</code>) into <code>text</code>.
Handles clicks on the character buttons.
Handles clicks on the Cancel button.
Overrides the superclass's lookup method to prefer the number field from the KeyEvent.
Allocates a DigitsKeyListener that accepts the digits 0 through 9.
Allocates a DigitsKeyListener that accepts the digits 0 through 9, plus the minus sign (only at the beginning) and/or decimal point (only one per field) if specified.
Returns a DigitsKeyListener that accepts the digits 0 through 9.
Returns a DigitsKeyListener that accepts the digits 0 through 9, plus the minus sign (only at the beginning) and/or decimal point (only one per field) if specified.
Returns a DigitsKeyListener that accepts only the characters that appear in the specified String.  Note that not all characters may be available on every keyboard.
The character to be replaced is \r.
The character that \r is replaced with is \uFEFF.
Resets all meta state to inactive.
Gets the state of the meta keys.
Gets the state of a particular meta key.
Call this method after you handle a keypress so that the meta state will be reset to unshifted (if it is not still down) or primed to be reset to unshifted (once it is released).
Returns true if this object is one that this class would use to keep track of any meta state in the specified text.
Returns true if this object is one that this class would use to keep track of the selecting meta state in the specified text.
Call this if you are a method that ignores the locked meta state (arrow keys, for example) and you handle a key.
Handles presses of the meta keys.
Start selecting text.
Stop selecting text.  This does not actually collapse the selection; call {@link android.text.Selection#setSelection} too.
Handles release of the meta keys.
Call this method after you handle a keypress so that the meta state will be reset to unshifted (if it is not still down) or primed to be reset to unshifted (once it is released).  Takes the current state, returns the new state.
Handles presses of the meta keys.
Handles release of the meta keys.
Clears the state of the specified meta key if it is locked. {@link #META_ALT_ON} or {@link #META_SYM_ON}.
Returns a new or existing instance with the specified capitalization and correction properties.
Gets an instance of the listener suitable for use with full keyboards. Disables auto-capitalization, auto-text and long-press initiated on-screen character pickers.
Marks the specified region of <code>content</code> as having contained <code>original</code> prior to AutoText replacement. Call this method when you have done or are about to do an AutoText-style replacement on a region of text and want to let the same mechanism (the user pressing DEL immediately after the change) undo the replacement.
package */ static class Replaced implements NoCopySpan
Returns a CharSequence that will mirror the contents of the source CharSequence but with the characters in {@link #getOriginal} replaced by ones from {@link #getReplacement}.
The characters to be replaced are \n and \r.
The character \n is replaced with is space; the character \r is replaced with is FEFF (zero width space).
Creates a new TextKeyListener with the specified capitalization and correction properties.
Returns a new or existing instance with no automatic capitalization or correction.
Returns whether it makes sense to automatically capitalize at the specified position in the specified text, with the specified rules.
Clear all the input state (autotext, autocap, multitap, undo) from the specified Editable, going beyond Editable.clear(), which just clears the text but not the input state.
Scrolls the specified widget to the specified coordinates, except constrains the X scrolling position to the horizontal regions of the text that will be visible after scrolling to the specified Y position.
Handles touch events for dragging.  You may want to do other actions like moving the cursor on touch as well.
Constructs a WordIterator using the default locale.
Constructs a new WordIterator for the specified locale.
If <code>offset</code> is within a word, returns the index of the first character of that word, otherwise returns BreakIterator.DONE. The offsets that are considered to be part of a word are the indexes of its characters, <i>as well as</i> the index of its last character plus one. If offset is the index of a low surrogate character, BreakIterator.DONE will be returned. Valid range for offset is [0..textLength] (note the inclusive upper bound). The returned value is within [0..offset] or BreakIterator.DONE.
If <code>offset</code> is within a word, returns the index of the last character of that word plus one, otherwise returns BreakIterator.DONE. The offsets that are considered to be part of a word are the indexes of its characters, <i>as well as</i> the index of its last character plus one. If offset is the index of a low surrogate character, BreakIterator.DONE will be returned. Valid range for offset is [0..textLength] (note the inclusive upper bound). The returned value is within [offset..textLength] or BreakIterator.DONE.
Set the text size to <code>size</code> physical pixels.
Set the text size to <code>size</code> physical pixels, or to <code>size</code> device-independent pixels if <code>dip</code> is true.
A given CharacterStyle can only applied to a single region of a given Spanned.  If you need to attach the same CharacterStyle to multiple regions, you can use this method to wrap it with a new object that will have the same effect but be a distinct object so that it can also be attached without conflict.
Returns "this" for most CharacterStyles, but for CharacterStyles that were generated by {@link #wrap}, returns the underlying CharacterStyle.
Creates a new Passthrough of the specfied CharacterStyle.
Returns the vertical alignment of this span, one of {@link #ALIGN_BOTTOM} or {@link #ALIGN_BASELINE}.
{@link DynamicDrawableSpan#ALIGN_BASELINE}.
Returns the source string that was saved during construction.
Constructor taking separate indents for the first and subsequent lines.
Constructor taking an indent for all lines.
Creates a new Passthrough of the specfied MetricAffectingSpan.
include bold, italic, and normal. Values are constants defined in {@link android.graphics.Typeface}.
Returns the style constant defined in {@link android.graphics.Typeface}.
{@link SuggestionSpan#SUGGESTIONS_MAX_SIZE} will be considered. selects one of the suggestions.
a notification when the user selects one of the suggestions. The notification will include the original string, the suggested replacement string as well as the hashCode of this span. The class will get notified by an intent that has those information. This is an internal API because only the framework should know the class name.
Uses the specified TextAppearance resource to determine the text appearance.  The <code>appearance</code> should be, for example, <code>android.R.style.TextAppearance_Small</code>.
Uses the specified TextAppearance resource to determine the text appearance, and the specified text color resource to determine the color.  The <code>appearance</code> should be, for example, <code>android.R.style.TextAppearance_Small</code>, and the <code>colorList</code> should be, for example, <code>android.R.styleable.Theme_textColorPrimary</code>.
Makes text be drawn with the specified typeface, size, style, and colors.
Returns the typeface family specified by this span, or <code>null</code> if it does not specify one.
Returns the text color specified by this span, or <code>null</code> if it does not specify one.
Returns the link color specified by this span, or <code>null</code> if it does not specify one.
Returns the text style specified by this span, or <code>0</code> if it does not specify one.
"monospace", "serif", and "sans-serif".
Returns the font family name.
Filters out web URL matches that occur after an at-sign (@).  This is to prevent turning the domain name in an email address into a web link.
Filters out URL matches that don't have enough digits to be a phone number.
Transforms matched phone number text into something suitable to be used in a tel: URL.  It does this by removing everything but the digits and plus signs.  For instance: &apos;+1 (919) 555-1212&apos; becomes &apos;+19195551212&apos;
Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links. If the mask is nonzero, it also removes any existing URLSpans attached to the Spannable, to avoid problems if you call it repeatedly on the same text.
Scans the text of the provided TextView and turns all occurrences of the link types indicated in the mask into clickable links.  If matches are found the movement method for the TextView is set to LinkMovementMethod.
Applies a regex to the text of a TextView turning the matches into links.  If links are found then UrlSpans are applied to the link text match areas, and the movement method for the text is changed to LinkMovementMethod.
Applies a regex to a Spannable turning the matches into links.
Creates a new Rfc822Token with the specified name, address, and comment.
Returns the name part.
Returns the address part.
Returns the comment part.
Changes the name to the specified name.
Changes the address to the specified address.
Changes the comment to the specified comment.
Returns the name (with quoting added if necessary), the comment (in parentheses), and the address (in angle brackets). This should be suitable for inclusion in an RFC 822 address list.
Returns the name, conservatively quoting it if there are any characters that are likely to cause trouble outside of a quoted string, or returning it literally if it seems safe.
Returns the name, with internal backslashes and quotation marks preceded by backslashes.  The outer quote marks themselves are not added by this method.
Returns the comment, with internal backslashes and parentheses preceded by backslashes.  The outer parentheses themselves are not added by this method.
This constructor will try to take a string like "Foo Bar (something) &lt;foo\@google.com&gt;, blah\@google.com (something)" and convert it into one or more Rfc822Tokens, output into the supplied collection. It does *not* decode MIME encoded-words; charset conversion must already have taken place if necessary. It will try to be tolerant of broken syntax instead of returning an error.
This method will try to take a string like "Foo Bar (something) &lt;foo\@google.com&gt;, blah\@google.com (something)" and convert it into one or more Rfc822Tokens. It does *not* decode MIME encoded-words; charset conversion must already have taken place if necessary. It will try to be tolerant of broken syntax instead of returning an error.
Terminates the specified address with a comma and space. This assumes that the specified text already has valid syntax. The Adapter subclass's convertToString() method must make that guarantee.
Create an AlteredCharSequence whose text (and possibly spans) are mirrored from <code>source</code>, except that the range of offsets <code>substart</code> inclusive to <code>subend</code> exclusive are mirrored instead from <code>sub</code>, beginning at offset 0.
Access the ICU bidi implementation. package */ class AndroidBidi {
Returns run direction information for a line within a paragraph.
Returns the instance of AutoText. If the locale has changed, it will create a new instance of AutoText for the locale.
Retrieves a possible spelling correction for the specified range of text.  Returns null if no correction can be found. The View is used to get the current Locale and Resources.
Returns the size of the auto text dictionary. The return value can be zero if there is no auto correction data available for the current locale.
Returns the size of the dictionary.
Returns a BoringLayout for the specified text, potentially reusing this one if it is already suitable.  The caller must make sure that no one is still using this Layout.
Returns null if not boring; the width, ascent, and descent if boring.
Returns null if not boring; the width, ascent, and descent in the provided Metrics object (or a new one if the provided one was null) if boring.
Callback for the ellipsizer to report what region it ellipsized.
Make a layout for the specified text that will be updated as the text is changed.
Make a layout for the transformed text (password transformation being the primary example of a transformation) that will be updated as the base text is changed.
Make a layout for the transformed text (password transformation being the primary example of a transformation) that will be updated as the base text is changed. If ellipsize is non-null, the Layout will ellipsize the text down to ellipsizedWidth.
Make a layout for the transformed text (password transformation being the primary example of a transformation) that will be updated as the base text is changed. If ellipsize is non-null, the Layout will ellipsize the text down to ellipsizedWidth. *@hide
Returns the standard Editable Factory.
Returns a new SpannedStringBuilder from the specified CharSequence.  You can override this to provide a different kind of Spanned.
Returns displayable styled text from the provided HTML string. Any &lt;img&gt; tags in the HTML will display as a generic replacement image which your program can then go through and replace with real images. <p>This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
Returns displayable styled text from the provided HTML string. Any &lt;img&gt; tags in the HTML will use the specified ImageGetter to request a representation of the image (use null if you don't want this) and the specified TagHandler to handle unknown tags (specify null if you don't want this). <p>This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
Returns an HTML representation of the provided Spanned text.
Converts an HTML color (named or numeric) to an integer RGB value.
Return how wide a layout must be in order to display the specified text with one line per paragraph.
Return how wide a layout must be in order to display the specified text slice with one line per paragraph.
Subclasses of Layout use this constructor to set the display text, width, and other standard properties. various attributes of the paint. override the alignment. default line spacing
Replace constructor properties of this Layout with new ones.  Be careful.
Draw this Layout on the specified Canvas.
Draw this Layout on the specified canvas, with the highlight path drawn between the background and the text.
Return the start position of the line, given the left and right bounds of the margins.
Return the text that is displayed by this Layout.
Return the base Paint properties for this layout. Do NOT change the paint, which may result in funny drawing for this layout.
Return the width of this layout.
Return the width to which this Layout is ellipsizing, or {@link #getWidth} if it is not doing anything special.
Increase the width of this layout to the specified width. Be careful to use this only when you know it is appropriate&mdash; it does not cause the text to reflow to use the full new width.
Return the total height of this layout.
Return the base alignment of this layout.
Return what the text height is multiplied by to get the line height.
Return the number of units of leading that are added to each line.
Return the heuristic used to determine paragraph text direction.
Return the baseline for the specified line (0&hellip;getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it.
Returns true if the character at offset and the preceding character are at different run levels (and thus there's a split caret).
Returns true if the character at offset is right to left (RTL).
Get the primary horizontal position for the specified text offset. This is the location where a new character would be inserted in the paragraph's primary direction.
Get the secondary horizontal position for the specified text offset. This is the location where a new character would be inserted in the direction other than the paragraph's primary direction.
Get the leftmost position that should be exposed for horizontal scrolling on the specified line.
Get the rightmost position that should be exposed for horizontal scrolling on the specified line.
Gets the unsigned horizontal extent of the specified line, including leading margin indent, but excluding trailing whitespace.
Gets the unsigned horizontal extent of the specified line, including leading margin indent and trailing whitespace.
Like {@link #getLineExtent(int,TabStops,boolean)} but determines the tab stops instead of using the ones passed in.
Returns the signed horizontal extent of the specified line, excluding leading margin.  If full is false, excludes trailing whitespace.
Get the line number corresponding to the specified vertical position. If you ask for a position above 0, you get 0; if you ask for a position below the bottom of the text, you get the last line. FIXME: It may be faster to do a linear search for layouts without many lines.
Get the line number on which the specified text offset appears. If you ask for a position before 0, you get 0; if you ask for a position beyond the end of the text, you get the last line.
Get the character offset on the specified line whose position is closest to the specified horizontal position.
Return the text offset after the last character on the specified line.
Return the text offset after the last visible character (so whitespace is not counted) on the specified line.
Return the vertical position of the bottom of the specified line.
Return the vertical position of the baseline of the specified line.
Get the ascent of the text on the specified line. The return value is negative to match the Paint.ascent() convention.
Fills in the specified Path with a representation of a cursor at the specified offset.  This will often be a vertical line but can be multiple discontinuous lines in text with multiple directionalities.
Fills in the specified Path with a representation of a highlight between the specified offsets.  This will often be a rectangle or a potentially discontinuous set of rectangles.  If the start and end are the same, the returned path is empty.
Get the alignment of the specified paragraph, taking into account markup attached to it.
Get the left edge of the specified paragraph, inset by left margins.
Get the right edge of the specified paragraph, inset by right margins.
Returns the effective leading margin (unsigned) for this line, taking into account LeadingMarginSpan and LeadingMarginSpan2.
Returns the position of the next tab stop after h on the line. on the line will be used.  If there are no tabs, a default offset will be used to compute the tab stop.
Returns the same as <code>text.getSpans()</code>, except where <code>start</code> and <code>end</code> are the same and are not at the very beginning of the text, in which case an empty array is returned instead. <p> This is needed because of the special case that <code>getSpans()</code> on an empty range returns the spans adjacent to that range, which is primarily for the sake of <code>TextWatchers</code> so they will get notifications when text goes from empty to non-empty.  But it also has the unfortunate side effect that if the text ends with an empty paragraph, that paragraph accidentally picks up the styles of the preceding paragraph (even though those styles will not be picked up by new text that is inserted into the empty paragraph). <p> The reason it just checks whether <code>start</code> and <code>end</code> is the same is that the only time a line can contain 0 characters is if it is the final paragraph of the Layout; otherwise any line will contain at least one printing or newline character.  The reason for the additional check if <code>start</code> is greater than 0 is that if the empty paragraph is the entire content of the buffer, paragraph styles that are already applied to the buffer will apply to text that is inserted into it.
package */ int[] mDirections;
package */ static class Ellipsizer implements CharSequence, GetChars { package */ CharSequence mText; package */ Layout mLayout; package */ int mWidth; package */ TextUtils.TruncateAt mMethod;
Base constructor for LoginFilter
Default constructor for LoginFilter doesn't append invalid characters.
This method is called when the buffer is going to replace the range <code>dstart &hellip; dend</code> of <code>dest</code> with the new text from the range <code>start &hellip; end</code> of <code>source</code>.  Returns the CharSequence that we want placed there instead, including an empty string if appropriate, or <code>null</code> to accept the original replacement.  Be careful to not to reject 0-length replacements, as this is what happens when you delete text.
Called when we start processing filter.
Called whenever we encounter an invalid character.
Called when we're done processing filter
Analyzes text for bidirectional runs.  Allocates working buffers.
Creates a new PackedIntVector with the specified width and a height of 0.
Returns the value at the specified row and column.
Sets the value at the specified row and column.
Sets the value at the specified row and column. Private internal version: does not check args.
Increments all values in the specified column whose row >= the specified row by the specified delta.
Inserts a new row of values at the specified row offset.
Deletes the specified number of rows starting with the specified row.
Returns the number of rows in the PackedIntVector.  This number will change as rows are inserted and deleted.
Returns the width of the PackedIntVector.  This number is set at construction and will not change.
Grows the value and gap arrays to be large enough to store at least one more than the current number of rows.
Moves the gap in the values of the specified column to begin at the specified row.
Moves the gap in the row indices to begin at the specified row.
Return the offset of the selection anchor or cursor, or -1 if there is no selection or cursor.
Return the offset of the selection edge or cursor, or -1 if there is no selection or cursor.
Set the selection anchor to <code>start</code> and the selection edge to <code>stop</code>.
Move the cursor to offset <code>index</code>.
Select the entire text.
Move the selection edge to offset <code>index</code>.
Remove the selection or cursor, if any, from the text.
Move the cursor to the buffer offset physically above the current offset, or return false if the cursor is already on the top line.
Move the cursor to the buffer offset physically below the current offset, or return false if the cursor is already on the bottom line.
Move the cursor to the buffer offset physically to the left of the current offset, or return false if the cursor is already at the left edge of the line and there is not another line to move it to.
Move the cursor to the buffer offset physically to the right of the current offset, or return false if the cursor is already at at the right edge of the line and there is not another line to move it to.
Move the selection end to the buffer offset physically above the current selection end.
Move the selection end to the buffer offset physically below the current selection end.
Move the selection end to the buffer offset physically to the left of the current selection end.
Move the selection end to the buffer offset physically to the right of the current selection end.
Returns the standard Spannable Factory.
Returns a new SpannableString from the specified CharSequence. You can override this to provide a different kind of Spannable.
Create a new SpannableStringBuilder with empty contents
Create a new SpannableStringBuilder containing a copy of the specified text, including its spans if any.
Create a new SpannableStringBuilder containing a copy of the specified slice of the specified text, including its spans if any.
Return the char at the specified offset within the buffer.
Return the number of chars in the buffer.
Documentation from interface
Documentation from interface
Documentation from interface
Documentation from interface
Documentation from interface
Documentation from interface
Mark the specified range of text with the specified object. The flags determine how the span will behave when text is inserted at the start or end of the span's range.
Remove the specified markup object from the buffer.
Return the buffer offset of the beginning of the specified markup object, or -1 if it is not attached to this buffer.
Return the buffer offset of the end of the specified markup object, or -1 if it is not attached to this buffer.
Return the flags of the end of the specified markup object, or 0 if it is not attached to this buffer.
Return the next offset after <code>start</code> but less than or equal to <code>limit</code> where a span of the specified type begins or ends.
Return a new CharSequence containing a copy of the specified range of this buffer, including the overlapping spans.
Copy the specified range of chars from this buffer into the specified array, beginning at the specified offset.
Don't call this yourself -- exists for Canvas to use internally. {@hide}
Don't call this yourself -- exists for Canvas to use internally. {@hide}
Don't call this yourself -- exists for Paint to use internally. {@hide}
Don't call this yourself -- exists for Paint to use internally. {@hide}
Don't call this yourself -- exists for Paint to use internally. {@hide}
Documentation from interface
Documentation from interface
package */ abstract class SpannableStringInternal
subclasses must do subSequence() to preserve type
Returns true if the specified character is one of those specified as being Ideographic (class ID) by the Unicode Line Breaking Algorithm to break between a pair of.
Returns a new TextLine from the shared pool.
Puts a TextLine back into the shared pool. Do not use this TextLine once it has been returned. TextLine
Initializes a TextLine and prepares it for use.
Renders the TextLine.
Returns metrics information for the entire line.
Returns information about a position on the line. line length, inclusive before offset, false to measure the leading edge of the character at offset. character, can be null. character edge.
Draws a unidirectional (but possibly multi-styled) run of text. Only valid if needWidth is true.
Measures a unidirectional (but possibly multi-styled) run of text. run, can be null. of the character at offset, based on the run (not paragraph) direction
Walk the cursor through this line, skipping conjuncts and zero-width characters. <p>This function cannot properly walk the cursor off the ends of the line since it does not know about any shaping on the previous/following line that might affect the cursor position. Callers must either avoid these situations or handle the result specially. length of the line, inclusive of the line, the previous/following line should be examined to get the actual offset.
Returns the next valid offset within this directional run, skipping conjuncts and zero-width characters.  This should not be called to walk off the end of the line, since the returned values might not be valid on neighboring lines.  If the returned offset is less than zero or greater than the line length, the offset should be recomputed on the preceding or following line, respectively. offset
Utility function for measuring and rendering text.  The text must not include a tab or emoji. valid if needWidth is true
Utility function for measuring and rendering a replacement. valid if needWidth is true
Utility function for handling a unidirectional run.  The run must not contain tabs or emoji but can contain styles. valid if needWidth is true
Render a text run with the set-up paint.
Returns the ascent of the text at start.  This is used for scaling emoji.
Returns the next tab position.
Copy the fields from tp into this TextPaint, including the fields inherited from Paint.
Defines a custom underline for this Paint.
Create a new String object containing the given range of characters from the source string.  This is different than simply calling {@link CharSequence#subSequence(int, int) CharSequence.subSequence} in that it does not preserve any style runs in the source sequence, allowing a more efficient implementation.
Returns list of multiple {@link CharSequence} joined into a single {@link CharSequence} separated by localized delimiter such as ", ".
String.split() returns [''] when the string to be split is empty. This returns []. This does not remove any empty strings from the result. For example split("a,", ","  ) returns {"a", ""}.
Splits a string on a pattern. String.split() returns [''] when the string to be split is empty. This returns []. This does not remove any empty strings from the result.
Initializes the splitter. setString may be called later.
Sets the string to split
XXX currently this only reverses chars, not spans
Flatten a CharSequence and whatever styles can be copied across processes into the parcel.
Debugging tool to print the spans in a CharSequence.  The output will be printed one span per line.  If the CharSequence is not a Spanned, then the entire string will be printed on a single line.
Return a new CharSequence in which each of the source strings is replaced by the corresponding element of the destinations.
Replace instances of "^1", "^2", etc. in the <code>template</code> CharSequence with the corresponding <code>values</code>.  "^^" is used to produce a single caret in the output.  Only up to 9 replacement values are supported, "^10" will be produce the first replacement value followed by a '0'. placeholder values.  This object is not modified; a copy is returned. first is substituted for "^1", the second for "^2", and so on. value that was not provided, or if more than 9 values are provided.
Copies the spans from the region <code>start...end</code> in <code>source</code> to the region <code>destoff...destoff+end-start</code> in <code>dest</code>. Spans in <code>source</code> that begin before <code>start</code> or end after <code>end</code> but overlap this range are trimmed as if they began at <code>start</code> or ended at <code>end</code>. are out of range in <code>dest</code>.
Returns the original text if it fits in the specified width given the properties of the specified Paint, or, if it does not fit, a truncated copy with ellipsis character added at the specified edge or center.
Returns the original text if it fits in the specified width given the properties of the specified Paint, or, if it does not fit, a copy with ellipsis character added at the specified edge or center. If <code>preserveLength</code> is specified, the returned copy will be padded with zero-width spaces to preserve the original length and offsets instead of truncating. If <code>callback</code> is non-null, it will be called to report the start and end of the ellipsized range.  TextDirection is determined by the first strong directional character.
Returns the original text if it fits in the specified width given the properties of the specified Paint, or, if it does not fit, a copy with ellipsis character added at the specified edge or center. If <code>preserveLength</code> is specified, the returned copy will be padded with zero-width spaces to preserve the original length and offsets instead of truncating. If <code>callback</code> is non-null, it will be called to report the start and end of the ellipsized range.
Converts a CharSequence of the comma-separated form "Andy, Bob, Charles, David" that is too wide to fit into the specified width into one like "Andy, Bob, 2 more".
Html-encode the string.
Returns a CharSequence concatenating the specified CharSequences, retaining their spans if any.
Returns whether the given CharSequence contains any printable characters.
Returns whether this character is a printable character.
Returns whether the given CharSequence contains only digits.
Determine what caps mode should be in effect at the current offset in the text.  Only the mode bits set in <var>reqModes</var> will be checked.  Note that the caps mode flags here are explicitly defined to match those in {@link InputType}. {@link #CAP_MODE_CHARACTERS}, {@link #CAP_MODE_WORDS}, and {@link #CAP_MODE_SENTENCES}. at the current position, which is any combination of {@link #CAP_MODE_CHARACTERS}, {@link #CAP_MODE_WORDS}, and {@link #CAP_MODE_SENTENCES}.
Does a comma-delimited list 'delimitedString' contain a certain item? (without allocating memory)
Decode the Base64-encoded data in input and return the data in a new byte array. <p>The padding '=' characters at the end are considered optional, but if any are present, there must be the correct number of them. incorrect padding
len} bytes could decode to.
Decode another block of input data.
Base64-encode the given data and return a newly allocated String with the result.
Base64-encode the given data and return a newly allocated byte[] with the result.
len} bytes could encode to.
An InputStream that performs Base64 decoding on the data read from the wrapped stream.
Performs Base64 encoding or decoding on the data read from the wrapped InputStream.
Read data from the input stream into inputBuffer, then decode/encode it into the empty coder.output, and reset the outputStart and outputEnd pointers.
Performs Base64 encoding on the data written to the stream, writing the encoded data to another OutputStream.
Performs Base64 encoding or decoding on the data written to the stream, writing the encoded/decoded data to another OutputStream.
Flush any buffered data from calls to write(int).  Needed before doing a write(byte[], int, int) or a close().
If b.length is at least len, return b.  Otherwise return a new byte array of length len.
This class is uninstantiable.
Returns the name of the vendor-specific character set corresponding to the given original character set name and vendor. If there is no vendor-specific character set for the given name/vendor pair, this returns the original character set name. there is no specialized name
Returns the name of the vendor-specific character set corresponding to the given original character set name and the default vendor (that is, the targeted vendor of the device this code is running on). This method merely calls through to {@link #nameForVendor(String,String)}, passing the default vendor as the second argument. there is no specialized name
Returns the vendor-specific character set corresponding to the given original character set name and vendor. If there is no vendor-specific character set for the given name/vendor pair, this returns the character set corresponding to the original name. The vendor name is matched case-insensitively. This method merely calls {@code Charset.forName()} on a name transformed by a call to {@link #nameForVendor(String,String)}. directly to {@code charsetName} if there is no specialized variant set is not supported by the system has invalid syntax
Returns the vendor-specific character set corresponding to the given original character set name and default vendor (that is, the targeted vendor of the device this code is running on). This method merely calls through to {@link #charsetForVendor(String,String)}, passing the default vendor as the second argument. directly to {@code charsetName} if there is no specialized variant set is not supported by the system has invalid syntax
Returns whether the given character set name indicates the Shift-JIS encoding. Returns false if the name is null. {@code false} if not
Gets the default vendor for this build.
in terms of {@link java.util.Calendar} constants such as {@link java.util.Calendar#SUNDAY}.
depending on whether the selection is in the first or last row.
Move up one box, potentially flipping to the previous month. due to the move.
Move down one box, potentially flipping to the next month. due to the move.
Move left one box, potentially flipping to the previous month. due to the move.
Move right one box, potentially flipping to the next month. due to the move.
<p>Filters objects against the <code>ANDROID_OBJECT_FILTER</code> environment variable. This environment variable can filter objects based on their class name and attribute values.</p> <p>Here is the syntax for <code>ANDROID_OBJECT_FILTER</code>:</p> <p><code>ClassName@attribute1=value1@attribute2=value2...</code></p> <p>Examples:</p> <ul> <li>Select TextView instances: <code>TextView</code></li> <li>Select TextView instances of text "Loading" and bottom offset of 22: <code>TextView@text=Loading.*@bottom=22</code></li> </ul> <p>The class name and the values are regular expressions.</p> <p>This class is useful for debugging and logging purpose:</p> <pre> if (DEBUG) { if (DebugUtils.isObjectSelected(childView) && LOGV_ENABLED) { } </pre> <p><strong>NOTE</strong>: This method is very expensive as it relies heavily on regular expressions and reflection. Calls to this method should always be stripped out of the release binaries and avoided as much as possible in debug mode.</p>
Read events from the log, filtered by type.
Get the event type tag code associated with an event name.
Read TAGS_FILE, populating sTagCodes and sTagNames, if not already done.
Creates a new instance that reads a JSON-encoded stream from {@code in}.
Configure this parser to be  be liberal in what it accepts. By default, this parser is strict and only accepts JSON as specified by <a parser to lenient causes it to ignore the following syntax errors: <ul> <li>End of line comments starting with {@code //} or {@code #} and <li>C-style comments starting with {@code /*} and ending with <li>Names that are unquoted or {@code 'single quoted'}. <li>Strings that are unquoted or {@code 'single quoted'}. <li>Array elements separated by {@code ;} instead of {@code ,}. <li>Unnecessary array separators. These are interpreted as if null <li>Names and values separated by {@code =} or {@code =>} instead of <li>Name/value pairs separated by {@code ;} instead of {@code ,}. </ul>
Consumes the next token from the JSON stream and asserts that it is the beginning of a new array.
Consumes the next token from the JSON stream and asserts that it is the beginning of a new object.
Consumes the next token from the JSON stream and asserts that it is the end of the current array.
Consumes {@code expected}.
Advances the cursor in the JSON stream to the next token.
Returns the next token, a {@link JsonToken#NAME property name}, and consumes it.
Returns the {@link JsonToken#STRING string} value of the next token, consuming it. If the next token is a number, this method will return its string form.
Returns the {@link JsonToken#BOOLEAN boolean} value of the next token, consuming it.
Consumes the next token from the JSON stream and asserts that it is a literal null.
Returns the {@link JsonToken#NUMBER double} value of the next token, consuming it. If the next token is a string, this method will attempt to parse it as a double using {@link Double#parseDouble(String)}.
Returns the {@link JsonToken#NUMBER long} value of the next token, consuming it. If the next token is a string, this method will attempt to parse it as a long. If the next token's numeric value cannot be exactly represented by a Java {@code long}, this method throws.
Returns the {@link JsonToken#NUMBER int} value of the next token, consuming it. If the next token is a string, this method will attempt to parse it as an int. If the next token's numeric value cannot be exactly represented by a Java {@code int}, this method throws.
Closes this JSON reader and the underlying {@link Reader}.
Skips the next value recursively. If it is an object or array, all nested elements are skipped. This method is intended for use when the JSON token stream contains unrecognized or unhandled values.
Returns the string up to but not including {@code quote}, unescaping any character escape sequences encountered along the way. The opening quote should have already been read. This consumes the closing quote, but does not include it in the returned string.
Reads the value up to but not including any delimiter characters. This does not consume the delimiter character.
Unescapes the character identified by the character or characters that immediately follow a backslash. The backslash '\' should have already been read. This supports both unicode escapes "u000A" and two-character escapes "\n".
Reads a null, boolean, numeric or unquoted string literal value.
Assigns {@code nextToken} based on the value of {@code nextValue}.
Determine whether the characters is a JSON number. Numbers are of the form -12.34e+56. Fractional and exponential parts are optional. Leading zeroes are not allowed in the value or exponential part, but are allowed in the fraction.
Creates a new instance that writes a JSON-encoded stream to {@code out}. For best performance, ensure {@link Writer} is buffered; wrapping in {@link java.io.BufferedWriter BufferedWriter} if necessary.
Configure this writer to relax its syntax rules. By default, this writer only emits well-formed JSON as specified by <a to lenient permits the following: <ul> <li>Top-level values of any type. With strict writing, the top-level <li>Numbers may be {@link Double#isNaN() NaNs} or {@link </ul>
Ensures all buffered data is written to the underlying {@link Writer} and flushes that writer.
Flushes and closes this writer and the underlying {@link Writer}.
Inserts any necessary separators and whitespace before a literal value, inline array, or inline object. Also adjusts the stack to expect either a closing bracket or another element.
Return the layout direction for a given Locale {@link #TEXT_LAYOUT_DIRECTION_LTR_DO_NOT_USE} or {@link #TEXT_LAYOUT_DIRECTION_RTL_DO_NOT_USE}. Be careful: this code will need to be changed when vertical scripts will be supported
Fallback algorithm to detect the locale direction. Rely on the fist char of the localized locale name. This will not work if the localized locale name is in English (this is the case for ICU 4.4 and "Urdu" script) {@link #TEXT_LAYOUT_DIRECTION_LTR_DO_NOT_USE} or {@link #TEXT_LAYOUT_DIRECTION_RTL_DO_NOT_USE}. Be careful: this code will need to be changed when vertical scripts will be supported
Send a {@link #VERBOSE} log message.
Send a {@link #VERBOSE} log message and log the exception.
Send a {@link #DEBUG} log message.
Send a {@link #DEBUG} log message and log the exception.
Send an {@link #INFO} log message.
Send a {@link #INFO} log message and log the exception.
Send a {@link #WARN} log message.
Send a {@link #WARN} log message and log the exception.
Send an {@link #ERROR} log message.
Send a {@link #ERROR} log message and log the exception.
What a Terrible Failure: Report a condition that should never happen. The error will always be logged at level ASSERT with the call stack. Depending on system configuration, a report may be added to the {@link android.os.DropBoxManager} and/or the process may be terminated immediately with an error dialog.
What a Terrible Failure: Report an exception that should never happen. Similar to {@link #wtf(String, String)}, with an exception to log.
What a Terrible Failure: Report an exception that should never happen. Similar to {@link #wtf(String, Throwable)}, with a message as well.
Sets the terrible failure handler, for testing.
Handy function to get a loggable stack trace from a Throwable
Low-level logging call.
Create a new Printer that sends to the log with the given priority and tag. {@link android.util.Log#VERBOSE Log.VERBOSE}, {@link android.util.Log#DEBUG Log.DEBUG}, {@link android.util.Log#INFO Log.INFO}, {@link android.util.Log#WARN Log.WARN}, or {@link android.util.Log#ERROR Log.ERROR}.
Same as above, but buffer is one of the LOG_ID_ constants from android.util.Log.
Create a new Writer that sends to the log with the given priority and tag. {@link android.util.Log#VERBOSE Log.VERBOSE}, {@link android.util.Log#DEBUG Log.DEBUG}, {@link android.util.Log#INFO Log.INFO}, {@link android.util.Log#WARN Log.WARN}, or {@link android.util.Log#ERROR Log.ERROR}.
Same as above, but buffer is one of the LOG_ID_ constants from android.util.Log.
Creates a new SparseArray containing no mappings.
Creates a new SparseArray containing no mappings that will not require any additional memory allocation to store the specified number of mappings.
Sets all supplied keys to the given unique value.
{@link java.util.Calendar#SUNDAY}.
box.  For example, if the calendar is set to display the first day of the week as Sunday, and the month starts on a Wednesday, the offset is 3.
of the 6 rows of a calendar month display.
Decrement the month.
Increment the month.
helper method that recalculates cached values based on current month / year
Constructor for a Pair. If either are null then equals() and hashCode() will throw a NullPointerException.
Checks the two objects for equality by delegating to their respective equals() methods.
Compute a hash code using the hash codes of the underlying objects
Convenience method to take all of the non-null matching groups in a regex Matcher and return them as a concatenated string.
Convenience method to return only the digits and plus signs in the matching string.
Creates a new PrefixPrinter. <p>If prefix is null or empty, the provided printer is returned, rather than making a prefixing printer.
Create a new Printer that sends to a PrintWriter object.
Create a new Printer that sends to a PrintWriter object.
This factory method creates and returns a Property given the <code>class</code> and <code>name</code> parameters, where the <code>"name"</code> parameter represents either: <ul> </ul> <p>If either of the get/is method alternatives is found on the class, but an appropriate <code>setName()</code> method is not found, the <code>Property</code> will be {@link #isReadOnly() readOnly}. Calling the {@link #set(Object, Object)} method on such a property is allowed, but will have no effect.</p> <p>If neither the methods nor the field are found on the class a {@link NoSuchPropertyException} exception will be thrown.</p>
Returns true if the {@link #set(Object, Object)} method does not set the value on the target object (in which case the {@link #set(Object, Object) set()} method should throw a {@link NoSuchPropertyException} exception). This may happen if the Property wraps functionality that allows querying the underlying value but not setting it. For example, the {@link #of(Class, Class, String)} factory method may return a Property with name "foo" for an object that has only a <code>getFoo()</code> or <code>isFoo()</code> method, but no matching <code>setFoo()</code> method.
Creates a new SparseBooleanArray containing no mappings.
Creates a new SparseBooleanArray containing no mappings that will not require any additional memory allocation to store the specified number of mappings.
Gets the boolean mapped from the specified key, or <code>false</code> if no such mapping has been made.
Gets the boolean mapped from the specified key, or the specified value if no such mapping has been made.
Returns the number of key-value mappings that this SparseBooleanArray currently stores.
Given an index in the range <code>0...size()-1</code>, returns the key from the <code>index</code>th key-value mapping that this SparseBooleanArray stores.
Given an index in the range <code>0...size()-1</code>, returns the value from the <code>index</code>th key-value mapping that this SparseBooleanArray stores.
Removes all key-value mappings from this SparseBooleanArray.
Return whether the stateSetOrSpec is matched by all StateSets.
Return whether the stateSet matches the desired stateSpec.
Return whether the state matches the desired stateSpec.
Create a new Printer that sends to a StringBuilder object.
Tries to return a time zone that would have had the specified offset and DST value at the specified moment in the specified country. Returns null if no suitable zone could be found.
Returns a String indicating the version of the time zone database currently in use.  The format of the string is dependent on the underlying time zone database implementation, but will typically contain the year in which the database was updated plus a letter from a to z indicating changes made within that year. <p>Time zone database updates should be expected to occur periodically due to political and legal changes that cannot be anticipated in advance.  Therefore, when computing the UTC time for a future event, applications should be aware that the results may differ following a time zone database update.  This method allows applications to detect that a database change has occurred, and to recalculate any cached times accordingly. <p>The time zone database may be assumed to change only when the device runtime is restarted.  Therefore, it is not necessary to re-query the database version during the lifetime of an activity.
Create and initialize a TimingLogger object that will log using the specific tag. If the Log.isLoggable is not enabled to at least the Log.VERBOSE level for that tag at creation time then the addSplit and dumpToLog call will do nothing.
Clear and initialize a TimingLogger object that will log using the specific tag. If the Log.isLoggable is not enabled to at least the Log.VERBOSE level for that tag at creation time then the addSplit and dumpToLog call will do nothing.
Clear and initialize a TimingLogger object that will log using the tag and label that was specified previously, either via the constructor or a call to reset(tag, label). If the Log.isLoggable is not enabled to at least the Log.VERBOSE level for that tag at creation time then the addSplit and dumpToLog call will do nothing.
Add a split for the current time, labeled with splitLabel. If Log.isLoggable was not enabled to at least the Log.VERBOSE for the specified tag at construction or reset() time then this call does nothing.
Dumps the timings to the log using Log.d(). If Log.isLoggable was not enabled to at least the Log.VERBOSE for the specified tag at construction or reset() time then this call does nothing.
Return the data for this value as a float.  Only use for values whose type is {@link #TYPE_FLOAT}.
Converts a complex data value holding a dimension to its final floating point value. The given <var>data</var> must be structured as a {@link #TYPE_DIMENSION}. metrics depending on its unit.
Converts a complex data value holding a dimension to its final value as an integer pixel offset.  This is the same as {@link #complexToDimension}, except the raw floating point value is truncated to an integer (pixel) value. The given <var>data</var> must be structured as a {@link #TYPE_DIMENSION}. multiplier and units.
Converts a complex data value holding a dimension to its final value as an integer pixel size.  This is the same as {@link #complexToDimension}, except the raw floating point value is converted to an integer (pixel) value for use as a size.  A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size. The given <var>data</var> must be structured as a {@link #TYPE_DIMENSION}. multiplier and units.
Converts an unpacked complex data value holding a dimension to its final floating point value. The two parameters <var>unit</var> and <var>value</var> are as in {@link #TYPE_DIMENSION}. metrics depending on its unit.
Return the data for this value as a dimension.  Only use for values whose type is {@link #TYPE_DIMENSION}. metrics depending on its unit.
Converts a complex data value holding a fraction to its final floating point value. The given <var>data</var> must be structured as a {@link #TYPE_FRACTION}. base value depending on its unit.
Return the data for this value as a fraction.  Only use for values whose type is {@link #TYPE_FRACTION}. base value depending on its unit.
Regardless of the actual type of the value, try to convert it to a string value.  For example, a color type will be converted to a string of the form #aarrggbb.
Parses the given xml string and fires events on the given SAX handler.
Parses xml from the given reader and fires events on the given SAX handler.
Parses xml from the given input stream and fires events on the given SAX handler.
Returns a new pull parser with namespace support.
Creates a new xml serializer.
Finds an encoding by name. Returns UTF-8 if you pass {@code null}.
Return an AttributeSet interface for use with the given XmlPullParser. If the given parser itself implements AttributeSet, that implementation is simply returned.  Otherwise a wrapper class is instantiated on top of the XmlPullParser, as a proxy for retrieving its attributes, and returned to you.
Initialize an event from another one.
Appends an {@link AccessibilityRecord} to the end of event records.
Gets the event type.
Sets the event type.
Gets the time in which this event was sent.
Sets the time in which this event was sent.
Gets the package name of the source.
Sets the package name of the source.
Returns a cached instance if such is available or a new one is instantiated with its type property set.
Returns a cached instance if such is available or a new one is created. The returned instance is initialized from the given <code>event</code>.
Creates a new instance from a {@link Parcel}.
Reads an {@link AccessibilityRecord} from a parcel.
Writes an {@link AccessibilityRecord} to a parcel.
Returns the string representation of an event type. For example, {@link #TYPE_VIEW_CLICKED} is represented by the string TYPE_VIEW_CLICKED.
Sets the message to be processed if the interacted view hierarchy and the interacting client are running in the same thread.
Finds {@link AccessibilityNodeInfo}s by View text. The match is case insensitive containment. The search is performed in the currently active window and starts from the root View in the window.
Gets the the result of an async request that returns an {@link AccessibilityNodeInfo}.
Gets the the result of an async request that returns {@link AccessibilityNodeInfo}s.
Gets the result of a request to perform an accessibility action.
Clears the result state.
Waits up to a given bound for a result of a request and returns it.
Applies compatibility scale to the info bounds if it is not equal to one.
Finalize an {@link AccessibilityNodeInfo} before passing it to the client.
Finalize {@link AccessibilityNodeInfo}s before passing them to the client.
Gets the message stored if the interacted and interacting threads are the same.
Get an AccessibilityManager instance (create one if necessary).
Create an instance.
Returns if the accessibility in the system is enabled.
Returns the client interface this instance registers in the centralized accessibility manager service.
Sends an {@link AccessibilityEvent}.
Requests feedback interruption from all accessibility services.
Registers an {@link AccessibilityStateChangeListener} for changes in the global accessibility state of the system.
Unregisters an {@link AccessibilityStateChangeListener}.
Sets the enabled state.
Notifies the registered {@link AccessibilityStateChangeListener}s.
Adds an accessibility interaction connection interface for a given window.
Removed an accessibility interaction connection interface for a given window.
Hide constructor from clients.
Get the child at given index. <p> <strong>Note:</strong> It is a client responsibility to recycle the </p>
Adds a child. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Adds an action that can be performed on the node. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Finds {@link AccessibilityNodeInfo}s by text. The match is case insensitive containment. The search is relative to this info i.e. this info is the root of the traversed tree. <p> <strong>Note:</strong> It is a client responsibility to recycle the </p>
Gets the parent. <p> <strong>Note:</strong> It is a client responsibility to recycle the </p>
Sets the parent. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets the node bounds in parent coordinates. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets the node bounds in screen coordinates. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets whether this node is checkable. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets whether this node is checked. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets whether this node is focusable. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets whether this node is focused. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets whether this node is selected. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets whether this node is clickable. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets whether this node is long clickable. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets whether this node is enabled. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets whether this node is a password. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets if the node is scrollable. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets the package this node comes from. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets the class this node comes from. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets the text of this node. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Sets the content description of this node. <p> <strong>Note:</strong> Cannot be called from an {@link android.accessibilityservice.AccessibilityService}. This class is made immutable before being delivered to an AccessibilityService. </p>
Gets the value of a boolean property.
Sets a boolean property.
Sets the connection for interacting with the system.
Sets if this instance is sealed.
Gets if this instance is sealed.
Enforces that this instance is sealed.
Enforces that this instance is not sealed.
Returns a cached instance if such is available or a new one is create. The returned instance is initialized from the given <code>info</code>.
{@inheritDoc} <p> <strong>Note:</strong> After the instance is written to a parcel it </p>
Initializes this instance from another one.
Clears the state of this instance.
Gets the human readable action symbolic name.
Gets the {@link AccessibilityNodeInfo} of the event source. <p> <strong>Note:</strong> It is a client responsibility to recycle the received info by calling {@link AccessibilityNodeInfo#recycle() AccessibilityNodeInfo#recycle()} to avoid creating of multiple instances. </p>
Sets the connection for interacting with the AccessibilityManagerService.
Initialize this record from another one.
Cast an IBinder object into an android.view.accessibility.IAccessibilityInteractionConnection interface, generating a proxy if needed.
Cast an IBinder object into an android.view.accessibility.IAccessibilityInteractionConnectionCallback interface, generating a proxy if needed.
Sets the result of an async request that returns an {@link AccessibilityNodeInfo}.
Sets the result of an async request that returns {@link AccessibilityNodeInfo}s.
Sets the result of a request to perform an accessibility action.
Cast an IBinder object into an android.view.accessibility.IAccessibilityManager interface, generating a proxy if needed.
Cast an IBinder object into an android.view.accessibility.IAccessibilityManagerClient interface, generating a proxy if needed.
Constructor used when an AlphaAnimation is loaded from a resource.
Constructor to use when building an AlphaAnimation from code
Creates a new animation with a duration of 0ms, the default interpolator, with fillBefore set to true and fillAfter set to false
Creates a new animation whose parameters come from the specified context and attributes set.
Reset the initialization state of this animation.
Cancel the animation. Cancelling an animation invokes the animation listener, if set, to notify the end of the animation. If you cancel an animation manually, you must call {@link #reset()} before starting the animation again.
Whether or not the animation has been initialized.
Initialize this animation with the dimensions of the object being animated as well as the objects parents. (This is to support animation sizes being specifed relative to these dimensions.) <p>Objects that interpret Animations should call this method when the sizes of the object being animated and its parent are known, and before calling {@link #getTransformation}.
Sets the acceleration curve for this animation. The interpolator is loaded as a resource from the specified context.
Sets the acceleration curve for this animation. Defaults to a linear interpolation.
When this animation should start relative to the start time. This is most useful when composing complex animations using an {@link AnimationSet } where some of the animations components start at different times.
How long this animation should last. The duration cannot be negative.
Ensure that the duration that this animation will run is not longer than <var>durationMillis</var>.  In addition to adjusting the duration itself, this ensures that the repeat count also will not make it run longer than the given time. to run.
How much to scale the duration by.
When this animation should start. When the start time is set to {@link #START_ON_FIRST_FRAME}, the animation will start the first time {@link #getTransformation(long, Transformation)} is invoked. The time passed to this method should be obtained by calling {@link AnimationUtils#currentAnimationTimeMillis()} instead of {@link System#currentTimeMillis()}.
Convenience method to start the animation the first time {@link #getTransformation(long, Transformation)} is invoked.
Convenience method to start the animation at the current time in milliseconds.
If fillEnabled is true, this animation will apply the value of fillBefore.
If fillEnabled is true, the animation will apply the value of fillBefore. Otherwise, fillBefore is ignored and the animation transformation is always applied until the animation ends.
If fillBefore is true, this animation will apply its transformation before the start time of the animation. Defaults to true if {@link #setFillEnabled(boolean)} is not set to true. Note that this applies when using an {@link android.view.animation.AnimationSet AnimationSet} to chain animations. The transformation is not applied before the AnimationSet itself starts.
If fillAfter is true, the transformation that this animation performed will persist when it is finished. Defaults to false if not set. Note that this applies to individual animations and when using an {@link android.view.animation.AnimationSet AnimationSet} to chain animations.
Set the Z ordering mode to use while running the animation. {@link #ZORDER_TOP}, or {@link #ZORDER_BOTTOM}.
Set background behind animation. be black, with any desired alpha level.
The scale factor is set by the call to <code>getTransformation</code>. Overrides of {@link #getTransformation(long, Transformation, float)} will get this value directly. Overrides of {@link #applyTransformation(float, Transformation)} can call this method to get the value. an Animation such as the pivot points in {@link ScaleAnimation} and {@link RotateAnimation}.
If detachWallpaper is true, and this is a window animation of a window that has a wallpaper background, then the window will be detached from the wallpaper while it runs.  That is, the animation will only be applied to the window, and the wallpaper behind it will remain static.
Gets the acceleration curve type for this animation.
When this animation should start. If the animation has not startet yet, this method might return {@link #START_ON_FIRST_FRAME}.
How long this animation should last
When this animation should start, relative to StartTime
If fillBefore is true, this animation will apply its transformation before the start time of the animation. If fillBefore is false and {@link #isFillEnabled() fillEnabled} is true, the transformation will not be applied until the start time of the animation.
If fillAfter is true, this animation will apply its transformation after the end time of the animation.
Returns the Z ordering mode to use while running the animation as previously set by {@link #setZAdjustment}. {@link #ZORDER_TOP}, or {@link #ZORDER_BOTTOM}.
Returns the background color behind the animation.
Return value of {@link #setDetachWallpaper(boolean)}.
<p>Indicates whether or not this animation will affect the transformation matrix. For instance, a fade animation will not affect the matrix whereas a scale animation will.</p>
<p>Indicates whether or not this animation will affect the bounds of the animated view. For instance, a fade animation will not affect the bounds whereas a 200% scale animation will.</p>
<p>Binds an animation listener to this animation. The animation listener is notified of animation events such as the end of the animation or the repetition of the animation.</p>
Gurantees that this animation has an interpolator. Will use a AccelerateDecelerateInterpolator is nothing else was specified.
Compute a hint at how long the entire animation may last, in milliseconds. Animations can be written to cause themselves to run for a different duration than what is computed here, but generally this should be accurate.
Gets the transformation to apply at a specified point in time. Implementations of this method should always replace the specified Transformation or document they are doing otherwise.
<p>Indicates whether this animation has started or not.</p>
<p>Indicates whether this animation has ended or not.</p>
Convert the information in the description of a size to an actual dimension
Return true if this animation changes the view's alpha property.
Size descriptions can appear inthree forms: <ol> <li>An absolute size. This is represented by a number.</li> <li>A size relative to the size of the object being animated. This is represented by a number followed by "%".</li> <li>A size relative to the size of the parent of object being animated. This is represented by a number followed by "%p".</li> </ol>
Constructor used when an AnimationSet is loaded from a resource.
Constructor to use when building an AnimationSet from code
Add a child animation to this animation set. The transforms of the child animations are applied in the order that they were added
The duration hint of an animation set is the maximum of the duration hints of all of its component animations.
this may include other AnimationSets, which are not expanded.
Returns the current animation time in milliseconds. This time should be used when invoking {@link Animation#setStartTime(long)}. Refer to {@link android.os.SystemClock} for more information about the different available clocks. The clock used by this method is <em>not</em> the "wall" clock (it is not {@link System#currentTimeMillis}).
Loads an {@link Animation} object from a resource
Make an animation for objects becoming visible. Uses a slide and fade effect.
Make an animation for objects becoming invisible. Uses a slide and fade effect.
Make an animation for objects becoming visible. Uses a slide up and fade effect.
Loads an {@link Interpolator} object from a resource
Creates a new grid layout animation controller from external resources.
Creates a new layout animation controller with a delay of 50% for both rows and columns and the specified animation.
Creates a new layout animation controller with the specified delays and the specified animation.
Returns the delay by which the children's animation are offset from one column to the other. The delay is expressed as a fraction of the animation duration.
Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one column to the other.
Returns the delay by which the children's animation are offset from one row to the other. The delay is expressed as a fraction of the animation duration.
Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one row to the other.
Returns the direction of the animation. {@link #DIRECTION_HORIZONTAL_MASK} and {@link #DIRECTION_VERTICAL_MASK} can be used to retrieve the horizontal and vertical components of the direction.
Sets the direction of the animation. The direction is expressed as an integer containing a horizontal and vertical component. For instance, <code>DIRECTION_BOTTOM_TO_TOP | DIRECTION_RIGHT_TO_LEFT</code>.
Returns the direction priority for the animation. The priority can be either {@link #PRIORITY_NONE}, {@link #PRIORITY_COLUMN} or {@link #PRIORITY_ROW}.
Specifies the direction priority of the animation. For instance, {@link #PRIORITY_COLUMN} will give priority to columns: the animation will first play on the column, then on the rows.Z
Creates a new layout animation controller from external resources.
Creates a new layout animation controller with a delay of 50% and the specified animation.
Creates a new layout animation controller with the specified delay and the specified animation.
Returns the order used to compute the delay of each child's animation.
Sets the order used to compute the delay of each child's animation.
Sets the animation to be run on each child of the view group on which this layout animation controller is .
Returns the animation applied to each child of the view group on which this controller is set.
Sets the interpolator used to interpolate the delays between the children.
Returns the interpolator used to interpolate the delays between the children.
Returns the delay by which the children's animation are offset. The delay is expressed as a fraction of the animation duration.
Sets the delay, as a fraction of the animation duration, by which the children's animations are offset. The general formula is: <pre> child animation delay = child index * delay * animation duration </pre>
Indicates whether two children's animations will overlap. Animations overlap when the delay is lower than 100% (or 1.0).
Returns the animation to be applied to the specified view. The returned animation is delayed by an offset computed according to the information provided by {@link android.view.animation.LayoutAnimationController.AnimationParameters}. This method is called by view groups to obtain the animation to set on a specific child.
Indicates whether the layout animation is over or not. A layout animation is considered done when the animation with the longest delay is done.
Returns the amount of milliseconds by which the specified view's animation must be delayed or offset. Subclasses should override this method to return a suitable value. This implementation returns <code>child animation delay</code> milliseconds where: <pre> child animation delay = child index * delay </pre> The index is retrieved from the {@link android.view.animation.LayoutAnimationController.AnimationParameters} found in the view's {@link android.view.ViewGroup.LayoutParams}.
Transforms the index stored in {@link android.view.animation.LayoutAnimationController.AnimationParameters} by the order returned by {@link #getOrder()}. Subclasses should override this method to provide additional support for other types of ordering. This method should be invoked by {@link #getDelayForView(android.view.View)} prior to any computation.
Constructor used when a RotateAnimation is loaded from a resource.
Constructor to use when building a RotateAnimation from code. Default pivotX/pivotY point is (0,0).
Constructor to use when building a RotateAnimation from code
Constructor used when a ScaleAnimation is loaded from a resource.
Constructor to use when building a ScaleAnimation from code
Creates a new transformation with alpha = 1 and the identity matrix.
Reset the transformation to a state that leaves the object being animated in an unmodified state. The transformation type is {@link #TYPE_BOTH} by default.
Indicates the nature of this transformation.
Sets the transformation type.
Clones the specified transformation.
Apply this Transformation to an existing Transformation, e.g. apply a scale effect to something that has already been rotated.
coordinates of the object being animated
Sets the degree of transparency
Return a string representation of the transformation in a compact form.
Constructor used when a TranslateAnimation is loaded from a resource.
Constructor to use when building a TranslateAnimation from code
Return the target of edit operations.  The default implementation returns its own fake editable that is just used for composing text; subclasses that are real text editors should override this and supply their own.
Default implementation does nothing.
Default implementation does nothing.
Default implementation uses {@link MetaKeyKeyListener#clearMetaKeyState(long, int) MetaKeyKeyListener.clearMetaKeyState(long, int)} to clear the state.
Default implementation does nothing and returns false.
Default implementation does nothing and returns false.
Default implementation replaces any existing composing text with the given text.  In addition, only if dummy mode, a key event is sent for the new text and the current editable buffer cleared.
The default implementation performs the deletion around the current selection position of the editable text.
The default implementation removes the composing state from the current editable text.  In addition, only if dummy mode, a key event is sent for the new text and the current editable buffer cleared.
The default implementation uses TextUtils.getCapsMode to get the cursor caps mode for the current selection position in the editable text, unless in dummy mode in which case 0 is always returned.
The default implementation always returns null.
The default implementation returns the given amount of text from the current cursor position in the buffer.
The default implementation returns the text currently selected, or null if none is selected.
The default implementation returns the given amount of text from the current cursor position in the buffer.
The default implementation turns this into the enter key.
The default implementation does nothing.
The default implementation does nothing.
The default implementation places the given text into the editable, replacing any existing composing text.  The new text is marked as in a composing state with the composing style.
The default implementation changes the selection position in the current editable text.
Provides standard implementation for sending a key event to the window attached to the input connection's view.
Updates InputMethodManager with the current fullscreen mode.
Create a simple completion with just text, no label.
Create a full completion with both text and label.
Return the abstract identifier for this completion, typically corresponding to the id associated with it in the original adapter.
Return the original position of this completion, typically corresponding to its position in the original adapter.
Return the actual text associated with this completion.  This is the real text that will be inserted into the editor if the user selects it.
Return the user-visible label for the completion, or null if the plain text should be shown.  If non-null, this will be what the user sees as the completion option instead of the actual text.
Return the offset position of this correction in the text. Both the {@link #getOldText()} and {@link #getNewText()} start at this offset.
Return the text that has actually been typed by the user, and which has been corrected.
Return the new text that corrects what was typed by the user.
Ensure that the data in this EditorInfo is compatible with an application that was developed against the given target API version.  This can impact the following input types: {@link InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}, {@link InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}, {@link InputType#TYPE_NUMBER_VARIATION_NORMAL}, {@link InputType#TYPE_NUMBER_VARIATION_PASSWORD}. <p>This is called by the framework for input method implementations; you should not generally need to call it yourself. application was developed against.
Write debug output of this object.
Used to make this class parcelable.
Used to make this class parcelable.
Constructor from an existing InputBinding taking a new local input connection interface.
Return the connection for interacting back with the application.
Return the token for the connection back to the application.  You can not use this directly, it must be converted to a {@link InputConnection} for you.
Return the user id of the client associated with this binding.
Return the process id where this binding came from.
Used to make this class parcelable.
Change the target of the input connection.
Constructor. this input method's component.
Temporary API for creating a built-in input method.
Return a unique ID for this input method.  The ID is generated from the package and class name implementing the method.
Return the .apk package that implements this input method.
Return the class name of the service component that implements this input method.
Return the raw information about the Service implementing this input method.  Do not modify the returned object.
Return the component of the service that implements this input method.
Load the user-displayed label for this input method. resources.
Load the user-displayed icon for this input method. resources.
Return the class name of an activity that provides a settings UI for the input method.  You can launch this activity be starting it with an {@link android.content.Intent} whose action is MAIN and with an explicit {@link android.content.ComponentName} composed of {@link #getPackageName} and the class name returned here. <p>A null will be returned if there is no settings activity associated with the input method.
Return the count of the subtypes of Input Method.
Return the Input Method's subtype at the specified index.
Return the resource identifier of a resource inside of this input method's .apk that determines whether it should be considered a default input method for the system.
Retrieve the global InputMethodManager instance, creating it if it doesn't already exist.
Internally, the input method manager can't be context-dependent, so we have this here for the places that need it.
Private optimization: retrieve the global InputMethodManager instance, if it exists.
Returns a list of enabled input method subtypes for the specified input method info. selected subtypes. If an input method info doesn't have enabled subtypes, the framework will implicitly enable subtypes according to the current system language.
Allows you to discover whether the attached input method is running in fullscreen mode.  Return true if it is fullscreen, entirely covering your UI, else returns false.
Return true if the given view is the currently active view for the input method.
Return true if any view is currently active in the input method.
Return true if the currently served view is accepting full text edits. If false, it has no input connection, so can only handle raw key events.
Reset all of the state associated with being bound to an input method.
Reset all of the state associated with a served view being connected to an input method
Disconnect any existing input connection, clearing the served view.
Called from the FINISH_INPUT_CONNECTION message above.
Synonym for {@link #showSoftInput(View, int, ResultReceiver)} without a result receiver: explicitly request that the current input method's soft input area be shown to the user, if needed. soft keyboard input. 0 or have the {@link #SHOW_IMPLICIT} bit set.
Explicitly request that the current input method's soft input area be shown to the user, if needed.  Call this if the user interacts with your view in such a way that they have expressed they would like to start performing input into it. soft keyboard input. 0 or have the {@link #SHOW_IMPLICIT} bit set. it has processed your request to tell you what it has done.  The result code you receive may be either {@link #RESULT_UNCHANGED_SHOWN}, {@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or {@link #RESULT_HIDDEN}.
Synonym for {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)} without a result: request to hide the soft input window from the context of the window that is currently accepting input. as returned by {@link View#getWindowToken() View.getWindowToken()}. 0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set.
Request to hide the soft input window from the context of the window that is currently accepting input.  This should be called as a result of the user doing some actually than fairly explicitly requests to have the input window hidden. as returned by {@link View#getWindowToken() View.getWindowToken()}. 0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set. it has processed your request to tell you what it has done.  The result code you receive may be either {@link #RESULT_UNCHANGED_SHOWN}, {@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or {@link #RESULT_HIDDEN}.
This method toggles the input method window display. If the input window is already displayed, it gets hidden. If not the input window will be displayed. as returned by {@link View#getWindowToken() View.getWindowToken()}. 0 or have the {@link #SHOW_IMPLICIT}, {@link #SHOW_FORCED} bit set. 0 or have the {@link #HIDE_IMPLICIT_ONLY}, {@link #HIDE_NOT_ALWAYS} bit set.
This method toggles the input method window display. If the input window is already displayed, it gets hidden. If not the input window will be displayed. 0 or have the {@link #SHOW_IMPLICIT}, {@link #SHOW_FORCED} bit set. 0 or have the {@link #HIDE_IMPLICIT_ONLY}, {@link #HIDE_NOT_ALWAYS} bit set.
If the input method is currently connected to the given view, restart it with its new contents.  You should call this when the text within your view changes outside of the normal input method or key input flow, such as when an application calls TextView.setText().
When the focused window is dismissed, this method is called to finish the input method started before.
Call this when a view receives focus.
Call this when a view loses focus.
Called by ViewAncestor when its window gets input focus.
Report the current selection range.
Notify the event when the user tapped or clicked the text view.
Returns true if the current input method wants to watch the location of the input editor's cursor in its window.
Report the current cursor location in its window.
Call {@link InputMethodSession#appPrivateCommand(String, Bundle) InputMethodSession.appPrivateCommand()} on the current Input Method. you want to send the command regardless of the view that is attached to the input method. be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands.
Force switch to a new input method component. This can only be called from an application or a service which has a token of the currently active input method. when it was started, which allows it to perform this operation on itself.
Force switch to a new input method and subtype. This can only be called from an application or a service which has a token of the currently active input method. when it was started, which allows it to perform this operation on itself.
Close/hide the input method's soft input area, so the user no longer sees it or can interact with it.  This can only be called from the currently active input method, as validated by the given token. when it was started, which allows it to perform this operation on itself. 0 or have the {@link #HIDE_IMPLICIT_ONLY}, {@link #HIDE_NOT_ALWAYS} bit set.
Show the input method's soft input area, so the user sees the input method window and can interact with it. This can only be called from the currently active input method, as validated by the given token. when it was started, which allows it to perform this operation on itself. 0 or have the {@link #SHOW_IMPLICIT} or {@link #SHOW_FORCED} bit set.
Show the settings for enabling subtypes of the specified input method. subtypes of all input methods will be shown.
Returns the current input method subtype. This subtype is one of the subtypes in the current input method. This method returns null when the current input method doesn't have any input method subtype.
Switch to a new input method subtype of the current input method. null, this method returns false.
Returns a map of all shortcut input method info and their subtypes.
Force switch to the last used input method and subtype. If the last input method didn't have any subtypes, the framework will simply switch to the last input method with no subtype specified. which allows it to perform this operation on itself. used input method and subtype.
Set additional input method subtypes. Only a process which shares the same uid with the IME can add additional input method subtypes to the IME. Please note that a subtype's status is stored in the system. For example, enabled subtypes are remembered by the framework even after they are removed by using this method. If you re-add the same subtypes again, they will just get enabled. If you want to avoid such conflicts, for instance, you may want to create a "different" new subtype even with the same locale and mode, by changing its extra value. The different subtype won't get affected by the stored past status. (You may want to take a look at {@link InputMethodSubtype#hashCode()} to refer to the current implementation.)
Constructor if no other subtypes are selected explicitly. Note that a subtype with this parameter being true will not be shown in the subtypes list.
ime switch list when this subtype is implicitly enabled. The framework will never switch the current ime to this subtype by switchToLastInputMethod in InputMethodManager.
explicitly. Note that a subtype that returns true will not be shown in the subtypes list.
can have only one %s in it. If there is, the %s part will be replaced with the locale's display name by the formatter. If there is not, this method simply returns the string specified by mSubtypeNameResId. If mSubtypeNameResId is not specified (== 0), it's up to the framework to generate an appropriate display name.
The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4
The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4
Sort the list of InputMethodSubtype
Return a unique ID for this spell checker.  The ID is generated from the package and class name implementing the method.
Return the component of the service that implements.
Return the .apk package that implements this.
Load the user-displayed label for this spell checker.
Load the user-displayed icon for this spell checker.
Return the raw information about the Service implementing this spell checker.  Do not modify the returned object.
Return the class name of an activity that provides a settings UI. You can launch this activity be starting it with an {@link android.content.Intent} whose action is MAIN and with an explicit {@link android.content.ComponentName} composed of {@link #getPackageName} and the class name returned here. <p>A null will be returned if there is no settings activity.
Return the count of the subtypes.
Return the subtype at the specified index.
Get the spell checker service info this spell checker session has.
Finish this session and allow TextServicesManagerService to disconnect the bound spell checker.
Get candidate strings for a substring of the specified text.
A batch process of getSuggestions
Sort the list of subtypes
Set the cookie and the sequence of SuggestionsInfo which are set to TextInfo from a client application
in its dictionary or not and whether the spell checker has confident suggestions for the word or not.
-1. Even if this method returns 0, it doesn't necessarily mean that there are no suggestions for the requested word. For instance, the caller could have been asked to limit the maximum number of suggestions returned.
Retrieve the global TextServicesManager instance, creating it if it doesn't already exist.
Get a spell checker session for the specified spell checker referToSpellCheckerLanguageSettings is true, the locale specified in Settings will be returned. If {@param locale} is not null and referToSpellCheckerLanguageSettings is true, the locale specified in Settings will be returned only when it is same as {@param locale}. Exceptionally, when referToSpellCheckerLanguageSettings is true and {@param locale} is only language (e.g. "en"), the specified locale in Settings (e.g. "en_US") will be selected. languages in settings will be returned.
Constructor used to make the EMPTY_STATE singleton
Constructor called by derived classes when creating their SavedState objects
Constructor used when reading from a parcel. Reads the state of the superclass.
Use {@link android.view.WindowManager#getDefaultDisplay() WindowManager.getDefaultDisplay()} to create a Display object. Display gives you access to some information about a particular display connected to the device.
Returns the index of this display.  This is currently undefined; do not use.
Gets the size of the display, in pixels. <p> Note that this value should <em>not</em> be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here.  Layouts should instead use the window size. </p><p> The size is adjusted based on the current rotation of the display. </p><p> The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display.  The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. </p>
Gets the size of the display as a rectangle, in pixels.
Return the maximum screen size dimension that will happen.  This is mostly for wallpapers.
Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. <p> The real size may be smaller than the raw size when the window manager is emulating a smaller display (using adb shell am display-size). </p><p> The size is adjusted based on the current rotation of the display. </p>
Gets the raw width of the display, in pixels. <p> The size is adjusted based on the current rotation of the display. </p>
Gets the raw height of the display, in pixels. <p> The size is adjusted based on the current rotation of the display. </p>
Returns the rotation of the screen from its "natural" orientation. The returned value may be {@link Surface#ROTATION_0 Surface.ROTATION_0} (no rotation), {@link Surface#ROTATION_90 Surface.ROTATION_90}, {@link Surface#ROTATION_180 Surface.ROTATION_180}, or {@link Surface#ROTATION_270 Surface.ROTATION_270}.  For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either {@link Surface#ROTATION_90 Surface.ROTATION_90} or {@link Surface#ROTATION_270 Surface.ROTATION_270} depending on the direction it was turned.  The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device.  For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be {@link Surface#ROTATION_90 Surface.ROTATION_90}.
Return the native pixel format of the display.  The returned value may be one of the constants int {@link android.graphics.PixelFormat}.
Return the refresh rate of this display in frames per second.
Gets display metrics that describe the size and density of this display. <p> The size is adjusted based on the current rotation of the display. </p><p> The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display.  The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. </p>
Gets display metrics based on the real size of this display.
If the display is mirrored to an external HDMI display, returns the width of that display.
If the display is mirrored to an external HDMI display, returns the height of that display.
Gets display metrics based on an explicit assumed display size.
Returns a display object which uses the metric's width/height instead.
Inspect the action value of this event. during a drag and drop operation: <ul> <li>{@link #ACTION_DRAG_STARTED}</li> <li>{@link #ACTION_DRAG_ENTERED}</li> <li>{@link #ACTION_DRAG_LOCATION}</li> <li>{@link #ACTION_DROP}</li> <li>{@link #ACTION_DRAG_EXITED}</li> <li>{@link #ACTION_DRAG_ENDED}</li> </ul>
Gets the X coordinate of the drag point. The value is only valid if the event action is {@link #ACTION_DRAG_LOCATION} or {@link #ACTION_DROP}.
Gets the Y coordinate of the drag point. The value is valid if the event action is {@link #ACTION_DRAG_ENTERED}, {@link #ACTION_DRAG_LOCATION}, {@link #ACTION_DROP}, or {@link #ACTION_DRAG_EXITED}.
Returns the {@link android.content.ClipData} object sent to the system as part of the call {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}. This method only returns valid data if the event action is {@link #ACTION_DROP}.
Returns the {@link android.content.ClipDescription} object contained in the {@link android.content.ClipData} object sent to the system as part of the call to {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}. The drag handler or listener for a View can use the metadata in this object to decide if the View can accept the dragged View object's data. <p> This method returns valid data for all event actions.
Returns the local state object sent to the system as part of the call to {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}. The object is intended to provide local information about the drag and drop operation. For example, it can indicate whether the drag and drop operation is a copy or a move. <p> This method returns valid data for all event actions. </p>
<p> Returns an indication of the result of the drag and drop operation. This method only returns valid data if the action type is {@link #ACTION_DRAG_ENDED}. The return value depends on what happens after the user releases the drag shadow. </p> <p> If the user releases the drag shadow on a View that can accept a drop, the system sends an {@link #ACTION_DROP} event to the View object's drag event listener. If the listener returns {@code true}, then getResult() will return {@code true}. If the listener returns {@code false}, then getResult() returns {@code false}. </p> <p> Notice that getResult() also returns {@code false} if no {@link #ACTION_DROP} is sent. This happens, for example, when the user releases the drag shadow over an area outside of the application. In this case, the system sends out {@link #ACTION_DRAG_ENDED} for the current operation, but never sends out {@link #ACTION_DROP}. </p> {@link #ACTION_DROP}. If the system did not send {@link #ACTION_DROP} before {@link #ACTION_DRAG_ENDED}, or if the listener returned {@code false} in response to {@link #ACTION_DROP}, then {@code false} is returned.
Recycle the DragEvent, to be re-used by a later caller.  After calling this function you must never touch the event again.
Returns information about the {@link android.os.Parcel} representation of this DragEvent object.
Creates a {@link android.os.Parcel} object from this DragEvent object.
Get the focus finder for this thread.
Find the next view to take focus in root's descendants, starting from the view that currently is focused.
Find the next view to take focus in root's descendants, searching from a particular rectangle in root's coordinates.
Is rect1 a better candidate than rect2 for a focus search in a particular direction from a source rect?  This is the core routine that determines the order of focus searching.
One rectangle may be another candidate than another by virtue of being exclusively in the beam of the source rect.
Fudge-factor opportunity: how to calculate distance given major and minor axis distances.  Warning: this fudge factor is finely tuned, be sure to run all focus tests if you dare tweak it.
Is destRect a candidate for the next focus given the direction?  This checks whether the dest is at least partially to the direction of (e.g left of) from source. Includes an edge case for an empty rect (which is used in some cases when searching from a point on the screen).
Do the "beams" w.r.t the given direcition's axis of rect1 and rect2 overlap?
e.g for left, is 'to left of'
of source to the edge nearest in the given direction of dest.  If the dest is not in the direction from source, return 0.
edge of source to the far edge of dest. If the dest is not in the direction from source, return 1 (to break ties with {@link #majorAxisDistance}).
Find the distance on the minor axis w.r.t the direction to the nearest edge of the destination rectange.
Find the nearest touchable view to the specified view.
Is destRect a candidate for the next touch given the direction?
Wrap the FocusFinder object
Creates a GestureDetector with the supplied listener. You may only use this constructor from a UI thread (this is the usual situation). not be null.
Creates a GestureDetector with the supplied listener. You may only use this constructor from a UI thread (this is the usual situation). not be null. be ignored.
Creates a canvas to render directly on screen.
Creates a canvas to render into an FBO.
Preserves the back buffer of the current surface after a buffer swap. Calling this method sets the EGL_SWAP_BEHAVIOR attribute of the current surface to EGL_BUFFER_PRESERVED. Calling this method requires an EGL config that supports EGL_SWAP_BEHAVIOR_PRESERVED_BIT.
Indicates whether the current surface preserves its back buffer after a buffer swap.
Disables v-sync. For performance testing only.
Flush caches to reclaim as much memory as possible. The amount of memory to reclaim is indicate by the level parameter. The level can be one of {@link #FLUSH_CACHES_MODERATE} or {@link #FLUSH_CACHES_FULL}.
Display list
Hardware layer
Returns the native layer object used to render this layer.
Apply a gravity constant to an object. This suppose that the layout direction is LTR.
Apply additional gravity behavior based on the overall "display" that an object exists in.  This can be used after {@link #apply(int, int, int, Rect, int, int, Rect)} to place the object within a visible display.  By default this moves or clips the object to be visible in the display; the gravity flags {@link #DISPLAY_CLIP_HORIZONTAL} and {@link #DISPLAY_CLIP_VERTICAL} can be used to change this behavior. display. being placed. modified if needed to fit in the display.
<p>Indicate whether the supplied gravity has a vertical pull.</p>
<p>Indicate whether the supplied gravity has an horizontal pull.</p>
Calls the function specified with the drawGLFunction function pointer. This is functionality used by webkit for calling into their renderer from our display lists. This function may return true if an invalidation is needed after the call.
Creates a new hardware layer with undefined dimensions.
Creates a new hardware layer at least as large as the supplied dimensions.
Returns the minimum width of the layer.
Returns the minimum height of the layer.
Returns whether or not this layer is opaque.
Update the layer's properties. This method should be used when the underlying storage is modified by an external entity. To change the underlying storage, use the {@link #resize(int, int)} method instead.
Invoke this method to disable hardware rendering in the current process.
Indicates whether hardware acceleration is available under any form for the view hierarchy.
Initializes the hardware renderer for the specified surface.
Initializes the hardware renderer for the specified surface and setup the renderer for drawing, if needed. This is invoked when the ViewAncestor has potentially lost the hardware renderer. The hardware renderer should be reinitialized and setup when the render {@link #isRequested()} and {@link #isEnabled()}.
Creates a hardware renderer using OpenGL.
Invoke this method when the system is running out of memory. This method will attempt to recover as much memory as possible, based on the specified hint.
Indicates whether hardware acceleration is currently enabled.
Indicates whether hardware acceleration is currently enabled.
Indicates whether hardware acceleration is currently request but not necessarily enabled yet.
Indicates whether hardware acceleration is currently requested but not necessarily enabled yet.
Indicates whether this renderer instance can track and update dirty regions.
Checks for OpenGL errors. If an error has occured, {@link #destroy(boolean)} is invoked and the requested flag is turned off. The error code is also logged as a warning.
Ensures the current EGL context is the one we expect.
Cast an IBinder object into an android.view.IApplicationToken interface, generating a proxy if needed.
Creates a new input channel pair.  One channel should be provided to the input dispatcher and the other to the application's input queue.
Gets the name of the input channel.
Disposes the input channel. Explicitly releases the reference this object is holding on the input channel. When all references are released, the input channel will be closed.
Transfers ownership of the internal state of the input channel to another instance and invalidates this instance.  This is used to pass an input channel as an out parameter in a binder call.
Gets information about the input device with the specified id.
Gets the ids of all input devices in the system.
Gets the input device id.
Gets the name of this input device.
Gets the input sources supported by this input device as a combined bitfield.
Gets the keyboard type.
Gets the key character map associated with this input device.
Gets information about the range of values for a particular {@link MotionEvent} axis. If the device supports multiple sources, the same axis may have different meanings for each source.  Returns information about the first axis found for any source. To obtain information about the axis for a specific source, use {@link #getMotionRange(int, int)}. supported by the device.
Gets information about the range of values for a particular {@link MotionEvent} axis used by a particular source on the device. If the device supports multiple sources, the same axis may have different meanings for each source. supported by the device.
Gets the ranges for all axes supported by the device.
Gets the axis id.
Gets the source for which the axis is defined.
Gets the inclusive minimum value for the axis.
Gets the inclusive maximum value for the axis.
Gets the range of the axis (difference between maximum and minimum).
Gets the extent of the center flat position with respect to this axis. <p> For example, a flat value of 8 means that the center position is between -8 and +8. This value is mainly useful for calibrating self-centering devices. </p>
Gets the error tolerance for input device measurements with respect to this axis. <p> For example, a value of 2 indicates that the measured value may be up to +/- 2 units away from the actual value due to noise and device sensitivity limitations. </p>
Gets the device that this event came from.
Creates an input consistency verifier.
Determines whether the instrumentation should be enabled.
Resets the state of the input event consistency verifier.
Checks an arbitrary input event. or 1 from a subclass.  If the event was already checked by this consistency verifier at a higher nesting level, it will not be checked again.  Used to handle the situation where a subclass dispatching method delegates to its superclass's dispatching method and both dispatching methods call into the consistency verifier.
Checks a key event. or 1 from a subclass.  If the event was already checked by this consistency verifier at a higher nesting level, it will not be checked again.  Used to handle the situation where a subclass dispatching method delegates to its superclass's dispatching method and both dispatching methods call into the consistency verifier.
Checks a trackball event. or 1 from a subclass.  If the event was already checked by this consistency verifier at a higher nesting level, it will not be checked again.  Used to handle the situation where a subclass dispatching method delegates to its superclass's dispatching method and both dispatching methods call into the consistency verifier.
Checks a touch event. or 1 from a subclass.  If the event was already checked by this consistency verifier at a higher nesting level, it will not be checked again.  Used to handle the situation where a subclass dispatching method delegates to its superclass's dispatching method and both dispatching methods call into the consistency verifier.
Checks a generic motion event. or 1 from a subclass.  If the event was already checked by this consistency verifier at a higher nesting level, it will not be checked again.  Used to handle the situation where a subclass dispatching method delegates to its superclass's dispatching method and both dispatching methods call into the consistency verifier.
Notifies the verifier that a given event was unhandled and the rest of the trace for the event should be ignored. This method should only be called if the event was previously checked by the consistency verifier using {@link #onInputEvent} and other methods. or 1 from a subclass.  If the event was already checked by this consistency verifier at a higher nesting level, it will not be checked again.  Used to handle the situation where a subclass dispatching method delegates to its superclass's dispatching method and both dispatching methods call into the consistency verifier.
Registers an input channel and handler.
Unregisters an input channel. Does nothing if the channel is not currently registered.
Cast an IBinder object into an android.view.IOnKeyguardExitResult interface, generating a proxy if needed.
Cast an IBinder object into an android.view.IRotationWatcher interface, generating a proxy if needed.
Cast an IBinder object into an android.view.IWindow interface, generating a proxy if needed.
===== NOTICE ===== The first method must remain the first method. Scripts and tools rely on their transaction number to work properly. Invoked by the view server to tell a window to execute the specified command. Any response from the receiver must be sent through the specified file descriptor.
Tell the window that it is either gaining or losing focus.  Keep it up to date on the current state showing navigational focus (touch mode) too.
Called for wallpaper windows when their offsets change.
Drag/drop events
System chrome visibility changes
Cast an IBinder object into an android.view.IWindowManager interface, generating a proxy if needed.
===== NOTICE ===== The first three methods must remain the first three methods. Scripts and tools rely on their transaction number to work properly. This is used for debugging
Transaction #1
Transaction #2
Transaction #3
Is device configured with a hideable status bar or a tablet system bar?
These can only be called when injecting events to your own window, or by holding the INJECT_EVENTS permission.  These methods may block until pending input events are finished being dispatched even when 'sync' is false. Avoid calling these methods on your UI thread or use the 'NoWait' version instead.
These can only be called when holding the MANAGE_APP_TOKENS permission.
Re-evaluate the current orientation from the caller's state. If there is a change, the new Configuration is returned and the caller must call setNewConfiguration() sometime later.
these require DISABLE_KEYGUARD permission
These can only be called with the SET_ANIMATON_SCALE permission.
These require the READ_INPUT_STATE permission.
Report whether the hardware supports the given keys; returns true if successful
Get input device information.
For testing
For StrictMode flashing a red border on violations from the UI thread.  The uid/pid is implicit from the Binder call, and the Window Manager uses that to determine whether or not the red border should actually be shown.  (it will be ignored that pid doesn't have windows on screen)
Proxy to set the system property for whether the flashing should be enabled.  The 'enabled' value is null or blank for the system default (differs per build variant) or any valid boolean string as parsed by SystemProperties.getBoolean().
These can only be called with the SET_ORIENTATION permission. Update the current screen rotation based on the current state of the world. be evaluated.  This can be used when there are other parameters in configuration that are changing.
Retrieve the current screen orientation, constants as per {@link android.view.Surface}.
Watch the rotation of the screen.  Returns the current rotation, calls back when it changes.
Determine the preferred edge of the screen to pin the compact options menu against.
Lock the device orientation to the specified rotation, or to the current rotation if -1.  Sensor input will be ignored until thawRotation() is called.
Release the orientation lock imposed by freezeRotation().
Create a screenshot of the applications currently displayed.
Called by the status bar to notify Views of changes to System UI visiblity.
Called by the settings application to temporarily set the pointer speed.
Block until the given window has been drawn to the screen.
Device has a software navigation bar (separate from the status bar).
Cast an IBinder object into an android.view.IWindowSession interface, generating a proxy if needed.
Change the parameters of a window.  You supply the new parameters, it returns the new frame of the window on screen (the position should be ignored) and surface of the window.  The surface will be invalid if the window is currently hidden, else you can use it to draw the window's contents. internal insets; as a result, the window will not impact other window layouts until the insets are given. screen. <var>outFrame</var> in which the content of the window should be placed.  This can be used to modify the window layout to ensure its contents are visible to the user, taking into account system windows like the status bar or a soft keyboard. <var>outFrame</var> in which the window is actually completely visible to the user.  This can be used to temporarily scroll the window's contents to make sure the user can see it.  This is different than <var>outContentInsets</var> in that these insets change transiently, so complex relayout of the window should not happen based on them. becoming visible and the global configuration has changed since it was last displayed. {@link WindowManagerImpl#RELAYOUT_FIRST_TIME}.
Called by a client to report that it ran out of graphics memory.
Give the window manager a hint of the part of the window that is completely transparent, allowing it to work with the surface flinger to optimize compositing of this part of the window.
Tell the window manager about the content and visible insets of the given window, which can be used to adjust the <var>outContentInsets</var> and <var>outVisibleInsets</var> values returned by {@link #relayout relayout()} for windows behind this one. frame can receive pointer events, as defined by {@link android.view.ViewTreeObserver.InternalInsetsInfo}.
Return the current display size in which the window is being laid out, accounting for screen decorations around it.
Allocate the drag's thumbnail surface.  Also assigns a token that identifies the drag to the OS and passes that as the return value.  A return value of null indicates failure.
Initiate the drag operation itself
Report the result of a drop action targeted to the given window. consumed is 'true' when the drop was accepted by a valid recipient, 'false' otherwise.
Tell the OS that we've just dragged into a View that is willing to accept the drop
Tell the OS that we've just dragged *off* of a View that was willing to accept the drop
For windows with the wallpaper behind them, and the wallpaper is larger than the screen, set the offset within the screen. For multi screen launcher type applications, xstep and ystep indicate how big the increment is from one screen to another.
Loads the key character maps for the keyboard with the specified device id. could not be loaded because it was malformed or the default key character map is missing from the system.
Gets the Unicode character generated by the specified key and meta key state combination. <p> Returns the Unicode character that the specified key would produce when the specified meta bits (see {@link MetaKeyKeyListener}) were active. </p><p> Returns 0 if the key is not one that is used to type Unicode characters. </p><p> If the return value has bit {@link #COMBINING_ACCENT} set, the key is a "dead key" that should be combined with another to actually produce a character -- see {@link #getDeadChar} -- after masking with {@link #COMBINING_ACCENT_MASK}. </p>
Gets the fallback action to perform if the application does not handle the specified key. <p> When an application does not handle a particular key, the system may translate the key to an alternate fallback key (specified in the fallback action) and dispatch it to the application. The event containing the fallback key is flagged with {@link KeyEvent#FLAG_FALLBACK}. </p>
Gets the number or symbol associated with the key. <p> The character value is returned, not the numeric value. If the key is not a number, but is a symbol, the symbol is retuned. </p><p> This method is intended to to support dial pads and other numeric or symbolic entry on keyboards where certain keys serve dual function as alphabetic and symbolic keys.  This method returns the number or symbol associated with the key independent of whether the user has pressed the required modifier. </p><p> For example, on one particular keyboard the keys on the top QWERTY row generate numbers when ALT is pressed such that ALT-Q maps to '1'.  So for that keyboard when {@link #getNumber} is called with {@link KeyEvent#KEYCODE_Q} it returns '1' so that the user can type numbers without pressing ALT when it makes sense. </p>
Gets the first character in the character array that can be generated by the specified key code. <p> This is a convenience function that returns the same value as {@link #getMatch(int,char[],int) getMatch(keyCode, chars, 0)}. </p>
Gets the first character in the character array that can be generated by the specified key code.  If there are multiple choices, prefers the one that would be generated with the specified meta key modifier state.
Gets the primary character for this key. In other words, the label that is physically printed on it.
Get the character that is produced by putting accent on the character c. For example, getDeadChar('`', 'e') returns &egrave;.
Get an array of KeyEvent objects that if put into the input stream could plausibly generate the provided sequence of characters.  It is not guaranteed that the sequence is the only way to generate these events or that it is optimal. <p> This function is primarily offered for instrumentation and testing purposes. It may fail to map characters to key codes.  In particular, the key character map for the {@link #BUILT_IN_KEYBOARD built-in keyboard} device id may be empty. Consider using the key character map associated with the {@link #VIRTUAL_KEYBOARD virtual keyboard} device id instead. </p><p> For robust text entry, do not use this function.  Instead construct a {@link KeyEvent} with action code {@link KeyEvent#ACTION_MULTIPLE} that contains the desired string using {@link KeyEvent#KeyEvent(long, String, int, int)}. </p>
Returns true if the specified key produces a glyph.
Gets the keyboard type. Returns {@link #NUMERIC}, {@link #PREDICTIVE}, {@link #ALPHA} or {@link #FULL}. <p> Different keyboard types have different semantics.  Refer to the documentation associated with the keyboard type constants for details. </p>
Gets a constant that describes the behavior of this keyboard's modifier keys such as {@link KeyEvent#KEYCODE_SHIFT_LEFT}. <p> Currently there are two behaviors that may be combined: </p> <ul> <li>Chorded behavior: When the modifier key is pressed together with one or more character keys, the keyboard inserts the modified keys and then resets the modifier state when the modifier key is released.</li> <li>Toggled behavior: When the modifier key is pressed and released on its own it first toggles into a latched state.  When latched, the modifier will apply to next character key that is pressed and will then reset itself to the initial state. If the modifier is already latched and the modifier key is pressed and release on its own again, then it toggles into a locked state.  When locked, the modifier will apply to all subsequent character keys that are pressed until unlocked by pressing the modifier key on its own one more time to reset it to the initial state. Toggled behavior is useful for small profile keyboards designed for thumb typing. </ul> <p> This function currently returns {@link #MODIFIER_BEHAVIOR_CHORDED} when the {@link #getKeyboardType() keyboard type} is {@link #FULL} or {@link #SPECIAL_FUNCTION} and {@link #MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED} otherwise. In the future, the function may also take into account global keyboard accessibility settings, other user preferences, or new device capabilities. </p>
Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given key code.
Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given array of key codes. are set to true if at least one attached keyboard supports the corresponding key code at the same index in the key codes array.
Returns the maximum keycode.
Get the character that is produced by putting accent on the character For example, getDeadChar('`', 'e') returns &egrave;.
Create a new key event. {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}.
Create a new key event. at which this key code originally went down. at which this event happened. {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}. initial down) or event count for multiple events.
Create a new key event for a string of characters.  The key code, action, repeat count and source will automatically be set to {@link #KEYCODE_UNKNOWN}, {@link #ACTION_MULTIPLE}, 0, and {@link InputDevice#SOURCE_KEYBOARD} for you. at which this event occured.
Make an exact copy of an existing key event.
Obtains a (potentially recycled) key event.
Obtains a (potentially recycled) copy of another key event.
Recycles a key event. Key events should only be recycled if they are owned by the system since user code expects them to be essentially immutable, "tracking" notwithstanding.
Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value. (in {@link android.os.SystemClock#uptimeMillis}) of the event.
Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value. (in {@link android.os.SystemClock#uptimeMillis}) of the event. in the original event.
Copy an existing key event, modifying its action.
Create a new key event that is the same as the given one, but whose action is replaced with the given value.
Create a new key event that is the same as the given one, but whose flags are replaced with the given value.
Don't use in new code, instead explicitly check {@link #getAction()}.
Is this a system key?  System keys can not be used for menu shortcuts. TODO: this information should come from a table somewhere. TODO: should the dpad keys be here?  arguably, because they also shouldn't be menu shortcuts
Returns true if the specified keycode is a gamepad button.
<p>Returns the state of the meta keys.</p>
Returns the state of the modifier keys. <p> For the purposes of this function, {@link #KEYCODE_CAPS_LOCK}, {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are not considered modifier keys.  Consequently, this function specifically masks out {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}. </p><p> The value returned consists of the meta state (from {@link #getMetaState}) normalized using {@link #normalizeMetaState(int)} and then masked with {@link #getModifierMetaStateMask} so that only valid modifier bits are retained. </p>
Returns the flags for this key event.
Gets a mask that includes all valid modifier key meta state bits. <p> For the purposes of this function, {@link #KEYCODE_CAPS_LOCK}, {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are not considered modifier keys.  Consequently, the mask specifically excludes {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}. </p> {@link #META_SHIFT_ON}, {@link #META_SHIFT_LEFT_ON}, {@link #META_SHIFT_RIGHT_ON}, {@link #META_ALT_ON}, {@link #META_ALT_LEFT_ON}, {@link #META_ALT_RIGHT_ON}, {@link #META_CTRL_ON}, {@link #META_CTRL_LEFT_ON}, {@link #META_CTRL_RIGHT_ON}, {@link #META_META_ON}, {@link #META_META_LEFT_ON}, {@link #META_META_RIGHT_ON}, {@link #META_SYM_ON}, {@link #META_FUNCTION_ON}.
Returns true if this key code is a modifier key. <p> For the purposes of this function, {@link #KEYCODE_CAPS_LOCK}, {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are not considered modifier keys.  Consequently, this function return false for those keys. </p> {@link #KEYCODE_SHIFT_LEFT} {@link #KEYCODE_SHIFT_RIGHT}, {@link #KEYCODE_ALT_LEFT}, {@link #KEYCODE_ALT_RIGHT}, {@link #KEYCODE_CTRL_LEFT}, {@link #KEYCODE_CTRL_RIGHT}, {@link #KEYCODE_META_LEFT}, or {@link #KEYCODE_META_RIGHT}, {@link #KEYCODE_SYM}, {@link #KEYCODE_NUM}, {@link #KEYCODE_FUNCTION}.
Normalizes the specified meta state. <p> The meta state is normalized such that if either the left or right modifier meta state bits are set then the result will also include the universal bit for that modifier. </p><p> If the specified meta state contains {@link #META_ALT_LEFT_ON} then the result will also contain {@link #META_ALT_ON} in addition to {@link #META_ALT_LEFT_ON} and the other bits that were specified in the input.  The same is process is performed for shift, control and meta. </p><p> If the specified meta state contains synthetic meta states defined by {@link MetaKeyKeyListener}, then those states are translated here and the original synthetic meta states are removed from the result. {@link MetaKeyKeyListener#META_CAP_LOCKED} is translated to {@link #META_CAPS_LOCK_ON}. {@link MetaKeyKeyListener#META_ALT_LOCKED} is translated to {@link #META_ALT_ON}. {@link MetaKeyKeyListener#META_SYM_LOCKED} is translated to {@link #META_SYM_ON}. </p><p> Undefined meta state bits are removed. </p>
Returns true if no modifiers keys are pressed according to the specified meta state. <p> For the purposes of this function, {@link #KEYCODE_CAPS_LOCK}, {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are not considered modifier keys.  Consequently, this function ignores {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}. </p><p> The meta state is normalized prior to comparison using {@link #normalizeMetaState(int)}. </p>
Returns true if only the specified modifier keys are pressed according to the specified meta state.  Returns false if a different combination of modifier keys are pressed. <p> For the purposes of this function, {@link #KEYCODE_CAPS_LOCK}, {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are not considered modifier keys.  Consequently, this function ignores {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}. </p><p> If the specified modifier mask includes directional modifiers, such as {@link #META_SHIFT_LEFT_ON}, then this method ensures that the modifier is pressed on that side. If the specified modifier mask includes non-directional modifiers, such as {@link #META_SHIFT_ON}, then this method ensures that the modifier is pressed on either side. If the specified modifier mask includes both directional and non-directional modifiers for the same type of key, such as {@link #META_SHIFT_ON} and {@link #META_SHIFT_LEFT_ON}, then this method throws an illegal argument exception. </p> of modifier meta states as defined by {@link #getModifierMetaStateMask()}.  May be 0 to ensure that no modifier keys are pressed.
Returns true if no modifier keys are pressed. <p> For the purposes of this function, {@link #KEYCODE_CAPS_LOCK}, {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are not considered modifier keys.  Consequently, this function ignores {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}. </p><p> The meta state is normalized prior to comparison using {@link #normalizeMetaState(int)}. </p>
Returns true if only the specified modifiers keys are pressed. Returns false if a different combination of modifier keys are pressed. <p> For the purposes of this function, {@link #KEYCODE_CAPS_LOCK}, {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are not considered modifier keys.  Consequently, this function ignores {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}. </p><p> If the specified modifier mask includes directional modifiers, such as {@link #META_SHIFT_LEFT_ON}, then this method ensures that the modifier is pressed on that side. If the specified modifier mask includes non-directional modifiers, such as {@link #META_SHIFT_ON}, then this method ensures that the modifier is pressed on either side. If the specified modifier mask includes both directional and non-directional modifiers for the same type of key, such as {@link #META_SHIFT_ON} and {@link #META_SHIFT_LEFT_ON}, then this method throws an illegal argument exception. </p> of modifier meta states as defined by {@link #getModifierMetaStateMask()}.  May be 0 to ensure that no modifier keys are pressed.
<p>Returns the pressed state of the ALT meta key.</p>
<p>Returns the pressed state of the SHIFT meta key.</p>
<p>Returns the pressed state of the SYM meta key.</p>
<p>Returns the pressed state of the CTRL meta key.</p>
<p>Returns the pressed state of the META meta key.</p>
<p>Returns the pressed state of the FUNCTION meta key.</p>
<p>Returns the locked state of the CAPS LOCK meta key.</p>
<p>Returns the locked state of the NUM LOCK meta key.</p>
<p>Returns the locked state of the SCROLL LOCK meta key.</p>
Retrieve the action of this key event.  May be either {@link #ACTION_DOWN}, {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}.
For {@link #ACTION_UP} events, indicates that the event has been canceled as per {@link #FLAG_CANCELED}.
Call this during {@link Callback#onKeyDown} to have the system track the key through its final up (possibly including a long press).  Note that only one key can be tracked at a time -- if another key down event is received while a previous one is being tracked, tracking is stopped on the previous event.
For {@link #ACTION_UP} events, indicates that the event is still being tracked from its initial down event as per {@link #FLAG_TRACKING}.
For {@link #ACTION_DOWN} events, indicates that the event has been canceled as per {@link #FLAG_LONG_PRESS}.
Retrieve the key code of the key event.  This is the physical key that was pressed, <em>not</em> the Unicode character.
For the special case of a {@link #ACTION_MULTIPLE} event with key code of {@link #KEYCODE_UNKNOWN}, this is a raw string of characters associated with the event.  In all other cases it is null. the event.
Retrieve the hardware key id of this key event.  These values are not reliable and vary from device to device. {@more} Mostly this is here for debugging purposes.
Retrieve the repeat count of the event.  For both key up and key down events, this is the number of times the key has repeated with the first down starting at 0 and counting up from there.  For multiple key events, this is the number of down/up pairs that have occurred.
Retrieve the time of the most recent key down event, in the {@link android.os.SystemClock#uptimeMillis} time base.  If this is a down event, this will be the same as {@link #getEventTime()}. Note that when chording keys, this value is the down time of the most recently pressed key, which may <em>not</em> be the same physical key of this event. {@link android.os.SystemClock#uptimeMillis} time base
Retrieve the time this event occurred, in the {@link android.os.SystemClock#uptimeMillis} time base. in the {@link android.os.SystemClock#uptimeMillis} time base.
Gets the {@link KeyCharacterMap} associated with the keyboard device. could not be loaded because it was malformed or the default key character map is missing from the system.
Gets the Unicode character generated by the specified key and meta key state combination. <p> Returns the Unicode character that the specified key would produce when the specified meta bits (see {@link MetaKeyKeyListener}) were active. </p><p> Returns 0 if the key is not one that is used to type Unicode characters. </p><p> If the return value has bit {@link KeyCharacterMap#COMBINING_ACCENT} set, the key is a "dead key" that should be combined with another to actually produce a character -- see {@link KeyCharacterMap#getDeadChar} -- after masking with {@link KeyCharacterMap#COMBINING_ACCENT_MASK}. </p>
Gets the first character in the character array that can be generated by the specified key code. <p> This is a convenience function that returns the same value as {@link #getMatch(char[],int) getMatch(chars, 0)}. </p>
Returns true if this key produces a glyph.
Deliver this key event to a {@link Callback} interface.  If this is an ACTION_MULTIPLE event and it is not handled, then an attempt will be made to deliver a single normal event.
Reset back to initial state.
Stop any tracking associated with this target.
Start tracking the key code associated with the given event.  This can only be called on a key down.  It will allow you to see any long press associated with the key, and will result in {@link KeyEvent#isTracking} return true on the long press and up events. <p>This is only needed if you are directly dispatching events, rather than handling them in {@link Callback#onKeyDown}.
Return true if the key event is for a key code that is currently being tracked by the dispatcher.
Keep track of the given event's key code as having performed an action with a long press, so no action should occur on the up. <p>This is only needed if you are directly dispatching events, rather than handling them in {@link Callback#onKeyLongPress}.
Handle key up event to stop tracking.  This resets the dispatcher state, and updates the key event state based on it. <p>This is only needed if you are directly dispatching events, rather than handling them in {@link Callback#onKeyUp}.
Returns a string that represents the symbolic name of the specified action such as "ACTION_DOWN", or an equivalent numeric constant such as "35" if unknown.
Returns a string that represents the symbolic name of the specified keycode such as "KEYCODE_A", "KEYCODE_DPAD_UP", or an equivalent numeric constant such as "1001" if unknown.
Gets a keycode by its symbolic name such as "KEYCODE_A" or an equivalent numeric constant such as "1001".
Returns a string that represents the symbolic name of the specified combined meta key modifier state flags such as "0", "META_SHIFT_ON", "META_ALT_ON|META_SHIFT_ON" or an equivalent numeric constant such as "0x10000000" if unknown.
Create a new LayoutInflater instance associated with a particular Context. Applications will almost always want to use {@link Context#getSystemService Context.getSystemService()} to retrieve the standard {@link Context#LAYOUT_INFLATER_SERVICE Context.INFLATER_SERVICE}. Views; most importantly, this supplies the theme from which the default values for their attributes are retrieved.
Create a new LayoutInflater instance that is a copy of an existing LayoutInflater, optionally with its Context changed.  For use in implementing {@link #cloneInContext}.
Obtains the LayoutInflater from the given context.
Return the current {@link Factory} (or null). This is called on each element name. If the factory returns a View, add that to the hierarchy. If it returns null, proceed to call onCreateView(name).
Return the current {@link Factory2}.  Returns null if no factory is set or the set factory does not implement the {@link Factory2} interface. This is called on each element name. If the factory returns a View, add that to the hierarchy. If it returns null, proceed to call onCreateView(name).
Attach a custom Factory interface for creating views while using this LayoutInflater.  This must not be null, and can only be set once; after setting, you can not change the factory.  This is called on each element name as the xml is parsed. If the factory returns a View, that is added to the hierarchy. If it returns null, the next factory default {@link #onCreateView} method is called. <p>If you have an existing LayoutInflater and want to add your own factory to it, use {@link #cloneInContext} to clone the existing instance and then you can use this function (once) on the returned new instance.  This will merge your own factory with whatever factory the original instance is using.
Like {@link #setFactory}, but allows you to set a {@link Factory2} interface.
that are allowed to be inflated.
Sets the {@link Filter} to by this LayoutInflater. If a view is attempted to be inflated which is not allowed by the {@link Filter}, the {@link #inflate(int, ViewGroup)} call will throw an {@link InflateException}. This filter will replace any previous filter set on this LayoutInflater.
Inflate a new view hierarchy from the specified xml resource. Throws {@link InflateException} if there is an error.
Inflate a new view hierarchy from the specified xml node. Throws {@link InflateException} if there is an error. <p> <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
Inflate a new view hierarchy from the specified XML node. Throws {@link InflateException} if there is an error. <p> <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
Low-level function for instantiating a view by name. This attempts to instantiate a view class of the given <var>name</var> found in this LayoutInflater's ClassLoader. <p> There are two things that can happen in an error case: either the exception describing the error will be thrown, or a null will be returned. You must deal with both possibilities -- the former will happen the first time createView() is called for a class of a particular name, the latter every time there-after for that class name.
Throw an exception because the specified class is not allowed to be inflated.
This routine is responsible for creating the correct subclass of View given the xml element name. Override it to handle custom view objects. If you override this in your subclass be sure to call through to super.onCreateView(name) for names you do not recognize.
Version of {@link #onCreateView(String, AttributeSet)} that also takes the future parent of the view being constructure.  The default implementation simply calls {@link #onCreateView(String, AttributeSet)}. this may be null.</em>
default visibility so the BridgeInflater can override it.
Recursive method used to descend down the xml hierarchy and instantiate views, instantiate their children, and then call onFinishInflate().
Create a new MotionEvent, filling in all of the basic values that define the motion. a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}. must be obtained from {@link SystemClock#uptimeMillis()}. a {@link PointerProperties} property object for each pointer, which must include the pointer identifier. a {@link PointerCoords} coordinate object for each pointer. the event was generated. zero indicates that the event didn't come from a physical device; other numbers are arbitrary and you shouldn't depend on the values. MotionEvent.
Create a new MotionEvent, filling in all of the basic values that define the motion. a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}. must be obtained from {@link SystemClock#uptimeMillis()}. ranges from 0 (no pressure at all) to 1 (normal pressure), however values higher than 1 may be generated depending on the calibration of the input device. touched with the finger. The actual value in pixels corresponding to the finger touch is normalized with a device specific range of values and scaled to a value between 0 and 1. the event was generated. zero indicates that the event didn't come from a physical device; other numbers are arbitrary and you shouldn't depend on the values. MotionEvent.
Create a new MotionEvent, filling in a subset of the basic motion values.  Those not specified here are: device id (always 0), pressure and size (always 1), x and y precision (always 1), and edgeFlags (always 0). a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}. must be obtained from {@link SystemClock#uptimeMillis()}. the event was generated.
Create a new MotionEvent, copying from an existing one.
Create a new MotionEvent, copying from an existing one, but not including any historical point information.
Recycle the MotionEvent, to be re-used by a later caller.  After calling this function you must not ever touch the event again.
Scales down the coordination of this event by the given scale.
Return the kind of action being performed. Consider using {@link #getActionMasked} and {@link #getActionIndex} to retrieve the separate masked action and pointer index. the combination of {@link #ACTION_POINTER_DOWN} with a shifted pointer index.
Return the masked action being performed, without pointer index information. Use {@link #getActionIndex} to return the index associated with pointer actions.
For {@link #ACTION_POINTER_DOWN} or {@link #ACTION_POINTER_UP} as returned by {@link #getActionMasked}, this returns the associated pointer index. The index may be used with {@link #getPointerId(int)}, {@link #getX(int)}, {@link #getY(int)}, {@link #getPressure(int)}, and {@link #getSize(int)} to get information about the pointer that has gone down or up.
Returns true if this motion event is a touch event. <p> Specifically excludes pointer events with action {@link #ACTION_HOVER_MOVE}, {@link #ACTION_HOVER_ENTER}, {@link #ACTION_HOVER_EXIT}, or {@link #ACTION_SCROLL} because they are not actually touch events (the pointer is not down). </p>
Gets the motion event flags.
Returns the time (in ms) when the user originally pressed down to start a stream of position events.
Sets the time (in ms) when the user originally pressed down to start a stream of position events.
Returns the time (in ms) when this specific event was generated.
Returns the time (in ns) when this specific event was generated. The value is in nanosecond precision but it may not have nanosecond accuracy.
{@link #getX(int)} for the first pointer index (may be an arbitrary pointer identifier).
{@link #getY(int)} for the first pointer index (may be an arbitrary pointer identifier).
{@link #getPressure(int)} for the first pointer index (may be an arbitrary pointer identifier).
{@link #getSize(int)} for the first pointer index (may be an arbitrary pointer identifier).
{@link #getTouchMajor(int)} for the first pointer index (may be an arbitrary pointer identifier).
{@link #getTouchMinor(int)} for the first pointer index (may be an arbitrary pointer identifier).
{@link #getToolMajor(int)} for the first pointer index (may be an arbitrary pointer identifier).
{@link #getToolMinor(int)} for the first pointer index (may be an arbitrary pointer identifier).
{@link #getOrientation(int)} for the first pointer index (may be an arbitrary pointer identifier).
{@link #getAxisValue(int)} for the first pointer index (may be an arbitrary pointer identifier).
Return the pointer identifier associated with a particular pointer data index is this event.  The identifier tells you the actual pointer number associated with the data, accounting for individual pointers going up and down since the start of the current gesture. (the first pointer that is down) to {@link #getPointerCount()}-1.
Gets the tool type of a pointer for the given pointer index. The tool type indicates the type of tool used to make contact such as a finger or stylus, if known. (the first pointer that is down) to {@link #getPointerCount()}-1.
Given a pointer identifier, find the index of its data in the event. {@link #getX(int)} et al.), or -1 if there is no data available for that pointer identifier.
Returns the X coordinate of this event for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). Whole numbers are pixels; the value may have a fraction for input devices that are sub-pixel precise. (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns the Y coordinate of this event for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). Whole numbers are pixels; the value may have a fraction for input devices that are sub-pixel precise. (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns the current pressure of this event for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure), however values higher than 1 may be generated depending on the calibration of the input device. (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns a scaled value of the approximate size for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). This represents some approximation of the area of the screen being pressed; the actual value in pixels corresponding to the touch is normalized with the device specific range of values and scaled to a value between 0 and 1. The value of size can be used to determine fat touch events. (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns the length of the major axis of an ellipse that describes the touch area at the point of contact for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns the length of the minor axis of an ellipse that describes the touch area at the point of contact for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns the length of the major axis of an ellipse that describes the size of the approaching tool for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). The tool area represents the estimated size of the finger or pen that is touching the device independent of its actual touch area at the point of contact. (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns the length of the minor axis of an ellipse that describes the size of the approaching tool for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). The tool area represents the estimated size of the finger or pen that is touching the device independent of its actual touch area at the point of contact. (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns the orientation of the touch area and tool area in radians clockwise from vertical for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). An angle of 0 radians indicates that the major axis of contact is oriented upwards, is perfectly circular or is of unknown orientation.  A positive angle indicates that the major axis of contact is oriented to the right.  A negative angle indicates that the major axis of contact is oriented to the left. The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians (finger pointing fully right). (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns the value of the requested axis for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer identifier for this index). (the first pointer that is down) to {@link #getPointerCount()}-1.
Populates a {@link PointerCoords} object with pointer coordinate data for the specified pointer index. (the first pointer that is down) to {@link #getPointerCount()}-1.
Populates a {@link PointerProperties} object with pointer properties for the specified pointer index. (the first pointer that is down) to {@link #getPointerCount()}-1.
Returns the state of any meta / modifier keys that were in effect when the event was generated.  This is the same values as those returned by {@link KeyEvent#getMetaState() KeyEvent.getMetaState}.
Gets the state of all buttons that are pressed such as a mouse or stylus button.
Returns the original raw X coordinate of this event.  For touch events on the screen, this is the original location of the event on the screen, before it had been adjusted for the containing window and views.
Returns the original raw Y coordinate of this event.  For touch events on the screen, this is the original location of the event on the screen, before it had been adjusted for the containing window and views.
Return the precision of the X coordinates being reported.  You can multiply this number with {@link #getX} to find the actual hardware value of the X coordinate.
Return the precision of the Y coordinates being reported.  You can multiply this number with {@link #getY} to find the actual hardware value of the Y coordinate.
Returns the number of historical points in this event.  These are movements that have occurred between this event and the previous event. This only applies to ACTION_MOVE events -- all other actions will have a size of 0.
Returns the time that a historical movement occurred between this event and the previous event.  Only applies to ACTION_MOVE events. {@link #getHistorySize}
{@link #getHistoricalX(int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
{@link #getHistoricalY(int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
{@link #getHistoricalPressure(int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
{@link #getHistoricalSize(int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
{@link #getHistoricalTouchMajor(int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
{@link #getHistoricalTouchMinor(int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
{@link #getHistoricalToolMajor(int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
{@link #getHistoricalToolMinor(int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
{@link #getHistoricalOrientation(int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
{@link #getHistoricalAxisValue(int, int, int)} for the first pointer index (may be an arbitrary pointer identifier). {@link #getHistorySize}
Returns a historical X coordinate, as per {@link #getX(int)}, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns a historical Y coordinate, as per {@link #getY(int)}, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns a historical pressure coordinate, as per {@link #getPressure(int)}, that occurred between this event and the previous event for the given pointer.  Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns a historical size coordinate, as per {@link #getSize(int)}, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns a historical touch major axis coordinate, as per {@link #getTouchMajor(int)}, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns a historical touch minor axis coordinate, as per {@link #getTouchMinor(int)}, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns a historical tool major axis coordinate, as per {@link #getToolMajor(int)}, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns a historical tool minor axis coordinate, as per {@link #getToolMinor(int)}, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns a historical orientation coordinate, as per {@link #getOrientation(int)}, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns the historical value of the requested axis, as per {@link #getAxisValue(int, int)}, occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Populates a {@link PointerCoords} object with historical pointer coordinate data, as per {@link #getPointerCoords}, that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events. (the first pointer that is down) to {@link #getPointerCount()}-1. {@link #getHistorySize}
Returns a bitfield indicating which edges, if any, were touched by this MotionEvent. For touch events, clients can use this to determine if the user's finger was touching the edge of the display. This property is only set for {@link #ACTION_DOWN} events.
Sets the bitfield indicating which edges, if any, were touched by this MotionEvent.
Sets this event's action.
Adjust this event's location.
Set this event's location.  Applies {@link #offsetLocation} with a delta from the current location to the given new location.
Applies a transformation matrix to all of the points in the event.
Add a new movement to the batch of movements in this event.  The event's current location, position and size is updated to the new values. The current values in the event are added to a list of historical values. Only applies to {@link #ACTION_MOVE} or {@link #ACTION_HOVER_MOVE} events.
Returns true if all points in the motion event are completely within the specified bounds.
Returns a new motion events whose points have been clamped to the specified bounds.
Gets an integer where each pointer id present in the event is marked as a bit.
Splits a motion event such that it includes only a subset of pointer ids.
Returns a string that represents the symbolic name of the specified action such as "ACTION_DOWN", "ACTION_POINTER_DOWN(3)" or an equivalent numeric constant such as "35" if unknown.
Returns a string that represents the symbolic name of the specified axis such as "AXIS_X" or an equivalent numeric constant such as "42" if unknown.
Gets an axis by its symbolic name such as "AXIS_X" or an equivalent numeric constant such as "42".
Returns a string that represents the symbolic name of the specified combined button state flags such as "0", "BUTTON_PRIMARY", "BUTTON_PRIMARY|BUTTON_SECONDARY" or an equivalent numeric constant such as "0x10000000" if unknown.
Returns a string that represents the symbolic name of the specified tool type such as "TOOL_TYPE_FINGER" or an equivalent numeric constant such as "42" if unknown.
Creates a pointer coords object as a copy of the contents of another pointer coords object.
Clears the contents of this object. Resets all axes to zero.
Copies the contents of another pointer coords object.
Gets the value associated with the specified axis.
Sets the value associated with the specified axis.
Creates a pointer properties object with an invalid pointer id.
Creates a pointer properties object as a copy of the contents of another pointer properties object.
Resets the pointer properties to their initial values.
Copies the contents of another pointer properties object.
Creates a new OrientationEventListener.
Creates a new OrientationEventListener. {@link android.hardware.SensorManager SensorManager}). Use the default value of {@link android.hardware.SensorManager#SENSOR_DELAY_NORMAL SENSOR_DELAY_NORMAL} for simple screen orientation change detection.
Enables the OrientationEventListener so it will monitor the sensor and call {@link #onOrientationChanged} when the device orientation changes.
Disables the OrientationEventListener.
Returns true if sensor is enabled and false otherwise
Creates a new OrientationListener.
Creates a new OrientationListener. {@link android.hardware.SensorManager SensorManager}). Use the default value of {@link android.hardware.SensorManager#SENSOR_DELAY_NORMAL SENSOR_DELAY_NORMAL} for simple screen orientation change detection.
Enables the OrientationListener so it will monitor the sensor and call {@link #onOrientationChanged} when the device orientation changes.
Disables the OrientationListener.
Gets a special pointer icon that has no bitmap.
Gets the default pointer icon.
Gets a system pointer icon for the given style. If style is not recognized, returns the default pointer icon.
Creates a custom pointer from the given bitmap and hotspot information.
Loads a custom pointer icon from an XML resource. <p> The XML resource should have the following form: <code> &lt;?xml version="1.0" encoding="utf-8"?&gt; android:bitmap="@drawable/my_pointer_bitmap" android:hotSpotX="24" android:hotSpotY="24" /&gt; </code> </p> linked in the resource was not found.
Loads the bitmap and hotspot information for a pointer icon, if it is not already loaded. Returns a pointer icon (not necessarily the same instance) with the information filled in.
Returns true if the pointer icon style is {@link #STYLE_NULL}.
Returns true if the pointer icon has been loaded and its bitmap and hotspot information are available.
Gets the style of the pointer icon.
Gets the bitmap of the pointer icon.
Gets the X offset of the pointer icon hotspot.
Gets the Y offset of the pointer icon hotspot.
Returns {@code true} if a two-finger scale gesture is in progress.
Get the X coordinate of the current gesture's focal point. If a gesture is in progress, the focal point is directly between the two pointers forming the gesture. If a gesture is ending, the focal point is the location of the remaining pointer on the screen. If {@link #isInProgress()} would return false, the result of this function is undefined.
Get the Y coordinate of the current gesture's focal point. If a gesture is in progress, the focal point is directly between the two pointers forming the gesture. If a gesture is ending, the focal point is the location of the remaining pointer on the screen. If {@link #isInProgress()} would return false, the result of this function is undefined.
Return the current x distance between the two pointers forming the gesture in progress.
Return the current y distance between the two pointers forming the gesture in progress.
Return the previous x distance between the two pointers forming the gesture in progress.
Return the previous y distance between the two pointers forming the gesture in progress.
Return the scaling factor from the previous scale event to the current event. This value is defined as ({@link #getCurrentSpan()} / {@link #getPreviousSpan()}).
Return the time difference in milliseconds between the previous accepted scaling event and the current scaling event.
Return the event time of the current event being processed.
Get the sonification constant for the focus directions.
Create Surface from a {@link SurfaceTexture}. Images drawn to the Surface will be made available to the {@link SurfaceTexture}, which can attach them an OpenGL ES texture via {@link SurfaceTexture#updateTexImage}. Surface.
draw into a surface
create a surface @hide
create a surface with a name @hide
Create an empty surface, which will later be filled in by readFromParcel().
Sets the translator used to scale canvas's width/height in compatibility mode.
set the orientation of the given display.
Create a new connection with the surface flinger.
Return the SurfaceHolder providing access and control over this SurfaceView's underlying surface.
This method is not intended for general use. It was created temporarily to improve performance of 3D layers in Launcher and should be removed and fixed properly. Do not call this method. Ever.
This method is not intended for general use. It was created temporarily to improve performance of 3D layers in Launcher and should be removed and fixed properly. Do not call this method. Ever.
Control whether the surface view's surface is placed on top of another regular surface view in the window (but still behind the window itself). This is typically used to place overlays on top of an underlying media surface view. <p>Note that this must be set before the surface view's containing window is attached to the window manager. <p>Calling this overrides any previous call to {@link #setZOrderOnTop}.
Control whether the surface view's surface is placed on top of its window.  Normally it is placed behind the window, to allow it to (for the most part) appear to composite with the views in the hierarchy.  By setting this, you cause it to be placed above the window.  This means that none of the contents of the window this SurfaceView is in will be visible on top of its surface. <p>Note that this must be set before the surface view's containing window is attached to the window manager. <p>Calling this overrides any previous call to {@link #setZOrderMediaOverlay}.
Hack to allow special layering of windows.  The type is one of the types in WindowManager.LayoutParams.  This is a hack so:
Check to see if the surface has fixed size dimensions or if the surface's dimensions are dimensions are dependent on its current layout.
Creates a new TextureView.
Indicates whether the content of this TextureView is opaque. The content is assumed to be opaque by default.
<p>Sets the transform to associate with this texture view. The specified transform applies to the underlying surface texture and does not affect the size or position of the view itself, only of its content.</p> <p>Some transforms might prevent the content from drawing all the pixels contained within this view's bounds. In such situations, make sure this texture view is not marked opaque.</p>
Returns the transform associated with this texture view.
<p>Returns a {@link android.graphics.Bitmap} representation of the content of the associated surface texture. If the surface texture is not available, this method returns null.</p> <p>The bitmap returned by this method uses the {@link Bitmap.Config#ARGB_8888} pixel format and its dimensions are the same as this view's.</p> <p><strong>Do not</strong> invoke this method from a drawing method ({@link #onDraw(android.graphics.Canvas)} for instance).</p> <p>If an error occurs during the copy, an empty bitmap will be returned.</p>
<p>Returns a {@link android.graphics.Bitmap} representation of the content of the associated surface texture. If the surface texture is not available, this method returns null.</p> <p>The bitmap returned by this method uses the {@link Bitmap.Config#ARGB_8888} pixel format.</p> <p><strong>Do not</strong> invoke this method from a drawing method ({@link #onDraw(android.graphics.Canvas)} for instance).</p> <p>If an error occurs during the copy, an empty bitmap will be returned.</p>
<p>Copies the content of this view's surface texture into the specified bitmap. If the surface texture is not available, the copy is not executed. The content of the surface texture will be scaled to fit exactly inside the specified bitmap.</p> <p><strong>Do not</strong> invoke this method from a drawing method ({@link #onDraw(android.graphics.Canvas)} for instance).</p> <p>If an error occurs, the bitmap is left unchanged.</p>
Returns true if the {@link SurfaceTexture} associated with this TextureView is available for rendering. When this method returns true, {@link #getSurfaceTexture()} returns a valid surface texture.
<p>Start editing the pixels in the surface.  The returned Canvas can be used to draw into the surface's bitmap.  A null is returned if the surface has not been created or otherwise cannot be edited. You will usually need to implement {@link SurfaceTextureListener#onSurfaceTextureAvailable(android.graphics.SurfaceTexture, int, int)} to find out when the Surface is available for use.</p> <p>The content of the Surface is never preserved between unlockCanvas() and lockCanvas(), for this reason, every pixel within the Surface area must be written. The only exception to this rule is when a dirty rectangle is specified, in which case, non-dirty pixels will be preserved.</p> <p>This method can only be used if the underlying surface is not already owned by another producer. For instance, if the TextureView is being used to render the camera's preview you cannot invoke this method.</p>
Just like {@link #lockCanvas()} but allows specification of a dirty rectangle. Every pixel within that rectangle must be written; however pixels outside the dirty rectangle will be preserved by the next call to lockCanvas().
Finish editing pixels in the surface. After this call, the surface's current pixels will be shown on the screen, but its content is lost, in particular there is no guarantee that the content of the Surface will remain unchanged when lockCanvas() is called again.
Returns the {@link SurfaceTexture} used by this view. This method may return null if the view is not attached to a window or if the surface texture has not been initialized yet.
Returns the {@link SurfaceTextureListener} currently associated with this texture view.
Sets the {@link SurfaceTextureListener} used to listen to surface texture events.
Will forward touch events to the delegate view if the event is within the bounds specified in the constructor.
Retrieve a new VelocityTracker object to watch the velocity of a motion.  Be sure to call {@link #recycle} when done.  You should generally only maintain an active object while tracking a movement, so that the VelocityTracker can be re-used elsewhere.
Return a VelocityTracker object back to be re-used by others.  You must not touch the object after calling this function.
Reset the velocity tracker back to its initial state.
Add a user's movement to the tracker.  You should call this for the initial {@link MotionEvent#ACTION_DOWN}, the following {@link MotionEvent#ACTION_MOVE} events that you receive, and the final {@link MotionEvent#ACTION_UP}.  You can, however, call this for whichever events you desire.
Equivalent to invoking {@link #computeCurrentVelocity(int, float)} with a maximum velocity of Float.MAX_VALUE.
Compute the current velocity based on the points that have been collected.  Only call this when you actually want to retrieve velocity information, as it is relatively expensive.  You can then retrieve the velocity with {@link #getXVelocity()} and {@link #getYVelocity()}. provides pixels per millisecond, 1000 provides pixels per second, etc. This value must be declared in the same unit as the units parameter. This value must be positive.
Retrieve the last computed X velocity.  You must first call {@link #computeCurrentVelocity(int)} before calling this function.
Retrieve the last computed Y velocity.  You must first call {@link #computeCurrentVelocity(int)} before calling this function.
Get an estimator for the movements of a pointer using past movements of the pointer to predict future movements. It is not necessary to call {@link #computeCurrentVelocity(int)} before calling this method. a lower degree than what is requested here.  If -1, uses the default degree. If -1, uses the default horizon. available about the pointer.
Gets an estimate of the X position of the pointer at the specified time point.
Gets an estimate of the Y position of the pointer at the specified time point.
Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet. <p> The method onFinishInflate() will be called after all children have been added.
Perform inflation from XML and apply a class-specific base style. This constructor of View allows subclasses to use their own base style when they are inflating. For example, a Button class's constructor would call this version of the super class constructor and supply <code>R.attr.buttonStyle</code> for <var>defStyle</var>; this allows the theme's button style to modify all of the base view attributes (in particular its background) as well as the Button class's attributes.
Non-public constructor for use in testing
<p> Initializes the fading edges from a given set of styled attributes. This method should be called by subclasses that need fading edges and when an instance of these subclasses is created programmatically rather than being inflated from XML. This method is automatically called when the XML is inflated. </p>
Returns the size of the vertical faded edges used to indicate that more content in this view is visible.
Set the size of the faded edge used to indicate that more content in this view is available.  Will not change whether the fading edge is enabled; use {@link #setVerticalFadingEdgeEnabled(boolean)} or {@link #setHorizontalFadingEdgeEnabled(boolean)} to enable the fading edge for the vertical or horizontal fading edges.
Returns the size of the horizontal faded edges used to indicate that more content in this view is visible.
Returns the width of the vertical scrollbar.
Returns the height of the horizontal scrollbar.
<p> Initializes the scrollbars from a given set of styled attributes. This method should be called by subclasses that need scrollbars and when an instance of these subclasses is created programmatically rather than being inflated from XML. This method is automatically called when the XML is inflated. </p>
<p> Initalizes the scrollability cache if necessary. </p>
Set the position of the vertical scroll bar. Should be one of {@link #SCROLLBAR_POSITION_DEFAULT}, {@link #SCROLLBAR_POSITION_LEFT} or {@link #SCROLLBAR_POSITION_RIGHT}.
Register a callback to be invoked when focus of this view changed.
Add a listener that will be called when the bounds of the view change due to layout processing.
Remove a listener for layout changes.
Add a listener for attach state changes. This listener will be called whenever this view is attached or detached from a window. Remove the listener using {@link #removeOnAttachStateChangeListener(OnAttachStateChangeListener)}.
Remove a listener for attach state changes. The listener will receive no further notification of window attach/detach events.
Returns the focus-change callback registered for this view.
Register a callback to be invoked when this view is clicked. If this view is not clickable, it becomes clickable.
Register a callback to be invoked when this view is clicked and held. If this view is not long clickable, it becomes long clickable.
Register a callback to be invoked when the context menu for this view is being built. If this view is not long clickable, it becomes long clickable.
Call this view's OnClickListener, if it is defined.
Call this view's OnLongClickListener, if it is defined. Invokes the context menu if the OnLongClickListener did not consume the event.
Performs button-related actions during a touch down event.
Bring up the context menu for this view.
Bring up the context menu for this view, referring to the item under the specified point.
Register a callback to be invoked when a key is pressed in this view.
Register a callback to be invoked when a touch event is sent to this view.
Register a callback to be invoked when a generic motion event is sent to this view.
Register a callback to be invoked when a hover event is sent to this view.
Register a drag event listener callback object for this View. The parameter is an implementation of {@link android.view.View.OnDragListener}. To send a drag event to a View, the system calls the {@link android.view.View.OnDragListener#onDrag(View,DragEvent)} method.
Give this view focus. This will cause {@link #onFocusChanged(boolean, int, android.graphics.Rect)} to be called. Note: this does not check whether this {@link View} should get focus, it just gives it focus no matter what.  It should only be called internally by framework code that knows what it is doing, namely {@link #requestFocus(int, Rect)}.
Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. <p>A View should call this if it maintains some notion of which part of its content is interesting.  For example, a text editing view should call this when its cursor moves.
Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. <p>A View should call this if it maintains some notion of which part of its content is interesting.  For example, a text editing view should call this when its cursor moves. <p>When <code>immediate</code> is set to true, scrolling will not be animated.
Called when this view wants to give up focus. This will cause {@link #onFocusChanged(boolean, int, android.graphics.Rect)} to be called.
Called to clear the focus of a view that is about to be removed. Doesn't call clearChildFocus, which prevents this view from taking focus again before it has been removed from the parent
Called internally by the view system when a new view is getting focus. This is what clears the old focus.
Returns true if this view is focusable or if it contains a reachable View for which {@link #hasFocusable()} returns true. A "reachable hasFocusable()" is a View whose parents do not block descendants focus. Only {@link #VISIBLE} views are considered focusable.
Called by the view system when the focus state of this view changes. When the focus change event is caused by directional navigation, direction and previouslyFocusedRect provide insight into where the focus is coming from. When overriding, be sure to call up through to the super class so that the standard focus handling will occur.
Sends an accessibility event of the given type. If accessiiblity is not enabled this method has no effect. The default implementation calls {@link #onInitializeAccessibilityEvent(AccessibilityEvent)} first to populate information about the event source (this View), then calls {@link #dispatchPopulateAccessibilityEvent(AccessibilityEvent)} to populate the text content of the event source including its descendants, and last calls {@link ViewParent#requestSendAccessibilityEvent(View, AccessibilityEvent)} on its parent to resuest sending of the event to interested parties. <p> If an {@link AccessibilityDelegate} has been specified via calling {@link #setAccessibilityDelegate(AccessibilityDelegate)} its {@link AccessibilityDelegate#sendAccessibilityEvent(View, int)} is responsible for handling this call. </p> {@link android.view.accessibility.AccessibilityEvent}, such as {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED} or {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER}.
Note: Called from the default {@link AccessibilityDelegate}.
This method behaves exactly as {@link #sendAccessibilityEvent(int)} but takes as an argument an empty {@link AccessibilityEvent} and does not perform a check whether accessibility is enabled. <p> If an {@link AccessibilityDelegate} has been specified via calling {@link #setAccessibilityDelegate(AccessibilityDelegate)} its {@link AccessibilityDelegate#sendAccessibilityEventUnchecked(View, AccessibilityEvent)} is responsible for handling this call. </p>
Note: Called from the default {@link AccessibilityDelegate}.
Dispatches an {@link AccessibilityEvent} to the {@link View} first and then to its children for adding their text content to the event. Note that the event text is populated in a separate dispatch path since we add to the event not only the text of the source but also the text of all its descendants. A typical implementation will call {@link #onPopulateAccessibilityEvent(AccessibilityEvent)} on the this view and then call the {@link #dispatchPopulateAccessibilityEvent(AccessibilityEvent)} on each child. Override this method if custom population of the event text content is required. <p> If an {@link AccessibilityDelegate} has been specified via calling {@link #setAccessibilityDelegate(AccessibilityDelegate)} its {@link AccessibilityDelegate#dispatchPopulateAccessibilityEvent(View, AccessibilityEvent)} is responsible for handling this call. </p> <p> <em>Note:</em> Accessibility events of certain types are not dispatched for populating the event text via this method. For details refer to {@link AccessibilityEvent}. </p>
Note: Called from the default {@link AccessibilityDelegate}.
Called from {@link #dispatchPopulateAccessibilityEvent(AccessibilityEvent)} giving a chance to this View to populate the accessibility event with its text content. While this method is free to modify event attributes other than text content, doing so should normally be performed in {@link #onInitializeAccessibilityEvent(AccessibilityEvent)}. <p> Example: Adding formatted date string to an accessibility event in addition <pre> public void onPopulateAccessibilityEvent(AccessibilityEvent event) { }</pre> <p> If an {@link AccessibilityDelegate} has been specified via calling {@link #setAccessibilityDelegate(AccessibilityDelegate)} its {@link AccessibilityDelegate#onPopulateAccessibilityEvent(View, AccessibilityEvent)} is responsible for handling this call. </p> <p class="note"><strong>Note:</strong> Always call the super implementation before adding information to the event, in case the default implementation has basic information to add. </p>
Note: Called from the default {@link AccessibilityDelegate}.
Initializes an {@link AccessibilityEvent} with information about this View which is the event source. In other words, the source of an accessibility event is the view whose state change triggered firing the event. <p> Example: Setting the password property of an event in addition <pre> public void onInitializeAccessibilityEvent(AccessibilityEvent event) { }</pre> <p> If an {@link AccessibilityDelegate} has been specified via calling {@link #setAccessibilityDelegate(AccessibilityDelegate)} its {@link AccessibilityDelegate#onInitializeAccessibilityEvent(View, AccessibilityEvent)} is responsible for handling this call. </p> <p class="note"><strong>Note:</strong> Always call the super implementation before adding information to the event, in case the default implementation has basic information to add. </p>
Note: Called from the default {@link AccessibilityDelegate}.
Returns an {@link AccessibilityNodeInfo} representing this view from the point of view of an {@link android.accessibilityservice.AccessibilityService}. This method is responsible for obtaining an accessibility node info from a pool of reusable instances and calling {@link #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} on this view to initialize the former. <p> Note: The client is responsible for recycling the obtained instance by calling </p>
Initializes an {@link AccessibilityNodeInfo} with information about this view. The base implementation sets: <ul> <li>{@link AccessibilityNodeInfo#setParent(View)},</li> <li>{@link AccessibilityNodeInfo#setBoundsInParent(Rect)},</li> <li>{@link AccessibilityNodeInfo#setBoundsInScreen(Rect)},</li> <li>{@link AccessibilityNodeInfo#setPackageName(CharSequence)},</li> <li>{@link AccessibilityNodeInfo#setClassName(CharSequence)},</li> <li>{@link AccessibilityNodeInfo#setContentDescription(CharSequence)},</li> <li>{@link AccessibilityNodeInfo#setEnabled(boolean)},</li> <li>{@link AccessibilityNodeInfo#setClickable(boolean)},</li> <li>{@link AccessibilityNodeInfo#setFocusable(boolean)},</li> <li>{@link AccessibilityNodeInfo#setFocused(boolean)},</li> <li>{@link AccessibilityNodeInfo#setLongClickable(boolean)},</li> <li>{@link AccessibilityNodeInfo#setSelected(boolean)},</li> </ul> <p> Subclasses should override this method, call the super implementation, and set additional attributes. </p> <p> If an {@link AccessibilityDelegate} has been specified via calling {@link #setAccessibilityDelegate(AccessibilityDelegate)} its {@link AccessibilityDelegate#onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfo)} is responsible for handling this call. </p>
Note: Called from the default {@link AccessibilityDelegate}.
Sets a delegate for implementing accessibility support via compositon as opposed to inheritance. The delegate's primary use is for implementing backwards compatible widgets. For more details see {@link AccessibilityDelegate}.
Gets the unique identifier of this view on the screen for accessibility purposes. If this {@link View} is not attached to any window, {@value #NO_ID} is returned.
Gets the unique identifier of the window in which this View reseides.
Gets the {@link View} description. It briefly describes the view and is primarily used for accessibility support. Set this property to enable better accessibility support for your application. This is especially true for views that do not have textual representation (For example, ImageButton).
Sets the {@link View} description. It briefly describes the view and is primarily used for accessibility support. Set this property to enable better accessibility support for your application. This is especially true for views that do not have textual representation (For example, ImageButton).
Invoked whenever this view loses focus, either by losing window focus or by losing focus within its window. This method can be used to clear any state tied to the focus. For instance, if a button is held pressed with the trackball and the window loses focus, this method can be used to cancel the press. Subclasses of View overriding this method should always call super.onFocusLost().
Find the view in the hierarchy rooted at this view that currently has focus.
Change whether this view is one of the set of scrollable containers in its window.  This will be used to determine whether the window can resize or must pan when a soft input area is open -- scrollable containers allow the window to use resize mode since the container will appropriately shrink.
Returns the quality of the drawing cache.
Set the drawing cache quality of this view. This value is used only when the drawing cache is enabled
Returns whether the screen should remain on, corresponding to the current value of {@link #KEEP_SCREEN_ON}.
Controls whether the screen should remain on, modifying the value of {@link #KEEP_SCREEN_ON}.
Gets the id of the view to use when the next focus is {@link #FOCUS_LEFT}.
Sets the id of the view to use when the next focus is {@link #FOCUS_LEFT}. decide automatically.
Gets the id of the view to use when the next focus is {@link #FOCUS_RIGHT}.
Sets the id of the view to use when the next focus is {@link #FOCUS_RIGHT}. decide automatically.
Gets the id of the view to use when the next focus is {@link #FOCUS_UP}.
Sets the id of the view to use when the next focus is {@link #FOCUS_UP}. decide automatically.
Gets the id of the view to use when the next focus is {@link #FOCUS_DOWN}.
Sets the id of the view to use when the next focus is {@link #FOCUS_DOWN}. decide automatically.
Gets the id of the view to use when the next focus is {@link #FOCUS_FORWARD}.
Sets the id of the view to use when the next focus is {@link #FOCUS_FORWARD}. decide automatically.
Returns the visibility of this view and all of its ancestors
Apply the insets for system windows to this view, if the FITS_SYSTEM_WINDOWS flag is set
Set whether or not this view should account for system screen decorations such as the status bar and inset its content. This allows this view to be positioned in absolute screen coordinates and remain visible to the user. <p>This should only be used by top-level window decor views.
Check for the FITS_SYSTEM_WINDOWS flag. If this method returns true, this view will account for system screen decorations such as the status bar and inset its content. This allows the view to be positioned in absolute screen coordinates and remain visible to the user.
Set whether this view can receive the focus. Setting this to false will also ensure that this view is not focusable in touch mode.
Set whether this view can receive focus while in touch mode. Setting this to true will also ensure that this view is focusable. in touch mode.
Set whether this view should have sound effects enabled for events such as clicking and touching. <p>You may wish to disable sound effects for a view if you already play sounds, for instance, a dial key that plays dtmf tones.
Set whether this view should have haptic feedback for events such as long presses. <p>You may wish to disable haptic feedback if your view already controls its own haptic feedback.
If this view doesn't do any drawing on its own, set this flag to allow further optimizations. By default, this flag is not set on View, but could be set on some View subclasses such as ViewGroup. Typically, if you override {@link #onDraw(android.graphics.Canvas)} you should clear this flag.
When a View's drawing cache is enabled, drawing is redirected to an offscreen bitmap. Some views, like an ImageView, must be able to bypass this mechanism if they already draw a single bitmap, to avoid unnecessary usage of the memory.
Enables or disables click events for this view. When a view is clickable it will change its state to "pressed" on every click. Subclasses should set the view clickable to visually react to user's clicks.
Indicates whether this view reacts to long click events or not.
Enables or disables long click events for this view. When a view is long clickable it reacts to the user holding down the button for a longer duration than a tap. This event can either launch the listener or a context menu.
Sets the pressed state for this view.
Indicates whether the view is currently in pressed state. Unless {@link #setPressed(boolean)} is explicitly called, only clickable views can enter the pressed state.
Indicates whether this view will save its state (that is, whether its {@link #onSaveInstanceState} method will be called).
Controls whether the saving of this view's state is enabled (that is, whether its {@link #onSaveInstanceState} method will be called).  Note that even if freezing is enabled, the view still must have an id assigned to it (via {@link #setId(int)}) for its state to be saved.  This flag can only disable the saving of this view; any child views may still have their state saved. (the default) to allow it.
Sets whether the framework should discard touches when the view's window is obscured by another visible window. Refer to the {@link View} security documentation for more details.
Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.  The default is true; if false, these views will not be saved unless {@link #saveHierarchyState(SparseArray)} is called directly on this view.
Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.  The default is true; if false, these views will not be saved unless {@link #saveHierarchyState(SparseArray)} is called directly on this view. (the default) to allow it.
Find the nearest view in the specified direction that can take focus. This does not actually give focus to that view.
This method is the last chance for the focused view and its ancestors to respond to an arrow key. This is called when the focused view did not consume the key internally, nor could the view system find a new view in the requested direction to give focus to.
If a user manually specified the next view id for a particular direction, use the root to look up the view. or FOCUS_BACKWARD.
Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself.
Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.  If we are in touch mode, only add views that are also focusable in touch mode.
Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. This method adds all focusable views regardless if we are in touch mode or only views focusable in touch mode if we are in touch mode depending on the focusable mode paramater.
Finds the Views that contain given text. The containment is case insensitive. The search is performed by either the text that the View renders or the content description that describes the view for accessibility purposes and the view does not render or both. Clients can specify how the search is to be performed via passing the {@link #FIND_VIEWS_WITH_TEXT} and {@link #FIND_VIEWS_WITH_CONTENT_DESCRIPTION} flags.
Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself.
Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.
Call this to try to give focus to a specific view or to one of its descendants. A view will not actually take focus if it is not focusable ({@link #isFocusable} returns false), or if it is focusable and it is not focusable in touch mode ({@link #isFocusableInTouchMode}) while the device is in touch mode. See also {@link #focusSearch(int)}, which is what you call to say that you have focus, and you want your parent to look for the next one. This is equivalent to calling {@link #requestFocus(int, Rect)} with arguments {@link #FOCUS_DOWN} and <code>null</code>.
Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading. A view will not actually take focus if it is not focusable ({@link #isFocusable} returns false), or if it is focusable and it is not focusable in touch mode ({@link #isFocusableInTouchMode}) while the device is in touch mode. See also {@link #focusSearch(int)}, which is what you call to say that you have focus, and you want your parent to look for the next one. This is equivalent to calling {@link #requestFocus(int, Rect)} with <code>null</code> set for the previously focused rectangle.
Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.  The rectangle can help give larger views a finer grained hint about where focus is coming from, and therefore, where to show selection, or forward focus change internally. A view will not actually take focus if it is not focusable ({@link #isFocusable} returns false), or if it is focusable and it is not focusable in touch mode ({@link #isFocusableInTouchMode}) while the device is in touch mode. A View will not take focus if it is not visible. A View will not take focus if one of its parents has {@link android.view.ViewGroup#getDescendantFocusability()} equal to {@link ViewGroup#FOCUS_BLOCK_DESCENDANTS}. See also {@link #focusSearch(int)}, which is what you call to say that you have focus, and you want your parent to look for the next one. You may wish to override this method if your custom {@link View} has an internal {@link View} that it wishes to forward the request to.
Gets the ViewAncestor, or null if not attached.
Call this to try to give focus to a specific view or to one of its descendants. This is a special variant of {@link #requestFocus() } that will allow views that are not focuable in touch mode to request focus when they are touched.
This is called when a container is going to temporarily detach a child, with {@link ViewGroup#detachViewFromParent(View) ViewGroup.detachViewFromParent}. It will either be followed by {@link #onFinishTemporaryDetach()} or {@link #onDetachedFromWindow()} when the container is done.
Return the global {@link KeyEvent.DispatcherState KeyEvent.DispatcherState} for this view's window.  Returns null if the view is not currently attached to the window.  Normally you will not need to use this directly, but just use the standard high-level event callbacks like {@link #onKeyDown(int, KeyEvent)}.
Dispatch a key event before it is processed by any input method associated with the view hierarchy.  This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.
Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.
Dispatches a key shortcut event.
Pass the touch screen motion event down to the target view, or this view if it is the target.
Filter the touch event to apply security policies.
Pass a trackball motion event down to the focused view.
Dispatch a generic motion event. <p> Generic motion events with source class {@link InputDevice#SOURCE_CLASS_POINTER} are delivered to the view under the pointer.  All other generic motion events are delivered to the focused view.  Hover events are handled specially and are delivered to {@link #onHoverEvent(MotionEvent)}. </p>
Dispatch a hover event. <p> Do not call this method directly. Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead. </p>
Returns true if the view has a child to which it has recently sent {@link MotionEvent#ACTION_HOVER_ENTER}.  If this view is hovered and it does not have a hovered child, then it must be the innermost hovered view.
Dispatch a generic motion event to the view under the first pointer. <p> Do not call this method directly. Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead. </p>
Dispatch a generic motion event to the currently focused view. <p> Do not call this method directly. Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead. </p>
Dispatch a pointer event. <p> Dispatches touch related pointer events to {@link #onTouchEvent(MotionEvent)} and all other events to {@link #onGenericMotionEvent(MotionEvent)}.  This separation of concerns reinforces the invariant that {@link #onTouchEvent(MotionEvent)} is really about touches and should not be expected to handle other pointing device features. </p>
Called when the window containing this view gains or loses window focus. ViewGroups should override to route to their children.
Called when the window containing this view gains or loses focus.  Note that this is separate from view focus: to receive key events, both your view and its window must have focus.  If a window is displayed on top of yours that takes input focus, then your own window will lose focus but the view focus will remain unchanged.
Returns true if this view is in a window that currently has window focus. Note that this is not the same as the view itself having focus.
Dispatch a view visibility change down the view hierarchy. ViewGroups should override to route to their children. an ancestor view. {@link #INVISIBLE} or {@link #GONE}.
Called when the visibility of the view or an ancestor of the view is changed. an ancestor view. {@link #INVISIBLE} or {@link #GONE}.
Dispatch a hint about whether this view is displayed. For instance, when a View moves out of the screen, it might receives a display hint indicating the view is not displayed. Applications should not <em>rely</em> on this hint as there is no guarantee that they will receive one. {@link #VISIBLE} or {@link #INVISIBLE}.
Dispatch a window visibility change down the view hierarchy. ViewGroups should override to route to their children.
Called when the window containing has change its visibility (between {@link #GONE}, {@link #INVISIBLE}, and {@link #VISIBLE}).  Note that this tells you whether or not your window is being made visible to the window manager; this does <em>not</em> tell you whether or not your window is obscured by other windows on the screen, even if it is itself visible.
Returns the current visibility of the window this view is attached to (either {@link #GONE}, {@link #INVISIBLE}, or {@link #VISIBLE}).
Retrieve the overall visible display size in which the window this view is attached to has been positioned in.  This takes into account screen decorations above the window, for both cases where the window itself is being position inside of them or the window is being placed under then and covered insets are used for the window to position its content inside.  In effect, this tells you the available area where content can be placed and remain visible to users. <p>This function requires an IPC back to the window manager to retrieve the requested information, so should not be used in performance critical code like drawing. is not attached to a window, this is simply the raw display size.
Dispatch a notification about a resource configuration change down the view hierarchy. ViewGroups should override to route to their children.
Private function to aggregate all per-view attributes in to the view root.
Handle a key event before it is processed by any input method associated with the view hierarchy.  This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.
Default implementation of {@link KeyEvent.Callback#onKeyDown(int, KeyEvent) KeyEvent.Callback.onKeyDown()}: perform press of the view when {@link KeyEvent#KEYCODE_DPAD_CENTER} or {@link KeyEvent#KEYCODE_ENTER} is released, if the view is enabled and clickable.
Default implementation of {@link KeyEvent.Callback#onKeyUp(int, KeyEvent) KeyEvent.Callback.onKeyUp()}: perform clicking of the view when {@link KeyEvent#KEYCODE_DPAD_CENTER} or {@link KeyEvent#KEYCODE_ENTER} is released.
Called on the focused view when a key shortcut event is not handled. Override this method to implement local key shortcuts for the View. Key shortcuts can also be implemented by setting the {@link MenuItem#setShortcut(char, char) shortcut} property of menu items.
Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it.  Subclasses should override this if they implement {@link #onCreateInputConnection(EditorInfo)} to return true if a call on that method would return a non-null InputConnection, and they are really a first-class editor that the user would normally start typing on when the go into a window containing your view. <p>The default implementation always returns false.  This does <em>not</em> mean that its {@link #onCreateInputConnection(EditorInfo)} will not be called or the user can not otherwise perform edits on your view; it is just a hint to the system that this is not the primary purpose of this view.
Create a new InputConnection for an InputMethod to interact with the view.  The default implementation returns null, since it doesn't support input methods.  You can override this to implement such support. This is only needed for views that take focus and text input. <p>When implementing this, you probably also want to implement {@link #onCheckIsTextEditor()} to indicate you will return a non-null InputConnection.
Called by the {@link android.view.inputmethod.InputMethodManager} when a view who is not the current input connection target is trying to make a call on the manager.  The default implementation returns false; you can override this to return true for certain views if you are performing InputConnection proxying to them.
Show the context menu for this view. It is not safe to hold on to the menu after returning from this method. You should normally not overload this method. Overload {@link #onCreateContextMenu(ContextMenu)} or define an {@link OnCreateContextMenuListener} to add items to the context menu.
Views should implement this if they have extra information to associate with the context menu. The return result is supplied as a parameter to the {@link OnCreateContextMenuListener#onCreateContextMenu(ContextMenu, View, ContextMenuInfo)} callback.
Implement this method to handle trackball motion events.  The <em>relative</em> movement of the trackball since the last event can be retrieve with {@link MotionEvent#getX MotionEvent.getX()} and {@link MotionEvent#getY MotionEvent.getY()}.  These are normalized so that a movement of 1 corresponds to the user pressing one DPAD key (so they will often be fractional values, representing the more fine-grained movement information available from a trackball).
Implement this method to handle generic motion events. <p> Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events.  The {@link MotionEvent#getSource() source} of the motion event specifies the class of input that was received.  Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. </p><p> Generic motion events with source class {@link InputDevice#SOURCE_CLASS_POINTER} are delivered to the view under the pointer.  All other generic motion events are delivered to the focused view. </p> <pre> public boolean onGenericMotionEvent(MotionEvent event) { }</pre>
Implement this method to handle hover events. <p> This method is called whenever a pointer is hovering into, over, or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action {@link MotionEvent#ACTION_HOVER_ENTER}, {@link MotionEvent#ACTION_HOVER_MOVE}, or {@link MotionEvent#ACTION_HOVER_EXIT}. </p> <ul> <li>The view receives a hover event with action {@link MotionEvent#ACTION_HOVER_ENTER} when the pointer enters the bounds of the view.</li> <li>The view receives a hover event with action {@link MotionEvent#ACTION_HOVER_MOVE} when the pointer has already entered the bounds of the view and has moved.</li> <li>The view receives a hover event with action {@link MotionEvent#ACTION_HOVER_EXIT} when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click, tap, or similar user action that causes the view to be touched.</li> </ul> <p> The view should implement this method to return true to indicate that it is handling the hover event, such as by changing its drawable state. </p><p> The default implementation calls {@link #setHovered} to update the hovered state of the view when a hover enter or hover exit event is received, if the view is enabled and is clickable.  The default implementation also sends hover accessibility events. </p>
Returns true if the view should handle {@link #onHoverEvent} by calling {@link #setHovered} to change its hovered state.
Sets whether the view is currently hovered. <p> Calling this method also changes the drawable state of the view.  This enables the view to react to hover by using different drawable resources to change its appearance. </p><p> The {@link #onHoverChanged} method is called when the hovered state changes. </p>
Implement this method to handle touch screen motion events.
Remove the longpress detection timer.
Remove the pending click action
Remove the prepress detection timer.
Remove the tap detection timer.
Cancels a pending long press.  Your subclass can use this if you want the context menu to come up if the user presses and holds at the same place, but you don't want it to come up if they press and then move around enough to cause scrolling.
Remove the pending callback for sending a {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} accessibility event.
Sets the TouchDelegate for this View.
Gets the TouchDelegate for this View.
Set flags controlling behavior of this view.
Change the view's z order in the tree, so it's on top of other sibling views
This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). This is typically as a result of {@link #scrollBy(int, int)} or {@link #scrollTo(int, int)} having been called.
Gets the parent of this view. Note that the parent is a ViewParent and not necessarily a View.
Set the horizontal scrolled position of your view. This will cause a call to {@link #onScrollChanged(int, int, int, int)} and the view will be invalidated.
Set the vertical scrolled position of your view. This will cause a call to {@link #onScrollChanged(int, int, int, int)} and the view will be invalidated.
Return the scrolled left position of this view. This is the left edge of the displayed part of your view. You do not need to draw any pixels farther left, since those are outside of the frame of your view on screen.
Return the scrolled top position of this view. This is the top edge of the displayed part of your view. You do not need to draw any pixels above it, since those are outside of the frame of your view on screen.
Return the visible drawing bounds of your view. Fills in the output rectangle with the values from getScrollX(), getScrollY(), getWidth(), and getHeight().
Like {@link #getMeasuredWidthAndState()}, but only returns the raw width component (that is the result is masked by {@link #MEASURED_SIZE_MASK}).
Return the full width measurement information for this view as computed by the most recent call to {@link #measure(int, int)}.  This result is a bit mask as defined by {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}. This should be used during measurement and layout calculations only. Use {@link #getWidth()} to see how wide a view is after layout.
Like {@link #getMeasuredHeightAndState()}, but only returns the raw width component (that is the result is masked by {@link #MEASURED_SIZE_MASK}).
Return the full height measurement information for this view as computed by the most recent call to {@link #measure(int, int)}.  This result is a bit mask as defined by {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}. This should be used during measurement and layout calculations only. Use {@link #getHeight()} to see how wide a view is after layout.
Return only the state bits of {@link #getMeasuredWidthAndState()} and {@link #getMeasuredHeightAndState()}, combined into one integer. The width component is in the regular bits {@link #MEASURED_STATE_MASK} and the height component is at the shifted bits {@link #MEASURED_HEIGHT_STATE_SHIFT}>>{@link #MEASURED_STATE_MASK}.
The transform matrix of this view, which is calculated based on the current roation, scale, and pivot properties.
Utility function to determine if the value is far enough away from zero to be considered non-zero.
Returns true if the transform matrix is the identity matrix. Recomputes the matrix if necessary.
Recomputes the transform matrix if necessary.
Utility method to retrieve the inverse of the current mMatrix property. We cache the matrix to avoid recalculating it when transform properties have not changed.
<p>Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view. The camera's distance affects 3D transformations, for instance rotations around the X and Y axis. If the rotationX or rotationY properties are changed and this view is large (more than half the size of the screen), it is recommended to always use a camera distance that's greater than the height (X axis rotation) or the width (Y axis rotation) of this view.</p> <p>The distance of the camera from the view plane can have an affect on the perspective distortion of the view when it is rotated around the x or y axis. For example, a large distance will result in a large viewing angle, and there will not be much perspective distortion of the view as it rotates. A short distance may cause much more perspective distortion upon rotation, and can also result in some drawing artifacts if the rotated view ends up partially behind the camera (which is why the recommendation is to use a distance at least as far as the size of the view, if the view is to be rotated.)</p> <p>The distance is expressed in "depth pixels." The default distance depends on the screen density. For instance, on a medium density display, the default distance is 1280. On a high density display, the default distance is 1920.</p> <p>If you want to specify a distance that leads to visually consistent results across various densities, use the following formula:</p> <pre> float scale = context.getResources().getDisplayMetrics().density; view.setCameraDistance(distance * scale); </pre> <p>The density scale factor of a high density display is 1.5, and 1920 = 1280 * 1.5.</p>
The degrees that the view is rotated around the pivot point.
Sets the degrees that the view is rotated around the pivot point. Increasing values result in clockwise rotation.
The degrees that the view is rotated around the vertical axis through the pivot point.
Sets the degrees that the view is rotated around the vertical axis through the pivot point. Increasing values result in counter-clockwise rotation from the viewpoint of looking down the y axis. When rotating large views, it is recommended to adjust the camera distance accordingly. Refer to {@link #setCameraDistance(float)} for more information.
The degrees that the view is rotated around the horizontal axis through the pivot point.
Sets the degrees that the view is rotated around the horizontal axis through the pivot point. Increasing values result in clockwise rotation from the viewpoint of looking down the x axis. When rotating large views, it is recommended to adjust the camera distance accordingly. Refer to {@link #setCameraDistance(float)} for more information.
The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. A value of 1, the default, means that no scaling is applied. <p>By default, this is 1.0f.
Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. A value of 1 means that no scaling is applied.
The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height. A value of 1, the default, means that no scaling is applied. <p>By default, this is 1.0f.
Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width. A value of 1 means that no scaling is applied.
The x location of the point around which the view is {@link #setRotation(float) rotated} and {@link #setScaleX(float) scaled}.
Sets the x location of the point around which the view is {@link #setRotation(float) rotated} and {@link #setScaleX(float) scaled}. By default, the pivot point is centered on the object. Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values.
The y location of the point around which the view is {@link #setRotation(float) rotated} and {@link #setScaleY(float) scaled}.
Sets the y location of the point around which the view is {@link #setRotation(float) rotated} and {@link #setScaleY(float) scaled}. By default, the pivot point is centered on the object. Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values.
The opacity of the view. This is a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque. <p>By default this is 1.0f.
<p>Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque.</p> <p>If this view overrides {@link #onSetAlpha(int)} to return true, then this view is responsible for applying the opacity itself. Otherwise, calling this method is equivalent to calling {@link #setLayerType(int, android.graphics.Paint)} and setting a hardware layer.</p>
Faster version of setAlpha() which performs the same steps except there are no calls to invalidate(). The caller of this function should perform proper invalidation on the parent and this object. The return value indicates whether the subclass handles alpha (the return value for onSetAlpha()).
Sets the top position of this view relative to its parent. This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout.
True if this view has changed since the last time being drawn.
Sets the bottom position of this view relative to its parent. This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout.
Sets the left position of this view relative to its parent. This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout.
Sets the right position of this view relative to its parent. This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout.
The visual x position of this view, in pixels. This is equivalent to the {@link #setTranslationX(float) translationX} property plus the current {@link #getLeft() left} property.
Sets the visual x position of this view, in pixels. This is equivalent to setting the {@link #setTranslationX(float) translationX} property to be the difference between the x value passed in and the current {@link #getLeft() left} property.
The visual y position of this view, in pixels. This is equivalent to the {@link #setTranslationY(float) translationY} property plus the current {@link #getTop() top} property.
Sets the visual y position of this view, in pixels. This is equivalent to setting the {@link #setTranslationY(float) translationY} property to be the difference between the y value passed in and the current {@link #getTop() top} property.
The horizontal location of this view relative to its {@link #getLeft() left} position. This position is post-layout, in addition to wherever the object's layout placed it.
Sets the horizontal location of this view relative to its {@link #getLeft() left} position. This effectively positions the object post-layout, in addition to wherever the object's layout placed it. in pixels.
The horizontal location of this view relative to its {@link #getTop() top} position. This position is post-layout, in addition to wherever the object's layout placed it. in pixels.
Sets the vertical location of this view relative to its {@link #getTop() top} position. This effectively positions the object post-layout, in addition to wherever the object's layout placed it. in pixels.
Hit rectangle in parent's coordinates
Determines whether the given point, in local coordinates is inside the view.
When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. By default, the rectange is the {@link #getDrawingRect(android.graphics.Rect)}) of the view.  However, if your view maintains some idea of internal selection, such as a cursor, or a selected row or column, you should override this method and fill in a more specific rectangle.
If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates. To convert r to local coordinates, offset it by -globalOffset (e.g. r.offset(-globalOffset.x, -globalOffset.y)) If the view is completely clipped or translated out, return false.
Set the layout parameters associated with this view. These supply parameters to the <i>parent</i> of this view specifying how it should be arranged. There are many subclasses of ViewGroup.LayoutParams, and these correspond to the different subclasses of ViewGroup that are responsible for arranging their children.
Set the scrolled position of your view. This will cause a call to {@link #onScrollChanged(int, int, int, int)} and the view will be invalidated.
Move the scrolled position of your view. This will cause a call to {@link #onScrollChanged(int, int, int, int)} and the view will be invalidated.
<p>Trigger the scrollbars to draw. When invoked this method starts an animation to fade the scrollbars out after a default delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation.</p> <p>The animation starts only if at least one of the scrollbars is enabled, as specified by {@link #isHorizontalScrollBarEnabled()} and {@link #isVerticalScrollBarEnabled()}. When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls {@link #invalidate()}; in that case the caller should not call {@link #invalidate()}.</p> <p>This method should be invoked every time a subclass directly updates the scroll parameters.</p> <p>This method is automatically invoked by {@link #scrollBy(int, int)} and {@link #scrollTo(int, int)}.</p>
Trigger the scrollbars to draw. This method differs from awakenScrollBars() only in its default duration. initialAwakenScrollBars() will show the scroll bars for longer than usual to give the user more of a chance to notice them.
<p> Trigger the scrollbars to draw. When invoked this method starts an animation to fade the scrollbars out after a fixed delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation. </p> <p> The animation starts only if at least one of the scrollbars is enabled, as specified by {@link #isHorizontalScrollBarEnabled()} and {@link #isVerticalScrollBarEnabled()}. When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls {@link #invalidate()}; in that case the caller should not call {@link #invalidate()}. </p> <p> This method should be invoked everytime a subclass directly updates the scroll parameters. </p>
<p> Trigger the scrollbars to draw. When invoked this method starts an animation to fade the scrollbars out after a fixed delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation. </p> <p> The animation starts only if at least one of the scrollbars is enabled, as specified by {@link #isHorizontalScrollBarEnabled()} and {@link #isVerticalScrollBarEnabled()}. When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls {@link #invalidate()} if the invalidate parameter is set to true; in that case the caller should not call {@link #invalidate()}. </p> <p> This method should be invoked everytime a subclass directly updates the scroll parameters. </p>
Do not invalidate views which are not visible and which are not running an animation. They will not get drawn and they should not set dirty flags as if they will be drawn
Mark the area defined by dirty as needing to be drawn. If the view is visible, {@link #onDraw(android.graphics.Canvas)} will be called at some point in the future. This must be called from a UI thread. To call from a non-UI thread, call {@link #postInvalidate()}. WARNING: This method is destructive to dirty.
Mark the area defined by the rect (l,t,r,b) as needing to be drawn. The coordinates of the dirty rect are relative to the view. If the view is visible, {@link #onDraw(android.graphics.Canvas)} will be called at some point in the future. This must be called from a UI thread. To call from a non-UI thread, call {@link #postInvalidate()}.
Invalidate the whole view. If the view is visible, {@link #onDraw(android.graphics.Canvas)} will be called at some point in the future. This must be called from a UI thread. To call from a non-UI thread, call {@link #postInvalidate()}.
This is where the invalidate() work actually happens. A full invalidate() causes the drawing cache to be invalidated, but this function can be called with invalidateCache set to false to skip that invalidation step for cases that do not need it (for example, a component that remains at the same dimensions with the same content). well. This is usually true for a full invalidate, but may be set to false if the View's contents or dimensions have not changed.
Used to indicate that the parent of this view should clear its caches. This functionality is used to force the parent to rebuild its display list (when hardware-accelerated), which is necessary when various parent-managed properties of the view change, such as alpha, translationX/Y, scrollX/Y, scaleX/Y, and rotation/X/Y. This method only clears the parent caches and does not causes an invalidate event.
Used to indicate that the parent of this view should be invalidated. This functionality is used to force the parent to rebuild its display list (when hardware-accelerated), which is necessary when various parent-managed properties of the view change, such as alpha, translationX/Y, scrollX/Y, scaleX/Y, and rotation/X/Y. This method will propagate an invalidation event to the parent.
handler can be used to pump events in the UI events queue.
<p>Causes the Runnable to be added to the message queue. The runnable will be run on the user interface thread.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
<p>Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses. The runnable will be run on the user interface thread.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
<p>Removes the specified Runnable from the message queue.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
<p>Cause an invalidate to happen on a subsequent cycle through the event loop. Use this to invalidate the View from a non-UI thread.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
<p>Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. Use this to invalidate the View from a non-UI thread.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
<p>Cause an invalidate to happen on a subsequent cycle through the event loop. Waits for the specified amount of time.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
<p>Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. Waits for the specified amount of time.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
Post a callback to send a {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event. This event is sent at most once every {@link ViewConfiguration#getSendRecurringAccessibilityEventsInterval()}.
<p>Indicate whether the horizontal edges are faded when the view is scrolled horizontally.</p>
<p>Define whether the horizontal edges should be faded when this view is scrolled horizontally.</p>
<p>Indicate whether the vertical edges are faded when the view is scrolled horizontally.</p>
<p>Define whether the vertical edges should be faded when this view is scrolled vertically.</p>
Returns the strength, or intensity, of the top faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.
Returns the strength, or intensity, of the bottom faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.
Returns the strength, or intensity, of the left faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.
Returns the strength, or intensity, of the right faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.
<p>Indicate whether the horizontal scrollbar should be drawn or not. The scrollbar is not drawn by default.</p>
<p>Define whether the horizontal scrollbar should be drawn or not. The scrollbar is not drawn by default.</p>
<p>Indicate whether the vertical scrollbar should be drawn or not. The scrollbar is not drawn by default.</p>
<p>Define whether the vertical scrollbar should be drawn or not. The scrollbar is not drawn by default.</p>
Define whether scrollbars will fade when the view is not scrolling.
Returns true if scrollbars will fade when this view is not scrolling
<p>Specify the style of the scrollbars. The scrollbars can be overlaid or inset. When inset, they add to the padding of the view. And the scrollbars can be drawn inside the padding area or on the edge of the view. For example, if a view has a background drawable and you want to draw the scrollbars inside the padding specified by the drawable, you can use SCROLLBARS_INSIDE_OVERLAY or SCROLLBARS_INSIDE_INSET. If you want them to appear at the edge of the view, ignoring the padding, then you can use SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.</p> SCROLLBARS_INSIDE_OVERLAY, SCROLLBARS_INSIDE_INSET, SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.
<p>Compute the horizontal range that the horizontal scrollbar represents.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by {@link #computeHorizontalScrollExtent()} and {@link #computeHorizontalScrollOffset()}.</p> <p>The default range is the drawing width of this view.</p>
<p>Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. This value is used to compute the position of the thumb within the scrollbar's track.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by {@link #computeHorizontalScrollRange()} and {@link #computeHorizontalScrollExtent()}.</p> <p>The default offset is the scroll offset of this view.</p>
<p>Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. This value is used to compute the length of the thumb within the scrollbar's track.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by {@link #computeHorizontalScrollRange()} and {@link #computeHorizontalScrollOffset()}.</p> <p>The default extent is the drawing width of this view.</p>
<p>Compute the vertical range that the vertical scrollbar represents.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by {@link #computeVerticalScrollExtent()} and {@link #computeVerticalScrollOffset()}.</p> <p>The default range is the drawing height of this view.</p>
<p>Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. This value is used to compute the position of the thumb within the scrollbar's track.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by {@link #computeVerticalScrollRange()} and {@link #computeVerticalScrollExtent()}.</p> <p>The default offset is the scroll offset of this view.</p>
<p>Compute the vertical extent of the horizontal scrollbar's thumb within the vertical range. This value is used to compute the length of the thumb within the scrollbar's track.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by {@link #computeVerticalScrollRange()} and {@link #computeVerticalScrollOffset()}.</p> <p>The default extent is the drawing height of this view.</p>
<p>Request the drawing of the horizontal and the vertical scrollbar. The scrollbars are painted only if they have been awakened first.</p>
Override this if the vertical scrollbar needs to be hidden in a subclass, like when FastScroller is visible.
<p>Draw the horizontal scrollbar if {@link #isHorizontalScrollBarEnabled()} returns true.</p>
<p>Draw the vertical scrollbar if {@link #isVerticalScrollBarEnabled()} returns true.</p>
Caller is responsible for calling requestLayout if necessary. (This allows addViewInLayout to not request a new layout.)
This is called when the view is attached to a window.  At this point it has a Surface and will start drawing.  Note that this function is guaranteed to be called before {@link #onDraw(android.graphics.Canvas)}, however it may be called any time before the first onDraw -- including before or after {@link #onMeasure(int, int)}.
Resolve and cache the layout direction. LTR is set initially. This is implicitly supposing that the parent directionality can and will be resolved before its children.
Return true if layout direction resolution can be done
Reset the resolved layout direction. Subclasses need to override this method to clear cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. Overrides must also call the superclass implementation at the start of their implementation.
Check if a Locale is corresponding to a RTL script.
This is called when the view is detached from a window.  At this point it no longer has a surface for drawing.
Retrieve a unique token identifying the window this view is attached to. {@link WindowManager.LayoutParams#token WindowManager.LayoutParams.token}.
Retrieve a unique token identifying the top-level "real" window of the window that this view is attached to.  That is, this is like {@link #getWindowToken}, except if the window this view in is a panel window (attached to another containing window), then the token of the containing window is returned instead. {@link #getWindowToken()} or the containing window's token.
Retrieve private session object this view hierarchy is using to communicate with the window manager.
Store this view hierarchy's frozen state into the given container.
Called by {@link #saveHierarchyState(android.util.SparseArray)} to store the state for this view and its children. May be overridden to modify how freezing happens to a view's children; for example, some views may want to not store state for their children.
Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. <p> Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view.
Restore this view hierarchy's frozen state from the given container.
Called by {@link #restoreHierarchyState(android.util.SparseArray)} to retrieve the state for this view and its children. May be overridden to modify how restoring happens to a view's children; for example, some views may want to not store state for their children.
Hook allowing a view to re-apply a representation of its internal state that had previously been generated by {@link #onSaveInstanceState}. This function will never be called with a null state.
<p>Return the time at which the drawing of the view hierarchy started.</p>
<p>Enables or disables the duplication of the parent's state into this view. When duplication is enabled, this view gets its drawable state from its parent rather than from its own internal properties.</p> <p>Note: in the current implementation, setting this property to true after the view was added to a ViewGroup might have no effect at all. This property should always be used from XML or set to true before adding this view to a ViewGroup.</p> <p>Note: if this view's parent addStateFromChildren property is enabled and this property is enabled, an exception will be thrown.</p> <p>Note: if the child view uses and updates additionnal states which are unknown to the parent, these states should not be affected by this method.</p>
<p>Indicates whether this duplicates its drawable state from its parent.</p>
<p>Specifies the type of layer backing this view. The layer can be {@link #LAYER_TYPE_NONE disabled}, {@link #LAYER_TYPE_SOFTWARE software} or {@link #LAYER_TYPE_HARDWARE hardware}.</p> <p>A layer is associated with an optional {@link android.graphics.Paint} instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li>{@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li> <li>{@link android.graphics.Paint#getXfermode() Blending mode}</li> <li>{@link android.graphics.Paint#getColorFilter() Color filter}</li> </ul> <p>If this view has an alpha value set to < 1.0 by calling {@link #setAlpha(float)}, the alpha value of the layer's paint is replaced by this view's alpha value. Calling {@link #setAlpha(float)} is therefore equivalent to setting a hardware layer on this view and providing a paint with the desired alpha value.<p> <p>Refer to the documentation of {@link #LAYER_TYPE_NONE disabled}, {@link #LAYER_TYPE_SOFTWARE software} and {@link #LAYER_TYPE_HARDWARE hardware} for more information on when and how to use layers.</p>
Indicates whether this view has a static layer. A view with layer type {@link #LAYER_TYPE_NONE} is a static layer. Other types of layers are dynamic.
Indicates what type of layer is currently associated with this view. By default a view does not have a layer, and the layer type is {@link #LAYER_TYPE_NONE}. Refer to the documentation of {@link #setLayerType(int, android.graphics.Paint)} for more information on the different types of layers.
Forces this view's layer to be created and this view to be rendered into its layer. If this view's layer type is set to {@link #LAYER_TYPE_NONE}, invoking this method will have no effect. This method can for instance be used to render a view into its layer before starting an animation. If this view is complex, rendering into the layer before starting the animation will avoid skipping frames.
<p>Returns a hardware layer that can be used to draw this view again without executing its draw method.</p>
Destroys this View's hardware layer if possible.
<p>Enables or disables the drawing cache. When the drawing cache is enabled, the next call to {@link #getDrawingCache()} or {@link #buildDrawingCache()} will draw the view in a bitmap. Calling {@link #draw(android.graphics.Canvas)} will not draw from the cache when the cache is enabled. To benefit from the cache, you must request the drawing cache by calling {@link #getDrawingCache()} and draw it on screen if the returned bitmap is not null.</p> <p>Enabling the drawing cache is similar to {@link #setLayerType(int, android.graphics.Paint) setting a layer} when hardware acceleration is turned off. When hardware acceleration is turned on, enabling the drawing cache has no effect on rendering because the system uses a different mechanism for acceleration which ignores the flag. If you want to use a Bitmap for the view, even when hardware acceleration is enabled, see {@link #setLayerType(int, android.graphics.Paint)} for information on how to enable software and hardware layers.</p> <p>This API can be used to manually generate a bitmap copy of this view, by setting the flag to <code>true</code> and calling {@link #getDrawingCache()}.</p>
A view that is not attached or hardware accelerated cannot create a display list. This method checks these conditions and returns the appropriate result.
<p>Returns a display list that can be used to draw this view again without executing its draw method.</p>
<p>Calling this method is equivalent to calling <code>getDrawingCache(false)</code>.</p>
<p>Returns the bitmap in which this view drawing is cached. The returned bitmap is null when caching is disabled. If caching is enabled and the cache is not ready, this method will create it. Calling {@link #draw(android.graphics.Canvas)} will not draw from the cache when the cache is enabled. To benefit from the cache, you must request the drawing cache by calling this method and draw it on screen if the returned bitmap is not null.</p> <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled, this method will create a bitmap of the same size as this view. Because this bitmap will be drawn scaled by the parent ViewGroup, the result on screen might show scaling artifacts. To avoid such artifacts, you should call this method by setting the auto scaling to true. Doing so, however, will generate a bitmap of a different size than the view. This implies that your application must be able to handle this size.</p>
<p>Frees the resources used by the drawing cache. If you call {@link #buildDrawingCache()} manually without calling {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache with this method afterwards.</p>
Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage. Note, though that this should only be used if this view will always be drawn on top of a solid color.
<p>Calling this method is equivalent to calling <code>buildDrawingCache(false)</code>.</p>
<p>Forces the drawing cache to be built if the drawing cache is invalid.</p> <p>If you call {@link #buildDrawingCache()} manually without calling {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache by calling {@link #destroyDrawingCache()} afterwards.</p> <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled, this method will create a bitmap of the same size as this view. Because this bitmap will be drawn scaled by the parent ViewGroup, the result on screen might show scaling artifacts. To avoid such artifacts, you should call this method by setting the auto scaling to true. Doing so, however, will generate a bitmap of a different size than the view. This implies that your application must be able to handle this size.</p> <p>You should avoid calling this method when hardware acceleration is enabled. If you do not need the drawing cache bitmap, calling this method will increase memory usage and cause the view to be rendered in software once, thus negatively impacting performance.</p>
Create a snapshot of the view into a bitmap.  We should probably make some form of this public, but should think about the API.
Indicates whether this View is currently in edit mode. A View is usually in edit mode when displayed within a developer tool. For instance, if this View is being drawn by a visual user interface builder, this method should return true. Subclasses should check the return value of this method to provide different behaviors if their normal behavior might interfere with the host environment. For instance: the class spawns a thread in its constructor, the drawing code relies on device-specific features, etc. This method is usually checked in the drawing code of custom widgets.
If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. Padding offsets are added to the fading edges to extend the length of the fade so that it covers pixels drawn inside the padding. Subclasses of this class should override this method if they need to draw content inside the padding.
Amount by which to extend the left fading region. Called only when {@link #isPaddingOffsetRequired()} returns true.
Amount by which to extend the right fading region. Called only when {@link #isPaddingOffsetRequired()} returns true.
Amount by which to extend the top fading region. Called only when {@link #isPaddingOffsetRequired()} returns true.
Amount by which to extend the bottom fading region. Called only when {@link #isPaddingOffsetRequired()} returns true.
<p>Indicates whether this view is attached to an hardware accelerated window or not.</p> <p>Even if this method returns true, it does not mean that every call to {@link #draw(android.graphics.Canvas)} will be made with an hardware accelerated {@link android.graphics.Canvas}. For instance, if this view is drawn onto an offscren {@link android.graphics.Bitmap} and its window is hardware accelerated, {@link android.graphics.Canvas#isHardwareAccelerated()} will likely return false, and this method will return true.</p>
Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called.  When implementing a view, implement {@link #onDraw(android.graphics.Canvas)} instead of overriding this method. If you do need to override this method, call the superclass version.
Build a human readable string representation of the specified view flags.
Build a human readable string representation of the specified private view flags.
<p>Indicates whether or not this view's layout will be requested during the next hierarchy layout pass.</p>
Assign a size and position to this view. This is called from layout. {@hide}
Returns the resources associated with this view.
Invalidates the specified Drawable.
Schedules an action on a drawable to occur at a specified time.
Cancels a scheduled action on a drawable.
Unschedule any events associated with the given Drawable.  This can be used when selecting a new Drawable into a view, so that the previous one is completely unscheduled.
Return the layout direction of a given Drawable.
If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.  This allows animations for those drawables to be scheduled. <p>Be sure to call through to the super class when overriding this function.
This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. <p>Be sure to call through to the superclass when overriding this function.
Call this to force a view to update its drawable state. This will cause drawableStateChanged to be called on this view. Views that are interested in the new state should call getDrawableState.
Return an array of resource IDs of the drawable states representing the current state of the view.
Generate the new {@link android.graphics.drawable.Drawable} state for this view. This is called by the view system when the cached Drawable state is determined to be invalid.  To retrieve the current state, you should use {@link #getDrawableState}. would like in the returned array in which you can place your own states. the view.
Merge your own state values in <var>additionalState</var> into the base state values <var>baseState</var> that were returned by {@link #onCreateDrawableState(int)}. {@link #onCreateDrawableState(int)}, which will be modified to also hold your own additional state values. added to <var>baseState</var>; this array is not modified. passed into the function is returned.
Call {@link Drawable#jumpToCurrentState() Drawable.jumpToCurrentState()} on all Drawable objects associated with this view.
Set the background to a given Drawable, or remove the background. If the background has padding, this View's padding is set to the background's padding. However, when a background is removed, this View's padding isn't touched. If setting the padding is desired, please use {@link #setPadding(int, int, int, int)}.
Gets the background drawable
Sets the padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from {@link #getPaddingLeft}, {@link #getPaddingTop}, {@link #getPaddingRight} and {@link #getPaddingBottom} may be different from the values set in this call.
Sets the relative padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from {@link #getPaddingStart}, {@link #getPaddingTop}, {@link #getPaddingEnd} and {@link #getPaddingBottom} may be different from the values set in this call.
Returns the top padding of this view.
Returns the bottom padding of this view. If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
Returns the left padding of this view. If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
Returns the start padding of this view. If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
Returns the right padding of this view. If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
Returns the end padding of this view. If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
Return if the padding as been set thru relative values {@link #setPaddingRelative(int, int, int, int)} or thru
Changes the selection state of this view. A view can be selected or not. Note that selection is not the same as focus. Views are typically selected in the context of an AdapterView like ListView or GridView; the selected view is the view that is highlighted.
Changes the activated state of this view. A view can be activated or not. Note that activation is not the same as selection.  Selection is a transient property, representing the view (hierarchy) the user is currently interacting with.  Activation is a longer-term state that the user can move views in and out of.  For example, in a list view with single or multiple selection enabled, the views in the current selection set are activated.  (Um, yeah, we are deeply sorry about the terminology here.)  The activated state is propagated down to children of the view it is set on.
Returns the ViewTreeObserver for this view's hierarchy. The view tree observer can be used to get notifications when global events, like layout, happen. The returned ViewTreeObserver observer is not guaranteed to remain valid for the lifetime of this View. If the caller of this method keeps a long-lived reference to ViewTreeObserver, it should always check for the return value of {@link ViewTreeObserver#isAlive()}.
<p>Finds the topmost view in the current view hierarchy.</p>
<p>Computes the coordinates of this view on the screen. The argument must be an array of two integers. After the method returns, the array contains the x and y location in that order.</p>
<p>Computes the coordinates of this view in its window. The argument must be an array of two integers. After the method returns, the array contains the x and y location in that order.</p>
Look for a child view with the given id.  If this view has the given id, return this view.
Finds a view by its unuque and stable accessibility id.
Performs the traversal to find a view by its unuque and stable accessibility id. <strong>Note:</strong>This method does not stop at the root namespace boundary since the user can touch the screen at an arbitrary location potentially crossing the root namespace bounday which will send an accessibility event to accessibility services and they should be able to obtain the event source. Also accessibility ids are guaranteed to be unique in the window.
Look for a child view with the given tag.  If this view has the given tag, return this view.
{@hide} Look for a child view that matches the specified predicate. If this view matches the predicate, return this view.
{@hide} Look for a child view that matches the specified predicate, starting with the specified view and its descendents and then recusively searching the ancestors and siblings of that view until this view is reached. This method is useful in cases where the predicate does not match a single unique view (perhaps multiple views use the same id) and we are trying to find the view that is "closest" in scope to the starting view.
Sets the identifier for this view. The identifier does not have to be unique in this view's hierarchy. The identifier should be a positive number.
Sets the tag associated with this view. A tag can be used to mark a view in its hierarchy and does not have to be unique within the hierarchy. Tags can also be used to store data within a view without resorting to another data structure.
Returns the tag associated with this view and the specified key.
Sets a tag associated with this view and a key. A tag can be used to mark a view in its hierarchy and does not have to be unique within the hierarchy. Tags can also be used to store data within a view without resorting to another data structure. The specified key should be an id declared in the resources of the application to ensure it is unique (see the <a href={@docRoot}guide/topics/resources/more-resources.html#Id">ID resource type</a>). Keys identified as belonging to the Android framework or not associated with any package will cause an {@link IllegalArgumentException} to be thrown.
Variation of {@link #setTag(int, Object)} that enforces the key to be a framework id.
Method that subclasses should implement to check their consistency. The type of consistency check is indicated by the bit field passed as a parameter.
Prints information about this view in the log output, with the tag {@link #VIEW_LOG_TAG}.
Prints information about this view in the log output, with the tag {@link #VIEW_LOG_TAG}. Each line in the output is preceded with an indentation defined by the <code>depth</code>.
Creates an string of whitespaces used for indentation.
Call this when something has changed which has invalidated the layout of this view. This will schedule a layout pass of the view tree.
Forces this view to be laid out during the next layout pass. This method does not call requestLayout() or forceLayout() on the parent.
<p> This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters. </p> <p> The actual mesurement work of a view is performed in {@link #onMeasure(int, int)}, called by this method. Therefore, only {@link #onMeasure(int, int)} can and must be overriden by subclasses. </p>
<p> Measure the view and its content to determine the measured width and the measured height. This method is invoked by {@link #measure(int, int)} and should be overriden by subclasses to provide accurate and efficient measurement of their contents. </p> <p> <strong>CONTRACT:</strong> When overriding this method, you <em>must</em> call {@link #setMeasuredDimension(int, int)} to store the measured width and height of this view. Failure to do so will trigger an <code>IllegalStateException</code>, thrown by {@link #measure(int, int)}. Calling the superclass' {@link #onMeasure(int, int)} is a valid use. </p> <p> The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override {@link #onMeasure(int, int)} to provide better measurements of their content. </p> <p> If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width ({@link #getSuggestedMinimumHeight()} and {@link #getSuggestedMinimumWidth()}). </p>
<p>This mehod must be called by {@link #onMeasure(int, int)} to store the measured width and measured height. Failing to do so will trigger an exception at measurement time.</p> bit mask as defined by {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}. bit mask as defined by {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}.
Merge two states as returned by {@link #getMeasuredState()}. of combining multiple views. states.
Version of {@link #resolveSizeAndState(int, int, int)} returning only the {@link #MEASURED_SIZE_MASK} bits of the result.
Utility to return a default size. Uses the supplied size if the MeasureSpec imposed no constraints. Will get larger if allowed by the MeasureSpec.
Returns the suggested minimum height that the view should use. This returns the maximum of the view's minimum height and the background's minimum height ({@link android.graphics.drawable.Drawable#getMinimumHeight()}). <p> When being used in {@link #onMeasure(int, int)}, the caller should still ensure the returned height is within the requirements of the parent.
Returns the suggested minimum width that the view should use. This returns the maximum of the view's minimum width) and the background's minimum width ({@link android.graphics.drawable.Drawable#getMinimumWidth()}). <p> When being used in {@link #onMeasure(int, int)}, the caller should still ensure the returned width is within the requirements of the parent.
Sets the minimum height of the view. It is not guaranteed the view will be able to achieve this minimum height (for example, if its parent layout constrains it with less available height).
Sets the minimum width of the view. It is not guaranteed the view will be able to achieve this minimum width (for example, if its parent layout constrains it with less available width).
Get the animation currently associated with this view.
Start the specified animation now.
Cancels any animations for this view.
Sets the next animation to play for this view. If you want the animation to play immediately, use startAnimation. This method provides allows fine-grained control over the start time and invalidation, but you must make sure that 1) the animation has a start time set, and 2) the view will be invalidated when the animation is supposed to start.
Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view. If you override this method, always call super.onAnimationStart();
Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view. If you override this method, always call super.onAnimationEnd();
Invoked if there is a Transform that involves alpha. Subclass that can draw themselves with the specified alpha should return true, and then respect that alpha when their onDraw() is called. If this returns false then the view may be redirected to draw into an offscreen buffer to fulfill the request, which will look fine, but may be slower than if the subclass handles it internally. The default implementation returns false.
This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView. SurfaceView is always considered transparent, but its children are not, therefore all View objects remove themselves from the global transparent region (passed as a parameter to this function). point is opaque, regardless of the transparent region; returns false if it is possible for underlying windows to be seen behind the view. {@hide}
Play a sound effect for this view. <p>The framework will play sound effects for some built in actions, such as clicking, but you may wish to play these effects in your widget, for instance, for internal navigation. <p>The sound effect will only be played if sound effects are enabled by the user, and {@link #isSoundEffectsEnabled()} is true.
BZZZTT!!1! <p>Provide haptic feedback to the user for this view. <p>The framework will provide haptic feedback for some built in actions, such as long presses, but you may wish to provide feedback for your own widget. <p>The feedback will only be performed if {@link #isHapticFeedbackEnabled()} is true. {@link HapticFeedbackConstants}
BZZZTT!!1! <p>Like {@link #performHapticFeedback(int)}, with additional options. {@link HapticFeedbackConstants}
Request that the visibility of the status bar be changed. {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}.
Returns the status bar visibility that this view has requested. {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}.
Set a listener to receive callbacks when the visibility of the system bar changes.
Dispatch callbacks to {@link #setOnSystemUiVisibilityChangeListener} down the view hierarchy.
Constructs a shadow image builder based on a View. By default, the resulting drag shadow will have the same appearance and dimensions as the View, with the touch point over the center of the View.
Construct a shadow builder object with no associated View.  This constructor variant is only useful when the {@link #onProvideShadowMetrics(Point, Point)} and {@link #onDrawShadow(Canvas)} methods are also overridden in order to supply the drag shadow's dimensions and appearance without reference to any View object. If they are not overridden, then the result is an invisible drag shadow.
Provides the metrics for the shadow image. These include the dimensions of the shadow image, and the point within that shadow that should be centered under the touch location while dragging. <p> The default implementation sets the dimensions of the shadow to be the same as the dimensions of the View itself and centers the shadow under the touch point. </p> of the shadow image. Your application must set {@link android.graphics.Point#x} to the desired width and must set {@link android.graphics.Point#y} to the desired height of the image. shadow image that should be underneath the touch point during the drag and drop operation. Your application must set {@link android.graphics.Point#x} to the X coordinate and {@link android.graphics.Point#y} to the Y coordinate of this position.
Draws the shadow image. The system creates the {@link android.graphics.Canvas} object based on the dimensions it received from the {@link #onProvideShadowMetrics(Point, Point)} callback.
Starts a drag and drop operation. When your application calls this method, it passes a {@link android.view.View.DragShadowBuilder} object to the system. The system calls this object's {@link DragShadowBuilder#onProvideShadowMetrics(Point, Point)} to get metrics for the drag shadow, and then calls the object's {@link DragShadowBuilder#onDrawShadow(Canvas)} to draw the drag shadow itself. <p> Once the system has the drag shadow, it begins the drag and drop operation by sending drag events to all the View objects in your application that are currently visible. It does this either by calling the View object's drag listener (an implementation of {@link android.view.View.OnDragListener#onDrag(View,DragEvent) onDrag()} or by calling the View object's {@link android.view.View#onDragEvent(DragEvent) onDragEvent()} method. Both are passed a {@link android.view.DragEvent} object that has a {@link android.view.DragEvent#getAction()} value of {@link android.view.DragEvent#ACTION_DRAG_STARTED}. </p> <p> Your application can invoke startDrag() on any attached View object. The View object does not need to be the one used in {@link android.view.View.DragShadowBuilder}, nor does it need to be related to the View the user selected for dragging. </p> transferred by the drag and drop operation. drag shadow. drop operation. This Object is put into every DragEvent object sent by the system during the current drag. <p> myLocalState is a lightweight mechanism for the sending information from the dragged View to the target Views. For example, it can contain flags that differentiate between a a copy operation and a move operation. </p> so the parameter should be set to 0. {@code false} if it fails anywhere. Returning {@code false} means the system was unable to do a drag, and so no drag operation is in progress.
Handles drag events sent by the system following a call to {@link android.view.View#startDrag(ClipData,DragShadowBuilder,Object,int) startDrag()}. When the system calls this method, it passes a {@link android.view.DragEvent} object. A call to {@link android.view.DragEvent#getAction()} returns one of the action type constants defined in DragEvent. The method uses these to determine what is happening in the drag and drop operation. The {@link android.view.DragEvent#getAction()} method returns an action type constant defined in DragEvent, indicating the type of drag event represented by this object. <p> The method should return {@code true} in response to an action type of {@link android.view.DragEvent#ACTION_DRAG_STARTED} to receive drag events for the current operation. </p> <p> The method should also return {@code true} in response to an action type of {@link android.view.DragEvent#ACTION_DROP} if it consumed the drop, or {@code false} if it didn't. </p>
Detects if this View is enabled and has a drag event listener. If both are true, then it calls the drag event listener with the {@link android.view.DragEvent} it received. If the drag event listener returns {@code true}, then dispatchDragEvent() returns {@code true}. <p> For all other cases, the method calls the {@link android.view.View#onDragEvent(DragEvent) onDragEvent()} drag event handler method and returns its result. </p> <p> This ensures that a drag event is always consumed, even if the View does not have a drag event listener. However, if the View has a listener and the listener returns true, then onDragEvent() is not called. </p>
Given a Drawable whose bounds have been set to draw into this view, update a Region being computed for {@link #gatherTransparentRegion(android.graphics.Region)} so that any non-transparent parts of the Drawable are removed from the given transparent region. where any parts of the region that are set are considered to be transparent.  On return, this region will be modified to have the transparency information reduced by the corresponding parts of the Drawable that are not transparent. {@hide}
Inflate a view from an XML resource.  This convenience method wraps the {@link LayoutInflater} class, which provides a full range of options for view inflation. layout_* parameters.
Called by {@link #overScrollBy(int, int, int, int, int, int, int, int, boolean)} to respond to the results of an over-scroll operation.
Returns the over-scroll mode for this view. The result will be one of {@link #OVER_SCROLL_ALWAYS} (default), {@link #OVER_SCROLL_IF_CONTENT_SCROLLS} (allow over-scrolling only if the view content is larger than the container), or {@link #OVER_SCROLL_NEVER}.
Gets a scale factor that determines the distance the view should scroll vertically in response to {@link MotionEvent#ACTION_SCROLL}.
Gets a scale factor that determines the distance the view should scroll horizontally in response to {@link MotionEvent#ACTION_SCROLL}.
Return the value specifying the text direction or policy that was set with {@link #setTextDirection(int)}. {@link #TEXT_DIRECTION_INHERIT}, {@link #TEXT_DIRECTION_FIRST_STRONG} {@link #TEXT_DIRECTION_ANY_RTL}, {@link #TEXT_DIRECTION_LTR}, {@link #TEXT_DIRECTION_RTL},
Set the text direction. {@link #TEXT_DIRECTION_INHERIT}, {@link #TEXT_DIRECTION_FIRST_STRONG} {@link #TEXT_DIRECTION_ANY_RTL}, {@link #TEXT_DIRECTION_LTR}, {@link #TEXT_DIRECTION_RTL},
Return the resolved text direction. {@link #TEXT_DIRECTION_FIRST_STRONG} {@link #TEXT_DIRECTION_ANY_RTL}, {@link #TEXT_DIRECTION_LTR}, {@link #TEXT_DIRECTION_RTL},
Resolve the text direction.
Reset resolved text direction. Will be resolved during a call to getResolvedTextDirection().
Properties A Property wrapper around the <code>alpha</code> functionality handled by the {@link View#setAlpha(float)} and {@link View#getAlpha()} methods.
A Property wrapper around the <code>translationX</code> functionality handled by the {@link View#setTranslationX(float)} and {@link View#getTranslationX()} methods.
A Property wrapper around the <code>translationY</code> functionality handled by the {@link View#setTranslationY(float)} and {@link View#getTranslationY()} methods.
A Property wrapper around the <code>x</code> functionality handled by the {@link View#setX(float)} and {@link View#getX()} methods.
A Property wrapper around the <code>y</code> functionality handled by the {@link View#setY(float)} and {@link View#getY()} methods.
A Property wrapper around the <code>rotation</code> functionality handled by the {@link View#setRotation(float)} and {@link View#getRotation()} methods.
A Property wrapper around the <code>rotationX</code> functionality handled by the {@link View#setRotationX(float)} and {@link View#getRotationX()} methods.
A Property wrapper around the <code>rotationY</code> functionality handled by the {@link View#setRotationY(float)} and {@link View#getRotationY()} methods.
A Property wrapper around the <code>scaleX</code> functionality handled by the {@link View#setScaleX(float)} and {@link View#getScaleX()} methods.
A Property wrapper around the <code>scaleY</code> functionality handled by the {@link View#setScaleY(float)} and {@link View#getScaleY()} methods.
Creates a measure specification based on the supplied size and mode. The mode must always be one of the following: <ul> <li>{@link android.view.View.MeasureSpec#UNSPECIFIED}</li> <li>{@link android.view.View.MeasureSpec#EXACTLY}</li> <li>{@link android.view.View.MeasureSpec#AT_MOST}</li> </ul>
Extracts the mode from the supplied measure specification.
Extracts the size from the supplied measure specification.
Returns a String representation of the specified measure specification.
This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.
Constructor used when reading from a parcel. Reads the state of the superclass.
Constructor called by derived classes when creating their SavedState objects
Creates a new set of attachment information with the specified events handler and thread.
Gives a chance to the host View to populate the accessibility event with its text content. <p> The default implementation behaves as {@link View#onPopulateAccessibilityEvent(AccessibilityEvent) View#onPopulateAccessibilityEvent(AccessibilityEvent)} for the case of no accessibility delegate been set. </p>
Initializes an {@link AccessibilityEvent} with information about the the host View which is the event source. <p> The default implementation behaves as {@link View#onInitializeAccessibilityEvent(AccessibilityEvent) View#onInitializeAccessibilityEvent(AccessibilityEvent)} for the case of no accessibility delegate been set. </p>
Initializes an {@link AccessibilityNodeInfo} with information about the host view. <p> The default implementation behaves as {@link View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo) View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} for the case of no accessibility delegate been set. </p>
Called when a child of the host View has requested sending an {@link AccessibilityEvent} and gives an opportunity to the parent (the host) to augment the event. <p> The default implementation behaves as {@link ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent) ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent)} for the case of no accessibility delegate been set. </p>
Creates a new configuration for the specified context. The configuration depends on various parameters of the context, like the dimension of the display or the density of the display.
Returns a configuration for the specified context. The configuration depends on various parameters of the context, like the dimension of the display or the density of the display.
a long press
is a tap or a scroll. If the user does not move within this interval, it is considered to be a tap.
is a jump tap. If the user does not move within this interval, it is considered to be a tap.
the second tap's down event for an interaction to be considered a double-tap.
touch and release for a given touch to be considered a tap (click) as opposed to a hover movement gesture.
before being released for it to be considered a tap (click) as opposed to a hover movement gesture.
gesture and the touch up event of a subsequent tap for the latter tap to be considered as a tap i.e. to perform a click.
Interval for dispatching a recurring accessibility event in milliseconds. This interval guarantees that a recurring event will be send at most once during the {@link #getSendRecurringAccessibilityEventsInterval()} time frame.
to be counted as outside the window for purposes of dismissing that window.
The maximum drawing cache size expressed in bytes.
The amount of time that the zoom controls should be displayed on the screen expressed in milliseconds. in milliseconds.
The amount of time a user needs to press the relevant key to bring up the global actions dialog. the global actions dialog.
The amount of friction applied to scrolls and flings.
Report if the device has a permanent menu key available to the user. <p>As of Android 3.0, devices may not have a permanent menu key available. Apps should use the action bar to present menu options to users. However, there are some apps where the action bar is inappropriate or undesirable. This method may be used to detect if a menu key is present. If not, applications should provide another on-screen affordance to access functionality.
When resolveId is true, and if the annotated field/method return value is an int, the value is converted to an Android's resource name.
When deep export is turned on, this property is not dumped. Instead, the properties contained in this property are dumped. Each child property is prefixed with the name of this property.
Indicates whether to output the flag when the test is true, or false. Defaults to true.
When retrieveReturn is true, we need to retrieve second level methods e.g., we need myView.getFirstLevelMethod().getSecondLevelMethod() we will set retrieveReturn = true on the annotation of myView.getFirstLevelMethod()
Returns the number of instanciated Views.
Returns the number of instanciated ViewAncestors.
Starts profiling the looper associated with the current thread. You must call {@link #stopLooperProfiling} to end profiling and obtain the traces. Both methods must be invoked on the same thread.
Stops profiling the looper associated with the current thread.
Outputs a trace to the currently opened recycler traces. The trace records the type of recycler action performed on the supplied view as well as a number of parameters.
Starts tracing the view recycler of the specified view. The trace is identified by a prefix, used to build the traces files names: <code>/EXTERNAL/view-recycler/PREFIX.traces</code> and <code>/EXTERNAL/view-recycler/PREFIX.recycler</code>. Only one view recycler can be traced at the same time. After calling this method, any other invocation will result in a <code>IllegalStateException</code> unless {@link #stopRecyclerTracing()} is invoked before. Traces files are created only after {@link #stopRecyclerTracing()} is invoked. This method will return immediately if TRACE_RECYCLER is false.
Stops the current view recycer tracing. Calling this method creates the file <code>/EXTERNAL/view-recycler/PREFIX.traces</code> containing all the traces (or method calls) relative to the specified view's recycler. Calling this method creates the file <code>/EXTERNAL/view-recycler/PREFIX.recycler</code> containing all of the views used by the recycler of the view supplied to {@link #startRecyclerTracing(String, View)}. This method will return immediately if TRACE_RECYCLER is false.
Outputs a trace to the currently opened traces file. The trace contains the class name and instance's hashcode of the specified view as well as the supplied trace type.
Starts tracing the view hierarchy of the specified view. The trace is identified by a prefix, used to build the traces files names: <code>/EXTERNAL/view-hierarchy/PREFIX.traces</code> and <code>/EXTERNAL/view-hierarchy/PREFIX.tree</code>. Only one view hierarchy can be traced at the same time. After calling this method, any other invocation will result in a <code>IllegalStateException</code> unless {@link #stopHierarchyTracing()} is invoked before. Calling this method creates the file <code>/EXTERNAL/view-hierarchy/PREFIX.traces</code> containing all the traces (or method calls) relative to the specified view's hierarchy. This method will return immediately if TRACE_HIERARCHY is false.
Stops the current view hierarchy tracing. This method closes the file <code>/EXTERNAL/view-hierarchy/PREFIX.traces</code>. Calling this method creates the file <code>/EXTERNAL/view-hierarchy/PREFIX.tree</code> containing the view hierarchy of the view supplied to {@link #startHierarchyTracing(String, View)}. This method will return immediately if TRACE_HIERARCHY is false.
Dump view info for id based instrument test generation (and possibly further data analysis). The results are dumped to the log.
Set the descendant focusability of this view group. This defines the relationship between this view group and its descendants when looking for a view to take focus in {@link #requestFocus(int, android.graphics.Rect)}. {@link #FOCUS_BLOCK_DESCENDANTS}.
Find the nearest view in the specified direction that wants to take focus.
Called when a child has requested sending an {@link AccessibilityEvent} and gives an opportunity to its parent to augment the event. <p> If an {@link android.view.View.AccessibilityDelegate} has been specified via calling {@link android.view.View#setAccessibilityDelegate(android.view.View.AccessibilityDelegate)} its {@link android.view.View.AccessibilityDelegate#onRequestSendAccessibilityEvent(ViewGroup, View, AccessibilityEvent)} is responsible for handling this call. </p>
Note: Called from the default {@link View.AccessibilityDelegate}.
Returns the focused child of this view, if any. The child may have focus or contain focus.
Find the frontmost child view that lies under the given point, and calculate the position within its own local coordinate system.
Implement this method to intercept hover events before they are handled by child views. <p> This method is called before dispatching a hover event to a child of the view group or to the view group's own {@link #onHoverEvent} to allow the view group a chance to intercept the hover event. This method can also be used to watch all pointer motions that occur within the bounds of the view group even when the pointer is hovering over a child of the view group rather than over the view group itself. </p><p> The view group can prevent its children from receiving hover events by implementing this method and returning <code>true</code> to indicate that it would like to intercept hover events.  The view group must continuously return <code>true</code> from {@link #onInterceptHoverEvent} for as long as it wishes to continue intercepting hover events from its children. </p><p> Interception preserves the invariant that at most one view can be hovered at a time by transferring hover focus from the currently hovered child to the view group or vice-versa as needed. </p><p> If this method returns <code>true</code> and a child is already hovered, then the child view will first receive a hover exit event and then the view group itself will receive a hover enter event in {@link #onHoverEvent}. Likewise, if this method had previously returned <code>true</code> to intercept hover events and instead returns <code>false</code> while the pointer is hovering within the bounds of one of a child, then the view group will first receive a hover exit event in {@link #onHoverEvent} and then the hovered child will receive a hover enter event. </p><p> The default implementation always returns false. </p> and prevent its children from receiving it.
Dispatches a generic pointer event to a child, taking into account transformations that apply to the child.
Resets all touch state in preparation for a new cycle.
Resets the cancel next up flag. Returns true if the flag was previously set.
Clears all touch targets.
Cancels and clears all touch targets.
Gets the touch target for specified child view. Returns null if not found.
Adds a touch target for specified child to the beginning of the list. Assumes the target child is not already present.
Removes the pointer ids from consideration.
Returns true if a child view can receive pointer events.
Returns true if a child view contains the specified point when transformed into its coordinate space. Child must not be null.
Transforms a motion event into the coordinate space of a particular child view, filters out irrelevant pointer ids, and overrides its action if necessary. If child is null, assumes the MotionEvent will be sent to this ViewGroup instead.
Enable or disable the splitting of MotionEvents to multiple children during touch event dispatch. This behavior is enabled by default for applications that target an SDK version of {@link Build.VERSION_CODES#HONEYCOMB} or newer. <p>When this option is enabled MotionEvents may be split and dispatched to different child views depending on where each pointer initially went down. This allows for user interactions such as scrolling two panes of content independently, chording of buttons, and performing independent gestures on different pieces of content.
Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children.
Implement this method to intercept all touch screen motion events.  This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. <p>Using this function takes some care, as it has a fairly complicated interaction with {@link View#onTouchEvent(MotionEvent) View.onTouchEvent(MotionEvent)}, and using it requires implementing that method as well as this one in the correct way.  Events will be received in the following order: <ol> <li> You will receive the down event here. <li> The down event will be handled either by a child of this view group, or given to your own onTouchEvent() method to handle; this means you should implement onTouchEvent() to return true, so you will continue to see the rest of the gesture (instead of looking for a parent view to handle it).  Also, by returning true from onTouchEvent(), you will not receive any following events in onInterceptTouchEvent() and all touch processing must happen in onTouchEvent() like normal. <li> For as long as you return false from this function, each following event (up to and including the final up) will be delivered first here and then to the target's onTouchEvent(). <li> If you return true from here, you will not receive any following events: the target view will receive the same event but with the action {@link MotionEvent#ACTION_CANCEL}, and all further events will be delivered to your onTouchEvent() method and no longer appear here. </ol> them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here.
Perform dispatching of a {@link #saveHierarchyState(android.util.SparseArray)}  freeze()} to only this view, not to its children.  For use when overriding {@link #dispatchSaveInstanceState(android.util.SparseArray)}  dispatchFreeze()} to allow subclasses to freeze their own state but not the state of their children.
Perform dispatching of a {@link #restoreHierarchyState(android.util.SparseArray)} to only this view, not to its children.  For use when overriding {@link #dispatchRestoreInstanceState(android.util.SparseArray)} to allow subclasses to thaw their own state but not the state of their children.
Enables or disables the drawing cache for each child of this view group.
Returns the index of the child to draw for this iteration. Override this if you want to change the drawing order of children. By default, it returns i. <p> NOTE: In order for this method to be called, you must enable child ordering first by calling {@link #setChildrenDrawingOrderEnabled(boolean)}.
Draw one child of this View Group. This method is responsible for getting the canvas in the right state. This includes clipping, translating so that the child's scrolled origin is at 0, 0, and applying any animation transformations.
By default, children are clipped to their bounds before drawing. This allows view groups to override this behavior for animations, etc.
By default, children are clipped to the padding of the ViewGroup. This allows view groups to override this behavior
When this property is set to true, this ViewGroup supports static transformations on children; this causes {@link #getChildStaticTransformation(View, android.view.animation.Transformation)} to be invoked when a child is drawn. Any subclass overriding {@link #getChildStaticTransformation(View, android.view.animation.Transformation)} should set this property to true.
Adds a child view. If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child.
Adds a child view with this ViewGroup's default layout parameters and the specified width and height.
Adds a child view with the specified layout parameters.
Register a callback to be invoked when a child is added to or removed from this view.
Adds a view during layout. This is useful if in your onLayout() method, you need to add more views (as does the list view for example). If index is negative, it means put it at the end of the list.
Prevents the specified child to be laid out during the next layout pass.
This method also sets the child's mParent to null
This method also sets the children's mParent to null
Subclasses should override this method to set layout animation parameters on the supplied child.
Removes a view during layout. This is useful if in your onLayout() method, you need to remove more views.
Removes a range of views during layout. This is useful if in your onLayout() method, you need to remove more views.
Removes the view at the specified position in the group.
Removes the specified range of views from the group.
Sets the LayoutTransition object for this ViewGroup. If the LayoutTransition object is not null, changes in layout which occur because of children being added to or removed from the ViewGroup will be animated according to the animations defined in that LayoutTransition object. By default, the transition object is null (so layout changes are not animated). of <code>null</code> means no transition will run on layout changes.
Gets the LayoutTransition object for this ViewGroup. If the LayoutTransition object is not null, changes in layout which occur because of children being added to or removed from the ViewGroup will be animated according to the animations defined in that LayoutTransition object. By default, the transition object is null (so layout changes are not animated). A value of <code>null</code> means no transition will run on layout changes.
Call this method to remove all child views from the ViewGroup.
Called by a ViewGroup subclass to remove child views from itself, when it must first know its size on screen before it can calculate how many child views it will render. An example is a Gallery or a ListView, which may "have" 50 children, but actually only render the number of children that can currently fit inside the object on screen. Do not call this method unless you are extending ViewGroup and understand the view measuring and layout pipeline.
Finishes the removal of a detached view. This method will dispatch the detached from window event and notify the hierarchy change listener.
Attaches a view to this view group. Attaching a view assigns this group as the parent, sets the layout parameters and puts the view in the list of children so it can be retrieved by calling {@link #getChildAt(int)}. This method should be called only for view which were detached from their parent.
Detaches a view from its parent. Detaching a view should be temporary and followed either by a call to {@link #attachViewToParent(View, int, android.view.ViewGroup.LayoutParams)} or a call to {@link #removeDetachedView(View, boolean)}. When a view is detached, its parent is null and cannot be retrieved by a call to {@link #getChildAt(int)}.
Detaches a range of view from their parent. Detaching a view should be temporary and followed either by a call to {@link #attachViewToParent(View, int, android.view.ViewGroup.LayoutParams)} or a call to {@link #removeDetachedView(View, boolean)}. When a view is detached, its parent is null and cannot be retrieved by a call to {@link #getChildAt(int)}.
Detaches all views from the parent. Detaching a view should be temporary and followed either by a call to {@link #attachViewToParent(View, int, android.view.ViewGroup.LayoutParams)} or a call to {@link #removeDetachedView(View, boolean)}. When a view is detached, its parent is null and cannot be retrieved by a call to {@link #getChildAt(int)}.
Don't call or override this method. It is used for the implementation of the view hierarchy.
Don't call or override this method. It is used for the implementation of the view hierarchy. This implementation returns null if this ViewGroup does not have a parent, if this ViewGroup is already fully invalidated or if the dirty rectangle does not intersect with this ViewGroup's bounds.
Offset a rectangle that is in a descendant's coordinate space into our coordinate space.
Offset a rectangle that is in our coordinate space into an ancestor's coordinate space.
Helper method that offsets a rect either from parent to descendant or descendant to parent.
Offset the vertical location of all children of this view by the specified number of pixels.
Indicates whether the view group has the ability to animate its children after the first layout.
Runs the layout animation. Calling this method triggers a relayout of this view group.
Schedules the layout animation to be played after the next layout pass of this view group. This can be used to restart the layout animation when the content of the view group changes or when the activity is paused and resumed.
Sets the layout animation controller used to animate the group's children after the first layout.
Returns the layout animation controller used to animate the group's children.
Enables or disables the children's drawing cache during a layout animation. By default, the drawing cache is enabled but this will prevent nested layout animations from working. To nest animations, you must disable the cache.
Indicates whether this ViewGroup will always try to draw its children using their drawing cache. This property can be set to true when the cache rendering is slightly different from the children's normal rendering. Renderings can be different, for instance, when the cache's quality is set to low. When this property is disabled, the ViewGroup will use the drawing cache of its children only when asked to. It's usually the task of subclasses to tell ViewGroup when to start using the drawing cache and when to stop using it.
Tells the ViewGroup to draw its children using their drawing cache. This property is ignored when {@link #isAlwaysDrawnWithCacheEnabled()} is true. A child's drawing cache will be used only if it has been enabled. Subclasses should call this method to start and stop using the drawing cache when they perform performance sensitive operations, like scrolling or animating.
Tells the ViewGroup whether to draw its children in the order defined by the method {@link #getChildDrawingOrder(int, int)}.
Indicates what types of drawing caches should be kept in memory after they have been created.
Returns a new set of layout parameters based on the supplied attributes set.
Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of {@link #checkLayoutParams(android.view.ViewGroup.LayoutParams)}, this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.
Returns a set of default layout parameters. These parameters are requested when the View passed to {@link #addView(View)} has no layout parameters already set. If null is returned, an exception is thrown from addView.
Returns the position in the group of the specified child view.
Returns the number of children in the group.
Returns the view at the specified position in the group.
Ask all of the children of this view to measure themselves, taking into account both the MeasureSpec requirements for this view and its padding. We skip children that are in the GONE state The heavy lifting is done in getChildMeasureSpec.
Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding. The heavy lifting is done in getChildMeasureSpec.
Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding and margins. The child must have MarginLayoutParams The heavy lifting is done in getChildMeasureSpec.
Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child. This method figures out the right MeasureSpec for one dimension (height or width) of one child view. The goal is to combine information from our MeasureSpec with the LayoutParams of the child to get the best possible results. For example, if the this view knows its size (because its MeasureSpec has a mode of EXACTLY), and the child has indicated in its LayoutParams that it wants to be the same size as the parent, the parent should ask the child to layout given an exact size.
Removes any pending animations for views that have been removed. Call this if you don't want animations for exiting views to stack up.
Add a view which is removed from mChildren but still needs animation
Cleanup a view when its animation is done. This may mean removing it from the list of disappearing views.
Utility function called by View during invalidation to determine whether a view that is invisible or gone should still be invalidated because it is being transitioned (and therefore still needs to be drawn).
This method tells the ViewGroup that the given View object, which should have this ViewGroup as its parent, should be kept around  (re-displayed when the ViewGroup draws its children) even if it is removed from its parent. This allows animations, such as those used by {@link android.app.Fragment} and {@link android.animation.LayoutTransition} to animate the removal of views. A call to this method should always be accompanied by a later call to {@link #endViewTransition(View)}, such as after an animation on the View has finished, so that the View finally gets removed.
This method should always be called following an earlier call to {@link #startViewTransition(View)}. The given View is finally removed from its parent and will no longer be displayed. Note that this method does not perform the functionality of removing a view from its parent; it just discontinues the display of a View that has previously been removed. hierarchy by an earlier call to {@link #startViewTransition(View)}.
Returns the animation listener to which layout animation events are sent.
Sets whether this ViewGroup's drawable states also include its children's drawable states.  This is used, for example, to make a group appear to be focused when its child EditText or button is focused.
Returns whether this ViewGroup's drawable states also include its children's drawable states.  This is used, for example, to make a group appear to be focused when its child EditText or button is focused.
If {link #addStatesFromChildren} is true, refreshes this group's drawable state (to include the states from its children).
Specifies the animation listener to which layout animation events must be sent. Only {@link android.view.animation.Animation.AnimationListener#onAnimationStart(Animation)} and {@link android.view.animation.Animation.AnimationListener#onAnimationEnd(Animation)} are invoked.
This method is called by LayoutTransition when there are 'changing' animations that need to start after the layout/setup phase. The request is forwarded to the ViewAncestor, who starts all pending transitions prior to the drawing phase in the current traversal.
Return true if the pressed state should be delayed for children or descendants of this ViewGroup. Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false.
Creates a new set of layout parameters. The values are extracted from the supplied attributes set and context. The XML attributes mapped to this set of layout parameters are: <ul> <li><code>layout_width</code>: the width, either an exact value, {@link #WRAP_CONTENT}, or {@link #FILL_PARENT} (replaced by {@link #MATCH_PARENT} in API Level 8)</li> <li><code>layout_height</code>: the height, either an exact value, {@link #WRAP_CONTENT}, or {@link #FILL_PARENT} (replaced by {@link #MATCH_PARENT} in API Level 8)</li> </ul>
Creates a new set of layout parameters with the specified width and height.
Copy constructor. Clones the width and height values of the source.
Extracts the layout parameters from the supplied attributes.
Returns a String representation of this set of layout parameters.
Converts the specified size to a readable String.
Creates a new set of layout parameters. The values are extracted from the supplied attributes set and context.
Copy constructor. Clones the width, height and margin values of the source.
Sets the margins, in pixels. A call to {@link android.view.View#requestLayout()} needs to be done so that the new margins are taken into account. Left and right margins may be overriden by {@link android.view.View#requestLayout()} depending on layout direction.
Sets the relative margins, in pixels. A call to {@link android.view.View#requestLayout()} needs to be done so that the new relative margins are taken into account. Left and right margins may be overriden by {@link android.view.View#requestLayout()} depending on layout direction.
Returns the start margin in pixels.
Returns the end margin in pixels.
Constructor, called by View. This is private by design, as the user should only get a ViewPropertyAnimator by calling View.animate().
Returns the current startDelay of property animations. If the startDelay was set on this object, that value is returned. Otherwise, the default value of the underlying Animator is returned.
Sets the startDelay for the underlying animator that animates the requested properties. By default, the animator uses the default value for ValueAnimator. Calling this method will cause the declared value to be used instead. cannot be negative.
Sets the interpolator for the underlying animator that animates the requested properties. By default, the animator uses the default interpolator for ValueAnimator. Calling this method will cause the declared object to be used instead.
Sets a listener for events in the underlying Animators that run the property animations.
Starts the currently pending property animations immediately. Calling <code>start()</code> is optional because all animations start automatically at the next opportunity. However, if the animations are needed to start immediately and synchronously (not at the time when the next event is processed by the hierarchy, which is when the animations would begin otherwise), then this method can be used.
This method will cause the View's <code>x</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>x</code> property to be animated by the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>y</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>y</code> property to be animated by the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>rotation</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>rotation</code> property to be animated by the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>rotationX</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>rotationX</code> property to be animated by the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>rotationY</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>rotationY</code> property to be animated by the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>translationX</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>translationX</code> property to be animated by the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>translationY</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>translationY</code> property to be animated by the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>scaleX</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>scaleX</code> property to be animated by the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>scaleY</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>scaleY</code> property to be animated by the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>alpha</code> property to be animated to the specified value. Animations already running on the property will be canceled.
This method will cause the View's <code>alpha</code> property to be animated by the specified value. Animations already running on the property will be canceled.
Call this to profile the next traversal call. FIXME for perf testing only. Remove eventually
Indicates whether we are in touch mode. Calling this method triggers an IPC call and should be avoided whenever possible.
We have one child
Add LayoutTransition to the list of transitions to be started in the next traversal. This list will be cleared after the transitions on the list are start()'ed. These transitionsa re added by LayoutTransition itself when it sets up animations. The setup happens during the layout phase of traversal, which we want to complete before any of the animations are started (because those animations may side-effect properties that layout depends upon, like the bounding rectangles of the affected views). So we add the transition to the list and it is started just prior to starting the drawing phase of traversal.
Figures out the measure spec for the root view in a window based on it's layout params.
Called from draw() when DEBUG_FPS is enabled
Return true if child is an ancestor of parent, (or equal to the parent).
Something in the current window tells us we need to change the touch mode.  For example, we are not in touch mode, and the user touches the screen. If the touch mode has changed, tell the window manager, and handle it locally.
Ensure that the touch mode for this window is set, and if it is changing, take the appropriate action.
Find an ancestor of focused that wants focus after its descendants and is focusable in touch mode.
Returns true if the key is used for keyboard navigation.
Returns true if the key is used for typing.
See if the key event means we should leave touch mode (and leave touch mode if so). leaving touch mode alone is considered the event).
The window is getting focus so if there is anything focused/selected send an {@link AccessibilityEvent} to announce that.
Post a callback to send a {@link AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} event. This event is send at most once every {@link ViewConfiguration#getSendRecurringAccessibilityEventsInterval()}.
Remove a posted callback to send a {@link AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} event.
Add trackball movement into the state.  If the direction of movement has been reversed, the state is reset before adding the movement (so that you don't have to compensate for any previously collected movement before see the result of the movement in the new direction). collected so far.
Generate the number of discrete movement events appropriate for the currently collected trackball movement. first discrete movement. or negative, or 0 if there is not enough trackball movement yet for a discrete movement.
Set which parts of the window can be touched: either {@link #TOUCHABLE_INSETS_FRAME}, {@link #TOUCHABLE_INSETS_CONTENT}, {@link #TOUCHABLE_INSETS_VISIBLE}, or {@link #TOUCHABLE_INSETS_REGION}.
Merges all the listeners registered on the specified observer with the listeners registered on this object. After this method is invoked, the specified observer will return false in {@link #isAlive()} and should not be used anymore.
Register a callback to be invoked when the focus state within the view tree changes.
Remove a previously installed focus change callback.
Register a callback to be invoked when the global layout state or the visibility of views within the view tree changes
Remove a previously installed global layout callback
Register a callback to be invoked when the view tree is about to be drawn
Remove a previously installed pre-draw callback
Register a callback to be invoked when a view has been scrolled.
Remove a previously installed scroll-changed callback
Register a callback to be invoked when the invoked when the touch mode changes.
Remove a previously installed touch mode change callback
Register a callback to be invoked when the invoked when it is time to compute the window's internal insets. We are not yet ready to commit to this API and support it, so
Remove a previously installed internal insets computation callback We are not yet ready to commit to this API and support it, so
Indicates whether this ViewTreeObserver is alive. When an observer is not alive, any call to a method (except this one) will throw an exception. If an application keeps a long-lived reference to this ViewTreeObserver, it should always check for the result of this method before calling any other method.
Marks this ViewTreeObserver as not alive. After invoking this method, invoking any other method but {@link #isAlive()} and {@link #kill()} will throw an Exception.
Notifies registered listeners that focus has changed.
Notifies registered listeners that a global layout happened. This can be called manually if you are forcing a layout on a View or a hierarchy of Views that are not attached to a Window or in the GONE state.
Notifies registered listeners that the drawing pass is about to start. If a listener returns true, then the drawing pass is canceled and rescheduled. This can be called manually if you are forcing the drawing on a View or a hierarchy of Views that are not attached to a Window or in the GONE state.
Notifies registered listeners that the touch mode has changed.
Notifies registered listeners that something has scrolled.
Returns whether there are listeners for computing internal insets.
Calls all listeners to compute the current insets.
Update the mute and progress state of a slider
Override this if you have other work to do when the volume changes (for example, vibrating, playing a sound, etc.). Make sure to call through to the superclass implementation.
Lock on this VolumePanel instance as long as you use the returned ToneGenerator.
Switch between icons because Bluetooth music is same as music volume, but with different icons.
Return the Context this window policy is running in, for retrieving resources and other information.
Return the {@link android.R.styleable#Window} attributes from this window's theme.
Set the container for this window.  If not set, the DecorWindow operates as a top-level window; otherwise, it negotiates with the container to display itself appropriately.
Return the container for this Window.
Set the window manager for use by this Window to, for example, display panels.  This is <em>not</em> used for displaying the Window itself -- that must be done by the client.
Return the window manager allowing this Window to display its own windows.
Set the Callback interface for this window, used to intercept key events and other dynamic operations in the window.
Return the current Callback interface for this window.
Set the width and height layout parameters of the window.  The default for both of these is MATCH_PARENT; you can change them to WRAP_CONTENT or an absolute value to make a window that is not full-screen.
Set the gravity of the window, as per the Gravity constants.  This controls how the window manager is positioned in the overall window; it is only useful when using WRAP_CONTENT for the layout width or height.
Set the type of the window, as per the WindowManager.LayoutParams types.
Set the format of window, as per the PixelFormat types.  This overrides the default format that is selected by the Window based on its window decorations.
Specify custom animations to use for the window, as per {@link WindowManager.LayoutParams#windowAnimations WindowManager.LayoutParams.windowAnimations}.  Providing anything besides 0 here will override the animations the window would normally retrieve from its theme.
Specify an explicit soft input mode to use for the window, as per {@link WindowManager.LayoutParams#softInputMode WindowManager.LayoutParams.softInputMode}.  Providing anything besides "unspecified" here will override the input mode the window would normally retrieve from its theme.
Convenience function to set the flag bits as specified in flags, as per {@link #setFlags}.
Convenience function to clear the flag bits as specified in flags, as per {@link #setFlags}.
Set the flags of the window, as per the {@link WindowManager.LayoutParams WindowManager.LayoutParams} flags. <p>Note that some flags must be set before the window decoration is created (by the first call to {@link #setContentView(View, android.view.ViewGroup.LayoutParams)} or {@link #getDecorView()}: {@link WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN} and {@link WindowManager.LayoutParams#FLAG_LAYOUT_INSET_DECOR}.  These will be set for you based on the {@link android.R.attr#windowIsFloating} attribute.
Set the amount of dim behind the window when using {@link WindowManager.LayoutParams#FLAG_DIM_BEHIND}.  This overrides the default dim amount of that is selected by the Window based on its theme.
Specify custom window attributes.  <strong>PLEASE NOTE:</strong> the layout params you give here should generally be from values previously retrieved with {@link #getAttributes()}; you probably do not want to blindly create and apply your own, since this will blow away any values set by the framework that you are not interested in.
Retrieve the current window attributes associated with this panel.
Return the window flags that have been explicitly set by the client, so will not be modified by {@link #getDecorView}.
Has the app specified their own soft input mode?
Enable extended screen features.  This must be called before setContentView().  May be called as many times as desired as long as it is before setContentView().  If not called, no extended features will be available.  You can not turn off a feature once it is requested. You canot use other title features with {@link #FEATURE_CUSTOM_TITLE}.
Finds a view that was identified by the id attribute from the XML that was processed in {@link android.app.Activity#onCreate}.  This will implicitly call {@link #getDecorView} for you, with all of the associated side-effects.
Change the background of this window to a Drawable resource. Setting the background to null will make the window be opaque. To make the window transparent, you can use an empty drawable (for instance a ColorDrawable with the color 0 or the system drawable android:drawable/empty.)
Return the feature bits that are enabled.  This is the set of features that were given to requestFeature(), and are being handled by this Window itself or its container.  That is, it is the set of requested features that you can actually use. <p>To do: add a public version of this API that allows you to check for features by their feature ID.
Query for the availability of a certain feature.
Return the feature bits that are being implemented by this Window. This is the set of features that were given to requestFeature(), and are being handled by only this Window itself, not by its containers.
Set the default format of window, as per the PixelFormat types.  This is the format that will be used unless the client specifies in explicit format with setFormat();
Given a particular set of window manager flags, determine whether such a window may be a target for an input method when it has focus.  In particular, this checks the {@link #FLAG_NOT_FOCUSABLE} and {@link #FLAG_ALT_FOCUSABLE_IM} flags and returns true if the combination of the two corresponds to a window that needs to be behind the input method so that the user can type into it. with an input method, false if not.
Scale the layout params' coordinates and size.
Backup the layout parameters used in compatibility mode.
Restore the layout params' coordinates, size and gravity
Creates a new WindowOrientationListener.
Creates a new WindowOrientationListener. {@link android.hardware.SensorManager SensorManager}). Use the default value of {@link android.hardware.SensorManager#SENSOR_DELAY_NORMAL SENSOR_DELAY_NORMAL} for simple screen orientation change detection. This constructor is private since no one uses it.
Enables the WindowOrientationListener so it will monitor the sensor and call {@link #onOrientationChanged} when the device orientation changes.
Disables the WindowOrientationListener.
Sets the current rotation.
Gets the proposed rotation. This method only returns a rotation if the orientation listener is certain of its proposal.  If the rotation is indeterminate, returns -1.
Enables or disables the window orientation listener logging for use with the orientationplot.py tool. Logging is usually enabled via Development Settings.  (See class comments.)
Returns true if the tilt angle is acceptable for a proposed orientation transition.
Returns true if the orientation angle is acceptable for a proposed orientation transition. This function takes into account the gap between adjacent orientations for hysteresis.
Creates a new injector associated with a given {@link WebView}.
Processes a key down <code>event</code>.
Set the current navigation axis which will be used while calling {@link #traverseCurrentAxis(int, boolean, String)}.
Performs conditional transition one axis to another.
Traverse the document along the current navigation axis.
Traverse the document along the given navigation axis.
Called when the <code>selectionString</code> has changed.
Ensures that the Web content key bindings are loaded.
Creates a new instance.
Create a new BrowserFrame to be used in an application. XXX: Called by WebCore thread.
Load a url from the network or the filesystem into the main frame. Following the same behaviour as Safari, javascript: URLs are not passed to the main frame, instead they are evaluated immediately.
Load a url with "POST" method from the network into the main frame.
Load the content as if it was loaded by the provided base URL. The historyUrl is used as the history entry for the load data.
Saves the contents of the frame as a web archive.
Go back or forward the number of steps given.
native callback Report an error to an activity. TODO: Report all errors including resource errors but include some kind of domain identifier. Change errorCode to an enum for a cleaner interface.
native callback Indicates the beginning of a new load. This method will be called once for the main frame.
native callback Indicates the WebKit has committed to the new load
native callback <p> Indicates the end of a new load. This method will be called once for the main frame.
We have received an SSL certificate for the main top-level page. Used by the Android HTTP stack only.
Destroy all native components of the BrowserFrame.
Punch-through for WebCore to set the document title. Inform the Activity of the new title.
Retrieves the render tree of this frame and puts it as the object for the message and sends the message.
Retrieves the visual text of the frames, puts it as the object for the message and sends the message.
This method is called by WebCore to inform the frame that the Javascript window object has been cleared. We should re-attach any attached js interfaces.
This method is called by WebCore to check whether application wants to hijack url loading
Called by JNI.  Given a URI, find the associated file and return its size
Called by JNI.  Given a URI, a buffer, and an offset into the buffer, copy the resource into buffer.
Get the InputStream for an Android resource There are three different kinds of android resources: - file:///android_res - file:///android_asset - content:
Start loading a resource.
If this looks like a POST request (form submission) containing a username and password, give the user the option of saving them. Will either do nothing, or block until the UI interaction is complete. Called by startLoadingResource when using the Apache HTTP stack. Called directly by WebKit when using the Chrome HTTP stack.
Called by jni from the chrome network stack.
Set the progress for the browser activity.  Called by native code. Uses a delay so it does not happen too often.
Send the icon to the activity for display.
Called by JNI when an apple-touch-icon attribute was found.
Request a new window from the client.
Try to focus this WebView.
Close this frame and window.
Tell the activity to update its global history.
Get the CallbackProxy for sending messages to the UI thread.
Returns the User Agent used by this frame
Called by JNI when the native HTTP stack gets an authentication request. We delegate the request to CallbackProxy, and route its response to {@link #nativeAuthenticationProceed(int, String, String)} or {@link #nativeAuthenticationCancel(int)}. We don't care what thread the callback is invoked on. All threading is handled on the C++ side, because the WebKit thread may be blocked on a synchronous call and unable to pump our MessageQueue.
Called by JNI when the Chromium HTTP stack gets an invalid certificate chain. We delegate the request to CallbackProxy, and route its response to {@link #nativeSslCertErrorProceed(int)} or {@link #nativeSslCertErrorCancel(int, int)}.
Called by JNI when the native HTTPS stack gets a client certificate request. We delegate the request to CallbackProxy, and route its response to {@link #nativeSslClientCert(int, X509Certificate)}.
Called by JNI when the native HTTP stack needs to download a file. We delegate the request to CallbackProxy, which owns the current app's DownloadListener.
Called by JNI for Chrome HTTP stack when the Java side needs to access the data.
Called by JNI when we recieve a certificate for the page's main resource. Used by the Chromium HTTP stack only.
Called by JNI when processing the X-Auto-Login header.
Stop loading the current page.
The fastest way to retrieve the data is to iterate through the chunks.  This returns the first chunk.  Note: this pulls the chunk out of the queue.  The caller must call Chunk.release() to dispose of it.
Must be called with lock held on sPool.
Release the chunk and make it available for reuse.
Constructs a CacheLoader for use when loading content from the cache.
For out-of-package access to the underlying streams.
These fields can be set manually.
Initialize the CacheManager. Note that this is called automatically when a {@link android.webkit.WebView} is created.
Create the cache directory if it does not already exist.
Sets whether the cache is disabled.
only called from WebViewWorkerThread make sure to call enableTransaction/disableTransaction in pair
only called from WebViewWorkerThread make sure to call enableTransaction/disableTransaction in pair
only called from WebViewWorkerThread make sure to call startTransaction/endTransaction in pair
only called from WebViewWorkerThread make sure to call startTransaction/endTransaction in pair
Remove all cache files.
Construct a new CallbackProxy.
Set the WebViewClient.
Get the WebViewClient.
Set the WebChromeClient.
Get the WebChromeClient.
Set the client DownloadListener.
Get the Back/Forward list to return to the user or to update the cached history list.
Called by the UI side.  Calling overrideUrlLoading from the WebCore side will post a message to call this method.
Called by UI side.
Return the latest progress.
Called by WebCore side to switch out of history Picture drawing mode
Because this method is public and because CallbackProxy is mistakenly party of the public classes, we cannot remove this method.
Called by the WebCore side
Starts a download if a download listener has been registered, otherwise return false.
-------------------------------------------------------------------------- WebView specific functions that do not interact with a client. These functions just need to operate within the UI thread. --------------------------------------------------------------------------
-------------------------------------------------------------------------- WebChromeClient methods --------------------------------------------------------------------------
Called by WebViewCore to inform the Java side that the current origin has overflowed it's database quota. Called in the WebCore thread so posts a message to the UI thread that will prompt the WebChromeClient for what to do. On return back to C++ side, the WebCore thread will sleep pending a new quota value.
Called by WebViewCore to inform the Java side that the appcache has exceeded its max size. in order for the last appcache operation to succeed. to WebViewCore to run when the decision to allow or deny a bigger app cache size has been made.
Called by WebViewCore to instruct the browser to display a prompt to ask the user to set the Geolocation permission state for the given origin.
Called by WebViewCore to instruct the browser to hide the Geolocation permissions prompt.
Called by WebViewCore when we have a message to be added to the JavaScript error console. Sends a message to the Java side with the details.
Called by WebViewCore to open a file chooser.
Proceed with the specified private key and client certificate chain.
Igore the request for now, the user may be prompted again.
Cancel this request, remember the users negative choice.
Construct a ContentLoader with the specified content URI
Get a singleton CookieManager. If this is called before any {@link WebView} is created or outside of {@link WebView} context, the caller needs to call {@link CookieSyncManager#createInstance(Context)} first.
Control whether cookie is enabled or disabled
Return whether cookie is enabled
Set cookie for a given url. The old cookie with same host/path/name will be removed. The new cookie will be added if it is not expired or it does not have expiration which implies it is session cookie.
Set cookie for a given uri. The old cookie with same host/path/name will be removed. The new cookie will be added if it is not expired or it does not have expiration which implies it is session cookie. a system private class.
Get cookie(s) for a given url so that it can be set to "cookie:" in http request header.
Get cookie(s) for a given uri so that it can be set to "cookie:" in http request header. is a system private class.
Waits for pending operations to completed. {@hide}  Too late to release publically.
Remove all session cookies, which are cookies without expiration date
Remove all cookies
Return true if there are stored cookies.
Remove all expired cookies
Package level api, called from CookieSyncManager Flush all cookies managed by the Chrome HTTP stack to flash.
Whether cookies are accepted for file scheme URLs.
Sets whether cookies are accepted for file scheme URLs. Use of cookies with file scheme URLs is potentially insecure. Do not use this feature unless you can be sure that no unintentional sharing of cookie data can take place. <p> Note that calls to this method will have no effect if made after a WebView or CookieManager instance has been created.
Package level api, called from CookieSyncManager Get a list of cookies which are updated since a given time.
Package level api, called from CookieSyncManager Delete a Cookie in the RAM
Package level api, called from CookieSyncManager Called after a cookie is synced to FLASH
Package level api, called from CookieSyncManager Delete the least recent used domains if the total cookie count in RAM exceeds the limit
Extract the host and path out of a uri
Get the base domain for a give host. E.g. mail.google.com will return google.com
parseCookie() parses the cookieString which is a comma-separated list of one or more cookies in the format of "NAME=VALUE; expires=DATE; path=PATH; domain=DOMAIN_NAME; secure httponly" to a list of Cookies. Here is a sample: IGDND=1, IGPC=ET=UB8TSNwtDmQ:AF=0; expires=Sun, 17-Jan-2038 19:14:07 GMT; path=/ig; domain=.google.com, =, PREF=ID=408909b1b304593d:TM=1156459854:LM=1156459854:S=V-vCAU6Sh-gobCfO; expires=Sun, 17-Jan-2038 19:14:07 GMT; path=/; domain=.google.com which contains 3 cookies IGDND, IGPC, PREF and an empty cookie
Singleton access to a {@link CookieSyncManager}. An IllegalStateException will be thrown if {@link CookieSyncManager#createInstance(Context)} is not called before.
Create a singleton CookieSyncManager within a context
Package level api, called from CookieManager. Get all the cookies which matches a given base domain.
Package level api, called from CookieManager Clear all cookies in the database
Returns true if there are any saved cookies.
Package level api, called from CookieManager Clear all session cookies in the database
Package level api, called from CookieManager Clear all expired cookies in the database
Constructor uses the dataURL as the source for an InputStream
returned by Calendar.getTimeInMillis() date bin this date belongs to
Calcuate 12:00am by zeroing out hour, minute, second, millisecond
Sets whether the Page for this WebViewCore should use a mock DeviceOrientation client.
Set the position for the mock DeviceOrientation service for this WebViewCore.
We only provide accelerationIncludingGravity.
SensorEventListener implementation. Callbacks happen on the thread on which we registered - the WebCore thread.
Construct a FileLoader with the file URL specified as the content source.
Place text in the text field so it can be searched for.  Need to press the find next or find previous button to find all of the matches.
Set the WebView to search.  Must be non null, and set before calling startActionMode.
Move the highlight to the next match.
Highlight all the instances of the string from mEditText in mWebView.
Update the string which tells the user how many matches were found, and which match is currently highlighted. Not to be called when mNumberOfMatches is 0.
Issues the load request. Return value does not indicate if the load was successful or not. It simply indicates that the load request is reasonable.
This function is used by handleCache to setup a load from the byte stream in a CacheResult.
This function is used by the handleHTTPLoad to setup the cache headers correctly. Returns true if the response was handled from the cache
Add the static headers that don't change with each request.
Add the content related headers. These headers contain user private data and is not used when we are proxying an untrusted request.
Gets the singleton instance of the class.
Creates the UI message handler. Must be called on the UI thread.
Creates the message handler. Must be called on the WebKit thread.
Utility function to send a message to our handler.
Utility function to send a message to the handler on the UI thread
Gets the set of origins for which Geolocation permissions are stored. Note that we represent the origins as strings. These are created using WebCore::SecurityOrigin::toString(). As long as all 'HTML 5 modules' (Database, Geolocation etc) do so, it's safe to match up origins based on this string. Callback is a ValueCallback object whose onReceiveValue method will be called asynchronously with the set of origins.
Gets the permission state for the specified origin. Callback is a ValueCallback object whose onReceiveValue method will be called asynchronously with the permission state for the origin.
Clears the permission state for the specified origin. This method may be called before the WebKit thread has intialized the message handler. Messages will be queued until this time.
Allows the specified origin. This method may be called before the WebKit thread has intialized the message handler. Messages will be queued until this time.
Clears the permission state for all origins.
Start listening for location updates.
Stop listening for location updates.
Sets whether to use the GPS.
LocationListener implementation. Called when the location has changed.
LocationListener implementation. Called when the provider status changes.
LocationListener implementation. Called when the provider is enabled.
LocationListener implementation. Called when the provider is disabled.
Registers this object with the location service.
Unregisters this object from the location service.
Reports an error if neither the network nor the GPS provider is available.
Called only over JNI when WebKit is happy to destroy the media player.
common Video control FUNCTIONS:
Every time we start a new Video, we create a VideoView and a MediaPlayer
Listeners setup FUNCTIONS:
Normally called immediately after setVideoURI. But for full screen, this should be after surface holder created
Common code
Pause the play and update the play/pause button
Below are functions that are different implementation on inline and full- screen mode. Some are specific to one type, but currently are called directly from the proxy.
Every time webView setBaseLayer, this will be called. When we found the Video layer, then we set the Surface Texture to it. Otherwise, we may want to delete the Surface Texture to save memory.
When a WebView is paused, we also want to pause the video in it.
This is on the UI thread. When native tell Java to play, we need to check whether or not it is still the same video by using videoLayerId and treat it differently.
A bunch event listeners for our VideoView MediaPlayer.OnPreparedListener
Start the download. Called on WebCore thread.
Cancel the download if active and release the queue. Called on WebCore thread.
EventHandler methods. Executed on the network thread.
Tears down the poster bytes stream. Called on network thread.
Queue management methods. Called on WebCore thread.
Private constructor.
The public methods below are all called from WebKit only. Play a video stream.
Seek into the video stream.
Pause the playback.
Tear down this proxy object.
Load the poster image.
These three function are called from UI thread only by WebView.
The factory for HTML5VideoViewProxy instances.
(ie, if we did not fail trying to use them last time)
return true if the prompt dialog should be suppressed.
Creates a new HTTP authentication handler with an empty loader queue
Helper method used to unblock handleAuthRequest(), which in the case of a synchronous request will wait for proxy.onReceivedHttpAuthRequest() to call back to either proceed() or cancel(). been unblocked
Proceed with the authorization with the given credentials May be called on the UI thread, rather than the WebCore thread.
Cancel the authorization request May be called on the UI thread, rather than the WebCore thread.
Enqueues the loader, if the loader is the only element in the queue, starts processing the loader authentication request
Wait for the request in flight, if any, to complete
Process the next loader in the queue (helper method)
Informs the WebView of a new set of credentials.
Called by JNI. Gets the application's database directory, excluding the trailing slash.
Called by JNI. Gets the application's cache directory, excluding the trailing slash.
Called by JNI. Calculates the size of an input stream by reading it.
Called by JNI. TODO: Make all content loading use this instead of BrowserFrame.java
Returns true if we're using the Chromium HTTP stack. TODO: Remove this if/when we permanently switch to the Chromium HTTP stack http:/b/3118772
Handle a confirmation response from the user.
Handle the result if the user cancelled the dialog.
Wake up the WebCore thread.
Construct a new JWebCoreJavaBridge to interface with WebCore timers and cookies.
Call native timer callbacks.
called from JNI side
Pause all timers.
Resume all timers.
Store a cookie string associated with a url.
Retrieve the cookie string for the given url.
Returns whether cookies are enabled or not.
Returns an array of plugin directoies
Returns the path of the plugin data directory
Stop the shared timer.
Called on the WebCore thread through JNI.
Add data to the internal collection of data.
========================================================================= Public functions =========================================================================
We keep a count of refs to the nativeLoader so we do not create so many LoadListeners that the GREFs blow up
This message handler is to facilitate communication between the network thread and the browser thread.
Parse the headers sent from the server. IMPORTANT: as this is called from network thread, can't call native directly
Does the header parsing work on the WebCore thread.
Report the status of the response. TODO: Comments about each parameter. IMPORTANT: as this is called from network thread, can't call native directly
Handle the status callback on the WebCore thread.
Implementation of certificate handler for EventHandler. Called before a resource is requested. In this context, can be called multiple times if we have redirects IMPORTANT: as this is called from network thread, can't call native directly was not secure
Handle the certificate on the WebCore thread.
Implementation of error handler for EventHandler. Subclasses should call this method to have error fields set. IMPORTANT: as this is called from network thread, can't call native directly
Handle the error on the WebCore thread.
Add data to the internal collection of data. This function is used by the data: scheme, about: scheme and http/https schemes. IMPORTANT: as this is called from network thread, can't call native directly XXX: Unlike the other network thread methods, this method can do the work of decoding the data and appending it to the data builder.
Event handler's endData call. Send a message to the handler notifying them that the data has finished. IMPORTANT: as this is called from network thread, can't call native directly
Handle the end of data.
This method is called from CacheLoader when the initial request is serviced by the Cache.
Check the cache for the current URL, and load it if it is valid.
SSL certificate error callback. Handles SSL error(s) on the way up to the user. IMPORTANT: as this is called from network thread, can't call native directly
Handle the ssl error on the WebCore thread.
Returns true iff an HTTP authentication problem has occured (credentials invalid).
Handles SSL error(s) on the way down from the user (the user has already provided their feedback).
Uses user-supplied credentials to restart a request. If the credentials are null, cancel the request.
This is called when a request can be satisfied by the cache, however, the cache result could be a redirect. In this case we need to issue the network request.
This function is called from native WebCore code to notify this LoadListener that the content it is currently downloading should be saved to a file and not sent to WebCore.
This function is called from native WebCore code to find out if the given URL is in the cache, and if it can be used. This is just for forward/back navigation to a POST URL.
Reset the cancel flag. This is used when we are resuming a stopped download. To suspend a download, we cancel it. It can also be cancelled when it has run out of disk space. In this situation, the download can be resumed.
Return the size of the content being downloaded. This represents the full content size, even under the situation where the download has been resumed after interruption. @ return full content size
Commit the headers if the status code is not a redirect.
This commits the headers without checking the response status code.
Create a WebCore response object so that it can be used by nativeReceivedResponse or nativeRedirectedToUrl
Commit the load.  It should be ok to call repeatedly but only before tearDown is called.
Tear down the load. Subclasses should clean up any mess because of cancellation or errors during the load.
Helper for getting the error ID.
Return the error description.
Notify the loader we encountered an error.
Pause the load. For example, if a plugin is unable to accept more data, we pause reading from the request. Called directly from the WebCore thread.
Cancel a request. FIXME: This will only work if the request has yet to be handled. This is in no way guarenteed if requests are served in a separate thread. It also causes major problems if cancel is called during an EventHandler's method call.
Perform the actual redirection. This involves setting up the new URL, informing WebCore and then telling the Network to start loading again.
is no supported scheme in the header. If there are several valid schemes present, we pick the strongest one. If there are several schemes of the same strength, we pick the one that comes first.
If the content is a redirect or not modified we should not send any data into WebCore as that will cause it create a document with the data, then when we try to provide the real content, it will assert.
Sets the current URL associated with this load.
Guesses MIME type if one was not specified. Defaults to 'text/html'. In addition, tries to guess the MIME type based on the extension.
guess MIME type based on the file extension.
Either send a message to ourselves or queue the message if this is a synchronous load.
Cycle through our messages for synchronous loads.
Returns the file extension or an empty string iff there is no extension. This method is a convenience method for obtaining the extension of a url and has undefined results for other Strings.
Return true if the given MIME type has an entry in the map.
Return the MIME type for the given extension.
Static method called by jni.
Return true if the given extension has a registered MIME type.
Return the registered extension for the given MIME type. Note that some MIME types map to multiple extensions. This call will return the most common extension for the given MIME type.
If the given MIME type is null, or one of the "generic" types (text/plain or application/octet-stream) map it to a type that Android can deal with. If the given type is not generic, return it unchanged.
Get the singleton instance of MimeTypeMap.
Set the position for the mock Geolocation service.
Set the error for the mock Geolocation service.
Get the global instance of MockGeolocation.
If platform notifications are enabled, this should be called from onPause() or onStop()
Creates a new Network object. XXX: Must be created in the same thread as WebCore!!!!!
Request a url from either the network or the file system.
Get the proxy hostname.
Sets the proxy username. connecting through the proxy.
Sets the proxy password. connecting through the proxy.
Saves the state of network handlers (user SSL and HTTP-authentication preferences).
Restores the state of network handlers (user SSL and HTTP-authentication preferences).
Clears user SSL-error preference table.
Handles SSL error(s) on the way up to the user: the user must decide whether errors should be ignored or not.
Handles authentication requests on their way up to the user (the user must provide credentials). authentication request.
Performance probe
Pull leftover touch scroll distance into one of the edge glows as appropriate.
Set touch delta values indicating the current amount of overscroll.
Absorb leftover fling velocity into one of the edge glows as appropriate.
Draw the glow effect along the sides of the widget. mEdgeGlow* must be non-null.
Release all glows from any touch pulls in progress.
Logs given string if mResponseThreshold time passed between either instantiation or previous responseAlert call
Signal the WebCore thread to refresh its list of plugins. Use this if the directory contents of one of the plugin directories has been modified and needs its changes reflecting. May cause plugin load and/or unload.
Called by Javascript through the Java bridge.
Called by Javascript through the Java bridge.
This is used as a hackish alternative to javascript escaping. There appears to be no such functionality in the core framework.
Called by Javascript through the Java bridge.
We allow the decision to be re-used if it's for the same host and is for an error of equal or greater severity than this error.
Creates a new error handler with an empty loader queue.
Create a new error handler that will be passed to the client.
Saves this handler's state into a map.
Restores this handler's state from a map.
Clears SSL error preference table.
Handles requests from the network stack about whether to proceed with a load given an SSL error(s). We may ask the client what to do, or use a cached response.
Check the preference table to see if we already have a 'proceed' decision from the client for this host and for an error of equal or greater severity than the supplied error. If so, instruct the loader to proceed and return true. Otherwise return false.
Processes queued SSL-error confirmation requests in a tight loop while there is no need to ask the client.
Processes the next loader in the queue. following loader in the queue
Proceed with this load.
Cancel this load and all pending loads for the WebView that had the error.
Handles the response from the client about whether to proceed with this load. We save the response to be re-used in the future.
Constructor. Although this class calls the LoadListener, it only calls the EventHandler Interface methods. LoadListener concrete class is used to avoid the penality of calling an interface.
Calling this method starts the load of the content for this StreamLoader. This method simply creates a Handler in the current thread and posts a message to send the status and returns immediately.
Construct the headers and pass them to the EventHandler.
Read data from the stream and pass it to the EventHandler. If an error occurs reading the stream, then an error is sent to the EventHandler, and moves onto the next state - end of data.
Close the stream and inform the EventHandler that load is complete.
Cleans up (if possible) user-entered web addresses
Strips the url of the anchor.
Guesses canonical filename that a download would have, using the URL and contentDisposition. File extension, if not defined, is added based on the mimetype
Parse the Content-Disposition HTTP Header. The format of the header This header provides a filename for content that is going to be downloaded to the file system. We only support the attachment type. Note that RFC 2616 specifies the filename value must be double-quoted. Unfortunately some servers do not quote the value so to maintain consistent behaviour with other browsers, we allow unquoted values too.
This should only be called from the UI thread.
Construct a back/forward list used by clients of WebView.
Return the current history item. This method returns null if the list is empty.
Get the index of the current history item. This index can be used to directly index into the array list.
Get the history item at the given index. The index range is from 0...n where 0 is the first item and n is the last item.
Get the total size of the back/forward list.
Mark the back/forward list as having a pending clear. This is used on the UI side to mark the list as being invalid during the clearHistory method.
Return the status of the clear flag. This is used on the UI side to determine if the list is valid for checking things like canGoBack.
Add a new history item to the list. This will remove all items after the current item and append the new item to the end of the list. Called from the WebCore thread only. Synchronized because the UI thread may be reading the array or the current index.
Clear the back/forward list. Called from the WebCore thread.
Remove the item at the given index. Called by JNI only.
Clone the entire object to be used in the UI thread by clients of WebView. This creates a copy that should never be modified by any of the webkit package classes.
Set the new history index.
Request the host application to create a new Webview. The host application should handle placement of the new WebView in the view system. The default behavior returns null.
Tell the client to display a javascript alert dialog.  If the client returns true, WebView will assume that the client will handle the dialog.  If the client returns false, it will continue execution.
Tell the client to display a confirm dialog to the user. If the client returns true, WebView will assume that the client will handle the confirm dialog and call the appropriate JsResult method. If the client returns false, a default value of false will be returned to javascript. The default behavior is to return false.
Tell the client to display a prompt dialog to the user. If the client returns true, WebView will assume that the client will handle the prompt dialog and call the appropriate JsPromptResult method. If the client returns false, a default value of false will be returned to to javascript. The default behavior is to return false.
Tell the client to display a dialog to confirm navigation away from the current page. This is the result of the onbeforeunload javascript event. If the client returns true, WebView will assume that the client will handle the confirm dialog and call the appropriate JsResult method. If the client returns false, a default value of true will be returned to javascript to accept navigation away from the current page. The default behavior is to return false. Setting the JsResult to true will navigate away from the current page, false will cancel the navigation.
Tell the client that the database quota for the origin has been exceeded.
Tell the client that the Application Cache has exceeded its max size. in order for the last appcache operation to succeed. app cache size is available. This callback must always be executed at some point to ensure that the sleeping WebCore thread is woken up.
Tell the client that a JavaScript execution timeout has occured. And the client may decide whether or not to interrupt the execution. If the client returns true, the JavaScript will be interrupted. If the client returns false, the execution will continue. Note that in the case of continuing execution, the timeout counter will be reset, and the callback will continue to occur if the script does not finish at the next check point.
Report a JavaScript console message to the host application. The ChromeClient should override this to process the log message as they see fit.
When not playing, video elements are represented by a 'poster' image. The image to use can be specified by the poster attribute of the video tag in HTML. If the attribute is absent, then a default poster will be used. This method allows the ChromeClient to provide that default image. available.
When the user starts to playback a video element, it may take time for enough data to be buffered before the first frames can be rendered. While this buffering is taking place, the ChromeClient can use this function to provide a View to be displayed. For example, the ChromeClient could show a spinner animation.
Tell the client to open a file chooser.
Basic constructor that assigns a unique id to the item. Called by JNI only.
Construct a new WebHistoryItem with initial flattened data.
Construct a clone of a WebHistoryItem from the given item.
Return the url of this history item. The url is the base url of this history item. See getTargetUrl() for the url that is the actual target of this history item. Note: The VM ensures 32-bit atomic read/write operations so we don't have to synchronize this method.
Return the original url of this history item. This was the requested url, the final url may be different as there might have been redirects while loading the site.
Return the document title of this history item. Note: The VM ensures 32-bit atomic read/write operations so we don't have to synchronize this method.
Return the favicon of this history item or null if no favicon was found. Note: The VM ensures 32-bit atomic read/write operations so we don't have to synchronize this method.
Return the touch icon url. If no touch icon <link> tag was specified, returns <host>/apple-touch-icon.png. The DownloadTouchIcon class that attempts to retrieve the touch icon will handle the case where that file does not exist. An icon set by a <link> tag is always used in preference to an icon saved on the server.
Return the custom data provided by the client.
Set the custom data field.
Set the favicon. Note: The VM ensures 32-bit atomic read/write operations so we don't have to synchronize this method.
Set the touch icon url. Will not overwrite an icon that has been set already from a <link> tag, unless the new icon is precomposed.
Get the pre-flattened data. Note: The VM ensures 32-bit atomic read/write operations so we don't have to synchronize this method.
Inflate this item. Note: The VM ensures 32-bit atomic read/write operations so we don't have to synchronize this method.
Clone the history item for use by clients of WebView.
Called by jni when the item is updated
Called by WebCore thread to create the actual handler
Open a the icon database and store the icons in the given path.
Close the shared instance of the icon database.
Removes all the icons in the database.
Request the Bitmap representing the icon for the given page url. If the icon exists, the listener will be called with the result.
Retain the icon for the given page url.
Release the icon for the given page url.
Get the global instance of WebIconDatabase.
Create the internal handler and transfer all pending messages. XXX: Called by WebCore thread only!
Construct a response with the given mime type, encoding, and data.
Set the mime type of the response data (i.e. text/html).
Set the encoding of the response data (i.e. utf-8).  This will be used to decode the raw bytes from the input stream.
Set the input stream containing the data for this resource.
Send a message to the private queue or handler.
Package constructor to prevent clients from creating a new settings instance.
Looks at sLocale and returns current AcceptLanguage String.
Looks at sLocale and mContext and returns current UserAgent String.
Set whether the WebView supports zoom
Returns whether the WebView supports zoom
Sets whether the zoom mechanism built into WebView is used.
Returns true if the zoom mechanism built into WebView is being used.
Sets whether the on screen zoom buttons are used. A combination of built in zoom controls enabled and on screen zoom controls disabled allows for pinch to zoom to work without the on screen controls
Returns true if the on screen zoom buttons are being used.
Enable or disable file access within WebView. File access is enabled by default.  Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset and file:///android_res.
Returns true if this WebView supports file access.
Enable or disable content url access within WebView.  Content url access allows WebView to load content from a content provider installed in the system.  The default is enabled.
Returns true if this WebView supports content url access.
Set whether the WebView loads a page with overview mode.
Returns true if this WebView loads page with overview mode
Set whether the WebView will enable smooth transition while panning or zooming or while the window hosting the WebView does not have focus. If it is true, WebView will choose a solution to maximize the performance. e.g. the WebView's content may not be updated during the transition. If it is false, WebView will keep its fidelity. The default value is false.
Returns true if the WebView enables smooth transition while panning or zooming.
Store whether the WebView is saving form data.
Return whether the WebView is saving form data and displaying prior entries/autofill++.  Always false in private browsing mode.
Store whether the WebView is saving password.
Return whether the WebView is saving password.
Set the text zoom of the page in percent. Default is 100.
Get the text zoom of the page in percent.
Set the text size of the page.
Get the text size of the page. If the text size was previously specified in percent using {@link #setTextZoom(int)}, this will return the closest matching {@link TextSize}.
Set the double-tap zoom of the page in percent. Default is 100.
Get the double-tap zoom of the page in percent.
Set the default zoom density of the page. This should be called from UI thread.
Get the default zoom density of the page. This should be called from UI thread.
Enables using light touches to make a selection and activate mouseovers.
Returns true if light touches are enabled.
Tell the WebView to use the wide viewport
Tell the WebView whether it supports multiple windows. TRUE means
Set the standard font family name.
Get the standard font family name. The default is "sans-serif".
Set the fixed font family name.
Get the fixed font family name. The default is "monospace".
Set the sans-serif font family name.
Get the sans-serif font family name.
Set the serif font family name. The default is "sans-serif".
Get the serif font family name. The default is "serif".
Set the cursive font family name.
Get the cursive font family name. The default is "cursive".
Set the fantasy font family name.
Get the fantasy font family name. The default is "fantasy".
Set the minimum font size. Any number outside the specified range will be pinned.
Get the minimum font size. The default is 8.
Set the minimum logical font size. Any number outside the specified range will be pinned.
Get the minimum logical font size. The default is 8.
Set the default font size. Any number outside the specified range will be pinned.
Get the default font size. The default is 16.
Set the default fixed font size. Any number outside the specified range will be pinned.
Get the default fixed font size. The default is 16.
Set the number of pages cached by the WebKit for the history navigation.
Tell the WebView to load image resources automatically.
Return true if the WebView will load image resources automatically. The default is true.
Tell the WebView to block network images. This is only checked when {@link #getLoadsImagesAutomatically} is true. If you set the value to false, images will automatically be loaded. Use this api to reduce bandwidth only. Use {@link #setBlockNetworkLoads} if possible.
Return true if the WebView will block network images. The default is false.
Tell the WebView to block all network load requests. If you set the value to false, you must call {@link android.webkit.WebView#reload} to fetch remote resources. This flag supercedes the value passed to {@link #setBlockNetworkImage}.
Return true if the WebView will block all network loads. The default is false.
Tell the WebView to enable javascript execution.
Tell the WebView to use Skia's hardware accelerated rendering path
Tell the WebView to show the visual indicator
Tell the WebView to enable, disable, or have plugins on demand. On demand mode means that if a plugin exists that can handle the embedded content, a placeholder icon will be shown instead of the plugin. When the placeholder is clicked, the plugin will be enabled.
Set the path to where database storage API databases should be saved. Nota that the WebCore Database Tracker only allows the path to be set once. This will update WebCore when the Sync runs in the C++ side.
Set the path where the Geolocation permissions database should be saved. This will update WebCore when the Sync runs in the C++ side.
Tell the WebView to enable Application Caches API.
Set a custom path to the Application Caches files. The client must ensure it exists before this call. Caches files. The appCache path can be the empty string but should not be null. Passing null for this parameter will result in a no-op.
Set the maximum size for the Application Caches content.
Set whether the database storage API is enabled.
Set whether the DOM storage API is enabled.
Returns true if the DOM Storage API's are enabled.
Return the path to where database storage API databases are saved for the current WebView.
Returns true if database storage API is enabled.
Tell the WebView to enable WebWorkers API. Note that this flag only affects V8. JSC does not have an equivalent setting.
Sets whether Geolocation is enabled.
Sets whether XSS Auditor is enabled.
Return true if javascript is enabled. <b>Note: The default is false.</b>
Return the current plugin state.
Tell javascript to open windows automatically. This applies to the javascript function window.open().
Return true if javascript can open windows automatically. The default is false.
Set the default text encoding name to use when decoding html pages.
Get the default text encoding name. The default is "Latin-1".
Set the WebView's user-agent string. If the string "ua" is null or empty, it will use the system default user-agent string.
Return the WebView's user-agent string.
package api to grab the Accept Language string.
Tell the WebView whether it needs to set a node to have focus when {@link WebView#requestFocus(int, android.graphics.Rect)} is called.
Package api to get the choice whether it needs to set initial focus.
Set the priority of the Render thread. Unlike the other settings, this one only needs to be called once per process. The default is NORMAL.
Override the way the cache is used. The way the cache is used is based on the navigation option. For a normal page load, the cache is checked and content is re-validated as needed. When navigating back, content is not revalidated, instead the content is just pulled from the cache. This function allows the client to override this behavior.
Return the current setting for overriding the cache mode. For a full description, see the {@link #setCacheMode(int)} function.
If set, webkit alternately shrinks and expands images viewed outside of an HTML page to fit the screen. This conflicts with attempts by the UI to zoom in and out of an image, so it is set false by default. {@hide}
Specify the maximum decoded image size. The default is 2 megs for small memory devices and 8 megs for large memory devices.
Returns whether to use fixed viewport.  Use fixed viewport whenever wide viewport is on.
Returns whether private browsing is enabled.
Sets whether private browsing is enabled.
Returns whether the viewport metatag can disable zooming
Sets whether viewport metatag can disable zooming.
Transfer messages from the queue to the new WebCoreThread. Called from WebCore thread. package
Post a SYNC message to handle syncing the native settings.
An origin string is created using WebCore::SecurityOrigin::toString(). Note that WebCore::SecurityOrigin uses 0 (which is not printed) for the port if the port is the default for the protocol. Eg
Returns the quota for this origin's HTML5 database.
Returns the usage for this origin's HTML5 database.
Message handler, UI side
Message handler, webcore side
Returns a list of origins having a database. The Map is of type Map<String, Origin>.
Returns a list of origins having a database should only be called from WebViewCore.
Returns the use for a given origin
Returns the quota for a given origin
Set the quota for a given origin
Delete a given origin
Delete all databases
Sets the maximum size of the ApplicationCache. This should only ever be called on the WebKit thread.
Utility function to send a message to our handler
Get the global instance of WebStorage.
Post a Sync request
Run on the webcore thread set the local values with the current ones
sync() forces sync manager to sync now
resetSync() resets sync manager's timer
startSync() requests sync manager to start sync
stopSync() requests sync manager to stop sync. remove any SYNC_MESSAGE in the queue to break the sync loop
Create a new WebTextView.
Determine whether this WebTextView currently represents the node represented by ptr.
Ensure that the underlying text field/area is lined up with the WebTextView.
Remove this WebTextView from its host WebView, and return focus to the host.
Send the DOM events for the specified event.
Always use this instead of setAdapter, as this has features specific to the WebTextView.
Set the TextView so we can match its text size.
Sets the selection when the user clicks on a textfield or textarea with the trackball or center key, or starts typing into it without clicking on it.
Set the pointer for this node so it can be determined which node this WebTextView represents.
Determine the position and size of WebTextView, and add it to the WebView's view heirarchy.  All parameters are presumed to be in view coordinates.  Also requests Focus and sets the cursor to not request to be in view.
Set the selection, and disable our onSelectionChanged action.
Update the text size according to the size of the focus candidate's text size in mWebView.  Should only be called from mWebView.
Set the text to the new string, but use the old selection, making sure to keep it within the new string.
Called by WebView.rebuildWebTextView().  Based on the type of the <input> element, set up the WebTextView, its InputType, and IME Options properly.
Update the cache to reflect the current text.
Set the WebView to the transportation object.
Return the WebView object.
Construct a new WebView with a Context object.
Construct a new WebView with layout parameters.
Construct a new WebView with layout parameters and a default style.
Construct a new WebView with layout parameters, a default style and a set of custom Javscript interfaces to be added to the WebView at initialization time. This guarantees that these interfaces will be available when the JS context is initialized. object implementing those interfaces, as values.
Adds accessibility APIs to JavaScript. Note: This method is responsible to performing the necessary
Removes accessibility APIs from JavaScript.
Specify whether the horizontal scrollbar has overlay style.
Specify whether the vertical scrollbar has overlay style.
Return whether horizontal scrollbar has overlay style
Return whether vertical scrollbar has overlay style
Return the width of the view where the content of WebView should render to. Note: this can be called from WebCoreThread.
returns the height of the titlebarview (if any). Does not care about scrolling
Return the amount of the titlebarview (if any) that is visible
Return the height of the view where the content of WebView should render to.  Note that this excludes mTitleBar, if there is one. Note: this can be called from WebCoreThread.
there is no certificate (the site is not secure).
Sets the SSL certificate for the main top-level page.
Save the username and password for a particular host in the WebView's internal database.
Set the HTTP authentication credentials for a given host and realm.
Retrieve the HTTP authentication username and password for a given host & realm pair
Remove Find or Select ActionModes, if active.
Called to clear state when moving from one page to another, or changing in some other way that makes elements associated with the current page (such as WebTextView or ActionModes) no longer relevant.
Destroy the internal state of the WebView. This method should be called after the WebView has been removed from the view system. No other methods may be called on a WebView after destroy.
Sets JavaScript engine flags.
Inform WebView of the network state. This is used to set the JavaScript property window.navigator.isOnline and generates the online/offline event as specified in HTML5, sec. 5.7.7
Inform WebView about the current network type. {@hide}
Save the state of this WebView used in {@link android.app.Activity#onSaveInstanceState}. Please note that this method no longer stores the display data for this WebView. The previous behavior could potentially leak files if {@link #restoreState} was never called. See {@link #savePicture} and {@link #restorePicture} for saving and restoring the display data.
Saves the view data to the output stream. The output is highly version specific, and may not be able to be loaded by newer versions of WebView.
Loads the view data from the input stream. See {@link #saveViewState(OutputStream)} for more information.
Clears the view state set with {@link #loadViewState(InputStream)}. This WebView will then switch to showing the content from webkit
Restore the state of this WebView from the given map used in {@link android.app.Activity#onRestoreInstanceState}. This method should be called to restore the state of the WebView before using the object. If it is called after the WebView has had a chance to build state (load pages, create a back/forward list, etc.) there may be undesirable side-effects. Please note that this method no longer restores the display data for this WebView. See {@link #savePicture} and {@link #restorePicture} for saving and restoring the display data.
Load the given url with the extra headers.
Load the given url.
Load the url with postData using "POST" method into the WebView. If url is not a network url, it will be loaded with {link {@link #loadUrl(String)} instead.
Load the given data into the WebView using a 'data' scheme URL. <p> Note that JavaScript's same origin policy means that script running in a page loaded using this method will be unable to access content loaded using any scheme other than 'data', including 'http(s)'. To avoid this restriction, use {@link #loadDataWithBaseURL(String,String,String,String,String) loadDataWithBaseURL()} with an appropriate base URL. <p> If the value of the encoding parameter is 'base64', then the data must be encoded as base64. Otherwise, the data must use ASCII encoding for octets inside the range of safe URL characters and use the standard %xx hex encoding of URLs for octets outside that range. For example, '#', '%', '\', '?' should be replaced by %23, %25, %27, %3f respectively. <p> The 'data' scheme URL formed by this method uses the default US-ASCII charset. If you need need to set a different charset, you should form a 'data' scheme URL which explicitly specifies a charset parameter in the mediatype portion of the URL and call {@link #loadUrl(String)} instead. Note that the charset obtained from the mediatype portion of a data URL always overrides that specified in the HTML or XML document itself.
Load the given data into the WebView, using baseUrl as the base URL for the content. The base URL is used both to resolve relative URLs and when applying JavaScript's same origin policy. The historyUrl is used for the history entry. <p> Note that content specified in this way can access local device files (via 'file' scheme URLs) only if baseUrl specifies a scheme other than 'http', 'https', 'ftp', 'ftps', 'about' or 'javascript'. <p> If the base URL uses the data scheme, this method is equivalent to calling {@link #loadData(String,String,String) loadData()} and the historyUrl is ignored.
Saves the current view as a web archive.
package */ static class SaveWebArchiveMessage {
Stop the current load.
Reload the current url.
Return true if this WebView has a back history item.
Go back in the history of this WebView.
Return true if this WebView has a forward history item.
Go forward in the history of this WebView.
Return true if the page can go back or forward the given number of steps.
Go to the history item that is the number of steps away from the current item. Steps is negative if backward and positive if forward.
Returns true if private browsing is enabled in this WebView.
Scroll the contents of the view up by half the view size
Scroll the contents of the view down by half the page size
Clear the view so that onDraw() will draw nothing but white background, and onMeasure() will return 0 if MeasureSpec is not MeasureSpec.EXACTLY
Return a new picture that captures the current display of the webview. This is a copy of the display, and will be unaffected if the webview later loads a different URL.
Return true if the browser is displaying a TextView for text input.
Remove the WebTextView.
Return the current scale of the WebView
Called by JNI. Returns the scale to apply to the text selection handles
Return the reading level scale of the WebView
Set the initial scale for the WebView. 0 means default. If {@link WebSettings#getUseWideViewPort()} is true, it zooms out all the way. Otherwise it starts with 100%. If initial scale is greater than 0, WebView starts will this value as initial scale.
Invoke the graphical zoom picker widget for this WebView. This will result in the zoom widget appearing on the screen to control the zoom level of this WebView.
Return a HitTestResult based on the current cursor node. If a HTML::a tag is found and the anchor has a non-JavaScript url, the HitTestResult type is set to SRC_ANCHOR_TYPE and the url is set in the "extra" field. If the anchor does not have a url or if it is a JavaScript url, the type will be UNKNOWN_TYPE and the url has to be retrieved through {@link #requestFocusNodeHref} asynchronously. If a HTML::img tag is found, the HitTestResult type is set to IMAGE_TYPE and the url is set in the "extra" field. A type of SRC_IMAGE_ANCHOR_TYPE indicates an anchor with a url that has an image as a child node. If a phone number is found, the HitTestResult type is set to PHONE_TYPE and the phone number is set in the "extra" field of HitTestResult. If a map address is found, the HitTestResult type is set to GEO_TYPE and the address is set in the "extra" field of HitTestResult. If an email address is found, the HitTestResult type is set to EMAIL_TYPE and the email is set in the "extra" field of HitTestResult. Otherwise, HitTestResult type is set to UNKNOWN_TYPE.
Called by JNI when the DOM has changed the focus.  Clear the focus so that new keys will go to the newly focused field
Request the anchor or image element URL at the last tapped point. If hrefMsg is null, this method returns immediately and does not dispatch hrefMsg to its target. If the tapped point hits an image, an anchor, or an image in an anchor, the message associates strings in named keys in its data. The value paired with the key may be an empty string.
Request the url of the image last touched by the user. msg will be sent to its target with a String representing the url as its object.
Expects x in view coordinates
Expects y in view coordinates
Add or remove a title bar to be embedded into the WebView, and scroll along with it vertically, while remaining in view horizontally. Pass null to remove the title bar from the WebView, and return to drawing the WebView normally without translating to account for the title bar.
Set where to render the embedded title bar NO_GRAVITY at the top of the page TOP        at the top of the screen
Given a distance in view space, convert it to content space. Note: this does not reflect translation, just scaling, so this should not be called with coordinates, but should be called for dimensions like width or height.
Given an x coordinate in view space, convert it to content space.  Also may be used for absolute heights (such as for the WebTextView's textSize, which is unaffected by the height of the title bar).
Given a y coordinate in view space, convert it to content space. Takes into account the height of the title bar if there is one embedded into the WebView.
Given a x coordinate in view space, convert it to content space. Returns the result as a float.
Given a y coordinate in view space, convert it to content space. Takes into account the height of the title bar if there is one embedded into the WebView. Returns the result as a float.
Given a distance in content space, convert it to view space. Note: this does not reflect translation, just scaling, so this should not be called with coordinates, but should be called for dimensions like width or height.
Given an x coordinate in content space, convert it to view space.
Given a y coordinate in content space, convert it to view space.  Takes into account the height of the title bar.
Called by JNI to invalidate the View, given rectangle coordinates in content space
Called by JNI to invalidate the View after a delay, given rectangle coordinates in content space
stop the scroll animation, and don't let a subsequent fling add to the existing velocity
call from webcoreview.draw(), so we're still executing in the UI thread
Sets r to be the visible rectangle of our webview in view coordinates
Sets r to be our visible rectangle in content coordinates
Sets r to be our visible rectangle in content coordinates. We use this method on the native side to compute the position of the fixed layers. Uses floating coordinates (necessary to correctly place elements when the scale factor is not 1)
Compute unzoomed width and height, and if they differ from the last values we sent, send them to webkit (to be used as new viewport) or height has not changed since the last message
Update the double-tap zoom.
Get the url for the current page. This is not always the same as the url passed to WebViewClient.onPageStarted because although the load for that url has begun, the current page may not have changed.
Get the original url for the current page. This is not always the same as the url passed to WebViewClient.onPageStarted because although the load for that url has begun, the current page may not have changed. Also, there may have been redirects resulting in a different url to that originally requested.
Get the title for the current page. This is the title of the current page until WebViewClient.onReceivedTitle is called.
Get the favicon for the current page. This is the favicon of the current page until WebViewClient.onReceivedIcon is called.
Get the touch icon url for the apple-touch-icon <link> element, or a URL on this site's server pointing to the standard location of a touch icon.
Get the progress for the current page.
Pause all layout, parsing, and JavaScript timers for all webviews. This is a global requests, not restricted to just this webview. This can be useful if the application has been paused.
Resume all layout, parsing, and JavaScript timers for all webviews. This will resume dispatching all timers.
Call this to pause any extra processing associated with this WebView and its associated DOM, plugins, JavaScript etc. For example, if the WebView is taken offscreen, this could be called to reduce unnecessary CPU or network traffic. When the WebView is again "active", call onResume(). Note that this differs from pauseTimers(), which affects all WebViews.
Call this to resume a WebView after a previous call to onPause().
Returns true if the view is paused, meaning onPause() was called. Calling onResume() sets the paused state back to false.
Call this to inform the view that memory is low so that it can free any available memory.
Clear the resource cache. Note that the cache is per-application, so this will clear the cache for all WebViews used.
Make sure that clearing the form data removes the adapter from the currently focused textfield if there is one.
Tell the WebView to clear its internal back/forward list.
Clear the SSL preferences table stored in response to proceeding with SSL certificate errors.
Return the WebBackForwardList for this WebView. This contains the back/forward list for use in querying each item in the history stack. This is a copy of the private WebBackForwardList so it contains only a snapshot of the current state. Multiple calls to this method may return different objects. The object returned from this method will not be updated to reflect any new state.
Highlight and scroll to the next occurance of String in findAll. Wraps the page infinitely, and scrolls.  Must be called after calling findAll.
Find all instances of find on the page and highlight them.
Start an ActionMode for finding text in this WebView.  Only works if this
Toggle whether the find dialog is showing, for both native and Java.
Return the index of the currently highlighted match.
Return the first substring consisting of the address of a physical location. Currently, only addresses in the United States are detected, and consist of: - a house number - a street name - a street type (Road, Circle, etc), either spelled out or abbreviated - a city name - a state or territory, either spelled out or two-letter abbr. - an optional 5 digit or 9 digit zip code. All names must be correctly capitalized, and the zip code, if present, must be valid for the state. The street type must be a standard USPS spelling or abbreviation. The state or territory must also be spelled or abbreviated using USPS standards. The house number may not exceed five digits.
Return the first substring consisting of the address of a physical location. Currently, only addresses in the United States are detected, and consist of: - a house number - a street name - a street type (Road, Circle, etc), either spelled out or abbreviated - a city name - a state or territory, either spelled out or two-letter abbr. - an optional 5 digit or 9 digit zip code. Names are optionally capitalized, and the zip code, if present, must be valid for the state. The street type must be a standard USPS spelling or abbreviation. The state or territory must also be spelled or abbreviated using USPS standards. The house number may not exceed five digits.
Called when the find ActionMode ends.
Query the document to see if it contains any image references. The message object will be dispatched with arg1 being set to 1 if images were found and 0 if the document does not reference any images.
Request the scroller to abort any ongoing animation
helper to pin the scrollBy parameters (already in view coordinates) returns true if the scroll was changed
helper to pin the scrollTo parameters (already in view coordinates) returns true if the scroll was changed
Scale from content to view coordinates, and pin. Also called by jni webview.cpp
Called by CallbackProxy when the page starts loading.
Called by CallbackProxy when the page finishes loading.
This method injects accessibility in the loaded document if accessibility is enabled. If JavaScript is enabled we try to inject a URL specific script. If no URL specific script is found or JavaScript is disabled we fallback to the default {@link AccessibilityInjector} implementation. </p> If the URL has the "axs" paramter set to 1 it has already done the script injection so we do nothing. If the parameter is set to 0 the URL opts out accessibility script injection so we fall back to the default {@link AccessibilityInjector}. </p> Note: If the user has not opted-in the accessibility script injection no scripts are injected rather the default {@link AccessibilityInjector} implementation is used.
Ensures the instance of the {@link AccessibilityInjector} to be present ot not.
Gets the "axs" URL parameter value.
scale from content to view coordinates, and pin return true if pin caused the final x/y different than the request cx/cy, and a future scroll may reach the request cx/cy after our size has changed return false if the view scroll to the exact position as it is requested, where negative numbers are taken to mean 0
scale from content to view coordinates, and pin
These are from webkit, and are in content coordinate system (unzoomed)
Set the WebViewClient that will receive various notifications and requests. This will replace the current handler.
Gets the WebViewClient
Register the interface to be used when content can not be handled by the rendering engine, and should be downloaded instead. This will replace the current handler.
Set the chrome handler. This is an implementation of WebChromeClient for use in handling JavaScript dialogs, favicons, titles, and the progress. This will replace the current handler.
Gets the chrome handler.
Set the back/forward list client. This is an implementation of WebBackForwardListClient for handling new items and changes in the history index. {@hide}
Gets the WebBackForwardListClient. {@hide}
{@hide} FIXME: Debug only! Remove for SDK!
{@hide} FIXME: Debug only! Remove for SDK!
Use this function to bind an object to JavaScript so that the methods can be accessed from JavaScript. <p><strong>IMPORTANT:</strong> <ul> <li> Using addJavascriptInterface() allows JavaScript to control your application. This can be a very useful feature or a dangerous security issue. When the HTML in the WebView is untrustworthy (for example, part or all of the HTML is provided by some person or process), then an attacker could inject HTML that will execute your code and possibly any code of the attacker's choosing.<br> Do not use addJavascriptInterface() unless all of the HTML in this WebView was written by you.</li> <li> The Java object that is bound runs in another thread and not in the thread that it was constructed in.</li> </ul></p>
Removes a previously added JavaScript interface with the given name.
Return the WebSettings object used to control the settings for this WebView.
Draw the background when beyond bounds
Select the word at the last click point.
Select the word at the indicated content coordinates.
Check to see if the focused textfield/textarea is still on screen.  If it is, update the the dimensions and location of WebTextView.  Otherwise, remove the WebTextView.  Should be called when the zoom level changes.
Only check the flag, can be called from WebCore thread
Should only be called in UI thread
Delete text from start to end in the focused textfield. If there is no focus, or if start == end, silently fail.  If start and end are out of order, swap them.
Set the selection to (start, end) in the focused textfield. If start and end are out of order, swap them.
Called in response to a message from webkit telling us that the soft keyboard should be launched.
Called by WebKit to instruct the UI to hide the keyboard
This method checks the current focus and cursor and potentially rebuilds mWebTextView to have the appropriate properties, such as password, multiline, and what text it contains.  It also removes it if necessary.
Update the padding of mWebTextView based on the native textfield/textarea
Tell webkit to put the cursor on screen.
Called by WebTextView to find saved form data associated with the textfield
Pass a message to find out the <label> associated with the <input> identified by nodePointer
Dump the display tree to "/sdcard/displayTree.txt"
Dump the dom tree to adb shell if "toFile" is False, otherwise dump it to "/sdcard/domTree.txt"
Dump the render tree to adb shell if "toFile" is False, otherwise dump it to "/sdcard/renderTree.txt"
Called by DRT on UI thread, need to proxy to WebCore thread.
Called by DRT on WebCore thread.
Dump the V8 counters to standard output. Note that you need a build with V8 and WEBCORE_INSTRUMENTATION set to true. Otherwise, this will do nothing.
Enter selecting text mode, and see if CAB should be shown. Returns true if the WebView is now in selecting text mode (including if it was already in that mode, and this method did nothing).
Select all of the text in this WebView.
Called when the selection has been removed.
Copy the selection to the clipboard
Returns the currently highlighted text as a string.
Pass a message to WebCore Thread, telling the WebCore::Page's FocusController to be  "inactive" so that it will not draw the blinking cursor.  It gets set to "active" to draw the cursor in WebViewCore.cpp, when the WebCore thread receives key events/clicks.
See if there is a layer at x, y and switch to TOUCH_DRAG_LAYER_MODE if a layer is found.
Common code for single touch and multi-touch. (x, y) denotes current focus point, which is the touch point for single touch and the middle point for multi-touch.
Compute the maximum horizontal scroll position. Used by {@link OverScrollGlow}.
Compute the maximum vertical scroll position. Used by {@link OverScrollGlow}.
Return the overview scale of the WebView
Perform zoom in in the webview
Perform zoom out in the webview
This selects the best clickable target at mLastTouchX and mLastTouchY and calls showCursorTimed on the native side
Scroll the focused text field to match the WebTextView
Scroll the focused textarea vertically to match the WebTextView
Set our starting point and time for a drag from the WebTextView.
Given a motion event from the WebTextView, set its location to our coordinates, and handle the event.
Due a touch up from a WebTextView.  This will be handled by webkit to change the selection.
Called when pressing the center key or trackball on a textfield.
Returns plugin bounds if x/y in content coordinates corresponds to a plugin. Otherwise a NULL rectangle is returned.
Return true if the rect (e.g. plugin) is fully visible and maximized inside the WebView.
Maximize and center the rectangle, specified in the document coordinate space, inside the WebView. If the zoom doesn't need to be changed, do an animated scroll to center it. If the zoom needs to be changed, find the zoom center and do a smooth zoom transition. The rect is in document coordinates
Called by JNI to handle a touch on a node representing an email address, address, or phone number
Allow events with any currently missing sequence numbers to be skipped in processing.
Add a TouchEventData to the pre-queue. An event in the pre-queue is an event that we know about that has been sent to webkit, but that we haven't received back and enqueued into the normal touch queue yet. If webkit ever times out and we need to ignore currently missing events, we'll run events from the pre-queue to patch the holes.
Reset the touch event queue. This will dump any pending events and reset the sequence numbering.
Return the next valid sequence number for tagging incoming touch events.
Enqueue a touch event in the form of TouchEventData. The sequence number will be read from the mSequence field of the argument. If the touch event's sequence number is the next in line to be processed, it will be handled before this method returns. Any subsequent events that have already been queued will also be processed in their proper order.
Enqueue a touch event in the form of a MotionEvent from the framework. If the touch event's sequence number is the next in line to be processed, it will be handled before this method returns. Any subsequent events that have already been queued will also be processed in their proper order.
Used when receiving messages for REQUEST_KEYBOARD_WITH_SELECTION_MSG_ID and UPDATE_TEXT_SELECTION_MSG_ID.  Update the selection of WebTextView.
Create a new observer.
Request a dropdown menu for a listbox with multiple selection.
Request a dropdown menu for a listbox with single selection or a single <select> element.
called by JNI
called by JNI
Called by JNI to send a message to the webcore thread that the user touched the webpage.
Called by JNI to invalidate view
Pass the key directly to the page.  This assumes that nativePageShouldHandleShiftAndArrows() returned true.
return true if the key was handled
Draw the HTML page into the specified canvas. This call ignores any view-specific zoom, scroll offset, or other changes. It does not draw any view-specific chrome, such as progress or URL bars.
Enable the communication b/t the webView and VideoViewProxy
Set the time to wait between passing touches to WebCore. See also the TOUCH_SENT_INTERVAL member for further discussion.
Update our cache with updatedText.
Begin collecting per-tile profiling data
Return per-tile profiling data
Helper method to deal with differences between hardware and software rendering
Give the host application a chance to take over the control when a new url is about to be loaded in the current WebView. If WebViewClient is not provided, by default WebView will ask Activity Manager to choose the proper handler for the url. If WebViewClient is provided, return true means the host application handles the url, while return false means the current WebView handles the url.
Notify the host application of a resource request and allow the application to return the data.  If the return value is null, the WebView will continue to load the resource as usual.  Otherwise, the return response and data will be used.  NOTE: This method is called by the network thread so clients should exercise caution when accessing private data.
Report an error to the host application. These errors are unrecoverable (i.e. the main resource is unavailable). The errorCode parameter corresponds to one of the ERROR_* constants.
As the host application if the browser should resend data as the requested page was a result of a POST. The default is to not resend the data.
Notify the host application to update its visited links database.
Notify the host application that an SSL error occurred while loading a resource. The host application must call either handler.cancel() or handler.proceed(). Note that the decision may be retained for use in response to future SSL errors. The default behavior is to cancel the load.
Notify the host application to handle a SSL client certificate request (display the request to the user and ask whether to proceed with a client certificate or not). The host application has to call either handler.cancel() or handler.proceed() as the connection is suspended and waiting for the response. The default behavior is to cancel, returning no client certificate.
Notify the host application to handle an authentication request. The default behavior is to cancel the request.
Give the host application a chance to handle the key event synchronously. e.g. menu shortcut key events need to be filtered this way. If return true, WebView will not handle the key event. If return false, WebView will always handle the key event, so none of the super in the view chain will see the key event. The default behavior returns false.
Notify the host application that a request to automatically log in the user has been processed.
The thread name used to identify the WebCore thread and for use in debugging other classes that require operation within the WebCore thread. package */ static final String THREAD_NAME = "WebViewCoreThread";
Initialize private data within the WebCore thread.
Handle the initialization of WebViewCore during subwindow creation. This method is called from the WebCore thread but it is called before the INITIALIZE message can be handled.
Get the BrowserFrame component. This is used for subwindow creation and is called only from BrowserFrame in the WebCore thread.
Causes all timers to pause. This applies to all WebViews in the current app process.
Resume all timers. This applies to all WebViews in the current process.
Given mimeType, check whether it's supported in Android media framework. mimeType could be such as "audio/ogg" and "video/mp4".
Add an error message to the client's console.
Invoke a javascript alert.
Called by JNI.  Send a message to the UI thread to hide the soft keyboard if the node pointed to by nodePointer is still in focus.
Called by JNI.  Open a file chooser to upload a file.
Notify the browser that the origin has exceeded it's database quota.
Notify the browser that the appcache has exceeded its max size. in order for the last appcache operation to succeed.
Shows a prompt to ask the user to set the Geolocation permission state for the given origin.
Hides the Geolocation permissions prompt.
Invoke a javascript confirm dialog.
Invoke a javascript prompt dialog.
Invoke a javascript before unload dialog.
Callback to notify that a JavaScript execution timeout has occured.
Notify the webview that this is an installable web app.
Notify the webview that we want to display the video layer fullscreen.
Transfer all messages to the newly created webcore thread handler.
Send a message internally to the queue or to the handler
Send a message internally to the front of the queue.
Remove all the messages.
Block sending messages to the EventHub.
------------------------------------------------------------------------- Methods called by host activity (in the same thread) -------------------------------------------------------------------------
Sends a DESTROY message to WebCore. Called from UI thread.
------------------------------------------------------------------------- WebViewCore private methods -------------------------------------------------------------------------
notify webkit that our virtual view size changed size (after inv-zoom)
Calculate width to be used in webkit window.
Utility method for exceededDatabaseQuota and reachedMaxAppCacheSize callbacks. Computes the sum of database quota for all origins.
called from UI thread
Only update the layers' content, not the base surface PictureSet.
called from JNI or WebView thread
called from JNI
called by JNI
called by JNI
Called by JNI. The coordinates are in doc coordinates, so they need to
Called by the WebView thread
Gets the WebView corresponding to this WebViewCore. Note that the WebView object must only be used on the UI thread.
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI
called by JNI. PluginWidget function to launch a full-screen view using a View object provided by the plugin class.
called by JNI
called by JNI.  PluginWidget functions for creating an embedded View for the surface drawing model.
called by JNI
called by JNI
Wait for the background initialization thread to complete and check the database creation status.
Get cookies in the format of CookieManager.Cookie inside an ArrayList for a given domain
Delete cookies which matches (domain, path, name).
Add a cookie to the database
Whether there is any cookies in the database
Clear cookie database
Clear session cookies, which means cookie doesn't have EXPIRES.
Clear expired cookies
only called from WebViewWorkerThread
only called from WebViewWorkerThread
Get a cache item.
Remove a cache item.
Add or update a cache. CACHE_URL_COL is unique in the table.
Clear cache database
Set password. Tuple (PASSWORD_HOST_COL, PASSWORD_USERNAME_COL) is unique.
Retrieve the username and password for a given host
Find out if there are any passwords saved.
Clear password database
Set HTTP authentication password. Tuple (HTTPAUTH_HOST_COL, HTTPAUTH_REALM_COL, HTTPAUTH_USERNAME_COL) is unique.
Retrieve the HTTP authentication username and password for a given host+realm pair
Find out if there are any HTTP authentication passwords saved.
Clear HTTP authentication password database
Set form data for a site. Tuple (FORMDATA_URLID_COL, FORMDATA_NAME_COL, FORMDATA_VALUE_COL) is unique
Get all the values for a form entry with "name" in a given site
Find out if there is form data saved.
Clear form database
Gets the WebView.
Initialize both the default and actual zoom scale to the given density. for the Density Independent Pixel unit, where one DIP is one pixel on an approximately 160 dpi screen (see android.util.DisplayMetrics.density).
Update the default zoom scale using the given density. It will also reset the current min and max zoom scales to the default boundaries as well as ensure that the actual scale falls within those boundaries. for the Density Independent Pixel unit, where one DIP is one pixel on an approximately 160 dpi screen (see android.util.DisplayMetrics.density).
Returns the zoom scale used for reading text on a double-tap.
returns TRUE if zoom out succeeds and FALSE if no zoom changes.
Initiates an animated zoom of the WebView.
This method is called by the WebView's drawing code when a fixed length zoom animation is occurring. Its purpose is to animate the zooming of the canvas to the desired scale which was specified in startZoomAnimation(...). A fixed length animation begins when startZoomAnimation(...) is called and continues until the ZOOM_ANIMATION_LENGTH time has elapsed. During that interval each time the WebView draws it calls this function which is responsible for generating the animation. Additionally, the WebView can check to see if such an animation is currently in progress by calling isFixedLengthAnimationInProgress().
The double tap gesture can result in different behaviors depending on the content that is tapped. (1) PLUGINS: If the taps occur on a plugin then we maximize the plugin on the screen. If the plugin is already maximized then zoom the user into overview mode. (2) HTML/OTHER: If the taps occur outside a plugin then the following heuristic is used. A. If the current text wrap scale differs from newly calculated and the B. If the page is not in overview mode then change to overview mode. C. If the page is in overmode then change to the default scale.
Notifies the caller that the ZoomManager is requesting that scale related updates should not be sent to webkit. This can occur in cases where the ZoomManager is performing an animation and does not want webkit to update until the animation is complete.
If the user moves the fingers but keeps the same distance between them, we should do panning only.
Updates zoom values when Webkit produces a new picture. This method should only be called from the UI thread's message handler.
Set up correct zoom overview width based on different settings.
Updates zoom values after Webkit completes the initial page layout. It is called when visiting a page for the first time as well as when the user navigates back to a page (in which case we may need to restore the zoom levels to the state they were when you left the page). This method should only be called from the UI thread's message handler.
The embedded zoom control intercepts touch events and automatically stays visible. The external control needs to constantly refresh its internal timer to stay visible.
OnPageFinished called by webview when a page is fully loaded.
Returns the number of items currently selected. This will only be valid if the choice mode is not {@link #CHOICE_MODE_NONE} (default). <p>To determine the specific items that are currently selected, use one of the <code>getChecked*</code> methods.
Returns the set of checked items ids. The result is only valid if the choice mode has not been set to {@link #CHOICE_MODE_NONE} and the adapter has stable IDs. ({@link ListAdapter#hasStableIds()} == {@code true})
Clear any choices previously set
Sets the checked state of the specified position. The is only valid if the choice mode has been set to {@link #CHOICE_MODE_SINGLE} or {@link #CHOICE_MODE_MULTIPLE}.
Defines the choice behavior for the List. By default, Lists do not have any choice behavior ({@link #CHOICE_MODE_NONE}). By setting the choiceMode to {@link #CHOICE_MODE_SINGLE}, the List allows up to one item to  be in a chosen state. By setting the choiceMode to {@link #CHOICE_MODE_MULTIPLE}, the list allows any number of items to be chosen. {@link #CHOICE_MODE_MULTIPLE}
Set a {@link MultiChoiceModeListener} that will manage the lifecycle of the selection {@link ActionMode}. Only used when the choice mode is set to {@link #CHOICE_MODE_MULTIPLE_MODAL}.
Enables fast scrolling by letting the user quickly scroll through lists by dragging the fast scroll thumb. The adapter attached to the list may want to implement {@link SectionIndexer} if it wishes to display alphabet preview and jump between sections of the list.
Set whether or not the fast scroller should always be shown in place of the standard scrollbars. Fast scrollers shown in this way will not fade out and will be a permanent fixture within the list. Best combined with an inset scroll bar style that will ensure enough padding. This will enable fast scrolling if it is not already enabled.
Returns true if the fast scroller is set to always show on this view rather than fade out when not in use.
Enables or disables the type filter window. If enabled, typing when this view has focus will filter the children to match the users input. Note that the {@link Adapter} used by this view must implement the {@link Filterable} interface.
Constructor called from {@link AbsListView#onSaveInstanceState()}
Sets the initial value for the text filter.
Returns the list's text filter, if available.
Sets the selector state to "pressed" and posts a CheckForKeyLongPress to see if this is a long press.
Sets a scale factor for the fling velocity. The initial scale factor is 1.0.
Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed <code>offset</code> pixels from the top edge of the view. If this is impossible, (e.g. the offset would scroll the first or last item beyond the boundaries of the list) it will get as close as possible. The scroll will take <code>duration</code> milliseconds to complete.
Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed <code>offset</code> pixels from the top edge of the view. If this is impossible, (e.g. the offset would scroll the first or last item beyond the boundaries of the list) it will get as close as possible.
Allows RemoteViews to scroll relatively to a position.
Track a motion scroll
If there is a selection returns false. Otherwise resurrects the selection and returns true if resurrected.
Attempt to bring the selection back if the user is switching from touch to trackball mode
Removes the filter window
Shows the filter window
Sends a key to the text filter window
Creates the window for the text filter and populates it with an EditText field;
Clear the text filter.
Returns if the ListView currently has a text filter.
For our text watcher that is associated with the text filter. Performs the actual filtering as the text changes, and takes care of hiding and showing the popup displaying the currently entered filter text.
When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background. Zero means that what's behind this object is translucent (non solid) or is not made of a single color. This hint will not affect any existing background drawable set on this view ( typically set via {@link #setBackgroundDrawable(Drawable)}).
Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService through the specified intent.
This defers a notifyDataSetChanged on the pending RemoteViewsAdapter if it has not connected yet.
Called back when the adapter connects to the RemoteViewsService.
Called back when the adapter disconnects from the RemoteViewsService.
Creates a new set of layout parameters with the specified width, height and location.
Creates a new set of layout parameters. The values are extracted from the supplied attributes set and context. The XML attributes mapped to this set of layout parameters are: <ul> <li><code>layout_x</code>: the X location of the child</li> <li><code>layout_y</code>: the Y location of the child</li> <li>All the XML attributes from {@link android.view.ViewGroup.LayoutParams}</li> </ul>
Sets the thumb that will be drawn at the end of the progress meter within the SeekBar. <p> If the thumb is a valid drawable (i.e. not null), half its width will be used as the new thumb offset (@see #setThumbOffset(int)).
Sets the thumb offset that allows the thumb to extend out of the range of the track.
Sets the amount of progress changed via the arrow keys.
Returns the amount of progress changed via the arrow keys. <p> By default, this will be a value that is derived from the max progress.
Tries to claim the user's drag motion, and requests disallowing any ancestors from stealing events in the drag.
This is called when the user has started touching this widget.
This is called when the user either releases his touch or the touch is canceled.
Prunes historical records for a package that goes away.
Initialize this {@link AdapterViewAnimator}
This method is used by subclasses to configure the animator to display the desired number of views, and specify the offset
This class should be overridden by subclasses to customize view transitions within the set of visible views
Returns the index of the currently displayed child view.
Manually shows the next child.
Manually shows the previous child.
Get the view at this index relative to the current window's start
This method can be overridden so that subclasses can provide a custom frame in which their children can live. For example, StackView adds padding to its childrens' frames so as to accomodate for the highlight effect.
Shows only the specified child. The other displays Views exit the screen, optionally with the with the {@link #getOutAnimation() out animation} and the specified child enters the screen, optionally with the {@link #getInAnimation() in animation}.
Constructor called from {@link AdapterViewAnimator#onSaveInstanceState()}
Returns the View corresponding to the currently displayed child.
Returns the current animation used to animate a View that enters the screen.
Specifies the animation used to animate a View that enters the screen.
Returns the current animation used to animate a View that exits the screen.
Specifies the animation used to animate a View that exit the screen.
Indicates whether the current View should be animated the first time the ViewAnimation is displayed.
Called by an {@link android.appwidget.AppWidgetHost} in order to advance the current view when it is being used within an app widget.
How long to wait before flipping to the next view
Start a timer to cycle through child views
No more flips
Internal method to start or stop dispatching flip {@link Message} based on {@link #mRunning} and {@link #mVisible} state.
Returns true if the child views are flipping.
Set if this view automatically calls {@link #startFlipping()} when it becomes attached to a window.
Returns true if this view automatically calls {@link #startFlipping()} when it becomes attached to a window.
Constructs the indexer.
Returns the section array constructed from the alphabet provided in the constructor.
Sets a new cursor as the data set and resets the cache of indices.
Default implementation compares the first character of word with letter.
Performs a binary search or cache lookup to find the first row that matches a given section's starting letter. For instance, if searching for "T" and no "T" is found, then the first row starting with "U" or any higher letter is returned. If there is no data following "T" at all, then the list size is returned.
Returns the section index for a given position in the list by querying the item and comparing it with all items in the section array.
Utility to retrieve a view displaying a single permission.
Canonicalizes the group description before it is displayed to the user. TODO check for internationalization issues remove trailing '.' in str1
Utility method that concatenates two strings defined by mPermFormat. a null value is returned if both str1 and str2 are null, if one of the strings is null the other non null value is returned without formatting this is to placate initial error checks
Utility method that displays permissions from a map containing group name and list of permission descriptions.
Utility method that aggregates all permission descriptions categorized by group Say group1 has perm11, perm12, perm13, the group description will be perm11_Desc, perm12_Desc, perm13_Desc
Adds the specified object at the end of the array.
Adds the specified Collection at the end of the array.
Adds the specified items at the end of the array.
Inserts the specified object at the specified index in the array.
Removes the specified object from the array.
Sorts the content of this adapter using the specified comparator.
Control whether methods that change the list ({@link #add}, {@link #insert}, {@link #remove}, {@link #clear}) automatically call {@link #notifyDataSetChanged}.  If set to false, caller must manually call notifyDataSetChanged() to have the changes reflected in the attached view. The default is true, and calling notifyDataSetChanged() resets the flag to true.
Returns the context associated with this array adapter. The context is used to create views from the resource passed to the constructor.
Returns the position of the specified item in the array.
<p>Sets the layout resource to create the drop down views.</p>
Creates a new ArrayAdapter from external resources. The content of the array is obtained through {@link android.content.res.Resources#getTextArray(int)}.
Private hook into the on click event, dispatched from {@link PassThroughClickListener}
<p>Sets the optional hint text that is displayed at the bottom of the the matching list.  This can be used as a cue to the user on how to best use the list, or to provide extra information.</p>
<p>Returns the current width for the auto-complete drop down list. This can be a fixed width, or {@link ViewGroup.LayoutParams#MATCH_PARENT} to fill the screen, or {@link ViewGroup.LayoutParams#WRAP_CONTENT} to fit the width of its anchor view.</p>
<p>Sets the current width for the auto-complete drop down list. This can be a fixed width, or {@link ViewGroup.LayoutParams#MATCH_PARENT} to fill the screen, or {@link ViewGroup.LayoutParams#WRAP_CONTENT} to fit the width of its anchor view.</p>
<p>Returns the current height for the auto-complete drop down list. This can be a fixed height, or {@link ViewGroup.LayoutParams#MATCH_PARENT} to fill the screen, or {@link ViewGroup.LayoutParams#WRAP_CONTENT} to fit the height of the drop down's content.</p>
<p>Sets the current height for the auto-complete drop down list. This can be a fixed height, or {@link ViewGroup.LayoutParams#MATCH_PARENT} to fill the screen, or {@link ViewGroup.LayoutParams#WRAP_CONTENT} to fit the height of the drop down's content.</p>
<p>Returns the id for the view that the auto-complete drop down list is anchored to.</p>
<p>Sets the view to which the auto-complete drop down list should anchor. The view corresponding to this id will not be loaded until the next time it is needed to avoid loading a view which is not yet instantiated.</p>
<p>Gets the background of the auto-complete drop-down list.</p>
<p>Sets the background of the auto-complete drop-down list.</p>
<p>Sets the background of the auto-complete drop-down list.</p>
<p>Sets the vertical offset used for the auto-complete drop-down list.</p>
<p>Gets the vertical offset used for the auto-complete drop-down list.</p>
<p>Sets the horizontal offset used for the auto-complete drop-down list.</p>
<p>Gets the horizontal offset used for the auto-complete drop-down list.</p>
<p>Sets the animation style of the auto-complete drop-down list.</p> <p>If the drop-down is showing, calling this method will take effect only the next time the drop-down is shown.</p>
<p>Returns the animation style that is used when the drop-down list appears and disappears </p>
Sets whether the drop-down should remain visible as long as there is there is {@link #enoughToFilter()}.  This is useful if an unknown number of results are expected to show up in the adapter sometime in the future. The drop-down will occupy the entire screen below {@link #getDropDownAnchor} regardless of the size or content of the list.  {@link #getDropDownBackground()} will fill any space that is not used by the list.
Checks whether the drop-down is dismissed when a suggestion is clicked.
Sets whether the drop-down is dismissed when a suggestion is clicked. This is true by default.
<p>Returns the number of characters the user must type before the drop down list is shown.</p>
<p>Specifies the minimum number of characters the user has to type in the edit box before the drop down list is shown.</p> <p>When <code>threshold</code> is less than or equals 0, a threshold of 1 is applied.</p>
<p>Sets the listener that will be notified when the user clicks an item in the drop down list.</p>
<p>Sets the listener that will be notified when the user selects an item in the drop down list.</p>
<p>Returns the listener that is notified whenever the user clicks an item in the drop down list.</p>
<p>Returns the listener that is notified whenever the user selects an item in the drop down list.</p>
<p>Returns a filterable list adapter used for auto completion.</p>
<p>Changes the list of data used for auto completion. The provided list must be a filterable list adapter.</p> <p>The caller is still responsible for managing any resources used by the adapter. Notably, when the AutoCompleteTextView is closed or released, the adapter is not notified. A common case is the use of {@link android.widget.CursorAdapter}, which contains a {@link android.database.Cursor} that must be closed.  This can be done automatically (see {@link android.app.Activity#startManagingCursor(android.database.Cursor) startManagingCursor()}), or by manually closing the cursor when the AutoCompleteTextView is dismissed.</p>
Returns <code>true</code> if the amount of text in the field meets or exceeds the {@link #getThreshold} requirement.  You can override this to impose a different standard for when filtering will be triggered.
<p>Indicates whether the popup menu is showing.</p>
<p>Converts the selected item from the drop down list into a sequence of character that can be used in the edit box.</p>
<p>Clear the list selection.  This may only be temporary, as user input will often bring it back.
Set the position of the dropdown view selection.
Get the position of the dropdown view selection, if there is one.  Returns {@link ListView#INVALID_POSITION ListView.INVALID_POSITION} if there is no dropdown or if there is no selection. {@link ListView#INVALID_POSITION ListView.INVALID_POSITION} if not.
<p>Performs the text completion by converting the selected item from the drop down list into a string, replacing the text box's content with this string and finally dismissing the drop down menu.</p>
Identifies whether the view is currently performing a text completion, so subclasses can decide whether to respond to text changed events.
Like {@link #setText(CharSequence)}, except that it can disable filtering.
<p>Performs the text completion by replacing the current text by the selected item. Subclasses should override this method to avoid replacing the whole content of the edit box.</p>
<p>Closes the drop down if present on screen.</p>
Issues a runnable to show the dropdown as soon as possible.
Ensures that the drop down is not obscuring the IME. the background.
<p>Displays the drop down on screen.</p>
Sets the validator used to perform text validation.
Returns the Validator set with {@link #setValidator}, or <code>null</code> if it was not set.
If a validator was set on this view and the current string is not valid, ask the validator to fix it.
Returns the Filter obtained from {@link Filterable#getFilter}, or <code>null</code> if {@link #setAdapter} was not called with a Filterable.
Notifies the attached observers that the underlying data is no longer valid or available. Once invoked this adapter is no longer valid and should not report further data set changes.
Override this method if you foresee a clash in IDs based on this scheme: <p> Base implementation returns a long: <li> bit 0: Whether this ID points to a child (unset) or group (set), so for this method <li> bit 1-31: Lower 31 bits of the groupId <li> bit 32-63: Lower 32 bits of the childId. <p> {@inheritDoc}
Override this method if you foresee a clash in IDs based on this scheme: <p> Base implementation returns a long: <li> bit 0: Whether this ID points to a child (unset) or group (set), so for this method <li> bit 1-31: Lower 31 bits of the groupId <li> bit 32-63: Lower 32 bits of the childId. <p> {@inheritDoc}
Gets the minimal date supported by this {@link CalendarView} in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone. <p> Note: The default minimal date is 01/01/1900. <p>
Sets the minimal date supported by this {@link CalendarView} in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone.
Gets the maximal date supported by this {@link CalendarView} in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone. <p> Note: The default maximal date is 01/01/2100. <p>
Sets the maximal date supported by this {@link CalendarView} in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone.
Sets whether to show the week number.
Gets whether to show the week number.
Gets the first day of week.
Sets the first day of week.
Sets the listener to be notified upon selected date change.
Gets the selected date in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone.
Sets the selected date in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone.
Sets the current locale.
Creates a new adapter if necessary and sets up its parameters.
Sets up the strings to be used by the header.
Sets all the required fields for the list view.
Parses the given <code>date</code> and in case of success sets the result to the <code>outDate</code>.
Called when a <code>view</code> transitions to a new <code>scrollState </code>.
Updates the title and selected month if the <code>view</code> has moved to a new month.
Set up the gesture detector and selected time
Changes which month is in focus and updates the view.
Maintains the same hour/min/sec but moves the day to the tapped day.
Initializes this week view.
Sets up the text and style properties for painting.
Returns the month of the first day in this week.
Returns the month of the last day in this week
Returns the first day in this view.
Calculates the day that the given x position is in, accounting for week number.
This draws the selection highlight if a day is selected in this week.
Draws the week and month day numbers for this week.
Draws a horizontal line for separating the weeks.
Draws the selected date bars if this week has a selected day.
This calculates the positions for the selected day lines.
<p>Changes the checked state of this text view.</p>
Set the checkmark to a given Drawable, identified by its resourece id. This will be drawn when {@link #isChecked()} is true.
Set the checkmark to a given Drawable. This will be drawn when {@link #isChecked()} is true.
Initialize this Chronometer object. Sets the base to the current time.
Initialize with standard view layout information. Sets the base to the current time.
Initialize with standard view layout information and style. Sets the base to the current time.
Return the base time as set through {@link #setBase}.
Returns the current format string as set through {@link #setFormat}.
Sets the listener to be called when the chronometer changes.
Start counting up.  This does not affect the base as set from {@link #setBase}, just the view display. Chronometer works by regularly scheduling messages to the handler, even when the Widget is not visible.  To make sure resource leaks do not occur, the user should make sure that each start() call has a reciprocal call to {@link #stop}.
Stop counting up.  This does not affect the base as set from {@link #setBase}, just the view display. This stops the messages to the handler, effectively releasing resources that would be held as the chronometer is running, via {@link #start}.
<p>Changes the checked state of this button.</p>
Register a callback to be invoked when the checked state of this button changes.
Register a callback to be invoked when the checked state of this button changes. This callback is used for internal purpose only.
Set the background to a given Drawable, identified by its resource id.
Set the background to a given Drawable
Constructor. The adapter will call {@link Cursor#requery()} on the cursor whenever it changes so that the most recent data is always displayed.
Gets the cursor helper for the children in the given group.
Sets the group Cursor. it will be closed.
Sets the children Cursor for a particular group. If there is an existing cursor it will be closed. <p> This is useful when asynchronously querying to prevent blocking the UI.
Notifies a data set change, but with the option of not releasing any cached cursors.
Deactivates the Cursor and removes the helper from cache.
Gets the minimal date supported by this {@link DatePicker} in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone. <p> Note: The default minimal date is 01/01/1900. <p>
Sets the minimal date supported by this {@link NumberPicker} in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone.
Gets the maximal date supported by this {@link DatePicker} in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone. <p> Note: The default maximal date is 12/31/2100. <p>
Sets the maximal date supported by this {@link DatePicker} in milliseconds since January 1, 1970 00:00:00 in {@link TimeZone#getDefault()} time zone.
Gets whether the {@link CalendarView} is shown.
Gets the {@link CalendarView}.
Sets whether the {@link CalendarView} is shown.
Gets whether the spinners are shown.
Sets whether the spinners are shown.
Reorders the spinners according to the date format that is explicitly set by the user and if no such is set fall back to the current locale's default format.
Updates the current date.
Initialize the state. If the provided values designate an inconsistent date the values are normalized before updating the spinners.
Parses the given <code>date</code> and in case of success sets the result to the <code>outDate</code>.
Updates the calendar view with the current date.
Notifies the listener, if such, for a change in the selected date.
Sets the IME options for a spinner based on its ordering.
Change the mode of the widget.
Clears both the digits and the filter text.
Pulls 12/24 mode from system settings
the user have to press the second digit?
Report to this manager that a digit was pressed.
Construct a new EdgeEffect with a theme appropriate for the provided context.
Reports if this EdgeEffect's animation is finished. If this method returns false after a call to {@link #draw(Canvas)} the host widget should schedule another drawing pass to continue the animation.
A view should call this when content is pulled away from an edge by the user. This will update the state of the current visual effect and its associated animation. The host view should always {@link android.view.View#invalidate()} after this and draw the results accordingly.
Call when the object is released after being pulled. This will begin the "decay" phase of the effect. After calling this method the host view should {@link android.view.View#invalidate()} and thereby draw the results accordingly.
Convenience for {@link Selection#setSelection(Spannable, int, int)}.
Convenience for {@link Selection#setSelection(Spannable, int)}.
Convenience for {@link Selection#selectAll}.
Convenience for {@link Selection#extendSelection}.
Constructs the connector
Point to the {@link ExpandableListAdapter} that will give us data/Views
Translates a flat list position to either a) group pos if the specified flat list position corresponds to a group, or b) child pos if it corresponds to a child.  Performs a binary search on the expanded groups list to find the flat list pos if it is an exp group, otherwise finds where the flat list pos fits in between the exp groups.
Translates either a group pos or a child pos (+ group it belongs to) to a flat list position.  If searching for a child and its group is not expanded, this will return null since the child isn't being shown in the ListView, and hence it has no position.
Collapse a group in the grouped list view
Expand a group in the grouped list view
Set the maximum number of groups that can be expanded at any given time
Searches the expandable list adapter for a group position matching the given group ID. The search starts at the given seed position and then alternates between moving up and moving down until 1) we find the right position, or 2) we run out of time, or 3) we have looked at every position
Checks whether the group referred to in this object is expanded, or not (at the time this object was created)
Gets the indicator for the item at the given position. If the indicator is stateful, the state will be given to the indicator.
Sets the drawable that will be drawn adjacent to every child in the list. This will be drawn using the same height as the normal divider ({@link #setDivider(Drawable)}) or if it does not have an intrinsic height, the height set by {@link #setDividerHeight(int)}.
Sets the adapter that provides data to this view.
Gets the adapter that provides data to this view.
Converts an absolute item flat position into a group/child flat position, shifting according to the number of header items.
Converts a group/child flat position into an absolute flat position, that takes into account the possible headers.
This will either expand/collapse groups (if a group was clicked) or pass on the click to the proper child (if a child was clicked)
Converts a flat list position (the raw position of an item (child or group) in the list) to an group and/or child position (represented in a packed position). This is useful in situations where the caller needs to use the underlying {@link ListView}'s methods. Use {@link ExpandableListView#getPackedPositionType} , {@link ExpandableListView#getPackedPositionChild}, {@link ExpandableListView#getPackedPositionGroup} to unpack.
Converts a group and/or child position to a flat list position. This is useful in situations where the caller needs to use the underlying {@link ListView}'s methods.
Gets the position of the currently selected group or child (along with its type). Can return {@link #PACKED_POSITION_VALUE_NULL} if no selection.
Gets the ID of the currently selected group or child. Can return -1 if no selection.
Gets the type of a packed position. See {@link #getPackedPositionForChild(int, int)}.
Gets the group position from a packed position. See {@link #getPackedPositionForChild(int, int)}.
Gets the child position from a packed position that is of {@link #PACKED_POSITION_TYPE_CHILD} type (use {@link #getPackedPositionType(long)}). To get the group that this child belongs to, use {@link #getPackedPositionGroup(long)}. See {@link #getPackedPositionForChild(int, int)}.
Returns the packed position representation of a child's position. <p> In general, a packed position should be used in situations where the position given to/returned from an {@link ExpandableListAdapter} or {@link ExpandableListView} method can either be a child or group. The two positions are packed into a single long which can be unpacked using {@link #getPackedPositionChild(long)}, {@link #getPackedPositionGroup(long)}, and {@link #getPackedPositionType(long)}.
Returns the packed position representation of a group's position. See {@link #getPackedPositionForChild(int, int)}.
Gets the ID of the group or child at the given <code>position</code>. This is useful since there is no ListAdapter ID -> ExpandableListAdapter ID conversion mechanism (in some cases, it isn't possible).
Sets the indicator to be drawn next to a child.
Sets the drawing bounds for the child indicator. For either, you can specify {@link #CHILD_INDICATOR_INHERIT} to use inherit from the general indicator's bounds.
Sets the indicator to be drawn next to a group.
Sets the drawing bounds for the indicators (at minimum, the group indicator is affected by this; the child indicator is affected by this if the child indicator bounds are set to inherit).
Constructor called from {@link ExpandableListView#onSaveInstanceState()}
<p>Creates a new asynchronous filter.</p>
Provide an interface that decides how long to delay the message for a given query.  Useful for heuristics such as posting a delay for the delete key to avoid doing any work while the user holds down the delete key.
<p>Starts an asynchronous filtering operation. Calling this method cancels all previous non-executed filtering requests and posts a new filtering request that will be executed later.</p>
<p>Starts an asynchronous filtering operation. Calling this method cancels all previous non-executed filtering requests and posts a new filtering request that will be executed later.</p> <p>Upon completion, the listener is notified.</p>
<p>Converts a value from the filtered set into a CharSequence. Subclasses should override this method to convert their results. The default implementation returns an empty String for null values or the default String representation of the value.</p>
<p>Handles filtering requests by calling {@link Filter#performFiltering} and then sending a message with the results to the results handler.</p>
Determines whether all children, or just those in the VISIBLE or INVISIBLE state, are considered when measuring.
Sets mSuppressSelectionChanged = false. This is used to set it to false in the future. It will also trigger a selection changed.
Whether or not to callback on any {@link #getOnItemSelectedListener()} while the items are being flinged. If false, only the final selected item will cause the callback. If true, all items between the first and the final will cause callbacks.
Whether or not to callback when an item that is not selected is clicked. If false, the item will become selected (and re-centered). If true, the {@link #getOnItemClickListener()} will get the callback.
Sets how long the transition animation should run when a child view changes position. Only relevant if animation is turned on.
Sets the spacing between items in a Gallery
Sets the alpha of items that are not selected in the Gallery.
Tracks a motion scroll. In reality, this is used to do just about any movement to items (touch scroll, arrow-key scroll, set an item as selected).
Offset the horizontal location of all children of this view by the specified number of pixels.
Detaches children that are off the screen (i.e.: Gallery bounds).
Scrolls the items so that the selected item is in its 'slot' (its center is the gallery's center).
Looks for the child that is closest to the center and sets it as the selected child.
Obtain a view, either by pulling an existing view from the recycler or by getting a new one from the adapter. If we are animating, make sure there is enough information in the view's layout parameters to animate from the old to new positions.
Helper for makeAndAddView to set the position of a view and fill out its layout parameters.
Figure out vertical placement based on mGravity
Called when a touch event's action is MotionEvent.ACTION_UP.
Called when a touch event's action is MotionEvent.ACTION_CANCEL.
Unused methods from GestureDetector.OnGestureListener above
Describes how the child views are aligned.
Orientation is used only to generate default row/column indices when they are not specified by a component's layout parameters. <p> The default value of this property is {@link #HORIZONTAL}.
Describes how the child views are positioned. Default is {@code LEFT | BASELINE}. See {@link android.view.Gravity}.
Return a Spec, {@code spec}, where: <ul> </ul>
Layout during a scroll that results from tracking motion events. Places the mMotionPosition view at the offset specified by mMotionViewTop, and then build surrounding views from there.
Fills the grid based on positioning the new selection at a specific location. The selection may be moved so that it does not intersect the faded edges. The grid is then filled upwards and downwards from there.
Calculate the bottom-most pixel we can draw the selection into
Calculate the top-most pixel we can draw the selection into
Move all views upwards so the selected row does not interesect the bottom fading edge (if necessary).
Move all views upwards so the selected row does not interesect the top fading edge (if necessary).
Fills the grid based on positioning the new selection relative to the old selection. The new selection will be placed at, above, or below the location of the new selection depending on how the selection is moving. The selection will then be pinned to the visible part of the screen, excluding the edges that are faded. The grid is then filled upwards and downwards from there.
Obtain the view and add it to our list of children. The view can be made fresh, converted from an unused view, or used as is if it was in the recycle bin.
Scrolls up or down by the number of items currently present on screen.
Go to the last or first item if possible.
Scrolls to the next or previous item, horizontally or vertically.
Goes to the next or previous item according to the order set by the adapter.
Is childIndex a candidate for next focus given the direction the focus change is coming from?
Describes how the child views are horizontally aligned. Defaults to Gravity.LEFT
Set the amount of horizontal (x) spacing to place between each item in the grid. in pixels.
Set the amount of vertical (y) spacing to place between each item in the grid. in pixels.
Control how items are stretched to fill their space. {@link #STRETCH_SPACING}, {@link #STRETCH_SPACING_UNIFORM}, or {@link #STRETCH_COLUMN_WIDTH}.
Set the width of columns in the grid.
Set the number of columns in the grid
Indicates whether this HorizontalScrollView's content is stretched to fill the viewport.
Indicates this HorizontalScrollView whether it should stretch its content width to fill the viewport or not.
<p> Finds the next focusable component that fits in this View's bounds (excluding fading edges) pretending that this View's left is located at the parameter left. </p>
<p>Handles scrolling in response to a "page up/down" shortcut press. This method will scroll the view by one page left or right and give the focus to the leftmost/rightmost component in the new visible area. If no component is a good candidate for focus, this scrollview reclaims the focus.</p>
<p>Handles scrolling in response to a "home/end" shortcut press. This method will scroll the view to the left or right and give the focus to the leftmost/rightmost component in the new visible area. If no component is a good candidate for focus, this scrollview reclaims the focus.</p>
<p>Scrolls the view to make the area defined by <code>left</code> and <code>right</code> visible. This method attempts to give the focus to a component visible in this area. If no component can be focused in the new visible area, the focus is reclaimed by this scrollview.</p>
Handle scrolling in response to a left or right arrow click.
Smooth scroll by a X delta
Compute the amount to scroll in the X direction in order to get a rectangle completely on the screen (or, if taller than the screen, at least the first screen size chunk of it).
Return the view's drawable, or null if no drawable has been
Sets a drawable as the content of this ImageView.
Return the current scale type in use by this ImageView.
Return the view's optional matrix. This is applied to the
<p>Set the offset of the widget's text baseline from the widget's top boundary.  This value is overridden by the {@link #setBaselineAlignBottom(boolean)} property.</p>
Set whether to set the baseline of this view to the bottom of the view. Setting this value overrides any calls to setBaseline.
Return whether this view's baseline will be considered the bottom of the view.
Set a tinting option for the image. {@link PorterDuff.Mode#SRC_ATOP}
Apply an arbitrary colorfilter to the image.
Should the layout be a column or a row. value is HORIZONTAL.
Returns the animation style that will be used when the popup window is shown or dismissed.
Sets the popup's anchor view. This popup will always be positioned relative to the anchor view when shown.
Put mSelectedPosition in the middle of the screen and then build up and down from there. This method forces mSelectedPosition to the center.
Once the selected view as been placed, fill up the visible area above and below it.
Fills the list based on positioning the new selection relative to the old selection. The new selection will be placed at, above, or below the location of the new selection depending on how the selection is moving. The selection will then be pinned to the visible part of the screen, excluding the edges that are faded. The list is then filled upwards and downwards from there.
Sets the selected item and positions the selection y pixels from the top edge of the ListView. (If in touch mode, the item will not be selected but it will still be positioned appropriately.)
setSelectionAfterHeaderView set the selection to be the first list item after the header views.
To avoid horizontal focus searches changing the selected item, we manually focus search within the selected item (as applicable), and prevent focus from jumping to something within another item.
Scrolls to the next or previous item if possible.
Handle an arrow scroll going up or down.  Take into account whether items are selectable, whether there are focusable items etc.
When selection changes, it is possible that the previously selected or the next selected item will change its size.  If so, we need to offset some folks, and re-layout the items as appropriate. should be <code>null</code> if there was no previous selection.
Re-measure a child, and if its height changes, lay it out preserving its top, and adjust the children below it appropriately.
Measure a particular list child. TODO: unify with setUpChild.
Layout a child that has been measured, preserving its top position. TODO: unify with setUpChild.
Determine how much we need to scroll in order to get the next selected view visible, with a fading edge showing below as applicable.  The amount is capped at {@link #getMaxScrollAmount()} .
How {@link android.widget.ListView#arrowScrollFocused} returns its values.
Do an arrow scroll based on focus searching.  If a new view is given focus, return the selection delta and amount to scroll via an {@link ArrowScrollFocusResult}, otherwise, return null.
Return true if child is an ancestor of parent, (or equal to the parent).
Determine how much we need to scroll in order to get newFocus in view. needs to be taken into account when actually scrolling.
Determine the distance to the nearest edge of a view in a particular direction.
(non-Javadoc) Look in the passed in list of headers or footers for the view.
(non-Javadoc) Look in the passed in list of headers or footers for the view with the tag.
(non-Javadoc) Look in the passed in list of headers or footers for the first view that matches the predicate.
Allocate and initialize the static parts of mDecorLayoutParams. Must also call updateFloatingWindowLayout() to fill in the dynamic parts (y and width) before mDecorLayoutParams can be used.
Update the dynamic parts of mDecorLayoutParams Must be called with mAnchor != NULL.
Set the view that acts as the anchor for the control view. This can for example be a VideoView, or your Activity's main view.
Create the view that holds the widgets that control playback. Derived classes can override this to create their own.
Show the controller on screen. It will go away automatically after 3 seconds of inactivity.
Show the controller on screen. It will go away automatically after 'timeout' milliseconds of inactivity. the controller until hide() is called.
Remove the controller from the screen.
There are two scenarios that can trigger the seekbar listener to trigger: The first is the user using the touchpad to adjust the posititon of the seekbar's thumb. In this case onStartTrackingTouch is called followed by a number of onProgressChanged notifications, concluded by onStopTrackingTouch. We're setting the field "mDragging" to true for the duration of the dragging session to avoid jumps in the position in case of ongoing playback. The second scenario involves the user operating the scroll ball, in this case there WON'T BE onStartTrackingTouch/onStopTrackingTouch notifications, we will simply apply the updated position without suspending regular updates.
Sets the Tokenizer that will be used to determine the relevant range of the text where the user is typing.
<p>Starts filtering the content of the drop down list. The filtering pattern is the specified range of text from the edit box. Subclasses may override this method to filter with a different pattern, for instance a smaller substring of <code>text</code>.</p>
Use a custom NumberPicker formatting callback to use two-digit minutes strings like "01". Keeping a static formatter etc. is the most efficient way to do this; it avoids creating temporary objects on every call to format().
Create a new number picker.
Create a new number picker
Sets the listener to be notified on change of the current value.
Set listener to be notified for scroll state changes.
Set the formatter to be used for formatting the current value. <p> Note: If you have provided alternative values for the values this formatter is never invoked. </p>
Set the current value for the number picker. <p> If the argument is less than the {@link NumberPicker#getMinValue()} and {@link NumberPicker#getWrapSelectorWheel()} is <code>false</code> the current value is set to the {@link NumberPicker#getMinValue()} value. </p> <p> If the argument is less than the {@link NumberPicker#getMinValue()} and {@link NumberPicker#getWrapSelectorWheel()} is <code>true</code> the current value is set to the {@link NumberPicker#getMaxValue()} value. </p> <p> If the argument is less than the {@link NumberPicker#getMaxValue()} and {@link NumberPicker#getWrapSelectorWheel()} is <code>false</code> the current value is set to the {@link NumberPicker#getMaxValue()} value. </p> <p> If the argument is less than the {@link NumberPicker#getMaxValue()} and {@link NumberPicker#getWrapSelectorWheel()} is <code>true</code> the current value is set to the {@link NumberPicker#getMinValue()} value. </p>
Gets whether the selector wheel wraps when reaching the min/max value.
Sets whether the selector wheel shown during flinging/scrolling should wrap around the {@link NumberPicker#getMinValue()} and {@link NumberPicker#getMaxValue()} values. <p> By default if the range (max - min) is more than five (the number of items shown on the selector wheel) the selector wheel wrapping is enabled. </p>
Sets the speed at which the numbers be incremented and decremented when the up and down buttons are long pressed respectively. <p> The default value is 300 ms. </p>
Returns the value of the picker.
Returns the min value of the picker.
Sets the min value of the picker.
Returns the max value of the picker.
Sets the max value of the picker.
Gets the values to be displayed instead of string values.
Sets the values to be displayed.
Resets the selector indices and clear the cached string representation of these indices.
Sets the current value of this NumberPicker, and sets mPrevious to the previous value. If current is greater than mEnd less than mStart, the value of mCurrent is wrapped around. Subclasses can override this to change the wrapping behavior
Changes the current value by one which is increment or decrement based on the passes argument.
Ensures that if we are in the process of changing the current value by one via scrolling the scroller gets to its final state and the value is updated.
Called via reflection
Sets the <code>selectorWheelState</code>.
Callback invoked upon completion of a given <code>scroller</code>.
Handles transition to a given <code>scrollState</code>
Flings the selector with the given <code>velocityY</code>.
Hides the input controls which is the up/down arrows and the text field.
Show the input controls by making them visible and animating the alpha property up/down arrows.
Fade the selector wheel via an animation.
Updates the visibility state of the increment and decrement buttons.
Increments the <code>selectorIndices</code> whose string representations will be displayed in the selector.
Decrements the <code>selectorIndices</code> whose string representations will be displayed in the selector.
Ensures we have a cached string representation of the given <code> selectorIndex</code> to avoid multiple instantiations of the same string.
Updates the view of this NumberPicker. If displayValues were specified in the string corresponding to the index specified by the current value will be returned. Otherwise, the formatter specified in {@link #setFormatter} will be used to format the number.
Notifies the listener, if registered, of a change of the value of this NumberPicker.
Posts a command for changing the current value by one.
Removes all pending callback from the message queue.
Posts an {@link SetSelectionCommand} from the given <code>selectionStart </code> to <code>selectionEnd</code>.
Posts an {@link AdjustScrollerCommand} within the given <code> delayMillis</code>
XXX This doesn't allow for range limits when controlled by a soft input method!
Creates an OverScroller with a viscous fluid scroll interpolator and flywheel.
Creates an OverScroller with flywheel enabled. be used.
Creates an OverScroller. be used.
Creates an OverScroller with flywheel enabled. be used. velocity which is preserved in the bounce when the horizontal edge is reached. A null value means no bounce. This behavior is no longer supported and this coefficient has no effect. behavior is no longer supported and this coefficient has no effect. !deprecated Use {!link #OverScroller(Context, Interpolator, boolean)} instead.
Creates an OverScroller. be used. velocity which is preserved in the bounce when the horizontal edge is reached. A null value means no bounce. This behavior is no longer supported and this coefficient has no effect. behavior is no longer supported and this coefficient has no effect. !deprecated Use {!link OverScroller(Context, Interpolator, boolean)} instead.
Force the finished field to a particular value. Contrary to {@link #abortAnimation()}, forcing the animation to finished does NOT cause the scroller to move to the final x and y position.
Returns the absolute value of the current velocity.
Call this when you want to know the new location. If it returns true, the animation is not yet finished.
Start scrolling based on a fling gesture. The distance traveled will depend on the initial velocity of the fling.
Stops the animation. Contrary to {@link #forceFinished(boolean)}, aborting the animating causes the scroller to move to the final x and y positions.
Get a signed deceleration that will reduce the velocity.
Modifies mDuration to the duration it takes to get from start to newFinal using the spline interpolation. The previous duration was needed to get to oldFinal.
Returns the duration, expressed in milliseconds
Update the current position and velocity for current time. Returns true if update has been done and false if animation duration has been reached.
<p>Create a new empty, non focusable popup window of dimension (0,0).</p> <p>The popup does provide a background.</p>
<p>Create a new, empty, non focusable popup window of dimension (0,0).</p> <p>The popup does not provide a background.</p>
<p>Create a new empty, non focusable popup window of dimension (0,0).</p> <p>The popup does not provide any background. This should be handled by the content view.</p>
<p>Create a new non focusable popup window which can display the <tt>contentView</tt>. The dimension of the window are (0,0).</p> <p>The popup does not provide any background. This should be handled by the content view.</p>
<p>Create a new empty, non focusable popup window. The dimension of the window must be passed to this constructor.</p> <p>The popup does not provide any background. This should be handled by the content view.</p>
<p>Create a new non focusable popup window which can display the <tt>contentView</tt>. The dimension of the window must be passed to this constructor.</p> <p>The popup does not provide any background. This should be handled by the content view.</p>
<p>Create a new popup window which can display the <tt>contentView</tt>. The dimension of the window must be passed to this constructor.</p> <p>The popup does not provide any background. This should be handled by the content view.</p>
<p>Return the drawable used as the popup window's background.</p>
<p>Change the background drawable for this popup window. The background can be set to null.</p>
<p>Return the animation style to use the popup appears and disappears</p>
Set the flag on popup to ignore cheek press eventt; by default this flag is set to false which means the pop wont ignore cheek press dispatch events. <p>If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the {@link #update()} methods.</p>
<p>Change the animation style resource for this popup.</p> <p>If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the {@link #update()} methods.</p>
<p>Return the view used as the content of the popup window.</p>
<p>Change the popup's content. The content is represented by an instance of {@link android.view.View}.</p> <p>This method has no effect if called when the popup is showing.</p>
Set a callback for all touch events being dispatched to the popup window.
<p>Indicate whether the popup window can grab the focus.</p>
<p>Changes the focusability of the popup window. When focusable, the window will grab the focus from the current focused widget if the popup contains a focusable {@link android.view.View}.  By default a popup window is not focusable.</p> <p>If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the {@link #update()} methods.</p>
Control how the popup operates with an input method: one of {@link #INPUT_METHOD_FROM_FOCUSABLE}, {@link #INPUT_METHOD_NEEDED}, or {@link #INPUT_METHOD_NOT_NEEDED}. <p>If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the {@link #update()} methods.</p>
<p>Indicates whether the popup window receives touch events.</p>
<p>Changes the touchability of the popup window. When touchable, the window will receive touch events, otherwise touch events will go to the window below it. By default the window is touchable.</p> <p>If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the {@link #update()} methods.</p>
<p>Indicates whether the popup window will be informed of touch events outside of its window.</p>
<p>Controls whether the pop-up will be informed of touch events outside of its window.  This only makes sense for pop-ups that are touchable but not focusable, which means touches outside of the window will be delivered to the window behind.  The default is false.</p> <p>If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the {@link #update()} methods.</p> touch events, false otherwise
<p>Indicates whether clipping of the popup window is enabled.</p>
<p>Allows the popup window to extend beyond the bounds of the screen. By default the window is clipped to the screen boundaries. Setting this to false will allow windows to be accurately positioned.</p> <p>If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the {@link #update()} methods.</p>
Clip this popup window to the screen, but not to the containing window.
Allow PopupWindow to scroll the anchor's parent to provide more room for the popup. Enabled by default.
<p>Indicates whether the popup window supports splitting touches.</p>
<p>Allows the popup window to split touches across other windows that also support split touch.  When this flag is false, the first pointer that goes down determines the window to which all subsequent touches go until all pointers go up.  When this flag is true, each pointer (not necessarily the first) that goes down determines the window to which all subsequent touches of that pointer will go until that pointer goes up thereby enabling touches with multiple pointers to be split across multiple windows.</p>
<p>Indicates whether the popup window will be forced into using absolute screen coordinates for positioning.</p>
<p>Allows the popup window to force the flag {@link WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN}, overriding default behavior. This will cause the popup to be positioned in absolute screen coordinates.</p>
Allows the popup window to force the flag {@link WindowManager.LayoutParams#FLAG_LAYOUT_INSET_DECOR}, overriding default behavior. This will cause the popup to inset its content to account for system windows overlaying the screen, such as the status bar. <p>This will often be combined with {@link #setLayoutInScreenEnabled(boolean)}.
Set the layout type for this window. Should be one of the TYPE constants defined in {@link WindowManager.LayoutParams}.
Set whether this window is touch modal or if outside touches will be sent to other windows behind it.
<p>Change the width and height measure specs that are given to the window manager by the popup.  By default these are 0, meaning that the current width or height is requested as an explicit size from the window manager.  You can supply {@link ViewGroup.LayoutParams#WRAP_CONTENT} or {@link ViewGroup.LayoutParams#MATCH_PARENT} to have that measure spec supplied instead, replacing the absolute width and height that has been set in the popup.</p> <p>If the popup is showing, calling this method will take effect only the next time the popup is shown.</p> {@link ViewGroup.LayoutParams#WRAP_CONTENT}, {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute width. {@link ViewGroup.LayoutParams#WRAP_CONTENT}, {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute height.
<p>Return this popup's height MeasureSpec</p>
<p>Change the popup's height MeasureSpec</p> <p>If the popup is showing, calling this method will take effect only the next time the popup is shown.</p>
<p>Return this popup's width MeasureSpec</p>
<p>Change the popup's width MeasureSpec</p> <p>If the popup is showing, calling this method will take effect only the next time the popup is shown.</p>
<p>Indicate whether this popup window is showing on screen.</p>
<p> Display the content view in a popup window at the specified location. If the popup window cannot fit on screen, it will be clipped. See {@link android.view.WindowManager.LayoutParams} for more information on how gravity and the x and y parameters are related. Specifying a gravity of {@link android.view.Gravity#NO_GRAVITY} is similar to specifying <code>Gravity.LEFT | Gravity.TOP</code>. </p>
Display the content view in a popup window at the specified location.
<p>Display the content view in a popup window anchored to the bottom-left corner of the anchor view. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view.</p>
Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom). The value returned by this method is meaningful only after {@link #showAsDropDown(android.view.View)} or {@link #showAsDropDown(android.view.View, int, int)} was invoked.
<p>Prepare the popup by embedding in into a new ViewGroup if the background drawable is not null. If embedding is required, the layout parameters' height is mnodified to take into account the background's padding.</p>
<p>Invoke the popup window by adding the content view to the window manager.</p> <p>The content view must be non-null when this method is invoked.</p>
<p>Generate the layout parameters for the popup window.</p>
<p>Positions the popup window on screen. When the popup window is too tall to fit under the anchor, a parent scroll view is seeked and scrolled up to reclaim space. If scrolling is not possible or not enough, the popup window gets moved on top of the anchor.</p> <p>The height must have been set on the layout parameters prior to calling this method.</p>
Returns the maximum height that is available for the popup to be completely shown. It is recommended that this height be the maximum for the popup's height, otherwise it is possible that the popup will be clipped.
Returns the maximum height that is available for the popup to be completely shown, optionally ignoring any bottom decorations such as the input method. It is recommended that this height be the maximum for the popup's height, otherwise it is possible that the popup will be clipped.
<p>Dispose of the popup window. This method can be invoked only after {@link #showAsDropDown(android.view.View)} has been executed. Failing that, calling this method will have no effect.</p>
Sets the listener to be called when the window is dismissed.
Updates the state of the popup window, if it is currently being displayed, from the currently set state.  This include: {@link #setClippingEnabled(boolean)}, {@link #setFocusable(boolean)}, {@link #setIgnoreCheekPress()}, {@link #setInputMethodMode(int)}, {@link #setTouchable(boolean)}, and {@link #setAnimationStyle(int)}.
<p>Updates the dimension of the popup window. Calling this function also updates the window with the current popup state as described for {@link #update()}.</p>
<p>Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only.  Calling this function also updates the window with the current popup state as described for {@link #update()}.</p>
<p>Updates the position and the dimension of the popup window. Calling this function also updates the window with the current popup state as described for {@link #update()}.</p>
<p>Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only.  Calling this function also updates the window with the current popup state as described for {@link #update()}.</p> <p>If the view later scrolls to move <code>anchor</code> to a different location, the popup will be moved correspondingly.</p>
Create a new progress bar with range 0...100 and initial progress of 0.
Constructor called from {@link ProgressBar#onSaveInstanceState()}
Resets the contact photo to the default state.
Assign a contact based on an email address. This should only be used when the contact's URI is not available, as an extra query will have to be performed to lookup the URI based on the email. until this view is clicked.
Assign a contact based on a phone number. This should only be used when the contact's URI is not available, as an extra query will have to be performed to lookup the URI based on the phone number. until this view is clicked.
Set a list of specific MIME-types to exclude and not display. For example, this can be used to hide the {@link Contacts#CONTENT_ITEM_TYPE} profile icon.
<p>Sets the selection to the radio button whose identifier is passed in parameter. Using -1 as the selection identifier clears the selection; such an operation is equivalent to invoking {@link #clearCheck()}.</p>
<p>Returns the identifier of the selected radio button in this group. Upon empty selection, the returned value is -1.</p>
<p>Clears the selection. When the selection is cleared, no radio button in this group is selected and {@link #getCheckedRadioButtonId()} returns null.</p>
<p>Register a callback to be invoked when the checked radio button changes in this group.</p>
Sets the listener to be called when the rating changes.
Whether this rating bar should only be an indicator (thus non-changeable by the user).
Sets the number of stars to show. In order for these to be shown properly, it is recommended the layout width of this widget be wrap content.
Returns the number of stars shown.
Sets the rating (the number of stars filled).
Gets the current rating (number of stars filled).
Sets the step size (granularity) of this rating bar.
Gets the step size of this rating bar.
The secondary progress is used to differentiate the background of a partially filled star. This method keeps the secondary progress in sync with the progress.
Measure a child. The child should have left, top, right and bottom information stored in its LayoutParams. If any of these values is -1 it means that the view can extend up to the corresponding edge.
Get a measure spec that accounts for all of the constraints on this view. This includes size contstraints imposed by the RelativeLayout as well as the View's desired dimension.
Adds a layout rule to be interpreted by the RelativeLayout. This method should only be used for constraints that don't refer to another sibling (e.g., CENTER_IN_PARENT) or take a boolean value ({@link RelativeLayout#TRUE} for true or - for false). To specify a verb that takes a subject, use {@link #addRule(int, int)} instead.
Adds a layout rule to be interpreted by the RelativeLayout. Use this for verbs that take a target, such as a sibling (ALIGN_RIGHT) or a boolean value (VISIBLE).
Retrieves a complete list of all supported rules, where the index is the rule verb, and the element value is the value specified, or "false" if it was never set.
Clears the graph.
Adds a view to the graph.
Builds a sorted list of views. The sorting order depends on the dependencies between the view. For instance, if view C needs view A to be processed first and view A needs view B to be processed first, the dependency graph is: B -> A -> C. The sorted array will contain views B, A and C in this order.
Finds the roots of the graph. A root is a node with no dependency and with [0..n] dependents.
Prints the dependency graph for the specified rules.
Overridden by each class to report on it's own memory usage
Create a new RemoteViews object that will display the views contained in the specified layout file.
Reads a RemoteViews object from a parcel.
This flag indicates whether this RemoteViews object is being created from a RemoteViewsService for use as a child of a widget collection. This flag is used to determine whether or not certain features are available, in particular, setting on click extras and setting on click pending intents. The former is enabled, and the latter disabled when this flag is true.
Updates the memory usage statistics.
Returns an estimate of the bitmap heap memory usage for this RemoteViews.
Add an action to be executed on the remote side when apply is called.
Equivalent to calling {@link ViewGroup#addView(View)} after inflating the given {@link RemoteViews}. This allows users to build "nested" {@link RemoteViews}. In cases where consumers of {@link RemoteViews} may recycle layouts, use {@link #removeAllViews(int)} to clear any existing children.
Equivalent to calling {@link ViewGroup#removeAllViews()}.
Equivalent to calling {@link AdapterViewAnimator#showNext()}
Equivalent to calling {@link AdapterViewAnimator#showPrevious()}
Equivalent to calling {@link AdapterViewAnimator#setDisplayedChild(int)}
Equivalent to calling View.setVisibility
Equivalent to calling TextView.setText
Equivalent to calling ImageView.setImageResource
Equivalent to calling ImageView.setImageURI
Equivalent to calling ImageView.setImageBitmap
Equivalent to calling AdapterView.setEmptyView
Equivalent to calling {@link Chronometer#setBase Chronometer.setBase}, {@link Chronometer#setFormat Chronometer.setFormat}, and {@link Chronometer#start Chronometer.start()} or {@link Chronometer#stop Chronometer.stop()}.
Equivalent to calling {@link ProgressBar#setMax ProgressBar.setMax}, {@link ProgressBar#setProgress ProgressBar.setProgress}, and {@link ProgressBar#setIndeterminate ProgressBar.setIndeterminate} If indeterminate is true, then the values for max and progress are ignored.
Equivalent to calling {@link android.view.View#setOnClickListener(android.view.View.OnClickListener)} to launch the provided {@link PendingIntent}. When setting the on-click action of items within collections (eg. {@link ListView}, {@link StackView} etc.), this method will not work. Instead, use {@link RemoteViews#setPendingIntentTemplate(int, PendingIntent) in conjunction with RemoteViews#setOnClickFillInIntent(int, Intent).
When using collections (eg. {@link ListView}, {@link StackView} etc.) in widgets, it is very costly to set PendingIntents on the individual items, and is hence not permitted. Instead this method should be used to set a single PendingIntent template on the collection, and individual items can differentiate their on-click behavior using {@link RemoteViews#setOnClickFillInIntent(int, Intent)}.
When using collections (eg. {@link ListView}, {@link StackView} etc.) in widgets, it is very costly to set PendingIntents on the individual items, and is hence not permitted. Instead a single PendingIntent template can be set on the collection, see {@link RemoteViews#setPendingIntentTemplate(int, PendingIntent)}, and the individual on-click action of a given item can be distinguished by setting a fillInIntent on that item. The fillInIntent is then combined with the PendingIntent template in order to determine the final intent which will be executed when the item is clicked. This works as follows: any fields which are left blank in the PendingIntent template, but are provided by the fillInIntent will be overwritten, and the resulting PendingIntent will be used. of the PendingIntent template will then be filled in with the associated fields that are set in fillInIntent. See {@link Intent#fillIn(Intent, int)} for more details.
Equivalent to calling a combination of {@link Drawable#setAlpha(int)}, {@link Drawable#setColorFilter(int, android.graphics.PorterDuff.Mode)}, and/or {@link Drawable#setLevel(int)} on the {@link Drawable} of a given view. <p> You can omit specific calls by marking their values with null or -1.
Equivalent to calling {@link android.widget.TextView#setTextColor(int)}.
Equivalent to calling {@link android.widget.AbsListView#setRemoteViewsAdapter(Intent)}. Can only be used for App Widgets.
Equivalent to calling {@link android.widget.AbsListView#smoothScrollToPosition(int, int)}.
Equivalent to calling {@link android.widget.AbsListView#smoothScrollToPosition(int, int)}.
Call a method taking one boolean on a view in the layout for this RemoteViews.
Call a method taking one byte on a view in the layout for this RemoteViews.
Call a method taking one short on a view in the layout for this RemoteViews.
Call a method taking one int on a view in the layout for this RemoteViews.
Call a method taking one long on a view in the layout for this RemoteViews.
Call a method taking one float on a view in the layout for this RemoteViews.
Call a method taking one double on a view in the layout for this RemoteViews.
Call a method taking one char on a view in the layout for this RemoteViews.
Call a method taking one String on a view in the layout for this RemoteViews.
Call a method taking one CharSequence on a view in the layout for this RemoteViews.
Call a method taking one Uri on a view in the layout for this RemoteViews.
Call a method taking one Bitmap on a view in the layout for this RemoteViews. <p class="note">The bitmap will be flattened into the parcel if this object is sent across processes, so it may end up using a lot of memory, and may be fairly slow.</p>
Call a method taking one Bundle on a view in the layout for this RemoteViews.
Inflates the view hierarchy represented by this object and applies all of the actions. <p><strong>Caller beware: this may throw</strong> does <strong>not</strong> attach the hierarchy. The caller should do so when appropriate.
Applies all of the actions to the provided view. <p><strong>Caller beware: this may throw</strong> the {@link #apply(Context,ViewGroup)} call.
(non-Javadoc) Used to restrict the views which can be inflated
Parcelable.Creator that instantiates RemoteViews objects
Updates this RemoteViewsFrameLayout depending on the view that was loaded.
Adds a new reference to a RemoteViewsFrameLayout returned by the adapter.
Notifies each of the RemoteViewsFrameLayouts associated with a particular position that the associated RemoteViews has loaded.
Removes all references to all RemoteViewsFrameLayouts returned by the adapter.
Returns the next index to load, and whether that index was directly requested or not
Returns the item type id for the specified convert view.  Returns -1 if the convert view is invalid.
Indicate whether the horizontal scrollbar track should always be drawn regardless of the extent. Defaults to false.
Indicate whether the vertical scrollbar track should always be drawn regardless of the extent. Defaults to false.
Indicates whether the vertical scrollbar track should always be drawn regardless of the extent.
Indicates whether the horizontal scrollbar track should always be drawn regardless of the extent.
Create a Scroller with the specified interpolator. If the interpolator is null, the default (viscous) interpolator will be used. "Flywheel" behavior will be in effect for apps targeting Honeycomb or newer.
Create a Scroller with the specified interpolator. If the interpolator is null, the default (viscous) interpolator will be used. Specify whether or not to support progressive "flywheel" behavior in flinging.
<p> Finds the next focusable component that fits in this View's bounds (excluding fading edges) pretending that this View's top is located at the parameter top. </p>
For a given suggestion and a given cursor row, get the action message. If not provided by the specific row/column, also check for a single definition (for the action key).
Sets a listener to receive notifications of changes to the SeekBar's progress level. Also provides notifications of when the user starts and stops a touch gesture within the SeekBar.
Called by bindView() to set the image for an ImageView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an ImageView. This method is called instead of {@link #setViewImage(ImageView, String)} if the supplied data is an int or Integer.
Called by bindView() to set the image for an ImageView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an ImageView. By default, the value will be treated as an image resource. If the value cannot be used as an image resource, the value is used as an image Uri. This method is called instead of {@link #setViewImage(ImageView, int)} if the supplied data is not an int or Integer.
Called by bindView() to set the text for a TextView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an TextView.
Called by bindView() to set the image for an ImageView. By default, the value will be treated as a Uri. Intended to be overridden by Adapters that need to filter strings retrieved from the database.
Instantiates a new View for a child.
Instantiates a new View for a group.
Creates a new SlidingDrawer from a specified set of attributes defined in XML.
Toggles the drawer open and close. Takes effect immediately.
Toggles the drawer open and close with an animation.
Opens the drawer immediately.
Closes the drawer immediately.
Closes the drawer with an animation.
Opens the drawer with an animation.
Sets the listener that receives a notification when the drawer becomes open.
Sets the listener that receives a notification when the drawer becomes close.
Sets the listener that receives a notification when the drawer starts or ends a scroll. A fling is considered as a scroll. A fling will also trigger a drawer opened or drawer closed event.
Returns the handle of the drawer.
Returns the content of the drawer.
Unlocks the SlidingDrawer so that touch events are processed.
Locks the SlidingDrawer so that touch events are ignores.
Indicates whether the drawer is currently fully opened.
Indicates whether the drawer is scrolling or flinging.
for instance when spell checking has been disabled in settings.
Construct a new spinner with the given context's theme.
Construct a new spinner with the given context's theme and the supplied mode of displaying choices. <code>mode</code> may be one of {@link #MODE_DIALOG} or {@link #MODE_DROPDOWN}.
Construct a new spinner with the given context's theme and the supplied attribute set.
Construct a new spinner with the given context's theme, the supplied attribute set, and default style.
Construct a new spinner with the given context's theme, the supplied attribute set, and default style. <code>mode</code> may be one of {@link #MODE_DIALOG} or {@link #MODE_DROPDOWN} and determines how the user will select choices from the spinner.
Animate the views between different relative indexes within the {@link AdapterViewAnimator}
This ensures that the frequency of stack flips caused by scrolls is capped
This is public so that ObjectAnimator can access it
Construct a new Switch with default styling.
Construct a new Switch with default styling, overriding specific style attributes as requested.
Construct a new Switch with a default style determined by the given theme attribute, overriding specific style attributes as requested.
Get a new {@link TabSpec} associated with this tab host.
<p>Call setup() before adding tabs if loading TabHost using findViewById(). <i><b>However</i></b>: You do not need to call setup() after getTabHost() in {@link android.app.TabActivity TabActivity}. Example:</p>
If you are using {@link TabSpec#setContent(android.content.Intent)}, this must be called since the activityGroup is needed to launch the local activity. This is done for you if you extend {@link android.app.TabActivity}.
Add a tab.
Removes all tabs from the tab widget associated with this tab host.
Get the FrameLayout which holds tab content
Register a callback to be invoked when the selected state of any of the items in this list changes The callback that will run
Specify a label as the tab indicator.
Specify a label and icon as the tab indicator.
Specify a view as the tab indicator.
Specify the id of the view that should be used as the content of the tab.
Specify a {@link android.widget.TabHost.TabContentFactory} to use to create the content of the tab.
Specify an intent to use to launch an activity as the tab content.
<p>Creates a new TableLayout for the given context.</p>
<p>Creates a new TableLayout for the given context and with the specified set attributes.</p>
<p>Parses a sequence of columns ids defined in a CharSequence with the following pattern (regex): \d+(\s*,\s*\d+)*</p> <p>Examples: "1" or "13, 7, 6" or "".</p> <p>The result of the parsing is stored in a sparse boolean array. The parsed column ids are used as the keys of the sparse array. The values are always true.</p>
<p>Performs initialization common to prorgrammatic use and XML use of this widget.</p>
<p>Indicates whether all columns are shrinkable or not.</p>
<p>Convenience method to mark all columns as shrinkable.</p>
<p>Indicates whether all columns are stretchable or not.</p>
<p>Convenience method to mark all columns as stretchable.</p>
<p>Collapses or restores a given column. When collapsed, a column does not appear on screen and the extra space is reclaimed by the other columns. A column is collapsed/restored only when it belongs to a {@link android.widget.TableRow}.</p> <p>Calling this method requests a layout operation.</p>
<p>Returns the collapsed state of the specified column.</p>
<p>Makes the given column stretchable or not. When stretchable, a column takes up as much as available space as possible in its row.</p> <p>Calling this method requests a layout operation.</p>
<p>Returns whether the specified column is stretchable or not.</p>
<p>Makes the given column shrinkable or not. When a row is too wide, the table can reclaim extra space from shrinkable columns.</p> <p>Calling this method requests a layout operation.</p>
<p>Returns whether the specified column is shrinkable or not.</p>
<p>Applies the columns collapse status to a new row added to this table. This method is invoked by PassThroughHierarchyChangeListener upon child insertion.</p> <p>This method only applies to {@link android.widget.TableRow} instances.</p>
<p>Finds the largest cell in each column. For each column, the width of the largest cell is applied to all the other cells.</p>
<p>Shrinks the columns if their total width is greater than the width allocated by widthMeasureSpec. When the total width is less than the allocated width, this method attempts to stretch columns to fill the remaining space.</p>
<p>Sets the child width to {@link android.view.ViewGroup.LayoutParams} and the child height to {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}.</p>
<p>Creates a new TableRow for the given context.</p>
<p>Creates a new TableRow for the given context and with the specified set attributes.</p>
<p>Collapses or restores a given column.</p> {@hide}
<p>Measures the preferred width of each child, including its margins.</p> {@hide}
<p>Sets the width of all of the columns in this row. At layout time, this row sets a fixed width, as defined by <code>columnWidths</code>, on each child (or cell, or column.)</p> {@hide}
<p>Sets the child width and the child height.</p>
<p>Sets the child width, height and weight.</p>
<p>Sets the child width to {@link android.view.ViewGroup.LayoutParams} and the child height to {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}.</p>
<p>Puts the view in the specified column.</p> <p>Sets the child width to {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT} and the child height to {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}.</p>
Returns the tab indicator view at the given index.
Returns the number of tab indicator views.
Sets the drawable to use as a divider between the tab indicators. divider.
Sets the drawable to use as the left part of the strip below the tab indicators.
Sets the drawable to use as the left part of the strip below the tab indicators. left strip drawable
Sets the drawable to use as the right part of the strip below the tab indicators.
Sets the drawable to use as the right part of the strip below the tab indicators. right strip drawable
Controls whether the bottom strips on the tab indicators are drawn or not.  The default is to draw them.  If the user specifies a custom view for the tab indicators, then the TabHost class calls this method to disable drawing of the bottom strips.
Indicates whether the bottom strips on the tab indicators are drawn or not.
Sets the current tab. This method is used to bring a tab to the front of the Widget, and is used to post to the rest of the UI that a different tab has been brought to the foreground. Note, this is separate from the traditional "focus" that is employed from the view logic. For instance, if we have a list in a tabbed view, a user may be navigating up and down the list, moving the UI focus (orange highlighting) through the list items.  The cursor movement does not effect the "selected" tab though, because what is being scrolled through is all on the same tab.  The selected tab only changes when we navigate between tabs (moving from the list view to the next tabbed view, in this example). To move both the focus AND the selected tab at once, please use {@link #setCurrentTab}. Normally, the view logic takes care of adjusting the focus, so unless you're circumventing the UI, you'll probably just focus your interest here. tab (tab brought to the front of the widget)
Sets the current tab and focuses the UI on it. This method makes sure that the focused tab matches the selected tab, normally at {@link #setCurrentTab}.  Normally this would not be an issue if we go through the UI, since the UI is responsible for calling TabWidget.onFocusChanged(), but in the case where we are selecting the tab programmatically, we'll need to make sure focus keeps up. and selected (tab brought to the front of the widget)
Provides a way for {@link TabHost} to be notified that the user clicked on a tab indicator.
Creates a new empty TextSwitcher.
Creates a new empty TextSwitcher for the given context and with the specified set attributes.
Sets the text of the next view and switches to the next view. This can be used to animate the old text out and animate the next text in.
Sets the text of the text view that is currently showing.  This does not perform the animations.
Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified.
Subclasses override this to specify that they have a KeyListener by default even if not specifically called for in the XML options.
Subclasses override this to specify a default movement method.
Returns the length, in characters, of the text managed by this TextView
Return the text the TextView is displaying as an Editable object.  If the text is not editable, null is returned.
within the text can cause individual lines to be taller or shorter than this height, and the layout may contain additional first- or last-line padding.
This can be null if the text or width has recently changes.
This will frequently be null for non-EditText TextViews.
Sets the key listener to be used with this TextView.  This can be null to disallow user input.  Note that this method has significant and subtle interactions with soft keyboards and other input method: see {@link KeyListener#getInputType() KeyListener.getContentType()} for important details.  Calling this method will replace the current content type of the text view with the content type returned by the key listener. <p> Be warned that if you want a TextView with a key listener or movement method not to be focusable, or if you want a TextView without a key listener or movement method to be focusable, you must call {@link #setFocusable} again after calling this to get the focusability back the way you want it.
This will frequently be null for non-EditText TextViews.
Sets the movement method (arrow key handler) to be used for this TextView.  This can be null to disallow using the arrow keys to move the cursor or scroll the view. <p> Be warned that if you want a TextView with a key listener or movement method not to be focusable, or if you want a TextView without a key listener or movement method to be focusable, you must call {@link #setFocusable} again after calling this to get the focusability back the way you want it.
This will frequently be null except for single-line and password fields.
Sets the transformation that is applied to the text that this TextView is displaying.
Returns the top padding of the view, plus space for the top Drawable if any.
Returns the bottom padding of the view, plus space for the bottom Drawable if any.
Returns the left padding of the view, plus space for the left Drawable if any.
Returns the right padding of the view, plus space for the right Drawable if any.
Returns the start padding of the view, plus space for the start Drawable if any.
Returns the end padding of the view, plus space for the end Drawable if any.
Returns the extended top padding of the view, including both the top Drawable if any and any extra space to keep more than maxLines of text from showing.  It is only valid to call this after measuring.
Returns the extended bottom padding of the view, including both the bottom Drawable if any and any extra space to keep more than maxLines of text from showing.  It is only valid to call this after measuring.
Returns the total left padding of the view, including the left Drawable if any.
Returns the total right padding of the view, including the right Drawable if any.
Returns the total start padding of the view, including the start Drawable if any.
Returns the total end padding of the view, including the end Drawable if any.
Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any.
Returns the total bottom padding of the view, including the bottom Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any.
Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text.  Use null if you do not want a Drawable there.  The Drawables must already have had {@link Drawable#setBounds} called.
Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text.  Use 0 if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds.
Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text.  Use null if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds.
Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text.  Use null if you do not want a Drawable there.  The Drawables must already have had {@link Drawable#setBounds} called.
Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text.  Use 0 if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds.
Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text.  Use null if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds.
Returns drawables for the left, top, right, and bottom borders.
Returns drawables for the start, top, end, and bottom borders.
Sets the size of the padding between the compound drawables and the text.
Returns the padding between the compound drawables and the text.
Gets the autolink mask of the text.  See {@link android.text.util.Linkify#ALL Linkify.ALL} and peers for possible values.
Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource.
Set the default text size to a given unit and value.  See {@link TypedValue} for the possible dimension units.
horizontally.  This will usually be 1.
Sets the typeface and style in which the text should be displayed. Note that not all Typeface families actually have bold and italic variants, so you may need to use {@link #setTypeface(Typeface, int)} to get the appearance that you actually want.
Sets the text color.
Return the set of text colors.
<p>Return the current color selected for normal text.</p>
Gives the text a shadow of the specified radius and color, the specified distance from its normal position.
consult the Paint's properties and not to change them.
Returns whether the movement method will automatically be set to {@link LinkMovementMethod} if {@link #setAutoLinkMask} has been set to nonzero and links are detected in {@link #setText}. The default is true.
Returns the list of URLSpans attached to the text (by {@link Linkify} or otherwise) if any.  You can call {@link URLSpan#getURL} on them to find where they link to or use {@link Spanned#getSpanStart} and {@link Spanned#getSpanEnd} to find the region of the text they are attached to.
Sets the color of the hint text.
<p>Return the color used to paint the hint text.</p>
<p>Return the current color selected to paint the hint text.</p>
Sets the color of links in the text.
<p>Returns the color used to paint links in the text.</p>
Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself.
Returns the horizontal and vertical alignment of this TextView.
Sets whether the text should be allowed to be wider than the View is.  If false, it will be wrapped to the width of the View.
Sets line spacing for this TextView.  Each line will have its height multiplied by <code>mult</code> and have <code>add</code> added to it.
Convenience method: Append the specified text to the TextView's display buffer, upgrading it to BufferType.EDITABLE if it was not already editable.
Convenience method: Append the specified text slice to the TextView's display buffer, upgrading it to BufferType.EDITABLE if it was not already editable.
Return whether this text view is including its entire text contents in frozen icicles.
Sets the Factory used to create new Editables.
Sets the Factory used to create new Spannables.
Sets the text that this TextView is to display (see {@link #setText(CharSequence)}) and also sets whether it is stored in a styleable/spannable buffer and whether it is editable.
Sets the TextView to display the specified slice of the specified char array.  You must promise that you will not change the contents of the array except for right before another call to setText(), since the TextView has no way to know that the text has changed and that it needs to invalidate and re-layout.
Like {@link #setText(CharSequence, android.widget.TextView.BufferType)}, except that the cursor position (if any) is retained in the new text.
Set the type of the content with a constant as defined for {@link EditorInfo#inputType}. This will take care of changing the key listener, by calling {@link #setKeyListener(KeyListener)}, to match the given content type.  If the given content type is {@link EditorInfo#TYPE_NULL} then a soft keyboard will not be displayed for this text view. Note that the maximum number of displayed lines (see {@link #setMaxLines(int)}) will be modified if you change the {@link EditorInfo#TYPE_TEXT_FLAG_MULTI_LINE} flag of the input type.
It would be better to rely on the input type for everything. A password inputType should have a password transformation. We should hence use isPasswordInputType instead of this method. We should: - Call setInputType in setKeyListener instead of changing the input type directly (which would install the correct transformation). - Refuse the installation of a non-password transformation in setTransformation if the input type is password. However, this is like this for legacy reasons and we cannot break existing apps. This method is useful since it matches what the user can see (obfuscated text or not).
Directly change the content type integer of the text view, without modifying any other state.
Get the type of the content.
Change the editor type integer associated with the text view, which will be reported to an IME with {@link EditorInfo#imeOptions} when it has focus.
Get the type of the IME editor.
Change the custom IME action associated with the text view, which will be reported to an IME with {@link EditorInfo#actionLabel} and {@link EditorInfo#actionId} when it has focus.
Get the IME action label previous set with {@link #setImeActionLabel}.
Get the IME action ID previous set with {@link #setImeActionLabel}.
Set a special listener to be called when an action is performed on the text view.  This will be called when the enter key is pressed, or when an action supplied to the IME is selected by the user.  Setting this means that the normal hard key event will not insert a newline into the text view, even if it is multi-line; holding down the ALT modifier will, however, allow the user to insert a newline character.
Called when an attached input method calls {@link InputConnection#performEditorAction(int) InputConnection.performEditorAction()} for this text view.  The default implementation will call your action listener supplied to {@link #setOnEditorActionListener}, or perform a standard operation for {@link EditorInfo#IME_ACTION_NEXT EditorInfo.IME_ACTION_NEXT}, {@link EditorInfo#IME_ACTION_PREVIOUS EditorInfo.IME_ACTION_PREVIOUS}, or {@link EditorInfo#IME_ACTION_DONE EditorInfo.IME_ACTION_DONE}. <p>For backwards compatibility, if no IME options have been set and the text view would not normally advance focus on enter, then the NEXT and DONE actions received here will be turned into an enter key down/up pair to go through the normal key handling.
Set the private content type of the text, which is the {@link EditorInfo#privateImeOptions EditorInfo.privateImeOptions} field that will be filled in when creating an input connection.
Get the private type of the content.
Set the extra input data of the text, which is the {@link EditorInfo#extras TextBoxAttribute.extras} Bundle that will be filled in when creating an input connection.  The given integer is the resource ID of an XML resource holding an {@link android.R.styleable#InputExtras &lt;input-extras&gt;} XML tree.
Retrieve the input extras currently associated with the text view, which can be viewed as well as modified. exist.  Otherwise, null will be returned if none have been created.
Returns the error message that was set to be displayed with {@link #setError}, or <code>null</code> if no error was set or if it the error was cleared by the widget after user input.
Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus.  The icon and error message will be reset to null when any key events cause changes to the TextView's text.  The drawable must already have had {@link Drawable#setBounds} set on it. If the <code>error</code> is <code>null</code>, the error message will be cleared (and you should provide a <code>null</code> icon as well).
Returns the Y offset to make the pointy top of the error point at the middle of the error icon.
Returns the Y offset to make the pointy top of the error point at the bottom of the error icon.
Sets the list of input filters that will be used if the buffer is Editable.  Has no effect otherwise.
Sets the list of input filters on the specified Editable, and includes mInput in the list if it is an InputFilter.
Returns the current list of input filters.
When a TextView is used to display a useful piece of information to the user (such as a contact's address), it should be made selectable, so that the user can select and copy this content. Use {@link #setTextIsSelectable(boolean)} or the {@link android.R.styleable#TextView_textIsSelectable} XML attribute to make this TextView selectable (text is not selectable by default). Note that this method simply returns the state of this flag. Although this flag has to be set in order to select text in non-editable TextView, the content of an {@link EditText} can always be selected, independently of the value of this flag.
Sets whether or not (default) the content of this view is selectable by the user. Note that this methods affect the {@link #setFocusable(boolean)}, {@link #setFocusableInTouchMode(boolean)} {@link #setClickable(boolean)} and {@link #setLongClickable(boolean)} states and you may want to restore these if they were customized. See {@link #isTextSelectable} for details.
Return the number of lines of text, or 0 if the internal Layout has not been built.
Return the baseline for the specified line (0...getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. If the internal Layout has not been built, return 0 and set bounds to (0, 0, 0, 0)
Returns true if pressing ENTER in this field advances focus instead of inserting the character.  This is true mostly in single-line fields, but also in mail addresses and subjects which will display on multiple lines but where it doesn't make sense to insert newlines.
Returns true if pressing TAB in this field advances focus instead of inserting the character.  Insert tabs only in multi-line editors.
Resets the mErrorWasChanged flag, so that future calls to {@link #setError(CharSequence)} can be recorded.
If this TextView contains editable content, extract a portion of it based on the information in <var>request</var> in to <var>outText</var>.
This is used to remove all style-impacting spans from text before new extracted text is being replaced into it, so that we don't have any lingering spans applied during the replace.
Apply to this text view the given extracted text, as previously returned by {@link #extractText(ExtractedTextRequest, ExtractedText)}.
Called by the framework in response to a text completion from the current input method, provided by it calling {@link InputConnection#commitCompletion InputConnection.commitCompletion()}.  The default implementation does nothing; text views that are supporting auto-completion should override this to do their desired behavior.
Called by the framework in response to a text auto-correction (such as fixing a typo using a a dictionnary) from the current input method, provided by it calling {@link InputConnection#commitCorrection} InputConnection.commitCorrection()}. The default implementation flashes the background of the corrected word to provide feedback to the user.
Called by the framework in response to a request to begin a batch of edit operations through a call to link {@link #beginBatchEdit()}.
Called by the framework in response to a request to end a batch of edit operations through a call to link {@link #endBatchEdit}.
Called by the framework in response to a private command from the current method, provided by it calling {@link InputConnection#performPrivateCommand InputConnection.performPrivateCommand()}.
Make a new Layout based on the already-measured size of the view, on the assumption that it was measured correctly at some point.
The width passed in is now the desired layout width, not the full view width with padding. {@hide}
Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. The default is true.
Check whether a change to the existing text layout requires a new view layout.
Check whether entirely new text requires a new view layout or merely a new text layout.
Returns true if anything changed.
Move the point, specified by the offset, into the view if it is needed. This has to be called after layout. Returns true if anything changed.
Move the cursor, if needed, so that it is at an offset that is visible to the user.  This will not move the cursor if it represents more than one character (a selection range).  This will only work if the TextView contains spannable text; otherwise it will do nothing.
Return true iff there is a selection inside this text view.
Sets the properties of this field (lines, horizontally scrolling, transformation method) to be for a single-line input.
Sets the properties of this field to transform input to ALL CAPS display. This may use a "small caps" formatting if available. This setting will be ignored if this field is editable or selectable. This call replaces the current transformation method. Disabling this will not necessarily restore the previous behavior from before this was enabled.
Adds or remove the EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE on the mInputType.
Causes words in the text that are longer than the view is wide to be ellipsized instead of broken in the middle.  You may also want to {@link #setSingleLine} or {@link #setHorizontallyScrolling} to constrain the text to a single line.  Use <code>null</code> to turn off ellipsizing. If {@link #setMaxLines} has been used to set two or more lines, {@link android.text.TextUtils.TruncateAt#END} and {@link android.text.TextUtils.TruncateAt#MARQUEE}* are only supported (other ellipsizing types will not do anything).
Sets how many times to repeat the marquee animation. Only applied if the TextView has marquee enabled. Set to -1 to repeat indefinitely.
This method is called when the text is changed, in case any subclasses would like to know. Within <code>text</code>, the <code>lengthAfter</code> characters beginning at <code>start</code> have just replaced old text that had length <code>lengthBefore</code>. It is an error to attempt to make changes to <code>text</code> from this callback. modified
This method is called when the selection has changed, in case any subclasses would like to know.
Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes. <p> In 1.0, the {@link TextWatcher#afterTextChanged} method was erroneously not called after {@link #setText} calls.  Now, doing {@link #setText} if there are any text changed listeners forces the buffer type to Editable if it would not otherwise be and does call this method.
Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes.
Removes all spans that are inside or actually overlap the start..end range
Not private so it can be called from an inner class without going through a thunk.
Not private so it can be called from an inner class without going through a thunk.
Not private so it can be called from an inner class without going through a thunk.
Not private so it can be called from an inner class without going through a thunk.
Create new SpellCheckSpans on the modified region.
Monitors the changes in the text. <p>{@link ChangeWatcher#onSpanAdded(Spannable, Object, int, int)} cannot be used, as the notifications are not sent when a spannable (with spans) is inserted.
Adjusts the spans by removing all of them except the last one.
Removes all the {@link EasyEditSpan} currently attached.
Use {@link BaseInputConnection#removeComposingSpans BaseInputConnection.removeComposingSpans()} to remove any IME composing state from this text view.
{@link SuggestionSpan#FLAG_EASY_CORRECT} set.
Downgrades to simple suggestions all the easy correction spans that are not a spell check span.
a selectable TextView.
Returns true, only while processing a touch gesture, if the initial touch down event caused focus to move to the text view and as a result its selection changed.  Only valid while processing the touch gesture of interest.
This method is only valid during a touch event.
Returns the TextView_textColor attribute from the Resources.StyledAttributes, if set, or the TextAppearance_textColor from the TextView_textAppearance attribute, if TextView_textColor was not set directly.
Returns the default color from the TextView_textColor attribute from the AttributeSet, if set, or the default color from the TextAppearance_textColor from the TextView_textAppearance attribute, if TextView_textColor was not set directly.
Unlike {@link #textCanBeSelected()}, this method is based on the <i>current</i> state of the TextView. {@link #textCanBeSelected()} has to be true (this is one of the conditions to have a selection controller (see {@link #prepareCursorControllers()}), but this is not sufficient.
Test based on the <i>intrinsic</i> charateristics of the TextView. The text must be spannable and the movement method must allow for arbitary selection. See also {@link #canSelectText()}.
Adjusts selection to the word under last touch offset. Return true if the operation was successfully performed.
Gets the text reported for accessibility purposes. It is the text if not empty or the hint.
Returns whether this text view is a current input method target.  The default implementation just checks with {@link InputMethodManager}.
Called when a context menu option for the text view is selected.  Currently this will be {@link android.R.id#copyUrl}, {@link android.R.id#selectTextMode}, {@link android.R.id#selectAll}, {@link android.R.id#paste}, {@link android.R.id#cut} or {@link android.R.id#copy}.
Prepare text so that there are not zero or two spaces at beginning and end of region defined by [min, max] when replacing this region by paste. Note that if there were two spaces (or more) at that position before, they are kept. We just make sure we do not add an extra one from the paste content.
The popup window will be horizontally centered on the getTextOffset() and vertically positioned according to viewportToContentHorizontalOffset. This method assumes that mContentView has properly been measured from its content.
Returns the suggestion spans that cover the current cursor position. The suggestion spans are sorted according to the length of text that they are attached to.
Removes the suggestion spans.
Return whether or not suggestions are enabled on this TextView. The suggestions are generated by the IME or by the spell checker as the user types. This is done by adding {@link SuggestionSpan}s to the text. When suggestions are enabled (default), this list of suggestions will be displayed when the user asks for them on these parts of the text. This value depends on the inputType of this TextView. The class of the input type must be {@link InputType#TYPE_CLASS_TEXT}. In addition, the type variation must be one of {@link InputType#TYPE_TEXT_VARIATION_NORMAL}, {@link InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}, {@link InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}, {@link InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE} or {@link InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}. And finally, the {@link InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS} flag must <i>not</i> be set.
If provided, this ActionMode.Callback will be used to create the ActionMode when text selection is initiated in this View. The standard implementation populates the menu with a subset of Select All, Cut, Copy and Paste actions, depending on what this View supports. A custom implementation can add new entries in the default menu in its {@link android.view.ActionMode.Callback#onPrepareActionMode(ActionMode, Menu)} method. The default actions can also be removed from the menu using {@link Menu#removeItem(int)} and passing {@link android.R.id#selectAll}, {@link android.R.id#cut}, {@link android.R.id#copy} or {@link android.R.id#paste} ids as parameters. Returning false from {@link android.view.ActionMode.Callback#onCreateActionMode(ActionMode, Menu)} will prevent the action mode from being started. Action click events should be handled by the custom implementation of {@link android.view.ActionMode.Callback#onActionItemClicked(ActionMode, MenuItem)}. Note that text selection mode is not started when a TextView receives focus and the {@link android.R.attr#selectAllOnFocus} flag has been set. The content is highlighted in that case, to allow for quick replacement.
Retrieves the value set in {@link #setCustomSelectionActionModeCallback}. Default is null.
Paste clipboard content between min and max positions.
Hides the insertion controller and stops text selection mode, hiding the selection controller
Get the character offset closest to the specified absolute position. A typical use case is to pass the result of {@link MotionEvent#getX()} and {@link MotionEvent#getY()} to this method. position. Returns -1 if there is no layout.
Returns true if the screen coordinates position (x,y) corresponds to a character displayed in the view. Returns false when the position is in the empty space of left/right of text.
Subclasses will need to override this method to implement their own way of resolving drawables depending on the layout direction. A call to the super method will be required from the subclasses implementation.
A no-op callback used in the constructor to avoid null checks later in the code.
Set the callback that indicates the time has been adjusted by the user.
Set the current hour.
Set whether in 24 hour or AM/PM mode.
Set the current minute (0-59).
Construct an empty Toast object.  You must call {@link #setView} before you can call {@link #show}.
Show the view for the specified duration.
Close the view if it's showing, or don't show it if it isn't showing yet. You do not normally have to call this.  Normally view will disappear on its own after the appropriate duration.
Set the view to show.
Return the view.
Set how long to show the view for.
Return the duration.
Set the margins of the view.
Return the horizontal margin.
Return the vertical margin.
Set the location at which the notification should appear on the screen.
Get the location at which the notification should appear on the screen.
Return the X offset in pixels to apply to the gravity's location.
Return the Y offset in pixels to apply to the gravity's location.
Make a standard toast that just contains a text view.
Make a standard toast that just contains a text view with the text from a resource.
Update the text in a Toast that was previously created using one of the makeText() methods.
schedule handleShow into the right thread
schedule handleHide into the right thread
Returns the text for when the button is in the checked state.
Sets the text for when the button is in the checked state.
Returns the text for when the button is not in the checked state.
Sets the text for when the button is not in the checked state.
Register a callback to be invoked when the media file is loaded and ready to go.
Register a callback to be invoked when the end of a media file has been reached during playback.
Register a callback to be invoked when an error occurs during playback or setup.  If no listener is specified, or if the listener returned false, VideoView will inform the user of any errors.
release the media player in any state
cache duration as mDuration for faster access
Initialize this {@link ViewAnimator}, possibly setting {@link #setMeasureAllChildren(boolean)} based on {@link FrameLayout} flags.
Shows only the specified child. The other displays Views exit the screen with the {@link #getOutAnimation() out animation} and the specified child enters the screen with the {@link #getInAnimation() in animation}.
Creates a new empty ViewSwitcher.
Creates a new empty ViewSwitcher for the given context and with the specified set attributes.
Returns the next view to be displayed.
Sets the factory used to create the two views between which the ViewSwitcher will flip. Instead of using a factory, you can call {@link #addView(android.view.View, int, android.view.ViewGroup.LayoutParams)} twice.
Reset the ViewSwitcher to hide all of the existing views and to make it think that the first time animation has not yet played.
Needed to reposition the zoom controls after configuration changes.
Constructor for the {@link ZoomButtonsController}.
Whether to enable the zoom in control.
Whether to enable the zoom out control.
Sets the delay between zoom callbacks as the user holds a zoom button.
Sets the {@link OnZoomListener} listener that receives callbacks to zoom.
Sets whether the zoom controls should be focusable. If the controls are focusable, then trackball and arrow key interactions are possible. Otherwise, only touch interactions are possible.
Whether the zoom controls will be automatically dismissed after showing.
Sets whether the zoom controls will be automatically dismissed after showing.
Whether the zoom controls are visible to the user.
Sets whether the zoom controls should be visible to the user.
Gets the container that is the parent of the zoom controls. <p> The client can add other views to this container to link them with the zoom controls.
Gets the view for the zoom controls.
This will only be called when the container has focus.
Returns the View that should receive a touch at the given coordinates.
Sets how fast you get zoom events when the user holds down the zoom in/out buttons.
Gets the size of the provided area code map storage. The map storage passed-in will be filled as a result.
Gets the smaller area code map storage strategy according to the provided area code map. It actually uses (outputs the data to a stream) both strategies and retains the best one which make this method quite expensive.
Creates an {@link AreaCodeMap} initialized with {@code sortedAreaCodeMap}.  Note that the underlying implementation of this method is expensive thus should not be called by time-critical applications.
Supports Java Serialization.
Supports Java Serialization.
Returns the description of the geographical area the {@code number} corresponds to.
Does a binary search for {@code value} in the provided array from {@code start} to {@code end} (inclusive). Returns the position if {@code value} is found; otherwise, returns the position which has the largest value that is less than {@code value}. This means if {@code value} is the smallest, -1 will be returned.
Sets the internal state of the underlying storage implementation reading the provided {@code objectInput}.
Gets the minimum number of bytes that can be used to store the provided {@code value}.
Stores the provided {@code value} to the provided byte {@code buffer} at the specified {@code index} using the provided {@code wordSize} in bytes. Note that only integer and short sizes are supported.
Reads the {@code value} at the specified {@code index} from the provided byte {@code buffer}. Note that only integer and short sizes are supported.
Stores a value which is read from the provided {@code objectInput} to the provided byte {@code buffer} at the specified {@code index}.
Writes the value read from the provided byte {@code buffer} at the specified {@code index} to the provided {@code objectOutput}.
Initializes an {@link MappingFileProvider} with {@code availableDataFiles}.
Gets the name of the file that contains the mapping data for the {@code countryCallingCode} in the language specified.
Gets a {@link PhoneNumberOfflineGeocoder} instance to carry out international phone number geocoding. <p> The {@link PhoneNumberOfflineGeocoder} is implemented as a singleton. Therefore, calling this method multiple times will only result in one instance being created.
Returns the customary display name in the given language for the given territory the phone number is from.
Returns a text description for the given language code for the given phone number. The description might consist of the name of the country where the phone number is from and/or the name of the geographical area the phone number is from. This method assumes the validity of the number passed in has already been checked.
Returns a text description for the given language code for the given phone number. The description might consist of the name of the country where the phone number is from and/or the name of the geographical area the phone number is from. This method explictly checkes the validity of the number passed in.
Returns an area-level text description in the given language for the given phone number.
Constructs an as-you-type formatter. Should be obtained from {@link PhoneNumberUtil#getAsYouTypeFormatter}.
The metadata needed by this class is the same for all regions sharing the same country calling code. Therefore, we return the metadata for "main" region for this country calling code.
Returns true if a new template is created as opposed to reusing the existing template.
Gets a formatting template which can be used to efficiently format a partial number where digits are added one by one.
Clears the internal state of the formatter, so it can be reused.
Formats a phone number on-the-fly as each digit is entered.
Same as {@link #inputDigit}, but remembers the position where {@code nextChar} is inserted, so that it can be retrieved later by using {@link #getRememberedPosition}. The remembered position will be automatically adjusted if additional formatting characters are later inserted/removed in front of {@code nextChar}.
Returns the current position in the partially formatted phone number of the character which was previously passed in as the parameter of {@link #inputDigitAndRememberPosition}.
Attempts to set the formatting template and returns a string which contains the formatted version of the digits entered so far.
Invokes inputDigitHelper on each digit of the national number accrued, and returns a formatted string in the end.
Extracts IDD and plus sign to prefixBeforeNationalNumber when they are available, and places the remaining input into nationalNumber.
Extracts the country calling code from the beginning of nationalNumber to prefixBeforeNationalNumber when they are available, and places the remaining input into nationalNumber.
Accrues digits and the plus sign to accruedInputWithoutFormatting for later use. If nextChar contains a digit in non-ASCII format (e.g. the full-width version of digits), it is first normalized to the ASCII version. The return value is nextChar itself, or its normalized version, if nextChar is a digit in non-ASCII format. This method assumes its input is either a digit or the plus sign.
A mapping from a country code to the region codes which denote the country/region represented by that country code. In the case of multiple countries sharing a calling code, such as the NANPA countries, the one indicated with "isMainCountryForCode" in the metadata should be first.
Returns the error type of the exception that has been thrown.
Creates a new match.
Returns the phone number matched by the receiver.
Returns the start index of the matched phone number within the searched text.
Returns the exclusive end index of the matched phone number within the searched text.
Returns the raw string matched as a phone number in the searched text.
Returns a regular expression quantifier with an upper and lower limit.
Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a new instance.
Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex} that represents a phone number. Returns the next match, null if none was found.
Trims away any characters after the first match of {@code pattern} in {@code candidate}, returning the trimmed version.
Helper method to determine if a character is a Latin-script letter or not. For our purposes, combining marks should also return true since we assume they have been added to a preceding Latin character.
Attempts to extract a match from a {@code candidate} character sequence.
Attempts to extract a match from {@code candidate} if the whole candidate does not qualify as a match.
Parses a phone number from the {@code candidate} using {@link PhoneNumberUtil#parse} and verifies it matches the requested {@link #leniency}. If parsing and verification succeed, a corresponding {@link PhoneNumberMatch} is returned, otherwise this method returns null.
Always throws {@link UnsupportedOperationException} as removal is not supported.
Put (lower letter -> upper letter) and (upper letter -> upper letter) mappings.
Helper initialiser method to create the regular-expression pattern to match extensions, allowing the one-char extension symbols provided by {@code singleExtnSymbols}.
Helper method to get the national-number part of a number, formatted without any national prefix, and return it as a set of digit blocks that would be formatted together.
Attempts to extract a possible number from the string passed in. This currently strips all leading characters that cannot be used to start a phone number. Characters that can be used to start a phone number are defined in the VALID_START_CHAR_PATTERN. If none of these characters are found in the number passed in, an empty string is returned. This function also attempts to strip off any alternative extensions or endings if two or more are present, such as in the case of: (530) 583-6985 x302/x2303. The second extension here makes this actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second extension so that the first number is parsed correctly.
Checks to see if the string of characters could possibly be a phone number at all. At the moment, checks to see that the string begins with at least 3 digits, ignoring any punctuation commonly found in phone numbers. This method does not require the number to be normalized in advance - but does assume that leading non-number symbols have been removed, such as by the method extractPossibleNumber.
Normalizes a string of characters representing a phone number. This performs the following conversions: Punctuation is stripped. For ALPHA/VANITY numbers: Letters are converted to their numeric representation on a telephone keypad. The keypad For other numbers: Wide-ascii digits are converted to normal ASCII (European) digits. Arabic-Indic numerals are converted to European numerals. Spurious alpha characters are stripped.
Normalizes a string of characters representing a phone number. This is a wrapper for normalize(String number) but does in-place normalization of the StringBuilder provided.
Normalizes a string of characters representing a phone number. This converts wide-ascii and arabic-indic numerals to European numerals, and strips punctuation and alpha characters.
Converts all alpha characters in a number to their respective digits on a keypad, but retains existing formatting.
Gets the length of the geographical area code in the {@code nationalNumber_} field of the PhoneNumber object passed in, so that clients could use it to split a national significant number into geographical area code and subscriber number. It works in such a way that the resultant subscriber number should be diallable, at least on some devices. An example of how this could be used: <pre> PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance(); PhoneNumber number = phoneUtil.parse("16502530000", "US"); String nationalSignificantNumber = phoneUtil.getNationalSignificantNumber(number); String areaCode; String subscriberNumber; int areaCodeLength = phoneUtil.getLengthOfGeographicalAreaCode(number); if (areaCodeLength > 0) { areaCode = nationalSignificantNumber.substring(0, areaCodeLength); subscriberNumber = nationalSignificantNumber.substring(areaCodeLength); } else { areaCode = ""; subscriberNumber = nationalSignificantNumber; </pre> N.B.: area code is a very ambiguous concept, so the I18N team generally recommends against using it for most purposes, but recommends using the more general {@code national_number} instead. Read the following carefully before deciding to use this method: <ul> <li> geographical area codes change over time, and this method honors those changes; <li> subscriber numbers may not be diallable from all devices (notably mobile devices, which <li> most non-geographical numbers have no area codes. <li> some geographical numbers have no area codes. </ul>
Gets the length of the national destination code (NDC) from the PhoneNumber object passed in, so that clients could use it to split a national significant number into NDC and subscriber number. The NDC of a phone number is normally the first group of digit(s) right after the country calling code when the number is formatted in the international format, if there is a subscriber number part that follows. An example of how this could be used: <pre> PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance(); PhoneNumber number = phoneUtil.parse("18002530000", "US"); String nationalSignificantNumber = phoneUtil.getNationalSignificantNumber(number); String nationalDestinationCode; String subscriberNumber; int nationalDestinationCodeLength = phoneUtil.getLengthOfNationalDestinationCode(number); if (nationalDestinationCodeLength > 0) { nationalDestinationCode = nationalSignificantNumber.substring(0, subscriberNumber = nationalSignificantNumber.substring(nationalDestinationCodeLength); } else { nationalDestinationCode = ""; subscriberNumber = nationalSignificantNumber; </pre> Refer to the unittests to see the difference between this function and {@link #getLengthOfGeographicalAreaCode}.
Normalizes a string of characters representing a phone number by replacing all characters found in the accompanying map with the values therein, and stripping all other characters if removeNonMatches is true.
Used for testing purposes only to reset the PhoneNumberUtil singleton to null.
Convenience method to enable tests to get a list of what regions the library has metadata for.
Gets a {@link PhoneNumberUtil} instance to carry out international phone number formatting, parsing, or validation. The instance is loaded with phone number metadata for a number of most commonly used regions. <p>The {@link PhoneNumberUtil} is implemented as a singleton. Therefore, calling getInstance multiple times will only result in one instance being created.
Helper function to check region code is not unknown or null.
Helper function to check region code is not unknown or null and log an error message. The {@code countryCallingCode} and {@code number} supplied is used only for the resultant log message.
Formats a phone number in the specified format using default rules. Note that this does not promise to produce a phone number that the user can dial from where they are - although we do format in either 'national' or 'international' format depending on what the client asks for, we do not currently support a more abbreviated format, such as for users in the same "area" who could potentially dial the number without area code. Note that if the phone number has a country calling code of 0 or an otherwise invalid country calling code, we cannot work out which formatting rules to apply so we return the national significant number with no formatting applied.
Same as {@link #format(Phonenumber.PhoneNumber, PhoneNumberUtil.PhoneNumberFormat)}, but accepts a mutable StringBuilder as a parameter to decrease object creation when invoked many times.
Formats a phone number in the specified format using client-defined formatting rules. Note that if the phone number has a country calling code of zero or an otherwise invalid country calling code, we cannot work out things like whether there should be a national prefix applied, or how to format extensions, so we return the national significant number with no formatting applied.
Formats a phone number in national format for dialing using the carrier as specified in the {@code carrierCode}. The {@code carrierCode} will always be used regardless of whether the phone number already has a preferred domestic carrier code stored. If {@code carrierCode} contains an empty string, returns the number in national format without any carrier code.
Formats a phone number in national format for dialing using the carrier as specified in the preferredDomesticCarrierCode field of the PhoneNumber object passed in. If that is missing, use the {@code fallbackCarrierCode} passed in instead. If there is no {@code preferredDomesticCarrierCode}, and the {@code fallbackCarrierCode} contains an empty string, return the number in national format without any carrier code. <p>Use {@link #formatNationalNumberWithCarrierCode} instead if the carrier code passed in should take precedence over the number's {@code preferredDomesticCarrierCode} when formatting.
Formats a phone number for out-of-country dialing purposes. If no regionCallingFrom is supplied, we format the number in its INTERNATIONAL format. If the country calling code is the same as that of the region where the number is from, then NATIONAL formatting will be applied. <p>If the number itself has a country calling code of zero or an otherwise invalid country calling code, then we return the number with no formatting applied. <p>Note this function takes care of the case for calling inside of NANPA and between Russia and Kazakhstan (who share the same country calling code). In those cases, no international prefix is used. For regions which have multiple international prefixes, the number in its INTERNATIONAL format will be returned instead.
Formats a phone number using the original phone number format that the number is parsed from. The original format is embedded in the country_code_source field of the PhoneNumber object passed in. If such information is missing, the number will be formatted into the NATIONAL format by default. When the number is an invalid number, the method returns the raw input when it is available.
Formats a phone number for out-of-country dialing purposes. Note that in this version, if the number was entered originally using alpha characters and this version of the number is stored in raw_input, this representation of the number will be used rather than the digit representation. Grouping information, as specified by characters such as "-" and " ", will be retained. <p><b>Caveats:</b></p> <ul> <li> This will not produce good results if the country calling code is both present in the raw <li> This will also not produce good results if the raw input has any grouping information </ul>
Gets the national significant number of the a phone number. Note a national significant number doesn't contain a national prefix or any formatting.
A helper function that is used by format and formatByPattern.
Simple wrapper of formatNationalNumber for the common case of no carrier code.
Note in some regions, the national number can be written in two completely different ways depending on whether it forms part of the NATIONAL format or INTERNATIONAL format. The numberFormat parameter here is used to specify which format to use for those cases. If a carrierCode is specified, this will be inserted into the formatted string to replace $CC.
Simple wrapper of formatAccordingToFormats for the common case of no carrier code.
Note that carrierCode is optional - if NULL or an empty string, no carrier code replacement will take place.
Gets a valid number for the specified region.
Gets a valid number for the specified region and number type.
Appends the formatted extension of a phone number to formattedNumber, if the phone number had an extension specified.
Formats the extension part of the phone number by prefixing it with the appropriate extension prefix. This will be the default extension prefix, unless overridden by a preferred extension prefix for this region.
Gets the type of a phone number.
Tests whether a phone number matches a valid pattern. Note this doesn't verify the number is actually in use, which is impossible to tell by just looking at a number itself.
Tests whether a phone number is valid for a certain region. Note this doesn't verify the number is actually in use, which is impossible to tell by just looking at a number itself. If the country calling code is not the same as the country calling code for the region, this immediately exits with false. After this, the specific number pattern rules for the region are examined. This is useful for determining for example whether a particular number is valid for Canada, rather than just a valid NANPA number.
Returns the region where a phone number is from. This could be used for geocoding at the region level.
Returns the region code that matches the specific country calling code. In the case of no region code being found, ZZ will be returned. In the case of multiple regions, the one designated in the metadata as the "main" region for this calling code will be returned.
Returns the country calling code for a specific region. For example, this would be 1 for the United States, and 64 for New Zealand.
Returns the national dialling prefix for a specific region. For example, this would be 1 for the United States, and 0 for New Zealand. Set stripNonDigits to true to strip symbols like "~" (which indicates a wait for a dialling tone) from the prefix returned. If no national prefix is present, we return null. <p>Warning: Do not use this method for do-your-own formatting - for some regions, the national dialling prefix is used only for certain types of numbers. Use the library's formatting functions to prefix the national prefix when required.
Checks if this is a region under the North American Numbering Plan Administration (NANPA).
Checks whether the country calling code is from a region whose national significant number could contain a leading zero. An example of such a region is Italy. Returns false if no metadata for the country is found.
Checks if the number is a valid vanity (alpha) number such as 800 MICROSOFT. A valid vanity number will start with at least 3 digits and will have three or more alpha characters. This does not do region-specific checks - to work out if this number is actually valid for a region, it should be parsed and methods such as {@link #isPossibleNumberWithReason} and {@link #isValidNumber} should be used.
Convenience wrapper around {@link #isPossibleNumberWithReason}. Instead of returning the reason for failure, this method returns a boolean value.
Helper method to check a number against a particular pattern and determine whether it matches, or is too short or too long. Currently, if a number pattern suggests that numbers of length 7 and 10 are possible, and a number in between these possible lengths is entered, such as of length 8, this will return TOO_LONG.
Check whether a phone number is a possible number. It provides a more lenient check than {@link #isValidNumber} in the following sense: <ol> <li> It only checks the length of phone numbers. In particular, it doesn't check starting <li> It doesn't attempt to figure out the type of the number, but uses general rules which <li> For fixed line numbers, many regions have the concept of area code, which together with </ol
Check whether a phone number is a possible number given a number in the form of a string, and the region where the number could be dialed from. It provides a more lenient check than {@link #isValidNumber}. See {@link #isPossibleNumber(Phonenumber.PhoneNumber)} for details. <p>This method first parses the number, then invokes {@link #isPossibleNumber(Phonenumber.PhoneNumber)} with the resultant PhoneNumber object.
Attempts to extract a valid number from a phone number that is too long to be valid, and resets the PhoneNumber object passed in to that valid version. If no valid number could be extracted, the PhoneNumber object passed in will not be modified.
Gets an {@link com.android.i18n.phonenumbers.AsYouTypeFormatter} for the specific region.
Extracts country calling code from fullNumber, returns it and places the remaining number in nationalNumber. It assumes that the leading plus sign or IDD has already been removed. Returns 0 if fullNumber doesn't start with a valid country calling code, and leaves nationalNumber unmodified.
Tries to extract a country calling code from a number. This method will return zero if no country calling code is considered to be present. Country calling codes are extracted in the following ways: <ul> <li> by stripping the international dialing prefix of the region the person is dialing from, <li> by stripping the '+' sign if present and then looking at the next digits <li> by comparing the start of the number and the country calling code of the default region. </ul> It will throw a NumberParseException if the number starts with a '+' but the country calling code supplied after this does not match that of any known region.
Strips the IDD from the start of the number if present. Helper function used by maybeStripInternationalPrefixAndNormalize.
Strips any international prefix (such as +, 00, 011) present in the number provided, normalizes the resulting number, and indicates if an international prefix was present.
Strips any national prefix (such as 0, 1) present in the number provided.
Strips any extension (as in, the part of the number dialled after the call is connected, usually indicated with extn, ext, x or similar) from the end of the number, and returns it.
Checks to see that the region code used is valid, or if it is not valid, that the number to parse starts with a + symbol so that we can attempt to infer the region from the number. Returns false if it cannot use the region provided and the region cannot be inferred.
Parses a string and returns it in proto buffer format. This method will throw a {@link com.android.i18n.phonenumbers.NumberParseException} if the number is not considered to be a possible number. Note that validation of whether the number is actually a valid number for a particular region is not performed. This can be done separately with {@link #isValidNumber}.
Same as {@link #parse(String, String)}, but accepts mutable PhoneNumber as a parameter to decrease object creation when invoked many times.
Parses a string and returns it in proto buffer format. This method differs from {@link #parse} in that it always populates the raw_input field of the protocol buffer with numberToParse as well as the country_code_source field.
Same as{@link #parseAndKeepRawInput(String, String)}, but accepts a mutable PhoneNumber as a parameter to decrease object creation when invoked many times.
Returns an iterable over all {@link PhoneNumberMatch PhoneNumberMatches} in {@code text}. This is a shortcut for {@link #findNumbers(CharSequence, String, Leniency, long) getMatcher(text, defaultRegion, Leniency.VALID, Long.MAX_VALUE)}.
Returns an iterable over all {@link PhoneNumberMatch PhoneNumberMatches} in {@code text}.
Parses a string and fills up the phoneNumber. This method is the same as the public parse() method, with the exception that it allows the default region to be null, for use by isNumberMatch(). checkRegion should be set to false if it is permitted for the default region to be null or unknown ("ZZ").
Takes two phone numbers and compares them for equality. <p>Returns EXACT_MATCH if the country_code, NSN, presence of a leading zero for Italian numbers and any extension present are the same. Returns NSN_MATCH if either or both has no region specified, and the NSNs and extensions are the same. Returns SHORT_NSN_MATCH if either or both has no region specified, or the region specified is the same, and one NSN could be a shorter version of the other number. This includes the case where one has an extension specified, and the other does not. Returns NO_MATCH otherwise. For example, the numbers +1 345 657 1234 and 657 1234 are a SHORT_NSN_MATCH. The numbers +1 345 657 1234 and 345 657 are a NO_MATCH.
Returns true when one national number is the suffix of the other or both are the same.
Takes two phone numbers as strings and compares them for equality. This is a convenience wrapper for {@link #isNumberMatch(Phonenumber.PhoneNumber, Phonenumber.PhoneNumber)}. No default region is known.
Takes two phone numbers and compares them for equality. This is a convenience wrapper for {@link #isNumberMatch(Phonenumber.PhoneNumber, Phonenumber.PhoneNumber)}. No default region is known.
Returns true if the number can only be dialled from within the region. If unknown, or the number can be dialled from outside the region as well, returns false. Does not check the number is a valid number. TODO: Make this method public when we have enough metadata to make it worthwhile. Currently visible for testing purposes only.
This method is used for testing.
Sets up the alert, including applying the parameters to the alert model, and installing the alert's content.
Used to detect when the media state changes, in case we need to call finish()
Cast an IBinder object into an com.android.internal.app.IBatteryStats interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.app.IMediaContainerService interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.app.IUsageStats interface, generating a proxy if needed.
Constructs an Adapter object containing Locale information. Content is sorted by {@link LocaleInfo#label}.
Requests the system to update the system locale. Note that the system looks halted for a while during the Locale migration, so the caller need to take care of it.
Used to detect when NI request is received
Respond to NI Handler under GpsLocationProvider, 1 = accept, 2 = deny
Adds a static item to the top of the list. A static item is one that is not from the RingtoneManager.
On click of Ok/Cancel buttons
On item selected via keys
Request a clean shutdown, waiting for subsystems to clean up their state etc.  Must be called from a Looper thread in which its UI is shown.
Request a clean shutdown, waiting for subsystems to clean up their state etc.  Must be called from a Looper thread in which its UI is shown.
Makes sure we handle the shutdown gracefully. Shuts off power regardless of radio and bluetooth state if the alloted time has passed.
Do not call this directly. Use {@link #reboot(Context, String, boolean)} or {@link #shutdown(Context, boolean)} instead.
Cast an IBinder object into an com.android.internal.appwidget.IAppWidgetHost interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.appwidget.IAppWidgetService interface, generating a proxy if needed.
for AppWidgetHost
for AppWidgetManager
Cast an IBinder object into an com.android.internal.backup.IBackupTransport interface, generating a proxy if needed.
Ask the transport for an Intent that can be used to launch any internal configuration Activity that it wishes to present.  For example, the transport may offer a UI for allowing the user to supply login credentials for the transport's off-device backend. If the transport does not supply any user-facing configuration UI, it should return null from this method.
On demand, supply a one-line string that can be shown to the user that describes the current backend destination.  For example, a transport that can potentially associate backup data with arbitrary user accounts should include the name of the currently-active account here.
Ask the transport where, on local device storage, to keep backup state blobs. This is per-transport so that mock transports used for testing can coexist with "live" backup services without interfering with the live bookkeeping.  The returned string should be a name that is expected to be unambiguous among all available backup transports; the name of the class implementing the transport is a good choice.
Verify that this is a suitable time for a backup pass.  This should return zero if a backup is reasonable right now, some positive value otherwise.  This method will be called outside of the {@link #startSession}/{@link #endSession} pair. <p>If this is not a suitable time for a backup, the transport should return a backoff delay, in milliseconds, after which the Backup Manager should try again. in milliseconds to suggest deferring the backup pass for a while.
Initialize the server side storage for this device, erasing all stored data. The transport may send the request immediately, or may buffer it.  After this is called, {@link #finishBackup} must be called to ensure the request is sent and received successfully. {@link BackupConstants#TRANSPORT_ERROR} (on network error or other failure).
Send one application's data to the backup destination.  The transport may send the data immediately, or may buffer it.  After this is called, {@link #finishBackup} must be called to ensure the data is sent and recorded successfully. This specifically includes the signature list for the package. BackupService.doBackup() method.  This may be a pipe rather than a file on persistent media, so it may not be seekable. will be erased prior to the storage of the data provided here.  The purpose of this is to provide a guarantee that no stale data exists in the restore set when the device begins providing backups. {@link BackupConstants#TRANSPORT_ERROR} (on network error or other failure), or {@link BackupConstants#TRANSPORT_NOT_INITIALIZED} (if the backend dataset has become lost due to inactive expiry or some other reason and needs re-initializing)
Erase the give application's data from the backup destination.  This clears out the given package's data from the current backup set, making it as though the app had never yet been backed up.  After this is called, {@link finishBackup} must be called to ensure that the operation is recorded successfully.
Finish sending application data to the backup destination.  This must be called after {@link #performBackup} or {@link clearBackupData} to ensure that all data is sent.  Only when this method returns true can a backup be assumed to have succeeded.
Get the set of all backups currently available over this transport. or null if an error occurred (the attempt should be rescheduled).
Get the identifying token of the backup set currently being stored from this device.  This is used in the case of applications wishing to restore their last-known-good data. is no backup set available corresponding to the current device state.
Start restoring application data from backup.  After calling this function, alternate calls to {@link #nextRestorePackage} and {@link #nextRestoreData} to walk through the actual application data. or {@link #getCurrentRestoreSet}. Application data will be restored in the order given. {@link #nextRestorePackage}) or {@link BackupConstants#TRANSPORT_ERROR} (an error occurred, the restore should be aborted and rescheduled).
Get the package name of the next application with data in the backup store. or "" (the empty string) if no more backup data is available, or null if an error occurred (the restore should be aborted and rescheduled).
Get the data for the application returned by {@link #nextRestorePackage}.
End a restore session (aborting any in-process data transfer as necessary), freeing any resources and connections used during the restore process.
Deletes the contents but not the given directory
Restore handling
Sums the size of native binaries in an APK.
Copies native binaries to a shared library directory.
Convenience method to call removeNativeBinariesFromDirLI(File)
Remove the native binaries of a given package. This simply gets rid of the files in the 'lib' sub-directory.
not yet implemented
Append the given selection clause to the internal state. Each clause is surrounded with parenthesis and combined using {@code AND}.
Execute query using the current internal state as {@code WHERE} clause. Missing arguments as treated as {@code null}.
Constructor for ByteArrayPartSource.
FilePart Constructor. {@link #DEFAULT_CONTENT_TYPE default} is used {@link #DEFAULT_CHARSET default} is used
FilePart Constructor.
FilePart Constructor. file or if it is not readable.
FilePart Constructor. {@link #DEFAULT_CONTENT_TYPE default} is used {@link #DEFAULT_CHARSET default} is used file or if it is not readable.
Returns the source of the file part.
Constructor for FilePartSource. cannot be read
Return the length of the file
Return the current filename
Return a new {@link FileInputStream} for the current filename.
Generates a random multipart boundary string.
Creates a new multipart entity containing the given parts.
Returns the MIME boundary string that is used to demarcate boundaries of this part. The first call to this method will implicitly create a new boundary string. To create a boundary string first the HttpMethodParams.MULTIPART_BOUNDARY parameter is considered. Otherwise a random one is generated.
Returns <code>true</code> if all parts are repeatable, <code>false</code> otherwise.
Return the boundary string.
Gets the part boundary to be used.
Sets the part boundary.  Only meant to be used by {@link Part#sendParts(OutputStream, Part[], byte[])} and {@link Part#getLengthOfParts(Part[], byte[])}
Tests if this part can be sent more than once. more than once.
Write the start to the specified output stream
Write the content disposition header to the specified output stream
Write the content type header to the specified output stream
Write the content transfer encoding header to the specified output stream
Write the end of the header to the output stream
Write the data to the specified output stream
Write all the data to the output stream. If you override this method make sure to override #length() as well
Return the full length of all the data. If you override this method make sure to override #send(OutputStream) as well
Write all parts and the last boundary to the specified output stream.
Return the total sum of all parts and that of the last boundary
Gets the length of the multipart message including the given parts.
Sets the character encoding. encoding header
Sets the part name.
Sets the transfer encoding. transfer encoding header
Constructor. the {@link #DEFAULT_CHARSET default} is used
Gets the content in bytes.  Bytes are lazily created to allow the charset to be changed after the part is created.
jan = 9 + 0 + 13 = 22 feb = 5 + 4 + 1 = 10 mar = 12 + 0 + 17 = 29 apr = 0 + 15 + 17 = 32 may = 12 + 0 + 24 = 36 jun = 9 + 20 + 13 = 42 jul = 9 + 20 + 11 = 40 aug = 0 + 20 + 6 = 26 sep = 18 + 4 + 15 = 37 oct = 14 + 2 + 19 = 35 nov = 13 + 14 + 21 = 48 dec = 3 + 4 + 2 = 9
Returns true if the provider requires access to a data network (e.g., the Internet), false otherwise.
Returns true if the provider requires access to a satellite-based positioning system (e.g., GPS), false otherwise.
Returns true if the provider requires access to an appropriate cellular network (e.g., to make use of cell tower IDs), false otherwise.
Returns true if the use of this provider may result in a monetary charge to the user, false if use is free.  It is up to each provider to give accurate information.
Returns true if the provider is able to provide altitude information, false otherwise.  A provider that reports altitude under most circumstances but may occassionally not report it should return true.
Returns true if the provider is able to provide speed information, false otherwise.  A provider that reports speed under most circumstances but may occassionally not report it should return true.
Returns true if the provider is able to provide bearing information, false otherwise.  A provider that reports bearing under most circumstances but may occassionally not report it should return true.
Returns the power requirement for this provider. constants Criteria.POWER_REQUIREMENT_*.
Returns a constant describing the horizontal accuracy returned by this provider. constants Criteria.ACCURACY_*.
Handles NI events from HAL
Sets the NI notification.
Opens the notification dialog and waits for user input
Construct the intent for bringing up the dialog activity, which shows the notification and takes user input
Converts a string (or Hex string) to a char array
Unpacks an byte array containing 7-bit packed characters into a String.
Decode NI string
change this to configure notification display
change this to configure notification display
change this to configure notification display
change this to configure dialog display (for verification)
change this to configure dialog display (for verification)
This looks a bit weird, but it's the way the logging config works: A named class is instantiated, the constructor is assumed to tweak the configuration, the instance itself is of no interest.
Constructs a new instance of the Android log handler.
Parses the DN and returns the attribute value for an attribute type.
Checks the site certificate against the domain name of the site being visited
Checks the site certificate against the IP domain name of the site being visited
Checks the site certificate against the DNS domain name of the site being visited
not private for testing
wildcard match as specified by RFC2818-3.1. For example, f*.com must match foo.com but not bar.com
Parse and return interface-level summary {@link NetworkStats}. Values monotonically increase since device boot, and may include details about inactive interfaces.
Parse and return {@link NetworkStats} with UID-level details. Values monotonically increase since device boot.
Split given line into {@link ArrayList}.
Zip the two given {@link ArrayList} as key and value pairs into {@link HashMap}.
Utility method to read a single plain-text {@link Long} from the given {@link File}, usually from a {@code /proc/} filesystem.
Wrapper for {@link File#list()} that returns empty array instead of {@code null}.
Constructs a new logging print stream.
For debugging
Writes a possibly null Counter to a Parcel.
Clear state of this counter.
Constructs from a parcel.
Clear state of this timer.  Returns true if the timer is inactive so can be completely dropped.
Writes a possibly null Timer to a Parcel.
Update the total time for all other running Timers with the same type as this Timer due to a change in timer count
Get the KernelWakelockTimer associated with name, and create a new one if one doesn't already exist.
Radio uptime in microseconds when transferring data. This value is very approximate.
Returns the duration that the cell radio was up for data transfers.
Telephony stack updates the phone state.
Clear all stats for this uid.  Returns true if the uid is completely inactive so can be dropped.
Reads a possibly null Timer from a Parcel.  The timer is associated with the proper timer pool from the given BatteryStatsImpl object. return a new Timer, or null.
Called by ActivityManagerService when CPU times are updated.
Retrieve the statistics object for a particular process, creating if needed.
Retrieve the statistics object for a particular service, creating if needed.
Retrieve the statistics object for a particular service, creating if needed.
Only STATS_UNPLUGGED works properly
Only STATS_UNPLUGGED works properly
Only STATS_UNPLUGGED works properly
Only STATS_UNPLUGGED works properly
Retrieve the statistics object for a particular uid, creating if needed.
Remove the statistics object for a particular uid.
Retrieve the statistics object for a particular process, given the name of the process.
Retrieve the statistics object for a particular process, creating if needed.
Massage data to distribute any reasonable work down to more specific owners.  Must only be called on a dead BatteryStats object!
Writes a summary of the statistics to a Parcel, in a format suitable to be written to disk.  This format does not allow a lossless round-trip.
Return the system time (as reported by {@link SystemClock#uptimeMillis SystemClock.uptimeMillis()}) that the last garbage collection occurred in this process.  This is not for general application use, and the meaning of "when a garbage collection occurred" will change as the garbage collector evolves. SystemClock.uptimeMillis()} of the last garbage collection.
Cast an IBinder object into an com.android.internal.os.IDropBoxManagerService interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.os.IResultReceiver interface, generating a proxy if needed.
Searches buffer for line breaks and logs a message for each one. even though they don't end in a line break
Returns the average current in mA consumed by the subsystem
Returns the average current in mA consumed by the subsystem for the given level. signal strength of the cell network between 0 and 4 (if there are 4 bars max.) If there is no data for multiple levels, the level is ignored.
Returns the battery capacity, if available, in milli Amp Hours. If not available, it returns zero.
Returns the number of speeds that the CPU can be run at.
Returns the times spent at each CPU speed, since the last call to this method. If this is the first time, it will return 1 for each value.
Returns an HTTP user agent of the form "Dalvik/1.1.0 (Linux; U; Android Eclair Build/MASTER)".
Invokes a static "main(argv[]) method on class "className". Converts various failing exceptions into RuntimeExceptions, with the assumption that they will then cause the VM instance to exit.
The main function called when started through the zygote process. This could be unified with main(), if the native code in finishInit() were rationalized with Zygote startup.<p> Current recognized args: <ul> <li> <code> [--] &lt;start class name&gt;  &lt;args&gt; </ul>
The main function called when an application is started through a wrapper process. When the wrapper starts, the runtime starts {@link RuntimeInit#main} which calls {@link WrapperInit#main} which then calls this method. So we don't need to call commonInit() here.
Redirect System.out and System.err to the Android log.
Report a serious error in the current process.  May or may not cause the process to terminate (depends on system settings).
Set the object identifying this application/process, for reporting VM errors.
Constructs instance and parses args
Parses the commandline arguments intended for the Runtime.
Is profiling enabled?
Starts the profiler if profiling is enabled.
Writes a snapshot if profiling is enabled.
Writes the zygote's snapshot to internal storage if profiling is enabled.
pass in PackageInfo to retrieve various values for snapshot header
generate header for snapshots, with the following format (like an HTTP header but without the \r): Version: <version number of profiler>\n Process: <process name>\n Package: <package name, if exists>\n Package-Version: <version number of the package, if exists>\n Build: <fingerprint>\n <the actual snapshot content begins here...>
The main function called when starting a runtime application through a wrapper process instead of by forking Zygote. The first argument specifies the file descriptor for a pipe that should receive the pid of this process, or 0 if none. The second argument is the target SDK version for the app. The remaining arguments are passed to the runtime.
Executes a runtime application with a wrapper command. This method never returns.
Executes a standalone application with a wrapper command. This method never returns.
Constructs instance from connected socket.
Returns the file descriptor of the associated socket.
Reads start commands from an open command socket. Start commands are presently a pair of newline-delimited lines indicating a) class to invoke main() on b) nice name to set argv[0] to. Continues to read commands and forkAndSpecialize children until the socket is closed. This method is used in ZYGOTE_FORK_MODE method in child process
Reads one start command from the command socket. If successful, a child is forked and a {@link ZygoteInit.MethodAndArgsCaller} exception is thrown in that child while in the parent process, the method returns normally. On failure, the child is not spawned and messages are printed to the log and stderr. Returns a boolean status value indicating whether an end-of-file on the command socket has been encountered. true if an end-of-file has been encountered. method in child process
Closes socket associated with this connection.
Parses the commandline arguments intended for the Zygote spawner (such as "--setuid=" and "--setgid=") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
Reads an argument list from the command socket
Applies zygote security policy per bugs #875058 and #1082165. Based on the credentials of the process issuing a zygote command: <ol> <li> uid 0 (root) may specify any uid, gid, and setgroups() list <li> uid 1000 (Process.SYSTEM_UID) may specify any uid &gt; 1000 in normal operation. It may also specify any gid and setgroups() list it chooses. In factory test mode, it may specify any UID. <li> Any other uid may not specify any uid, gid, or setgroups list. The uid and gid will be inherited from the requesting process. </ul>
Applies debugger system properties to the zygote arguments. If "ro.debuggable" is "1", all apps are debuggable. Otherwise, the debugger state is specified via the "--enable-debugger" flag in the spawn request.
Applies zygote security policy per bug #1042973. Based on the credentials of the process issuing a zygote command: <ol> <li> peers of  uid 0 (root) and uid 1000 (Process.SYSTEM_UID) may specify any rlimits. <li> All other uids may not specify rlimits. </ul>
Applies zygote security policy per bug #1042973. A root peer may spawn an instance with any capabilities. All other uids may spawn instances with any of the capabilities in the peer's permitted set but no more.
Applies zygote security policy. Based on the credentials of the process issuing a zygote command: <ol> <li> uid 0 (root) may specify --invoke-with to launch Zygote with a wrapper command. <li> Any other uid may not specify any invoke-with argument. </ul>
Applies invoke-with system properties to the zygote arguments.
Handles post-fork setup of child proc, closing sockets as appropriate, reopen stdio as appropriate, and ultimately throwing MethodAndArgsCaller if successful or returning if failed. is reopened. trampoline to code that invokes static main.
Handles post-fork cleanup of parent proc if &lt; 0; specified. loop"
Logs an error message and prints it to the specified stream, if provided
Registers a server socket for zygote command connections
Waits for and accepts a single command connection. Throws RuntimeException on failure.
Close and clean up zygote sockets. Called on shutdown and on the child's exit path.
Sets effective user ID.
Sets effective group ID.
Performs Zygote process initialization. Loads and initializes commonly used classes. Most classes only cause a few hundred bytes to be allocated, but a few will allocate a dozen Kbytes (in one case, 500+K).
Load in commonly used resources, so they can be shared across processes. These tend to be a few Kbytes, but are frequently in the 20-40K range, and occasionally even larger.
Runs several special GCs to try to clean up a few generations of softly- and final-reachable objects, along with any other garbage. This is only useful just before a fork().
Finish remaining work for the newly forked system server process.
Prepare the arguments and fork for the system server process.
Runs the zygote in accept-and-fork mode. In this mode, each peer gets its own zygote spawner process. This code is retained for reference only. be executed.
Runs the zygote process's select loop. Accepts new connections as they happen, and reads commands from connections one spawn-request's worth at a time. be executed.
Invokes the linux syscall "getpgid"
Cast an IBinder object into an com.android.internal.policy.IFaceLockCallback interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.policy.IFaceLockInterface interface, generating a proxy if needed.
The static methods to spawn new policy-specific objects
Sets the value of this preference, and saves it to the persistent store if required.
Gets the value of this preference.
Cast an IBinder object into an com.android.internal.statusbar.IStatusBar interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.statusbar.IStatusBarService interface, generating a proxy if needed.
---- Methods below are for use by the status bar policy services ---- You need the STATUS_BAR_SERVICE permission
Unflatten the StatusBarIcon from a parcel.
Create a CommandType object.
Gets a list of ComprehensionTlv objects contained in this BER-TLV object.
Gets a tag id of the BER-TLV object.
Decodes a BER-TLV object from a byte array.
external API to be used by application
Returns the actual value of this COMPREHENSION-TLV object.
Intentionally private for singleton
Handles RIL_UNSOL_STK_PROACTIVE_COMMAND unsolicited command from RIL. Sends valid proactive command data to the application using intents.
Handles RIL_UNSOL_STK_SESSION_END unsolicited command from RIL.
Used for instantiating/updating the Service from the GsmPhone or CdmaPhone constructor.
Used by application to get an AppInterface object.
Search for a COMPREHENSION-TLV object with the given tag from a list
Search for the next COMPREHENSION-TLV object with the given tag from a list iterated by {@code iter}. {@code iter} points to the object next to the found object when this method returns. Used for searching the same list for similar tags, usually item id.
Processes DISPLAY_TEXT proactive command from the SIM card.
Processes SET_UP_IDLE_MODE_TEXT proactive command from the SIM card.
Processes GET_INKEY proactive command from the SIM card.
Processes GET_INPUT proactive command from the SIM card.
Processes REFRESH proactive command from the SIM card.
Processes SELECT_ITEM proactive command from the SIM card.
Processes EVENT_NOTIFY message from baseband.
Processes SET_UP_EVENT_LIST proactive command from the SIM card.
Processes LAUNCH_BROWSER proactive command from the SIM card.
Processes PLAY_TONE proactive command from the SIM card.
Processes SETUP_CALL proactive command from the SIM card.
Constructor. Private on purpose. Use {@link #decodeMany(byte[], int) decodeMany} or {@link #decode(byte[], int) decode} method.
Parses a list of COMPREHENSION-TLV objects from a byte array.
Parses an COMPREHENSION-TLV object from a byte array.
Create a FontSize object.
Handles Image descriptor parsing and required processing. This is the first step required to handle retrieving icons from the SIM. TS 51.011.
Start reading colour lookup table from SIM card.
Start reading Image Descriptor from SIM card.
Start reading icon bytes array from SIM card.
When all is done pass icon back to caller.
Decode one bit to a black and white color: 0 is black 1 is white
Calculate bit mask for a given number of bits. The mask should enable to make a bitwise and to the given number of bits.
public static final int ID_LENGTH = 9; ID_LENGTH substituted by IccFileHandlerBase.GET_RESPONSE_EF_IMG_SIZE_BYTES
Extract descriptor information about image instance.
Retrieves the actual result code that this object represents.
Get the singleton instance, constructing if necessary.
Start decoding the message parameters, when complete MSG_ID_RIL_MSG_DECODED will be returned to caller.
The command parameters have been decoded.
Create a TextAlignment object.
Create a TextColor object.
Create a Tone object.
Search for a Command Details object from a list.
Search for a Device Identities object from a list.
Retrieves Duration information from the Duration COMPREHENSION-TLV object.
Retrieves Item information from the COMPREHENSION-TLV object.
Retrieves Item id information from the COMPREHENSION-TLV object.
Retrieves icon id from an Icon Identifier COMPREHENSION-TLV object
Retrieves item icons id from an Icon Identifier List COMPREHENSION-TLV object
Retrieves text attribute information from the Text Attribute COMPREHENSION-TLV object.
Retrieves alpha identifier from an Alpha Identifier COMPREHENSION-TLV object.
Retrieves text from the Text COMPREHENSION-TLV object, and decodes it into a Java String.
Calculate the message text encoding length, fragmentation, and other details.
TODO(cleanup): CdmaSmsAddress encoding should make use of CdmaSmsAddress.parse provided that DTMF encoding is unified, and the difference in 4-bit vs. 8-bit is resolved.
Create serialized representation for BearerData object. (See 3GPP2 C.R1001-F, v1.0, section 4.5 for layout details)
IS-91 Voice Mail message decoding (See 3GPP2 C.S0015-A, Table 4.3.1.4.1-1) (For character encodings, see TIA/EIA/IS-91, Annex B) Protocol Summary: The user data payload may contain 3-14 characters.  The first two characters are parsed as a number and indicate the number of voicemails.  The third character is either a SPACE or '!' to indicate normal or urgent priority, respectively.  Any following characters are treated as normal text user data payload. Note that the characters encoding is 6-bit packed.
IS-91 Short Message decoding (See 3GPP2 C.S0015-A, Table 4.3.1.4.1-1) (For character encodings, see TIA/EIA/IS-91, Annex B) Protocol Summary: The user data payload may contain 1-14 characters, which are treated as normal text user data payload. Note that the characters encoding is 6-bit packed.
IS-91 CLI message (callback number) decoding (See 3GPP2 C.S0015-A, Table 4.3.1.4.1-1) Protocol Summary: The data payload may contain 1-32 digits, encoded using standard 4-bit DTMF, which are treated as a callback number.
Create BearerData object from serialized representation. (See 3GPP2 C.R1001-F, v1.0, section 4.5 for layout details)
TODO(cleanup): Refactor the parsing for addresses to better share code and logic with GSM.  Also, gather all DTMF/BCD processing code in one place.
Given a numeric address string, return the string without syntactic sugar, meaning parens, spaces, hyphens/minuses, or plus signs.  If the input string contains non-numeric non-punctuation characters, return null.
Given a string, return the string without whitespace, including CR/LF.
Given a string, create a corresponding CdmaSmsAddress object. The result will be null if the input string is not representable using printable ASCII. For numeric addresses, the string is cleaned up by removing common punctuation.  For alpha addresses, the string is cleaned up by removing whitespace.
TODO(cleanup): Move this very generic functionality somewhere more general. Given a string generate a corresponding ASCII-encoded byte array, but limited to printable characters.  If the input contains unprintable characters, return null.
package*/ void
package*/ void
Called by CdmaConnection when it has disconnected
package*/ void
package*/ boolean
connections to be added via "conference" package*/ boolean
Called when this Call is being hung up locally (eg, user pressed "end") Note that at this point, the hangup request has been dispatched to the radio but no response has yet been received so update() has not yet been called
Called when it's time to clean up disconnected Connection objects
Public Methods
Called from CdmaConnection package*/ void
package*/ void
package*/ void
package*/ boolean
package */ void
Handle Ecm timer to be canceled or re-started
Disable data call when emergency call is connected
Check and enable data call after an emergency call is dropped if it's not in ECM
Check the MT call to see if it's a new ring or a unknown connection.
Check if current call is in emergency call
This is probably an MT call that we first saw in a CLCC response package
This is an MO call/three way call, created when dialing package
This is a Call waiting call
package*/ boolean
Called when this Connection is being hung up locally (eg, user pressed "end") Note that at this point, the hangup request has been dispatched to the radio but no response has yet been received so update() has not yet been called
package*/ void
Called when the radio indicates the connection has been disconnected package*/ void
Called when the call waiting connection has been hung up package*/ void
Returns true if state has changed, false if nothing changed package*/ boolean
Called when this Connection is in the foregroundCall when a dial is initiated. We know we're ACTIVE, and we know we're going to end up HOLDING in the backgroundCall
package*/ int
An incoming or outgoing call has connected
Set post dial state and acquire wake lock while switching to "started" or "wait" state, the wake lock will be released if state switches out of "started" or "wait" state or after WAKE_LOCK_TIMEOUT_MILLIS.
format original dial string 1) convert international dialing prefix "+" to 2) handle corner cases for PAUSE/WAIT dialing:
***** Constructor
Create the connection object
Cleanup the CDMA data connection (only one is supported)
Return true if data connection need to be setup after disconnected due to reason.
Used to track the settings upon completion of the network change.
Check whether the specified SID and NID pair appears in the HOME SID/NID list read from NV or SIM.
Process a MMI PUK code
Private instance methods
A runnable which is used to automatically exit from Ecm after a period of time.
package*/ void
returns MEID or ESN in CDMA
Removes the given MMI from the pending list and notifies registrants that it is complete.
Returns Number of Voicemails
Notify any interested party of a Phone state change  {@link Phone.State}
Notify registrants of a change in the call state. This notifies changes in {@link Call.State} Use this when changes in the precise call state are needed, else use notifyPhoneStateChanged.
Handle to cancel or restart Ecm timer in emergency call back mode if action is CANCEL_ECM_TIMER, cancel Ecm timer and notify apps the timer is canceled; otherwise, restart Ecm timer and notify apps the timer is restarted.
Registration point for Ecm timer reset
Retrieves the PhoneSubInfo of the CDMAPhone
Retrieves the IccSmsInterfaceManager of the CDMAPhone
Retrieves the IccPhoneBookInterfaceManager of the CDMAPhone
override for allowing access from other classes of this package {@inheritDoc}
Activate or deactivate cell broadcast SMS.
Query the current configuration of cdma cell broadcast SMS.
Configure cdma cell broadcast SMS.
This function extracts the system selection code from the dial string.
The following function checks if a dial string is a carrier specified OTASP number or not by checking against the OTASP number schema stored in PROPERTY_OTASP_NUM_SCHEMA. Currently, there are 2 schemas for carriers to specify the OTASP number: 1) Use system selection code: 2) Use feature code:
Store the voicemail number in preferences
Sets PROPERTY_ICC_OPERATOR_ISO_COUNTRY property
Sets the "current" field in the telephony provider according to the build-time operator numeric property
Sets the "current" field in the telephony provider according to the SIM's operator. Implemented in {@link CDMALTEPhone} for CDMA/LTE devices.
Registration point for subscription info ready
Determine data network type based on radio technology.
Hanlde the PollStateResult message
Returns a TimeZone object based only on parameters from the NITZ string.
Determine whether a roaming indicator is in the carrier-specified list of ERIs for home system
Set the timezone and send out a sticky broadcast so the system can determine if the timezone was set by the carrier.
Set the time and Send out a sticky broadcast so the system can determine if the time was set by the carrier.
Check whether a specified system ID that matches one of the home system IDs.
that could support voice and data simultaneously.
Returns null if NV is not yet ready
Returns IMSI as MCC + MNC + MIN
Check if subscription data has been assigned to mMin return true if MIN info is ready; false otherwise.
Returns OTASP_UNKNOWN, OTASP_NEEDED or OTASP_NOT_NEEDED
Processes inbound messages that are in the WAP-WDP PDU format. See wap-259-wdp-20010614-a section 6.5 for details on the WAP-WDP PDU format. WDP segments are gathered until a datagram completes and gets dispatched.
Optional check to see if the received WapPush is an OMADM notification with erroneous extra port fields. - Some carriers make this mistake. ex: MSGTYPE-TotalSegments-CurrentSegment
Load the ERI file from the MODEM through chipset specific RIL_REQUEST_OEM_HOOK In this case the ERI file can be updated from the Phone Support Tool available from the Chipset vendor
Load the ERI file from a File System file In this case the a Phone Support Tool to update the ERI file must be provided to the Operator
Load the ERI file from the application framework resources encoded in XML
Returns the version of the ERI file
Returns the number of ERI entries parsed
Returns the ERI file type value ( 0 for Phase 0, 1 for Phase 1)
Returns if the ERI file has been loaded
Returns the EriInfo record associated with roamingIndicator or null if the entry is not found
Returns null if RUIM is not yet ready
Returns the 5 or 6 digit MCC/MNC of the operator that provided the RUIM card. Returns null of RUIM is not yet ready
Copy a raw SMS PDU to the RUIM.
Retrieves all messages currently stored on RUIM.
Create an SmsMessage from a raw PDU. Note: In CDMA the PDU is just a byte representation of the received Sms.
Create a "raw" CDMA SmsMessage from a Parcel that was forged in ril.cpp. Note: Only primitive fields are set.
Note: This function is a GSM specific functionality which is not supported in CDMA mode.
Get an SMS-SUBMIT PDU for a destination address and a message
Get an SMS-SUBMIT PDU for a data message to a destination address and port.
Get an SMS-SUBMIT PDU for a data message to a destination address &amp; port
Note: This function is a GSM specific functionality which is not supported in CDMA mode.
Note: This function is a GSM specific functionality which is not supported in CDMA mode.
{@inheritDoc} Note: This function is a GSM specific functionality which is not supported in CDMA mode.
Returns the status for a previously submitted message. For not interfering with status codes from GSM, this status code is shifted to the bits 31-16.
Return true iff the bearer data message type is DELIVERY_ACK.
Note: This function is a GSM specific functionality which is not supported in CDMA mode.
Calculate the number of septets needed to encode the message.
Returns the teleservice type of the message. {@link com.android.internal.telephony.cdma.sms.SmsEnvelope#TELESERVICE_NOT_SET}, {@link com.android.internal.telephony.cdma.sms.SmsEnvelope#TELESERVICE_WMT}, {@link com.android.internal.telephony.cdma.sms.SmsEnvelope#TELESERVICE_WEMT}, {@link com.android.internal.telephony.cdma.sms.SmsEnvelope#TELESERVICE_VMN}, {@link com.android.internal.telephony.cdma.sms.SmsEnvelope#TELESERVICE_WAP}
Returns the message type of the message. {@link com.android.internal.telephony.cdma.sms.SmsEnvelope#MESSAGE_TYPE_POINT_TO_POINT}, {@link com.android.internal.telephony.cdma.sms.SmsEnvelope#MESSAGE_TYPE_BROADCAST}, {@link com.android.internal.telephony.cdma.sms.SmsEnvelope#MESSAGE_TYPE_ACKNOWLEDGE},
Decodes pdu to an empty SMS object. In the CDMA case the pdu is just an internal byte stream representation of the SMS Java-object.
Decodes 3GPP2 sms stored in CSIM/RUIM cards As per 3GPP2 C.S0015-0
Parses a SMS message from its BearerData stream. (mobile-terminated only)
Calculate the next message id, starting at 1 and iteratively incrementing within the range 1..65535 remembering the state via a persistent system property.  (See C.S0015-B, v2.0, 4.3.1.5) Since this routine is expected to be accessed via via binder-call, and hence should be thread-safe, it has been synchronized.
Creates BearerData and Envelope from parameters for a Submit SMS.
Creates byte array (pseudo pdu) from SMS object. Note: Do not call this method more than once per object!
Converts a 4-Bit DTMF encoded symbol from the calling address number to ASCII character
This function  shall be called to get the number of voicemails.
Returns a byte array that can be use to uniquely identify a received SMS message. C.S0015-B  4.3.1.6 Unique Message Identification.
Called by GsmConnection when it has disconnected
package*/ void
This is probably an MT call that we first saw in a CLCC response package
This is an MO call, created when dialing package
package*/ int
Set post dial state and acquire wake lock while switching to "started" state, the wake lock will be released if state switches out of "started" state or after WAKE_LOCK_TIMEOUT_MILLIS.
Return all active apn types
Return active apn of specific apn type
Return state of overall
A new APN has gone active and needs to send events to catch up with the current condition
Called from ServiceStateTracker Invoked when ServiceStateTracker observes a transition from GPRS attach to detach.
Disabled apn's still need avail/unavail notificiations - send them out
If tearDown is true, this only tears down a CONNECTED session. Presently, there is no mechanism for abandoning an INITING/CONNECTING session, but would likely involve cancelling pending async requests or setting a flag or new state to ignore them when they came in disconnected.
Cancels the alarm associated with DCAC.
Handles changes to the APN database.
or RIL_UNSOL_DATA_CALL_LIST_CHANGED
TODO: For multiple Active APNs not exactly sure how to do this.
Returns true if the last fail cause is something that seems like it deserves an error notification. Transient errors are ignored
TODO: We shouldnt need this.
Based on the sim operator numeric, create a list for all possible Data Connections and setup the preferredApn.
Return the id for a new data connection
Build a list of APNs to be used to create PDP's.
Helper function for newFromDialString. Returns true if dialString appears to be a short code AND conditions are correct for it to be treated as such.
Helper function for isShortCode. Returns true if dialString appears to be a short code and it is a USSD structure According to the 3PGG TS 22.030 specification Figure 3.5.3.2: A 1 or 2 digit "short code" is treated as USSD if it is entered while on a call or does not satisfy the condition (exactly 2 digits && starts with '1'), there are however exceptions to this rule (see below) Exception (1) to Call initiation is: If the user of the device is already in a call and enters a Short String without any #-key at the end and the length of the Short String is equal or less then the MAX_LENGTH_SHORT_CODE [constant that is equal to 2] The phone shall initiate a USSD/SS commands. Exception (2) to Call initiation is: If the user of the device enters one Digit followed by the #-key. This rule defines this String as the #-String which is a USSD/SS command. The phone shall initiate a USSD/SS command.
returns CommandsInterface.CLIR_ See also isTemporaryModeCLIR()
Returns true if this is a USSD code that's been submitted to the network...eg, after processCode() is called
Process a MMI code or short code...anything that isn't a dialing number
Called from GSMPhone An unsolicited USSD NOTIFY or REQUEST has come in matching up with this pending USSD request Note: If REQUEST, this exchange is complete, but the session remains
Called from GSMPhone The radio has reset, and this is still pending
Private instance methods
Notify any interested party of a Phone state change {@link Phone.State}
package*/ void
package*/ void
package*/ void
Removes the given MMI from the pending list and notifies registrants that it is complete. package*/ void
Make sure the network knows our preferred setting.
Sets the "current" field in the telephony provider according to the SIM's operator
Saves CLIR setting so that we can re-apply it as necessary (in case the RIL resets it across reboots).
Retrieves the PhoneSubInfo of the GSMPhone
Retrieves the IccSmsInterfaceManager of the GSMPhone
Retrieves the IccPhoneBookInterfaceManager of the GSMPhone
Handle the result of one of the pollState()-related requests
A complete "service state" from our perspective is composed of a handful of separate requests to the radio. We make all of these requests at once, but then abandon them and start over again if the radio notifies us that some event has changed
Check if GPRS got registered while voice is registered.
Send signal-strength-changed notification if changed. Called both for solicited and unsolicited signal strength updates.
Set restricted state based on the OnRestrictedStateChanged notification If any voice or packet restricted state changes, trigger a UI notification and notify registrants when sim is ready.
code is registration state 0-5 from TS 27.007 7.2
code is registration state 0-5 from TS 27.007 7.2 returns true if registered roam, false otherwise
Set roaming state when gsmRoaming is true and, if operator mcc is the same as sim mcc, ons is different from spn
and OUT_OF_SERVICE is the same as detached.
Provides the name of the algorithmic time zone for the specified offset.  Taken from TimeZone.java.
nitzReceiveTime is time_t that the NITZ time was posted
Post a notification to NotificationManager for restricted state
New GsmSmsAddress from TS 23.040 9.1.2.5 Address Field
Returns true if this is an alphanumeric address
Returns true of this is a valid CPHS voice message waiting indicator address
Returns true if this is a valid CPHS voice message waiting indicator address indicating a "set" of "indicator 1" of type "voice message waiting"
Returns true if this is a valid CPHS voice message waiting indicator address indicating a "clear" of "indicator 1" of type "voice message waiting"
Called when a status report is received.  This should correspond to a previously successful SEND.
Checks if this concatenation info matches the given location. The granularity of the match depends on the geographical scope.
Handle 3GPP format SMS-CB message.
We have the Sim card for LTE on CDMA phone
***** Constructor
Set subscriber number to SIM record The subscriber number is stored in EF_MSISDN (TS 51.011) When the operation is complete, onComplete will be sent to its handler
Set voice mail number to SIM record The voice mail number can be stored either in EF_MBDN (TS 51.011) or EF_MAILBOX_CPHS (CPHS 4.2) If EF_MBDN is available, store the voice mail number to EF_MBDN If EF_MAILBOX_CPHS is enabled, store the voice mail number to EF_CHPS So the voice mail number will be stored in both EFs if both are available Return error only if both EF_MBDN and EF_MAILBOX_CPHS fail. When the operation is complete, onComplete will be sent to its handler
Called by STK Service when REFRESH is received.
***** Overridden from Handler
Dispatch 3GPP format message. Overridden for CDMA/LTE phones by {@link com.android.internal.telephony.cdma.CdmaLteUiccRecords} to send messages to the secondary 3GPP format SMS dispatcher.
Private methods
Checks if plmn is HPLMN or on the spdiNetworks list.
Finite State Machine to load Service Provider Name , which can be stored in either EF_SPN (3GPP), EF_SPN_CPHS, or EF_SPN_SHORT_CPHS (CPHS4.2) After starting, FSM will search SPN EFs in order and stop after finding the first valid SPN
check to see if Mailbox Number is allocated and activated in CPHS SST
Return true if "Restriction of menu options for manual PLMN selection" bit is set or EF_CSP data is unavailable, return false otherwise.
Parse EF_CSP data and check if "Restriction of menu options for manual PLMN selection" is Enabled/Disabled
Copy a raw SMS PDU to the SIM.
Retrieves all messages currently stored on ICC.
Called when the list of enabled ranges has changed. This will be followed by zero or more calls to {@link #addRange} followed by a call to {@link #finishUpdate}.
Called after {@link #startUpdate} to indicate a range of enabled values.
Called to indicate the end of a range update started by the previous call to {@link #startUpdate}.
Returns the tag for the current TLV object Return 0 if !isValidObject() 0 and 0xff are invalid tag values valid tags range from 1 - 0xfe
Returns data associated with current TLV object returns null if !isValidObject()
Updates curDataLength and curDataOffset
Initialize the object from rssi and cid.
Return whether the specified message ID is an emergency (PWS) message type. This method is static and takes an argument so that it can be used by CellBroadcastReceiver, which stores message ID's in SQLite rather than PDU.
Return whether the specified message ID is an ETWS emergency message type. This method is static and takes an argument so that it can be used by CellBroadcastReceiver, which stores message ID's in SQLite rather than PDU.
Return whether the specified message ID is a CMAS emergency message type. This method is static and takes an argument so that it can be used by CellBroadcastReceiver, which stores message ID's in SQLite rather than PDU.
Return whether the specified message code indicates an ETWS popup alert. This method is static and takes an argument so that it can be used by CellBroadcastReceiver, which stores message codes in SQLite rather than PDU. This method assumes that the message ID has already been checked for ETWS type.
Return whether the specified message code indicates an ETWS emergency user alert. This method is static and takes an argument so that it can be used by CellBroadcastReceiver, which stores message codes in SQLite rather than PDU. This method assumes that the message ID has already been checked for ETWS type.
Create an SmsMessage from a raw PDU.
3GPP TS 23.040 9.2.3.9 specifies that Type Zero messages are indicated by TP_PID field set to value 0x40
TS 27.005 3.4.1 lines[0] and lines[1] are the two lines read from the +CMT unsolicited response (PDU mode, of course) +CMT: [&lt;alpha>],<length><CR><LF><pdu> Only public for debugging {@hide}
Get the TP-Layer-Length for the given SMS-SUBMIT PDU Basically, the length in bytes (not hex chars) less the SMSC header
Get an SMS-SUBMIT PDU for a destination address and a message using the specified encoding.
Packs header and UCS-2 encoded message. Includes TP-UDL & TP-UDHL if necessary
Create the beginning of a SUBMIT PDU.  This is the part of the SUBMIT PDU that is common to the two versions of {@link #getSubmitPdu}, one of which takes a byte array and the other of which takes a <code>String</code>.
Parse and return the SC address prepended to SMS messages coming via the TS 27.005 / AT interface.  Returns null on invalid address
returns non-sign-extended byte value
Any address except the SC address (eg, originating address) See TS 23.040 9.1.2.5
Parses an SC timestamp and returns a currentTimeMillis()-style timestamp
Pulls the user data out of the PDU, and separates the payload from the header if there is one. of octets
Returns the user data payload, not including the headers
Returns the number of padding bits at the beginning of the user data array before the start of the septets. array before the start of the septets
Returns an object representing the user data headers {@hide}
Interprets the user data payload as packed GSM 7bit characters, and decodes them into a String.
Interprets the user data payload as UCS2 characters, and decodes them into a String.
Interprets the user data payload as KSC-5601 characters, and decodes them into a String.
TS 27.005 3.1, &lt;pdu&gt; definition "In the case of SMS: 3GPP TS 24.011 [6] SC address followed by 3GPP TS 23.040 [3] TPDU in hexadecimal format: ME/TA converts each octet of TP data unit into two IRA character long hex number (e.g. octet with integer value 42 is presented to TE as two characters 2A (IRA 50 and 65))" ...in the case of cell broadcast, something else...
Parses a SMS-STATUS-REPORT message.
Parses the User Data of an SMS.
Request the ISIM records to load.
ISIM records for IMS are stored inside a Tag-Length-Value record as a UTF-8 string with tag value 0x80.
Return the IMS private user identity (IMPI). Returns null if the IMPI hasn't been loaded or isn't present on the ISIM.
Return the IMS home network domain name. Returns null if the IMS domain hasn't been loaded or isn't present on the ISIM.
Return an array of IMS public user identities (IMPU). Returns null if the IMPU hasn't been loaded or isn't present on the ISIM.
Makes a {@link SipPhone} object.
Runnable Implementation
CommandsInterface implementation
returned message retMsg.obj = AsyncResult ar ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result contains a List of DriverCall
returned message retMsg.obj = AsyncResult ar ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result contains a List of DataCallState
returned message retMsg.obj = AsyncResult ar ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure CLIR_DEFAULT     == on "use subscription default value" CLIR_SUPPRESSION == on "CLIR suppression" (allow CLI presentation) CLIR_INVOCATION  == on "CLIR invocation" (restrict CLI presentation)
returned message retMsg.obj = AsyncResult ar ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is String containing IMSI on success
returned message retMsg.obj = AsyncResult ar ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is String containing IMEI on success
returned message retMsg.obj = AsyncResult ar ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is String containing IMEISV on success
Hang up one individual connection. returned message retMsg.obj = AsyncResult ar ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure 3GPP 22.030 6.5.5 "Releases a specific active call X"
3GPP 22.030 6.5.5 "Releases all held calls or sets User Determined User Busy (UDUB) for a waiting call." ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
3GPP 22.030 6.5.5 "Releases all active calls (if any exist) and accepts the other (held or waiting) call." ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
3GPP 22.030 6.5.5 "Places all active calls (if any exist) on hold and accepts the other (held or waiting) call." ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
3GPP 22.030 6.5.5 "Adds a held call to the conversation" ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
3GPP 22.030 6.5.5 "Connects the two calls and disconnects the subscriber from both calls" ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
3GPP 22.030 6.5.5 "Places all active calls on hold except call X with which communication shall be supported."
ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
also known as UDUB ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
cause code returned as Integer in Message.obj.response Returns integer cause code defined in TS 24.008 Annex H or closest approximation. Most significant codes: - Any defined in 22.001 F.4 (for generating busy/congestion) - Cause 68: ACM >= ACMMax
response.obj is an AsyncResult response.obj.result is an int[2] response.obj.result[0] is received signal strength (0-31, 99) response.obj.result[1] is  bit error rate (0-7, 99) as defined in TS 27.007 8.5
Assign a specified band for RF configuration.
Query the list of band mode supported by RF.
response.obj.result is an String[14] See ril.h for details Please note that registration state 4 ("unknown") is treated as "out of service" above
response.obj.result is an String[4] response.obj.result[0] is registration state 0-5 from TS 27.007 7.2 response.obj.result[1] is LAC if registered or NULL if not response.obj.result[2] is CID if registered or NULL if not response.obj.result[3] indicates the available radio technology, where: valid LAC are 0x0000 - 0xffff valid CID are 0x00000000 - 0xffffffff Please note that registration state 4 ("unknown") is treated as "out of service" in the Android telephony system
response.obj.result is a String[3] response.obj.result[0] is long alpha or null if unregistered response.obj.result[1] is short alpha or null if unregistered response.obj.result[2] is numeric or null if unregistered
ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
ar.exception carries exception on failure ar.userObject contains the original value of result.obj ar.result is null on success and failure
parameters equivalent to 27.007 AT+CRSM command response.obj will be an AsyncResult response.obj.userObj will be a SimIoResult on success
(AsyncResult)response.obj).result is an int[] with element [0] set to 0 for disabled, 1 for enabled.
Queries whether the current network selection mode is automatic or manual ((AsyncResult)response.obj).result  is an int[] with element [0] being a 0 for automatic selection and a 1 for manual selection
Simulates an incoming USSD message in CommandsInterface.java
inherited javadoc suffices
Private Methods
Set the TTY mode - {@link com.android.internal.telephony.Phone#TTY_MODE_OFF} - {@link com.android.internal.telephony.Phone#TTY_MODE_FULL} - {@link com.android.internal.telephony.Phone#TTY_MODE_HCO} - {@link com.android.internal.telephony.Phone#TTY_MODE_VCO}
Query the TTY mode (AsyncResult)response.obj).result is an int[] with element [0] set to tty mode: - {@link com.android.internal.telephony.Phone#TTY_MODE_OFF} - {@link com.android.internal.telephony.Phone#TTY_MODE_FULL} - {@link com.android.internal.telephony.Phone#TTY_MODE_HCO} - {@link com.android.internal.telephony.Phone#TTY_MODE_VCO}
Overridden from Handler
Instance Methods
Helper function for {@link #isEqual}.
Parcelable Implementation
Build adn hex byte array based on record size The format of byte array is defined in 51.011 10.5.1
Called from SIMRecords.onRadioNotAvailable and SIMRecords.handleSimRefresh.
Returns extension ef associated with ADN-like EF or -1 if we don't know. See 3GPP TS 51.011 for this mapping
Update an ADN-like record in EF by record index
Replace oldAdn with newAdn in ADN-like record in EF The ADN-like records must be read through requestLoadAllAdnLike() before
Creates an ApnSetting object from a string. The string must be in one of two formats (newlines added for clarity, spaces are optional): v1 format: <carrier>, <apn>, <proxy>, <port>, <mmsc>, <mmsproxy>, <mmsport>, <user>, <password>, <authtype>, <mcc>,<mnc>, <type>[, <type>...] v2 format: [ApnSettingV2] <carrier>, <apn>, <proxy>, <port>, <mmsc>, <mmsproxy>, <mmsport>, <user>, <password>, <authtype>, <mcc>, <mnc>, <type>[| <type>...], <protocol>, <roaming_protocol>, <carrierEnabled>, <bearer> Note that the strings generated by toString() do not contain the username and password and thus cannot be read by this method.
CommandsInterface implementation
Any transition into SIM_READY
Any transition into RUIM_READY
Any transition into NV_READY
Protected Methods Store new RadioState and send notification based on the changes This function is called only by RIL.java when receiving unsolicited RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED RadioState has 5 values : RADIO_OFF, RADIO_UNAVAILABLE, SIM_NOT_READY, SIM_LOCKED_OR_ABSENT, and SIM_READY.
The contents of the /proc/cmdline file
Return if the current radio is LTE on CDMA. This is a tri-state return value as for a period of time the mode may be unknown. or {@link Phone#LTE_ON_CDMA_TRUE}
isIdle FIXME rename
To indicate if the connection information is accurate or not. false means accurate. Only used for CDMA.
Set the generic instance variable
Hangup call if it is alive
getCallerInfo given a Cursor. number. The returned CallerInfo is null if no number is supplied.
getCallerInfo given a URI, look up in the call-log database for the uri unique key. number. The returned CallerInfo is null if no number is supplied.
getCallerInfo given a phone number, look up in the call-log database for the matching caller id info. number. The returned CallerInfo is null if no number is supplied. If a matching number is not found, then a generic caller info is returned, with all relevant fields empty or null.
Performs another lookup if previous lookup fails and it's a SIP call and the peer's username is all numeric. Look up the username as it could be a PSTN number in the contact database.
getCallerId: a convenience method to get the caller id for a given number. returned; otherwise, the number itself is returned. TODO NOTE: This MAY need to refer to the Asynchronous Query API [startQuery()], instead of getCallerInfo, but since it looks like it is only being used by the provider calls in the messaging app: 1. android.provider.Telephony.Mms.getDisplayAddress() 2. android.provider.Telephony.Sms.getDisplayAddress() We may not need to make the change.
Mark this CallerInfo as an emergency call. TODO: Note we're setting the phone number here (refer to javadoc comments at the top of CallerInfo class) to a localized string 'Emergency Number'. This is pretty bad because we are making UI work here instead of just packaging the data. We should set the phone number to the dialed number and name to 'Emergency Number' and let the UI make the decision about what should be displayed.
Mark this CallerInfo as a voicemail call. The voicemail label is obtained from the telephony manager. Caller must hold the READ_PHONE_STATE permission otherwise the phoneNumber will be set to null. TODO: As in the emergency number handling, we end up writing a string in the phone number field.
Returns the column index to use to find the "person_id" field in the specified cursor, based on the contact URI that was originally queried. This is a helper function for the getCallerInfo() method that takes a Cursor.  Looking up the person_id is nontrivial (compared to all the other CallerInfo fields) since the column we need to use depends on what query we originally ran. Watch out: be sure to not do any database access in this method, since it's run from the UI thread (see comments below for more info.) person_id, or -1 if we couldn't figure out what colum to use. TODO: Add a unittest for this method.  (This is a little tricky to test, since we'll need a live contacts database to test against, preloaded with at least some phone numbers and SIP addresses.  And we'll probably have to hardcode the column indexes we expect, so the test might break whenever the contacts schema changes.  But we can at least make sure we handle all the URI patterns we claim to, and that the mime types match what we expect...)
Updates this CallerInfo's geoDescription field, based on the raw phone number in the phoneNumber field. (Note that the various getCallerInfo() methods do *not* set the geoDescription automatically; you need to call this method explicitly to get it.)
Asynchronous query handler class for the contact / callerinfo object.
Factory method to start query with a Uri query spec
Factory method to start the query based on a number. Note: if the number contains an "@" character we treat it as a SIP address, and look it up directly in the Data table rather than using the PhoneLookup table. TODO: But eventually we should expose two separate methods, one for numbers and one for SIP addresses, and then have PhoneUtils.startGetCallerInfo() decide which one to call based on the phone type of the incoming connection.
Method to add listeners to a currently running query
Method to create a new CallerInfoAsyncQueryHandler object, ensuring correct state of context and uri.
Releases the relevant data.
get singleton instance of CallManager
Get the corresponding PhoneBase obj is a PhoneProxy obj or the Phone itself if Phone is not a PhoneProxy obj
Check if two phones refer to the same PhoneBase obj Note: PhoneBase, not PhoneProxy, is to be used inside of CallManager Both PhoneBase and PhoneProxy implement Phone interface, so they have same phone APIs, such as dial(). The real implementation, for example in GSM,  is in GSMPhone as extend from PhoneBase, so that foregroundCall.getPhone() returns GSMPhone obj. On the other hand, PhoneFactory.getDefaultPhone() returns PhoneProxy obj, which has a class member of GSMPhone. So for phone returned by PhoneFacotry, which is used by PhoneApp, but
Returns all the registered phone objects.
Get current coarse-grained voice call state. If the Call Manager has an active call and call waiting occurs, then the phone state is RINGING not OFFHOOK
highest priority state of all the service states of phones The priority is defined as STATE_IN_SERIVCE > STATE_OUT_OF_SERIVCE > STATE_EMERGENCY > STATE_POWER_OFF
Register phone to CallManager
unregister phone from CallManager
return the default phone or null if no phone available
Answers a ringing or waiting call. Active call, if any, go on hold. If active call can't be held, i.e., a background call of the same channel exists, the active call will be hang up. Answering occurs asynchronously, and final notification occurs via {@link #registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object) registerForPreciseCallStateChanged()}.
Reject (ignore) a ringing call. In GSM, this means UDUB (User Determined User Busy). Reject occurs asynchronously, and final notification occurs via {@link #registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object) registerForPreciseCallStateChanged()}.
Places active call on hold, and makes held call active. Switch occurs asynchronously and may fail. There are 4 scenarios 1. only active call but no held call, aka, hold 2. no active call but only held call, aka, unhold 3. both active and held calls from same phone, aka, swap 4. active and held calls from different phones, aka, phone swap Final notification occurs via {@link #registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object) registerForPreciseCallStateChanged()}. dialing/alerting, or heldCall can't be active. In these cases, this operation may not be performed.
Hangup foreground call and resume the specific background call Note: this is noop if there is no foreground call or the heldCall is null
Whether or not the phone can conference in the current phone state--that is, one call holding and one call active.
Conferences holding and active. Conference occurs asynchronously and may fail. Final notification occurs via {@link #registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object) registerForPreciseCallStateChanged()}. In these cases, this operation may not be performed.
Initiate a new voice connection. This happens asynchronously, so you cannot assume the audio path is connected (or a call index has been assigned) until PhoneStateChanged notification has occurred. possible because no more call slots exist or a call exists that is dialing, alerting, ringing, or waiting.  Other errors are handled asynchronously.
clear disconnect connection for each phone
Phone can make a call only if ALL of the following are true:
Whether or not the phone can do explicit call transfer in the current phone state--that is, one call holding and one call active.
Connects the held call and active call Disconnects the subscriber from both calls Explicit Call Transfer occurs asynchronously and may fail. Final notification occurs via {@link #registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object) registerForPreciseCallStateChanged()}. In these cases, this operation may not be performed.
Returns a list of MMI codes that are pending for a phone. (They have initiated but have not yet completed). Presently there is only ever one. Use <code>registerForMmiInitiate</code> and <code>registerForMmiComplete</code> for change notification.
Sends user response to a USSD REQUEST message.  An MmiCode instance representing this response is sent to handlers registered with registerForMmiInitiate.
Mutes or unmutes the microphone for the active call. The microphone is automatically unmuted if a call is answered, dialed, or resumed from a holding state. false to activate the microphone.
Gets current mute status. Use {@link #registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object) registerForPreciseCallStateChanged()} as a change notifcation, although presently phone state changed is not fired when setMute() is called.
Enables or disables echo suppression.
Play a DTMF tone on the active call. silently ignored.
Start to paly a DTMF tone on the active call. or there is a playing DTMF tone. silently ignored.
Stop the playing DTMF tone. Ignored if there is no playing DTMF tone or no active call.
send burst DTMF tone, it can send the string as single character or multiple character ignore if there is no active call or not valid digits string. Valid digit means only includes characters ISO-LATIN characters 0-9, *, # The difference between sendDtmf and sendBurstDtmf is sendDtmf only sends one character, this api can send single character and multiple character, also, this api has response back to caller.
Notifies when a voice connection has disconnected, either due to local or remote hangup or error. Messages received from this will have the following members:<p> <ul><li>Message.obj will be an AsyncResult</li> <li>AsyncResult.userObj = obj</li> <li>AsyncResult.result = a Connection object that is no longer connected.</li></ul>
Unregisters for voice disconnection notification. Extraneous calls are tolerated silently
Register for getting notifications for change in the Call State {@link Call.State} This is called PreciseCallState because the call state is more precise than the {@link Phone.State} which can be obtained using the {@link PhoneStateListener} Resulting events will have an AsyncResult in <code>Message.obj</code>. AsyncResult.userData will be set to the obj argument here. The <em>h</em> parameter is held only by a weak reference.
Unregisters for voice call state change notifications. Extraneous calls are tolerated silently.
Notifies when a previously untracked non-ringing/waiting connection has appeared. This is likely due to some other entity (eg, SIM card application) initiating a call.
Unregisters for unknown connection notifications.
Notifies when a new ringing or waiting connection has appeared.<p> Messages received from this: Message.obj will be an AsyncResult AsyncResult.userObj = obj AsyncResult.result = a Connection. <p> Please check Connection.isRinging() to make sure the Connection has not dropped since this message was posted. If Connection.isRinging() is true, then Connection.getCall() == Phone.getRingingCall()
Unregisters for new ringing connection notification. Extraneous calls are tolerated silently
Notifies when an incoming call rings.<p> Messages received from this: Message.obj will be an AsyncResult AsyncResult.userObj = obj AsyncResult.result = a Connection. <p>
Unregisters for ring notification. Extraneous calls are tolerated silently
Notifies when out-band ringback tone is needed.<p> Messages received from this: Message.obj will be an AsyncResult AsyncResult.userObj = obj AsyncResult.result = boolean, true to start play ringback tone
Unregisters for ringback tone notification.
Registers the handler to reset the uplink mute state to get uplink audio.
Unregisters for resend incall mute notifications.
Register for notifications of initiation of a new MMI code request. MMI codes for GSM are discussed in 3GPP TS 22.030.<p> Example: If Phone.dial is called with "*#31#", then the app will be notified here.<p> The returned <code>Message.obj</code> will contain an AsyncResult. <code>obj.result</code> will be an "MmiCode" object.
Unregisters for new MMI initiate notification. Extraneous calls are tolerated silently
Register for notifications that an MMI request has completed its network activity and is in its final state. This may mean a state of COMPLETE, FAILED, or CANCELLED. <code>Message.obj</code> will contain an AsyncResult. <code>obj.result</code> will be an "MmiCode" object
Unregisters for MMI complete notification. Extraneous calls are tolerated silently
Unregister for notification for Ecm timer reset
Register for ServiceState changed. Message.obj will contain an AsyncResult. AsyncResult.result will be a ServiceState instance
Unregisters for ServiceStateChange notification. Extraneous calls are tolerated silently
Register for notifications when a supplementary service attempt fails. Message.obj will contain an AsyncResult.
Unregister for notifications when a supplementary service attempt fails. Extraneous calls are tolerated silently
Register for notifications when a sInCall VoicePrivacy is enabled
Unregister for notifications when a sInCall VoicePrivacy is enabled
Register for notifications when a sInCall VoicePrivacy is disabled
Unregister for notifications when a sInCall VoicePrivacy is disabled
Register for notifications when CDMA call waiting comes
Unregister for notifications when CDMA Call waiting comes
Register for signal information notifications from the network. Message.obj will contain an AsyncResult. AsyncResult.result will be a SuppServiceNotification instance.
Unregisters for signal information notifications. Extraneous calls are tolerated silently
Register for display information notifications from the network. Message.obj will contain an AsyncResult. AsyncResult.result will be a SuppServiceNotification instance.
Unregisters for display information notifications. Extraneous calls are tolerated silently
Register for notifications when CDMA OTA Provision status change
Unregister for notifications when CDMA OTA Provision status change
Unregister for notifications for subscription info
Sets an event to be fired when the telephony system processes a post-dial character on an outgoing call.<p> Messages of type <code>what</code> will be sent to <code>h</code>. The <code>obj</code> field of these Message's will be instances of <code>AsyncResult</code>. <code>Message.obj.result</code> will be a Connection object.<p> Message.arg1 will be the post dial character being processed, or 0 ('\0') if end of string.<p> If Connection.getPostDialState() == WAIT, the application must call {@link com.android.internal.telephony.Connection#proceedAfterWaitChar() Connection.proceedAfterWaitChar()} or {@link com.android.internal.telephony.Connection#cancelPostDial() Connection.cancelPostDial()} for the telephony system to continue playing the post-dial DTMF sequence.<p> If Connection.getPostDialState() == WILD, the application must call {@link com.android.internal.telephony.Connection#proceedAfterWildChar Connection.proceedAfterWildChar()} {@link com.android.internal.telephony.Connection#cancelPostDial() Connection.cancelPostDial()} for the telephony system to continue playing the post-dial DTMF sequence.<p>
Return true if there is at least one active foreground call
Return true if there is at least one active background call
Return true if there is at least one active ringing call
return the active foreground call from foreground calls Active call means the call is NOT in Call.State.IDLE 1. If there is active foreground call, return it 2. If there is no active foreground call, return the 3. If there is no phone registered at all, return null.
Returns the first call that is not in IDLE state. If both active calls and disconnecting/disconnected calls exist, return the first active call.
return one active background call from background calls Active call means the call is NOT idle defined by Call.isIdle() 1. If there is only one active background call, return it 2. If there is more than one active background call, return the first one 3. If there is no active background call, return the background call 4. If there is no background call at all, return null. Complete background calls list can be get by getBackgroundCalls()
return one active ringing call from ringing calls Active call means the call is NOT idle defined by Call.isIdle() 1. If there is only one active ringing call, return it 2. If there is more than one active ringing call, return the first one 3. If there is no active ringing call, return the ringing call 4. If there is no ringing call at all, return null. Complete ringing calls list can be get by getRingingCalls()
return IDLE if there is no active foreground call
return empty list if there is no active foreground call
return empty list if there is no active background call
return null if there is no active foreground call
Gets CDMA CNAP name associated with connection.
Get original dial string.
Gets CDMA CNAP presentation associated with connection.
If this Connection is connected, then it is associated with a Call. Returns getCall().getState() or Call.State.IDLE if not connected
Hangup individual Connection
Build a human representation of a connection instance, suitable for debugging. Don't log personal stuff unless in debug mode.
TearDown the data connection.
Send the connectionCompletedMsg.
Send ar.userObj if its a message, which is should be back to originator.
Get the DataConnection ID
increaseRetryCount of retry manager
resetRetryCount of retry manager
set retryForeverUsingLasttimeout of retry manager
Clear all settings called when entering mInactiveState.
Process setup completion.
Bring up a connection to the apn and return an AsyncResult in onCompletedMsg. Used for cellular networks that use Acesss Point Names (APN) such as GSM networks.
Tear down the connection through the apn on the network.
Request if the state machine is in the inactive state. Response {@link #rspIsInactive}
Evaluate RSP_IS_INACTIVE.
Request the Connection ID. Response {@link #rspCid}
Evaluate a RSP_GET_CID message and return the cid.
Request the Reference Count. Response {@link #rspRefCount}
Evaluate a RSP_GET_REFCOUNT message and return the refCount.
Request the connections ApnSetting. Response {@link #rspApnSetting}
Evaluate a RSP_APN_SETTING message and return the ApnSetting.
Get the connections ApnSetting.
Request the connections LinkProperties. Response {@link #rspLinkProperties}
Evaluate RSP_GET_LINK_PROPERTIES
Get the connections LinkProperties.
Request setting the connections LinkProperties.HttpProxy. Response RSP_SET_LINK_PROPERTIES when complete.
Set the connections LinkProperties.HttpProxy
Request update LinkProperties from DataCallState Response {@link #rspUpdateLinkPropertiesDataCallState}
Update link properties in the data connection
Request the connections LinkCapabilities. Response {@link #rspLinkCapabilities}
Evaluate RSP_GET_LINK_CAPABILITIES
Get the connections LinkCapabilities.
Request the connections LinkCapabilities. Response RSP_RESET when complete
Reset the connection and wait for it to complete.
Request to add ApnContext association. Response RSP_ADD_APNCONTEXT when complete.
Add ApnContext association synchronoulsy.
Request to remove ApnContext association. Response RSP_REMOVE_APNCONTEXT when complete.
Remove ApnContext associateion.
Request to retrive ApnContext List associated with DC. Response RSP_GET_APNCONTEXT_LIST when complete.
Retrieve Collection of ApnContext from the response message.
Retrieve collection of ApnContext currently associated with the DataConnectionA synchronously.
Request to set Pending ReconnectIntent to DC. Response RSP_SET_RECONNECT_INTENT when complete.
Set pending reconnect intent to DC synchronously.
Request to get Pending ReconnectIntent to DC. Response RSP_GET_RECONNECT_INTENT when complete.
Retrieve reconnect intent from response message from DC.
Retrieve reconnect intent currently set in DC synchronously.
Default constructor
TODO: See if we can remove
Modify {@link Settings.Secure#DATA_ROAMING} value.
Return current {@link Settings.Secure#DATA_ROAMING} value.
Report on whether data connectivity is enabled
tell all active apns of the current condition
a new APN has gone active and needs to send events to catch up with the current condition
since we normally don't send info to a disconnected APN, we need to do this specially
disabled apn's still need avail/unavail notificiations - send them out
Ensure that we are connected to an APN of the specified type.
The APN of the specified type is no longer needed. Ensure that if use of the default APN has not been explicitly disabled, we are connected to the default APN.
Called when EVENT_RESET_DONE is received so goto IDLE state and send notifications to those interested. TODO - currently unused.  Needs to be hooked into DataConnection cleanup TODO - needs to pass some notion of which connection is reset..
Prevent mobile data connections from being established, or once again allow mobile data connections. If the state toggles, then either tear down or set up data, as appropriate to match the new state.
Convert the {@link State} enum into the TelephonyManager.CALL_STATE_* constants for the public API.
Convert the TelephonyManager.CALL_STATE_* constants into the {@link State} enum for the public API.
Convert the {@link DataState} enum into the TelephonyManager.DATA_* constants for the public API.
Convert the TelephonyManager.DATA_* constants into {@link DataState} enum for the public API.
Convert the {@link DataState} enum into the TelephonyManager.DATA_* constants for the public API.
Convert the TelephonyManager.DATA_* constants into the {@link DataState} enum for the public API.
Converts a String into a byte array containing the 7-bit packed GSM Alphabet representation of the string. If a header is provided, this is included in the returned byte array and padded to a septet boundary. This method is used by OEM code. the encoded data, padded to septet boundary.
Converts a String into a byte array containing the 7-bit packed GSM Alphabet representation of the string. If a header is provided, this is included in the returned byte array and padded to a septet boundary. Unencodable chars are encoded as spaces Byte 0 in the returned byte array is the count of septets used, including the header and header padding. The returned byte array is the minimum size required to store the packed septets. The returned array cannot contain more than 255 septets. the encoded data, padded to septet boundary.
Converts a String into a byte array containing the 7-bit packed GSM Alphabet representation of the string. Unencodable chars are encoded as spaces Byte 0 in the returned byte array is the count of septets used The returned byte array is the minimum size required to store the packed septets. The returned array cannot contain more than 255 septets.
Converts a String into a byte array containing the 7-bit packed GSM Alphabet representation of the string. Byte 0 in the returned byte array is the count of septets used The returned byte array is the minimum size required to store the packed septets. The returned array cannot contain more than 255 septets. the character data at the beginning of the array If false, replaces unencodable char with GSM alphabet space char.
Convert a GSM alphabet 7 bit packed string (SMS string) into a {@link java.lang.String}. See TS 23.038 6.1.2.1 for SMS Character Packing
Convert a GSM alphabet 7 bit packed string (SMS string) into a {@link java.lang.String}. See TS 23.038 6.1.2.1 for SMS Character Packing string in the first byte
Returns the count of 7-bit GSM alphabet characters needed to represent this string, using the specified 7-bit language table and extension table (0 for GSM default tables).
Notifies handler of any transition into State.ABSENT
Notifies handler of any transition into State.NETWORK_LOCKED
Notifies handler of any transition into State.isPinLocked()
Supply the ICC PIN to the ICC When the operation is complete, onComplete will be sent to its Handler. onComplete.obj will be an AsyncResult ((AsyncResult)onComplete.obj).exception == null on success ((AsyncResult)onComplete.obj).exception != null on fail If the supplied PIN is incorrect: ((AsyncResult)onComplete.obj).exception != null && ((AsyncResult)onComplete.obj).exception && ((CommandException)(((AsyncResult)onComplete.obj).exception))
Check whether ICC pin lock is enabled This is a sync call which returns the cached pin enabled state
Check whether ICC fdn (fixed dialing number) is enabled This is a sync call which returns the cached pin enabled state
Set the ICC pin lock enabled or disabled When the operation is complete, onComplete will be sent to its handler
Set the ICC fdn enabled or disabled When the operation is complete, onComplete will be sent to its handler
Change the ICC password used in ICC pin lock When the operation is complete, onComplete will be sent to its handler
Change the ICC password used in ICC fdn enable When the operation is complete, onComplete will be sent to its handler
Interperate EVENT_QUERY_FACILITY_LOCK_DONE
Interperate EVENT_QUERY_FACILITY_LOCK_DONE
Default constructor
Load a record from a SIM Linear Fixed EF ((AsyncResult)(onLoaded.obj)).result is the byte[]
Load a image instance record from a SIM Linear Fixed EF-IMG ((AsyncResult)(onLoaded.obj)).result is the byte[]
get record size for a linear fixed EF
Load all records from a SIM Linear Fixed EF ((AsyncResult)(onLoaded.obj)).result is an ArrayList<byte[]>
Load a SIM Transparent EF ((AsyncResult)(onLoaded.obj)).result is the byte[]
Load a SIM Transparent EF-IMG. Used right after loadEFImgLinearFixed to retrive STK's icon data. ((AsyncResult)(onLoaded.obj)).result is the byte[]
Update a record in a linear fixed EF
Update a transparent EF
Private Methods
Overridden from Handler
Returns the root path of the EF file. i.e returns MasterFile + DFfile as a string. Ex: For EF_ADN on a SIM, it will return "3F007F10" This function handles only EFids that are common to RUIM, SIM, USIM and other types of Icc cards.
true if this operation was successful See GSM 11.11 Section 9.4 (the fun stuff is absent in 51.011)
Returns exception on error or null if success
Loads the AdnRecords in efid and returns them as a List of AdnRecords throws SecurityException if no READ_CONTACTS permission
Loads an AdnRecord into an ArrayList. Must be called with mLock held.
***** Constructor
Public Methods
Get the International Mobile Subscriber ID (IMSI) on a SIM for GSM, UMTS and like networks. Default is null if IMSI is not supported or unavailable.
Return Service Provider Name stored in SIM (EF_SPN=0x6F46) or in RUIM (EF_RUIM_SPN=0x6F41)
Returns number of voice messages waiting, if available If not available (eg, on an older CPHS SIM) -1 is returned if getVoiceMessageWaiting() is true
Return true if "Restriction of menu options for manual PLMN selection" bit is set or EF_CSP data is unavailable, return false otherwise. Generally used for GSM/UMTS and the like SIMs.
Returns the 5 or 6 digit MCC/MNC of the operator that provided the SIM card. Returns null of SIM is not yet ready or is not valid for the type of IccCard. Generally used for GSM/UMTS and the like SIMS
Get the current Voice call forwarding flag for GSM/UMTS and the like SIMs
Indicates wether SIM is in provisioned state or not. Overridden only if SIM can be dynamically provisioned via OTA.
Return an interface to retrieve the ISIM records for IMS, if available.
Send a data based SMS to a specific application port. the current default SMSC broadcast when the message is successfully sent, or failed. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors:<br> <code>RESULT_ERROR_GENERIC_FAILURE</code><br> <code>RESULT_ERROR_RADIO_OFF</code><br> <code>RESULT_ERROR_NULL_PDU</code><br> For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include the extra "errorCode" containing a radio technology specific value, generally only useful for troubleshooting.<br> The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period. broadcast when the message is delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Send a text based SMS. the current default SMSC broadcast when the message is successfully sent, or failed. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors:<br> <code>RESULT_ERROR_GENERIC_FAILURE</code><br> <code>RESULT_ERROR_RADIO_OFF</code><br> <code>RESULT_ERROR_NULL_PDU</code><br> For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include the extra "errorCode" containing a radio technology specific value, generally only useful for troubleshooting.<br> The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period. broadcast when the message is delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Send a multi-part text based SMS. the current default SMSC comprise the original message <code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors: <code>RESULT_ERROR_GENERIC_FAILURE</code> <code>RESULT_ERROR_RADIO_OFF</code> <code>RESULT_ERROR_NULL_PDU</code>. The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period. <code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
create SmsRawData lists from all sms record byte[] Use null to indicate "free" record
Generates an EF_SMS record from status and raw PDU.
Cast an IBinder object into an com.android.internal.telephony.IExtendedNetworkService interface, generating a proxy if needed.
Set a MMI/USSD command to ExtendedNetworkService for further process. This should be called when a MMI command is placed from panel.
return the specific string which is used to prompt MMI/USSD is running
Get specific message which should be displayed on pop-up dialog.
Clear pre-set MMI/USSD command. This should be called when user cancel a pre-dialed MMI command.
Cast an IBinder object into an com.android.internal.telephony.IIccPhoneBook interface, generating a proxy if needed.
Loads the AdnRecords in efid and returns them as a List of AdnRecords
Replace oldAdn with newAdn in ADN-like record in EF getAdnRecordsInEf must be called at least once before this function, otherwise an error will be returned
Update an ADN-like EF record by record index This is useful for iteration the whole ADN file, such as write the whole phone book or erase/format the whole phonebook
Get the max munber of records in efid
Create a new IntRange with a single client.
Create a new IntRange for an existing ClientRange.
Create a new IntRange from an existing IntRange. This is used for removing a ClientRange, because new IntRanges may need to be created for any gaps that open up after the ClientRange is removed. A copy is made of the elements of the original IntRange preceding the element that is being removed. The following elements will be added to this IntRange or to a new IntRange when a gap is found.
Insert new ClientRange in order by start id. <p>If the new ClientRange is known to be sorted before or after the existing ClientRanges, or at a particular index, it can be added to the clients array list directly, instead of via this method. <p>Note that this can be changed from linear to binary search if the number of clients grows large enough that it would make a difference.
Enable a range for the specified client and update ranges if necessary. If {@link #finishUpdate} returns failure, false is returned and the range is not added.
Disable a range for the specified client and update ranges if necessary. If {@link #finishUpdate} returns failure, false is returned and the range is not removed.
Perform a complete update operation (enable all ranges). Useful after a radio reset. Calls {@link #startUpdate}, followed by zero or more calls to {@link #addRange}, followed by {@link #finishUpdate}.
Enable or disable a single range of message identifiers.
Returns whether the list of ranges is completely empty.
Cast an IBinder object into an com.android.internal.telephony.IPhoneStateListener interface, generating a proxy if needed.
we use bundle here instead of CellLocation so it can get the right subclass
Cast an IBinder object into an com.android.internal.telephony.IPhoneSubInfo interface, generating a proxy if needed.
Retrieves the unique device ID, e.g., IMEI for GSM phones.
Retrieves the software version number for the device, e.g., IMEI/SV for GSM phones.
Retrieves the unique sbuscriber ID, e.g., IMSI for GSM phones.
Retrieves the serial number of the ICC, if applicable.
Retrieves the phone number string for line 1.
Retrieves the alpha identifier for line 1.
Retrieves MSISDN Number.
Retrieves the voice mail number.
Retrieves the complete voice mail number.
Retrieves the alpha identifier associated with the voice mail number.
Cast an IBinder object into an com.android.internal.telephony.ISms interface, generating a proxy if needed.
Update the specified message on the ICC.
Copy a raw SMS PDU to the ICC.
Send a data SMS. default SMSC broadcast when the message is sucessfully sent, or failed. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors:<br> <code>RESULT_ERROR_GENERIC_FAILURE</code><br> <code>RESULT_ERROR_RADIO_OFF</code><br> <code>RESULT_ERROR_NULL_PDU</code><br> For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include the extra "errorCode" containing a radio technology specific value, generally only useful for troubleshooting.<br> The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applicaitons, which cause smaller number of SMS to be sent in checking period. broadcast when the message is delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Send an SMS. default SMSC broadcast when the message is sucessfully sent, or failed. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors:<br> <code>RESULT_ERROR_GENERIC_FAILURE</code><br> <code>RESULT_ERROR_RADIO_OFF</code><br> <code>RESULT_ERROR_NULL_PDU</code><br> For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include the extra "errorCode" containing a radio technology specific value, generally only useful for troubleshooting.<br> The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period. broadcast when the message is delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Send a multi-part text based SMS. the current default SMSC comprise the original message <code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors: <code>RESULT_ERROR_GENERIC_FAILURE</code> <code>RESULT_ERROR_RADIO_OFF</code> <code>RESULT_ERROR_NULL_PDU</code>. <code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Enable reception of cell broadcast (SMS-CB) messages with the given message identifier. Note that if two different clients enable the same message identifier, they must both disable it for the device to stop receiving those messages.
Disable reception of cell broadcast (SMS-CB) messages with the given message identifier. Note that if two different clients enable the same message identifier, they must both disable it for the device to stop receiving those messages.
Enable reception of cell broadcast (SMS-CB) messages with the given message identifier range. Note that if two different clients enable a message identifier range, they must both disable it for the device to stop receiving those messages.
Disable reception of cell broadcast (SMS-CB) messages with the given message identifier range. Note that if two different clients enable a message identifier range, they must both disable it for the device to stop receiving those messages.
Cast an IBinder object into an com.android.internal.telephony.ITelephony interface, generating a proxy if needed.
Dial a number. This doesn't place the call. It displays the Dialer screen. would display the Dialer screen with no number pre-filled.
Place a call to the specified number.
If there is currently a call in progress, show the call screen. The DTMF dialpad may or may not be visible initially, depending on whether it was up when the user last exited the InCallScreen.
Variation of showCallScreen() that also specifies whether the DTMF dialpad should be initially visible when the InCallScreen comes up.
End call if there is a call in progress, otherwise does nothing.
Answer the currently-ringing call. If there's already a current active call, that call will be automatically put on hold.  If both lines are currently in use, the current active call will be ended. TODO: provide a flag to let the caller specify what policy to use if both lines are in use.  (The current behavior is hardwired to "answer incoming, end ongoing", which is how the CALL button is specced to behave.) TODO: this should be a oneway call (especially since it's called directly from the key queue thread).
Silence the ringer if an incoming call is currently ringing. (If vibrating, stop the vibrator also.) It's safe to call this if the ringer has already been silenced, or even if there's no incoming call.  (If so, this method will do nothing.) TODO: this should be a oneway call too (see above).
Check if we are in either an active or holding call
Check if an incoming phone call is ringing or call waiting.
Check if the phone is idle.
Check to see if the radio is on or not.
Check if the SIM pin lock is enabled.
Cancels the missed calls notification.
Supply a pin to unlock the SIM.  Blocks until a result is determined.
Supply puk to unlock the SIM and set SIM pin to new pin. Blocks until a result is determined.
Handles PIN MMI commands (PIN/PIN2/PUK/PUK2), which are initiated without SEND (so <code>dial</code> is not appropriate).
Toggles the radio on or off.
Set the radio to on or off
Request to update location information in service state
Enable location update notifications.
Disable location update notifications.
Enable a specific APN type.
Disable a specific APN type.
Allow mobile data connections.
Disallow mobile data connections.
Report whether data connectivity is possible.
Returns the neighboring cell information of the device.
Returns the current active phone type as integer. Returns TelephonyManager.PHONE_TYPE_CDMA if RILConstants.CDMA_PHONE and TelephonyManager.PHONE_TYPE_GSM if RILConstants.GSM_PHONE
Returns true if OTA service provisioning needs to run. Only relevant on some technologies, others will always return false.
Returns the unread count of voicemails
Returns the network type
Return true if an ICC card is present
Return if the current radio is LTE on CDMA. This is a tri-state return value as for a period of time the mode may be unknown. or {@link PHone#LTE_ON_CDMA_TRUE}
Cast an IBinder object into an com.android.internal.telephony.ITelephonyRegistry interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.telephony.IWapPushManager interface, generating a proxy if needed.
Processes WAP push message and triggers the receiver application registered in the application ID table.
Add receiver application into the application ID table. Returns true if inserting the information is successfull. Inserting the duplicated record in the application ID table is not allowed. Use update/delete method.
Updates receiver application that is last added. Returns true if updating the information is successfull.
Delites receiver application information. Returns true if deleting is successfull.
Returns a default time zone ID for the given MCC.
Given a GSM Mobile Country Code, returns an ISO 2-3 character language code if available. Returns null if unavailable.
Updates MCC and MNC device configuration information for application retrieving correct version of resources.  If either MCC or MNC is 0, they will be ignored (not set).
If the timezone is not already set, set it based on the MCC of the SIM.
If the locale is not already set, set it based on the MCC of the SIM.
If the number of allowed wifi channels has not been set, set it based on the MCC of the SIM.
See state strings defined in ril.h RIL_REQUEST_QUERY_AVAILABLE_NETWORKS
Parcelable interface implemented below. This is a simple effort to make OperatorInfo parcelable rather than trying to make the conventional containing object (AsyncResult), implement parcelable.  This functionality is needed for the NetworkQueryService to fix 1128695.
Implement the Parcelable interface. Method to serialize a OperatorInfo object.
Constructs a PhoneBase in normal (non-unit test) mode. unless unit testing.
Constructs a PhoneBase in normal (non-unit test) mode. unless unit testing. of state change events
Inherited documentation suffices.
Disables the DNS check (i.e., allows "0.0.0.0"). Useful for lab testing environment.
Returns true if the DNS check is currently disabled.
Inherited documentation suffices.
Inherited documentation suffices.
Subclasses of Phone probably want to replace this with a version scoped to their packages
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Method to retrieve the saved operator id from the Shared Preferences
Method to restore the previously saved operator id, or reset to automatic selection, all depending upon the value in the shared preferences.
Inherited documentation suffices.
Inherited documentation suffices.
To be invoked when a voice call Connection disconnects. Subclasses of Phone probably want to replace this with a version scoped to their packages
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Inherited documentation suffices.
Subclasses of Phone probably want to replace this with a version scoped to their packages
Inherited documentation suffices.
Verifies the current thread is the same as the thread originally used in the initialization of this instance. Throws RuntimeException if not. the thread that originally obtained this PhoneBase instance.
Set the properties by matching the carrier string in a string-array resource
Utility code to set the system locale if it's not set already {@hide}
Retrieves the Handler of the Phone instance
Retrieves the ServiceStateTracker of the phone instance.
Get call tracker
Query the status of the CDMA roaming preference
Set the status of the CDMA roaming preference
Set the status of the CDMA subscription mode
Set the preferred Network Type: Global, CDMA only or GSM/UMTS only
the phone should be using as little power as possible and be ready to receive an incoming call from the emergency operator.
Returns true if OTA Service Provisioning needs to be performed. If not overridden return false.
Return true if number is an OTASP number. If not overridden return false.
Notify registrants of a new ringing Connection. Subclasses of Phone probably want to replace this with a version scoped to their packages
Notify registrants of a RING event.
Send the incoming call Ring notification if conditions are right.
Common error logger method for unexpected calls to CDMA-only methods.
Common error logger method for unexpected calls to GSM/WCDMA-only methods.
Called by SimRecords which is constructed with a PhoneBase instead of a GSMPhone.
Class Methods
FIXME replace this with some other way of making these instances
This function returns the type of the phone, depending on the network mode.
Makes a {@link SipPhone} object.
Class Methods
Returns current signal strength in as an asu 0..31 Throws RuntimeException if client has not called notifySignalStrength()
Return current signal strength in "dBm", ranging from -113 - -51dBm or -1 if unknown Throws RuntimeException if client has not called notifySignalStrength()
Retrieves the unique device ID, e.g., IMEI for GSM phones and MEID for CDMA phones.
Retrieves the unique subscriber ID, e.g., IMSI for GSM phones.
Retrieves the MSISDN string.
Retrieves the MSISDN Number.
Configure for a simple linear sequence of times plus a random value.
Configure for using string which allow arbitrary sequences of times. See class comments for the string format.
Report whether data reconnection should be retried
Return the timer that should be used to trigger the data reconnection
Increase the retry counter, does not change retry forever.
Set retry count to the specified value and turns off retrying forever.
Clear the data-retry counter
Retry forever using last timeout time.
Parse an integer validating the value is not negative.
Validate an integer is >= 0 and logs an error if not
Return next random number for the index
Retrieves a new RILRequest instance from the pool.
Returns a RILRequest instance to the pool. Note: This should only be called once per use.
Reads in a single RIL message off the wire. A RIL message consists of a 4-byte little-endian length and a subsequent series of bytes. The final message (length header omitted) is read into <code>buffer</code> and the length of the final message (less header) is returned. A return value of -1 indicates end-of-stream. message size, or an ArrayOutOfBounds exception will be thrown.
Translates EF_SMS status bits to a status value compatible with SMS AT commands.  See TS 27.005 3.1.
Private Methods
Release each request in mReqeustsList then clear the list
Notifiy all registrants that the ril has connected or disconnected.
TODO: Change the configValuesArray to a RIL_BroadcastSMSConfig
Registration point for combined roaming on combined roaming is true when roaming is true and ONS differs SPN
Registration point for combined roaming off combined roaming is true when roaming is true and ONS differs SPN
Re-register network by toggling preferred network type. This is a work-around to deregister and register network since there is no ril api to set COPS=2 (deregister) only. an AsyncResult, and onComplete.obj.exception will be non-null on failure.
Registration point for transition into DataConnection attached.
Registration point for transition into DataConnection detached.
Registration point for transition into network attached.
Registration point for transition into packet service restricted zone.
Registration point for transition out of packet service restricted zone.
Clean up existing voice and data connection then turn off radio power. Hang up the existing voice calls to decrease call drop rate.
process the pending request to turn radio off after data is disconnected return true if there is pending request to process; false otherwise.
Cancel a pending (if any) pollState() operation
Returns the address of the SMS message in String form or null if unavailable
Returns true if this is a network address
Create a new SMS dispatcher.
Grabs a wake lock and sends intent as an ordered broadcast. The resultReceiver will check for errors and ACK/NACK back to the RIL.
Called when SMS send completes. Broadcasts a sentIntent on success. On failure, either sets up retries or broadcasts a sentIntent with the failure in the result code.
Handles outbound message when the phone is not in service.
Dispatch a normal incoming SMS. This is called from the format-specific {@link #dispatchMessage(SmsMessageBase)} if no format-specific handling is required.
If this is the last part send the parts out to the application, otherwise the part is stored for later processing. Handles both 3GPP concatenated messages as well as 3GPP2 format WAP push messages processed by {@link com.android.internal.telephony.cdma.CdmaSMSDispatcher#processCdmaWapPdu}.
Dispatches standard PDUs to interested applications
Dispatches port addressed PDUs to interested applications
Send a multi-part text based SMS. the current default SMSC comprise the original message <code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors: <code>RESULT_ERROR_GENERIC_FAILURE</code> <code>RESULT_ERROR_RADIO_OFF</code> <code>RESULT_ERROR_NULL_PDU</code> <code>RESULT_ERROR_NO_SERVICE</code>. The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period. <code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Send a SMS default SMSC broadcast when the message is successfully sent, or failed. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors: <code>RESULT_ERROR_GENERIC_FAILURE</code> <code>RESULT_ERROR_RADIO_OFF</code> <code>RESULT_ERROR_NULL_PDU</code> <code>RESULT_ERROR_NO_SERVICE</code>. The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period. broadcast when the message is delivered to the recipient.  The raw pdu of the status report is in the extended data ("pdu").
Post an alert while SMS needs user confirm. An SmsTracker for the current message.
Send the multi-part SMS based on multipart Sms tracker
Notify interested apps if the framework has rejected an incoming SMS, and send an acknowledge message to the network.
Returns whether this tracker holds a multi-part SMS.
Create structured SmsHeader object from serialized byte array representation. (see TS 23.040 9.2.3.24)
Create serialized byte array representation from structured SmsHeader object. (see TS 23.040 9.2.3.24)
Returns an object representing the user data header {@hide}
Try to parse this message as an email gateway message There are two ways specified in TS 23.040 Section 3.8 : - SMS message "may have its TP-PID set for Internet electronic mail - MT SMS format: [<from-address><space>]<message> - "Depending on the nature of the gateway, the destination/origination address is either derived from the content of the SMS TP-OA or TP-DA field, or the TP-OA/TP-DA field contains a generic gateway address and the to/from address is added at the beginning as shown above." (which is supported here) - Multiple addresses separated by commas, no spaces, Subject field delimited by '()' or '##' and '#' Section 9.2.3.24.11 (which are NOT supported here)
Creates an SmsStorageMonitor and registers for events.
Called when SIM_FULL message is received from the RIL.  Notifies interested parties that SIM storage for SMS messages is full.
Returns whether or not there is storage available for an incoming SMS.
Create SMS usage monitor.
Clear the SMS application list for disposal.
Check to see if an application is allowed to send new SMS messages. of new sms messages
Remove keys containing only old timestamps. This can happen if an SMS app is used to send messages and then uninstalled.
bind WapPushManager
rebind WapPushManager This method is called when WapPushManager is disconnected unexpectedly.
Returns interface to WapPushManager
Dispatches inbound messages that are in the WAP PDU format. See wap-230-wsp-20010705-a section 8 for details on the WAP PDU format.
Decode the "Text-string" type for WSP pdu
Decode the "Token-text" type for WSP pdu
Decode the "Short-integer" type for WSP pdu
Decode the "Long-integer" type for WSP pdu
Decode the "Integer-Value" type for WSP pdu
Decode the "Uintvar-integer" type for WSP pdu
Decode the "Value-length" type for WSP pdu
Decode the "Extension-media" type for WSP PDU.
Decode the "Constrained-encoding" type for WSP pdu
Decode the "Content-type" type for WSP pdu
Check if the next byte is No-Value
Populate stringValue with the mime type corresponding to the value in unsigned32bit Sets unsigned32bit to -1 if stringValue is already populated
Decode the "Content length" type for WSP pdu
Decode the "Content location" type for WSP pdu
Decode the "X-Wap-Application-Id" type for WSP pdu
Seek for the "X-Wap-Application-Id" field for WSP pdu
Decode the "X-Wap-Content-URI" type for WSP pdu
Decode the "X-Wap-Initiator-URI" type for WSP pdu
The data length of latest operation.
The 32-bits result of latest operation.
The String result of latest operation.
Any parameters encountered as part of a decodeContentType() invocation.
Cast an IBinder object into an com.android.internal.textservice.ISpellCheckerService interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.textservice.ISpellCheckerSession interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.textservice.ISpellCheckerSessionListener interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.textservice.ITextServicesManager interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.textservice.ITextServicesSessionListener interface, generating a proxy if needed.
Returns an empty array of the specified type.  The intent is that it will return the same empty array every time to avoid reallocation, although this is not guaranteed.
Connect handler to named package/class synchronously.
Connect a handler to Messenger synchronously.
connect two local Handlers synchronously.
Fully connect two local Handlers synchronously.
Connect handler to named package/class. Sends a CMD_CHANNEL_HALF_CONNECTED message to srcHandler when complete.
Connect handler to a class Sends a CMD_CHANNEL_HALF_CONNECTED message to srcHandler when complete.
Connect handler and messenger. Sends a CMD_CHANNEL_HALF_CONNECTED message to srcHandler when complete.
Connect handler to messenger. This method is typically called when a server receives a CMD_CHANNEL_FULL_CONNECTION request and initializes the internal instance variables to allow communication with the dstMessenger.
Connect two local Handlers.
Connect service and messenger. Sends a CMD_CHANNEL_HALF_CONNECTED message to srcAsyncService when complete.
To close the connection call when handler receives CMD_CHANNEL_DISCONNECTED
Send a message to the destination handler.
Send a message to the destination handler
Reply to srcMsg sending dstMsg
Reply to srcMsg
Send the Message synchronously.
Recycle this object
Send a message synchronously.
Reply to the src handler that we're half connected. see: CMD_CHANNEL_HALF_CONNECTED for message contents
Reply to the src handler that we are disconnected see: CMD_CHANNEL_DISCONNECTED for message contents
Log the string.
Get the handler
Create object from byte array.
Return the number of bit still available for reading.
Read some data and increment the current position. The 8-bit limit on access to bitwise streams is intentional to avoid endianness issues.
Read data in bulk into a byte array and increment the current position.
Increment the current position and ignore contained data.
Create object from hint at desired size.
Return byte array containing accumulated data, sized to just fit.
Allocate a new internal buffer, if needed.
Write some data and increment the current position. The 8-bit limit on access to bitwise streams is intentional to avoid endianness issues.
Write data in bulk from a byte array and increment the current position.
Increment the current position, implicitly writing zeros.
Adapts {@link CharSequence} to an array of ASCII (7-bits per character) bytes.
Adapts {@link CharSequence} to an array of ASCII (7-bits per character) bytes. is greater than length(), or if start is greater than end
Compares two character sequences for equality.
Compares two character sequences with API like {@link Comparable#compareTo}.
Fast round from float to int. This is faster than Math.round() thought it may return slightly different results. It does not try to handle (in any meaningful way) NaN or infinities.
Returns the file for you to read. Prefers the real file.  If it doesn't exist, uses the temp one, and then copies it to the real one.  If there is both a real file and a temp one, assumes that the temp one isn't fully written and deletes it.
Returns a file for you to write. If a write is already happening, throws.  In other words, you must provide your own locking. <p> Call {@link #commit} to commit the changes, or {@link #rollback} to forget the changes.
Commit changes.
Roll back changes.
Determines whether two possibly-null objects are equal. Returns: <ul> <li>{@code true} if {@code a} and {@code b} are both null. <li>{@code true} if {@code a} and {@code b} are both non-null and they are <li>{@code false} in all other situations. </ul> <p>This assumes that any non-null objects passed to this function conform to the {@code equals()} contract.
Generates a hash code for multiple values. The hash code is generated by calling {@link Arrays#hashCode(Object[])}. <p>This is useful for implementing {@link Object#hashCode()}. For example, in an object that has three properties, {@code x}, {@code y}, and {@code z}, one could write: <pre> public int hashCode() { return Objects.hashCode(getX(), getY(), getZ()); }</pre> <b>Warning</b>: When a single object is supplied, the returned hash code does not equal the hash code of that object.
Returns a Predicate that evaluates to true iff each of its components evaluates to true.  The components are evaluated in order, and evaluation will be "short-circuited" as soon as the answer is determined.
Returns a Predicate that evaluates to true iff each of its components evaluates to true.  The components are evaluated in order, and evaluation will be "short-circuited" as soon as the answer is determined.  Does not defensively copy the iterable passed in, so future changes to it will alter the behavior of this Predicate. If components is empty, the returned Predicate will always evaluate to true.
Returns a Predicate that evaluates to true iff any one of its components evaluates to true.  The components are evaluated in order, and evaluation will be "short-circuited" as soon as the answer is determined.
Returns a Predicate that evaluates to true iff any one of its components evaluates to true.  The components are evaluated in order, and evaluation will be "short-circuited" as soon as the answer is determined.  Does not defensively copy the iterable passed in, so future changes to it will alter the behavior of this Predicate. If components is empty, the returned Predicate will always evaluate to false.
Returns a Predicate that evaluates to true iff the given Predicate evaluates to false.
Constructor did not processes the message.
Update the information in the record. did not processes the message.
Set size of messages to maintain and clears all current messages.
record and size()-1 is the newest record. If the index is to large null is returned.
Add a processed message. did not processes the message.
Do any transitions
Complete the construction of the state machine.
Process the message. If the current state doesn't handle it, call the states parent and so on. If it is never handled then call the state machines unhandledMessage method.
Call the exit method for each state from the top of stack up to the common ancestor state.
Invoke the enter method starting at the entering index to top of state stack
Move the deferred message to the front of the message queue.
Move the contents of the temporary stack to the state stack reversing the order of the items on the temporary stack as they are moved.
Setup the mTempStateStack with the states we are going to enter. This is found by searching up the destState's ancestors for a state that is already active i.e. StateInfo.active == true. The destStae and all of its inactive parents will be on the TempStateStack as the list of states to enter. current state or null if there is no common parent.
Initialize StateStack to mInitialState.
Add a new state to the state machine. Bottom up addition of states is allowed but the same state may only exist in one hierarchy.
Constructor creates a StateMachine with its own thread.
Constructor creates an StateMachine using the looper.
Add a new state to the state machine
Add a new state to the state machine, parent will be null
Set the initial state. This must be invoked before and messages are sent to the state machine.
transition to destination state. Upon returning from processMessage the current state's exit will be executed and upon the next message arriving destState.enter will be invoked. this function can also be called inside the enter function of the previous transition target, but the behavior is undefined when it is called mid-way through a previous transition (for example, calling this in the enter() routine of a intermediate node when the current transition target is one of the nodes descendants).
transition to halt state. Upon returning from processMessage we will exit all current states, execute the halting() method and then all subsequent messages haltedProcessMesage will be called.
Defer this message until next state transition. Upon transitioning all deferred messages will be placed on the queue and reprocessed in the original order. (i.e. The next state the oldest messages will be processed first)
Called when message wasn't handled
Set size of messages to maintain and clears all current messages.
Get a message and set Message.target = this.
Get a message and set Message.target = this and what
Get a message and set Message.target = this, what and obj.
Get a message and set Message.target = this, what, arg1 and arg2
Get a message and set Message.target = this, what, arg1, arg2 and obj
Enqueue a message to this state machine.
Enqueue a message to this state machine after a delay.
Enqueue a message to the front of the queue for this state machine. Protected, may only be called by instances of StateMachine.
Removes a message from the message queue. Protected, may only be called by instances of StateMachine.
Conditionally quit the looper and stop execution. This sends the SM_QUIT_MSG to the state machine and if not handled by any state's processMessage then the state machine will be stopped and no further messages will be processed.
Set debug enable/disabled.
Start the state machine.
Instantiates a {@link java.io.StreamTokenizer} and sets its syntax tables appropriately for the {@code TypedProperties} file format.
Converts a string to an internal type constant.
Parses the data in the reader.
Parses the next token in the StreamTokenizer as the specified type.
Creates an empty TypedProperties instance.
Loads zero or more properties from the specified Reader. Properties that have already been loaded are preserved unless the new Reader overrides or unsets earlier values for the same properties. <p> File syntax: <blockquote> </blockquote>
Returns the value of a boolean property, or the default if the property has not been defined.
Returns the value of a byte property, or the default if the property has not been defined.
Returns the value of a short property, or the default if the property has not been defined.
Returns the value of an integer property, or the default if the property has not been defined.
Returns the value of a long property, or the default if the property has not been defined.
Returns the value of a float property, or the default if the property has not been defined.
Returns the value of a double property, or the default if the property has not been defined.
Returns the value of a string property, or the default if the property has not been defined.
Returns the value of a boolean property, or false if the property has not been defined.
Returns the value of a byte property, or 0 if the property has not been defined.
Returns the value of a short property, or 0 if the property has not been defined.
Returns the value of an integer property, or 0 if the property has not been defined.
Returns the value of a long property, or 0 if the property has not been defined.
Returns the value of a float property, or 0.0 if the property has not been defined.
Returns the value of a double property, or 0.0 if the property has not been defined.
Returns the value of a String property, or "" if the property has not been defined.
Provides string type information about a property.
Invokes main(String[]) method on class in args[0] with args[1..n].
Read a HashMap from an InputStream containing XML.  The stream can previously have been written by writeMapXml(). #see #writeMapXml
Shows this context menu, allowing the optional original view (and its ancestors) to add items.
Instantiates the ExpandedMenuView that is linked with the provided MenuBuilder.
Initializes with the provided title and icon
Positions the icon vertically (horizontal centering is taken care of by the TextView's gravity).
Instantiates the IconMenuView that is linked with the provided MenuBuilder.
Figures out the layout for the menu items.
Figures out the layout for the menu items by equally distributing, and adding any excess items equally to lower rows.
Checks whether each item's title is fully visible using the current layout.
Creates the item view for the 'More' button which is used to switch to the expanded menu view. This button is a special case since it does not have a MenuItemData backing it.
The positioning algorithm that gets called from onMeasure.  It just computes positions for each child, and then stores them in the child's layout params.
Marks as having stale children.
Returns the number of items per row. <p> This should only be used for testing.
Returns the number of rows in the layout. <p> This should only be used for testing.
Sets the shortcut caption mode for IconMenuView. This mode will continuously cycle between a child's shortcut and its title.
When this method is invoked if the menu is currently not being longpressed, it means that the longpress has just been reached (so we set longpress flag, and start cycling). If it is being longpressed, we cycle to the next mode.
Iterates children and sets the desired shortcut mode. Only {@link #setCycleShortcutCaptionMode(boolean)} and {@link #run()} should call this.
For each item, calculates the most dense row that fully shows the item's title.
Constructor called from {@link IconMenuView#onSaveInstanceState()}
This function will return all the menu and sub-menu items that can be directly (the shortcut directly corresponds) and indirectly (the ALT-enabled char corresponds to the shortcut) associated with the keyCode.
We want to return the menu item associated with the key, but if there is no ambiguity (i.e. there is only one menu item corresponding to the key) we want to return it even if it's not an exact match; this allow the user to _not_ use the ALT key for example, making the use of shortcuts slightly more user-friendly. An example is on the G1, '!' and '1' are on the same key, and in Gmail, Menu+1 will trigger Menu+! (the actual shortcut). On the other hand, if two (or more) shortcuts corresponds to the same key, we have to only return the exact match.
Cast an IBinder object into an com.android.internal.view.IInputContext interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.view.IInputContextCallback interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.view.IInputMethod interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.view.IInputMethodCallback interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.view.IInputMethodClient interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.view.IInputMethodManager interface, generating a proxy if needed.
TODO: We should change the return type from List to List<Parcelable> Currently there is a bug that aidl doesn't accept List<Parcelable>
Cast an IBinder object into an com.android.internal.view.IInputMethodSession interface, generating a proxy if needed.
Used to make this class parcelable.
Returns an InputContextCallback object that is guaranteed not to be in use by any other thread.  The returned object's 'have value' flag is cleared and its expected sequence number is set to a new integer.  We use a sequence number so that replies that occur after a timeout has expired are not interpreted as replies to a later request.
Makes the given InputContextCallback available for use in the future.
Waits for a result for up to {@link #MAX_WAIT_TIME_MILLIS} milliseconds. <p>The caller must be synchronized on this callback object.
Animation used to attract user's attention to the target button. Assumes mChevronDrawables is an a list with an even number of chevrons filled with mFeedbackCount items in the order: left, right, top, bottom.
Dispatches a trigger event to listener. Ignored if a listener is not set.
Loads an array of drawables from the given resourceId.
Sets the resource id specifying the target descriptions for accessibility.
Gets the resource id specifying the target descriptions for accessibility.
Sets the resource id specifying the target direction descriptions for accessibility.
Gets the resource id specifying the target direction descriptions.
Enable or disable vibrate on touch.
Starts chevron animation. Example use case: show chevron animation whenever the phone rings or the user touches the screen.
Resets the widget to default state and cancels all animation. If animate is 'true', will animate objects into place. Otherwise, objects will snap back to place.
Sets the current grabbed state, and dispatches a grabbed state change event to our listener.
Returns true if the drawable is a StateListDrawable and is in the focused state.
Returns true if this target is enabled. Typically an enabled target contains a valid drawable in a valid state. Currently all targets with valid drawables are valid.
Makes drawables in a StateListDrawable all the same dimensions. If not a StateListDrawable, then justs sets the bounds to the intrinsic size of the drawable.
Listener to watch for completed animations and remove them.
Adds an animation that interpolates given property from its current value to the given value.
Stops all animations for the given property and removes it from the list.
Stops all animations and removes them from the list.
Adds the given animation to the list of animations for this object.
Draw this object to the canvas using the properties defined in this class.
Starts all animations added since the last call to this function.  Used to synchronize animations. to invalidate the surface these are being drawn to.
Cast an IBinder object into an com.android.internal.widget.IRemoteViewsAdapterConnection interface, generating a proxy if needed.
Cast an IBinder object into an com.android.internal.widget.IRemoteViewsFactory interface, generating a proxy if needed.
Gets the device policy password mode. If the mode is non-specific, returns MODE_PATTERN which allows the user to choose anything.
Returns the actual password mode, as set by keyguard after updating the password.
Check to see if a pattern matches the saved pattern.  If no pattern exists, always returns true.
Check to see if a password matches the saved password.  If no password exists, always returns true.
Check to see if a password matches any of the passwords stored in the password history.
Check to see if the user has stored a lock pattern.
Check to see if the user has stored a lock pattern.
Return true if the user has ever chosen a pattern.  This is true even if the pattern is currently cleared.
Return true if the user has ever chosen biometric weak.  This is true even if biometric weak is not current set.
Used by device policy manager to validate the current password information it has.
Clear any lock pattern or password.
Disable showing lock screen at all when the DevicePolicyManager allows it. This is only meaningful if pattern, pin or password are not set.
Determine if LockScreen can be disabled. This is used, for example, to tell if we should show LockScreen or go straight to the home screen.
Save a lock pattern.
Calls back SetupFaceLock to save the temporary gallery file if this is the backup lock. This doesn't have to verify that biometric is enabled because it's only called in that case
Calls back SetupFaceLock to delete the temporary gallery file
Calls back SetupFaceLock to delete the gallery file when the lock type is changed
Compute the password quality from the given password string.
Update the encryption password if it is enabled
Save a lock password.  Does not ensure that the password is as good as the requested mode, but will adjust the mode to be as good as the pattern.
Retrieves the quality mode we're in. {@see DevicePolicyManager#getPasswordQuality(android.content.ComponentName)}
Deserialize a pattern.
Serialize a pattern.
Generate an SHA-1 hash for the pattern. Not the most secure, but it is at least a second level of protection. First level is that the file is in a location only readable by the system process.
Generate a hash for the given password. To avoid brute force attacks, we use a salted hash. Not the most secure, but it is at least a second level of protection. First level is that the file is in a location only readable by the system process.
Set whether the lock pattern is enabled.
Set whether the visible pattern is enabled.
Set whether tactile feedback for the pattern is enabled.
Set and store the lockout deadline, meaning the user can't attempt his/her unlock pattern until the deadline has passed.
attempt to enter his/her lock pattern, or 0 if the user is welcome to enter a pattern.
credentials.  Occurs after {@link #FAILED_ATTEMPTS_BEFORE_RESET} failed attempts.
Set the state of whether the device is permanently locked, meaning the user must authenticate via other means. credentials.  Occurs after {@link #FAILED_ATTEMPTS_BEFORE_RESET} failed attempts.
or null if there is no next alarm.
Sets the emergency button visibility based on isEmergencyCallCapable(). If the emergency button is visible, sets the text on the emergency button to indicate what action will be taken. If there's currently a call in progress, the button will take them to the call {@link TelephonyManager#CALL_STATE_IDLE} {@link TelephonyManager#CALL_STATE_RINGING} {@link TelephonyManager#CALL_STATE_OFFHOOK}
Resumes a call in progress. Typically launched from the EmergencyCall button on various lockscreens.
Set whether the view is in stealth mode.  If true, there will be no visible feedback as the user enters the pattern.
Set whether the view will use tactile feedback.  If true, there will be tactile feedback as the user enters the pattern.
Set the call back for pattern detection.
Set the pattern explicitely (rather than waiting for the user to input a pattern).
Set the display mode of the current pattern.  This can be useful, for instance, after detecting a pattern to tell this view whether change the in progress result to correct or wrong.
Clear the pattern.
Reset all pattern state.
Clear the pattern lookup table.
Disable input (for instance when displaying a message that will timeout so user doesn't get view into messy state).
Enable input.
Determines whether the point x, y will add a new point to the current pattern (in addition to finding the cell, also makes heuristic choices such as filling in gaps based on current pattern).
helper method to find which cell a point maps to
Helper method to find the row that y falls into.
Helper method to find the column x fallis into.
Constructor called from {@link LockPatternView#onSaveInstanceState()}
Allows enter key resources to be overridden
Allows shiftlock to be turned on.  See {@link #setShiftLocked(boolean)}
Turn on shift lock. This turns on the LED for this key, if it has one. It should be followed by a call to {@link KeyboardView#invalidateKey(int)} or {@link KeyboardView#invalidateAllKeys()}
Sets and enables vibrate pattern.  If id is 0 (or can't be loaded), vibrate is disabled.
Constructor used when this widget is created from a layout file.
Sets the left handle icon to a given resource. The resource should refer to a Drawable object, or use 0 to remove the icon.
Sets the right handle icon to a given resource. The resource should refer to a Drawable object, or use 0 to remove the icon.
Assuming bitmap is a bounding box around a piece of an arc drawn by two concentric circles (as the background drawable for the rotary widget is), and given an x coordinate along the drawable, return the y coordinate of a point on the arc that is between the two concentric circles.  The resulting y combined with the incoming x is a point along the circle in between the two concentric circles.
Triggers haptic feedback.
Draw the bitmap so that it's centered on the point (x,y), then draws it using specified canvas. TODO: is there already a utility method somewhere for this?
Registers a callback to be invoked when the dial is "triggered" by rotating it one way or the other.
Dispatches a trigger event to our listener.
Debugging / testing code
Listener used to reset the view when the current animation completes.
Layout the given widgets within the parent.
Ensure all the dependent widgets are measured.
Get the measured tab width. Must be called after {@link Slider#measure()}.
Get the measured tab width. Must be called after {@link Slider#measure()}.
Start animating the slider. Note we need two animations since an ValueAnimator keeps internal state of the invalidation region which is just the view being animated.
Constructor used when this widget is created from a layout file.
Reset the tabs to their original state and stop any existing animation. Animate them back into place if animate is true.
Sets the left handle icon to a given resource. The resource should refer to a Drawable object, or use 0 to remove the icon.
Sets the left handle hint text to a given resource string.
Sets the right handle icon to a given resource. The resource should refer to a Drawable object, or use 0 to remove the icon.
Sets the left handle hint text to a given resource string.
Registers a callback to be invoked when the user triggers an event.
Callback when {@link Chronometer} changes, indicating that we should update the {@link ProgressBar} and change the layout if necessary.
This handler is required to ensure messages from IRCD are handled in sequence and on the UI thread.
Populates the given metadata into the view
Starts the SIP service. Do nothing if the SIP API is not supported on the device.
TODO: remove this method once SipWakeupTimer can better handle variety of timeout values
network connectivity is tricky because network can be disconnected at any instant so need to deal with exceptions carefully even when you think you are connected
For internal use, require listener not to block in callbacks.
process the command in a new thread
timeout in seconds
Notes: SipSessionListener will be replaced by the keepalive process
return true if the event is consumed
match the given arguments; false otherwise
Stops the timer. No event can be scheduled after this method is called.
Determines the period and the trigger time of the new event and insert it to the queue.
Sets a periodic timer.
Cancels all the timer events with the specified callback.
Convert {@code /proc/} tag format to {@link Integer}. Assumes incoming format like {@code 0x7fffffff00000000}.
Does the following steps. <p>1. Call on()</p> <p>2. Start the timer.</p> <p>3. At the timeout, calls off()<p> <p>If you call this again, the timeout is reset to the new one</p>
Cancel the timeout and call off now.
Creates an empty {@code ArrayList} instance. <p><b>Note:</b> if you only need an <i>immutable</i> empty List, use {@link Collections#emptyList} instead.
Creates a resizable {@code ArrayList} instance containing the given elements. <p><b>Note:</b> due to a bug in javac 1.5.0_06, we cannot support the following: <p>{@code List<Base> list = Lists.newArrayList(sub1, sub2);} <p>where {@code sub1} and {@code sub2} are references to subtypes of {@code Base}, not of {@code Base} itself. To get around this, you must use: <p>{@code List<Base> list = Lists.<Base>newArrayList(sub1, sub2);}
Creates a {@code HashMap} instance.
Creates an empty {@code HashSet} instance. <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link EnumSet#noneOf} instead. <p><b>Note:</b> if you only need an <i>immutable</i> empty Set, use {@link Collections#emptySet} instead.
Creates a {@code HashSet} instance containing the given elements. <p><b>Note:</b> due to a bug in javac 1.5.0_06, we cannot support the following: <p>{@code Set<Base> set = Sets.newHashSet(sub1, sub2);} <p>where {@code sub1} and {@code sub2} are references to subtypes of {@code Base}, not of {@code Base} itself. To get around this, you must use: <p>{@code Set<Base> set = Sets.<Base>newHashSet(sub1, sub2);}
Creates a {@code SortedSet} instance containing the given elements.
Convert this object to a {@link java.lang.String}. If the encoding of the EncodedStringValue is null or unsupported, it will be treated as iso-8859-1 encoding.
Persist a PDU object to specific location in the storage.
Create a message parser to parse urls, formatting, acronyms, smileys, /me text and  music
Create a message parser, specifying the kinds of text to parse
Parses the text string into an internal representation.
Get a the appropriate Token for a given URL
Builds the parts list.
Looks for a music track (\u266B is first character, everything else is track info).
Consumes all of the text in the next word .
Looks for smileys (e.g., ":)") in the text.  The set of known smileys is loaded from a file into a trie at server start.
Looks for acronyms (e.g., "lol") in the text.
Determines if this is an allowable domain character.
Determines if the given string is a valid domain.
Looks for a URL in two possible forms:  either a proper URL with a known scheme or a domain name optionally followed by a path, query, or query.
Adds the appropriate token for the given URL.  This might be a simple link or it might be a recognized media type.
Deal with formatting characters. Parsing is as follows: - Treat all contiguous strings of formatting characters as one block. - Only a single instance of a particular format character within a block - If the format is to be turned on, we use the _first_ instance; if it Example: **string** turns into <b>*string*</b>
Determines whether the given index could be a possible word break.
Determines whether the given index could be a possible smiley break.
Verifies that the character before the given index is end of line, whitespace, or punctuation.
Returns the class for the character at the given index.
Returns true if <code>c1</code> could be the last character of a smiley and <code>c2</code> could be the first character of a different smiley, if {@link #isWordBreak} would not already recognize that this is possible.
Determines whether the given character is punctuation.
Determines whether the given character is the beginning or end of a section with special formatting.
Get the relevant information about a token
Not supported. Info should not be needed for this type
Returns a Video object if the given url is to a video.
Returns the URL for the RSS description of the given video.
(For testing purposes:) Returns a video URL with the given parts.
(For testing purposes:) Returns a video URL with the given parts. (e.g., prefix="br." --> "br.youtube.com")
Returns a Photo object if the given url is to a photo or album.
Returns the URL for the RSS description of the user's albums.
Returns the URL for an album.
Returns the URL for a particular photo.
Returns a FlickrPhoto object if the given url is to a photo or Flickr user.
Returns the URL for the RSS description.
Returns the URL for a particular tag.
Returns the URL to the user's Flickr homepage.
Returns the URL for a user tag photo set.
Returns the URL for user set.
TODO: Pass the SWF URL down to the client.
TODO: SWF
Adds the given token to the parsed output.
Converts the entire message into a single HTML display string.
Returns the reverse of the given string.
Adds the given string into the trie.
Determines whether the given string is in the given trie.
Returns the longest substring of the given string, starting at the given index, that exists in the trie.
Returns the longest substring of the given string, starting at the given index, that exists in the trie, with a special tokenizing case for smileys if specified.
Convenience method for getting the Token of a Part that represents a media Token. Parts of this kind will always only have a single Token
Adds the given token to this part.
Returns the original text of this part.
Retrieves the parsed text as a spannable string object.
Looks up the resource id of a given smiley.
Converts the specified {@code String s} from this format to the specified {@code format}. A "best effort" approach is taken; if {@code s} does not conform to the assumed format, then the behavior of this method is undefined but we make a reasonable effort at converting anyway.
Determines whether a character is a digit according to {@link Character#isDigit(char) Java's definition}. If you only care to match ASCII digits, you can use {@code inRange('0', '9')}.
Determines whether a character is a letter according to {@link Character#isLetter(char) Java's definition}. If you only care to match letters of the Latin alphabet, you can use {@code inRange('a', 'z').or(inRange('A', 'Z'))}.
Determines whether a character is a letter or digit according to {@link Character#isLetterOrDigit(char) Java's definition}.
Determines whether a character is upper case according to {@link Character#isUpperCase(char) Java's definition}.
Determines whether a character is lower case according to {@link Character#isLowerCase(char) Java's definition}.
Matches any character.
Matches no characters.
Returns a {@code char} matcher that matches any character except the one specified. <p>To negate another {@code CharMatcher}, use {@link #negate()}.
Returns a {@code char} matcher that matches any character present in the given character sequence.
Returns a {@code char} matcher that matches any character not present in the given character sequence.
Returns a {@code char} matcher that matches any character in a given range (both endpoints are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code CharMatcher.inRange('a', 'z')}.
Returns a matcher with identical behavior to the given {@link Character}-based predicate, but which operates on primitive {@code char} instances instead.
Returns a matcher that matches any character matched by both this matcher and {@code other}.
Returns a matcher that matches any character matched by either this matcher or {@code other}.
Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to query than the original; your mileage may vary. Precomputation takes time and is likely to be worthwhile only if the precomputed matcher is queried many thousands of times. <p>This method has no effect (returns {@code this}) when called in GWT: it's unclear whether a precomputed matcher is faster, but it certainly consumes more memory, which doesn't seem like a worthwhile tradeoff in a browser.
This is the actual implementation of {@link #precomputed}, but we bounce calls through a method on {@link Platform} so that we can have different behavior in GWT. <p>The default precomputation is to cache the configuration of the original matcher in an eight-kilobyte bit array. In some situations this produces a matcher which is faster to query than the original. <p>The default implementation creates a new bit array and passes it to {@link #setBits(LookupTable)}.
For use by implementors; sets the bit corresponding to each character ('\0' to '{@literal \}uFFFF') that matches this matcher in the given bit array, leaving all other bits untouched. <p>The default implementation loops over every possible character value, invoking {@link #matches} for each one.
Returns {@code true} if a character sequence contains only matching characters. <p>The default implementation iterates over the sequence, invoking {@link #matches} for each character, until this returns {@code false} or the end is reached.
Returns {@code true} if a character sequence contains no matching characters. <p>The default implementation iterates over the sequence, invoking {@link #matches} for each character, until this returns {@code false} or the end is reached.
Returns the index of the first matching character in a character sequence, or {@code -1} if no matching character is present. <p>The default implementation iterates over the sequence in forward order calling {@link #matches} for each character.
Returns the index of the first matching character in a character sequence, starting from a given position, or {@code -1} if no character matches after that position. <p>The default implementation iterates over the sequence in forward order, beginning at {@code start}, calling {@link #matches} for each character.
Returns the index of the last matching character in a character sequence, or {@code -1} if no matching character is present. <p>The default implementation iterates over the sequence in reverse order calling {@link #matches} for each character.
Returns a string containing all non-matching characters of a character sequence, in order. For example: <pre>   {@code CharMatcher.is('a').removeFrom("bazaar")}</pre> ... returns {@code "bzr"}.
Returns a string containing all matching characters of a character sequence, in order. For example: <pre>   {@code CharMatcher.is('a').retainFrom("bazaar")}</pre> ... returns {@code "aaa"}.
Returns a string copy of the input character sequence, with each character that matches this matcher replaced by a given replacement character. For example: <pre>   {@code CharMatcher.is('a').replaceFrom("radar", 'o')}</pre> ... returns {@code "rodor"}. <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching character, then iterates the remainder of the sequence calling {@link #matches(char)} for each character.
Returns a string copy of the input character sequence, with each character that matches this matcher replaced by a given replacement sequence. For example: <pre>   {@code CharMatcher.is('a').replaceFrom("yaha", "oo")}</pre> ... returns {@code "yoohoo"}. <p><b>Note:</b> If the replacement is a fixed string with only one character, you are better off calling {@link #replaceFrom(CharSequence, char)} directly.
Returns a substring of the input character sequence that omits all characters this matcher matches from the beginning and from the end of the string. For example: <pre> {@code CharMatcher.anyOf("ab").trimFrom("abacatbab")}</pre> ... returns {@code "cat"}. <p>Note that<pre>   {@code CharMatcher.inRange('\0', ' ').trimFrom(str)}</pre> ... is equivalent to {@link String#trim()}.
Returns a substring of the input character sequence that omits all characters this matcher matches from the beginning of the string. For example: <pre> {@code CharMatcher.anyOf("ab").trimLeadingFrom("abacatbab")}</pre> ... returns {@code "catbab"}.
Returns a substring of the input character sequence that omits all characters this matcher matches from the end of the string. For example: <pre> {@code CharMatcher.anyOf("ab").trimTrailingFrom("abacatbab")}</pre> ... returns {@code "abacat"}.
Returns a string copy of the input character sequence, with each group of consecutive characters that match this matcher replaced by a single replacement character. For example: <pre>   {@code CharMatcher.anyOf("eko").collapseFrom("bookkeeper", '-')}</pre> ... returns {@code "b-p-r"}. <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching character, then iterates the remainder of the sequence calling {@link #matches(char)} for each character.
Collapses groups of matching characters exactly as {@link #collapseFrom} does, except that groups of matching characters at the start or end of the sequence are removed without replacement.
Returns {@code true} if this matcher matches the given character.
Returns a function that calls {@code toString()} on its argument. The function does not accept nulls; it will throw a {@link NullPointerException} when applied to {@code null}.
Returns a function which performs a map lookup. The returned function throws an {@link IllegalArgumentException} if given a key that does not exist in the map.
Returns a function which performs a map lookup with a default value. The inputs that do not belong to the map's key set.
Returns the composition of two functions. For {@code f: A->B} and {@code g: B->C}, composition is defined as the function h such that {@code h(a) == g(f(a))} for each {@code a}. function composition</a>
Creates a function that returns the same boolean output as the given predicate for all inputs.
Returns a joiner which automatically places {@code separator} between consecutive elements.
Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code appendable}.
Appends to {@code appendable} the string representation of each of the remaining arguments.
Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
Appends to {@code builder} the string representation of each of the remaining arguments. Identical to {@link #appendTo(Appendable, Object, Object, Object[])}, except that it does not throw {@link IOException}.
Returns a string containing the string representation of each of {@code parts}, using the previously configured separator between each.
Returns a string containing the string representation of each argument, using the previously configured separator between each.
Returns a joiner with the same behavior as this one, except automatically substituting {@code nullText} for any provided null elements.
Returns a joiner with the same behavior as this joiner, except automatically skipping over any provided null elements.
Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as this {@code Joiner} otherwise.
Appends the string representation of each entry of {@code map}, using the previously configured separator and key-value separator, to {@code appendable}.
Appends the string representation of each entry of {@code map}, using the previously configured separator and key-value separator, to {@code builder}. Identical to {@link #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.
Returns a string containing the string representation of each entry of {@code map}, using the previously configured separator and key-value separator.
Returns a map joiner with the same behavior as this one, except automatically substituting {@code nullText} for any provided null keys or values.
Creates an instance of {@link ToStringHelper}. <p>This is helpful for implementing {@link Object#toString()}. For example, in an object that contains two member variables, {@code x}, and {@code y}, one could write:<pre>   <tt> public class ClassName { }</tt> </pre> Assuming the values of {@code x} and {@code y} are 1 and 2, this code snippet returns the string <tt>"ClassName{x=1, y=2}"</tt>.
Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value} is {@code null}, the string {@code "null"} is used.
Adds a value to the formatted output in {@code value} format.<p/> It is strongly encouraged to use {@link #add(String, Object)} instead and give value a readable name.
Returns the formatted string.
Calls {@link Class#isInstance(Object)}. <p>This method is not supported in GWT yet.
A thread-local destination buffer to keep us from creating new buffers. The starting size is 1024 characters.  If we grow past this we don't put it back in the threadlocal, we just keep going and grow as needed.
Returns the composition of a function and a predicate. For every {@code x}, the generated predicate returns {@code predicate(function(x))}.
Determines whether the two Iterables contain equal elements. More specifically, this method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same number of elements and every element of {@code iterable1} is equal to the corresponding element of {@code iterable2}. <p>This is not a general-purpose method; it assumes that the iterations contain no {@code null} elements.
Returns a splitter that uses the given single-character separator. For example, {@code Splitter.on(',').split("foo,,bar")} returns an iterable containing {@code ["foo", "", "bar"]}.
Returns a splitter that considers any single character matched by the given {@code CharMatcher} to be a separator. For example, {@code Splitter.on(CharMatcher.anyOf(";,")).split("foo,;bar,quux")} returns an iterable containing {@code ["foo", "", "bar", "quux"]}.
Returns a splitter that uses the given fixed string as a separator. For example, {@code Splitter.on(", ").split("foo, bar, baz,qux")} returns an iterable containing {@code ["foo", "bar", "baz,qux"]}.
Returns a splitter that considers any subsequence matching {@code pattern} to be a separator. For example, {@code Splitter.on(Pattern.compile("\r?\n")).split(entireFile)} splits a string into lines whether it uses DOS-style or UNIX-style line terminators.
Returns a splitter that considers any subsequence matching a given pattern (regular expression) to be a separator. For example, {@code Splitter.onPattern("\r?\n").split(entireFile)} splits a string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent to {@code Splitter.on(Pattern.compile(pattern))}.
Returns a splitter that divides strings into pieces of the given length. For example, {@code Splitter.atEach(2).split("abcde")} returns an iterable containing {@code ["ab", "cd", "e"]}. The last piece can be smaller than {@code length} but will never be empty.
Returns a splitter that behaves equivalently to {@code this} splitter, but automatically omits empty strings from the results. For example, {@code Splitter.on(',').omitEmptyStrings().split(",a,,,b,c,,")} returns an iterable containing only {@code ["a", "b", "c"]}. <p>If either {@code trimResults} option is also specified when creating a splitter, that splitter always trims results first before checking for emptiness. So, for example, {@code Splitter.on(':').omitEmptyStrings().trimResults().split(": : : ")} returns an empty iterable. <p>Note that it is ordinarily not possible for {@link #split(CharSequence)} to return an empty iterable, but when using this option, it can (if the input sequence consists of nothing but separators).
Returns a splitter that behaves equivalently to {@code this} splitter, but automatically removes leading and trailing {@linkplain CharMatcher#WHITESPACE whitespace} from each returned substring; equivalent to {@code trimResults(CharMatcher.WHITESPACE)}. For example, {@code Splitter.on(',').trimResults().split(" a, b  ,c  ")} returns an iterable containing {@code ["a", "b", "c"]}.
Returns a splitter that behaves equivalently to {@code this} splitter, but removes all leading or trailing characters matching the given {@code CharMatcher} from each returned substring. For example, {@code Splitter.on(',').trimResults(CharMatcher.is('_')).split("_a ,_b_ ,c__")} returns an iterable containing {@code ["a ", "b_ ", "c"]}.
Splits the {@link CharSequence} passed in parameter.
Returns a new supplier which is the composition of the provided function and supplier. In other words, the new supplier's value will be computed by retrieving the value from {@code first}, and then applying {@code function} to that value. Note that the resulting supplier will not call {@code first} or invoke {@code function} until it is called.
Returns a supplier which caches the instance retrieved during the first call to {@code get()} and returns that value on subsequent calls to {@code get()}. See: <p>The returned supplier is thread-safe. The supplier's serialized form does not contain the cached value, which will be recalculated when {@code get()} is called on the reserialized instance.
Returns a supplier that caches the instance supplied by the delegate and removes the cached value after the specified time has passed. Subsequent calls to {@code get()} return the cached value if the expiration time has not passed. After the expiration time, a new value is retrieved, cached, and returned. See: <p>The returned supplier is thread-safe. The supplier's serialized form does not contain the cached value, which will be recalculated when {@code get()} is called on the reserialized instance.
Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling it, making it thread-safe.
Rethrows the cause exception of a given throwable, discarding the original throwable. Optionally, the stack frames of the cause and the outer exception are combined and the stack trace of the cause is set to this combined trace. If there is no cause the original exception is rethrown unchanged in all cases.
Query Operations (optimizations)
Bulk Operations
See java.util.Collections.CheckedEntrySet for details on attacks.
Implementations of {@code computeNext} <b>must</b> invoke this method when there are no elements left in the iteration.
Stores a key-value pair in the multimap.
Compares the specified object to this multimap for equality. <p>Two {@code ListMultimap} instances are equal if, for each key, they contain the same values in the same order. If the value orderings disagree, the multimaps will not be considered equal.
{@inheritDoc} <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the current count of that element in the multiset, as opposed to the count at the time the entry was retrieved.
The following overrides are for better performance.
Optimizations - Query Operations
Roughly a 33% performance improvement over AbstractMultiset.setCount().
TODO: a way to not have to write this much code?
Returns a string representation of the form <code>{key}={value}</code>.
Creates a new multimap that uses the provided map.
{@inheritDoc} <p>The returned collection is immutable.
{@inheritDoc} <p>The returned collection is immutable.
{@inheritDoc} <p>The returned collection is not serializable.
If collection is empty, remove it from {@code map}. For subcollections, check whether the ancestor collection is empty.
The following methods are provided for better performance.
The following methods are included for better performance.
The following methods are included for better performance.
Removes all values for the provided key. Unlike {@link #removeAll}, it returns the number of removed mappings.
{@inheritDoc} <p>The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on.
The following methods are included to improve performance.
{@inheritDoc} <p>The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on. <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator.
The following methods are included to improve performance.
Returns an iterator across all key-value map entries, used by {@code entries().iterator()} and {@code values().iterator()}. The default behavior, which traverses the values for one key, the values for a second key, and so on, suffices for most {@code AbstractMultimap} implementations.
The following methods are included for performance.
The following methods are included for performance.
returns a SortedSet, even though returning a Set would be sufficient to satisfy the SortedMap.keySet() interface
Comparison and hashing
Returns the hash code for this multimap. <p>The hash code of a multimap is defined as the hash code of the map view, as returned by {@link Multimap#asMap}.
Returns a string representation of the multimap, generated by calling {@code toString} on the map returned by {@link Multimap#asMap}.
Modification Operations
Bulk Operations
{@inheritDoc} <p>This implementation returns {@code true} if {@code other} is a multiset of the same size and if, for each element, the two multisets have the same count.
{@inheritDoc} <p>This implementation returns the hash code of {@link Multiset#entrySet()}.
{@inheritDoc} <p>This implementation returns the result of invoking {@code toString} on {@link Multiset#entrySet()}.
{@inheritDoc} <p>Any duplicates in {@code values} will be stored in the multimap once.
Compares the specified object to this multimap for equality. <p>Two {@code SetMultimap} instances are equal if, for each key, they contain the same values. Equality does not depend on the ordering of keys or values.
{@inheritDoc} Consequently, the values do not follow their natural ordering or the ordering of the value comparator.
Creates a new, empty {@code ArrayList} to hold the collection of values for an arbitrary key.
Returns {@code true} if the collection {@code self} contains all of the elements in the collection {@code c}. <p>This method iterates over the specified collection {@code c}, checking each element returned by the iterator in turn to see if it is contained in the specified collection {@code self}. If all elements are so contained, {@code true} is returned, otherwise {@code false}. TODO: Make public?
Converts an iterable into a collection. If the iterable is already a collection, it is returned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the iterable in the same iteration order.
Returns the elements of {@code unfiltered} that satisfy a predicate. The returned collection is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting collection's iterator does not support {@code remove()}, but all other collection methods are supported. The collection's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException} if an element that doesn't satisfy the predicate is provided. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered collection, only elements that satisfy the filter will be removed from the underlying collection. <p>The returned collection isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered collection's methods, such as {@code size()}, iterate across every element in the underlying collection and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and use the copy.
Delegates to {@link Collection#contains}.  Returns {@code false} on {@code ClassCastException}
Returns a collection that applies {@code function} to each element of {@code fromCollection}. The returned collection is a live view of {@code fromCollection}; changes to one affect the other. <p>The returned collection's {@code add()} and {@code addAll()} methods throw an {@link UnsupportedOperationException}. All other collection methods are supported, as long as {@code fromCollection} supports them. <p>The returned collection isn't threadsafe or serializable, even if {@code fromCollection} is. <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection and use the copy.
Override just to remove a level of indirection from inner loops
Override just to remove a level of indirection from inner loops
Creates a new {@code ConcurrentHashMultiset} containing the specified elements, using the default initial capacity, load factor, and concurrency settings.
Creates an instance using {@code countMap} to store elements and their counts. <p>This instance will assume ownership of {@code countMap}, and other code should not maintain references to the map or modify it in any way.
See Collections.CheckedMap.CheckedEntrySet for details on attacks.
See Collections.CheckedMap.CheckedEntrySet for details on attacks.
Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because placement in hash tables is essentially random, the actual concurrency will vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one is appropriate when it is known that only one thread will modify and all others will only read. Defaults to {@literal 16}.
Creates a {@link ConcurrentMap}, backed by the given strategy, that supports atomic, on-demand computation of values. {@link Map#get} returns the value corresponding to the given key, atomically computes it using the computer function passed to this builder, or waits for another thread to compute the value if necessary. Only one value will be computed for each key at a given time. <p>If an entry's value has not finished computing yet, query methods besides {@link java.util.Map#get} return immediately as if an entry doesn't exist. In other words, an entry isn't externally visible until the value's computation completes. <p>{@link Map#get} in the returned map implementation throws: <ul> <li>{@link NullPointerException} if the key is null or the computer returns null</li> <li>or {@link ComputationException} wrapping an exception thrown by the computation</li> </ul> <p><b>Note:</b> Callers of {@code get()} <i>must</i> ensure that the key argument is of type {@code K}. {@code Map.get()} takes {@code Object}, so the key type is not checked at compile time. Passing an object of a type other than {@code K} can result in that object being unsafely passed to the computer function as type {@code K} not to mention the unsafe key being stored in the map.
Gets a value from an entry waiting for the value to be set by {@link #compute} if necessary. Returns null if a value isn't available at which point CustomConcurrentHashMap tries to compute a new value. waiting
Creates a new, empty map with the specified strategy, initial capacity, load factor and concurrency level.
Sets table to new HashEntry array. Call only while holding lock or in constructor.
Returns the number of key-value mappings in this map.  If the map contains more than {@code Integer.MAX_VALUE} elements, returns {@code Integer.MAX_VALUE}.
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code key.equals(k)}, then this method returns {@code v}; otherwise it returns {@code null}.  (There can be at most one such mapping.)
Returns {@code true} if this map maps one or more keys to the specified value. Note: This method requires a full internal traversal of the hash table, and so is much slower than method {@code containsKey}.
Maps the specified key to the specified value in this table. Neither the key nor the value can be null. <p> The value can be retrieved by calling the {@code get} method with a key that is equal to the original key.
Copies all of the mappings from the specified map to this one. These mappings replace any mappings that this map had for any of the keys currently in the specified map.
Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map.
Returns a {@link java.util.Set} view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from this map, via the {@code Iterator.remove}, {@code Set.remove}, {@code removeAll}, {@code retainAll}, and {@code clear} operations. It does not support the {@code add} or {@code addAll} operations. <p>The view's {@code iterator} is a "weakly consistent" iterator that will never throw {@link java.util.ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Returns a {@link java.util.Collection} view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. The collection supports element removal, which removes the corresponding mapping from this map, via the {@code Iterator.remove}, {@code Collection.remove}, {@code removeAll}, {@code retainAll}, and {@code clear} operations. It does not support the {@code add} or {@code addAll} operations. <p>The view's {@code iterator} is a "weakly consistent" iterator that will never throw {@link java.util.ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Returns a {@link java.util.Set} view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the {@code Iterator.remove}, {@code Set.remove}, {@code removeAll}, {@code retainAll}, and {@code clear} operations. It does not support the {@code add} or {@code addAll} operations. <p>The view's {@code iterator} is a "weakly consistent" iterator that will never throw {@link java.util.ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Finds the next entry in the current chain. Returns true if an entry was found.
Finds the next entry in the current table. Returns true if an entry was found.
Set our entry's value and write through to the map. The value to return is somewhat arbitrary here. Since a WriteThroughEntry does not necessarily track asynchronous changes, the most recent "previous" value could be different from what we return (or could even have been removed in which case the put will re-establish). We do not and cannot guarantee more.
Creates a new, empty map with the specified strategy, initial capacity, load factor and concurrency level.
Overriding these two methods to show that values may be null (but not keys)
Creates a new {@code EnumMultiset} containing the specified elements.
Returns the string representation generated by the delegate's {@code toString} method.
This method was written by Doug Lea with assistance from members of JCP JSR-166 Expert Group and released to the public domain, as explained at
Size the table to be at most 50% full, if possible
{@inheritDoc} <p>Creates an empty {@code HashSet} for a collection of values for one key.
Creates a new {@code HashMultiset} containing the specified elements.
Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail.
Associates all of the given map's keys and values in the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail.
Returns a newly-created immutable bimap.
Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p><b>Note:</b> If {@code map} is an {@code ImmutableBiMap}, the given map itself will be returned.
Returns an immutable set of the values in this map. The values are in the same order as the parameters used to build this map.
Guaranteed to throw an exception and leave the bimap unmodified.
Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
Associates all of {@code map's} keys and values in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
Guaranteed to throw an exception and leave the map unmodified.
Guaranteed to throw an exception and leave the collection unmodified.
Guaranteed to throw an exception and leave the collection unmodified.
Guaranteed to throw an exception and leave the collection unmodified.
Guaranteed to throw an exception and leave the collection unmodified.
Guaranteed to throw an exception and leave the collection unmodified.
Guaranteed to throw an exception and leave the collection unmodified.
Returns a list view of the collection.
Adds each element of {@code elements} to the {@code ImmutableCollection} being built. <p>Note that each builder class overrides this method in order to covariantly return its own type.
Adds each element of {@code elements} to the {@code ImmutableCollection} being built. <p>Note that each builder class overrides this method in order to covariantly return its own type.
Identical to {@link #of(Object[])}.
Returns an immutable list containing the given elements, in order. <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code ImmutableList}, no copy will actually be performed, and the given list itself will be returned. <p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)} returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one element (the given list itself). <p>This method is safe to use even when {@code elements} is a synchronized or concurrent collection that is currently being modified by another thread.
Guaranteed to throw an exception and leave the list unmodified.
Guaranteed to throw an exception and leave the list unmodified.
Guaranteed to throw an exception and leave the list unmodified.
Guaranteed to throw an exception and leave the list unmodified.
Returns this list instance.
Adds {@code element} to the {@code ImmutableList}.
Adds each element of {@code elements} to the {@code ImmutableList}.
Adds each element of {@code elements} to the {@code ImmutableList}.
Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.
Adds a key-value mapping to the built multimap.
Stores a collection of values with the same key in the built multimap.
Stores an array of values with the same key in the built multimap.
Stores another multimap's entries in the built multimap. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view, with new keys and values following any existing keys and values.
Returns an immutable multimap containing the same mappings as {@code multimap}. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view. <p><b>Note:</b> Despite what the method name suggests, if {@code multimap} is an {@code ImmutableListMultimap}, no copy will actually be performed, and the given multimap itself will be returned.
Returns an immutable list of the values for the given key.  If no mappings in the multimap have the provided key, an empty immutable list is returned. The values are in the same order as the parameters used to build this multimap.
Guaranteed to throw an exception and leave the multimap unmodified.
Guaranteed to throw an exception and leave the multimap unmodified.
Associates all of the given map's keys and values in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code ImmutableMap}, no copy will actually be performed, and the given map itself will be returned.
Guaranteed to throw an exception and leave the map unmodified.
Guaranteed to throw an exception and leave the map unmodified.
Guaranteed to throw an exception and leave the map unmodified.
Guaranteed to throw an exception and leave the map unmodified.
Returns an immutable multimap containing the same mappings as {@code multimap}. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view. <p><b>Note:</b> Despite what the method name suggests, if {@code multimap} is an {@code ImmutableMultimap}, no copy will actually be performed, and the given multimap itself will be returned.
Guaranteed to throw an exception and leave the multimap unmodified.
Guaranteed to throw an exception and leave the multimap unmodified.
Guaranteed to throw an exception and leave the multimap unmodified.
Guaranteed to throw an exception and leave the multimap unmodified.
Returns an immutable set of the distinct keys in this multimap. These keys are ordered according to when they first appeared during the construction of this multimap.
Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses the values for the first key, the values for the second key, and so on.
Returns a collection, which may contain duplicates, of all keys. The number of times a key appears in the returned multiset equals the number of mappings the key has in the multimap. Duplicate keys appear consecutively in the multiset's iteration order.
Returns an immutable collection of the values in this multimap. Its iterator traverses the values for the first key, the values for the second key, and so on.
Returns an immutable multiset containing the given elements. <p>The multiset is ordered by the first occurrence of each element. For example, {@code ImmutableMultiset.of(2, 3, 1, 3)} yields a multiset with elements in the order {@code 2, 3, 3, 1}.
Returns an immutable multiset containing the given elements. <p>The multiset is ordered by the first occurrence of each element. For example, {@code ImmutableMultiset.copyOf(Arrays.asList(2, 3, 1, 3))} yields a multiset with elements in the order {@code 2, 3, 3, 1}. <p>Note that if {@code c} is a {@code Collection<String>}, then {@code ImmutableMultiset.copyOf(c)} returns an {@code ImmutableMultiset<String>} containing each of the strings in {@code c}, while {@code ImmutableMultiset.of(c)} returns an {@code ImmutableMultiset<Collection<String>>} containing one element (the given collection itself). <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code ImmutableMultiset}, no copy will actually be performed, and the given multiset itself will be returned.
Returns an immutable multiset containing the given elements. <p>The multiset is ordered by the first occurrence of each element. For example, {@code ImmutableMultiset.copyOf(Arrays.asList(2, 3, 1, 3).iterator())} yields a multiset with elements in the order {@code 2, 3, 3, 1}.
Guaranteed to throw an exception and leave the collection unmodified.
TODO: Serialization of the element set should serialize the multiset, and deserialization should call multiset.elementSet(). Then reserialized(multiset).elementSet() == reserialized(multiset.elementSet()) Currently, those object references differ.
Adds {@code element} to the {@code ImmutableMultiset}.
Adds a number of occurrences of an element to this {@code ImmutableMultiset}.
Adds or removes the necessary occurrences of an element such that the element attains the desired count.
Adds each element of {@code elements} to the {@code ImmutableMultiset}.
Adds each element of {@code elements} to the {@code ImmutableMultiset}.
Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code Builder}.
Returns an immutable set containing a single element. This set behaves and performs comparably to {@link Collections#singleton}, but will not accept a null element. It is preferable mainly for consistency and maintainability of your code.
Returns an immutable set containing the given elements, in order. Repeated occurrences of an element (according to {@link Object#equals}) after the first are ignored (but too many of these may result in the set being sized inappropriately).
Returns an immutable set containing the given elements, in order. Repeated occurrences of an element (according to {@link Object#equals}) after the first are ignored (but too many of these may result in the set being sized inappropriately). This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSet.copyOf(s)} returns an {@code ImmutableSet<String>} containing each of the strings in {@code s}, while {@code ImmutableSet.of(s)} returns a {@code ImmutableSet<Set<String>>} containing one element (the given set itself). <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code ImmutableSet} (but not an {@code ImmutableSortedSet}), no copy will actually be performed, and the given set itself will be returned.
Returns an immutable set containing the given elements, in order. Repeated occurrences of an element (according to {@link Object#equals}) after the first are ignored.
Adds {@code element} to the {@code ImmutableSet}.  If the {@code ImmutableSet} already contains {@code element}, then {@code add} has no effect (only the previously added element is retained).
Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate elements (only the first duplicate element is added).
Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate elements (only the first duplicate element is added).
Returns a newly-created {@code ImmutableSet} based on the contents of the {@code Builder}.
Adds a key-value mapping to the built multimap if it is not already present.
Returns a newly-created immutable set multimap.
Returns an immutable set multimap containing the same mappings as {@code multimap}. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are ignored. <p><b>Note:</b> Despite what the method name suggests, if {@code multimap} is an {@code ImmutableSetMultimap}, no copy will actually be performed, and the given multimap itself will be returned.
Returns an immutable set of the values for the given key.  If no mappings in the multimap have the provided key, an empty immutable set is returned. The values are in the same order as the parameters used to build this multimap.
Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses the values for the first key, the values for the second key, and so on. TODO: Fix this so that two copies of the entries are not created.
Override contains(), indexOf(), and lastIndexOf() to be O(log N) instead of O(N).
The returned ImmutableSortedAsList maintains the contains(), indexOf(), and lastIndexOf() performance benefits.
The ImmutableAsList serialized form has the correct behavior.
Returns an immutable map containing the same entries as {@code map}, sorted by the natural ordering of the keys. <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code ImmutableSortedMap}, it may be returned instead of a copy. <p>This method is not type-safe, as it may be called on a map with keys that are not mutually comparable.
Returns an immutable map containing the same entries as {@code map}, with keys sorted by the provided comparator. <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code ImmutableSortedMap}, it may be returned instead of a copy.
Returns an immutable map containing the same entries as the provided sorted map, with the same ordering. <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code ImmutableSortedMap}, it may be returned instead of a copy.
Returns a builder that creates immutable sorted maps whose keys are ordered by their natural ordering. The sorted maps use {@link Ordering#natural()} as the comparator. <p>Note: the type parameter {@code K} extends {@code Comparable<K>} rather than {@code Comparable<? super K>} as a workaround for javac <a 6468354</a>.
Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of their natural ordering. <p>Note: the type parameter {@code K} extends {@code Comparable<K>} rather than {@code Comparable<? super K>} as a workaround for javac <a 6468354</a>.
Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableSortedMap#orderedBy}.
Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail.
Associates all of the given map's keys and values in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail.
Returns a newly-created immutable sorted map.
Returns an immutable set of the mappings in this map, sorted by the key ordering.
Returns an immutable sorted set of the keys in this map.
Returns an immutable collection of the values in this map, sorted by the ordering of the corresponding keys.
Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the natural ordering of the keys is used. Note that its behavior is not consistent with {@link TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.
This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less than {@code toKey}. <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code toKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code toKey}.
This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges from {@code fromKey}, inclusive, to {@code toKey}, exclusive. <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.
This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are greater than or equals to {@code fromKey}. <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}.
Not supported. Use {@link ImmutableSortedMap#naturalOrder}, which offers better type-safety, instead. This method exists only to hide {@link ImmutableMap#builder} from consumers of {@code ImmutableSortedMap}.
Not supported. <b>You are attempting to create a map that may contain a non-{@code Comparable} key.</b> Proper calls will resolve to the version in {@code ImmutableSortedMap}, not this dummy version.
Not supported. <b>You are attempting to create a map that may contain non-{@code Comparable} keys.</b> Proper calls will resolve to the version in {@code ImmutableSortedMap}, not this dummy version.
Not supported. <b>You are attempting to create a map that may contain non-{@code Comparable} keys.</b> Proper calls to will resolve to the version in {@code ImmutableSortedMap}, not this dummy version.
Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@link Comparable#compareTo}, only the first one specified is included.
Returns an array that removes duplicate consecutive elements, according to the provided comparator. Note that the input array is modified. This method does not support empty arrays.
Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. To create a copy of a {@code SortedSet} that preserves the comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)} returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s}, while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>} containing one element (the given set itself). <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code ImmutableSortedSet}, it may be returned instead of a copy. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable.
Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compare()}, only the first one specified is included. This method iterates over {@code elements} at most once. <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code ImmutableSortedSet}, it may be returned instead of a copy.
Simplified version of {@link Iterables#toArray} that is GWT safe.
Returns {@code true} if {@code elements} is a {@code SortedSet} that uses {@code comparator} to order its elements. Note that equivalent comparators may still return {@code false}, if {@code equals} doesn't consider them equal. If one comparator is {@code null} and the other is {@link Ordering#natural()}, this method returns {@code true}.
Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse of their natural ordering. <p>Note: the type parameter {@code E} extends {@code Comparable<E>} rather than {@code Comparable<? super E>} as a workaround for javac <a 6468354</a>.
Returns a builder that creates immutable sorted sets whose elements are ordered by their natural ordering. The sorted sets use {@link Ordering#natural()} as the comparator. This method provides more type-safety than {@link #builder}, as it can be called only for classes that implement {@link Comparable}. <p>Note: the type parameter {@code E} extends {@code Comparable<E>} rather than {@code Comparable<? super E>} as a workaround for javac <a 6468354</a>.
Adds {@code element} to the {@code ImmutableSortedSet}.  If the {@code ImmutableSortedSet} already contains {@code element}, then {@code add} has no effect. (only the previously added element is retained).
Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate elements (only the first duplicate element is added).
Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate elements (only the first duplicate element is added).
Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code Builder} and its comparator.
Returns the comparator that orders the elements, which is {@link Ordering#natural()} when the natural ordering of the elements is used. Note that its behavior is not consistent with {@link SortedSet#comparator()}, which returns {@code null} to indicate natural ordering.
{@inheritDoc} <p>This method returns a serializable {@code ImmutableSortedSet}. <p>The {@link SortedSet#headSet} documentation states that a subset of a subset throws an {@link IllegalArgumentException} if passed a {@code toElement} greater than an earlier {@code toElement}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code toElement}.
{@inheritDoc} <p>This method returns a serializable {@code ImmutableSortedSet}. <p>The {@link SortedSet#subSet} documentation states that a subset of a subset throws an {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code fromElement}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromElement}. Similarly, this method keeps the original {@code toElement}, instead of throwing an exception, if passed a {@code toElement} greater than an earlier {@code toElement}.
{@inheritDoc} <p>This method returns a serializable {@code ImmutableSortedSet}. <p>The {@link SortedSet#tailSet} documentation states that a subset of a subset throws an {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code fromElement}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromElement}.
Not supported. Use {@link ImmutableSortedSet#naturalOrder}, which offers better type-safety, instead. This method exists only to hide {@link ImmutableSet#builder} from consumers of {@code ImmutableSortedSet}.
Not supported. <b>You are attempting to create a set that may contain a non-{@code Comparable} element.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this dummy version.
Not supported. <b>You are attempting to create a set that may contain a non-{@code Comparable} element.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this dummy version. </b>
Not supported. <b>You are attempting to create a set that may contain non-{@code Comparable} elements.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this dummy version.
Returns {@code true} if {@code iterable} contains {@code element}; that is, any object for while {@code equals(element)} is true.
Removes, from an iterable, every element that belongs to the provided collection. <p>This method calls {@link Collection#removeAll} if {@code iterable} is a collection, and {@link Iterators#removeAll} otherwise.
Removes, from an iterable, every element that does not belong to the provided collection. <p>This method calls {@link Collection#retainAll} if {@code iterable} is a collection, and {@link Iterators#retainAll} otherwise.
Removes, from an iterable, every element that satisfies the provided predicate.
Returns a string representation of {@code iterable}, with the format {@code [e1, e2, ..., en]}.
Returns the single element contained in {@code iterable}, or {@code defaultValue} if the iterable is empty.
Adds all elements in {@code iterable} to {@code collection}.
Returns the number of elements in the specified iterable that equal the specified object.
Combines multiple iterables into a single iterable. The returned iterable has an iterator that traverses the elements of each iterable in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. The methods of the returned iterable may throw {@code NullPointerException} if any of the input iterators are null.
Returns the elements of {@code unfiltered} that satisfy a predicate. The resulting iterable's iterator does not support {@code remove()}.
Returns {@code true} if one or more elements in {@code iterable} satisfy the predicate.
Returns the first element in {@code iterable} that satisfies the given predicate.
Returns the index in {@code iterable} of the first element that satisfies the provided {@code predicate}, or {@code -1} if the Iterable has no such elements. <p>More formally, returns the lowest index {@code i} such that {@code predicate.apply(Iterables.get(iterable, i))} is {@code true} or {@code -1} if there is no such index.
Returns an iterable that applies {@code function} to each element of {@code fromIterable}. <p>The returned iterable's iterator supports {@code remove()} if the provided iterator does. After a successful {@code remove()} call, {@code fromIterable} no longer contains the corresponding element.
Returns a view of the supplied iterable that wraps each generated {@link Iterator} through {@link Iterators#consumingIterator(Iterator)}.
Adapts a list to an iterable with reversed iteration order. It is especially useful in foreach-style loops: <pre class="code">   {@code List<String> mylist = ... for (String str : Iterables.reverse(mylist)) { }}</pre> There is no corresponding method in {@link Iterators}, since {@link Iterable#iterator} can simply be invoked on the result of calling this method.
Removes the specified element from the specified iterable. <p>This method iterates over the iterable, checking each element returned by the iterator in turn to see if it equals the object {@code o}. If they are equal, it is removed from the iterable with the iterator's {@code remove} method. At most one element is removed, even if the iterable contains multiple members that equal {@code o}. <p><b>Warning</b>: Do not use this method for a collection, such as a {@link HashSet}, that has a fast {@code remove} method.
Traverses an iterator and removes every element that belongs to the provided collection. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
Removes every element that satisfies the provided predicate from the iterator. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
Traverses an iterator and removes every element that does not belong to the provided collection. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
Returns the single element contained in {@code iterator}.
Returns the single element contained in {@code iterator}, or {@code defaultValue} if the iterator is empty.
Adds all elements in {@code iterator} to {@code collection}. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
Returns an iterator that cycles indefinitely over the provided elements. <p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code remove()} is called, subsequent cycles omit the removed element, but {@code elements} does not change. The iterator's {@code hasNext()} method returns {@code true} until all of the original elements have been removed. <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit {@code break} or be certain that you will eventually remove all the elements.
Combines multiple iterators into a single iterator. The returned iterator iterates across the elements of each iterator in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it. The methods of the returned iterator may throw {@code NullPointerException} if any of the input iterators are null.
Returns the elements of {@code unfiltered} that satisfy a predicate.
Returns the first element in {@code iterator} that satisfies the given predicate. If a matching element is found, the iterator will be left in a state such that calling {@code iterator.remove()} will remove the found item. If no such element is found, the iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
Returns the index in {@code iterator} of the first element that satisfies the provided {@code predicate}, or {@code -1} if the Iterator has no such elements. <p>More formally, returns the lowest index {@code i} such that {@code predicate.apply(Iterators.get(iterator, i))} is {@code true}, or {@code -1} if there is no such index. <p>If -1 is returned, the iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.  Otherwise, the iterator will be set to the element which satisfies the {@code predicate}.
Returns an iterator that applies {@code function} to each element of {@code fromIterator}. <p>The returned iterator supports {@code remove()} if the provided iterator does. After a successful {@code remove()} call, {@code fromIterator} no longer contains the corresponding element.
Advances {@code iterator} {@code position + 1} times, returning the element at the {@code position}th position.
Returns an iterator containing the elements of {@code array} in order. The returned iterator is a view of the array; subsequent changes to the array will be reflected in the iterator. <p><b>Note:</b> It is often preferable to represent your data using a collection type, for example using {@link Arrays#asList(Object[])}, making this method unnecessary. <p>The {@code Iterable} equivalent of this method is either {@link Arrays#asList(Object[])} or {@link ImmutableList#of(Object[])}}.
Returns an iterator containing the elements in the specified range of {@code array} in order. The returned iterator is a view of the array; subsequent changes to the array will be reflected in the iterator. <p>The {@code Iterable} equivalent of this method is {@code Arrays.asList(array).subList(offset, offset + length)}.
Returns a {@code PeekingIterator} backed by the given iterator. <p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the iteration, and hence return the same object each time. A subsequent call to {@code next} is guaranteed to return the same object again. For example: <pre>   {@code PeekingIterator<String> peekingIterator = String a1 = peekingIterator.peek(); // returns "a" String a2 = peekingIterator.peek(); // also returns "a" String a3 = peekingIterator.next(); // also returns "a"}</pre> Any structural changes to the underlying iteration (aside from those performed by the iterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined state. <p>The returned iterator does not support removal after peeking, as explained by {@link PeekingIterator#remove()}. <p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be returned to the caller, although this is neither guaranteed to occur nor required to be consistent.  For example, this method <i>might</i> choose to pass through recognized implementations of {@code PeekingIterator} when the behavior of the implementation is known to meet the contract guaranteed by this method. <p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each individual iterator as it is generated.
{@inheritDoc} <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key.
{@inheritDoc} <p>Creates a decorated {@code LinkedHashSet} that also keeps track of the order in which key-value pairs are added to the multimap.
{@inheritDoc} <p>Generates an iterator across map entries that follows the ordering in which the key-value pairs were added to the multimap.
{@inheritDoc} <p>If {@code values} is not empty and the multimap already contains a mapping for {@code key}, the {@code keySet()} ordering is unchanged. However, the provided values always come last in the {@link #entries()} and {@link #values()} iteration orderings.
Returns a set of all key-value pairs. Changes to the returned set will update the underlying multimap, and vice versa. The entries set does not support the {@code add} or {@code addAll} operations. <p>The iterator generated by the returned set traverses the entries in the order they were added to the multimap. <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator.
Returns a collection of all values in the multimap. Changes to the returned collection will update the underlying multimap, and vice versa. <p>The iterator generated by the returned collection traverses the values in the order they were added to the multimap.
Creates a new {@code LinkedHashMultiset} containing the specified elements.
Adds a new node for the specified key-value pair before the specified {@code nextSibling} element, or at the end of the list if {@code nextSibling} is null. Note: if {@code nextSibling} is specified, it MUST be for an node for the same {@code key}!
{@inheritDoc} <p>If any entries for the specified {@code key} already exist in the multimap, their values are changed in-place without affecting the iteration order. <p>The returned list is immutable and implements {@link java.util.RandomAccess}.
{@inheritDoc} <p>The returned list is immutable and implements {@link java.util.RandomAccess}.
{@inheritDoc} <p>If the multimap is modified while an iteration over the list is in progress (except through the iterator's own {@code add}, {@code set} or {@code remove} operations) the results of the iteration are undefined. <p>The returned list is not serializable and does not have random access.
{@inheritDoc} <p>The iterator generated by the returned collection traverses the values in the order they were added to the multimap.
{@inheritDoc} <p>The iterator generated by the returned collection traverses the entries in the order they were added to the multimap. <p>An entry's {@link Entry#getKey} method always returns the same key, regardless of what happens subsequently. As long as the corresponding key-value mapping is not removed from the multimap, {@link Entry#getValue} returns the value from the multimap, which may change over time, and {@link Entry#setValue} modifies that value. Removing the mapping from the multimap does not alter the value returned by {@code getValue()}, though a subsequent {@code setValue()} call won't update the multimap but will lead to a revised value being returned by {@code getValue()}.
TODO: Override contains() and remove() for better performance.
Returns a list that applies {@code function} to each element of {@code fromList}. The returned list is a transformed view of {@code fromList}; changes to {@code fromList} will be reflected in the returned list and vice versa. <p>Since functions are not reversible, the transform is one-way and new items cannot be stored in the returned list. The {@code add}, {@code addAll} and {@code set} methods are unsupported in the returned list. <p>The function is applied lazily, invoked when needed. This is necessary for the returned list to be a view, but it means that the function will be applied many times for bulk operations like {@link List#contains} and {@link List#hashCode}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned list doesn't need to be a view, copy the returned list into a new list of your choosing. <p>If {@code fromList} implements {@link RandomAccess}, so will the returned list. The returned list always implements {@link Serializable}, but serialization will succeed only when {@code fromList} and {@code function} are serializable. The returned list is threadsafe if the supplied list and function are.
The default implementation inherited is based on iteration and removal of each element which can be overkill. That's why we forward this call directly to the backing list.
Sets a custom initial capacity (defaults to 16). Resizing this or any other kind of hash table is a relatively slow operation, so, when possible, it is a good idea to provide estimates of expected table sizes. negative
Specifies that each entry should be automatically removed from the map once a fixed duration has passed since the entry's creation.
Builds the final map, without on-demand computation of values. This method does not alter the state of this {@code MapMaker} instance, so it can be invoked again to create multiple independent maps.
Builds a map that supports atomic, on-demand computation of values. {@link Map#get} either returns an already-computed value for the given key, atomically computes it using the supplied function, or, if another thread is currently computing the value for this key, simply waits for that thread to finish and returns its computed value. Note that the function may be executed concurrently by multiple threads, but only for distinct keys. <p>If an entry's value has not finished computing yet, query methods besides {@code get} return immediately as if an entry doesn't exist. In other words, an entry isn't externally visible until the value's computation completes. <p>{@link Map#get} on the returned map will never return {@code null}. It may throw: <ul> <li>{@link NullPointerException} if the key is null or the computing <li>{@link ComputationException} if an exception was thrown by the </ul> <p><b>Note:</b> Callers of {@code get} <i>must</i> ensure that the key argument is of type {@code K}. The {@code get} method accepts {@code Object}, so the key type is not checked at compile time. Passing an object of a type other than {@code K} can result in that object being unsafely passed to the computing function as type {@code K}, and unsafely stored in the map. <p>If {@link Map#put} is called before a computation completes, other threads waiting on the computation will wake up and return the stored value. When the computation completes, its new result will overwrite the value that was put in the map manually. <p>This method does not alter the state of this {@code MapMaker} instance, so it can be invoked again to create multiple independent maps.
Sets the value reference on an entry and notifies waiting threads.
Removes the entry in the event of an exception. Ideally, we'd clean up as soon as the computation completes, but we can't do that without keeping a reference to this entry from the original.
Waits for a value that may still be computing. Unlike get(), this method can block (in the case of FutureValueReference) or throw an exception.
Creates a <i>mutable</i>, empty {@code HashMap} instance. <p><b>Note:</b> if mutability is not required, use {@link ImmutableMap#of()} instead. <p><b>Note:</b> if {@code K} is an {@code enum} type, use {@link #newEnumMap} instead.
Creates a {@code HashMap} instance with enough capacity to hold the specified number of elements without rehashing.
Returns an appropriate value for the "capacity" (in reality, "minimum table size") parameter of a {@link HashMap} constructor, such that the resulting table will be between 25% and 50% full when it contains {@code expectedSize} entries.
Creates a <i>mutable</i> {@code HashMap} instance with the same mappings as the specified map. <p><b>Note:</b> if mutability is not required, use {@link ImmutableMap#copyOf(Map)} instead. <p><b>Note:</b> if {@code K} is an {@link Enum} type, use {@link #newEnumMap} instead.
Creates a <i>mutable</i>, empty, insertion-ordered {@code LinkedHashMap} instance. <p><b>Note:</b> if mutability is not required, use {@link ImmutableMap#of()} instead.
Creates a <i>mutable</i> {@code TreeMap} instance with the same mappings as the specified map and using the same ordering as the specified map. <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedMap#copyOfSorted(SortedMap)} instead.
Creates a <i>mutable</i>, empty {@code TreeMap} instance using the given comparator. <p><b>Note:</b> if mutability is not required, use {@code ImmutableSortedMap.orderedBy(comparator).build()} instead.
Creates an {@code EnumMap} with the same mappings as the specified map.
Creates an {@code IdentityHashMap} instance.
Returns a synchronized (thread-safe) bimap backed by the specified bimap. In order to guarantee serial access, it is critical that <b>all</b> access to the backing bimap is accomplished through the returned bimap. <p>It is imperative that the user manually synchronize on the returned map when accessing any of its collection views: <pre>   {@code BiMap<Long, String> map = Maps.synchronizedBiMap( Set<Long> set = map.keySet();  // Needn't be in synchronized block synchronized (map) {  // Synchronizing on map, not set! }}</pre> Failure to follow this advice may result in non-deterministic behavior. <p>The returned bimap will be serializable if the specified bimap is serializable.
Computes the difference between two maps. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}. <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call {@code left.equals(right)} instead of this method.
Returns an immutable map for which the {@link Map#values} are the given elements in the given order, and each key is the product of invoking a supplied function on its corresponding value. TODO: consider returning a bimap, whose inverse view does lookups by invoking the function.
Returns an immutable map entry with the specified key and value. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}. <p>The returned entry is serializable.
Returns an unmodifiable view of the specified map entry. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}. This also has the side-effect of redefining {@code equals} to comply with the Entry contract, to avoid a possible nefarious implementation of equals.
See java.util.Collections.UnmodifiableEntrySet for details on attacks.
See java.util.Collections.UnmodifiableEntrySet for details on attacks.
Returns an unmodifiable view of the specified bimap. This method allows modules to provide users with "read-only" access to internal bimaps. Query operations on the returned bimap "read through" to the specified bimap, and attemps to modify the returned map, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned bimap will be serializable if the specified bimap is serializable.
Returns a view of a map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: <pre>   {@code Map<String, Integer> map = ImmutableMap.of("a", 4, "b", 9); Function<Integer, Double> sqrt = new Function<Integer, Double>() { }; Map<String, Double> transformed = Maps.transformValues(sqrt, map); System.out.println(transformed);}</pre> ... prints {@code {a=2.0, b=3.0}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing.
Returns a map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. The map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException} if a key that doesn't satisfy the predicate is provided. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
Returns a map containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. The {@link Map#put}, {@link Map#putAll}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException} if a value that doesn't satisfy the predicate is provided. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
Returns a map containing the mappings in {@code unfiltered} that satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. The map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException} if a key/value pair that doesn't satisfy the predicate is provided. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
Returns {@code true} if this map contains no key-value mappings. <p>The implementation returns {@code entrySet().isEmpty()}.
Delegates to {@link Map#get}.  Returns {@code null} on {@code ClassCastException}.
Delegates to {@link Map#containsKey}.  Returns {@code false} on {@code ClassCastException}
Creates a new {@code Multimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link Collection} classes. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. However, the multimap's {@code get} method returns instances of a different class than {@code factory.get()} does. <p>The multimap is serializable if {@code map}, {@code factory}, the collections generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedMultimap}. <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()}, {@link HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link LinkedListMultimap#create()}, {@link TreeMultimap#create()}, and {@link TreeMultimap#create(Comparator, Comparator)} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the collections returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references.
Creates a new {@code ListMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link List} classes. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. The multimap's {@code get}, {@code removeAll}, and {@code replaceValues} methods return {@code RandomAccess} lists if the factory does. However, the multimap's {@code get} method returns instances of a different class than does {@code factory.get()}. <p>The multimap is serializable if {@code map}, {@code factory}, the lists generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedListMultimap}. <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()} and {@link LinkedListMultimap#create()} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the lists returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references.
Copies each key-value mapping in {@code source} into {@code dest}, with its key and value reversed.
Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to guarantee serial access, it is critical that <b>all</b> access to the backing multimap is accomplished through the returned multimap. <p>It is imperative that the user manually synchronize on the returned multimap when accessing any of its collection views: <pre>  {@code Multimap<K, V> m = Multimaps.synchronizedMultimap( ... Set<K> s = m.keySet();  // Needn't be in synchronized block ... synchronized (m) {  // Synchronizing on m, not s! }}</pre> Failure to follow this advice may result in non-deterministic behavior. <p>Note that the generated multimap's {@link Multimap#removeAll} and {@link Multimap#replaceValues} methods return collections that aren't synchronized. <p>The returned multimap will be serializable if the specified multimap is serializable.
Returns an unmodifiable view of the specified multimap {@code asMap} entry. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}, and the collection returned by {@code getValue} is also an unmodifiable (type-preserving) view. This also has the side-effect of redefining equals to comply with the Map.Entry contract, and to avoid a possible nefarious implementation of equals.
Returns an unmodifiable view of the specified set of {@code asMap} entries. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}, as do any operations that attempt to modify the returned collection.
Creates an index {@code ImmutableMultimap} that contains the results of applying a specified function to each item in an {@code Iterable} of values. Each value will be stored as a value in the resulting multimap, yielding a multimap with the same size as the input iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot, it does <em>not</em> reflect subsequent changes on the input iterable. <p>For example, <pre class="code">  {@code List<String> badGuys Function<String, Integer> stringLengthFunction = ...; Multimap<Integer, String> index System.out.println(index);}</pre> prints <pre class="code">  {@code {4=[Inky], 5=[Pinky, Pinky, Clyde], 6=[Blinky]}}</pre> <p>The returned multimap is serializable if its keys and values are all serializable. <li> {@code values} is null <li> {@code keyFunction} is null <li> An element in {@code values} is null <li> {@code keyFunction} returns null for any element of {@code values} </ul>
Returns an immutable multiset entry with the specified element and count.
Returns a multiset view of the specified set. The multiset is backed by the set, so changes to the set are reflected in the multiset, and vice versa. If the set is modified while an iteration over the multiset is in progress (except through the iterator's own {@code remove} operation) the results of the iteration are undefined. <p>The multiset supports element removal, which removes the corresponding element from the set. It does not support the {@code add} or {@code addAll} operations, nor does it support the use of {@code setCount} to add elements. <p>The returned multiset will be serializable if the specified set is serializable. The multiset is threadsafe if the set is threadsafe.
Returns an unmodifiable <b>view</b> of the intersection of two multisets. An element's count in the multiset is the smaller of its counts in the two backing multisets. The iteration order of the returned multiset matches the element set of {@code multiset1}, with repeated occurrences of the same element appearing consecutively. <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
Indicates whether an object equals this entry, following the behavior specified in {@link Multiset.Entry#equals}.
Return this entry's hash code, following the behavior specified in {@link Multiset.Entry#hashCode}.
Returns a string representation of this multiset entry. The string representation consists of the associated element if the associated count is one, and otherwise the associated element followed by the characters " x " (space, x and space) followed by the count. Elements and counts are converted to strings as by {@code String.valueOf}.
Default access so that ImmutableClassToInstanceMap can share it
Override to remove a level of indirection from inner loop
Returns an array containing all of the elements in the specified collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of the specified collection. <p>If the collection fits in the specified array with room to spare (i.e., the array has more elements than the collection), the element in the array immediately following the end of the collection is set to null. This is useful in determining the length of the collection <i>only</i> if the caller knows that the collection does not contain any null elements. <p>This method returns the elements in the order they are returned by the collection's iterator. <p>TODO: Support concurrent collections whose size can change while the method is running.
Returns an array containing all of the elements in the specified collection. This method returns the elements in the order they are returned by the collection's iterator. The returned array is "safe" in that no references to it are maintained by the collection. The caller is thus free to modify the returned array. <p>This method assumes that the collection size doesn't change while the method is running. <p>TODO: Support concurrent collections whose size can change while the method is running.
Returns a copy of the given iterable sorted by this ordering. The input is not modified. The returned list is modifiable, serializable, and has random access. <p>Unlike {@link Sets#newTreeSet(Iterable)}, this method does not collapse elements that compare as zero, and the resulting collection does not maintain its own sort order.
Returns the largest of the specified values according to this ordering. If there are multiple largest values, the first of those is returned.
Returns the larger of the two values according to this ordering. If the values compare as 0, the first is returned. <p><b>Implementation note:</b> this method is invoked by the default implementations of the other {@code max} overloads, so overriding it will affect their behavior.
Returns the smallest of the specified values according to this ordering. If there are multiple smallest values, the first of those is returned.
Returns the smaller of the two values according to this ordering. If the values compare as 0, the first is returned. <p><b>Implementation note:</b> this method is invoked by the default implementations of the other {@code min} overloads, so overriding it will affect their behavior.
Clone the given array using {@link Object#clone()}.  It is factored out so that it can be emulated in GWT.
Wrapper around {@link System#arraycopy} so that it can be emulated correctly in GWT. <p>It is only intended for the case {@code src} and {@code dest} are different.  It also doesn't validate the types and indices. <p>As of GWT 2.0, The built-in {@link System#arraycopy} doesn't work in general case.  See for more details.
TODO: Move to ObjectArrays (same code in ImmutableList).
Override the six min/max methods to "hoist" delegation outside loops
Returns a new {@code EnumSet} instance containing the given elements. Unlike {@link EnumSet#copyOf(Collection)}, this method does not produce an exception on an empty collection, and it may be called on any iterable, not just a {@code Collection}.
Creates a <i>mutable</i>, empty {@code HashSet} instance. <p><b>Note:</b> if mutability is not required, use {@link ImmutableSet#of()} instead. <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link EnumSet#noneOf} instead.
Creates a <i>mutable</i> {@code HashSet} instance containing the given elements in unspecified order. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#of(Object[])} instead. <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link EnumSet#of(Enum, Enum[])} instead.
Creates an empty {@code HashSet} instance with enough capacity to hold the specified number of elements without rehashing.
Creates a <i>mutable</i> {@code HashSet} instance containing the given elements in unspecified order. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#copyOf(Iterable)} instead. <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)} instead.
Creates a <i>mutable</i> {@code HashSet} instance containing the given elements in unspecified order. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#copyOf(Iterable)} instead. <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet} instead.
Creates a <i>mutable</i>, empty {@code LinkedHashSet} instance. <p><b>Note:</b> if mutability is not required, use {@link ImmutableSet#of()} instead.
Creates a <i>mutable</i> {@code LinkedHashSet} instance containing the given elements in order. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#copyOf(Iterable)} instead.
Creates a <i>mutable</i>, empty {@code TreeSet} instance with the given comparator. <p><b>Note:</b> if mutability is not required, use {@code ImmutableSortedSet.orderedBy(comparator).build()} instead.
Returns a set backed by the specified map. The resulting set displays the same ordering, concurrency, and performance characteristics as the backing map. In essence, this factory method provides a {@link Set} implementation corresponding to any {@link Map} implementation. There is no need to use this method on a {@link Map} implementation that already has a corresponding {@link Set} implementation (such as {@link HashMap} or {@link TreeMap}). <p>Each method invocation on the set returned by this method results in exactly one method invocation on the backing map or its <tt>keySet</tt> view, with one exception. The <tt>addAll</tt> method is implemented as a sequence of <tt>put</tt> invocations on the backing map. <p>The specified map must be empty at the time this method is invoked, and should not be accessed directly after this method returns. These conditions are ensured if the map is created empty, passed directly to this method, and no reference to the map is retained, as illustrated in the following code fragment: <pre>  {@code Set<Object> identityHashSet = Sets.newSetFromMap( This method has the same behavior as the JDK 6 method {@code Collections.newSetFromMap()}. The returned set is serializable if the backing map is.
Copies the current contents of this set view into an existing set. This method has equivalent behavior to {@code set.addAll(this)}, assuming that all the sets involved are based on the same notion of equivalence. Note: S should logically extend Set<? super E> but can't due to either some javac bug or some weirdness in the spec, not sure which.
Returns an unmodifiable <b>view</b> of the union of two sets. The returned set contains all elements that are contained in either backing set. Iterating over the returned set iterates first over all the elements of {@code set1}, then over each element of {@code set2}, in order, that is not contained in {@code set1}. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations (as {@link HashSet}, {@link TreeSet}, and the {@link Map#keySet} of an {@link IdentityHashMap} all are). <p><b>Note:</b> The returned view performs better when {@code set1} is the smaller of the two sets. If you have reason to believe one of your sets will generally be smaller than the other, pass it first.
Returns an unmodifiable <b>view</b> of the intersection of two sets. The returned set contains all elements that are contained by both backing sets. The iteration order of the returned set matches that of {@code set1}. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations (as {@code HashSet}, {@code TreeSet}, and the keySet of an {@code IdentityHashMap} all are). <p><b>Note:</b> The returned view performs slightly better when {@code set1} is the smaller of the two sets. If you have reason to believe one of your sets will generally be smaller than the other, pass it first. Unfortunately, since this method sets the generic type of the returned set based on the type of the first set passed, this could in rare cases force you to make a cast, for example: <pre>  {@code Set<Object> aFewBadObjects = ... Set<String> manyBadStrings = ... // impossible for a non-String to be in the intersection SuppressWarnings("unchecked") Set<String> badStrings = (Set) Sets.intersection( This is unfortunate, but should come up only very rarely.
Returns the elements of {@code unfiltered} that satisfy a predicate. The returned set is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting set's iterator does not support {@code remove()}, but all other set methods are supported. The set's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException} if an element that doesn't satisfy the predicate is provided. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements that satisfy the filter will be removed from the underlying collection. <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in the underlying set and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and use the copy.
Returns every possible list that can be formed by choosing one element from each of the given sets in order; the "n-ary product</a>" of the sets. For example: <pre class="code">   {@code cartesianProduct(ImmutableList.of( returns a set containing six lists: <ul> <li>{@code ImmutableList.of(1, "A")} <li>{@code ImmutableList.of(1, "B")} <li>{@code ImmutableList.of(1, "C")} <li>{@code ImmutableList.of(2, "A")} <li>{@code ImmutableList.of(2, "B")} <li>{@code ImmutableList.of(2, "C")} </ul> The order in which these lists are returned is not guaranteed, however the position of an element inside a tuple always corresponds to the position of the set from which it came in the input list. Note that if any input set is empty, the Cartesian product will also be empty. If no sets at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent).
Returns every possible list that can be formed by choosing one element from each of the given sets in order; the "n-ary product</a>" of the sets. For example: <pre class="code">   {@code cartesianProduct( returns a set containing six lists: <ul> <li>{@code ImmutableList.of(1, "A")} <li>{@code ImmutableList.of(1, "B")} <li>{@code ImmutableList.of(1, "C")} <li>{@code ImmutableList.of(2, "A")} <li>{@code ImmutableList.of(2, "B")} <li>{@code ImmutableList.of(2, "C")} </ul> The order in which these lists are returned is not guaranteed, however the position of an element inside a tuple always corresponds to the position of the set from which it came in the input list. Note that if any input set is empty, the Cartesian product will also be empty. If no sets at all are provided, the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent).
Calculates and returns the hash code of {@code s}.
No equals and hashCode; see ForwardingObject for details.
Serialization invokes writeObject only when it's private. The SynchronizedObject subclasses don't need a writeObject method since they don't contain any non-transient member variables, while the following writeObject() handles the SynchronizedObject members.
Returns a synchronized (thread-safe) collection backed by the specified collection using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing collection is accomplished through the returned collection. <p>It is imperative that the user manually synchronize on the specified mutex when iterating over the returned collection: <pre>  {@code Collection<E> s = Synchronized.collection( ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior.
Returns a synchronized (thread-safe) set backed by the specified set using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing set is accomplished through the returned set. <p>It is imperative that the user manually synchronize on the specified mutex when iterating over the returned set:  <pre>  {@code Set<E> s = Synchronized.set(new HashSet<E>(), mutex); ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior.
Returns a synchronized (thread-safe) sorted set backed by the specified sorted set using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing sorted set is accomplished through the returned sorted set. <p>It is imperative that the user manually synchronize on the specified mutex when iterating over the returned sorted set: <pre>  {@code SortedSet<E> s = Synchronized.sortedSet( ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior.
Returns a synchronized (thread-safe) list backed by the specified list using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing list is accomplished through the returned list. <p>It is imperative that the user manually synchronize on the specified mutex when iterating over the returned list: <pre>  {@code List<E> l = Synchronized.list(new ArrayList<E>(), mutex); ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior. <p>The returned list implements {@link RandomAccess} if the specified list implements {@code RandomAccess}.
Returns a synchronized (thread-safe) multiset backed by the specified multiset using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing multiset is accomplished through the returned multiset. <p>It is imperative that the user manually synchronize on the specified mutex when iterating over the returned multiset: <pre>  {@code Multiset<E> s = Synchronized.multiset( ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior.
Returns a synchronized (thread-safe) multimap backed by the specified multimap using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing multimap is accomplished through the returned multimap. <p>It is imperative that the user manually synchronize on the specified mutex when accessing any of the return multimap's collection views: <pre>  {@code Multimap<K, V> m = Synchronized.multimap( ... Set<K> s = m.keySet();  // Needn't be in synchronized block ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior.
Returns a synchronized (thread-safe) list multimap backed by the specified multimap using the specified mutex. <p>You must follow the warnings described for {@link #multimap}.
Returns a synchronized (thread-safe) set multimap backed by the specified multimap using the specified mutex. <p>You must follow the warnings described for {@link #multimap}.
Returns a synchronized (thread-safe) sorted set multimap backed by the specified multimap using the specified mutex. <p>You must follow the warnings described for {@link #multimap}.
Returns a synchronized (thread-safe) collection backed by the specified collection using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing collection is accomplished through the returned collection. <p>It is imperative that the user manually synchronize on the specified mutex when iterating over the returned collection: <pre>  {@code Collection<E> s = Synchronized.typePreservingCollection( ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior. <p>If the specified collection is a {@code SortedSet}, {@code Set} or {@code List}, this method will behave identically to {@link #sortedSet}, {@link #set} or {@link #list} respectively, in that order of specificity.
Returns a synchronized (thread-safe) set backed by the specified set using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing collection is accomplished through the returned collection. <p>It is imperative that the user manually synchronize on the specified mutex when iterating over the returned collection: <pre>  {@code Set<E> s = Synchronized.typePreservingSet( ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior. <p>If the specified collection is a {@code SortedSet} this method will behave identically to {@link #sortedSet}.
Returns a synchronized (thread-safe) map backed by the specified map using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing map is accomplished through the returned map. <p>It is imperative that the user manually synchronize on the specified mutex when accessing any of the return map's collection views: <pre>  {@code Map<K, V> m = Synchronized.map( ... Set<K> s = m.keySet();  // Needn't be in synchronized block ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior.
Returns a synchronized (thread-safe) bimap backed by the specified bimap using the specified mutex. In order to guarantee serial access, it is critical that <b>all</b> access to the backing bimap is accomplished through the returned bimap. <p>It is imperative that the user manually synchronize on the specified mutex when accessing any of the return bimap's collection views: <pre>  {@code BiMap<K, V> m = Synchronized.biMap( ... Set<K> s = m.keySet();  // Needn't be in synchronized block ... synchronized (mutex) { }}</pre> Failure to follow this advice may result in non-deterministic behavior.
Used by the TreeMultimap serialization test.
Must be package-private so multimaps with null comparators can be serialized (which can be created with Multimaps.newTreeMultimap()). Once that method is removed, this constructor can be made private.
{@inheritDoc} <p>Creates an empty {@code TreeSet} for a collection of values for one key.
{@inheritDoc} <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link SortedSet}, instead of the {@link Set} specified in the {@link Multimap} interface.
{@inheritDoc} <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link SortedMap}, instead of the {@link java.util.Map} specified in the {@link Multimap} interface.
Creates a new, empty multiset, sorted according to the specified comparator. All elements inserted into the multiset must be <i>mutually comparable</i> by the specified comparator: {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the multiset that violates this constraint, the {@code add(Object)} call will throw a {@code ClassCastException}.
{@inheritDoc} <p>In {@code TreeMultiset}, the return type of this method is narrowed from {@link Set} to {@link SortedSet}.
Guaranteed to throw an exception and leave the underlying data unmodified.
Abstract methods from Writer
Override a few functions for performance reasons to avoid creating unnecessary strings.
Returns a factory that will supply instances of {@link ByteArrayInputStream} that read from the given byte array.
Writes a byte array to an output stream from the given supplier.
Opens input and output streams from the given suppliers, copies all bytes from the input to the output, and closes the streams.
Opens an input stream from the supplier, copies all bytes from the input to the output, and closes the input stream. Does not close or flush the output stream.
Copies all bytes from the input stream to the output stream. Does not close or flush either stream.
Copies all bytes from the readable channel to the writable channel. Does not close or flush either channel.
Returns the data from a {@link InputStream} factory as a byte array.
Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array from the beginning.
Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array, starting at the given position.
Returns a new {@link ByteArrayDataOutput} instance sized to hold {@code size} bytes before resizing.
TODO: Not all streams support skipping. Returns the length of a supplied input stream, in bytes.
Returns true if the supplied input streams contain the same bytes.
Attempts to read enough bytes from the stream to fill the given byte array, with the same behavior as {@link DataInput#readFully(byte[])}. Does not close the stream.
Discards {@code n} bytes of data from the input stream. This method will block until the full amount has been skipped. Does not close the stream.
Process the bytes of a supplied stream
Computes and returns the checksum value for a supplied input stream. The checksum object is reset when this method returns successfully.
Computes and returns the digest value for a supplied input stream. The digest object is reset when this method returns successfully.
Returns an {@link InputSupplier} that returns input streams from the an underlying supplier, where each stream starts at the given offset and is limited to the specified number of bytes.
Joins multiple {@link InputStream} suppliers into a single supplier. Streams returned from the supplier will contain the concatenated data from the streams of the underlying suppliers. <p>Only one underlying input stream will be open at a time. Closing the joined stream will close the open underlying stream. <p>Reading from the joined stream will throw a {@link NullPointerException} if any of the suppliers are null or return null.
Varargs form of {@link #join(Iterable)}.
Returns a factory that will supply instances of {@link StringReader} that read a string value.
Returns a factory that will supply instances of {@link InputStreamReader}, using the given {@link InputStream} factory and character set.
Returns a factory that will supply instances of {@link OutputStreamWriter}, using the given {@link OutputStream} factory and character set.
Writes a character sequence (such as a string) to an appendable object from the given supplier.
Opens a {@link Readable} object from the supplier, copies all characters to the {@link Appendable} object, and closes the input. Does not close or flush the output.
Copies all characters between the {@link Readable} and {@link Appendable} objects. Does not close or flush either object.
Reads all characters from a {@link Readable} object into a {@link String}. Does not close the {@code Readable}.
Returns the characters from a {@link Readable} & {@link Closeable} object supplied by a factory as a {@link String}.
Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance. Does not close the {@code Readable}.
Returns the characters from a {@link Readable} & {@link Closeable} object supplied by a factory as a new {@link StringBuilder} instance.
Reads the first line from a {@link Readable} & {@link Closeable} object supplied by a factory. The line does not include line-termination characters, but does include other leading and trailing whitespace.
Reads all of the lines from a {@link Readable} & {@link Closeable} object supplied by a factory. The lines do not include line-termination characters, but do include other leading and trailing whitespace.
Reads all of the lines from a {@link Readable} object. The lines do not include line-termination characters, but do include other leading and trailing whitespace. <p>Does not close the {@code Readable}. If reading files or resources you should use the {@link Files#readLines} and {@link Resources#readLines} methods.
Streams lines from a {@link Readable} and {@link Closeable} object supplied by a factory, stopping when our callback returns false, or we have read all of the lines.
Joins multiple {@link Reader} suppliers into a single supplier. Reader returned from the supplier will contain the concatenated data from the readers of the underlying suppliers. <p>Reading from the joined reader will throw a {@link NullPointerException} if any of the suppliers are null or return null. <p>Only one underlying reader will be open at a time. Closing the joined reader will close the open underlying reader.
Discards {@code n} characters of data from the reader. This method will block until the full amount has been skipped. Does not close the reader.
Returns a Writer that sends all output to the given {@link Appendable} target. Closing the writer will close the target if it is {@link Closeable}, and flushing the writer will flush the target if it is {@link java.io.Flushable}.
Closes a {@link Closeable}, with control over whether an {@code IOException} may be thrown. This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost). <p>If {@code swallowIOException} is true then we never throw {@code IOException} but merely log it. <p>Example: <p><pre>public void useStreamNicely() throws IOException { SomeStream stream = new SomeStream("foo"); boolean threw = true; try { // Some code which does something with the Stream. May throw a // Throwable. threw = false; // No throwable thrown. } finally { // Close the stream. // If an exception occurs, only rethrow it if (threw==false). Closeables.close(stream, threw); </pre>
Equivalent to calling {@code close(closeable, true)}, but with no IOException in the signature.
Returns the file holding the data (possibly null).
Creates a new instance that uses the given file threshold. Equivalent to {@code ThresholdOutputStream(fileThreshold, false)}.
Creates a new instance that uses the given file threshold, and optionally resets the data when the {@link InputSupplier} returned by {@link #getSupplier} is finalized.
Returns a supplier that may be used to retrieve the data buffered by this stream.
Calls {@link #close} if not already closed, and then resets this object back to its initial state, for reuse. If data was buffered to a file, it will be deleted.
Checks if writing {@code len} bytes would go over threshold, and switches to file buffering if so.
Returns a buffered reader that reads from a file using the given character set.
Returns a buffered writer that writes to a file using the given character set.
Returns a factory that will supply instances of {@link FileInputStream} that read from a file.
Returns a factory that will supply instances of {@link FileOutputStream} that write to a file.
Returns a factory that will supply instances of {@link FileOutputStream} that write to or append to a file.
Returns a factory that will supply instances of {@link InputStreamReader} that read a file using the given character set.
Returns a factory that will supply instances of {@link OutputStreamWriter} that write to a file using the given character set.
Returns a factory that will supply instances of {@link OutputStreamWriter} that write to or append to a file using the given character set.
Reads all characters from a file into a {@link String}, using the given character set.
Copies to a file all bytes from an {@link InputStream} supplied by a factory.
Copies all bytes from a file to an {@link OutputStream} supplied by a factory.
Copies all the bytes from one file to another.
Copies to a file all characters from a {@link Readable} and {@link Closeable} object supplied by a factory, using the given character set.
Writes a character sequence (such as a string) to a file using the given character set.
Appends a character sequence (such as a string) to a file using the given character set.
Private helper method. Writes a character sequence to a file, optionally appending.
Copies all characters from a file to a {@link Appendable} & {@link Closeable} object supplied by a factory, using the given character set.
Copies all characters from a file to an appendable object, using the given character set.
Atomically creates a new directory somewhere beneath the system's temporary directory (as defined by the {@code java.io.tmpdir} system property), and returns its name. <p>Use this method instead of {@link File#createTempFile(String, String)} when you wish to create a directory, not a regular file.  A common pitfall is to call {@code createTempFile}, delete the file and create a directory in its place, but this leads a race condition which can be exploited to create security vulnerabilities, especially when executable files are to be written into the directory. <p>This method assumes that the temporary volume is writable, has free inodes and free blocks, and that it will not be called thousands of times per second.
Creates an empty file or updates the last updated timestamp on the same as the unix command of the same name.
Moves the file from one path to another. This method can rename a file or move it to a different directory, like the Unix {@code mv} command.
Deletes all the files within a directory. Does not delete the directory itself. <p>If the file argument is a symbolic link or there is a symbolic link in the path leading to the directory, this method will do nothing. Symbolic links within the directory are not followed.
Deletes a file or directory and all contents recursively. <p>If the file argument is a symbolic link the link will be deleted but not the target of the link. If the argument is a directory, symbolic links within the directory will not be followed.
Reads the first line from a file. The line does not include line-termination characters, but does include other leading and trailing whitespace.
Reads all of the lines from a file. The lines do not include line-termination characters, but do include other leading and trailing whitespace.
Streams lines from a {@link File}, stopping when our callback returns false, or we have read all of the lines.
Process the bytes of a file. <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.)
Computes and returns the checksum value for a file. The checksum object is reset when this method returns successfully.
Computes and returns the digest value for a file. The digest object is reset when this method returns successfully.
Fully maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link MapMode}. <p>Files are mapped from offset 0 to its length. <p>This only works for files <= {@link Integer#MAX_VALUE} bytes.
Maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link MapMode}. <p>Files are mapped from offset 0 to {@code size}. <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created with the requested {@code size}. Thus this method is useful for creating memory mapped files which do not yet exist. <p>This only works for files <= {@link Integer#MAX_VALUE} bytes.
Flush a {@link Flushable}, with control over whether an {@code IOException} may be thrown. <p>If {@code swallowIOException} is true, then we don't rethrow {@code IOException}, but merely log it.
Equivalent to calling {@code flush(flushable, true)}, but with no {@code IOException} in the signature.
Wraps another input stream, limiting the number of bytes which can be read.
Called when a line is complete.
Subclasses must call this method after finishing character processing, in order to ensure that any unterminated line in the buffer is passed to {@link #handleLine}.
Creates a new instance that will read lines from the given {@code Readable} object.
Reads a line of text. A line is considered to be terminated by any one of a line feed ({@code '\n'}), a carriage return ({@code '\r'}), or a carriage return followed immediately by a linefeed ({@code "\r\n"}).
Returns a factory that will supply instances of {@link InputStream} that read from the given URL.
Returns a factory that will supply instances of {@link InputStreamReader} that read a URL using the given character set.
Reads all characters from a URL into a {@link String}, using the given character set.
Streams lines from a URL, stopping when our callback returns false, or we have read all of the lines.
Reads all of the lines from a URL. The lines do not include line-termination characters, but do include other leading and trailing whitespace.
Returns a {@code URL} pointing to {@code resourceName} if the resource is found in the class path. {@code Resources.class.getClassLoader()} is used to locate the resource.
Returns a {@code URL} pointing to {@code resourceName} that is relative to {@code contextClass}, if the resource is found in the class path.
Compares the two specified {@code boolean} values in the standard way ({@code false} is considered less than {@code true}). The sign of the value returned is the same as that of {@code ((Boolean) a).compareTo(b)}.
Returns {@code true} if {@code target} is present as an element anywhere in {@code array}. <p><b>Note:</b> consider representing the array as a {@link BitSet} instead, replacing {@code Booleans.contains(array, true)} with {@code !bitSet.isEmpty()} and {@code Booleans.contains(array, false)} with {@code bitSet.nextClearBit(0) == sizeOfBitSet}.
Returns the index of the first appearance of the value {@code target} in {@code array}. <p><b>Note:</b> consider representing the array as a {@link BitSet} instead, and using {@link BitSet#nextSetBit(int)} or {@link BitSet#nextClearBit(int)}.
TODO: consider making this public
Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}.
Returns the index of the last appearance of the value {@code target} in {@code array}.
TODO: consider making this public
Returns the values from each provided array combined into a single array. For example, {@code concat(new boolean[] {a, b}, new boolean[] {}, new boolean[] {c}} returns the array {@code {a, b, c}}.
Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places.
Arrays.copyOf() requires Java 6
Returns a string containing the supplied {@code boolean} values separated by {@code separator}. For example, {@code join("-", false, true, false)} returns the string {@code "false-true-false"}.
Returns a comparator that compares two {@code boolean} arrays lexicographically. That is, it compares, using {@link #compare(boolean, boolean)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, {@code [] < [false] < [false, true] < [true]}. <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays support only identity equality), but it is consistent with {@link Arrays#equals(boolean[], boolean[])}.
Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.  Calling this method is as thread-safe as calling that method. <p><b>Note:</b> consider representing the collection as a {@link BitSet} instead.
Returns a fixed-size list backed by the specified array, similar to {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to set a value to {@code null} will result in a {@link NullPointerException}. <p>The returned list maintains the values, but not the identities, of {@code Boolean} objects written to or read from it.  For example, whether {@code list.get(0) == list.get(0)} is true for the returned list is unspecified.
In GWT, List and AbstractList do not have the subList method.
Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.
Returns the index of the first appearance of the value {@code target} in {@code array}.
Returns the values from each provided array combined into a single array. For example, {@code concat(new byte[] {a, b}, new byte[] {}, new byte[] {c}} returns the array {@code {a, b, c}}.
Copies a collection of {@code Byte} instances into a new array of primitive {@code byte} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.  Calling this method is as thread-safe as calling that method.
Returns a fixed-size list backed by the specified array, similar to {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to set a value to {@code null} will result in a {@link NullPointerException}. <p>The returned list maintains the values, but not the identities, of {@code Byte} objects written to or read from it.  For example, whether {@code list.get(0) == list.get(0)} is true for the returned list is unspecified.
Compares the two specified {@code char} values. The sign of the value returned is the same as that of {@code ((Character) a).compareTo(b)}.
Returns the values from each provided array combined into a single array. For example, {@code concat(new char[] {a, b}, new char[] {}, new char[] {c}} returns the array {@code {a, b, c}}.
Returns a string containing the supplied {@code char} values separated by {@code separator}. For example, {@code join("-", '1', '2', '3')} returns the string {@code "1-2-3"}.
Returns a comparator that compares two {@code char} arrays lexicographically. That is, it compares, using {@link #compare(char, char)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, {@code [] < ['a'] < ['a', 'b'] < ['b']}. <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays support only identity equality), but it is consistent with {@link Arrays#equals(char[], char[])}.
Copies a collection of {@code Character} instances into a new array of primitive {@code char} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.  Calling this method is as thread-safe as calling that method.
Returns a fixed-size list backed by the specified array, similar to {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to set a value to {@code null} will result in a {@link NullPointerException}. <p>The returned list maintains the values, but not the identities, of {@code Character} objects written to or read from it.  For example, whether {@code list.get(0) == list.get(0)} is true for the returned list is unspecified.
Compares the two specified {@code double} values. The sign of the value returned is the same as that of <code>((Double) a).{@linkplain Double#compareTo compareTo}(b)</code>. As with that method, {@code NaN} is treated as greater than all other values, and {@code 0.0 > -0.0}.
Returns {@code true} if {@code target} is present as an element anywhere in {@code array}. Note that this always returns {@code false} when {@code target} is {@code NaN}.
Returns the index of the first appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}.
Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.
Returns the index of the last appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}.
Returns the least value present in {@code array}, using the same rules of comparison as {@link Math#min(double, double)}.
Returns the greatest value present in {@code array}, using the same rules of comparison as {@link Math#max(double, double)}.
Returns the values from each provided array combined into a single array. For example, {@code concat(new double[] {a, b}, new double[] {}, new double[] {c}} returns the array {@code {a, b, c}}.
Returns a string containing the supplied {@code double} values, converted to strings as specified by {@link Double#toString(double)}, and separated by {@code separator}. For example, {@code join("-", 1.0, 2.0, 3.0)} returns the string {@code "1.0-2.0-3.0"}.
Returns a comparator that compares two {@code double} arrays lexicographically. That is, it compares, using {@link #compare(double, double)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, {@code [] < [1.0] < [1.0, 2.0] < [2.0]}. <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays support only identity equality), but it is consistent with {@link Arrays#equals(double[], double[])}.
Copies a collection of {@code Double} instances into a new array of primitive {@code double} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.  Calling this method is as thread-safe as calling that method.
Returns a fixed-size list backed by the specified array, similar to {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to set a value to {@code null} will result in a {@link NullPointerException}. <p>The returned list maintains the values, but not the identities, of {@code Double} objects written to or read from it.  For example, whether {@code list.get(0) == list.get(0)} is true for the returned list is unspecified. <p>The returned list may have unexpected behavior if it contains {@code NaN}, or if {@code NaN} is used as a parameter to any of its methods.
Compares the two specified {@code float} values using {@link Float#compare(float, float)}. You may prefer to invoke that method directly; this method exists only for consistency with the other utilities in this package.
Returns the least value present in {@code array}, using the same rules of comparison as {@link Math#min(float, float)}.
Returns the greatest value present in {@code array}, using the same rules of comparison as {@link Math#min(float, float)}.
Returns the values from each provided array combined into a single array. For example, {@code concat(new float[] {a, b}, new float[] {}, new float[] {c}} returns the array {@code {a, b, c}}.
Returns a string containing the supplied {@code float} values, converted to strings as specified by {@link Float#toString(float)}, and separated by {@code separator}. For example, {@code join("-", 1.0f, 2.0f, 3.0f)} returns the string {@code "1.0-2.0-3.0"}.
Returns a comparator that compares two {@code float} arrays lexicographically. That is, it compares, using {@link #compare(float, float)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, {@code [] < [1.0f] < [1.0f, 2.0f] < [2.0f]}. <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays support only identity equality), but it is consistent with {@link Arrays#equals(float[], float[])}.
Copies a collection of {@code Float} instances into a new array of primitive {@code float} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.  Calling this method is as thread-safe as calling that method.
Returns a fixed-size list backed by the specified array, similar to {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to set a value to {@code null} will result in a {@link NullPointerException}. <p>The returned list maintains the values, but not the identities, of {@code Float} objects written to or read from it.  For example, whether {@code list.get(0) == list.get(0)} is true for the returned list is unspecified. <p>The returned list may have unexpected behavior if it contains {@code NaN}, or if {@code NaN} is used as a parameter to any of its methods.
Compares the two specified {@code int} values. The sign of the value returned is the same as that of {@code ((Integer) a).compareTo(b)}.
Returns the values from each provided array combined into a single array. For example, {@code concat(new int[] {a, b}, new int[] {}, new int[] {c}} returns the array {@code {a, b, c}}.
Returns a string containing the supplied {@code int} values separated by {@code separator}. For example, {@code join("-", 1, 2, 3)} returns the string {@code "1-2-3"}.
Returns a comparator that compares two {@code int} arrays lexicographically. That is, it compares, using {@link #compare(int, int)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, {@code [] < [1] < [1, 2] < [2]}. <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays support only identity equality), but it is consistent with {@link Arrays#equals(int[], int[])}.
Copies a collection of {@code Integer} instances into a new array of primitive {@code int} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.  Calling this method is as thread-safe as calling that method.
Returns a fixed-size list backed by the specified array, similar to {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to set a value to {@code null} will result in a {@link NullPointerException}. <p>The returned list maintains the values, but not the identities, of {@code Integer} objects written to or read from it.  For example, whether {@code list.get(0) == list.get(0)} is true for the returned list is unspecified.
Returns a hash code for {@code value}; equal to the result of invoking {@code ((Long) value).hashCode()}.
Compares the two specified {@code long} values. The sign of the value returned is the same as that of {@code ((Long) a).compareTo(b)}.
Returns the values from each provided array combined into a single array. For example, {@code concat(new long[] {a, b}, new long[] {}, new long[] {c}} returns the array {@code {a, b, c}}.
Returns a string containing the supplied {@code long} values separated by {@code separator}. For example, {@code join("-", 1L, 2L, 3L)} returns the string {@code "1-2-3"}.
Returns a comparator that compares two {@code long} arrays lexicographically. That is, it compares, using {@link #compare(long, long)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, {@code [] < [1L] < [1L, 2L] < [2L]}. <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays support only identity equality), but it is consistent with {@link Arrays#equals(long[], long[])}.
Copies a collection of {@code Long} instances into a new array of primitive {@code long} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.  Calling this method is as thread-safe as calling that method.
Returns a fixed-size list backed by the specified array, similar to {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to set a value to {@code null} will result in a {@link NullPointerException}. <p>The returned list maintains the values, but not the identities, of {@code Long} objects written to or read from it.  For example, whether {@code list.get(0) == list.get(0)} is true for the returned list is unspecified.
Returns {@code true} if {@code type} is one of the nine primitive-wrapper types, such as {@link Integer}.
Returns the corresponding wrapper type of {@code type} if it is a primitive type; otherwise returns {@code type} itself. Idempotent. <pre> </pre>
Returns the corresponding primitive type of {@code type} if it is a wrapper type; otherwise returns {@code type} itself. Idempotent. <pre> </pre>
Compares the two specified {@code short} values. The sign of the value returned is the same as that of {@code ((Short) a).compareTo(b)}.
Returns the values from each provided array combined into a single array. For example, {@code concat(new short[] {a, b}, new short[] {}, new short[] {c}} returns the array {@code {a, b, c}}.
Returns a string containing the supplied {@code short} values separated by {@code separator}. For example, {@code join("-", 1?, 2?, 3?)} returns the string {@code "1-2-3"}.
Returns a comparator that compares two {@code short} arrays lexicographically. That is, it compares, using {@link #compare(short, short)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, {@code [] < [(short) 1] < [(short) 1, (short) 2] < [(short) 2]}. <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays support only identity equality), but it is consistent with {@link Arrays#equals(short[], short[])}.
Copies a collection of {@code Short} instances into a new array of primitive {@code short} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.  Calling this method is as thread-safe as calling that method.
Returns a fixed-size list backed by the specified array, similar to {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to set a value to {@code null} will result in a {@link NullPointerException}. <p>The returned list maintains the values, but not the identities, of {@code Short} objects written to or read from it.  For example, whether {@code list.get(0) == list.get(0)} is true for the returned list is unspecified.
Compares the two specified {@code byte} values. The sign of the value returned is the same as that of {@code ((Byte) a).compareTo(b)}.
Returns a string containing the supplied {@code byte} values separated by {@code separator}. For example, {@code join(":", 0x01, 0x02, -0x01)} returns the string {@code "1:2:-1"}.
Returns a comparator that compares two {@code byte} arrays lexicographically. That is, it compares, using {@link #compare(byte, byte)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, {@code [] < [0x01] < [0x01, 0x80] < [0x01, 0x7F] < [0x02]}. Values are treated as signed. <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays support only identity equality), but it is consistent with {@link java.util.Arrays#equals(byte[], byte[])}.
Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if possible.
Returns the {@code byte} value that, when treated as unsigned, is nearest in value to {@code value}.
Compares the two specified {@code byte} values, treating them as unsigned values between 0 and 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127} because it is seen as having the value of positive {@code 129}.
Returns a string containing the supplied {@code byte} values separated by {@code separator}. For example, {@code join(":", (byte) 1, (byte) 2, (byte) 255)} returns the string {@code "1:2:255"}.
Returns a comparator that compares two {@code byte} arrays lexicographically. That is, it compares, using {@link #compare(byte, byte)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, {@code [] < [0x01] < [0x01, 0x7F] < [0x01, 0x80] < [0x02]}. Values are treated as unsigned. <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays support only identity equality), but it is consistent with {@link java.util.Arrays#equals(byte[], byte[])}.
Just like get but maps the exceptions into appropriate application-specific exceptions.
The timed version of checkedGet maps the interrupted, cancellation or execution exceptions exactly the same as the untimed version does.
Delegate methods for methods defined in the ListenableFuture interface.
use AbstractService for state management
Run the service. This method is invoked on the execution thread. Implementations must respond to stop requests. You could poll for lifecycle changes in a work loop: <pre> public void run() { } </pre> ...or you could respond to stop requests by implementing {@link #triggerShutdown()}, which should cause {@link #run()} to return.
Returns the {@link Executor} that will be used to run this service. Subclasses may override this method to use a custom {@link Executor}, which may configure its worker thread with a specific name, thread group or priority. The returned executor's {@link Executor#execute(Runnable) execute()} method is called when this service is started, and should return promptly.
We override instead of using ForwardingService so that these can be final.
Blocks until either the task completes or the timeout expires.  Uses the sync blocking-with-timeout support provided by AQS.
Blocks until the task completes or we get interrupted. Uses the interruptible blocking support provided by AQS.
Checks if the sync is not in the running state.
Checks if the sync is in the cancelled state.
Default implementation of cancel that never cancels the future. Subclasses should override this to implement cancellation if desired.
Subclasses should invoke this method to set the result of the computation to {@code value}.  This will set the state of the future to {@link AbstractFuture.Sync#COMPLETED} and call {@link #done()} if the state was successfully changed.
Subclasses should invoke this method to set the result of the computation to an error, {@code throwable}.  This will set the state of the future to {@link AbstractFuture.Sync#COMPLETED} and call {@link #done()} if the state was successfully changed.
Subclasses should invoke this method to mark the future as cancelled. This will set the state of the future to {@link AbstractFuture.Sync#CANCELLED} and call {@link #done()} if the state was successfully changed.
Called by the success, failed, or cancelled methods to indicate that the value is now available and the latch can be released.  Subclasses can use this method to deal with any actions that should be undertaken when the task has completed.
Implementation of completing a task.  Either {@code v} or {@code t} will be set but not both.  The {@code finalState} is the state to change to from {@link #RUNNING}.  If the state is not in the RUNNING state we return {@code false}.
Adds a listener/executor pair to execution list to execute when this task is completed.
Implementing classes should invoke this method once their service has started. It will cause the service to transition from {@link State#STARTING} to {@link State#RUNNING}.
Implementing classes should invoke this method once their service has stopped. It will cause the service to transition from {@link State#STOPPING} to {@link State#TERMINATED}.
Invoke this method to transition the service to the {@link State#FAILED}. The service will <b>not be stopped</b> if it is running. Invoke this method when a service has failed critically or otherwise cannot be started nor stopped.
Creates a {@code Callable} which immediately returns a preset value each time it is called.
Add the runnable/executor pair to the list of pairs to execute.  Executes the pair immediately if we've already started execution.
Runs this execution list, executing all pairs in the order they were added.  Pairs added after this method has started executing the list will be executed immediately.
Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete.  It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link java.util.concurrent.Executors#newFixedThreadPool(int)}.
Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete.  It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link java.util.concurrent.Executors#newScheduledThreadPool(int)}.
Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.  This is useful if the given service uses daemon threads, and we want to keep the JVM from exiting immediately on shutdown, instead giving these daemon threads a chance to terminate normally.
Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete.  It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This method waits 120 seconds before continuing with JVM termination, even if the executor has not finished its work. <p>This is mainly for fixed thread pools. See {@link java.util.concurrent.Executors#newFixedThreadPool(int)}.
Converts the given ThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete.  It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This method waits 120 seconds before continuing with JVM termination, even if the executor has not finished its work. <p>This is mainly for fixed thread pools. See {@link java.util.concurrent.Executors#newScheduledThreadPool(int)}.
Returns a {@link ThreadFactory} which creates daemon threads. This is implemented by wrapping {@link java.util.concurrent.Executors#defaultThreadFactory()}, marking all new threads as daemon threads
Wraps another {@link ThreadFactory}, making all new threads daemon threads.
Creates an executor service that runs each task in the thread that invokes {@code execute/submit}, as in {@link CallerRunsPolicy}  This applies both to individually submitted tasks and to collections of tasks submitted via {@code invokeAll} or {@code invokeAny}.  In the latter case, tasks will run serially on the calling thread.  Tasks are run to completion before a {@code Future} is returned to the caller (unless the executor has been shutdown). <p>Although all tasks are immediately executed in the thread that submitted the task, this {@code ExecutorService} imposes a small locking overhead on each task submission in order to implement shutdown and termination behavior. <p>The implementation deviates from the {@code ExecutorService} specification with regards to the {@code shutdownNow} method.  First, "best-effort" with regards to canceling running tasks is implemented as "no-effort".  No interrupts or other attempts are made to stop threads executing tasks.  Second, the returned list will always be empty, as any submitted task is considered to have started execution. This applies also to tasks given to {@code invokeAll} or {@code invokeAny} which are pending serial execution, even the subset of the tasks that have not yet started execution.  It is unclear from the {@code ExecutorService} specification if these should be included, and it's much easier to implement the interpretation that they not be. Finally, a call to {@code shutdown} or {@code shutdownNow} may result in concurrent calls to {@code invokeAll/invokeAny} throwing RejectedExecutionException, although a subset of the tasks may already have been executed.
See sameThreadExecutor javadoc for unusual behavior of this method.
Checks if the executor has been shut down and increments the running task count.
Returns an uninterruptible view of a {@code Future}. If a thread is interrupted during an attempt to {@code get()} from the returned future, it continues to wait on the result until it is available or the timeout elapses, and only then re-interrupts the thread.
Creates a {@link ListenableFuture} out of a normal {@link Future}. The returned future will create a thread to wait for the source future to complete before executing the listeners. <p>Callers who have a future that subclasses {@link java.util.concurrent.FutureTask} may want to instead subclass {@link ListenableFutureTask}, which adds the {@link ListenableFuture} functionality to the standard {@code FutureTask} implementation.
Creates a {@link CheckedFuture} out of a normal {@link Future} and a {@link Function} that maps from {@link Exception} instances into the appropriate checked type. <p>The given mapping function will be applied to an {@link InterruptedException}, a {@link CancellationException}, or an {@link ExecutionException} with the actual cause of the exception. See {@link Future#get()} for details on the exceptions thrown.
Creates a {@code ListenableFuture} which has its value set immediately upon construction. The getters just return the value. This {@code Future} can't be canceled or timed out and its {@code isDone()} method always returns {@code true}. It's useful for returning something that implements the {@code ListenableFuture} interface but already has the result.
Creates a {@code ListenableFuture} which has an exception set immediately upon construction. The getters just return the value. This {@code Future} can't be canceled or timed out and its {@code isDone()} method always returns {@code true}. It's useful for returning something that implements the {@code ListenableFuture} interface but already has a failed result. Calling {@code get()} will throw the provided {@code Throwable} (wrapped in an {@code ExecutionException}).
Creates a new {@code ListenableFuture} that wraps another {@code ListenableFuture}.  The result of the new future is the result of the provided function called on the result of the provided future. The resulting future doesn't interrupt when aborted. <p>TODO: Add a version that accepts a normal {@code Future} <p>The typical use for this method would be when a RPC call is dependent on the results of another RPC.  One would call the first RPC (input), create a function that calls another RPC based on input's result, and then call chain on input and that function to get a {@code ListenableFuture} of the result.
Creates a new {@code ListenableFuture} that wraps another {@code ListenableFuture}.  The result of the new future is the result of the provided function called on the result of the provided future. The resulting future doesn't interrupt when aborted. <p>This version allows an arbitrary executor to be passed in for running the chained Function. When using {@link Executors#sameThreadExecutor}, the thread chained Function executes in will be whichever thread set the result of the input Future, which may be the network thread in the case of RPC-based Futures.
Creates a new {@code ListenableFuture} that wraps another {@code ListenableFuture}.  The result of the new future is the result of the provided function called on the result of the provided future. The resulting future doesn't interrupt when aborted. <p>An example use of this method is to convert a serializable object returned from an RPC into a POJO.
Creates a new {@code ListenableFuture} that wraps another {@code ListenableFuture}.  The result of the new future is the result of the provided function called on the result of the provided future. The resulting future doesn't interrupt when aborted. <p>An example use of this method is to convert a serializable object returned from an RPC into a POJO. <p>This version allows an arbitrary executor to be passed in for running the chained Function. When using {@link Executors#sameThreadExecutor}, the thread chained Function executes in will be whichever thread set the result of the input Future, which may be the network thread in the case of RPC-based Futures.
Creates a new {@code Future} that wraps another {@code Future}. The result of the new future is the result of the provided function called on the result of the provided future. <p>An example use of this method is to convert a Future that produces a handle to an object to a future that produces the object itself. <p>Each call to {@code Future<O>.get(*)} results in a call to {@code Future<I>.get(*)}, but {@code function} is only applied once, so it is assumed that {@code Future<I>.get(*)} is idempotent. <p>When calling {@link Future#get(long, TimeUnit)} on the returned future, the timeout only applies to the future passed in to this method. Any additional time taken by applying {@code function} is not considered.
Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code Callable}.
Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code Runnable}, and arrange that {@code get} will return the given result on successful completion. you don't need a particular result, consider using constructions of the form: {@code ListenableFuture<?> f =
Creates a new factory that delegates to the default thread factory for thread creation, then uses {@code format} to construct a name for the new thread.
Creates a new factory that delegates to {@code backingFactory} for thread creation, then uses {@code format} to construct a name for the new thread.
Constructs a TimeLimiter instance using the given executor service to execute proxied method calls. <p> <b>Warning:</b> using a bounded executor may be counterproductive!  If the thread pool fills up, any time callers spend waiting for a thread may count toward their time limit, and in this case the call may even time out before the target method is ever invoked.
Constructs a TimeLimiter instance using a {@link java.util.concurrent.Executors#newCachedThreadPool()} to execute proxied method calls. <p><b>Warning:</b> using a bounded executor may be counterproductive! If the thread pool fills up, any time callers spend waiting for a thread may count toward their time limit, and in this case the call may even time out before the target method is ever invoked.
TODO: should this actually throw only ExecutionException?
TODO: replace with version in common.reflect if and when that gets open-sourced
Creates a new {@code ValueFuture} in the default state.
Specifies the name of the method that is being tested.
Specifies the name of the API method that is being tested. This field may be left empty if the test target is a concept implemented in a class rather than a concrete API method.
This class is not instantiable.
Writes the provided data to the specified stream.
Returns the file's magic value as a String if found, otherwise null.
Returns null if the actual size meets expectations, or a String error message if not.
Creates a BinaryHprofReader around the specified {@code inputStream}
throws IllegalStateException if read() has not been called.
Read the hprof header and records from the input
Read and process the next record. Returns true if a record was handled, false on EOF.
Ensures that a string has been writen to the out and returns its ID. The ID of a null string is zero, and doesn't actually result in any output. In a string has already been written previously, the earlier ID will be returned and no output will be written.
Main entry point for HprofBinaryToAscii command line tool
Reads single file from arguments and attempts to read it as either a binary hprof file or a version with a text header.
Probe the start of file to see if it starts with a plausible binary hprof magic value. If so, it is returned. On any other case including unexpected errors, false is returned.
Read and return an HprofData from a vanilla binary hprof file.
Read a file looking for text header terminated by two newlines, then proceed to read binary hprof data.
Read binary hprof data from the provided input stream and return the HprofData object.
From IoUtils.closeQuietly but replicated for open source version.
Write text verion of hprof data to standard output. Returns false on error.
Prints usage error but does not exit.
The start time in milliseconds of the last profiling period.
Set the time for the start of the current sampling period.
Get the {@link BinaryHprof.ControlSettings} flags
Set the {@link BinaryHprof.ControlSettings} flags
Get the stack sampling depth
Set the stack sampling depth
Return an unmodifiable history of start and end thread events.
Return a new set containing the current sample data.
Record an event in the thread history.
Record an stack trace and an associated int[] cell of sample cound for the stack trace. The caller is allowed retain a pointer to the cell to update the count. The SamplingProfiler intentionally does not present a mutable view of the count.
Create a sampling profiler that collects stacks with the specified depth from the threads specified by the specified thread collector. similar to the hprof option of the same name. Any stack deeper than this will be truncated to this depth. A good starting value is 4 although it is not uncommon to need to raise this to get enough context to understand program behavior. While programs with extensive recursion may require a high value for depth, simply passing in a value for Integer.MAX_VALUE is not advised because of the significant memory need to retain such stacks and runtime overhead to compare stacks. sample. In a general purpose program, all threads typically should be sample with a ThreadSet such as provied by {@link #newThreadGroupTheadSet newThreadGroupTheadSet}. For a benchmark a fixed set such as provied by {@link #newArrayThreadSet newArrayThreadSet} can reduce the overhead of profiling.
Returns a ThreadSet for a fixed set of threads that will not vary at runtime. This has less overhead than a dynamically calculated set, such as {@link #newThreadGroupTheadSet}, which has to enumerate the threads each time profiler wants to collect samples.
Returns a ThreadSet that is dynamically computed based on the threads found in the specified ThreadGroup and that ThreadGroup's children.
Starts profiler sampling at the specified rate.
Stops profiler sampling. It can be restarted with {@link #start(int)} to continue sampling.
Shuts down profiling after which it can not be restarted. It is important to shut down profiling when done to free resources used by the profiler. Shutting down the profiler also stops the profiling if that has not already been done.
Returns the hprof data accumulated by the profiler since it was created. The profiler needs to be stopped, but not necessarily shut down, in order to access the data. If the profiler is restarted, there is no thread safe way to access the data.
Record a new stack trace. The thread should have been previously registered with addStartThread.
Record that a newly noticed thread.
Record that a thread has disappeared.
Creates a new exception instance and initializes it with default values.
Creates a new exception instance and initializes it with a given message.
Constructs an instance. resources, delimited by {@code File.pathSeparator}, which defaults to {@code ":"} on Android should be written; may be {@code null} libraries, delimited by {@code File.pathSeparator}; may be {@code null}
The default, permissive policy that doesn't prevent any operations.
Get the current thread's policy.
Sets the current thread's block guard policy. if you want to unset the active policy.
Returns a CloseGuard instance. If CloseGuard is enabled, {@code #open(String)} can be used to set up the instance to warn on failure to close. If CloseGuard is disabled, a non-null no-op instance is returned.
Used to enable or disable CloseGuard. Note that CloseGuard only warns if it is enabled for both allocation and finalization.
Used to replace default Reporter used to warn of CloseGuard violations. Must be non-null.
Returns non-null CloseGuard.Reporter.
If CloseGuard is enabled, {@code open} initializes the instance with a warning that the caller should have explicitly called the {@code closer} method instead of relying on finalization. whether or not CloseGuard is enabled
Marks this CloseGuard instance as closed to avoid warnings on finalization.
If CloseGuard is enabled, logs a warning if the caller did not properly cleanup by calling an explicit close method before finalization. If CloseGuard is disable, no action is performed.
Returns the short logger tag (up to 23 chars) for the given logger name. Traditionally loggers are named by fully-qualified Java classes; this method attempts to return a concise identifying part of such names.
Creates a {@code DexClassLoader} that finds interpreted and native code.  Interpreted classes are found in a set of DEX files contained in Jar or APK files. <p>The path lists are separated using the character specified by the {@code path.separator} system property, which defaults to {@code :}.
Opens a DEX file from a given File object. This will usually be a ZIP/JAR file with a "classes.dex" inside. The VM will generate the name of the corresponding file in /data/dalvik-cache and open it, possibly creating or updating it first if system permissions allow.  Don't pass in the name of a file in /data/dalvik-cache, as the named file is expected to be in its original (pre-dexopt) state.
Opens a DEX file from a given filename. This will usually be a ZIP/JAR file with a "classes.dex" inside. The VM will generate the name of the corresponding file in /data/dalvik-cache and open it, possibly creating or updating it first if system permissions allow.  Don't pass in the name of a file in /data/dalvik-cache, as the named file is expected to be in its original (pre-dexopt) state.
Opens a DEX file from a given filename, using a specified file to hold the optimized data. Jar or APK file with "classes.dex". File that will hold the optimized form of the DEX data. Enable optional features.
Open a DEX file, specifying the file in which the optimized DEX data should be written.  If the optimized form exists and appears to be current, it will be used; if not, the VM will attempt to regenerate it. This is intended for use by applications that wish to download and execute DEX files outside the usual application installation mechanism.  This function should not be called directly by an application; instead, use a class loader such as dalvik.system.DexClassLoader. Jar or APK file with "classes.dex".  (May expand this to include "raw DEX" in the future.) File that will hold the optimized form of the DEX data. Enable optional features.  (Currently none defined.) A new or previously-opened DexFile. If unable to open the source or output file.
Gets the name of the (already opened) DEX file.
Closes the DEX file. <p> This may not be able to release any resources. If classes from this DEX file are still resident, the DEX file can't be unmapped.
Loads a class. Returns the class on success, or a {@code null} reference on failure. <p> If you are not calling this from a class loader, this is most likely not going to do what you want. Use {@link Class#forName(String)} instead. <p> The method does not throw {@link ClassNotFoundException} if the class isn't found because it isn't reasonable to throw exceptions wildly every time a class is not found in the first DEX file we look at.
See {@link #loadClass(String, ClassLoader)}. This takes a "binary" class name to better match ClassLoader semantics.
Enumerate the names of the classes in this DEX file.
Called when the class is finalized. Makes sure the DEX file is closed.
Constructs an instance. classes should be defined {@code File.pathSeparator} separated by {@code File.pathSeparator} should be found and written to, or {@code null} to use the default system directory for same
Splits the given dex path string into elements using the path separator, pruning out any elements that do not refer to existing and readable files. (That is, directories are not included in the result.)
Splits the given library directory path string into elements using the path separator ({@code File.pathSeparator}, which defaults to {@code ":"} on Android, appending on the elements from the system library path, and pruning out any elements that do not refer to existing and readable directories.
Splits the given path strings into file elements using the path separator, combining the results and filtering out elements that don't exist, aren't readable, or aren't either a regular file or a directory (as specified). Either string may be empty or {@code null}, in which case it is ignored. If both strings are empty or {@code null}, or all elements get pruned out, then this returns a zero-element list.
Helper for {@link #splitPaths}, which does the actual splitting and filtering and adding to a result.
Makes an array of dex/resource path elements, one per element of the given array.
Constructs a {@code DexFile} instance, as appropriate depending on whether {@code optimizedDirectory} is {@code null}.
Converts a dex/jar file path and an output directory to an output file path for an associated optimized dex file.
Finds the named class in one of the dex files pointed at by this instance. This will find the one in the earliest listed path element. If the class is found but has not yet been defined, then this method will define it in the defining context that this instance was constructed with. found in any of the dex files
Finds the named resource in one of the zip/jar files pointed at by this instance. This will find the one in the earliest listed path element. resource is not found in any of the zip/jar files
Finds all the resources with the given name, returning an enumeration of them. If there are no resources with the given name, then this method returns an empty enumeration.
Finds the named native code library on any of the library directories pointed at by this instance. This will find the one in the earliest listed directory, ignoring any that are not readable regular files. library was found
Creates a {@code PathClassLoader} that operates on a given list of files and directories. This method is equivalent to calling {@link #PathClassLoader(String, String, ClassLoader)} with a {@code null} value for the second argument (see description there). resources, delimited by {@code File.pathSeparator}, which defaults to {@code ":"} on Android
Creates a {@code PathClassLoader} that operates on two given lists of files and directories. The entries of the first list should be one of the following: <ul> <li>JAR/ZIP/APK files, possibly containing a "classes.dex" file as well as arbitrary resources. <li>Raw ".dex" files (not inside a zip file). </ul> The entries of the second list should be directories containing native library files. resources, delimited by {@code File.pathSeparator}, which defaults to {@code ":"} on Android libraries, delimited by {@code File.pathSeparator}; may be {@code null}
Creates a new exception instance and initializes it with default values.
Creates a new exception instance and initializes it with a given message.
Notified when {@code socketDescriptor} is either assigned to the current thread. The socket is either newly connected or reused from a connection pool. Implementations of this method should be thread-safe.
Sets this process' socket tagger to {@code tagger}.
Returns this process socket tagger.
Creates a new exception instance and initializes it with default values.
Creates a new exception instance and initializes it with a given message.
Convenience method which is equivalent to <code>setupDirectory(new File(baseDir))</code>.
Sets up the temporary directory, but only if one isn't already defined for this process, and only if it is possible (e.g., the directory already exists and is read-write, or the directory can be created). This call will do one of three things: <ul> <li>return without error and without doing anything, if a previous call to this method succeeded</li> <li>return without error, having either created a temporary directory under the given base or verified that such a directory already exists</li> <li>throw <code>UnsupportedOperationException</code> if the directory could not be created or accessed</li> </ul>
Start method tracing, specifying a file name as well as a default buffer size. See <a href="{@docRoot}guide/developing/tools/traceview.html"> Running the Traceview Debugging Program</a> for information about reading trace files. <p>You can use either a fully qualified path and name, or just a name. If only a name is specified, the file will be created under the /sdcard/ directory. If a name is not given, the default is /sdcard/dmtrace.trace.</p> as <code>0</code>, it defaults to 8MB. is currently defined is {@link #TRACE_COUNT_ALLOCS}.
Like startMethodTracing(String, int, int), but taking an already-opened FileDescriptor in which the trace is written.  The file name is also supplied simply for logging.  Makes a dup of the file descriptor.
Dumps "hprof" data to the specified file.  This may cause a GC. The VM may create a temporary file in the same directory.
Dumps "hprof" heap data to a file, by name or descriptor.
Returns the object that represents the VM instance's Dalvik-specific runtime environment.
Sets the current ideal heap utilization, represented as a number between zero and one.  After a GC happens, the Dalvik heap may be resized so that (size of live objects) / (size of heap) is equal to this number. <p>This is only a hint to the garbage collector and may be ignored.
We must not fork until we're single-threaded again. Wait until /proc shows we're down to just one thread.
Forks a new Zygote instance, but does not leave the zygote mode. The current VM must have been started with the -Xzygote flag. The new child is expected to eventually call forkAndSpecialize() if this is the parent, or -1 on error
Forks a new VM instance.  The current VM must have been started with the -Xzygote flag. <b>NOTE: new instance keeps all root capabilities. The new process is expected to call capset()</b>. fork()ing and and before spawning any threads. fork()ing and and before spawning any threads. setgroups() to after fork and before spawning any threads. dimension having a length of 3 and representing (resource, rlim_cur, rlim_max). These are set via the posix setrlimit(2) call. if this is the parent, or -1 on error.
Special method to start the system server process. In addition to the common actions performed in forkAndSpecialize, the pid of the child process is recorded such that the death of the child process will cause zygote to exit. fork()ing and and before spawning any threads. fork()ing and and before spawning any threads. setgroups() to after fork and before spawning any threads. dimension having a length of 3 and representing (resource, rlim_cur, rlim_max). These are set via the posix setrlimit(2) call. if this is the parent, or -1 on error.
Executes "/system/bin/sh -c &lt;command&gt;" using the exec() system call. This method never returns.
Appends quotes shell arguments to the specified string builder. The arguments are quoted using single-quotes, escaped if necessary, prefixed with a space, and appended to the command.
Added by Daniel J. Martinez Manzano <dani@dif.um.es>
Added by Daniel J. Martinez Manzano <dani@dif.um.es>
Creates a new Socket, binds it to myAddress:myPort and connects it to address:port. one. address:port. (exception relayed from the correspoonding Socket methods)
Encode the list in semicolon separated form.
Set a namevalue object in this list.
Compare if two NameValue lists are equal.
Do a lookup on a given name and return value associated with it.
Get the NameValue record given a name.
Returns a boolean telling if this NameValueList has a record with this name
Remove the element corresponding to this name.
Return an iterator for the name-value pairs of this list.
Get a list of parameter names.
Get the parameter as a String.
Set the  pattern matcher. To match on the field of a sip message, set the match expression in the match template and invoke the match function. This useful because SIP headers and parameters may appear in different orders and are not necessarily in canonical form. This makes it hard to write a pattern matcher that relies on regular expressions alone. Thus we rely on the following  strategy i.e. To do pattern matching on an incoming message, first parse it, and then construct a match template, filling in the fields that you want to match. The rules for matching are: A null object matches wild card - that is a match template of null matches any parsed SIP object. To match with any subfield, set the match template on a template object of the same type and invoke the match interface. Regular expressions matching implements the gov.nist.sip.Match interface that can be done using the Jakarta regexp package for example. package included herein. This can be used to implement the Match interface
Return the match expression.
Clones the given object. If the object is a wrapped type, an array, a GenericObject or a GenericObjectList, it is cast to the appropriate type and the clone() method is invoked. Else if the object implements Cloneable, reflection is used to discover and invoke clone() method. Otherwise, the original object is returned.
Recursively override the fields of this object with the fields of a new object. This is useful when you want to genrate a template and override the fields of an incoming SIPMessage with another SIP message that you have already generated. obect must be of the same class as this object. Set any fields that you do not want to override as null in the mergeOject object.
Add a new string to the accumulated string representation.
Pretty printing function accumulator for objects.
Pretty printing accumulator function for ints
Pretty printing accumulator function for shorts
Pretty printing accumulator function for chars
Pretty printing accumulator function for longs
Pretty printing accumulator function for booleans
Pretty printing accumulator function for doubles
Pretty printing accumulator function for floats
Debug printing function.
An introspection based equality predicate for GenericObjects.
An introspection based predicate matching using a template object. Allows for partial match of two protocl Objects. has to be of the same type (class). Primitive types and non-sip fields that are non null are matched for equality. Null in any field  matches anything. Some book-keeping fields are ignored when making the comparison.
Generic print formatting function: Does depth-first descent of the structure and recursively prints all non-private objects pointed to by this object. <bf> Warning - the following generic string routine will bomb (go into infinite loop) if there are any circularly linked structures so if you have these, they had better be private! </bf> We dont have to worry about such things for our structures (we never use circular linked structures).
Formatter with a given starting indentation.
Put the encoded version of this object in the given StringBuffer.
Return true if this supports reflection based cloning.
Makes a deep clone of this list.
A Constructor which takes a list name and a class name (for assertion checking).
A Constructor which takes a list name and a class (for assertion checking).
Traverse the list given a list iterator
This is the default list iterator.This will not handle nested list traversal.
Fetch the next object from the list based on the default list iterator
Concatenate two compatible header lists, adding the argument to the tail end of this list.
Concatenate two compatible header lists, adding the argument either to the beginning or the tail end of this list. A type check is done before concatenation.
string formatting function.
Convert this list of headers to a formatted string.
Convert this list of headers to a string (for printing) with an indentation given.
Do a merge of the GenericObjects contained in this list with the GenericObjects in the mergeList. Note that this does an inplace modification of the given list. This does an object by object merge of the given objects.
Alias for the encode function above.
Set the separator (for encoding the list)
Equality checking predicate.
Match with a template (return true if we have a superset of the given template. This can be used for partial match (template matching of SIP objects). Note -- this implementation is not unnecessarily efficient :-)
default constructor
Constructor given host name or IP address.
Return the host name in encoded form.
Compare for equality of hosts. Host names are compared by textual equality. No dns lookup is performed.
get the HostName field
get the Address field
Convenience function to get the raw IP destination address of a SIP message as a String.
Set the hostname member.
Set the IP Address.
Sets the host address or name of this object.
Set the address member
Return true if the address is a DNS host name (and not an IPV4 address)
Return true if the address is a DNS host name (and not an IPV4 address)
Get the inet address from this host. Caches the inet address returned from dns lookup to avoid lookup delays.
----- IPv6 Verifies whether the <code>address</code> could be an IPv6 address
Verifies whether the ipv6reference, i.e. whether it enclosed in square brackets
The lexer is initialized with the buffer.
Tries to determine whether the address in <tt>uriHeader</tt> could be an IPv6 address by counting the number of colons that appear in it. we have received for parsing. address (i.e. contains at least two colons) and false otherwise.
Parses a host:port string
Default constructor
Encode this hostport into its string representation. Note that this could be different from the string that has been parsed if something has been edited.
returns true if the two objects are equals, false otherwise.
get the Host field
get the port field
Returns boolean value indicating if Header has port
remove port.
Set the host member
Set the port member
Return the internet address corresponding to the host.
Handle an unexpected exception.
Handle an unexpected condition (and print the error code).
public abstract void selectLexer(String lexerName);
Initialize the lexer with a buffer.
Peek the next id but dont move the buffer pointer forward.
Get the next id.
call this after you call match
Look ahead for one token.
Match the given token or throw an exception if no such token can be matched.
JvB: utility function added to validate tokens token       =  1*(alphanum / "-" / "." / "!" / "%" / "*"
Parse a comment string cursor is at a ". Leave cursor at closing " closing quote.
Parse a comment string cursor is at a "(". Leave cursor at ) closing brace.
Return a substring containing no semicolons.
Scan until you see a slash or an EOL.
Return a substring containing no commas
Lookahead in the inputBuffer for n chars and return as a string. Do not consume the input.
Get and consume the next number. (i.e. sequence of digits).
Mark the position for backtracking.
Rewind the input ptr to the marked position.
Get the rest of the String
Get the sub-String until the character is encountered
Get the read pointer.
Get the buffer.
Create a parse exception.
New constructor, taking a boolean which is set if the NV pair is a flag
Original constructor, sets isFlagParameter to 'false'
Set the separator for the encoding method below.
A flag that indicates that doublequotes should be put around the value when encoded (for example name=value when value is doublequoted).
Return true if the value is quoted in doublequotes.
Set the name member
Set the value member
Get the encoded representation of this namevalue object. Added doublequote for encoding doublequoted values. Bug: RFC3261 stipulates that an opaque parameter in authenticate header has to be: opaque              =  "opaque" EQUAL quoted-string so returning just the name is not acceptable. (e.g. LinkSys phones are picky about this)
Equality comparison predicate.
default constructor.
Returns a boolean telling if this NameValueList has a record with this name
Return the size of the embedded map
Return true if empty.
Get a Vector of the buffer tokenized by lines
Get the next token from the buffer.
get the SDP field name of the line
Called by the auditor thread to check the ping status of the thread
Called by the auditor thread to reset the ping status of the thread
Return the thread being monitored
Helper function to allow threads to ping using this handle
Helper function to allow threads to get the ping interval directly from this handle
Returns a string representation of the object
Indicates how often monitored threads are supposed to ping (0 = no thread monitoring)
Defines how often monitored threads are supposed to ping
Indicates if the auditing of threads is enabled
Called by a thread that wants to be monitored
Stops monitoring a given thread
Called by a monitored thread reporting that it's alive and well
Resets the auditor
Audits the sanity of all threads
Create an empty address object. SPEC_REVISION
Creates an Address with the new display name and URI attribute values. address. A <code>null</code> value does not set the display name. unexpectedly while parsing the displayName value.
create a sip uri.
Create a SipURI
Creates a TelURL based on given URI string. The scheme or '+' should not be included in the phoneNumber string argument.
Creates an Address with the new address string value. The address string is parsed in order to create the new Address instance. Create with a String value of "*" creates a wildcard address. The wildcard can be determined if <code>((SipURI)Address.getURI).getUser() == *;</code>. unexpectedly while parsing the address value.
Creates a URI based on given URI string. The URI string is parsed in order to create the new URI instance. Depending on the scheme the returned may or may not be a SipURI or TelURL cast as a URI.
Match on the address only. Dont care about the display name.
Get the host port portion of the address spec.
Get the port from the imbedded URI. This assumes that a SIP URL is encapsulated in this address object.
Get the user@host:port for the address field. This assumes that the encapsulated object is a SipUri.
Get the host name from the address.
Remove a parameter from the address.
Encode the address as a string and return it.
Get the address type;
Set the address type. The address can be NAME_ADDR, ADDR_SPEC or WILD_CARD
get the display name
Set the displayName member
Set the address field
hashCode impelmentation
Compare two address specs for equality.
return true if DisplayName exist.
remove the displayName field
Return true if the imbedded URI is a sip URI.
Returns the URI address of this Address. The type of URI can be determined by the scheme.
This determines if this address is a wildcard address. That is <code>Address.getAddress.getUserInfo() == *;</code>
Sets the URI address of this Address. The URI can be either a TelURL or a SipURI.
Set the user name for the imbedded URI.
Mark this a wild card address type. Also set the SIP URI to a special wild card address.
get the hostPort member.
get the userInfo memnber.
Get password from the user info.
Get the user name if it exists.
Get the host name.
Get the port.
remove the port.
set the password.
Set the user name of the userInfo member.
set the host.
Set the port.
Set the hostPort member
Set the userInfo member
Remove the user Infor.
Constructor given the URI string
Encode the URI.
Encode this URI.
Returns the value of the "scheme" of this URI, for example "sip", "sips" or "tel".
This method determines if this is a URI with a scheme of "sip" or "sips".
Default constructor
An introspection based equality predicate for SIPObjects.
An introspection based string formatting method. We need this because in this package (although it is an exact duplicate of the one in the superclass) because it needs to access the protected members of the other objects in this class.
Formatter with a given starting indentation (for nested structs).
Encode this to a string.
Construct a NetObject List given a list name.
Construct a NetObject List given a list name and a class for the objects that go into the list.
Construct an empty NetObjectList.
Add a new object to the list.
concatenate the two Lists
returns the first element
returns the next element
set the class
Convert to a string given an indentation(for pretty printing).
Decode a path. <p>Interprets %XX (where XX is hexadecimal number) as UTF-8 encoded bytes. <p>The validity of the input path is not checked (i.e. characters that were not encoded will not be reported as errors). <p>This method differs from URLDecoder.decode in that it always uses UTF-8 (while URLDecoder uses the platform default encoding, often ISO-8859-1), and doesn't translate + characters to spaces.
Constructor given the scheme. The scheme must be either Sip or Sips
Get the scheme.
clear all URI Parameters.
Clear the password from the user part if it exists.
Get the authority.
Clear all Qheaders.
Construct a URL from the parsed structure.
Return a string representation.
getUser@host Peter Musgrave - handle null user
get the parameter (do a name lookup) and return null if none exists.
Get the method parameter.
Accessor for URI parameters
Remove the URI parameters.
Accessor forSIPObjects the URL)
Get the urse parameter.
Get the password of the user. ( a very bad idea).
Set the user password.
Returns the stucture corresponding to the telephone number provided that the user is a telephone subscriber. when user = phone is specified)
Get the host and port of the server. structure.
Get the port from the authority field.
Get the host protion of the URI.
returns true if the user is a telephone subscriber. If the host is an Internet telephony gateway, a telephone-subscriber field MAY be used instead of a user field. The telephone-subscriber field uses the notation of RFC 2806 [19]. Any characters of the un-escaped "telephone-subscriber" that are not either in the set "unreserved" or "user-unreserved" MUST be escaped. The set of characters not reserved in the RFC 2806 description of telephone-subscriber contains a number of characters in various syntax elements that need to be escaped when used in SIP URLs, for example quotation marks (%22), hash (%23), colon (%3a), at-sign (%40) and the "unwise" characters, i.e., punctuation of %5b and above. The telephone number is a special case of a user name and cannot be distinguished by a BNF. Thus, a URL parameter, user, is added to distinguish telephone numbers from user names. The user parameter value "phone" indicates that the user part contains a telephone number. Even without this parameter, recipients of SIP URLs MAY interpret the pre-@ part as a telephone number if local restrictions on the
remove the ttl value from the parameter list if it exists.
Remove the maddr param if it exists.
Delete the transport string.
Remove a header given its name (provided it exists).
Remove all headers.
Set the user type.
remove the port setting.
remove the Method.
Sets the user of SipURI. The identifier of a particular resource at the host being addressed. The user and the user password including the "at" sign make up the user-info. unexpectedly while parsing the user value.
Remove the user.
Set the default parameters for this URI. Do nothing if the parameter is already set to some value. Otherwise set it to the given value.
Set the authority member
Set the host for this URI.
Set the uriParms member
Set a given URI parameter. Note - parameter must be properly encoded before the function is called.
Set the qheaders member
Set the MADDR parameter .
Sets the value of the user parameter. The user URI parameter exists to distinguish telephone numbers from user names that happen to look like telephone numbers.  This is equivalent to setParameter("user", user).
Set the Method
Sets ISDN subaddress of SipURL
Set the telephone subscriber field.
set the port to a given value.
Boolean to check if a parameter of a given name exists.
Set the query header when provided as a name-value pair.
Set the parameter as given.
Return true if the transport parameter is defined.
Remove a parameter given its name
Set the hostPort field of the imbedded authority field.
clone this.
Returns the value of the named header, or null if it is not set. SIP/SIPS URIs may specify headers. As an example, the URI sip:joe@jcp.org?priority=urgent has a header "priority" whose value is "urgent".
Returns an Iterator over the names (Strings) of all headers present in this SipURI.
Returns the value of the <code>lr</code> parameter, or null if this is not set. This is equivalent to getParameter("lr").
Returns the value of the <code>maddr</code> parameter, or null if this is not set. This is equivalent to getParameter("maddr").
Returns the value of the <code>method</code> parameter, or null if this is not set. This is equivalent to getParameter("method").
Returns the value of the named parameter, or null if it is not set. A zero-length String indicates flag parameter.
Returns an Iterator over the names (Strings) of all parameters present in this ParametersHeader.
Returns the value of the "ttl" parameter, or -1 if this is not set. This method is equivalent to getParameter("ttl").
Returns the value of the "transport" parameter, or null if this is not set. This is equivalent to getParameter("transport").
Returns the value of the <code>userParam</code>, or null if this is not set. <p> This is equivalent to getParameter("user").
Returns true if this SipURI is secure i.e. if this SipURI represents a sips URI. A sip URI returns false. <code>false</code> if it represents a sip URI.
This method determines if this is a URI with a scheme of "sip" or "sips".
Sets the value of the specified header fields to be included in a request constructed from the URI. If the header already had a value it will be overwritten.
Set the host portion of the SipURI
Sets the value of the <code>lr</code> parameter of this SipURI. The lr parameter, when present, indicates that the element responsible for this resource implements the routing mechanisms specified in RFC 3261. This parameter will be used in the URIs proxies place in the Record-Route header field values, and may appear in the URIs in a pre-existing route set.
Sets the value of the <code>maddr</code> parameter of this SipURI. The maddr parameter indicates the server address to be contacted for this user, overriding any address derived from the host field. This is equivalent to setParameter("maddr", maddr).
Sets the value of the <code>method</code> parameter. This specifies which SIP method to use in requests directed at this URI. This is equivalent to setParameter("method", method).
Sets the value of the specified parameter. If the parameter already had a value it will be overwritten. A zero-length String indicates flag parameter. unexpectedly while parsing the parameter name or value.
Sets the scheme of this URI to sip or sips depending on whether the argument is true or false. The default value is false.
Sets the value of the <code>ttl</code> parameter. The ttl parameter specifies the time-to-live value when packets are sent using UDP multicast. This is equivalent to setParameter("ttl", ttl).
Sets the value of the "transport" parameter. This parameter specifies which transport protocol to use for sending requests and responses to this entity. The following values are defined: "udp", "tcp", "sctp", "tls", but other values may be used also. This method is equivalent to setParameter("transport", transport). Transport parameter constants are defined in the {@link javax.sip.ListeningPoint}.
Returns the user part of this SipURI, or null if it is not set.
Returns whether the the <code>lr</code> parameter is set. This is equivalent to hasParameter("lr"). This interface has no getLrParam as RFC3261 does not specify any values for the "lr" paramater.
Returns whether the <code>gr</code> parameter is set. Not part on the interface since gruu is not part of the base RFC3261.
Sets the <code>gr</code> parameter. Not part on the interface since gruu is not part of the base RFC3261.
Sets the <code>gr</code> parameter. Not part on the interface since gruu is not part of the base RFC3261.
Creates new TelephoneNumber
delete the specified parameter.
get the PhoneNumber field
get the PostDial field
Get the isdn subaddress for this number.
returns true if th PostDial field exists
return true if this header has parameters.
return true if the isdn subaddress exists.
is a global telephone number.
remove the PostDial field
Remove the isdn subaddress (if it exists).
Set the list of parameters.
set the Global field
set the PostDial field
set the specified parameter
set the isdn subaddress for this structure.
set the PhoneNumber field
Returns an Iterator over the names (Strings) of all parameters.
Creates a new instance of TelURLImpl
Set the telephone number.
Returns the value of the <code>isdnSubAddress</code> parameter, or null if it is not set.
Returns the value of the <code>postDial</code> parameter, or null if it is not set.
Returns the value of the "scheme" of this URI, for example "sip", "sips" or "tel".
Returns <code>true</code> if this TelURL is global i.e. if the TelURI has a global phone user. and <code>false</code> otherwise.
Sets phone user of this TelURL to be either global or local. The default value is false, hence the TelURL is defaulted to local. phone user.
Sets ISDN subaddress of this TelURL. If a subaddress is present, it is appended to the phone number after ";isub=". parameter
Sets post dial of this TelURL. The post-dial sequence describes what and when the local entity should send to the phone line.
Set the telephone number.
Get the telephone number.
Return the string encoding.
Deep copy clone operation.
Default constructor
Compare for equality.
Encode the user information as a string.
Clear the password field.
Gets the user type (which can be set to TELEPHONE_SUBSCRIBER or USER)
get the user field.
get the password field.
Set the user member
Set the password member
Set the user type (to TELEPHONE_SUBSCRIBER or USER).
Default constructor for the security manager. There is one Account manager. There is one SipSecurity manager for every user name,
Removes all via headers from <tt>request</tt> and replaces them with a new one, equal to the one that was top most.
Cache the bindings of proxyDomain and authorization header.
Returns an authorization header cached for the specified call id and null if no authorization header has been previously cached for this call.
Remove a cached authorization header.
Calculates an http authentication response in accordance with rfc2617. <p>
Default constructor
Constructor given the call Identifier.
Encode the body part of this header (i.e. leave out the hdrName).
get the CallId field. This does the same thing as encodeBody
get the call Identifer member.
set the CallId field header. It must have the form localId@host or localId. not a token@token.
Set the callIdentifier member.
Get the to-tag parameter from the address parm list.
Set the to-tag member
Boolean function
remove Tag member
Get the from-tag parameter from the address parm list.
Set the to-tag member
Boolean function
remove Tag member
default constructor
Return canonical form.
Gets the expires value of the ExpiresHeader. This expires value is relative time.
Sets the relative expires value of the ExpiresHeader. The expires value MUST be greater than zero and MUST be less than 2**31.
default Constructor.
Encode the header content into a String.
Default constructor
Constructor given the call Identifier.
default Constructor.
Gets the expires value of the SessionExpiresHeader. This expires value is relative time.
Sets the relative expires value of the SessionExpiresHeader. The expires value MUST be greater than zero and MUST be less than 2**31.
set the Address field
Constructor given the name of the header.
Public constructor.
Set the accessTpe
Set the UtranCellID field.
extension-access-info = gen-value gen-value = token / host quoted-string
Makes a deep clone. (ParametersHeader)
default constructor
Encode into canonical form.
Default Constructor
<p>Set the URI on this address</p>
<p>Get the address's URI</p>
default constructor
Default constructor
default constructor
Defaul Constructor
<p>Set the Charging Collection Function (CCF) Address</p>
<p>Add another Charging Collection Function (CCF) Address to this header</p>
<p>Remove a Charging Collection Function (CCF) Address set in this header</p>
<p>Get all the Charging Collection Function (CCF) Addresses set in this header</p>
<p>Set the Event Charging Function (ECF) Address</p>
<p>Add another Event Charging Function (ECF) Address to this header</p>
<p>Remove a Event Charging Function (ECF) Address set in this header</p>
<p>Get all the Event Charging Function (ECF) Addresses set in this header</p>
<p>Remove parameter </p>
Default Constructor
<p> Get the icid-value parameter value </p>
<p> Set the icid-value parameter </p>
<p> Get the icid-generated-at parameter value </p>
<p> Set the icid-generated-at parameter </p>
<p> Get the orig-ioi parameter value </p>
<p> Set the orig-ioi parameter </p>
<p> Get the term-ioi parameter value </p>
<p> Set the term-ioi parameter </p>
Get the media authorization token.
Set the media authorization token.
Encode header
default constructor
Default constructor.
Constructor given a privacy type
Encode into a canonical string.
Get privacy type
set the privacy type.
Suppress direct setting of values.
Default constructor
Default constructor.
Set the visited network ID as a string. The value will be quoted in the header.
Set the visited network ID as a token
Get the visited network ID value of this header
Default constructor
Default constructor
Set security mechanism. <p>eg: Security-Client: ipsec-3gpp</p>
Set Encryption Algorithm (ealg parameter)
Set Algorithm (alg parameter)
Set Protocol (prot paramater)
Set Mode (mod parameter)
Set Client SPI (spi-c parameter)
Set Server SPI (spi-s parameter)
Set Client Port (port-c parameter)
Set Server Port (port-s parameter)
<p>Set Preference. The "q" parameter indicates a relative preference for the particular mechanism. The higher the value the more preferred the mechanism is. Range from 0.001 to 0.999.</p>
Get Security Mechanism
Get Encryption Algorithm
Get Algorithm
Get Protocol
Get Mode
Get Client SPI
Get Server SPI
Get Client Port
Get Server Port
Get Preference
TODO serialVersionUID
TODO serialVersionUID
TODO serialVersionUID
default constructor
Default constructor
default constructor
returns true if this header allows all ContentTypes, false otherwise.
returns true if this header allows all ContentSubTypes, false otherwise.
Encode the value of this header into cannonical form.
get the MediaRange field
get the contentType field
get the ContentSubType fiels
Get the q value.
Return true if the q value has been set.
Remove the q value.
set the ContentSubType field
set the ContentType field
Set the q value
Set the mediaRange member
default constructor
Encode the value of this header.
get QValue field
get ContentEncoding field
Set the qvalue member
Sets the encoding of an EncodingHeader.
default constructor
default constructor
Encode the value of this header to a string.
get the LanguageRange field
get the QValue field. Return -1 if the parameter has not been set.
Set the languageRange.
Sets q-value for media-range in AcceptLanguageHeader. Q-values allow the user to indicate the relative degree of preference for that media-range, using the qvalue scale from 0 to 1. If no q-value is present, the media-range should be treated as having a q-value of 1. the qValue. <code>-1</code> or between <code>0 and 1</code>.
Gets the language value of the AcceptLanguageHeader.
Sets the language parameter of this AcceptLanguageHeader. AcceptLanguageHeader
Default constructor
Constructor given the name of the header.
Constructor given a synch flag.
Return value encoding in canonical form.
Set the uri member
Set the string member
Returns the AlertInfo value of this AlertInfoHeader.
default constructor
default constructor
get the method field
Set the method member
Return body encoded in canonical form.
default constructor
Sets the eventType defined in this AllowEventsHeader. in this AllowEventsHeader unexpectedly while parsing the Strings defining the eventType supported
Gets the eventType of the AllowEventsHeader.
default constructor
Gets an Iterator of all the methods of the AllowEventsHeader. Returns an empty Iterator if no methods are defined in this AllowEvents Header. AllowEventsHeader.
Sets the methods supported defined by this AllowEventsHeader. in this AllowEventsHeader unexpectedly while parsing the Strings defining the methods supported.
default constructor
Gets an Iterator of all the methods of the AllowHeader. Returns an empty Iterator if no methods are defined in this Allow Header. AllowHeader.
Sets the methods supported defined by this AllowHeader. in this AllowHeader unexpectedly while parsing the Strings defining the methods supported.
set the specified parameter. Bug reported by Dominic Sparks.
This is only used for the parser interface.
Encode in canonical form.
Sets the scheme of the challenge information for this AuthenticationHeaderHeader. For example, Digest.
Returns the scheme of the challenge information for this AuthenticationHeaderHeader.
Sets the Realm of the WWWAuthenicateHeader to the <var>realm</var> parameter value. Realm strings MUST be globally unique. It is RECOMMENDED that a realm string contain a hostname or domain name. Realm strings SHOULD present a human-readable identifier that can be rendered to a user.
Returns the Realm value of this WWWAuthenicateHeader. This convenience method returns only the realm of the complete Challenge.
Sets the Nonce of the WWWAuthenicateHeader to the <var>nonce</var> parameter value.
Returns the Nonce value of this WWWAuthenicateHeader.
Sets the URI of the WWWAuthenicateHeader to the <var>uri</var> parameter value. Note that since 1.2 this is no longer applicable to the WWW-Authenticate and Proxy-Authenticate headers
Returns the URI value of this WWWAuthenicateHeader, for example DigestURI. Note that since 1.2 this is no longer applicable to the WWW-Authenticate and Proxy-Authenticate headers
Sets the Algorithm of the WWWAuthenicateHeader to the new <var>algorithm</var> parameter value.
Returns the Algorithm value of this WWWAuthenicateHeader.
Sets the Qop value of the WWWAuthenicateHeader to the new <var>qop</var> parameter value.
Returns the Qop value of this WWWAuthenicateHeader.
Sets the Opaque value of the WWWAuthenicateHeader to the new <var>opaque</var> parameter value.
Returns the Opaque value of this WWWAuthenicateHeader.
Sets the Domain of the WWWAuthenicateHeader to the <var>domain</var> parameter value.
Returns the Domain value of this WWWAuthenicateHeader.
Sets the value of the stale parameter of the WWWAuthenicateHeader to the <var>stale</var> parameter value.
Returns the boolean value of the state paramater of this WWWAuthenicateHeader.
Set the CNonce.
Get the CNonce.
Set the nonce count pakrameter. Bug fix sent in by Andreas Bystr�m
Get the RESPONSE value (or null if it does not exist).
Set the Response.
Returns the Username value of this AuthorizationHeader. This convenience method returns only the username of the complete Response.
Sets the Username of the AuthorizationHeader to the <var>username</var> parameter value. unexpectedly while parsing the username.
Default contstructor.
Value of header encoded in canonical form.
Get the name value pair for a given authentication info parameter. list.
Returns the AuthenticationInfo value of this AuthenticationInfoHeader.
Returns the CNonce value of this AuthenticationInfoHeader. not set.
Returns the nextNonce value of this AuthenticationInfoHeader. information, null if value is not set.
Returns the Nonce Count value of this AuthenticationInfoHeader. not set.
Returns the messageQop value of this AuthenticationInfoHeader. value is not set.
Returns the Response value of this AuthenticationInfoHeader.
Sets the CNonce of the AuthenticationInfoHeader to the <var>cNonce</var> parameter value. unexpectedly while parsing the cNonce value.
Sets the NextNonce of the AuthenticationInfoHeader to the <var>nextNonce</var> parameter value. unexpectedly while parsing the nextNonce value.
Sets the Nonce Count of the AuthenticationInfoHeader to the <var>nonceCount</var> parameter value. unexpectedly while parsing the nonceCount value.
Sets the Qop value of the AuthenticationInfoHeader to the new <var>qop</var> parameter value. unexpectedly while parsing the Qop value.
Sets the Response of the AuthenticationInfoHeader to the new <var>response</var> parameter value. AuthenticationInfoHeader. unexpectedly while parsing the Response.
Creates a new instance of AuthenticationList
Default constructor.
Default constructor
(non-Javadoc) CallIDs are compared case-insensitively
get the CallId field. This does the same thing as encodeBody
Constructor given the call Identifier.
constructor or token@token
Get the encoded version of this id.
Compare two call identifiers for equality. otherwise
get the LocalId field
get the host field
Set the localId member
set the callId field token@token
Default constructor
Return canonical representation.
get the purpose field
get the URI field
set the purpose field
set the URI field
Default constructor
Default constructor
Encode the challenge in canonical form.
get the scheme field
get AuthParms list.
get the domain
get the URI field
get the Opaque field
get QOP value
get the Algorithm value.
get the State value.
get the Signature value.
get the signedBy value.
get the Response value.
get the realm value.
get the specified parameter
boolean function
Boolean function
delete the specified parameter otherwise.
remove all parameters
set the specified parameter
Set the scheme member
Set the authParams member
Default constructor.
Set a parameter.
Encode body of the header into a cannonical String.
get the Contact list.
get the WildCardFlag field
get the address field.
get the parameters List
get Expires parameter.
Set the expiry time in seconds.
get the Q-value
set the Contact List
Set the wildCardFlag member
set the Q-value parameter
remove the pub-gruu value from the parameter list if it exists.
remove the pub-gruu value from the parameter list if it exists.
Default constructor.
Encode value of header into canonical string.
Set the disposition type.
Get the disposition type.
Get the dispositionType field.
set the dispositionType field.
Gets the interpretation of the message body or message body part of this ContentDispositionHeader.
Default constructor.
Canonical encoding of body of the header.
Get the ContentEncoding field.
Set the ConentEncoding field.
Default constructor.
Default constructor
Default constructor.
Constructor given a content type and subtype.
compare two MediaRange headers.
get the mediaRange field.
get the Media Type.
get the MediaSubType field.
Get the content subtype.
Get the content subtype.
Get the charset parameter.
set the content type and subtype.
set the content type.
Set the content subtype.
Default constructor
get the parameters list.
get the scheme field.
Set the parameters member
Constructor given the sequence number and method.
Compare two cseq headers for equality. otherwise.
Return canonical encoded header.
Return canonical header content. (encoded header except headerName:)
Get the method.
For backwards compatibility
Default constructor.
Constructor given the error info
Sets the ErrorInfo of the ErrorInfoHeader to the <var>errorInfo</var> parameter value.
Returns the ErrorInfo value of this ErrorInfoHeader. This message may return null if a String message identifies the ErrorInfo.
Sets the Error information message to the new <var>message</var> value supplied to this method. unexpectedly while parsing the error message.
Get the Error information message of this ErrorInfoHeader.
Default constructor.
Creates a new instance of Event
Sets the eventType to the newly supplied eventType string. in this EventHeader unexpectedly while parsing the eventType value.
Gets the eventType of the EventHeader.
Sets the id to the newly supplied <var>eventId</var> string. unexpectedly while parsing the eventId value.
Gets the id of the EventHeader. This method may return null if the "eventId" is not set.
Return true if the given event header matches the supplied one.
default constructor
Set the name of the header.
Set the value of the header.
Get the value of the extension header.
Return the canonical encoding of this header.
Return just the body of this header encoded (leaving out the name and the CRLF at the end).
Default constructor
Generate a FROM header from a TO header
Conveniance accessor function to get the hostPort field from the address. Warning -- this assumes that the embedded URI is a SipURL.
Get the display name from the address.
Get the tag parameter from the address parm list.
Boolean function
remove Tag member
Set the tag member
Get the user@host port string.
Set pretty encoding on / off. This splits up via headers into multiple lines for readability ( better for debugging ).
Creates a new AcceptEncodingHeader based on the newly supplied encoding value. unexpectedly while parsing the encoding value.
Creates a new AcceptHeader based on the newly supplied contentType and contentSubType values. unexpectedly while parsing the content type or content subtype value.
Creates a new AcceptLanguageHeader based on the newly supplied language value.
Creates a new AlertInfoHeader based on the newly supplied alertInfo value.
Creates a new AllowEventsHeader based on the newly supplied event type value. unexpectedly while parsing the eventType value.
Creates a new AllowHeader based on the newly supplied method value. unexpectedly while parsing the method value.
Creates a new AuthenticationInfoHeader based on the newly supplied response value. unexpectedly while parsing the response value.
Creates a new AuthorizationHeader based on the newly supplied scheme value. unexpectedly while parsing the scheme value.
Creates a new CSeqHeader based on the newly supplied sequence number and method values. than zero. unexpectedly while parsing the method value.
For backwards compatibility, also accept int
Creates a new CallIdHeader based on the newly supplied callId value. unexpectedly while parsing the callId value.
Creates a new CallInfoHeader based on the newly supplied callInfo value.
Creates a new ContactHeader based on the newly supplied address value.
Creates a new wildcard ContactHeader. This is used in Register requests to indicate to the server that it should remove all locations the at which the user is currently available. This implies that the following conditions are met: <ul> <li><code>ContactHeader.getAddress.getAddress.getUserInfo() == *;</code> <li><code>ContactHeader.getAddress.getAddress.isWildCard() == true;</code> <li><code>ContactHeader.getExpires() == 0;</code> </ul>
Creates a new ContentDispositionHeader based on the newly supplied contentDisposition value. unexpectedly while parsing the contentDisposition value.
Creates a new ContentEncodingHeader based on the newly supplied encoding value. unexpectedly while parsing the encoding value.
Creates a new ContentLanguageHeader based on the newly supplied contentLanguage value.
Creates a new CSeqHeader based on the newly supplied contentLength value. than zero.
Creates a new ContentTypeHeader based on the newly supplied contentType and contentSubType values. unexpectedly while parsing the content type or content subtype value.
Creates a new DateHeader based on the newly supplied date value.
Creates a new EventHeader based on the newly supplied eventType value. unexpectedly while parsing the eventType value.
Creates a new ExpiresHeader based on the newly supplied expires value. than zero.
Creates a new ExtensionHeader based on the newly supplied name and value values. unexpectedly while parsing the name or value values.
Creates a new FromHeader based on the newly supplied address and tag values. unexpectedly while parsing the tag value.
Creates a new InReplyToHeader based on the newly supplied callId value. unexpectedly while parsing the callId value.
Creates a new MaxForwardsHeader based on the newly supplied maxForwards value. than zero or greater than 255.
Creates a new MimeVersionHeader based on the newly supplied mimeVersion value. than zero.
Creates a new MinExpiresHeader based on the newly supplied minExpires value. than zero.
Creates a new MinSEHeader based on the newly supplied expires value. than zero. TODO: Once interfaces are in javax, change the type to MinSEHeader and add to HeaderFactory. - pmusgrave pmusgrave
Creates a new OrganizationHeader based on the newly supplied organization value. unexpectedly while parsing the organization value.
Creates a new PriorityHeader based on the newly supplied priority value. unexpectedly while parsing the priority value.
Creates a new ProxyAuthenticateHeader based on the newly supplied scheme value. unexpectedly while parsing the scheme value.
Creates a new ProxyAuthorizationHeader based on the newly supplied scheme value. unexpectedly while parsing the scheme value.
Creates a new ProxyRequireHeader based on the newly supplied optionTag value. unexpectedly while parsing the optionTag value.
Creates a new RAckHeader based on the newly supplied rSeqNumber, cSeqNumber and method values. less than zero or greater than than 2**31-1. unexpectedly while parsing the method value.
Creates a new RSeqHeader based on the newly supplied sequenceNumber value. less than zero or greater than than 2**31-1.
Creates a new ReasonHeader based on the newly supplied reason value. unexpectedly while parsing the protocol, cause or text value.
Creates a new RecordRouteHeader based on the newly supplied address value.
Creates a new ReplyToHeader based on the newly supplied address value.
Creates a new RequireHeader based on the newly supplied optionTag value. unexpectedly while parsing the List of optionTag value.
Creates a new RetryAfterHeader based on the newly supplied retryAfter value. than zero.
Creates a new RouteHeader based on the newly supplied address value.
Creates a new ServerHeader based on the newly supplied product value. unexpectedly while parsing the product value.
Creates a new SubjectHeader based on the newly supplied subject value. unexpectedly while parsing the subject value.
Creates a new SubscriptionStateHeader based on the newly supplied subscriptionState value. unexpectedly while parsing the subscriptionState value.
Creates a new SupportedHeader based on the newly supplied optionTag value. unexpectedly while parsing the optionTag value.
Creates a new TimeStampHeader based on the newly supplied timeStamp value. than zero.
Creates a new ToHeader based on the newly supplied address and tag values. unexpectedly while parsing the tag value.
Creates a new UnsupportedHeader based on the newly supplied optionTag value. unexpectedly while parsing the List of optionTag value.
Creates a new UserAgentHeader based on the newly supplied product value. unexpectedly while parsing the product value.
Creates a new ViaHeader based on the newly supplied uri and branch values. unexpectedly while parsing the branch value.
Creates a new WWWAuthenticateHeader based on the newly supplied scheme value. unexpectedly while parsing the scheme values.
Creates a new WarningHeader based on the newly supplied agent, code and comment values. unexpectedly while parsing the agent or comment values. the WarningHeader.
Creates a new ErrorInfoHeader based on the newly supplied errorInfo value.
Create a header from the given header text. Header should not have the trailng crlf.
Create and parse a header.
Create and return a list of headers. of that type of header is not alowed.
Create a ReferTo Header.
Create a ReferredBy Header. pmusgrave TODO: Once interfaces are in javax, change the type to MinSEHeader and add to HeaderFactory. - pmusgrave
Create a Replaces header with a call Id, to and from tag. TODO: Once interfaces are in javax, change the type to MinSEHeader and add to HeaderFactory. - pmusgrave pmusgrave
Create a Join header with a call Id, to and from tag.
creates a P-Access-Network-Info header
P-Asserted-Identity header
Creates a new P-Associated-URI header based on the supplied address
P-Called-Party-ID header
P-Charging-Function-Addresses header
P-Charging-Vector header
P-Media-Authorization header
P-Preferred-Identity header
P-Visited-Network-ID header
PATH header
Privacy header
Service-Route header
Security-Server header
Security-Client header
Security-Verify header
Please note that this is not a SIP/TEL uri. It is a DIAMETER AAA URI.
Creates a new SessionExpiresHeader based on the newly supplied expires value. than zero.
Create a new Request Line from a String.
Create a new StatusLine from a String.
Create and return a references header.
Constructor Default constructor.
Default constructor
set the indentation field
get the number of indentation.
increment the indentation field
decrement the indentation field
get the indentation
Default constructor
Sets the Call-Id of the InReplyToHeader. The CallId parameter uniquely identifies a serious of messages within a dialogue. unexpectedly while parsing the callId value.
Returns the Call-Id of InReplyToHeader. The CallId parameter uniquely identifies a series of messages within a dialogue.
Generate canonical form of the header.
Default constructor
Default constructor.
get the MaxForwards field.
Set the maxForwards member
Encode into a string.
Boolean function
decrement MaxForwards field one by one.
get type field
get the subType field.
Set the type member
Set the subtype member
Encode the object.
Default constructor
Gets the Minor version value of this MimeVersionHeader.
Gets the Major version value of this MimeVersionHeader.
Sets the Minor-Version argument of this MimeVersionHeader to the supplied <var>minorVersion</var> value.
Sets the Major-Version argument of this MimeVersionHeader to the supplied <var>majorVersion</var> value.
default constructor
add an extension header to this map. the header (does not have to belong to the nist-sip package). Use this if you want to use the introspection-based methods.
Return encoding of value of the header.
Default constructor
Get the organization field.
Set the organization member
Return the parameter as an object (dont convert to string).
Return true if you have a parameter and false otherwise.
Removes the specified parameter from Parameters of this ParametersHeader. This method returns silently if the parameter is not part of the ParametersHeader.
Sets the value of the specified parameter. If the parameter already had a value it will be overwritten. A zero-length String indicates flag parameter. unexpectedly while parsing the parameter name or value.
Sets the value of the specified parameter. If the parameter already had a value it will be overwritten. unexpectedly while parsing the parameter name or value.
Return true if has a parameter.
Remove all parameters.
get the parameter list.
Set the parameter given a name and value.
Set the parameter list.
Get the parameter as an integer value.
Get the parameter as an integer when it is entered as a hex.
Get the parameter as a float value.
Get the parameter as a long value.
Get the parameter value as a URI. not present.
Get the parameter value as a boolean.
This is for the benifit of the TCK.
------------------------- Introduced specifically for the P-Charging-Function-Addresses Header and all other headers that may have multiple header parameters of the same name, but with multiple possible values. Example: P-Charging-Function-Addresses: ccf=[5555::b99:c88:d77:e66]; ccf=[5555::a55:b44:c33:d22];
Set the parameter given a name and value.
Returns the parameter name
Return the parameter as an object (dont convert to string).
Returns an Iterator over the names (Strings) of all parameters present in this ParametersHeader.
Return true if you have a parameter and false otherwise.
Removes the specified parameter from Parameters of this ParametersHeader. This method returns silently if the parameter is not part of the ParametersHeader.
Return true if has a parameter.
Remove all parameters.
Default constructor
get the priority value.
Set the priority member
Return canonical form.
get the protocol name
get the protocol version
Get the protocol name + version JvB: This is what is returned in the ViaHeader interface for 'getProtocol()'
get the transport
Set the protocolName member
Set the protocolVersion member
Set the transport member
Default constructor.
Default Constructor
(non-Javadoc) Fail silently for backwards compatibility
(non-Javadoc) Fail silently for backwards compatibility
Default constructor
default constructor
Default constructor
Default  Constructor
Sets the option tag value to the new supplied <var>optionTag</var> parameter. unexpectedly while parsing the optionTag value.
Gets the option tag of this OptionTag class.
Default Constructor
Creates a new instance of RAck
Encode the body of this header (the stuff that follows headerName). A.K.A headerValue.
Gets the CSeq sequence number of this RAckHeader.
Gets the CSeq sequence number of this RAckHeader.
Gets the method of RAckHeader
Gets the RSeq sequence number of this RAckHeader.
Get the cause token.
Set the cause.
Set the protocol
Return the protocol.
Set the text.
Get the text.
Creates a new instance of Reason
Gets the unique string name of this Header. A name constant is defined in each individual Header identifying each Header.
Encode the body of this header (the stuff that follows headerName). A.K.A headerValue.
Default constructor
default constructor
Default constructor
default Constructor.
Default constructor
Default constructor given an address.
Encode the header into a String.
Conveniance accessor function to get the hostPort field from the address
Default constructor
Encode the request line as a String.
Constructor given the request URI and the method.
Compare for equality. are set.
Default constructor
Default constructor
Default constructor
Encode body of this into cannonical form.
Boolean function
remove comment field
remove duration field
Sets the retry after value of the RetryAfterHeader. The retry after value MUST be greater than zero and MUST be less than 2**31.
Gets the retry after value of the RetryAfterHeader. This retry after value is relative time.
Gets the comment of RetryAfterHeader. is available.
Sets the comment value of the RetryAfterHeader. unexpectedly while parsing the comment.
Sets the duration value of the RetryAfterHeader. The retry after value MUST be greater than zero and MUST be less than 2**31.
Gets the duration value of the RetryAfterHeader. This duration value is relative time. set.
Default constructor
Default constructor given an address.
Hashcode so this header can be inserted into a set.
Encode into canonical form. Acknowledgement: contains a bug fix for a bug reported by Laurent Schwizer
default constructor
Order is important when comparing route lists.
Creates a new instance of RSeq
Gets the sequence number of this RSeqHeader.
Return canonical form.
set the productToken field
Encode only the body of this header.
Returns the list value of the product parameter.
Sets the product value of the UserAgentHeader. unexpectedly while parsing the product value.
equality check.
Initializer, sets all the fields to invalid values.
Construct a SIP date from the time offset given in miliseconds
Get canonical string representation.
The only accessor we allow is to the java calendar record. All other fields are for this package only.
get the WkDay field
get the month
get the hour
get the minute
get the second
convert the SIP Date of this structure to a Java Date. SIP Dates are forced to be GMT. Stores the converted time as a java Calendar class.
Set the wkday member
Set the day member
Set the month member
Set the year member
Get the year member.
Set the hour member
Set the minute member
Set the second member
Get the time offset from the current time.
Default constructor.
Encode the header into a String.
Set the date member
Sets date of DateHeader. The date is repesented by the Calendar object.
Gets the date of DateHeader. The date is repesented by the Calender object.
Default constructor
get the priority value.
Set the priority member
This method needs to be added for backwards compatibility to avoid ClassCast exception on V1.1 applications
Name of the SIPHeader
Alias for getHaderName above.
Set the name of the header .
Get the header value (i.e. what follows the name:). This merely goes through and lops off the portion that follows the headerName:
Return false if this is not a header list (SIPHeaderList overrrides this method).
Encode this header into canonical form.
Encode the body of this header in the given buffer. Default implementation calls encodeBody();
Alias for getHeaderValue.
This is a pretty simple hashCode but satisfies requirements.
Concatenate the list of stuff that we are keeping around and also the text corresponding to these structures (that we parsed).
Concatenate the list of stuff that we are keeping around and also the text corresponding to these structures (that we parsed).
Add to this list.
Concatenate two compatible lists. This appends or prepends the new list to the end of this list.
Encode a list of sip headers. Headers are returned in cannonical form.
Return a list of encoded strings (one for each sipheader).
Get the first element of this list.
Get the last element of this list.
Get the class for the headers of this list.
Empty check
Get an initialized iterator for my imbedded list
Get the imbedded linked list.
Get the list iterator for a given position.
Remove the first element of this list.
Remove the last element of this list.
Remove a sip header from this list of sip headers.
Set the root class for all objects inserted into my list (for assertion check)
convert to a string representation (for printing).
convert to a string representation
Array conversion.
index of an element.
insert at a location.
Template match against a template. null field in template indicates wild card match.
make a clone of this header list.
Get the number of headers in the list.
Return true if this is a header list (overrides the base class method which returns false).
Encode the body of this header (the stuff that follows headerName). A.K.A headerValue. This will not give a reasonable result for WWW-Authenticate, Authorization, Proxy-Authenticate and Proxy-Authorization and hence this is protected.
Get the object at the specified location.
Return the index of a given object.
Return the iterator to the imbedded list.
Get the last index of the given object.
Remove the given object.
Remove the object at a given index.
Remove all the elements.
Get a sublist of the list.
Set a SIPHeader at a particular position in the list.
Default constructor
For v 1.1 backwards compatibility.
default Constructor
Debug function
Encode the header into the given StringBuffer. Default implemation calls encode().
An introspection based predicate matching using a template object. Allows for partial match of two protocl Objects. You can set a generalized matcher (using regular expressions for example) by implementing the Match interface and registering it with the template. has to be of the same type (class). Primitive types and non-sip fields that are non null are matched for equality. Null in any field  matches anything. Some book-keeping fields are ignored when making the comparison.
Construct a SIPObject List given a list name.
Construct an empty SIPObjectList.
Do a merge of the GenericObjects contained in this list with the GenericObjects in the mergeList. Note that this does an inplace modification of the given list. This does an object by object merge of the given objects. an object by object merge with. Note that no new objects are added to this list.
Append a given list to the end of this list.
Append or prepend a given list to this list.
Get the first object of this list.
Get the next object of this list (assumes that first() has been called prior to calling this method.)
Convert to a string given an indentation(for pretty printing). This is useful for debugging the system in lieu of a debugger.
Match with a template. Match only the response class if the last two digits of the match templates are 0's
set the flag on a match template. If this set to true, then the whole status code is matched (default behavior) else only the class of the response is matched.
Default Constructor
Encode into a canonical form.
Default Constructor.
Generate the canonical form.
Sets the subject value of the SubjectHeader to the supplied string subject value. unexpectedly while parsing the subject value.
Gets the subject value of SubjectHeader
Creates a new instance of SubscriptionState
Sets the relative expires value of the SubscriptionStateHeader. The expires value MUST be greater than zero and MUST be less than 2**31.
Gets the expires value of the SubscriptionStateHeader. This expires value is relative time.
Sets the retry after value of the SubscriptionStateHeader. The retry after value MUST be greater than zero and MUST be less than 2**31.
Gets the retry after value of the SubscriptionStateHeader. This retry after value is relative time.
Gets the reason code of SubscriptionStateHeader. is available.
Sets the reason code value of the SubscriptionStateHeader. unexpectedly while parsing the reason code.
Gets the state of SubscriptionStateHeader.
Sets the state value of the SubscriptionStateHeader. unexpectedly while parsing the state.
Just the encoded body of the header.
default constructor
Return canonical form of the header.
Default Constructor
Default Constructor
Return canonical form of the header.
return true if delay exists
remove the Delay field
Sets the new delay value of the TimestampHeader to the delay paramter passed to this method
default Constructor.
Generate a TO header from a FROM header
Set the tag member. This should remain empty for the initial request in a dialog.
Default Constructor.
Return a canonical value.
get the option tag field
Set the option member
Default Constructor
Return canonical form. pmusgrave - put a space between products (preserves format of header)
Default constructor
get the Protocol Version
Accessor for the sentProtocol field.
Accessor for the sentBy field
Get the host, port and transport as a Hop. This is useful for the stack to avoid duplication of code.
Accessor for the parameters field
Accessor for the comment field.
port of the Via Header.
comment of the Via Header.
remove the comment field.
set the Protocol Version
set the Host of the Via Header
Set the sentProtocol member
Set the sentBy member
Set the comment member
Set the host part of this ViaHeader to the newly supplied <code>host</code> parameter. unexpectedly while parsing the host value.
Returns the host part of this ViaHeader.
Set the port part of this ViaHeader to the newly supplied <code>port</code> parameter.
Set the RPort flag parameter
Returns the port part of this ViaHeader.
Return the rport parameter.
Returns the value of the transport parameter.
Sets the value of the transport. This parameter specifies which transport protocol to use for sending requests and responses to this entity. The following values are defined: "udp", "tcp", "sctp", "tls", but other values may be used also. unexpectedly while parsing the transport value.
Returns the value of the protocol used.
Sets the value of the protocol parameter. This parameter specifies which protocol is used, for example "SIP/2.0". unexpectedly while parsing the protocol value.
Returns the value of the ttl parameter, or -1 if this is not set.
Sets the value of the ttl parameter. The ttl parameter specifies the time-to-live value when packets are sent using UDP multicast. greater than 255, excluding -1 the default not set value.
Returns the value of the <code>maddr</code> parameter, or null if this is not set.
Sets the value of the <code>maddr</code> parameter of this ViaHeader. The maddr parameter indicates the server address to be contacted for this user, overriding any address derived from the host field. unexpectedly while parsing the mAddr value.
Gets the received paramater of the ViaHeader. Returns null if received does not exist.
Sets the received parameter of ViaHeader. unexpectedly while parsing the received value.
Gets the branch paramater of the ViaHeader. Returns null if branch does not exist.
Sets the branch parameter of the ViaHeader to the newly supplied branch value. unexpectedly while parsing the branch value.
Default Constructor.
Encode the body of the header (return the stuff following name:).
Gets code of WarningHeader
Gets agent host of WarningHeader
Gets text of WarningHeader
Sets code of WarningHeader
Sets host of WarningHeader
Sets text of WarningHeader
Default Constructor.
return true if this has an associated list object.
Return true if this has an associated list object.
Get the associated list class.
This is for testing -- allows you to generate invalid requests
Creates a new Request message of type specified by the method paramater, containing the URI of the Request, the mandatory headers of the message with a body in the form of a Java object and the body content type.
Creates a new Request message of type specified by the method paramater, containing the URI of the Request, the mandatory headers of the message with a body in the form of a byte array and body content type.
Creates a new Request message of type specified by the method paramater, containing the URI of the Request, the mandatory headers of the message. This new Request does not contain a body.
Creates a new Response message of type specified by the statusCode paramater, containing the mandatory headers of the message with a body in the form of a Java object and the body content type.
Creates a new Response message of type specified by the statusCode paramater, containing the mandatory headers of the message with a body in the form of a byte array and the body content type.
Creates a new Response message of type specified by the statusCode paramater, containing the mandatory headers of the message. This new Response does not contain a body.
Creates a new Response message of type specified by the statusCode paramater, based on a specific Request with a new body in the form of a Java object and the body content type.
Creates a new Response message of type specified by the statusCode paramater, based on a specific Request with a new body in the form of a byte array and the body content type.
Creates a new Response message of type specified by the statusCode paramater, based on a specific Request message. This new Response does not contain a body.
Create a request from a string. Conveniance method for UACs that want to create an outgoing request from a string. Only the headers of the request should be included in the String that is supplied to this method.
Create a response from a string
Set the common UserAgent header for all requests created from this message factory. This header is applied to all Messages created from this Factory object except those that take String for an argument and create Message from the given String.
Set the common Server header for all responses created from this message factory. This header is applied to all Messages created from this Factory object except those that take String for an argument and create Message from the given String.
Get the default common UserAgentHeader.
Get the default common server header.
Set default charset used for encoding String content.
Formatter with a given starting indentation (for nested structs).
Creates a default content list.
unpack a multipart mime packet and return a list of content packets.
Return true if the header belongs only in a Request.
Return true if the header belongs only in a response.
Get the headers as a linked list of encoded Strings
Encode only the message and exclude the contents (for debugging);
Template match for SIP messages. The matchObj is a SIPMessage template to match against. This method allows you to do pattern matching with incoming SIP messages. Null matches wild card.
Merge a request with a template
Encode this message as a string. This is more efficient when the payload is a string (rather than a binary array of bytes). If the payload cannot be encoded as a UTF-8 string then it is simply ignored (will not appear in the encoded message).
Encode the message as a byte array. Use this when the message payload is a binary byte array.
clone this message (create a new deep physical copy). All headers in the message are cloned. You can modify the cloned copy without affecting the original. The content is handled as follows: If the content is a String, or a byte array, a new copy of the content is allocated and copied over. If the content is an Object that supports the clone method, then the clone method is invoked and the cloned content is the new content. Otherwise, the content of the new message is set equal to the old one.
Get the string representation of this header (for pretty printing the generated structure).
Constructor: Initializes lists and list headers. All the headers for which there can be multiple occurances in a message are derived from the SIPHeaderListClass. All singleton headers are derived from SIPHeader class.
Attach a header and die if you get a duplicate header exception.
Attach a header (replacing the original header).
Set a header from a linked list of headers.
Attach a header to the end of the existing headers in this SIPMessage structure. This is equivalent to the attachHeader(SIPHeader,replaceflag,false); which is the normal way in which headers are attached. This was added in support of JAIN-SIP.
Attach the header to the SIP Message structure at a specified position in its list of headers.
Remove a header given its name. If multiple headers of a given name are present then the top flag determines which end to remove headers from.
Remove all headers given its name.
Generate (compute) a transaction ID for this SIP message.
Override the hashcode method ( see issue # 55 ) Note that if you try to use this method before you assemble a valid request, you will get a constant ( -1 ). Beware of placing any half formed requests in a table.
Return true if this message has a body.
Return an iterator for the list of headers in this message.
Get the first header of the given name.
Get the contentType header (null if one does not exist).
Get the contentLength header.
Get the from header.
Get the ErrorInfo list of headers (null if one does not exist).
Get the Contact list of headers (null if one does not exist).
Get the contact header ( the first contact header) which is all we need for the most part.
Get the Via list of headers (null if one does not exist).
Set A list of via headers.
Set the header given a list of headers.
Get the topmost via header.
Get the CSeq list of header (null if one does not exist).
Get the Authorization header (null if one does not exist).
Get the MaxForwards header (null if one does not exist).
Set the max forwards header.
Get the Route List of headers (null if one does not exist).
Get the CallID header (null if one does not exist)
Set the call id header.
Get the CallID header (null if one does not exist)
Get the RecordRoute header list (null if one does not exist).
Get the To header (null if one does not exist).
Get the ContentLength header (null if one does not exist).
Get the message body as a string. If the message contains a content type header with a specified charset, and if the payload has been read as a byte array, then it is returned encoded into this charset.
Get the message content as an array of bytes. If the payload has been read as a String then it is decoded using the charset specified in the content type header if it exists. Otherwise, it is encoded using the default encoding which is UTF-8.
Set the message content given type and subtype.
Set the message content after converting the given object to a String.
Get the content (body) of the message.
Set the message content for a given type and subtype.
Set the message content for this message.
Set the message content as an array of bytes.
Method to set the content - called by the parser
Compute and set the Content-length header based on the given content object.
Remove the message content if it exists.
Get a header of the given name as a string. This concatenates the headers of a given type as a comma separted list. This is useful for formatting and printing headers.
Return true if the SIPMessage has a header of the given name.
Return true if the message has a From header tag.
Return true if the message has a To header tag.
Return the from tag.
Set the From Tag.
Set the to tag.
Return the to tag.
Add a SIP header.
Add a header to the unparsed list of headers.
Get a list containing the unrecognized headers.
Get the header names.
get content disposition header or null if no such header exists.
get the content encoding header.
Get the contentLanguage header.
Get the exipres header.
Set the expiresHeader
Set the content disposition header.
Set the content length header.
Set the size of all the headers. This is for book keeping. Called by the parser.
Set the CSeq header.
Set the application data pointer. This method is not used the stack. It is provided as a convenient way of storing book-keeping data for applications. Note that null clears the application data pointer (releases it).
Get the application data associated with this message.
Get the multipart MIME content
Returns the charset to use for encoding/decoding the body of this message
Return true if this is a null request (i.e. does not have a request line ).
Set a flag to indiate this is a special message ( encoded with CRLFCRLF ).
Set to standard constants to speed up processing. this makes equals comparisons run much faster in the stack because then it is just identity comparision. Character by char comparison is not required. The method returns the String CONSTANT corresponding to the String name.
Get the Request Line of the SIPRequest.
Set the request line of the SIP Request.
Convert to a formatted string for pretty printing. Note that the encode method converts this into a sip message that is suitable for transmission. Note hack here if you want to convert the nice curly brackets into some grotesque XML tag.
Check header for constraints. (1) Invite options and bye requests can only have SIP URIs in the contact headers. (2) Request must have cseq, to and from and via headers. (3) Method in request URI must match that in CSEQ.
Set the default values in the request URI if necessary.
Patch up the request line as necessary.
A conveniance function to access the Request URI.
Sets the RequestURI of Request. The Request-URI is a SIP or SIPS URI or a general URI. It indicates the user or service to which this request is being addressed. SIP elements MAY support Request-URIs with schemes other than "sip" and "sips", for example the "tel" URI scheme. SIP elements MAY translate non-SIP URIs using any mechanism at their disposal, resulting in SIP URI, SIPS URI, or some other scheme.
Set the method.
Get the method from the request line.
Encode the SIP Request as a string.
Encode only the headers and not the content.
ALias for encode above.
Make a clone (deep copy) of this object. You can use this if you want to modify a request while preserving the original
Get the message as a linked list of strings. Use this if you want to iterate through the message.
Match with a template. You can use this if you want to match incoming messages with a pattern and do something when you find a match. This is useful for building filters/pattern matching responders etc.
Get a dialog identifier. Generates a string that can be used as a dialog identifier.
Get a dialog id given the remote tag.
Encode this into a byte array. This is used when the body has been set as a binary array and you want to encode the body as a byte array for transmission.
Creates a default SIPResponse message for this request. Note You must add the necessary tags to outgoing responses if need be. For efficiency, this method does not clone the incoming request. If you want to modify the outgoing response, be sure to clone the incoming request as the headers are shared and any modification to the headers of the outgoing response will result in a modification of the incoming request. Tag fields are just copied from the incoming request. Contact headers are removed from the incoming request. Added by Jeff Keyser.
Creates a default SIPResponse message for this request. Note You must add the necessary tags to outgoing responses if need be. For efficiency, this method does not clone the incoming request. If you want to modify the outgoing response, be sure to clone the incoming request as the headers are shared and any modification to the headers of the outgoing response will result in a modification of the incoming request. Tag fields are just copied from the incoming request. Contact headers are removed from the incoming request. Added by Jeff Keyser. Route headers are not added to the response.
Helper method for createResponse, to avoid copying Record-Route unless needed
Creates a default SIPResquest message that would cancel this request. Note that tag assignment and removal of is left to the caller (we use whatever tags are present in the original request).
Creates a default ACK SIPRequest message for this original request. Note that the defaultACK SIPRequest does not include the content of the original SIPRequest. If responseToHeader is null then the toHeader of this request is used to construct the ACK. Note that tag fields are just copied from the original SIP Request. Added by Jeff Keyser.
Creates an ACK for non-2xx responses according to RFC3261 17.1.1.3
Create a new default SIPRequest from the original request. Warning: the newly created SIPRequest, shares the headers of this request but we generate any new headers that we need to modify so the original request is umodified. However, if you modify the shared headers after this request is created, then the newly created request will also be modified. If you want to modify the original request without affecting the returned Request make sure you clone it before calling this method. Only required headers are copied. <ul> <li> Contact headers are not included in the newly created request. Setting the appropriate sequence number is the responsibility of the caller. </li> <li> RouteList is not copied for ACK and CANCEL </li> <li> Note that we DO NOT copy the body of the argument into the returned header. We do not copy the content type header from the original request either. These have to be added seperately and the content length has to be correctly set if necessary the content length is set to 0 in the returned header. </li> <li>Contact List is not copied from the original request.</li> <li>RecordRoute List is not included from original request. </li> <li>Via header is not included from the original request. </li> </ul>
Create a BYE request from this request.
Create an ACK request from this request. This is suitable for generating an ACK for an INVITE client transaction.
Get the host from the topmost via header.
Get the port from the topmost via header.
Get the first line encoded.
Set the sip version.
Get the SIP version.
Book keeping method to return the current tx for the request if one exists.
Book keeping field to set the current tx for the request.
Book keeping method to get the messasge channel for the request.
Set the message channel for the request ( bookkeeping field ).
Generates an Id for checking potentially merged requests.
set the status code.
Get the status line of the response.
Get the staus code (conveniance function).
Set the reason phrase.
Get the reason phrase.
Return true if the response is a final response.
Is this a final response?
Set the status line field.
Print formatting function. Indent and parenthesize for pretty printing. Note -- use the encode method for formatting the message. Hack here to XMLize.
Check the response structure. Must have from, to CSEQ and VIA headers.
Encode the message except for the body.
Get this message as a list of encoded strings. the message.
Make a clone (deep copy) of this object.
Match with a template. in any position in the template object matches wildcard)
Encode this into a byte array. This is used when the body has been set as a binary array and you want to encode the body as a byte array for transmission. array.
Get a dialog identifier. Generates a string that can be used as a dialog identifier. and set to false if this is the UAC
Sets the Via branch for CANCEL or ACK requests
Get the encoded first line.
Generate a request from a response.
Creates new CallIDParser
parse the String message
protected constructor.
Parse the header.
Creates a new instance of ReferencesParser
Creates new ToParser
Creates new CallIDParser
protected constructor.
parse the String message and generate the RecordRoute List Object
"The URN consists of a hierarchical service identifier or application identifier, with a sequence of labels separated by periods.The left-most label is the most significant one and is called 'top-level service identifier', while names to the right are called 'sub-services' or 'sub-applications'. For any given service identifier, labels can be removed right-to-left and the resulting URN is still valid, referring a more generic service, with the exception of the top-level service identifier and possibly the first sub-service or sub-application identifier. Labels cannot be removed beyond a defined basic service, for example, the label w.x may define a service, but the label w may only define an assignment authority for assigning subsequent values and not define a service in its own right.  In other words, if a service identifier 'w.x.y.z' exists, the URNs 'w.x' and 'w.x.y' are also valid service identifiers, but w may not be a valid service identifier if it merely defines who is responsible" TODO: PLEASE VALIDATE MY UNDERSTANDING OF THE ABOVE TEXT :) Sub-service and Application identifiers are not maintained by IANA and are organization/application dependent (Section 8.2). So we cannot gurantee what lies beyond the first sub-service or sub-application identifier. It should be the responsibility of the application to make sense of the entire URN holistically. We can only check for the standardized part as per the ABNF.
Creates a new instance of Accept Parser
parse the Accept  String header
Creates a new instance of AlertInfo Parser
parse the AlertInfo  String header
Creates a new instance of AllowEventsParser
parse the AllowEvents String header
Creates a new instance of AllowParser
parse the Allow String header
Creates a new instance of AuthenticationInfoParser
parse the AuthenticationInfo String header
Creates new CallIDParser
Creates a new instance of CallInfoParser
parse the CallInfo String header
Get the parameter of the challenge string
parser the String message.
Creates a new instance of ContentDispositionParser
parse the ContentDispositionHeader String header
Creates a new instance of ContentEncodingParser
parse the ContentEncodingHeader String header
Creates a new instance of ContentLanguageParser
parse the ContentLanguageHeader String header
Parse method.
Creates a new instance of ErrorInfoParser
parse the ErrorInfo String header
Creates a new instance of EventParser
protected constructor.
Parse the weekday field
parse and return a date field.
Set the time field. This has the format hour:minute:second
Creates new HeaderParser
Parse the SIP header from the buffer and return a parsed structure.
Parse the header name until the colon  and chew WS after that.
Creates a new instance of InReplyToParser
get the header name of the line
get the header value of the line
Creates a new instance of MimeVersionParser
Creates a new instance of MinExpiresParser
Creates a new instance of OrganizationParser
parse the String header
parses a method. Consumes if a valid method has been found.
Verifies that a given string matches the 'token' production in RFC3261
create a parser for a header. This is the parser factory.
default constructor.
Constructor when we are given a message listener and an input stream (could be a TCP connection or a file)
This is the constructor for the pipelined parser.
Start reading and processing input.
Create a new pipelined parser from an existing one.
Add a class that implements a SIPMessageListener interface whose methods get called * on successful parse and error conditons.
read a line of input (I cannot use buffered reader because we may need to switch encodings mid-stream!
This is input reading thread for the pipelined parser. You feed it input through the input stream (see the constructor) and it calls back an event listener interface for message processing or error. It cleans up the input - dealing with things like line continuation
Creates a new instance of PriorityParser
Creates a new instance of ProxyRequireParser
Creates a new instance of RAckParser
Creates a new instance of ReasonParser
Creates new ToParser
Creates a new instance of ReplyToParser
Cosntructor param lexer the lexer to use to parse the header
parse the String message and generate the ReplyTo List Object
Creates a new instance of RequireParser
Creates a new instance of RetryAfterParser
parse the String message and generate the Route List Object
Creates a new instance of RSeqParser
Constructor param lexer the lexer to use to parse the header
Creates a new instance of ServerParser
parse the String server
Creates a new instance of PriorityParser
Creates a new instance of PriorityParser
Constructor (given a parse exception handler).
Add a handler for header parsing errors.
Parse a buffer containing a single SIP Message where the body is an array of un-interpreted bytes. This is intended for parsing the message from a memory buffer when the buffer. Incorporates a bug fix for a bug that was noted by Will Sullin of Callcast
Parse a buffer containing one or more SIP Messages and return an array of SIPMessage parsed structures.
Parse an address (nameaddr or address spec) and return and address structure.
Parse a host name and return a parsed structure.
Parse a telephone number return a parsed structure.
Parse a SIP url from a string and return a URI structure for it.
Parse a uri from a string and return a URI structure for it.
Parse an individual SIP message header from a string.
Parse the SIP Request Line
Parse the SIP Response message status line
Test code.
Creates a new instance of SubjectParser
Creates a new instance of SubscriptionStateParser
Creates a new instance of SupportedParser
Creates a new instance of TimeStampParser
Creates new ToParser
Creates a new instance of UnsupportedParser
public tag added - issued by Miguel Freitas
Missing '=' bug in character set - discovered by interop testing at SIPIT 13 by Bob Johnson and Scott Holben. change . to ; by Bruno Konik
Name or value of a parameter.
Parse and return a structure for a generic URL. Note that non SIP URLs are just stored as a string (not parsed).
Parser for the base phone number.
Parser for the local phone #.
Parser for telephone subscriber.
Parses the 'phone-context' parameter in tel: URLs
Parse and return a structure for a Tel URL.
Parse and return a structure for a SIP URL.
Get a name value for a given query header (ie one that comes after the ?).
Scan forward until you hit a terminating character for a URL. We do not handle non sip urls in this implementation. the next delimiter).
Default parse method. This method just calls uriReference.
quick test routine for debugging type assignment
parse the message. Note that we have losened up on the parsing quite a bit because user agents tend to be very bad about specifying the user agent according to RFC.
a parser for the essential part of the via header.
Overrides the superclass nameValue parser because we have to tolerate IPV6 addresses in the received parameter.
Return addresses for default proxy to forward the request to. The list is organized in the following priority. If the requestURI refers directly to a host, the host and port information are extracted from it and made the next hop on the list. If the default route has been specified, then it is used to construct the next element of the list. <code> RouteHeader firstRoute = (RouteHeader) req.getHeader( RouteHeader.NAME ); if (firstRoute!=null) { URI uri = firstRoute.getAddress().getURI(); } else { } } else if (outboundProxy!=null) { // use outbound proxy for nextHop } else if ( req.getRequestURI().isSipURI() ) { // use request URI for nextHop </code>
Performs strict router fix according to RFC3261 section 16.6 step 6 pre: top route header in request has no 'lr' parameter in URI post: request-URI added as last route header, new req-URI = top-route-URI
Utility method to create a hop from a SIP URI
Get the default hop.
Debugging println.
Create new hop given host, port and transport.
Creates new Hop
A private function to write things out. This needs to be synchronized as writes can occur from multiple threads. We write in chunks to allow the other side to synchronize for large sized writes.
Creates and binds, if necessary, a socket connected to the specified destination address and port and then returns its local address.
Send an array of bytes.
Close all the cached connections.
Send the message (after it has been formatted)
Get port of this message channel.
Send a formatted message to the specified target.
Send a message given SIP message.
Convenience function to get the raw IP source address of a SIP message as a String.
generate a key given the inet address port and transport.
Generate a key given host and port.
Get the hostport structure of this message channel.
Get the peer host and port.
Get the Via header for this transport. Note that this does not set a branch identifier.
Get the via header host:port structure. This is extracted from the topmost via header of the request.
Log a message sent to an address and port via the default interface.
Log a response received at this message channel. This is used for processing incoming responses to a client transaction.
Creates a response to a bad request (ie one that causes a ParseException)
Copies a header from a request Note: some limitations here: does not work for short forms of headers, or continuations; problems when header names appear in other parts of the request
Copies all via headers from a request Note: some limitations here: does not work for short forms of headers, or continuations
Get the message processor.
Initializes this MessageProcessor. Needed for extensions that use classloading
Get the transport string.
Get the port identifier.
Get the Via header to assign for this message processor. The topmost via header of the outoging messages use this.
Get the saved IP Address.
Set the sentby string. This is used for stamping outgoing messages sent from this listening point.
Get the sentby string.
Create a message channel for the specified host/port.
Get the defalt port for the message processor.
Global check for whether to log or not. To minimize the time return false here.
Set the log file name
return the name of the log file.
Log a message into the log file.
Log a message into the log directory.
Log a message into the log directory. Time stamp associated with the message is the current time.
Log an exception stack trace.
Set the trace level for the stack. <li> 16 -- trace messages only </li> <li> 32 Full tracing including debug messages. </li> </ul>
Get the trace level for the stack.
Set aux information. Auxiliary information may be associated with the log file. This is useful for remote logs.
Creates a new client transaction.
Sets the real ResponseInterface this transaction encapsulates.
Returns this transaction.
Deterines if the message is a part of this transaction.
Send a request message through this transaction and onto the client.
Process a new response message through this transaction. If necessary, this message will also be passed onto the TU.
Implements the state machine for invite client transactions. <pre> </pre>
Implements the state machine for invite client transactions. <pre> </pre>
Called by the transaction stack when a retransmission timer fires.
Called by the transaction stack when a timeout timer fires.
Creates an ACK for an error response, according to RFC3261 section 17.1.1.3 Note that this is different from an ACK for 2xx
Set the port of the recipient.
Set the port of the recipient.
Get the port of the recipient.
Get the host of the recipient.
get the via header for an outgoing request.
This is called by the stack after a non-invite client transaction goes to completed state.
Sets a timeout after which the connection is closed (provided the server does not use the connection for outgoing requests in this time period) and calls the superclass to set state.
Start the timer task.
Terminate a transaction. This marks the tx as terminated The tx scanner will run and remove the tx. (non-Javadoc)
Check if the From tag of the response matches the from tag of the original message. A Response with a tag mismatch should be dropped if a Dialog has been created for the original request.
Set the next hop ( if it has already been computed).
Reeturn the previously computed next hop (avoid computing it twice).
Set this flag if you want your Listener to get Timeout.RETRANSMIT notifications each time a retransmission occurs.
Constructors. Protected Dialog constructor.
Constructor given the first transaction.
Constructor given a transaction and a response.
create a sip dialog with a response ( no tx)
Private methods A debugging print routine.
Return true if this is a client dialog.
Raise an io exception for asyncrhonous retransmission of responses
Raise a dialog timeout if an ACK has not been sent or received
Set the remote party for this Dialog.
Add a route list extracted from a record route list. If this is a server dialog then we assume that the record are added to the route list IN order. If this is a client dialog then we assume that the record route headers give us the route list to add in reverse order.
Add a route list extacted from the contact list of the incoming message.
Extract the route information from this SIP Message and add the relevant information to the route set.
Get a cloned copy of route list for the Dialog.
Sends ACK Request to the remote party of this Dialogue.
Set the stack address. Prevent us from routing messages to ourselves.
Get the stack .
Return True if this dialog is terminated on BYE.
Mark that the dialog has seen an ACK.
Return true if a terminated event was delivered to the application as a result of the dialog termination.
Adds a new event listener to this dialog.
Removed an event listener from this dialog.
Updates the next consumable seqno.
Return true if this request can be consumed by the dialog.
This method is called when a forked dialog is created from the client side. It starts a timer task. If the timer task expires before an ACK is sent then the dialog is cancelled (i.e. garbage collected ).
Set the state for this dialog.
Debugging print for the dialog.
Return true if the dialog has already seen the ack.
Get the last ACK for this transaction.
Return true if ACK was sent ( for client tx ). For server tx, this is a NO-OP ( we dont send ACK).
Get the transaction that created this dialog.
Gets the route set for the dialog. When acting as an User Agent Server the route set MUST be set to the list of URIs in the Record-Route header field from the request, taken in order and preserving all URI parameters. When acting as an User Agent Client the route set MUST be set to the list of URIs in the Record-Route header field from the response, taken in reverse order and preserving all URI parameters. If no Record-Route header field is present in the request or response, the route set MUST be set to the empty set. This route set, even if empty, overrides any pre-existing route set for future requests in this dialog. <p> Requests within a dialog MAY contain Record-Route and Contact header fields. However, these requests do not cause the dialog's route set to be modified. <p> The User Agent Client uses the remote target and route set to build the Request-URI and Route header field of the request.
Add a Route list extracted from a SIPRequest to this Dialog.
Set the dialog identifier.
Creates a new dialog based on a received NOTIFY. The dialog state is initialized appropriately. The NOTIFY differs in the From tag Made this a separate method to clearly distinguish what's happening here - this is a non-trivial case
Return true if is server.
Return true if this is a re-establishment of the dialog.
Get the id for this dialog.
Add a transaction record to the dialog.
Set the remote tag.
Get the last transaction from the dialog.
Get the INVITE transaction (null if no invite transaction).
Set the local sequece number for the dialog (defaults to 1 when the dialog is created).
Set the remote sequence number for the dialog.
Increment the local CSeq # for the dialog. This is useful for if you want to create a hole in the sequence number i.e. route a request outside the dialog and then resume within the dialog.
Get the remote sequence number (for cseq assignment of outgoing requests within this dialog).
Get the local sequence number (for cseq assignment of outgoing requests within this dialog).
Get the sequence number for the request that origianlly created the Dialog.
Set local tag for the transaction.
set the call id header for this dialog.
Returns the Address identifying the remote party. This is the value of the To header of locally initiated requests in this dialogue when acting as an User Agent Client. <p> This is the value of the From header of recieved responses in this dialogue when acting as an User Agent Server.
Returns true if this Dialog is secure i.e. if the request arrived over TLS, and the Request-URI contained a SIPS URI, the "secure" flag is set to TRUE.
The method that actually does the work of creating a request.
Return yes if the last response is to be retransmitted.
Resend the last ack.
Get the method of the request/response that resulted in the creation of the Dialog.
Start the dialog timer.
Stop the dialog timer. This is called when the dialog is terminated.
(non-Javadoc) Retransmissions of the reliable provisional response cease when a matching PRACK is received by the UA core. PRACK is like any other request within a dialog, and the UAS core processes it according to the procedures of Sections 8.2 and 12.2.2 of RFC 3261. A matching PRACK is defined as one within the same dialog as the response, and whose method, CSeq-num, and response-num in the RAck header field match, respectively, the method from the CSeq, the sequence number from the CSeq, and the sequence number from the RSeq of the reliable provisional response.
(non-Javadoc) The UAC core MUST generate an ACK request for each 2xx received from the transaction layer. The header fields of the ACK are constructed in the same way as for any request sent within a dialog (see Section 12) with the exception of the CSeq and the header fields related to authentication. The sequence number of the CSeq header field MUST be the same as the INVITE being acknowledged, but the CSeq method MUST be ACK. The ACK MUST contain the same credentials as the INVITE. If the 2xx contains an offer (based on the rules above), the ACK MUST carry an answer in its body. If the offer in the 2xx response is not acceptable, the UAC core MUST generate a valid answer in the ACK and then send a BYE immediately. Note that for the case of forked requests, you can create multiple outgoing invites each with a different cseq and hence you need to supply the invite.
Get the provider for this Dialog. SPEC_REVISION
Check the tags of the response against the tags of the Dialog. Return true if the respnse matches the tags of the dialog. We do this check wehn sending out a response.
Set the last response for this dialog. This method is called for updating the dialog state when a response is either sent or received from within a Dialog.
Start the retransmit timer.
Do taget refresh dialog state updates. RFC 3261: Requests within a dialog MAY contain Record-Route and Contact header fields. However, these requests do not cause the dialog's route set to be modified, although they may modify the remote target URI. Specifically, requests that are not target refresh requests do not modify the dialog's remote target URI, and requests that are target refresh requests do. For dialogs that have been established with an INVITE, the only target refresh request defined is re-INVITE (see Section 14). Other extensions may define different target refresh requests for dialogs established in other ways.
Do the processing necessary for the PRACK
Set the "assigned" flag to true. We do this when inserting the dialog into the dialog table of the stack.
Return true if the dialog has already been mapped to a transaction.
Get the contact header that the owner of this dialog assigned. Subsequent Requests are considered to belong to the dialog if the dialog identifier matches and the contact header matches the ip address and port on which the request is received.
Do the necessary processing to handle an ACK directed at this Dialog.
Release the semaphore for ACK processing so the next re-INVITE may proceed.
Creates a dialog error event.
Returns the ID of the error.
Send a response.
Creates a new server transaction.
Sets the real RequestInterface this transaction encapsulates.
Returns this transaction.
Determines if the message is a part of this transaction.
Send out a trying response (only happens when the transaction is mapped). Otherwise the transaction is not known to the stack.
Return true if the transaction is known to stack.
Process a new request message through this transaction. If necessary, this message will also be passed onto the TU.
Send a response message through this transactionand onto the client. The response drives the state machine.
Called by the transaction stack when a retransmission timer fires. This retransmits the last response when the retransmission filter is enabled.
Get the last response.
Set the original request.
Return the book-keeping information that we actually use.
Return the current transaction state according to the RFC 3261 transaction state machine. Invite transactions do not have a trying state. We just use this as a pseudo state for processing requests.
Cancel the retransmit timer for the provisional response task.
Disable retransmission Alerts and cancel associated timers.
This is book-keeping for retransmission filter management.
This is book-keeping for retransmission filter management.
The INVITE Server Transaction corresponding to a CANCEL Server Transaction.
TODO -- this method has to be added to the api.
/ The run() method is final to ensure that all subclasses inherit the exception handling.
Transaction constructor.
Sets the request message that this transaction handles.
Gets the request being handled by this transaction.
Get the original request but cast to a Request structure.
Returns a flag stating whether this transaction is for an INVITE request or not.
Return true if the transaction corresponds to a CANCEL message.
Return a flag that states if this is a BYE transaction.
Returns the message channel used for transmitting/receiving messages for this transaction. Made public in support of JAIN dual transaction model.
Sets the Via header branch parameter used to identify this transaction.
Gets the current setting for the branch parameter of this transaction.
Get the method of the request used to create this transaction.
Get the Sequence number of the request used to create the transaction.
Changes the state of this transaction.
Gets the current state of this transaction.
Enables retransmission timer events for this transaction to begin in one tick.
Enables retransmission timer events for this transaction to begin after the number of ticks passed to this routine.
Turns off retransmission events for this transaction.
Enables a timeout event to occur for this transaction after the number of ticks passed to this method.
Disabled the timeout timer.
Fired after each timer tick. Checks the retransmission and timeout timers of this transaction, and fired these events if necessary.
Tests if this transaction has terminated.
@@@ hagai
Returns the Via header for this channel. Gets the Via header of the underlying message channel, and adds a branch parameter to it for this transaction.
Process the message through the transaction and sends it to the SIP peer.
Parse the byte array as a message, process it through the transaction, and send it to the SIP peer. This is just a placeholder method -- calling it will result in an IO exception.
Adds a new event listener to this transaction.
Removed an event listener from this transaction.
Creates a SIPTransactionErrorEvent and sends it to all of the listeners of this transaction. This method also flags the transaction as terminated.
A shortcut way of telling if we are a server transaction.
Returns the current value of the retransmit timer in milliseconds used to retransmit messages over unreliable transports.
Get the host to assign for an outgoing Request via header.
Get the last response. This is used internally by the implementation. Dont rely on it.
Get the JAIN interface response
Get the transaction Id.
Hashcode method for fast hashtable lookup.
Get the port to assign for the via header of an outgoing message.
A method that can be used to test if an incoming request belongs to this transction. This does not take the transaction state into account when doing the check otherwise it is identical to isMessagePartOfTransaction. This is useful for checking if a CANCEL belongs to this transaction.
Sets the value of the retransmit timer to the newly supplied timer value. The retransmit timer is expressed in milliseconds and its default value is 500ms. This method allows the application to change the transaction retransmit behavior for different networks. Take the gateway proxy as an example. The internal intranet is likely to be reatively uncongested and the endpoints will be relatively close. The external network is the general Internet. This functionality allows different retransmit times for either side.
Close the encapsulated channel.
Set the application data pointer. This is un-interpreted by the stack. This is provided as a conveniant way of keeping book-keeping data for applications. Note that null clears the application data pointer (releases it).
Get the application data associated with this transaction.
Set the encapsuated channel. The peer inet address and port are set equal to the message channel.
Return the SipProvider for which the transaction is assigned.
Raise an IO Exception event - this is used for reporting asynchronous IO Exceptions that are attributable to this transaction.
A given tx can process only a single outstanding event at a time. This semaphore gaurds re-entrancy to the transaction.
Release the transaction semaphore.
Set true to pass the request up to the listener. False otherwise.
Set the passToListener flag to true.
Flag to test if the terminated event is delivered.
Creates a transaction error event.
/ Constructor
Default constructor.
Re Initialize the stack instance.
Creates and binds, if necessary, a socket connected to the specified destination address and port and then returns its local address. with. (null for the "any" address). random port). the specified destination address and port.
For debugging -- allows you to disable logging or enable logging selectively.
Globally enable message logging ( for debugging)
Print the dialog table.
Retrieve a transaction from our table of transactions with pending retransmission alerts.
Return true if extension is supported.
Add an extension method.
Put a dialog into the dialog table.
Create a dialog and add this transaction to it.
Create a Dialog given a client tx and response.
Create a Dialog given a sip provider and response.
Remove the dialog from the dialog table.
Return the dialog for a given dialog ID. If compatibility is enabled then we do not assume the presence of tags and hence need to add a flag to indicate whether this is a server or client transaction.
Remove the dialog given its dialog id. This is used for dialog id re-assignment only.
Find a matching client SUBSCRIBE to the incoming notify. NOTIFY requests are matched to such SUBSCRIBE requests if they contain the same "Call-ID", a "To" header "tag" parameter which matches the "From" header "tag" parameter of the SUBSCRIBE, and the same "Event" header field. Rules for comparisons of the "Event" headers are described in section 7.2.1. If a matching NOTIFY request contains a "Subscription-State" of "active" or "pending", it matching response, as described above).
Add entry to "Transaction Pending ACK" table.
Get entry in the server transaction pending ACK table corresponding to an ACK.
Remove entry from "Transaction Pending ACK" table.
Check if this entry exists in the "Transaction Pending ACK" table.
Find the transaction corresponding to a given request.
Get the transaction to cancel. Search the server transaction table for a transaction that matches the given transaction.
Construcor for the stack. Registers the request and response factories for the stack.
Finds a pending server transaction. Since each request may be handled either statefully or statelessly, we keep a map of pending transactions so that a duplicate transaction is not created if a second request is recieved while the first one is being processed.
See if there is a pending transaction with the same Merge ID as the Merge ID obtained from the SIP Request. The Merge table is for handling the following condition: If the request has no tag in the To header field, the UAS core MUST check the request against ongoing transactions. If the From tag, Call-ID, and CSeq exactly match those associated with an ongoing transaction, but the request does not match that transaction (based on the matching rules in Section 17.2.3), the UAS core SHOULD generate a 482 (Loop Detected) response and pass it to the server transaction.
Remove a pending Server transaction from the stack. This is called after the user code has completed execution in the listener.
Remove a transaction from the merge table.
Put this into the merge request table.
Map a Server transaction (possibly sending out a 100 if the server tx is an INVITE). This actually places it in the hash table and makes it known to the stack.
Handles a new SIP request. It finds a server transaction to handle this message. If none exists, it creates a new transaction.
Handles a new SIP response. It finds a client transaction to handle this message. If none exists, it sends the message directly to the superclass.
Creates a client transaction to handle a new request. Gets the real message channel from the superclass, and then creates a new client transaction wrapped around this channel.
Creates a client transaction that encapsulates a MessageChannel. Useful for implementations that want to subclass the standard
Creates a server transaction that encapsulates a MessageChannel. Useful for implementations that want to subclass the standard
Get the size of the client transaction table.
Get the size of the server transaction table.
Add a new client transaction to the set of existing transactions. Add it to the top of the list so an incoming response has less work to do in order to find the transaction.
Remove transaction. This actually gets the tx out of the search structures which the stack keeps around. When the tx
Add a new server transaction to the set of existing transactions. Add it to the top of the list so an incoming ack has less work to do in order to find the transaction.
Hash table for quick lookup of transactions. Here we wait for room if needed.
This method is called when a client tx transitions to the Completed or Terminated state.
Remove the transaction from transaction hash.
Invoked when an error has ocurred with a transaction.
Stop stack. Clear all the timer stuff. Make the stack close all accept connections and return. This is useful if you want to start/stop the stack several times from your application. Caution : use of this function could cause peculiar bugs as messages are prcessed asynchronously by the stack.
Put a transaction in the pending transaction list. This is to avoid a race condition when a duplicate may arrive when the application is deciding whether to create a transaction or not.
Return the network layer (i.e. the interface for socket creation or the socket factory for the stack).
Return true if logging is enabled for this stack.
Get the logger.
Server log is the place where we log messages for the signaling trace viewer.
Maximum size of a single TCP message. Limiting the size of a single TCP message prevents flooding attacks.
Set the flag that instructs the stack to only start a single thread for sequentially processing incoming udp messages (thus serializing the processing). Same as setting thread pool size to 1.
Set the thread pool size for processing incoming UDP messages. Limit the total number of threads for processing udp messages.
Set the max # of simultaneously handled TCP connections.
Get the default route string.
Set the descriptive name of the stack.
Set my address.
Get my address.
Set the router algorithm. This is meant for routing messages out of dialog or for non-sip uri's.
Get the router algorithm.
return the status of the toExit flag.
Adds a new MessageProcessor to the list of running processors for this SIPStack and starts it. You can use this method for dynamic stack configuration.
Removes a MessageProcessor from this SIPStack.
Gets an array of running MessageProcessors on this SIPStack. Acknowledgement: Jeff Keyser suggested that applications should have access to the running message processors and contributed this code.
Creates the equivalent of a JAIN listening point and attaches to the stack.
Set the message factory.
Creates a new MessageChannel for a given Hop.
Return true if a given event can result in a forked subscription. The stack is configured with a set of event names that can result in forked subscriptions.
get the address resolver interface.
Set the address resolution interface
Set the logger factory.
get the thread auditor object
Audits the SIP Stack for leaks
Audits SIP dialogs for leaks - Compares the dialogs in the dialogTable with a list of Call IDs passed by the application. - Dialogs that are not known by the application are leak suspects. - Kill the dialogs that are still around after the timer specified.
Audits SIP transactions for leaks
Get the count of client transactions that is not in the completed or terminated state.
This method is slated for addition to the next spec revision.
Get the Replaced Dialog from the stack.
Get the Join Dialog from the stack.
Size of the receive UDP buffer. This property affects performance under load. Bigger buffer is better under load.
Size of the receive UDP buffer. This property affects performance under load. Bigger buffer is better under load.
Size of the send UDP buffer. This property affects performance under load. Bigger buffer is better under load.
Size of the send UDP buffer. This property affects performance under load. Bigger buffer is better under load.
Flag that reqests checking of branch IDs on responses.
Constructor - gets called from the SIPStack class with a socket on accepting a new client. All the processing of the message is done here with the sipStack being freed up to handle new connections. The sock input is the socket that is returned from the accept. Global data that is shared by all threads is accessible in the Server structure.
Constructor - connects to the given inet address. Acknowledgement -- Lamine Brahimi (IBM Zurich) sent in a bug fix for this method. A thread was being uncessarily created.
Returns "true" as this is a reliable transport.
Close the message channel.
Get my SIP Stack.
get the transport string.
get the address of the client that sent the data to us.
Send message to whoever is connected to us. Uses the topmost via address to send to.
Return a formatted message to the client. We try to re-connect with the peer on the other end if possible.
Send a message to a specified address.
Exception processor for exceptions detected from the parser. (This is invoked by the parser when an error is detected).
Gets invoked by the parser as a callback on successful message parsing (i.e. no parser errors).
This gets invoked when thread.start is called from the constructor. Implements a message loop - reading the tcp connection and processing messages until we are done or the other end has closed.
Equals predicate.
Get an identifying key. This key is used to cache the connection and re-use it if necessary.
Get the host to assign to outgoing messages.
Get the port for outgoing messages sent from the channel.
Get the port of the peer to whom we are sending messages.
TCP Is not a secure protocol.
Start the processor.
Run method for the thread that gets created for each accept socket.
Return the transport string.
Returns the stack.
Stop the message processor. Feature suggested by Jeff Keyser.
TCP can handle an unlimited number of bytes.
Default target port for TCP
TCP is not a secure protocol.
Constructor - gets called from the SIPStack class with a socket on accepting a new client. All the processing of the message is done here with the sipStack being freed up to handle new connections. The sock input is the socket that is returned from the accept. Global data that is shared by all threads is accessible in the Server structure.
Constructor - connects to the given inet address.
Gets invoked by the parser as a callback on successful message parsing (i.e. no parser errors). Jvb: note that this code is identical to TCPMessageChannel, refactor some day
TLS Is a secure protocol.
TLS can handle an unlimited number of bytes.
Default target port for TLS
TLS is a secure protocol.
Constructor - takes a datagram packet and a stack structure Extracts the address of the other from the datagram packet and stashes away the pointer to the passed stack structure.
Constructor. We create one of these in order to process an incoming message.
Constructor. We create one of these when we send out a message.
Run method specified by runnnable.
Process an incoming datagram
Actually proces the parsed message.
Implementation of the ParseExceptionListener interface.
Return a reply from a pre-constructed reply. This sends the message back to the entity who caused us to create this channel in the first place.
Send a message to a specified receiver address.
get the stack pointer.
Return a transport string.
get the stack address for the stack that received this message.
get the port.
get the name (address) of the host that sent me the message
get the address of the host that sent me the message
Compare two UDP Message channels for equality.
Get the logical originator of the message (from the top via header).
Get the logical port of the message orginator (from the top via hdr).
Returns "false" as this is an unreliable transport.
UDP is not a secure protocol.
Get port on which to listen for incoming stuff.
Start our processor thread.
Thread main routine.
Shut down the message processor. Close the socket for recieving incoming messages.
Create and return new TCPMessageChannel for the given host/port.
Default target port for UDP
UDP can handle a message as large as the MAX_DATAGRAM_SIZE.
Return true if there are any messages in use.
Send back a Request Pending response.
Send a BAD REQUEST response.
Send a CALL OR TRANSACTION DOES NOT EXIST response.
Send back a LOOP Detected Response.
Send back an error Response.
Process a request. Check for various conditions in the dialog that can result in the message being dropped. Possibly return errors for these conditions.
Process the response.
Just a placeholder. This is called from the stack for message logging. Auxiliary processing information can be passed back to be written into the log file.
Constructs a DialogTerminatedEvent to indicate a dialog timeout.
Gets the Dialog associated with the event. This enables application developers to access the dialog associated to this event.
The reason for the Dialog Timeout Event being delivered to the application.
Stop the event scanner. Decrement the reference count and exit the scanner thread if the ref count goes to 0.
Brutally stop the event scanner. This does not wait for the refcount to go to 0.
For the non-re-entrant listener this delivers the events to the listener from a single queue. If the listener is re-entrant, then the stack just calls the deliverEvent method above.
Construct a key to refer to this structure from the SIP stack
Get the key for this strucut
Set the sip provider for this structure.
Remove the sip provider from this listening point.
Clone this listening point. Note that a message Processor is not started. The transport is set to null.
Gets the port of the ListeningPoint. The default port of a ListeningPoint is dependent on the scheme and transport.  For example: <ul> <li>The default port is 5060 if the transport UDP the scheme is <i>sip:</i>. <li>The default port is 5060 if the transport is TCP the scheme is <i>sip:</i>. <li>The default port is 5060 if the transport is SCTP the scheme is <i>sip:</i>. <li>The default port is 5061 if the transport is TLS over TCP the scheme is <i>sip:</i>. <li>The default port is 5061 if the transport is TCP the scheme is <i>sips:</i>. </ul>
Gets transport of the ListeningPoint.
Get the provider.
Construct a new SIP Server Request.
Generate a new server response for the stack.
Return true if this is a forked response.
Set the original transaction for a forked response.
Get the original transaction for which this is a forked response. Note that this transaction can be in a TERMINATED state.
Stop processing messages for this provider. Post an empty message to our message processing queue that signals us to quit.
Handle the SIP event - because we have only one listener and we are already in the context of a separate thread, we dont need to enque the event and signal another thread.
Creates a new instance of SipProviderImpl
This method is deprecated (non-Javadoc)
Invoked when an error has ocurred with a transaction. Propagate up to the listeners.
Remove all the listening points for this sip provider. This is called when the stack removes the Provider
Creates a new instance of SipStackImpl.
ReInitialize the stack instance.
Return true if automatic dialog support is enabled for this stack.
Constructor for the stack.
Get the IP Address of the stack.
Return true if retransmission filter is active.
Finalization -- stop the stack on finalization. Exit the transaction scanner and release all resources.
This uses the default stack address to create a listening point.
Get the listener for the stack. A stack can have only one listener. To get an event from a provider, the listener has to be registered with the provider. The SipListener is application code.
Get the message log factory registered with the stack.
END android-deleted
(non-Javadoc) gov.nist.javax.sip.SipStackExt#getAuthenticationHelper(gov.nist.javax .sip.clientauthutils.AccountManager, javax.sip.header.HeaderFactory)
(non-Javadoc) gov.nist.javax.sip.SipStackExt#getAuthenticationHelper(gov.nist.javax .sip.clientauthutils.AccountManager, javax.sip.header.HeaderFactory)
Set the list of cipher suites supported by the stack. A stack can have only one set of suites. These are not validated against the supported cipher suites of the java runtime, so specifying a cipher here does not guarantee that it will work.<br> The stack has a default cipher suite of: <ul> <li>TLS_RSA_WITH_AES_128_CBC_SHA</li> <li>SSL_RSA_WITH_3DES_EDE_CBC_SHA</li> <li>TLS_DH_anon_WITH_AES_128_CBC_SHA</li> <li>SSL_DH_anon_WITH_3DES_EDE_CBC_SHA</li> </ul> <b>NOTE: This function must be called before adding a TLS listener</b>
Return the currently enabled cipher suites of the Stack.
Set the list of protocols supported by the stack for outgoing TLS connections. A stack can have only one set of protocols. These are not validated against the supported protocols of the java runtime, so specifying a protocol here does not guarantee that it will work.<br> The stack has a default protocol suite of: <ul> <li>SSLv3</li> <li>SSLv2Hello</li> <li>TLSv1</li> </ul> <b>NOTE: This function must be called before creating a TLSMessageChannel.</b>
Return the currently enabled protocols to use when creating TLS connection.
Set the "back to back User Agent" flag.
Get the "back to back User Agent" flag. return the value of the flag
convert an array of bytes to an hexadecimal string
Put quotes around a string and return it. Any " characters appearing in str are escaped
Squeeze out all white space from a string and return the reduced string.
Generate a call identifier. This is useful when we want to generate a call identifier in advance of generating a message.
Generate a tag for a FROM header or TO header. Just return a random 4 digit integer (should be enough to avoid any clashes!) Tags only need to be unique within a call. synchronized: needed for access to 'rand', else risk to generate same tag twice
Generate a cryptographically random identifier that can be used to generate a branch identifier.
Creates NumericShaper with specified parameters.
Returns script index of the specified context range.
Returns range corresponding to the specified script index.
Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context.
Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context.
Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI.
Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual.
Checks if this NumericShaper is contextual (supporting multiple script ranges) or not.
Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context.
Transforms the encoding of the text, starting from the character at index start and transforming count characters.
Converts count of digits of the given array of characters from the start index using specified context. This method is applied for the contextual shaping, if the shaper instance is not contextual use nonContextualShape method.
Converts count of digits of the given array of characters from the start index. Method is applied for non-contextual shaper.
Returns the index of the script of the specified char.
Returns true if the bidirectional category of the character is strong.
Updates all private serialized fields for object to be correctly serialized according to the serialized form of this class mentioned in the documentation.
Updates private fields for object after deserialization according to the serialized form of this class mentioned in the documentation.
Write object.
Read object.
Instantiates a new TextAttribute with the specified name.
Creates a new property changed event with an indication of the property index.
Returns the index of the property that was changed in this event.
The constructor used to create a new {@code PropertyChangeEvent}.
Returns the name of the property that has changed. If an unspecified set of properties has changed it returns null.
Sets the propagationId object.
Returns the propagationId object. This is reserved for future use. Beans 1.0 demands that a listener receiving this property and then sending its own PropertyChangeEvent sets the received propagationId on the new PropertyChangeEvent's propagationId field.
Returns the old value that the property had. If the old value is unknown this method returns null.
Returns the new value that the property now has. If the new value is unknown this method returns null.
Creates a new listener proxy that associates a listener with a property name.
Returns the name of the property associated with this listener proxy.
Creates a new instance that uses the source bean as source for any event.
Fires a {@link PropertyChangeEvent} with the given name, old value and new value. As source the bean used to initialize this instance is used. If the old value and the new value are not null and equal the event will not be fired.
Fires an {@link IndexedPropertyChangeEvent} with the given name, old value, new value and index. As source the bean used to initialize this instance is used. If the old value and the new value are not null and equal the event will not be fired.
Unsubscribes {@code listener} from change notifications for the property named {@code propertyName}. If multiple subscriptions exist for {@code listener}, it will receive one fewer notifications when the property changes. If the property name or listener is null or not subscribed, this method silently does nothing.
Returns true if two chains of PropertyChangeListenerProxies have the same names in the same order and bottom out in the same event listener. This method's signature is asymmetric to avoid allocating a proxy: if non-null, {@code aName} represents the first property name and {@code a} is its listener.
Subscribes {@code listener} to change notifications for the property named {@code propertyName}. If the listener is already subscribed, it will receive an additional notification when the property changes. If the property name or listener is null, this method silently does nothing.
Returns the subscribers to be notified when {@code propertyName} changes. This includes both listeners subscribed to all property changes and listeners subscribed to the named property only.
Fires a property change of a boolean property with the given name. If the old value and the new value are not null and equal the event will not be fired.
Fires a property change of a boolean property with the given name. If the old value and the new value are not null and equal the event will not be fired.
Fires a property change of an integer property with the given name. If the old value and the new value are not null and equal the event will not be fired.
Fires a property change of an integer property with the given name. If the old value and the new value are not null and equal the event will not be fired.
Returns true if there are listeners registered to the property with the given name.
Unsubscribes {@code listener} from change notifications for all properties. If the listener has multiple subscriptions, it will receive one fewer notification when properties change. If the property name or listener is null or not subscribed, this method silently does nothing.
Subscribes {@code listener} to change notifications for all properties. If the listener is already subscribed, it will receive an additional notification. If the listener is null, this method silently does nothing.
Returns all subscribers. This includes both listeners subscribed to all property changes and listeners subscribed to a single property.
Publishes a property change event to all listeners of that property. If the event's old and new values are equal (but non-null), no event will be published.
Constructs a new {@code BufferedInputStream}, providing {@code in} with a buffer of 8192 bytes. <p><strong>Warning:</strong> passing a null source creates a closed {@code BufferedInputStream}. All read operations on such a stream will fail with an IOException.
Constructs a new {@code BufferedInputStream}, providing {@code in} with {@code size} bytes of buffer. <p><strong>Warning:</strong> passing a null source creates a closed {@code BufferedInputStream}. All read operations on such a stream will fail with an IOException.
Constructs a new {@code BufferedOutputStream}, providing {@code out} with a buffer of 8192 bytes.
Constructs a new {@code BufferedOutputStream}, providing {@code out} with {@code size} bytes of buffer.
Flushes only internal buffer.
Constructs a new {@code BufferedReader}, providing {@code in} with a buffer of 8192 characters.
Constructs a new {@code BufferedReader}, providing {@code in} with {@code size} characters of buffer.
Populates the buffer with data. It is an error to call this method when the buffer still contains data; ie. if {@code pos < end}.
Peeks at the next input character, refilling the buffer if necessary. If this character is a newline character ("\n"), it is discarded.
Constructs a new {@code BufferedWriter}, providing {@code out} with a buffer of 8192 bytes.
Constructs a new {@code BufferedWriter}, providing {@code out} with {@code size} bytes of buffer.
Flushes the internal buffer.
Indicates whether this writer is closed.
Writes a newline to this writer. On Android, this is {@code "\n"}. The target writer may or may not be flushed when a newline is written.
Constructs a new {@code ByteArrayInputStream} on the byte array {@code buf}.
Constructs a new {@code ByteArrayInputStream} on the byte array {@code buf} with the initial position set to {@code offset} and the number of bytes available set to {@code offset} + {@code length}.
Constructs a new ByteArrayOutputStream with a default size of 32 bytes. If more than 32 bytes are written to this instance, the underlying byte array will expand.
Constructs a new {@code ByteArrayOutputStream} with a default size of {@code size} bytes. If more than {@code size} bytes are written to this instance, the underlying byte array will expand.
Resets this stream to the beginning of the underlying byte array. All subsequent writes will overwrite any bytes previously stored in this stream.
Returns the total number of bytes written to this stream so far.
Returns the contents of this ByteArrayOutputStream as a byte array. Any changes made to the receiver after returning will not be reflected in the byte array returned to the caller.
Returns the contents of this ByteArrayOutputStream as a string converted according to the encoding declared in {@code enc}.
Takes the contents of this stream and writes it to the output stream {@code out}.
Constructs a CharArrayReader on the char array {@code buf}. The size of the reader is set to the length of the buffer and the object to to read from is set to {@code buf}.
Constructs a CharArrayReader on the char array {@code buf}. The size of the reader is set to {@code length} and the start position from which to read the buffer is set to {@code offset}.
Indicates whether this reader is open.
Indicates whether this reader is closed.
Constructs a new {@code CharArrayWriter} which has a buffer allocated with the default size of 32 characters. This buffer is also used as the {@code lock} to synchronize access to this writer.
Constructs a new {@code CharArrayWriter} which has a buffer allocated with the size of {@code initialSize} characters. The buffer is also used as the {@code lock} to synchronize access to this writer.
Resets this writer. The current write position is reset to the beginning of the buffer. All written characters are lost and the size of this writer is set to 0.
Returns the size of this writer, that is the number of characters it stores. This number changes if this writer is reset or when more characters are written to it.
Returns the contents of the receiver as a char array. The array returned is a copy and any modifications made to this writer after calling this method are not reflected in the result.
Writes the contents of this {@code CharArrayWriter} to another {@code Writer}. The output is all the characters that have been written to the receiver since the last reset or since it was created.
Constructs a new {@code CharConversionException} with its stack trace and detail message filled in.
Secret accessor for {@code System.console}.
Writes a formatted string to the console using the specified format string and arguments.
Equivalent to {@code format(format, args)}.
Returns the {@link Reader} associated with this console.
Reads a line from the console.
Reads a line from this console, using the specified prompt. The prompt is given as a format string and optional arguments. Note that this can be a source of errors: if it is possible that your prompt contains {@code %} characters, you must use the format string {@code "%s"} and pass the actual prompt as a parameter.
Reads a password from the console. The password will not be echoed to the display.
Returns the {@link Writer} associated with this console.
Constructs a new DataInputStream on the InputStream {@code in}. All reads are then filtered through this stream. Note that data read by this DataOutputStream. <p><strong>Warning:</strong> passing a null source creates an invalid {@code DataInputStream}. All operations on such a stream will fail.
overridden to add 'final'
Skips {@code count} number of bytes in this stream. Subsequent {@code read()}s will not return these bytes unless {@code reset()} is used. This method will not throw an {@link EOFException} if the end of the input is reached before {@code count} bytes where skipped.
Constructs a new {@code DataOutputStream} on the {@code OutputStream} {@code out}. Note that data written by this stream is not in a human readable form but can be reconstructed by using a {@link DataInputStream} on the resulting output.
Returns the total number of bytes written to the target stream so far.
Writes a boolean to the target stream.
Writes an 8-bit byte to the target stream. Only the least significant byte of the integer {@code val} is written.
Returns the descriptor for this emulated field.
Returns the value held by this emulated field.
Constructs a new instance of EmulatedFields.
Build emulated slots that correspond to emulated fields. A slot is a field descriptor (ObjectStreamField) plus the actual value it holds.
Returns {@code true} indicating the field called {@code name} has not had a value explicitly assigned and that it still holds a default value for its type, or {@code false} indicating that the field named has been assigned a value explicitly.
Finds and returns an ObjectSlot that corresponds to a field named {@code fieldName} and type {@code fieldType}. If the field type {@code fieldType} corresponds to a primitive type, the field type has to match exactly or {@code null} is returned. If the field type {@code fieldType} corresponds to an object type, the field type has to be compatible in terms of assignment, or null is returned. If {@code fieldType} is {@code null}, no such compatibility checking is performed and the slot is returned.
Finds and returns the byte value of a given field named {@code name} in the receiver. If the field has not been assigned any value yet, the default value {@code defaultValue} is returned instead.
Finds and returns the char value of a given field named {@code name} in the receiver. If the field has not been assigned any value yet, the default value {@code defaultValue} is returned instead.
Finds and returns the double value of a given field named {@code name} in the receiver. If the field has not been assigned any value yet, the default value {@code defaultValue} is returned instead.
Finds and returns the float value of a given field named {@code name} in the receiver. If the field has not been assigned any value yet, the default value {@code defaultValue} is returned instead.
Finds and returns the int value of a given field named {@code name} in the receiver. If the field has not been assigned any value yet, the default value {@code defaultValue} is returned instead.
Finds and returns the long value of a given field named {@code name} in the receiver. If the field has not been assigned any value yet, the default value {@code defaultValue} is returned instead.
Finds and returns the Object value of a given field named {@code name} in the receiver. If the field has not been assigned any value yet, the default value {@code defaultValue} is returned instead.
Finds and returns the short value of a given field named {@code name} in the receiver. If the field has not been assigned any value yet, the default value {@code defaultValue} is returned instead.
Finds and returns the boolean value of a given field named {@code name} in the receiver. If the field has not been assigned any value yet, the default value {@code defaultValue} is returned instead.
Find and set the byte value of a given field named {@code name} in the receiver.
Find and set the char value of a given field named {@code name} in the receiver.
Find and set the double value of a given field named {@code name} in the receiver.
Find and set the float value of a given field named {@code name} in the receiver.
Find and set the int value of a given field named {@code name} in the receiver.
Find and set the long value of a given field named {@code name} in the receiver.
Find and set the Object value of a given field named {@code name} in the receiver.
Find and set the short value of a given field named {@code name} in the receiver.
Find and set the boolean value of a given field named {@code name} in the receiver.
Return the array of ObjectSlot the receiver represents.
Constructs a new instance of EmulatedFieldsForDumping.
Return the actual EmulatedFields instance used by the receiver. We have the actual work in a separate class so that the code can be shared. The receiver has to be of a subclass of PutField.
Constructs a new instance of EmulatedFieldsForDumping.
Return the actual EmulatedFields instance used by the receiver. We have the actual work in a separate class so that the code can be shared. The receiver has to be of a subclass of GetField.
Constructs a new {@code EOFException} with its stack trace and detail message filled in.
Constructs a new file using the specified directory and name.
Constructs a new file using the specified path.
Constructs a new File using the specified directory path and file name, placing a path separator between the two.
Constructs a new File using the path of the specified URI. {@code uri} needs to be an absolute and hierarchical Unified Resource Identifier with file scheme and non-empty path component, but with undefined authority, query or fragment components.
Removes duplicate adjacent slashes and any trailing slash.
Joins two path components, adding a separator only if necessary.
Returns the file system roots. On Android and other Unix systems, there is a single root, {@code /}.
Tests whether or not this process is allowed to execute this file. Note that this is a best-effort result; the only way to be certain is to actually attempt the operation.
Indicates whether the current context is allowed to read from this file.
Indicates whether the current context is allowed to write to this file.
Returns the relative sort ordering of the paths for this file and the file {@code another}. The ordering is platform dependent.
Deletes this file. Directories must be empty before they will be deleted. <p>Note that this method does <i>not</i> throw {@code IOException} on failure. Callers must check the return value.
Schedules this file to be automatically deleted when the VM terminates normally. <p><i>Note that on Android, the application lifecycle does not include VM termination, so calling this method will not ensure that files are deleted</i>. Instead, you should use the most appropriate out of: <ul> <li>Use a {@code finally} clause to manually invoke {@link #delete}. <li>Maintain your own set of files to delete, and process it at an appropriate point in your application's lifecycle. <li>Use the Unix trick of deleting the file as soon as all readers and writers have opened it. No new readers/writers will be able to access the file, but all existing ones will still have access until the last one closes the file. </ul>
Returns a boolean indicating whether this file can be found on the underlying file system.
Returns the absolute path of this file. An absolute path is a path that starts at a root of the file system. On Android, there is only one root: {@code /}. <p>A common use for absolute paths is when passing paths to a {@code Process} as command-line arguments, to remove the requirement implied by relative paths, that the child must have the same working directory as its parent.
Returns a new file constructed using the absolute path of this file. Equivalent to {@code new File(this.getAbsolutePath())}.
Returns the canonical path of this file. An <i>absolute</i> path is one that begins at the root of the file system. A <i>canonical</i> path is an absolute path with symbolic links and references to "." or ".." resolved. If a path element does not exist (or is not searchable), there is a conflict between interpreting canonicalization as a textual operation (where "a/../b" is "b" even if "a" does not exist) . <p>Most callers should use {@link #getAbsolutePath} instead. A canonical path is significantly more expensive to compute, and not generally useful. The primary use for canonical paths is determining whether two paths point to the same file by comparing the canonicalized paths. <p>It can be actively harmful to use a canonical path, specifically because canonicalization removes symbolic links. It's wise to assume that a symbolic link is present for a reason, and that that reason is because the link may need to change. Canonicalization removes this layer of indirection. Good code should generally avoid caching canonical paths.
Returns a new file created using the canonical path of this file. Equivalent to {@code new File(this.getCanonicalPath())}.
Returns the name of the file or directory represented by this file.
Returns the pathname of the parent of this file. This is the path up to but not including the last name. {@code null} is returned if there is no parent.
Returns a new file made from the pathname of the parent of this file. This is the path up to but not including the last name. {@code null} is returned when there is no parent.
Returns the path of this file.
Indicates if this file's pathname is absolute. Whether a pathname is absolute is platform specific. On Android, absolute paths start with the character '/'.
Indicates if this file represents a <em>directory</em> on the underlying file system.
Indicates if this file represents a <em>file</em> on the underlying file system.
Returns whether or not this file is a hidden file as defined by the operating system. The notion of "hidden" is system-dependent. For Unix systems a file is considered hidden if its name starts with a ".". For Windows systems there is an explicit flag in the file system for this purpose.
Returns the time when this file was last modified, measured in milliseconds since January 1st, 1970, midnight. Returns 0 if the file does not exist.
Sets the time this file was last modified, measured in milliseconds since January 1st, 1970, midnight. <p>Note that this method does <i>not</i> throw {@code IOException} on failure. Callers must check the return value.
Equivalent to setWritable(false, false).
Manipulates the execute permissions for the abstract path designated by this file. <p>Note that this method does <i>not</i> throw {@code IOException} on failure. Callers must check the return value.
Equivalent to setExecutable(executable, true).
Manipulates the read permissions for the abstract path designated by this file.
Equivalent to setReadable(readable, true).
Manipulates the write permissions for the abstract path designated by this file.
Equivalent to setWritable(writable, true).
Returns the length of this file in bytes. Returns 0 if the file does not exist. The result for a directory is not defined.
Returns an array of strings with the file names in the directory represented by this file. The result is {@code null} if this file is not a directory. <p> The entries {@code .} and {@code ..} representing the current and parent directory are not returned as part of the list.
Gets a list of the files in the directory represented by this file. This list is then filtered through a FilenameFilter and the names of files with matching names are returned as an array of strings. Returns {@code null} if this file is not a directory. If {@code filter} is {@code null} then all filenames match. <p> The entries {@code .} and {@code ..} representing the current and parent directories are not returned as part of the list.
Returns an array of files contained in the directory represented by this file. The result is {@code null} if this file is not a directory. The paths of the files in the array are absolute if the path of this file is absolute, they are relative otherwise.
Gets a list of the files in the directory represented by this file. This list is then filtered through a FilenameFilter and files with matching names are returned as an array of files. Returns {@code null} if this file is not a directory. If {@code filter} is {@code null} then all filenames match. <p> The entries {@code .} and {@code ..} representing the current and parent directories are not returned as part of the list.
Gets a list of the files in the directory represented by this file. This list is then filtered through a FileFilter and matching files are returned as an array of files. Returns {@code null} if this file is not a directory. If {@code filter} is {@code null} then all files match. <p> The entries {@code .} and {@code ..} representing the current and parent directories are not returned as part of the list.
Converts a String[] containing filenames to a File[]. Note that the filenames must not contain slashes. This method is to remove duplication in the implementation of File.list's overloads.
Creates the directory named by the trailing filename of this file. Does not create the complete path required to create this directory. <p>Note that this method does <i>not</i> throw {@code IOException} on failure. Callers must check the return value.
Creates the directory named by the trailing filename of this file, including the complete directory path required to create this directory. <p>Note that this method does <i>not</i> throw {@code IOException} on failure. Callers must check the return value.
Creates a new, empty file on the file system according to the path information stored in this file. This method returns true if it creates a file, false if the file already existed. Note that it returns false even if the file is not a file (because it's a directory, say). <p>This method is not generally useful. For creating temporary files, use {@link #createTempFile} instead. For reading/writing files, use {@link FileInputStream}, {@link FileOutputStream}, or {@link RandomAccessFile}, all of which can create files. <p>Note that this method does <i>not</i> throw {@code IOException} if the file already exists, even if it's not a regular file. Callers should always check the return value, and may additionally want to call {@link #isFile}.
Creates an empty temporary file using the given prefix and suffix as part of the file name. If {@code suffix} is null, {@code .tmp} is used. This method is a convenience method that calls {@link #createTempFile(String, String, File)} with the third argument being {@code null}.
Creates an empty temporary file in the given directory using the given prefix and suffix as part of the file name. If {@code suffix} is null, {@code .tmp} is used. <p>Note that this method does <i>not</i> call {@link #deleteOnExit}, but see the documentation for that method before you call it manually.
Renames this file to {@code newPath}. This operation is supported for both files and directories. <p>Many failures are possible. Some of the more likely failures include: <ul> <li>Write permission is required on the directories containing both the source and destination paths. <li>Search permission is required for all parents of both paths. <li>Both paths be on the same mount point. On Android, applications are most likely to hit this restriction when attempting to copy between internal storage and an SD card. </ul> <p>Note that this method does <i>not</i> throw {@code IOException} on failure. Callers must check the return value.
Returns a Uniform Resource Identifier for this file. The URI is system dependent and may not be transferable between different operating / file systems.
TODO: is this really necessary, or can it be replaced with getAbsolutePath?
Returns the total size in bytes of the partition containing this path. Returns 0 if this path does not exist.
Returns the number of usable free bytes on the partition containing this path. Returns 0 if this path does not exist. <p>Note that this is likely to be an optimistic over-estimate and should not be taken as a guarantee your application can actually write this many bytes. On Android (and other Unix-based systems), this method returns the number of free bytes available to non-root users, regardless of whether you're actually running as root, and regardless of any quota or other restrictions that might apply to the user. (The {@code getFreeSpace} method returns the number of bytes potentially available to root.)
Returns the number of free bytes on the partition containing this path. Returns 0 if this path does not exist. <p>Note that this is likely to be an optimistic over-estimate and should not be taken as a guarantee your application can actually write this many bytes.
Ensures that data which is buffered within the underlying implementation is written out to the appropriate device before returning.
Tests whether this {@code FileDescriptor} is valid.
Constructs a new {@code FileInputStream} that reads from {@code file}.
Constructs a new {@code FileInputStream} that reads from {@code fd}.
Equivalent to {@code new FileInputStream(new File(path))}.
Ensures that all resources for this stream are released when it is about to be garbage collected.
Returns a read-only {@link FileChannel} that shares its position with this stream.
Returns the underlying file descriptor.
Constructs a new {@code FileNotFoundException} with its stack trace and detail message filled in.
Constructs a new {@code FileOutputStream} that writes to {@code file}. The file will be truncated if it exists, and created if it doesn't exist.
Constructs a new {@code FileOutputStream} that writes to {@code file}. If {@code append} is true and the file already exists, it will be appended to; otherwise it will be truncated. The file will be created if it does not exist.
Constructs a new {@code FileOutputStream} that writes to {@code fd}.
Constructs a new {@code FileOutputStream} that writes to {@code path}. The file will be truncated if it exists, and created if it doesn't exist.
Constructs a new {@code FileOutputStream} that writes to {@code path}. If {@code append} is true and the file already exists, it will be appended to; otherwise it will be truncated. The file will be created if it does not exist.
Returns a write-only {@link FileChannel} that shares its position with this stream.
Constructs a new FileReader on the given {@code file}.
Construct a new FileReader on the given FileDescriptor {@code fd}. Since a previously opened FileDescriptor is passed as an argument, no FileNotFoundException can be thrown.
Construct a new FileReader on the given file named {@code filename}.
Creates a FileWriter using the File {@code file}.
Creates a FileWriter using the File {@code file}. The parameter {@code append} determines whether or not the file is opened and appended to or just opened and overwritten.
Creates a FileWriter using the existing FileDescriptor {@code fd}.
Creates a FileWriter using the platform dependent {@code filename}.
Creates a FileWriter using the platform dependent {@code filename}. The parameter {@code append} determines whether or not the file is opened and appended to or just opened and overwritten.
Constructs a new {@code FilterInputStream} with the specified input stream as source. <p><strong>Warning:</strong> passing a null source creates an invalid {@code FilterInputStream}, that fails on every method that is not overridden. Subclasses should check for null in their constructors.
Constructs a new {@code FilterOutputStream} with {@code out} as its target stream.
Constructs a new FilterReader on the Reader {@code in}.
Constructs a new FilterWriter on the Writer {@code out}. All writes are now filtered through this writer.
This constructor does nothing. It is provided for signature compatibility.
Returns an estimated number of bytes that can be read or skipped without blocking for more input. <p>Note that this method provides such a weak guarantee that it is not very useful in practice. <p>Firstly, the guarantee is "without blocking for more input" rather than "without blocking": a read may still block waiting for I/O to complete&nbsp;&mdash; the guarantee is merely that it won't have to wait indefinitely for data to be written. The result of this <p>Secondly, the result is a conservative estimate and may be significantly smaller than the actual number of bytes available. In particular, an implementation that always returns 0 would be correct. In general, callers should only use this method if they'd be satisfied with treating the result as a boolean yes or no answer to the question "is there definitely data ready?". <p>Thirdly, the fact that a given number of bytes is "available" does not guarantee that a read or skip will actually read or skip that many bytes: they may read or skip fewer. <p>It is particularly important to realize that you <i>must not</i> use this method to size a container and assume that you can read the entirety of the stream without needing to resize the container. Such callers should probably write everything they read to a {@link ByteArrayOutputStream} and convert that to a byte array. Alternatively, if you're reading from a file, {@link File#length} returns the current length of the file (though assuming the file's length can't change may be incorrect, reading a file is inherently racy). <p>The default implementation of this method in {@code InputStream} always returns 0. Subclasses should override this method if they are able to indicate the number of bytes available.
Closes this stream. Concrete implementations of this class should free any resources during close. This implementation does nothing.
Sets a mark position in this InputStream. The parameter {@code readlimit} indicates how many bytes can be read before the mark is invalidated. Sending {@code reset()} will reposition the stream back to the marked position provided {@code readLimit} has not been surpassed. <p> This default implementation does nothing and concrete subclasses must provide their own implementation.
Indicates whether this stream supports the {@code mark()} and {@code reset()} methods. The default implementation returns {@code false}.
Resets this stream to the last marked location. Throws an {@code IOException} if the number of bytes read since the mark has been set is greater than the limit provided to {@code mark}, or if no mark has been set. <p> This implementation always throws an {@code IOException} and concrete subclasses should provide the proper implementation.
Skips at most {@code n} bytes in this stream. This method does nothing and returns 0 if {@code n} is negative, but some subclasses may throw. <p>Note the "at most" in the description of this method: this method may choose to skip fewer bytes than requested. Callers should <i>always</i> check the return value. <p>This default implementation reads bytes into a temporary buffer. Concrete subclasses should provide their own implementation.
Constructs a new {@code InputStreamReader} on the {@link InputStream} {@code in}. This constructor sets the character converter to the encoding specified in the "file.encoding" property and falls back to ISO 8859_1 (ISO-Latin-1) if the property doesn't exist.
Constructs a new InputStreamReader on the InputStream {@code in}. The character converter that is used to decode bytes into characters is identified by name by {@code enc}. If the encoding cannot be found, an UnsupportedEncodingException error is thrown.
Constructs a new InputStreamReader on the InputStream {@code in} and CharsetDecoder {@code dec}.
Constructs a new InputStreamReader on the InputStream {@code in} and Charset {@code charset}.
Returns the historical name of the encoding used by this writer to convert characters to bytes, or null if this writer has been closed. Most callers should probably keep track of the String or Charset they passed in; this method may not return the same name.
Constructs a new instance with the given detail message.
Constructs a new instance with given detail message and cause.
Constructs a new {@code InvalidClassException} with its stack trace and detailed message filled in.
Constructs a new {@code InvalidClassException} with its stack trace, detail message and the fully qualified name of the class which caused the exception filled in.
Constructs an {@code InvalidObjectException} with its stack trace and detail message filled in.
Constructs a new instance with its cause filled in.
Constructs a new {@code IOException} with its stack trace and detail message filled in.
Constructs a new instance of this class with detail message and cause filled in.
Constructs a new instance of this class with its detail cause filled in.
Constructs a new {@code LineNumberInputStream} on the {@link InputStream} {@code in}. Line numbers are counted for all data read from this stream. <p><strong>Warning:</strong> passing a null source creates an invalid {@code LineNumberInputStream}. All operations on such a stream will fail.
Returns the current line number for this stream. Numbering starts at 0.
Sets the line number of this stream to the specified {@code lineNumber}. Note that this may have side effects on the line number associated with the last marked position.
Constructs a new LineNumberReader on the Reader {@code in}. The internal buffer gets the default size (8 KB).
Constructs a new LineNumberReader on the Reader {@code in}. The size of the internal buffer is specified by the parameter {@code size}.
Returns the current line number for this reader. Numbering starts at 0.
Sets the line number of this reader to the specified {@code lineNumber}. Note that this may have side effects on the line number associated with the last marked position.
Constructs a new {@code NotActiveException} with its stack trace and detail message filled in.
Constructs a new {@link NotSerializableException} with its stack trace and detail message filled in.
Indicates if the field identified by {@code name} is defaulted. This means that it has no value in this stream.
Constructs a new ObjectInputStream that reads from the InputStream {@code input}.
Checks to if it is ok to read primitive types from this stream at this point. One is not supposed to read primitive types when about to read an object, for example, so an exception has to be thrown.
Default method to read objects from this stream. Serializable fields defined in the object's class and superclasses are read from the source stream.
Enables object replacement for this stream. By default this is not enabled. Only trusted subclasses (loaded with system class loader) are allowed to change this status.
Return the next {@code int} handle to be used to indicate cyclic references being loaded from the stream.
Return the next token code (TC) from the receiver, which indicates what kind of object follows
Pushes back the last TC code read
Reads and returns an array of raw bytes with primitive data. The array will have up to 255 bytes. The primitive data will be in the format described by {@code DataOutputStream}.
Reads and returns an array of raw bytes with primitive data. The array will have more than 255 bytes. The primitive data will be in the format described by {@code DataOutputStream}.
Reads a boolean from the source stream.
Reads a byte (8 bit) from the source stream.
Reads a character (16 bit) from the source stream.
Reads and discards block data and objects until TC_ENDBLOCKDATA is found.
Reads a class descriptor (an {@code ObjectStreamClass}) from the stream.
Reads the content of the receiver based on the previously read token {@code tc}.
Reads the content of the receiver based on the previously read token {@code tc}. Primitive data content is considered an error.
Reads the next item from the stream assuming it is a cyclic reference to an object previously read. Return the actual object previously read.
Reads a double (64 bit) from the source stream.
Read the next item assuming it is an exception. The exception is not a regular instance in the object graph, but the exception instance that happened (if any) when dumping the original object graph. The set of seen objects will be reset just before and just after loading this exception object. <p> When exceptions are found normally in the object graph, they are loaded as a regular object, and not by this method. In that case, the set of "known objects" is not reset.
Reads a collection of field descriptors (name, type name, etc) for the class descriptor {@code cDesc} (an {@code ObjectStreamClass})
Format the class signature for ObjectStreamField, for example, "[L[Ljava.lang.String;;" is converted to "[Ljava.lang.String;"
Reads the persistent fields of the object that is currently being read from the source stream. The values read are stored in a GetField object that provides access to the persistent fields. This GetField object is then returned.
Reads a collection of field values for the emulated fields {@code emulatedFields}
Reads a collection of field values for the class descriptor {@code classDesc} (an {@code ObjectStreamClass}). The values will be used to set instance fields in object {@code obj}. This is the default mechanism, when emulated fields (an {@code GetField}) are not used. Actual values to load are stored directly into the object {@code obj}.
Reads a float (32 bit) from the source stream.
Reads bytes from the source stream into the byte array {@code dst}. This method will block until {@code dst.length} bytes have been read.
Reads {@code byteCount} bytes from the source stream into the byte array {@code dst}.
Walks the hierarchy of classes described by class descriptor {@code classDesc} and reads the field values corresponding to fields declared by the corresponding class descriptor. The instance to store field values into is {@code object}. If the class (corresponding to class descriptor {@code classDesc}) defines private instance method {@code readObject} it will be used to load field values.
Reads an integer (32 bit) from the source stream.
Reads a long (64 bit) from the source stream.
Read a new array from the receiver. It is assumed the array has not been read yet (not a cyclic reference). Return the array read.
Reads a new class from the receiver. It is assumed the class has not been read yet (not a cyclic reference). Return the class read.
read class type for Enum, note there's difference between enum and normal classes
Reads a new class descriptor from the receiver. It is assumed the class descriptor has not been read yet (not a cyclic reference). Return the class descriptor read.
Reads a new proxy class descriptor from the receiver. It is assumed the proxy class descriptor has not been read yet (not a cyclic reference). Return the proxy class descriptor read.
Reads a class descriptor from the source stream.
Creates the proxy class that implements the interfaces specified in {@code interfaceNames}.
Read a new object from the stream. It is assumed the object has not been loaded yet (not a cyclic reference). Return the object read. If the object implements <code>Externalizable</code> its <code>readExternal</code> is called. Otherwise, all fields described by the class hierarchy are loaded. Each class can define how its declared instance fields are loaded by defining a private method <code>readObject</code>
Read a string encoded in {@link DataInput modified UTF-8} from the receiver. Return the string read.
Read a new String in UTF format from the receiver. Return the string read.
Reads the next object from the source stream.
Reads the next unshared object from the source stream.
Searches up the call stack to find the closest user-defined class loader.
Method to be overridden by subclasses to read the next object from the source stream.
Reads a short (16 bit) from the source stream.
Reads and validates the ObjectInputStream header from the source stream.
Reads an unsigned byte (8 bit) from the source stream.
Reads an unsigned short (16 bit) from the source stream.
Reads a string encoded in {@link DataInput modified UTF-8} from the source stream.
Returns the previously-read object corresponding to the given serialization handle.
Associates a read object with the its serialization handle.
Registers a callback for post-deserialization validation of objects. It allows to perform additional consistency checks before the {@code readObject()} method of this class returns its result to the caller. This method can only be called from within the {@code readObject()} method of a class that implements "special" deserialization rules. It can be called multiple times. Validation callbacks are then done in order of decreasing priority, defined by {@code priority}.
Reset the collection of objects already loaded by the receiver.
Reset the receiver. The collection of objects already read by the receiver is reset, and internal structures are also reset so that the receiver knows it is in a fresh clean state.
Loads the Java class corresponding to the class descriptor {@code osClass} that has just been read from the source stream.
Allows trusted subclasses to substitute the specified original {@code object} with a new object. Object substitution has to be activated first with calling {@code enableResolveObject(true)}. This implementation just returns {@code object}.
Skips {@code length} bytes on the source stream. This method should not be used to skip bytes at any arbitrary position, just when reading primitive data types (int, char etc).
Verify if the SUID & the base name for descriptor <code>loadedStreamClass</code>matches the SUID & the base name of the corresponding loaded class and init private fields.
Avoid recursive defining.
Constructs a new ObjectOutputStream that writes to the OutputStream {@code output}.
Writes optional information for class {@code aClass} to the output stream. This optional data can be read when deserializing the class descriptor (ObjectStreamClass) for this class from an input stream. By default, no extra data is saved.
Writes optional information for a proxy class to the target stream. This optional data can be read when deserializing the proxy class from an input stream. By default, no extra data is saved.
Do the necessary work to see if the receiver can be used to write primitive types like int, char, etc.
Computes the collection of emulated fields that users can manipulate to store a representation different than the one declared by the class of the object being dumped.
Default method to write objects to this stream. Serializable fields defined in the object's class and superclasses are written to the output stream.
Writes buffered data to the target stream. This is similar to {@code flush} but the flush is not propagated to the target stream.
Dumps the parameter {@code obj} only if it is {@code null} or an object that has already been dumped previously.
Enables object replacement for this stream. By default this is not enabled. Only trusted subclasses (loaded with system class loader) are allowed to change this status.
Return the next handle to be used to indicate cyclic references being saved to the stream.
Gets this stream's {@code PutField} object. This object provides access to the persistent fields that are eventually written to the output stream. It is used to transfer the values from the fields of the object that is currently being written to the persistent fields.
Remove the unshared object from the table, and restore any previous handle.
Allows trusted subclasses to substitute the specified original {@code object} with a new object. Object substitution has to be activated first with calling {@code enableReplaceObject(true)}. This implementation just returns {@code object}.
Resets the state of this stream. A marker is written to the stream, so that the corresponding input stream will also perform a reset at the same point. Objects previously written are no longer remembered, so they will be written again (instead of a cyclical reference) if found in the object graph.
Reset the collection of objects already dumped by the receiver. If the objects are found again in the object graph, the receiver will dump them again, instead of a handle (cyclic reference).
Reset the receiver. The collection of objects already dumped by the receiver is reset, and internal structures are also reset so that the receiver knows it is in a fresh clean state.
Sets the specified protocol version to be used by this stream.
Writes a byte (8 bit) to the target stream.
Writes the string {@code value} as a sequence of bytes to the target stream. Only the least significant byte of each character in the string is written.
Writes a character (16 bit) to the target stream.
Writes the string {@code value} as a sequence of characters to the target stream.
Write a class descriptor {@code classDesc} (an {@code ObjectStreamClass}) to the stream.
Writes a handle representing a cyclic reference (object previously dumped).
Writes a double (64 bit) to the target stream.
Writes a collection of field descriptors (name, type name, etc) for the class descriptor {@code classDesc} (an {@code ObjectStreamClass})
Writes the fields of the object currently being written to the target stream. The field values are buffered in the currently active {@code PutField} object, which can be accessed by calling {@code putFields()}.
Writes a collection of field values for the emulated fields {@code emulatedFields}
Writes a collection of field values for the fields described by class descriptor {@code classDesc} (an {@code ObjectStreamClass}). This is the default mechanism, when emulated fields (an {@code PutField}) are not used. Actual values to dump are fetched directly from object {@code obj}.
Writes a float (32 bit) to the target stream.
Walks the hierarchy of classes described by class descriptor {@code classDesc} and writes the field values corresponding to fields declared by the corresponding class descriptor. The instance to fetch field values from is {@code object}. If the class (corresponding to class descriptor {@code classDesc}) defines private instance method {@code writeObject} it will be used to dump field values.
Writes an integer (32 bit) to the target stream.
Writes a long (64 bit) to the target stream.
Write array {@code array} of class {@code arrayClass} with component type {@code componentType} into the receiver. It is assumed the array has not been dumped yet. Returns the handle for this object (array) which is dumped here.
Write class {@code object} into the receiver. It is assumed the class has not been dumped yet. Classes are not really dumped, but a class descriptor ({@code ObjectStreamClass}) that corresponds to them. Returns the handle for this object (class) which is dumped here.
Write class descriptor {@code classDesc} into the receiver. It is assumed the class descriptor has not been dumped yet. The class descriptors for the superclass chain will be dumped as well. Returns the handle for this object (class descriptor) which is dumped here.
Writes a class descriptor to the target stream.
Write exception {@code ex} into the receiver. It is assumed the exception has not been dumped yet. Returns the handle for this object (exception) which is dumped here. This is used to dump the exception instance that happened (if any) when dumping the original object graph. The set of seen objects will be reset just before and just after dumping this exception object. When exceptions are found normally in the object graph, they are dumped as a regular object, and not by this method. In that case, the set of "known objects" is not reset.
Write object {@code object} of class {@code theClass} into the receiver. It is assumed the object has not been dumped yet. Return the handle for this object which is dumped here. If the object implements {@code Externalizable} its {@code writeExternal} is called. Otherwise, all fields described by the class hierarchy is dumped. Each class can define how its declared instance fields are dumped by defining a private method {@code writeObject}
Write String {@code object} into the receiver. It is assumed the String has not been dumped yet. Returns the handle for this object (String) which is dumped here. Strings are saved encoded with {@link DataInput modified UTF-8}.
Write a special tag that indicates the value {@code null} into the receiver.
Writes an object to the target stream.
Writes an unshared object to the target stream. This method is identical to {@code writeObject}, except that it always writes a new object to the stream versus the use of back-referencing for identical objects by {@code writeObject}.
Write object {@code object} into the receiver's underlying stream.
write for Enum Class Desc only, which is different from other classes
Method to be overridden by subclasses to write {@code object} to the target stream.
Writes a short (16 bit) to the target stream.
Writes the {@link ObjectOutputStream} header to the target stream.
Writes a string encoded with {@link DataInput modified UTF-8} to the target stream.
Compute class descriptor for a given class <code>cl</code>.
Builds the collection of field descriptors for the receiver
Compute and return the Serial Version UID of the class {@code cl}. The value is computed based on the class name, superclass chain, field names, method names, modifiers, etc.
Returns what the serialization specification calls "descriptor" given a field signature.
Return what the serialization specification calls "descriptor" given a method/constructor signature.
Return the java.lang.reflect.Field {@code serialPersistentFields} if class {@code cl} implements it. Return null otherwise.
Returns the class (java.lang.Class) for this descriptor.
Create and return a new instance of class 'instantiationClass' using JNI to call the constructor chosen by resolveConstructorClass. The returned instance may have uninitialized fields, including final fields.
Checks if two classes belong to the same package.
Gets a field descriptor of the class represented by this class descriptor.
Returns the collection of field descriptors for the fields of the corresponding class
Returns a collection of field descriptors for the serialized fields of the class represented by this class descriptor.
If a Class uses "serialPersistentFields" to define the serialized fields, this.loadFields cannot get the "unshared" information when deserializing fields using current implementation of ObjectInputStream. This method provides a way to copy the "unshared" attribute from this.fields.
Returns the collection of field descriptors for the input fields of the corresponding class
Returns the flags for this descriptor, where possible combined values are ObjectStreamConstants.SC_WRITE_METHOD ObjectStreamConstants.SC_SERIALIZABLE ObjectStreamConstants.SC_EXTERNALIZABLE
Returns the name of the class represented by this descriptor.
Returns the Serial Version User ID of the class represented by this descriptor.
Returns the descriptor (ObjectStreamClass) of the superclass of the class represented by the receiver.
Return true if instances of class {@code cl} are Externalizable, false otherwise.
Return true if the type code <code>typecode<code> describes a primitive type {@code false} if the typecode represents an Object type (including arrays)
Return true if instances of class {@code cl} are Serializable, false otherwise.
Resolves the class properties, if they weren't already
Returns the descriptor for a serializable class. Returns null if the class doesn't implement {@code Serializable} or {@code Externalizable}.
Returns the descriptor for any class, whether or not the class implements Serializable or Externalizable.
Return the descriptor (ObjectStreamClass) corresponding to the class {@code cl}. Returns an ObjectStreamClass even if instances of the class cannot be serialized
Return the java.lang.reflect.Method if class <code>cl</code> implements <code>methodName</code> . Return null otherwise.
Return the java.lang.reflect.Method if class <code>cl</code> implements private <code>methodName</code> . Return null otherwise.
Set the class (java.lang.Class) that the receiver represents
Set the collection of field descriptors for the fields of the corresponding class
Set the collection of field descriptors for the input fields of the corresponding class
Set the flags for this descriptor, where possible combined values are ObjectStreamConstants.SC_WRITE_METHOD ObjectStreamConstants.SC_SERIALIZABLE ObjectStreamConstants.SC_EXTERNALIZABLE
Set the name of the class represented by the receiver
Set the Serial Version User ID of the class represented by the receiver
Set the descriptor for the superclass of the class described by the receiver
Constructs a new {@code ObjectStreamException} with its stack trace and detail message filled in.
Constructs an ObjectStreamField with the specified name and type.
Constructs an ObjectStreamField with the specified name, type and the indication if it is unshared.
Constructs an ObjectStreamField with the given name and the given type. The type may be null.
Compares this field descriptor to the specified one. Checks first if one of the compared fields has a primitive type and the other one not. If so, the field with the primitive type is considered to be "smaller". If both fields are equal, their names are compared.
Gets the name of this field.
Gets the offset of this field in the object.
Return the type of the field the receiver represents, this is an internal method Changed from private to default visibility for usage in ObjectStreamClass
Gets the type of this field.
Gets a character code for the type of this field. The following codes are used: <pre> B     byte C     char D     double F     float I     int J     long L     class or interface S     short Z     boolean [     array </pre>
Gets the type signature used by the VM to represent the type of this field.
Indicates whether this field's type is a primitive type.
Sets this field's offset in the object.
Indicates whether this field is unshared.
Resolves typeString into type. Returns true if the type is primitive and false otherwise.
Constructs a new {@code OptionalDataException} with its stack trace and detail message filled in.
Closes this stream. Implementations of this method should free any resources used by the stream. This implementation does nothing.
Flushes this stream. Implementations of this method should ensure that any buffered data is written out. This implementation does nothing.
Equivalent to {@code write(buffer, 0, buffer.length)}.
Writes {@code count} bytes from the byte array {@code buffer} starting at position {@code offset} to this stream.
Constructs a new OutputStreamWriter using {@code out} as the target stream to write converted characters to. The default character encoding is used.
Constructs a new OutputStreamWriter using {@code out} as the target stream to write converted characters to and {@code enc} as the character encoding. If the encoding cannot be found, an UnsupportedEncodingException error is thrown.
Constructs a new OutputStreamWriter using {@code out} as the target stream to write converted characters to and {@code cs} as the character encoding.
Constructs a new OutputStreamWriter using {@code out} as the target stream to write converted characters to and {@code enc} as the character encoder.
Constructs a new {@code PipedInputStream} connected to the {@link PipedOutputStream} {@code out}. Any data written to the output stream can be read from the this input stream.
Constructs a new unconnected {@code PipedInputStream} with the given buffer size. The resulting stream must be connected to a {@code PipedOutputStream} before data may be read from it.
Constructs a new {@code PipedInputStream} connected to the given {@code PipedOutputStream}, with the given buffer size. Any data written to the output stream can be read from this input stream.
Connects this {@code PipedInputStream} to a {@link PipedOutputStream}. Any data written to the output stream becomes readable in this input stream.
Establishes the connection to the PipedOutputStream.
Receives a byte and stores it in this stream's {@code buffer}. This method is called by {@link PipedOutputStream#write(int)}. The least significant byte of the integer {@code oneByte} is stored at index {@code in} in the {@code buffer}. <p> This method blocks as long as {@code buffer} is full.
Constructs a new {@code PipedOutputStream} connected to the {@link PipedInputStream} {@code target}. Any data written to this stream can be read from the target stream.
Connects this stream to a {@link PipedInputStream}. Any data written to this output stream becomes readable in the input stream.
Constructs a new {@code PipedReader} connected to the {@link PipedWriter} {@code out}. Any data written to the writer can be read from the this reader.
Constructs a new unconnected {@code PipedReader} with the given buffer size. The resulting reader must be connected to a {@code PipedWriter} before data may be read from it.
Constructs a new {@code PipedReader} connected to the given {@code PipedWriter}, with the given buffer size. Any data written to the writer can be read from this reader.
Connects this {@code PipedReader} to a {@link PipedWriter}. Any data written to the writer becomes readable in this reader.
Establishes the connection to the PipedWriter.
Receives a char and stores it into the PipedReader. This called by PipedWriter.write() when writes occur. <P> If the buffer is full and the thread sending #receive is interrupted, the InterruptedIOException will be thrown.
Receives a char array and stores it into the PipedReader. This called by PipedWriter.write() when writes occur. <P> If the buffer is full and the thread sending #receive is interrupted, the InterruptedIOException will be thrown.
Constructs a new {@code PipedWriter} connected to {@code destination}. Any data written to this writer can be read from {@code destination}.
Connects this {@code PipedWriter} to a {@link PipedReader}. Any data written to this writer becomes readable in the reader.
Constructs a new {@code PrintStream} with {@code out} as its target stream. By default, the new print stream does not automatically flush its contents to the target stream when a newline is encountered.
Constructs a new {@code PrintStream} with {@code out} as its target stream. The parameter {@code autoFlush} determines if the print stream automatically flushes its contents to the target stream when a newline is encountered.
Constructs a new {@code PrintStream} with {@code out} as its target stream and using the character encoding {@code enc} while writing. The parameter {@code autoFlush} determines if the print stream automatically flushes its contents to the target stream when a newline is encountered.
Constructs a new {@code PrintStream} with {@code file} as its target. The VM's default character set is used for character encoding.
Constructs a new {@code PrintStream} with {@code file} as its target. The character set named {@code csn} is used for character encoding.
Constructs a new {@code PrintStream} with the file identified by {@code fileName} as its target. The VM's default character set is used for character encoding.
Constructs a new {@code PrintStream} with the file identified by {@code fileName} as its target. The character set named {@code csn} is used for character encoding.
Flushes this stream and returns the value of the error flag.
Sets the error state of the stream to false.
Formats {@code args} according to the format string {@code format}, and writes the result to this stream. This method uses the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Writes a string formatted by an intermediate {@link Formatter} to this stream using the specified locale, format string and arguments.
Prints a formatted string. The behavior of this method is the same as this stream's {@code #format(String, Object...)} method. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Prints a formatted string. The behavior of this method is the same as this stream's {@code #format(Locale, String, Object...)} method.
Put the line separator String onto the print stream.
Prints the string representation of the character array {@code chars}.
Prints the string representation of the char {@code c}.
Prints the string representation of the double {@code d}.
Prints the string representation of the float {@code f}.
Prints the string representation of the int {@code i}.
Prints the string representation of the long {@code l}.
Prints the string representation of the Object {@code o}, or {@code "null"}.
Prints a string to the target stream. The string is converted to an array of bytes using the encoding chosen during the construction of this stream. The bytes are then written to the target stream with {@code write(int)}. <p>If an I/O error occurs, this stream's error state is set to {@code true}.
Prints the string representation of the boolean {@code b}.
Prints a newline.
Prints the string representation of the character array {@code chars} followed by a newline.
Prints the string representation of the char {@code c} followed by a newline.
Prints the string representation of the double {@code d} followed by a newline.
Prints the string representation of the float {@code f} followed by a newline.
Prints the string representation of the int {@code i} followed by a newline.
Prints the string representation of the long {@code l} followed by a newline.
Prints the string representation of the Object {@code o}, or {@code "null"}, followed by a newline.
Prints a string followed by a newline. The string is converted to an array of bytes using the encoding chosen during the construction of this stream. The bytes are then written to the target stream with {@code write(int)}. <p>If an I/O error occurs, this stream's error state is set to {@code true}.
Prints the string representation of the boolean {@code b} followed by a newline.
Sets the error flag of this print stream to true.
Appends the char {@code c}.
Appends the CharSequence {@code charSequence}, or {@code "null"}.
Appends a subsequence of CharSequence {@code charSequence}, or {@code "null"}.
Constructs a new {@code PrintWriter} with {@code out} as its target stream. By default, the new print writer does not automatically flush its contents to the target stream when a newline is encountered.
Constructs a new {@code PrintWriter} with {@code out} as its target stream. The parameter {@code autoFlush} determines if the print writer automatically flushes its contents to the target stream when a newline is encountered.
Constructs a new {@code PrintWriter} with {@code wr} as its target writer. By default, the new print writer does not automatically flush its contents to the target writer when a newline is encountered.
Constructs a new {@code PrintWriter} with {@code out} as its target writer. The parameter {@code autoFlush} determines if the print writer automatically flushes its contents to the target writer when a newline is encountered.
Constructs a new {@code PrintWriter} with {@code file} as its target. The VM's default character set is used for character encoding. The print writer does not automatically flush its contents to the target file when a newline is encountered. The output to the file is buffered.
Constructs a new {@code PrintWriter} with {@code file} as its target. The character set named {@code csn} is used for character encoding. The print writer does not automatically flush its contents to the target file when a newline is encountered. The output to the file is buffered.
Constructs a new {@code PrintWriter} with the file identified by {@code fileName} as its target. The VM's default character set is used for character encoding. The print writer does not automatically flush its contents to the target file when a newline is encountered. The output to the file is buffered.
Constructs a new {@code PrintWriter} with the file identified by {@code fileName} as its target. The character set named {@code csn} is used for character encoding. The print writer does not automatically flush its contents to the target file when a newline is encountered. The output to the file is buffered.
Flushes this writer and returns the value of the error flag.
Formats {@code args} according to the format string {@code format}, and writes the result to this stream. This method uses the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>". If automatic flushing is enabled then the buffer is flushed as well.
Writes a string formatted by an intermediate {@code Formatter} to the target using the specified locale, format string and arguments. If automatic flushing is enabled then this writer is flushed.
Prints a formatted string. The behavior of this method is the same as this writer's {@code #format(String, Object...)} method. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Prints a formatted string. The behavior of this method is the same as this writer's {@code #format(Locale, String, Object...)} method.
Prints the string representation of the specified character array to the target.
Prints the string representation of the specified character to the target.
Prints the string representation of the specified double to the target.
Prints the string representation of the specified float to the target.
Prints the string representation of the specified integer to the target.
Prints the string representation of the specified long to the target.
Prints the string representation of the specified object to the target.
Prints a string to the target. The string is converted to an array of bytes using the encoding chosen during the construction of this writer. The bytes are then written to the target with {@code write(int)}. <p> If an I/O error occurs, this writer's error flag is set to {@code true}.
Prints the string representation of the specified boolean to the target.
Prints a newline. Flushes this writer if the autoFlush flag is set to {@code true}.
Prints the string representation of the character array {@code chars} followed by a newline. Flushes this writer if the autoFlush flag is set to {@code true}.
Prints the string representation of the char {@code c} followed by a newline. Flushes this writer if the autoFlush flag is set to {@code true}.
Prints the string representation of the double {@code d} followed by a newline. Flushes this writer if the autoFlush flag is set to {@code true}.
Prints the string representation of the float {@code f} followed by a newline. Flushes this writer if the autoFlush flag is set to {@code true}.
Prints the string representation of the int {@code i} followed by a newline. Flushes this writer if the autoFlush flag is set to {@code true}.
Prints the string representation of the long {@code l} followed by a newline. Flushes this writer if the autoFlush flag is set to {@code true}.
Prints the string representation of the object {@code o}, or {@code "null}, followed by a newline. Flushes this writer if the autoFlush flag is set to {@code true}.
Prints the string representation of the string {@code s} followed by a newline. Flushes this writer if the autoFlush flag is set to {@code true}. <p>The string is converted to an array of bytes using the encoding chosen during the construction of this writer. The bytes are then written to the target with {@code write(int)}. Finally, this writer is flushed if the autoFlush flag is set to {@code true}. <p>If an I/O error occurs, this writer's error flag is set to {@code true}.
Prints the string representation of the boolean {@code b} followed by a newline. Flushes this writer if the autoFlush flag is set to {@code true}.
Sets the error flag of this writer to true.
Constructs a new {@code PushbackInputStream} with the specified input stream as source. The size of the pushback buffer is set to the default value of 1 byte. <p><strong>Warning:</strong> passing a null source creates an invalid {@code PushbackInputStream}. All read operations on such a stream will fail.
Constructs a new {@code PushbackInputStream} with {@code in} as source input stream. The size of the pushback buffer is set to {@code size}. <p><strong>Warning:</strong> passing a null source creates an invalid {@code PushbackInputStream}. All read operations on such a stream will fail.
Pushes all the bytes in {@code buffer} back to this stream. The bytes are pushed back in such a way that the next byte read from this stream is buffer[0], then buffer[1] and so on. <p> If this stream's internal pushback buffer cannot store the entire contents of {@code buffer}, an {@code IOException} is thrown. Parts of {@code buffer} may have already been copied to the pushback buffer when the exception is thrown.
Pushes a subset of the bytes in {@code buffer} back to this stream. The subset is defined by the start position {@code offset} within {@code buffer} and the number of bytes specified by {@code length}. The bytes are pushed back in such a way that the next byte read from this stream is {@code buffer[offset]}, then {@code buffer[1]} and so on. <p> If this stream's internal pushback buffer cannot store the selected subset of {@code buffer}, an {@code IOException} is thrown. Parts of {@code buffer} may have already been copied to the pushback buffer when the exception is thrown.
Pushes the specified byte {@code oneByte} back to this stream. Only the least significant byte of the integer {@code oneByte} is pushed back. This is done in such a way that the next byte read from this stream is {@code (byte) oneByte}. <p> If this stream's internal pushback buffer cannot store the byte, an {@code IOException} is thrown.
Constructs a new {@code PushbackReader} with the specified reader as source. The size of the pushback buffer is set to the default value of 1 character.
Constructs a new {@code PushbackReader} with {@code in} as source reader. The size of the pushback buffer is set to {@code size}.
Pushes all the characters in {@code buffer} back to this reader. The characters are pushed back in such a way that the next character read from this reader is buffer[0], then buffer[1] and so on. <p> If this reader's internal pushback buffer cannot store the entire contents of {@code buffer}, an {@code IOException} is thrown. Parts of {@code buffer} may have already been copied to the pushback buffer when the exception is thrown.
Pushes a subset of the characters in {@code buffer} back to this reader. The subset is defined by the start position {@code offset} within {@code buffer} and the number of characters specified by {@code length}. The bytes are pushed back in such a way that the next byte read from this stream is {@code buffer[offset]}, then {@code buffer[1]} and so on. <p> If this stream's internal pushback buffer cannot store the selected subset of {@code buffer}, an {@code IOException} is thrown. Parts of {@code buffer} may have already been copied to the pushback buffer when the exception is thrown.
Pushes the specified character {@code oneChar} back to this reader. This is done in such a way that the next character read from this reader is {@code (char) oneChar}. <p> If this reader's internal pushback buffer cannot store the character, an {@code IOException} is thrown.
Constructs a new {@code RandomAccessFile} based on {@code file} and opens it according to the access string in {@code mode}. <p><a id="accessmode"/> {@code mode} may have one of following values: <table border="0"> <tr> <td>{@code "r"}</td> <td>The file is opened in read-only mode. An {@code IOException} is thrown if any of the {@code write} methods is called.</td> </tr> <tr> <td>{@code "rw"}</td> <td>The file is opened for reading and writing. If the file does not exist, it will be created.</td> </tr> <tr> <td>{@code "rws"}</td> <td>The file is opened for reading and writing. Every change of the file's content or metadata must be written synchronously to the target device.</td> </tr> <tr> <td>{@code "rwd"}</td> <td>The file is opened for reading and writing. Every change of the file's content must be written synchronously to the target device.</td> </tr> </table>
Constructs a new {@code RandomAccessFile} based on the file named {@code fileName} and opens it according to the access string in {@code mode}. The file path may be specified absolutely or relative to the system property {@code "user.dir"}.
Closes this file.
Gets this file's {@link FileChannel} object. <p> The file channel's {@link FileChannel#position() position} is the same as this file's file pointer offset (see {@link #getFilePointer()}). Any changes made to this file's file pointer offset are also visible in the file channel's position and vice versa.
Gets this file's {@link FileDescriptor}. This represents the operating system resource for this random access file.
Gets the current position within this file. All reads and writes take place at the current file pointer position.
Returns the length of this file in bytes.
Reads a single byte from the current position in this file and returns it as an integer in the range from 0 to 255. Returns -1 if the end of the file has been reached. Blocks until one byte has been read, the end of the file is detected, or an exception is thrown.
Reads bytes from the current position in this file and stores them in the byte array {@code buffer}. The maximum number of bytes read corresponds to the size of {@code buffer}. Blocks until at least one byte has been read, the end of the file is detected, or an exception is thrown.
Reads at most {@code byteCount} bytes from the current position in this file and stores them in the byte array {@code buffer} starting at {@code byteOffset}. Blocks until at least one byte has been read, the end of the file is detected, or an exception is thrown.
Reads a boolean from the current position in this file. Blocks until one byte has been read, the end of the file is reached or an exception is thrown.
Reads an 8-bit byte from the current position in this file. Blocks until one byte has been read, the end of the file is reached or an exception is thrown.
Reads a big-endian 16-bit character from the current position in this file. Blocks until two bytes have been read, the end of the file is reached or an exception is thrown.
Reads a big-endian 64-bit double from the current position in this file. Blocks until eight bytes have been read, the end of the file is reached or an exception is thrown.
Reads a big-endian 32-bit float from the current position in this file. Blocks until four bytes have been read, the end of the file is reached or an exception is thrown.
Equivalent to {@code readFully(dst, 0, dst.length);}.
Reads {@code byteCount} bytes from this stream and stores them in the byte array {@code dst} starting at {@code offset}. If {@code byteCount} is zero, then this method returns without reading any bytes. Otherwise, this method blocks until {@code byteCount} bytes have been read. If insufficient bytes are available, {@code EOFException} is thrown. If an I/O error occurs, {@code IOException} is thrown. When an exception is thrown, some bytes may have been consumed from the stream and written into the array.
Reads a big-endian 32-bit integer from the current position in this file. Blocks until four bytes have been read, the end of the file is reached or an exception is thrown.
Reads a line of text form the current position in this file. A line is represented by zero or more characters followed by {@code '\n'}, {@code '\r'}, {@code "\r\n"} or the end of file marker. The string does not include the line terminating sequence. <p> Blocks until a line terminating sequence has been read, the end of the file is reached or an exception is thrown.
Reads a big-endian 64-bit long from the current position in this file. Blocks until eight bytes have been read, the end of the file is reached or an exception is thrown.
Reads a big-endian 16-bit short from the current position in this file. Blocks until two bytes have been read, the end of the file is reached or an exception is thrown.
Reads an unsigned 8-bit byte from the current position in this file and returns it as an integer. Blocks until one byte has been read, the end of the file is reached or an exception is thrown.
Reads an unsigned big-endian 16-bit short from the current position in this file and returns it as an integer. Blocks until two bytes have been read, the end of the file is reached or an exception is thrown.
Reads a string that is encoded in {@link DataInput modified UTF-8} from this file. The number of bytes that must be read for the complete string is determined by the first two bytes read from the file. Blocks until all required bytes have been read, the end of the file is reached or an exception is thrown.
Moves this file's file pointer to a new position, from where following {@code read}, {@code write} or {@code skip} operations are done. The position may be greater than the current length of the file, but the file's length will only change if the moving of the pointer is followed by a {@code write} operation.
Sets the length of this file to {@code newLength}. If the current file is smaller, it is expanded but the contents from the previous end of the file to the new end are undefined. The file is truncated if its current size is bigger than {@code newLength}. If the current file pointer position is in the truncated part, it is set to the end of the file.
Skips over {@code count} bytes in this file. Less than {@code count} bytes are skipped if the end of the file is reached or an exception is thrown during the operation. Nothing is done if {@code count} is negative.
Writes the entire contents of the byte array {@code buffer} to this file, starting at the current file pointer.
Writes {@code byteCount} bytes from the byte array {@code buffer} to this file, starting at the current file pointer and using {@code byteOffset} as the first position within {@code buffer} to get bytes.
Writes a byte to this file, starting at the current file pointer. Only the least significant byte of the integer {@code oneByte} is written.
Writes a boolean to this file as a single byte (1 for true, 0 for false), starting at the current file pointer.
Writes an 8-bit byte to this file, starting at the current file pointer. Only the least significant byte of the integer {@code val} is written.
Writes the low order 8-bit bytes from a string to this file, starting at the current file pointer.
Writes a big-endian 16-bit character to this file, starting at the current file pointer. Only the two least significant bytes of the integer {@code val} are written, with the high byte first.
Writes big-endian 16-bit characters from {@code str} to this file, starting at the current file pointer.
Writes a big-endian 64-bit double to this file, starting at the current file pointer. The bytes are those returned by {@link Double#doubleToLongBits(double)}, meaning a canonical NaN is used.
Writes a big-endian 32-bit float to this file, starting at the current file pointer. The bytes are those returned by {@link Float#floatToIntBits(float)}, meaning a canonical NaN is used.
Writes a big-endian 32-bit integer to this file, starting at the current file pointer.
Writes a big-endian 64-bit long to this file, starting at the current file pointer.
Writes a big-endian 16-bit short to this file, starting at the current file pointer. Only the two least significant bytes of the integer {@code val} are written.
Writes a string encoded with {@link DataInput modified UTF-8} to this file, starting at the current file pointer.
Constructs a new {@code Reader} with {@code this} as the object used to synchronize critical sections.
Constructs a new {@code Reader} with {@code lock} used to synchronize critical sections.
Closes this reader. Implementations of this method should free any resources associated with the reader.
Indicates whether this reader supports the {@code mark()} and {@code reset()} methods. This default implementation returns {@code false}.
Reads a single character from this reader and returns it as an integer with the two higher-order bytes set to 0. Returns -1 if the end of the reader has been reached.
Reads characters from this reader and stores them in the character array {@code buf} starting at offset 0. Returns the number of characters actually read or -1 if the end of the reader has been reached.
Reads at most {@code count} characters from this reader and stores them at {@code offset} in the character array {@code buf}. Returns the number of characters actually read or -1 if the end of the reader has been reached.
Resets this reader's position to the last {@code mark()} location. Invocations of {@code read()} and {@code skip()} will occur from this new location. If this reader has not been marked, the behavior of {@code reset()} is implementation specific. This default implementation throws an {@code IOException}.
Skips {@code charCount} characters in this reader. Subsequent calls of {@code read} methods will not return these characters unless {@code reset} is used. This method may perform multiple reads to read {@code charCount} characters.
Reads characters and puts them into the {@code target} character buffer.
Constructs a new {@code SequenceInputStream} using the two streams {@code s1} and {@code s2} as the sequence of streams to read from.
Constructs a new SequenceInputStream using the elements returned from Enumeration {@code e} as the stream sequence. The instances returned by {@code e.nextElement()} must be of type {@link InputStream}.
Sets up the next InputStream or leaves it alone if there are none left.
Returns the index where the key is found at, or the index of the next empty spot if the key is not found in this table.
Constructs a new {@code StreamCorruptedException} with its stack trace and detail message filled in.
Private constructor to initialize the default values according to the specification.
Constructs a new {@code StreamTokenizer} with {@code r} as source reader. The tokenizer's initial state is as follows: <ul> <li>All byte values 'A' through 'Z', 'a' through 'z', and '&#92;u00A0' through '&#92;u00FF' are considered to be alphabetic.</li> <li>All byte values '&#92;u0000' through '&#92;u0020' are considered to be white space. '/' is a comment character.</li> <li>Single quote '\'' and double quote '"' are string quote characters. </li> <li>Numbers are parsed.</li> <li>End of lines are considered to be white space rather than separate tokens.</li> <li>C-style and C++-style comments are not recognized.</LI> </ul>
Specifies that the character {@code ch} shall be treated as a comment character.
Specifies whether the end of a line is significant and should be returned as {@code TT_EOF} in {@code ttype} by this tokenizer.
Returns the current line number.
Specifies whether word tokens should be converted to lower case when they are stored in {@code sval}.
Parses the next token from this tokenizer's source stream or reader. The type of the token is stored in the {@code ttype} field, additional information may be stored in the {@code nval} or {@code sval} fields.
Specifies that the character {@code ch} shall be treated as an ordinary character by this tokenizer. That is, it has no special meaning as a comment character, word component, white space, string delimiter or number.
Specifies that the characters in the range from {@code low} to {@code hi} shall be treated as an ordinary character by this tokenizer. That is, they have no special meaning as a comment character, word component, white space, string delimiter or number.
Specifies that this tokenizer shall parse numbers.
Indicates that the current token should be pushed back and returned again the next time {@code nextToken()} is called.
Specifies that the character {@code ch} shall be treated as a quote character.
Specifies that all characters shall be treated as ordinary characters.
Specifies whether "slash-slash" (C++-style) comments shall be recognized. This kind of comment ends at the end of the line.
Specifies whether "slash-star" (C-style) comments shall be recognized. Slash-star comments cannot be nested and end when a star-slash combination is found.
Specifies that the characters in the range from {@code low} to {@code hi} shall be treated as whitespace characters by this tokenizer.
Specifies that the characters in the range from {@code low} to {@code hi} shall be treated as word characters by this tokenizer. A word consists of a word character followed by zero or more word or number characters.
Construct a new {@code StringBufferInputStream} with {@code str} as source. The size of the stream is set to the {@code length()} of the string.
Construct a new {@code StringReader} with {@code str} as source. The size of the reader is set to the {@code length()} of the string and the Object to synchronize access through is set to {@code str}.
Returns a boolean indicating whether this reader is closed.
Constructs a new {@code StringWriter} which has a {@link StringBuffer} allocated with the default size of 16 characters. The {@code StringBuffer} is also the {@code lock} used to synchronize access to this writer.
Constructs a new {@code StringWriter} which has a {@link StringBuffer} allocated with a size of {@code initialSize} characters. The {@code StringBuffer} is also the {@code lock} used to synchronize access to this writer.
Gets a reference to this writer's internal {@link StringBuffer}. Any changes made to the returned buffer are reflected in this writer.
Constructs a new {@code SyncFailedException} with its stack trace and detail message filled in.
Constructs a new {@code UnsupportedEncodingException} with its stack trace and detail message filled in.
Constructs a new {@code UTFDataFormatException} with its stack trace and detail message filled in.
Constructs a new {@code WriteAbortedException} with its stack trace, detail message and the exception which caused the underlying problem when serializing the object filled in.
Constructs a new {@code Writer} with {@code this} as the object used to synchronize critical sections.
Constructs a new {@code Writer} with {@code lock} used to synchronize critical sections.
Closes this writer. Implementations of this method should free any resources associated with the writer.
Writes {@code count} characters starting at {@code offset} in {@code buf} to the target.
Writes the characters from the specified string to the target.
Writes {@code count} characters from {@code str} starting at {@code offset} to the target.
Appends the character {@code c} to the target. This method works the same way as {@link #write(int)}.
Appends the character sequence {@code csq} to the target. This method works the same way as {@code Writer.write(csq.toString())}. If {@code csq} is {@code null}, then the string "null" is written to the target stream.
Appends a subsequence of the character sequence {@code csq} to the target. This method works the same way as {@code Writer.writer(csq.subsequence(start, end).toString())}. If {@code csq} is {@code null}, then the specified subsequence of the string "null" will be written to the target.
Returns true if this writer has encountered and suppressed an error. Used by PrintWriters as an alternative to checked exceptions.
Constructs an instance with the message provided.
Constructs an instance with a message and a cause.
Constructs an instance with a cause. If the cause is not {@code null}, then {@code cause.toString()} is used as the error's message.
Constructs an instance for the given type element and the type found.
Returns the method object for the invalid type.
Returns the invalid type.
Constructs an instance with the incomplete annotation type and the name of the element that's missing.
Returns the annotation type.
Returns the incomplete element's name.
Returns once all currently-enqueued references have been finalized.
Constructs a new phantom reference and registers it with the given reference queue. The reference queue may be {@code null}, but this case does not make any sense, since the reference will never be enqueued, and the {@link #get()} method always returns {@code null}.
Makes the referent {@code null}. This does not force the reference object to be enqueued.
Adds an object to its reference queue. become enqueued, or {@code false} otherwise
Forces the reference object to be enqueued if it has been associated with a queue. become enqueued, or {@code false} otherwise
Returns the referent of the reference object.
Checks whether the reference object has been enqueued.
Returns the next available reference from the queue, removing it in the process. Waits indefinitely for a reference to become available.
Returns the next available reference from the queue, removing it in the process. Waits for a reference to become available or the given timeout period to elapse, whichever happens first.
Enqueue the reference object on the receiver.
Constructs a new soft reference to the given referent. The newly created reference is not registered with any reference queue.
Constructs a new soft reference to the given referent. The newly created reference is registered with the given reference queue.
Constructs a new weak reference to the given referent. The newly created reference is not registered with any reference queue.
Constructs a new weak reference to the given referent. The newly created reference is registered with the given reference queue.
Attempts to set the value of the accessible flag for all the objects in the array provided. Setting this flag to {@code false} will enable access checks, setting to {@code true} will disable them.
Indicates whether this object is accessible without access checks being performed. Returns the accessible flag.
Attempts to set the value of the accessible flag. Setting this flag to {@code false} will enable access checks, setting to {@code true} will disable them.
Returns the signature for a class. This is the kind of signature used internally by the JVM, with one-character codes representing the basic types. It is not suitable for printing.
Returns a printable String consisting of the canonical names of the classes contained in an array. The form is that used in parameter and exception lists, that is, the class or type names are separated by commas.
Gets the Signature attribute for this instance. Returns {@code null} if not found.
Retrieve the signature attribute from an arbitrary class.  This is the same as Class.getSignatureAttribute(), but it can be used from the java.lang.reflect package.
Appends the specified class name to the buffer. The class may represent a simple type, a reference type or an array type.
Appends names of the specified array classes to the buffer. The array elements may represent a simple type, a reference type or an array type. Output format: java.lang.Object[], java.io.File, void
Appends the generic type representation to the buffer.
Prevent this class from being instantiated.
Returns the element of the array at the specified index. This reproduces the effect of {@code array[index]}. If the array component is a primitive type, the result is automatically boxed.
Returns the element of the array at the specified index, converted to a {@code boolean}, if possible. This reproduces the effect of {@code array[index]}
Returns the element of the array at the specified index, converted to a {@code byte}, if possible. This reproduces the effect of {@code array[index]}
Returns the element of the array at the specified index, converted to a {@code char}, if possible. This reproduces the effect of {@code array[index]}
Returns the element of the array at the specified index, converted to a {@code double}, if possible. This reproduces the effect of {@code array[index]}
Returns the element of the array at the specified index, converted to a {@code float}, if possible. This reproduces the effect of {@code array[index]}
Returns the element of the array at the specified index, converted to an {@code int}, if possible. This reproduces the effect of {@code array[index]}
Returns the length of the array. This reproduces the effect of {@code array.length}
Returns the element of the array at the specified index, converted to a {@code long}, if possible. This reproduces the effect of {@code array[index]}
Returns the element of the array at the specified index, converted to a {@code short}, if possible. This reproduces the effect of {@code array[index]}
Returns a new multidimensional array of the specified component type and dimensions. This reproduces the effect of {@code new componentType[d0][d1]...[dn]} for a dimensions array of { d0, d1, ... , dn }.
Create a multi-dimensional array of objects with the specified type.
Create a one-dimensional array of objects with the specified type.
Sets the element of the array at the specified index to the {@code boolean} value. This reproduces the effect of {@code array[index] = value}.
Sets the element of the array at the specified index to the {@code byte} value. This reproduces the effect of {@code array[index] = value}.
Set the element of the array at the specified index to the {@code char} value. This reproduces the effect of {@code array[index] = value}.
Set the element of the array at the specified index to the {@code double} value. This reproduces the effect of {@code array[index] = value}.
Set the element of the array at the specified index to the {@code float} value. This reproduces the effect of {@code array[index] = value}.
Set the element of the array at the specified index to the {@code int} value. This reproduces the effect of {@code array[index] = value}.
Set the element of the array at the specified index to the {@code long} value. This reproduces the effect of {@code array[index] = value}.
Set the element of the array at the specified index to the {@code short} value. This reproduces the effect of {@code array[index] = value}.
Prevent this class from being instantiated.
Creates an instance of the class. Only called from native code, thus private.
Returns the string representation of the constructor's declaration, including the type parameters.
Returns the generic parameter types as an array of {@code Type} instances, in declaration order. If this constructor has no generic parameters, an empty array is returned.
Returns the exception types as an array of {@code Type} instances. If this constructor has no declared exceptions, an empty array will be returned.
Returns an array of arrays that represent the annotations of the formal parameters of this constructor. If there are no parameters on this constructor, then an empty array is returned. If there are no annotations set, then an array of empty arrays is returned.
Indicates whether or not this constructor takes a variable number of arguments.
Indicates whether or not this constructor is synthetic (artificially introduced by the compiler).
Returns the class that declares this constructor.
Returns the exception types as an array of {@code Class} instances. If this constructor has no declared exceptions, an empty array will be returned.
Returns the modifiers for this constructor. The {@link Modifier} class should be used to decode the result.
Returns the name of this constructor.
Returns an array of the {@code Class} objects associated with the parameter types of this constructor. If the constructor was declared with no parameters, an empty array will be returned.
Returns a new instance of the declaring class, initialized by dynamically invoking the constructor represented by this {@code Constructor} object. This reproduces the effect of {@code new declaringClass(arg1, arg2, ... , argN)} This method performs the following: <ul> <li>A new instance of the declaring class is created. If the declaring class cannot be instantiated (i.e. abstract class, an interface, an array type, or a primitive type) then an InstantiationException is thrown.</li> <li>If this Constructor object is enforcing access control (see {@link AccessibleObject}) and this constructor is not accessible from the current context, an IllegalAccessException is thrown.</li> <li>If the number of arguments passed and the number of parameters do not match, an IllegalArgumentException is thrown.</li> <li>For each argument passed: <ul> <li>If the corresponding parameter type is a primitive type, the argument is unboxed. If the unboxing fails, an IllegalArgumentException is thrown.</li> <li>If the resulting argument cannot be converted to the parameter type via a widening conversion, an IllegalArgumentException is thrown.</li> </ul> <li>The constructor represented by this {@code Constructor} object is then invoked. If an exception is thrown during the invocation, it is caught and wrapped in an InvocationTargetException. This exception is then thrown. If the invocation completes normally, the newly initialized object is returned. </ul>
Construct a clone of the given instance.
Indicates whether or not this field is synthetic.
Returns the string representation of this field, including the field's generic type.
Indicates whether or not this field is an enumeration constant.
Returns the generic type of this field.
Returns the value of the field in the specified object. This reproduces the effect of {@code object.fieldName} <p>If the type of this field is a primitive type, the field value is automatically boxed. <p>If this field is static, the object argument is ignored. Otherwise, if the object is null, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p>If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown.
Returns the value of the field in the specified object as a {@code boolean}. This reproduces the effect of {@code object.fieldName} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown.
Returns the value of the field in the specified object as a {@code byte}. This reproduces the effect of {@code object.fieldName} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown.
Returns the value of the field in the specified object as a {@code char}. This reproduces the effect of {@code object.fieldName} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown.
Returns the class that declares this field.
Returns the value of the field in the specified object as a {@code double}. This reproduces the effect of {@code object.fieldName} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown.
Returns the value of the field in the specified object as a {@code float} . This reproduces the effect of {@code object.fieldName} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown.
Returns the value of the field in the specified object as an {@code int}. This reproduces the effect of {@code object.fieldName} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown.
Returns the value of the field in the specified object as a {@code long}. This reproduces the effect of {@code object.fieldName} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown.
Returns the modifiers for this field. The {@link Modifier} class should be used to decode the result.
Returns the value of the field in the specified object as a {@code short} . This reproduces the effect of {@code object.fieldName} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown.
Return the {@link Class} associated with the type of this field.
Sets the value of the field in the specified object to the value. This reproduces the effect of {@code object.fieldName = value} <p>If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p>If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown. <p>If the field type is a primitive type, the value is automatically unboxed. If the unboxing fails, an IllegalArgumentException is thrown. If the value cannot be converted to the field type via a widening conversion, an IllegalArgumentException is thrown.
Sets the value of the field in the specified object to the {@code boolean} value. This reproduces the effect of {@code object.fieldName = value} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown. <p> If the value cannot be converted to the field type via a widening conversion, an IllegalArgumentException is thrown.
Sets the value of the field in the specified object to the {@code byte} value. This reproduces the effect of {@code object.fieldName = value} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown. <p> If the value cannot be converted to the field type via a widening conversion, an IllegalArgumentException is thrown.
Sets the value of the field in the specified object to the {@code char} value. This reproduces the effect of {@code object.fieldName = value} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown. <p> If the value cannot be converted to the field type via a widening conversion, an IllegalArgumentException is thrown.
Sets the value of the field in the specified object to the {@code double} value. This reproduces the effect of {@code object.fieldName = value} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown. <p> If the value cannot be converted to the field type via a widening conversion, an IllegalArgumentException is thrown.
Sets the value of the field in the specified object to the {@code float} value. This reproduces the effect of {@code object.fieldName = value} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown. <p> If the value cannot be converted to the field type via a widening conversion, an IllegalArgumentException is thrown.
Set the value of the field in the specified object to the {@code int} value. This reproduces the effect of {@code object.fieldName = value} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown. <p> If the value cannot be converted to the field type via a widening conversion, an IllegalArgumentException is thrown.
Sets the value of the field in the specified object to the {@code long} value. This reproduces the effect of {@code object.fieldName = value} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown. <p> If the value cannot be converted to the field type via a widening conversion, an IllegalArgumentException is thrown.
Sets the value of the field in the specified object to the {@code short} value. This reproduces the effect of {@code object.fieldName = value} <p> If this field is static, the object argument is ignored. Otherwise, if the object is {@code null}, a NullPointerException is thrown. If the object is not an instance of the declaring class of the method, an IllegalArgumentException is thrown. <p> If this Field object is enforcing access control (see AccessibleObject) and this field is not accessible from the current context, an IllegalAccessException is thrown. <p> If the value cannot be converted to the field type via a widening conversion, an IllegalArgumentException is thrown.
Constructs a new {@code InvocationTargetException} instance with a {@code null} cause / target exception.
Constructs a new {@code InvocationTargetException} instance with its cause / target exception filled in.
Constructs a new {@code InvocationTargetException} instance with its cause / target exception and message filled in.
Returns the target exception, which may be {@code null}.
Orders methods by their name, parameters and return type.
Construct a clone of the given instance.
Returns the string representation of the method's declaration, including the type parameters.
Returns the parameter types as an array of {@code Type} instances, in declaration order. If this method has no parameters, an empty array is returned.
Returns the exception types as an array of {@code Type} instances. If this method has no declared exceptions, an empty array will be returned.
Returns the return type of this method as a {@code Type} instance.
Creates an array of empty Annotation arrays.
Returns an array of arrays that represent the annotations of the formal parameters of this method. If there are no parameters on this method, then an empty array is returned. If there are no annotations set, then and array of empty arrays is returned.
Indicates whether or not this method takes a variable number argument.
Indicates whether or not this method is a bridge.
Indicates whether or not this method is synthetic.
Returns the default value for the annotation member represented by this method.
Returns the class that declares this method.
Returns the exception types as an array of {@code Class} instances. If this method has no declared exceptions, an empty array is returned.
Returns the modifiers for this method. The {@link Modifier} class should be used to decode the result.
Returns the name of the method represented by this {@code Method} instance.
Returns an array of {@code Class} objects associated with the parameter types of this method. If the method was declared with no parameters, an empty array will be returned.
Returns the {@code Class} associated with the return type of this method.
Returns the result of dynamically invoking this method. Equivalent to {@code receiver.methodName(arg1, arg2, ... , argN)}. <p>If the method is static, the receiver argument is ignored (and may be null). <p>If the method takes no arguments, you can pass {@code (Object[]) null} instead of allocating an empty array. <p>If you're calling a varargs method, you need to pass an {@code Object[]} for the varargs parameter: that conversion is usually done in {@code javac}, not the VM, and the reflection machinery does not do this for you. (It couldn't, because it would be ambiguous.) <p>Reflective method invocation follows the usual process for method lookup. <p>If an exception is thrown during the invocation it is caught and wrapped in an InvocationTargetException. This exception is then thrown. <p>If the invocation completes normally, the return value itself is returned. If the method is declared to return a primitive type, the return value is boxed. If the return type is void, null is returned.
Returns a mask of all the modifiers that may be applied to classes.
Returns a mask of all the modifiers that may be applied to constructors.
Returns a mask of all the modifiers that may be applied to fields.
Returns a mask of all the modifiers that may be applied to interfaces.
Returns a mask of all the modifiers that may be applied to methods.
Indicates whether or not the specified modifiers contain the {@code abstract} modifier.
Indicates whether or not the specified modifiers contain the {@code final} modifier.
Indicates whether or not the specified modifiers contain the {@code interface} modifier.
Indicates whether or not the specified modifiers contain the {@code native} modifier.
Indicates whether or not the specified modifiers contain the {@code private} modifier.
Indicates whether or not the specified modifiers contain the {@code protected} modifier.
Indicates whether or not the specified modifiers contain the {@code public} modifier.
Indicates whether or not the specified modifiers contain the {@code static} modifier.
Indicates whether or not the specified modifiers contain the {@code strict} modifier.
Indicates whether or not the specified modifiers contain the {@code synchronized} modifier.
Indicates whether or not the specified modifiers contain the {@code transient} modifier.
Indicates whether or not the specified modifiers contain the {@code volatile} modifier.
Returns a string containing the string representation of all modifiers present in the specified modifiers. Modifiers appear in the order specified by the Java Language Specification: {@code public private protected abstract static final transient volatile native synchronized interface strict}
Constructs a new {@code Proxy} instance with the specified invocation handler.
Returns the dynamically built {@code Class} for the specified interfaces. Creates a new {@code Class} when necessary. The order of the interfaces is relevant. Invocations of this method with the same interfaces but different order result in different generated classes. The interfaces must be visible from the supplied class loader; no duplicates are permitted. All non-public interfaces must be defined in the same package.
Returns an instance of the dynamically built class for the specified interfaces. Method invocations on the returned instance are forwarded to the specified invocation handler. The interfaces must be visible from the supplied class loader; no duplicates are permitted. All non-public interfaces must be defined in the same package.
Indicates whether or not the specified class is a dynamically generated proxy class.
Returns the invocation handler of the specified proxy instance.
Constructs a new {@code UndeclaredThrowableException} instance with the undeclared, checked exception that occurred.
Constructs a new {@code UndeclaredThrowableException} instance with the undeclared, checked exception that occurred and a message.
Returns the undeclared, checked exception that occurred, which may be {@code null}.
Constructs a new {@code AbstractMethodError} with the current stack trace and the specified detail message.
Returns the character array.
Returns the underlying buffer and sets the shared flag.
Restores internal state after deserialization.
Returns the number of characters that can be held without growing.
Retrieves the character at the {@code index}.
Ensures that this object has a minimum capacity available before requiring the internal buffer to be enlarged. The general policy of this method is that if the {@code minimumCapacity} is larger than the current {@link #capacity()}, then the capacity will be increased to the largest value of either the {@code minimumCapacity} or the current capacity multiplied by two plus two. Although this is the general policy, there is no guarantee that the capacity will change.
Copies the requested sequence of characters into {@code dst} passed starting at {@code dst}.
The current length.
Sets the character at the {@code index}.
Sets the current length to a new value. If the new length is larger than the current length, then the new characters at the end of this object will contain the {@code char} value of {@code \u0000}.
Returns the String value of the subsequence from the {@code start} index to the current end.
Returns the String value of the subsequence from the {@code start} index to the {@code end} index.
Returns a {@code CharSequence} of the subsequence from the {@code start} index to the {@code end} index.
Searches for the first index of the specified character. The search for the character starts at the beginning and moves towards the end.
Searches for the index of the specified character. The search for the character starts at the specified offset and moves towards the end.
Searches for the last index of the specified character. The search for the character starts at the end and moves towards the beginning.
Searches for the index of the specified character. The search for the character starts at the specified offset and moves towards the beginning.
Trims off any extra capacity beyond the current length. Note, this method is NOT guaranteed to change the capacity of this object.
Retrieves the Unicode code point value at the {@code index}.
Retrieves the Unicode code point value that precedes the {@code index}.
Calculates the number of Unicode code points between {@code start} and {@code end}.
Returns the index that is offset {@code codePointOffset} code points from {@code index}.
Constructs a new {@code ArithmeticException} with the current stack trace and the specified detail message.
Constructs a new {@code ArrayIndexOutOfBoundsException} with the current stack trace and a detail message that is based on the specified invalid {@code index}.
Constructs a new {@code ArrayIndexOutOfBoundsException} with the current stack trace and the specified detail message.
Used internally for consistent high-quality error reporting.
Constructs a new {@code ArrayStoreException} with the current stack trace and the specified detail message.
Constructs a new {@code AssertionError} with the given detail message and cause.
Constructs a new {@code AssertionError} with a message based on calling {@link String#valueOf(Object)} with the specified object. If the object is an instance of {@link Throwable}, then it also becomes the cause of this error.
Constructs a new {@code AssertionError} with a message based on calling {@link String#valueOf(boolean)} with the specified boolean value.
Constructs a new {@code AssertionError} with a message based on calling {@link String#valueOf(char)} with the specified character value.
Constructs a new {@code AssertionError} with a message based on calling {@link String#valueOf(int)} with the specified integer value.
Constructs a new {@code AssertionError} with a message based on calling {@link String#valueOf(long)} with the specified long value.
Constructs a new {@code AssertionError} with a message based on calling {@link String#valueOf(float)} with the specified float value.
Constructs a new {@code AssertionError} with a message based on calling {@link String#valueOf(double)} with the specified double value.
Constructs a new {@code Boolean} with its boolean value specified by {@code string}. If {@code string} is not {@code null} and is equal to "true" using a non-case sensitive comparison, the result will be a Boolean representing the primitive value {@code true}, otherwise it will be a Boolean representing the primitive value {@code false}.
Constructs a new {@code Boolean} with the specified primitive boolean value.
Gets the primitive value of this boolean, either {@code true} or {@code false}.
Compares this object to the specified boolean object to determine their relative order.
Compares two {@code boolean} values.
Returns the {@code boolean} value of the system property identified by {@code string}.
Parses the specified string as a {@code boolean}.
Converts the specified boolean to its string representation.
Parses the specified string as a boolean value.
Returns a {@code Boolean} instance for the specified boolean value. <p> If it is not necessary to get a new {@code Boolean} instance, it is recommended to use this method instead of the constructor, since it returns its static instances, which results in better performance.
Constructs a new {@code Byte} with the specified primitive byte value.
Constructs a new {@code Byte} from the specified string.
Compares this object to the specified byte object to determine their relative order.
Compares two {@code byte} values.
Parses the specified string and returns a {@code Byte} instance if the string can be decoded into a single byte value. The string may be an optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."), octal ("0..."), or decimal ("...") representation of a byte.
Parses the specified string as a signed decimal byte value. The ASCII character \u002d ('-') is recognized as the minus sign.
Parses the specified string as a signed byte value using the specified radix. The ASCII character \u002d ('-') is recognized as the minus sign.
Returns a two-digit hex string. That is, -1 becomes "ff" or "FF" and 2 becomes "02".
Returns a string containing a concise, human-readable description of the specified byte value.
Parses the specified string as a signed decimal byte value.
Parses the specified string as a signed byte value using the specified radix.
Returns a {@code Byte} instance for the specified byte value. <p> If it is not necessary to get a new {@code Byte} instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance.
Implements String.toLowerCase. We need 's' so that we can return the original String instance if nothing changes. We need 'value', 'offset', and 'count' because they're not otherwise accessible.
True if 'index' is preceded by a sequence consisting of a cased letter and a case-ignorable sequence, and 'index' is not followed by a sequence consisting of an ignorable sequence and then a cased letter.
Return the index of the specified character into the upperValues table. The upperValues table contains three entries at each position. These three characters are the upper case conversion. If only two characters are used, the third character in the table is \u0000.
Constructs a new {@code Subset}.
Retrieves the constant that corresponds to the specified block name. The block names are defined by the Unicode 4.0.1 specification in the {@code Blocks-4.0.1.txt} file. <p> Block names may be one of the following: <ul> <li>Canonical block name, as defined by the Unicode specification; case-insensitive.</li> <li>Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive.</li> <li>{@code UnicodeBlock} constant identifier. This is determined by uppercasing the canonical name and replacing all spaces and hyphens with underscores.</li> </ul>
Gets the constant for the Unicode block that contains the specified character.
Gets the constant for the Unicode block that contains the specified Unicode code point.
Constructs a new {@code Character} with the specified primitive char value.
Gets the primitive value of this character.
Compares this object to the specified character object to determine their relative order.
Compares two {@code char} values.
Returns a {@code Character} instance for the {@code char} value passed. <p> If it is not necessary to get a new {@code Character} instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance.
Indicates whether {@code codePoint} is a valid Unicode code point.
Indicates whether {@code codePoint} is within the supplementary code point range.
Indicates whether {@code ch} is a high- (or leading-) surrogate code unit that is used for representing supplementary characters in UTF-16 encoding.
Indicates whether {@code ch} is a low- (or trailing-) surrogate code unit that is used for representing supplementary characters in UTF-16 encoding.
Tests whether the given character is a high or low surrogate.
Indicates whether the specified character pair is a valid surrogate pair.
Calculates the number of {@code char} values required to represent the specified Unicode code point. This method checks if the {@code codePoint} is greater than or equal to {@code 0x10000}, in which case {@code 2} is returned, otherwise {@code 1}. To test if the code point is valid, use the {@link #isValidCodePoint(int)} method.
Converts a surrogate pair into a Unicode code point. This method assumes that the pair are valid surrogates. If the pair are <i>not</i> valid surrogates, then the result is indeterminate. The {@link #isSurrogatePair(char, char)} method should be used prior to this method to validate the pair.
Returns the code point at {@code index} in the specified sequence of character units. If the unit at {@code index} is a high-surrogate unit, {@code index + 1} is less than the length of the sequence and the unit at {@code index + 1} is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the {@code char} value at {@code index} is returned.
Returns the code point at {@code index} in the specified array of character units. If the unit at {@code index} is a high-surrogate unit, {@code index + 1} is less than the length of the array and the unit at {@code index + 1} is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the {@code char} value at {@code index} is returned.
Returns the code point at {@code index} in the specified array of character units, where {@code index} has to be less than {@code limit}. If the unit at {@code index} is a high-surrogate unit, {@code index + 1} is less than {@code limit} and the unit at {@code index + 1} is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the {@code char} value at {@code index} is returned.
Returns the code point that precedes {@code index} in the specified sequence of character units. If the unit at {@code index - 1} is a low-surrogate unit, {@code index - 2} is not negative and the unit at {@code index - 2} is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the {@code char} value at {@code index - 1} is returned.
Returns the code point that precedes {@code index} in the specified array of character units. If the unit at {@code index - 1} is a low-surrogate unit, {@code index - 2} is not negative and the unit at {@code index - 2} is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the {@code char} value at {@code index - 1} is returned.
Returns the code point that precedes the {@code index} in the specified array of character units and is not less than {@code start}. If the unit at {@code index - 1} is a low-surrogate unit, {@code index - 2} is not less than {@code start} and the unit at {@code index - 2} is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the {@code char} value at {@code index - 1} is returned.
Converts the specified Unicode code point into a UTF-16 encoded sequence and copies the value(s) into the char array {@code dst}, starting at index {@code dstIndex}.
Converts the specified Unicode code point into a UTF-16 encoded sequence and returns it as a char array.
Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by {@code beginIndex} and {@code endIndex}. Any surrogate values with missing pair values will be counted as one code point.
Counts the number of Unicode code points in the subsequence of the specified char array, as delineated by {@code offset} and {@code count}. Any surrogate values with missing pair values will be counted as one code point.
Determines the index in the specified character sequence that is offset {@code codePointOffset} code points from {@code index}.
Determines the index in a subsequence of the specified character array that is offset {@code codePointOffset} code points from {@code index}. The subsequence is delineated by {@code start} and {@code count}.
Convenience method to determine the value of the specified character {@code c} in the supplied radix. The value of {@code radix} must be between MIN_RADIX and MAX_RADIX.
Convenience method to determine the value of the character {@code codePoint} in the supplied radix. The value of {@code radix} must be between MIN_RADIX and MAX_RADIX.
Returns the character which represents the specified digit in the specified radix. The {@code radix} must be between {@code MIN_RADIX} and {@code MAX_RADIX} inclusive; {@code digit} must not be negative and smaller than {@code radix}. If any of these conditions does not hold, 0 is returned.
Returns the name of the given code point, or null if the code point is unassigned. <p>As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. <p>Examples: <ul> <li>{@code Character.getName(0)} returns "NULL". <li>{@code Character.getName('e')} returns "LATIN SMALL LETTER E". <li>{@code Character.getName('\u0666')} returns "ARABIC-INDIC DIGIT SIX". <li>{@code Character.getName(0xe000)} returns "PRIVATE USE AREA E000". </ul>
Returns the numeric value of the specified Unicode character. See {@link #getNumericValue(int)}.
Gets the numeric value of the specified Unicode code point. For example, the code point '\u216B' stands for the Roman number XII, which has the numeric value 12. <p>There are two points of divergence between this method and the Unicode specification. This method treats the letters a-z (in both upper and lower cases, and their full-width variants) as numbers from 10 to 35. The Unicode specification also supports the idea of code points with non-integer numeric values; this method does not (except to the extent of returning -2 for such code points).
Gets the general Unicode category of the specified character.
Gets the general Unicode category of the specified code point.
Gets the Unicode directionality of the specified character.
Indicates whether the specified character is mirrored.
Indicates whether the specified code point is mirrored.
Returns the high surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
Returns the low surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
Tests whether the given code point is in the Basic Multilingual Plane (BMP). Such code points can be represented by a single {@code char}.
Indicates whether the specified character is defined in the Unicode specification.
Indicates whether the specified code point is defined in the Unicode specification.
Indicates whether the specified character is a digit.
Indicates whether the specified code point is a digit.
Indicates whether the specified character is ignorable in a Java or Unicode identifier.
Indicates whether the specified code point is ignorable in a Java or Unicode identifier.
Indicates whether the specified character is an ISO control character.
Indicates whether the specified code point is an ISO control character.
Indicates whether the specified character is a valid part of a Java identifier other than the first character.
Indicates whether the specified code point is a valid part of a Java identifier other than the first character.
Indicates whether the specified character is a valid first character for a Java identifier.
Indicates whether the specified code point is a valid first character for a Java identifier.
Indicates whether the specified character is a letter.
Indicates whether the specified code point is a letter.
Indicates whether the specified character is a letter or a digit.
Indicates whether the specified code point is a letter or a digit.
Indicates whether the specified character is a lower case letter.
Indicates whether the specified code point is a lower case letter.
Indicates whether the specified character is a Unicode space character. That is, if it is a member of one of the Unicode categories Space Separator, Line Separator, or Paragraph Separator.
Indicates whether the specified code point is a Unicode space character. That is, if it is a member of one of the Unicode categories Space Separator, Line Separator, or Paragraph Separator.
Indicates whether the specified character is a titlecase character.
Indicates whether the specified code point is a titlecase character.
Indicates whether the specified character is valid as part of a Unicode identifier other than the first character.
Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character.
Indicates whether the specified character is a valid initial character for a Unicode identifier.
Indicates whether the specified code point is a valid initial character for a Unicode identifier.
Indicates whether the specified character is an upper case letter.
Indicates whether the specified code point is an upper case letter.
Indicates whether the specified character is a whitespace character in Java.
Indicates whether the specified code point is a whitespace character in Java.
Reverses the order of the first and second byte in the specified character.
Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged.
Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged.
Converts the specified character to its string representation.
Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged.
Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged.
Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged.
Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged.
Get the Signature attribute for this class.  Returns null if not found.
Returns a {@code Class} object which represents the class with the specified name. The name should be the name of a class as described in the {@link Class class definition}; however, {@code Class}es representing primitive types can not be found using this method. <p> If the class has not been loaded so far, it is being loaded and linked first. This is done through either the class loader of the calling class or one of its parent class loaders. The class is also being initialized, which means that a possible static initializer block is executed.
Returns a {@code Class} object which represents the class with the specified name. The name should be the name of a class as described in the {@link Class class definition}, however {@code Class}es representing primitive types can not be found using this method. Security rules will be obeyed. <p> If the class has not been loaded so far, it is being loaded and linked first. This is done through either the specified class loader or one of its parent class loaders. The caller can also request the class to be initialized, which means that a possible static initializer block is executed.
Returns a class by name without any security checks.
Returns all the annotations of this class. If there are no annotations then an empty array is returned.
Returns the canonical name of this class. If this class does not have a canonical name as defined in the Java Language Specification, then the method returns {@code null}.
Returns the class loader which was used to load the class represented by this {@code Class}. Implementations are free to return {@code null} for classes that were loaded by the bootstrap class loader. The Android reference implementation, though, returns a reference to an actual representation of the bootstrap class loader.
This must be provided by the VM vendor, as it is used by other provided class implementations in this package. Outside of this class, it is used by SecurityManager.classLoaderDepth(), currentClassLoader() and currentLoadedClass(). Return the ClassLoader for this Class without doing any security checks. The bootstrap ClassLoader is returned, unlike getClassLoader() which returns null in place of the bootstrap ClassLoader.
Returns a constructor or method with the specified name.
Returns an array containing {@code Constructor} objects for all public constructors for the class represented by this {@code Class}. If there are no public constructors or if this {@code Class} represents an array class, a primitive type or void then an empty array is returned.
Returns an array containing {@code Class} objects for all classes and interfaces that are declared as members of the class which this {@code Class} represents. If there are no classes or interfaces declared or if this class represents an array class, a primitive type or void, then an empty array is returned.
Returns the list of member classes without performing any security checks first. This includes the member classes inherited from superclasses. If no member classes exist at all, an empty array is returned.
Returns an array containing {@code Constructor} objects for all constructors declared in the class represented by this {@code Class}. If there are no constructors or if this {@code Class} represents an array class, a primitive type or void then an empty array is returned.
Returns a {@code Field} object for the field with the specified name which is declared in the class represented by this {@code Class}.
Returns an array containing {@code Field} objects for all fields declared in the class represented by this {@code Class}. If there are no fields or if this {@code Class} represents an array class, a primitive type or void then an empty array is returned.
Returns a {@code Method} object which represents the method matching the specified name and parameter types that is declared by the class represented by this {@code Class}.
Returns an array containing {@code Method} objects for all methods declared in the class represented by this {@code Class}. If there are no methods or if this {@code Class} represents an array class, a primitive type or void then an empty array is returned.
Returns a {@code Field} object which represents the public field with the specified name. This method first searches the class C represented by this {@code Class}, then the interfaces implemented by C and finally the superclasses of C.
Returns an array containing {@code Field} objects for all public fields for the class C represented by this {@code Class}. Fields may be declared in C, the interfaces it implements or in the superclasses of C. The elements in the returned array are in no particular order. <p>If there are no public fields or if this class represents an array class, a primitive type or {@code void} then an empty array is returned.
Populates {@code result} with public fields defined by this class, its superclasses, and all implemented interfaces.
Gets the {@link Type}s of the interfaces that this {@code Class} directly implements. If the {@code Class} represents a primitive type or {@code void} then an empty array is returned.
Gets the {@code Type} that represents the superclass of this {@code class}.
Returns a {@code Method} object which represents the public method with the specified name and parameter types. This method first searches the class C represented by this {@code Class}, then the superclasses of C and finally the interfaces implemented by C and finally the superclasses of C for a method with matching name.
Returns an array containing {@code Method} objects for all public methods for the class C represented by this {@code Class}. Methods may be declared in C, the interfaces it implements or in the superclasses of C. The elements in the returned array are in no particular order. <p> If there are no public methods or if this {@code Class} represents a primitive type or {@code void} then an empty array is returned. </p>
Populates {@code result} with public methods defined by {@code clazz}, its superclasses, and all implemented interfaces, including overridden methods.
Returns an integer that represents the modifiers of the class represented by this {@code Class}. The returned value is a combination of bits defined by constants in the {@link Modifier} class.
Returns the name of the class represented by this {@code Class}. For a description of the format which is used, see the class definition of {@link Class}.
Returns the simple name of the class represented by this {@code Class} as defined in the source code. If there is no name (that is, the class is anonymous) then an empty string is returned. If the receiver is an array then the name of the underlying type with square braces appended (for example {@code "Integer[]"}) is returned.
Returns null.
Returns the URL of the resource specified by {@code resName}. The mapping between the resource name and the URL is managed by the class' class loader.
Returns a read-only stream for the contents of the resource specified by {@code resName}. The mapping between the resource name and the stream is managed by the class' class loader.
Returns null. (On Android, a {@code ClassLoader} can load classes from multiple dex files. All classes from any given dex file will have the same signers, but different dex files may have different signers. This does not fit well with the original {@code ClassLoader}-based model of {@code getSigners}.)
Indicates whether this {@code Class} represents an annotation class.
Indicates whether the class represented by this {@code Class} is an array class.
Indicates whether the class represented by this {@code Class} is an {@code enum}.
Indicates whether the class represented by this {@code Class} is defined locally.
Indicates whether the class represented by this {@code Class} is a member class.
Indicates whether this {@code Class} represents a synthetic type.
Returns a new instance of the class represented by this {@code Class}, there is no such constructor, or if the creation fails (either because of a lack of available memory or because an exception is thrown by the constructor), an {@code InstantiationException} is thrown. If the default constructor exists but is not accessible from the context where this method is invoked, an {@code IllegalAccessException} is thrown.
Returns the {@code Package} of which the class represented by this {@code Class} is a member. Returns {@code null} if no {@code Package}
Copies two arrays into one. Assumes that the destination array is large enough.
Constructs a new {@code ClassCastException} with the current stack trace and the specified detail message.
Constructs a new {@code ClassCircularityError} with the current stack trace and the specified detail message.
Constructs a new {@code ClassFormatError} with the current stack trace and the specified detail message.
Create the system class loader. Note this is NOT the bootstrap class loader (which is managed by the VM). We use a null value for the parent to indicate that the bootstrap loader is our parent.
Returns the system class loader. This is the parent for new {@code ClassLoader} instances and is typically the class loader used to start the application.
Finds the URL of the resource with the specified name. The system class loader's resource lookup algorithm is used to find the resource.
Returns an enumeration of URLs for the resource with the specified name. The system class loader's resource lookup algorithm is used to find the resource.
Returns a stream for the resource with the specified name. The system class loader's resource lookup algorithm is used to find the resource. Basically, the contents of the java.class.path are searched in order, looking for a path which matches the specified resource.
Constructs a new instance of this class with the system class loader as its parent.
Constructs a new instance of this class with the specified class loader as its parent.
constructor for the BootClassLoader which needs parent to be null.
Constructs a new class from an array of bytes containing a class definition in class file format.
Constructs a new class from an array of bytes containing a class definition in class file format and assigns the specified protection domain to the new class. If the provided protection domain is {@code null} then a default protection domain is assigned to the class.
Defines a new class with the specified name, byte code from the byte buffer and the optional protection domain. If the provided protection domain is {@code null} then a default protection domain is assigned to the class.
Overridden by subclasses, throws a {@code ClassNotFoundException} by default. This method is called by {@code loadClass} after the parent {@code ClassLoader} has failed to find a loaded class of the same name.
Returns the class with the specified name if it has already been loaded by the VM or {@code null} if it has not yet been loaded.
Finds the class with the specified name, loading it using the system class loader if necessary.
Returns this class loader's parent.
Returns the URL of the resource with the specified name. This implementation first tries to use the parent class loader to find the resource; if this fails then {@link #findResource(String)} is called to find the requested resource.
Returns a stream for the resource with the specified name. See {@link #getResource(String)} for a description of the lookup algorithm used to find the resource.
Loads the class with the specified name. Invoking this method is equivalent to calling {@code loadClass(className, false)}. <p> <strong>Note:</strong> In the Android reference implementation, the second parameter of {@link #loadClass(String, boolean)} is ignored anyway. </p>
Loads the class with the specified name, optionally linking it after loading. The following steps are performed: <ol> <li> Call {@link #findLoadedClass(String)} to determine if the requested class has already been loaded.</li> <li>If the class has not yet been loaded: Invoke this method on the parent class loader.</li> <li>If the class has still not been loaded: Call {@link #findClass(String)} to find the class.</li> </ol> <p> <strong>Note:</strong> In the Android reference implementation, the {@code resolve} parameter is ignored; classes are never linked. </p>
Forces a class to be linked (initialized). If the class has already been linked this operation has no effect. <p> <strong>Note:</strong> In the Android reference implementation, this method has no effect. </p>
Finds the URL of the resource with the specified name. This implementation just returns {@code null}; it should be overridden in subclasses.
Returns the absolute path of the native library with the specified name, or {@code null}. If this method returns {@code null} then the virtual machine searches the directories specified by the system property "java.library.path". <p> This implementation always returns {@code null}. </p>
Returns the package with the specified name. Package information is searched in this class loader.
Returns all the packages known to this class loader.
Defines and returns a new {@code Package} using the specified information. If {@code sealBase} is {@code null}, the package is left unsealed. Otherwise, the package is sealed using this URL.
Constructs a new {@code ClassNotFoundException} that includes the current stack trace.
Constructs a new {@code ClassNotFoundException} with the current stack trace and the specified detail message.
Constructs a new {@code ClassNotFoundException} with the current stack trace, the specified detail message and the exception that occurred when loading the class.
Returns the exception which occurred when loading the class.
Constructs a new {@code CloneNotSupportedException} with the current stack trace and the specified detail message.
Prevent this class from being instantiated.
Executes an operation according to the specified command object. This method is the low-level interface to the JIT compiler. It may return any object or {@code null} if no JIT compiler is available. Returns null on Android, whether or not the system has a JIT.
Compiles the specified class using the JIT compiler and indicates if compilation has been successful. Does nothing and returns false on Android.
Compiles all classes whose name matches the specified name using the JIT compiler and indicates if compilation has been successful. Does nothing and returns false on Android.
Returns true while the current thread should continue to run; false when it should return.
Waits for the runtime thread to stop. This interrupts the thread currently running the runnable and then waits for it to exit.
Returns the current stack trace of the thread, or an empty stack trace if the thread is not currently running.
Constructs a new {@code Double} with the specified primitive double value.
Constructs a new {@code Double} from the specified string.
Compares this object to the specified double object to determine their relative order. There are two special cases: <ul> <li>{@code Double.NaN} is equal to {@code Double.NaN} and it is greater than any other double value, including {@code Double.POSITIVE_INFINITY};</li> <li>+0.0d is greater than -0.0d</li> </ul>
Indicates whether this object represents an infinite value.
Indicates whether the specified double represents an infinite value.
Indicates whether this object is a <em>Not-a-Number (NaN)</em> value.
Indicates whether the specified double is a <em>Not-a-Number (NaN)</em> value.
Parses the specified string as a double value.
Returns a string containing a concise, human-readable description of the specified double value.
Parses the specified string as a double value.
Compares the two specified double values. There are two special cases: <ul> <li>{@code Double.NaN} is equal to {@code Double.NaN} and it is greater than any other double value, including {@code Double.POSITIVE_INFINITY};</li> <li>+0.0d is greater than -0.0d</li> </ul>
Returns a {@code Double} instance for the specified double value.
Converts the specified double into its hexadecimal string representation.
Constructor for constants of enum subtypes.
Returns the name of this enum constant. The name is the field as it appears in the {@code enum} declaration.
Returns the position of the enum constant in the declaration. The first constant has an ordinal value of zero.
Compares this object to the specified enum object to determine their relative order. This method compares the object's ordinal values, that is, their position in the enum declaration.
Returns the constant with the specified name of the specified enum type.
Gets the name of the missing constant.
Constructs a new {@code Error} with the current stack trace and the specified detail message.
Constructs a new {@code Error} with the current stack trace, the specified detail message and the specified cause.
Constructs a new {@code Error} with the current stack trace and the specified cause.
Constructs a new {@code Exception} with the current stack trace and the specified detail message.
Constructs a new {@code Exception} with the current stack trace, the specified detail message and the specified cause.
Constructs a new {@code Exception} with the current stack trace and the specified cause.
Constructs a new {@code ExceptionInInitializerError} that includes the current stack trace.
Constructs a new {@code ExceptionInInitializerError} with the current stack trace and the specified detail message.
Constructs a new {@code ExceptionInInitializerError} with the current stack trace and the specified cause. The exception should be the one which originally occurred in the class initialization code.
Returns the exception that is the cause of this error.
Constructs a new {@code Float} with the specified primitive float value.
Constructs a new {@code Float} with the specified primitive double value.
Constructs a new {@code Float} from the specified string.
Compares this object to the specified float object to determine their relative order. There are two special cases: <ul> <li>{@code Float.NaN} is equal to {@code Float.NaN} and it is greater than any other float value, including {@code Float.POSITIVE_INFINITY};</li> <li>+0.0f is greater than -0.0f</li> </ul>
Indicates whether the specified float represents an infinite value.
Indicates whether the specified float is a <em>Not-a-Number (NaN)</em> value.
Parses the specified string as a float value.
Returns a string containing a concise, human-readable description of the specified float value.
Parses the specified string as a float value.
Compares the two specified float values. There are two special cases: <ul> <li>{@code Float.NaN} is equal to {@code Float.NaN} and it is greater than any other float value, including {@code Float.POSITIVE_INFINITY};</li> <li>+0.0f is greater than -0.0f</li> </ul>
Returns a {@code Float} instance for the specified float value.
Converts the specified float into its hexadecimal string representation.
Parses the hex string to a double number.
Parses the hex string to a float number.
Parses the sign field.
Parses the exponent field.
Parses the mantissa field.
Sets the exponent variable to Long.MAX_VALUE or -Long.MAX_VALUE if overflow or underflow happens.
Adjusts the mantissa to desired width for further analysis.
Stores the discarded bits to abandonedNumber.
The value is rounded up or down to the nearest infinitely precise result. If the value is exactly halfway between two infinitely precise results, then it should be rounded up to the nearest infinitely precise even.
Returns the normalized significand after removing the leading zeros.
Calculates the offset between the normalized number and unnormalized number. In a normalized representation, significand is represented by the characters "0x1." followed by a lowercase hexadecimal representation of the rest of the significand as a fraction.
Constructs a new {@code IllegalAccessError} with the current stack trace and the specified detail message.
Constructs a new {@code IllegalAccessException} with the current stack trace and the specified detail message.
Constructs a new {@code IllegalArgumentException} with the current stack trace and the specified detail message.
Constructs a new {@code IllegalArgumentException} with the current stack trace, the specified detail message and the specified cause.
Constructs a new {@code IllegalArgumentException} with the current stack trace and the specified cause.
Constructs a new {@code IllegalArgumentException} with the current stack trace and the specified detail message.
Constructs a new {@code IllegalStateException} with the current stack trace and the specified detail message.
Constructs a new {@code IllegalStateException} with the current stack trace, the specified detail message and the specified cause.
Constructs a new {@code IllegalStateException} with the current stack trace and the specified cause.
Constructs a new {@code IllegalThreadStateException} with the current stack trace and the specified detail message.
Constructs a new {@code IncompatibleClassChangeError} with the current stack trace and the specified detail message.
Constructs a new {@code IndexOutOfBoundsException} with the current stack trace and the specified detail message.
Computes the initial value of this thread-local variable for the child thread given the parent thread's value. Called from the parent thread when creating a child thread. The default implementation returns the parent thread's value.
Constructs a new {@code InstantiationError} with the current stack trace and the specified detail message.
Constructs a new {@code InstantiationError} with the current stack trace and the class that caused this error.
Constructs a new {@code InstantiationException} with the current stack trace and the specified detail message.
Constructs a new {@code InstantiationException} with the current stack trace and the class that caused this exception.
Constructs a new {@code Integer} with the specified primitive integer value.
Constructs a new {@code Integer} from the specified string.
Compares this object to the specified integer object to determine their relative order.
Compares two {@code int} values.
Parses the specified string and returns a {@code Integer} instance if the string can be decoded into an integer value. The string may be an optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."), octal ("0..."), or decimal ("...") representation of an integer.
Returns the {@code Integer} value of the system property identified by {@code string}. Returns {@code null} if {@code string} is {@code null} or empty, if the property can not be found or if its value can not be parsed as an integer.
Returns the {@code Integer} value of the system property identified by {@code string}. Returns the specified default value if {@code string} is {@code null} or empty, if the property can not be found or if its value can not be parsed as an integer.
Parses the specified string as a signed decimal integer value. The ASCII character \u002d ('-') is recognized as the minus sign.
Parses the specified string as a signed integer value using the specified radix. The ASCII character \u002d ('-') is recognized as the minus sign.
Converts the specified integer into its binary string representation. The returned string is a concatenation of '0' and '1' characters.
Converts the specified integer into its hexadecimal string representation. The returned string is a concatenation of characters from '0' to '9' and 'a' to 'f'.
Converts the specified integer into its octal string representation. The returned string is a concatenation of characters from '0' to '7'.
Converts the specified integer into its decimal string representation. The returned string is a concatenation of a minus sign if the number is negative and characters from '0' to '9'.
Converts the specified signed integer into a string representation based on the specified radix. The returned string is a concatenation of a minus sign if the number is negative and characters from '0' to '9' and 'a' to 'z', depending on the radix. If {@code radix} is not in the interval defined by {@code Character.MIN_RADIX} and {@code Character.MAX_RADIX} then 10 is used as the base for the conversion. <p>This method treats its argument as signed. If you want to convert an unsigned value to one of the common non-decimal bases, you may find {@link #toBinaryString}, {@code #toHexString}, or {@link #toOctalString} more convenient.
Parses the specified string as a signed decimal integer value.
Parses the specified string as a signed integer value using the specified radix.
Determines the highest (leftmost) bit of the specified integer that is 1 and returns the bit mask value for that bit. This is also referred to as the Most Significant 1 Bit. Returns zero if the specified integer is zero.
Determines the lowest (rightmost) bit of the specified integer that is 1 and returns the bit mask value for that bit. This is also referred to as the Least Significant 1 Bit. Returns zero if the specified integer is zero.
Determines the number of leading zeros in the specified integer prior to the {@link #highestOneBit(int) highest one bit}.
Rotates the bits of the specified integer to the left by the specified number of bits.
Rotates the bits of the specified integer to the right by the specified number of bits.
Reverses the order of the bytes of the specified integer.
Reverses the order of the bits of the specified integer.
Returns the value of the {@code signum} function for the specified integer.
Returns a {@code Integer} instance for the specified integer value. <p> If it is not necessary to get a new {@code Integer} instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance.
When appending to an AbstractStringBuilder, this thread-local char[] lets us avoid allocation of a temporary array. (We can't write straight into the AbstractStringBuilder because it's almost as expensive to work out the exact length of the result as it is to do the formatting. We could try being conservative and "delete"-ing the unused space afterwards, but then we'd need to duplicate convertInt and convertLong rather than share the code.)
Equivalent to Integer.toString(i, radix).
Equivalent to Integer.toString(i).
Equivalent to sb.append(Integer.toString(i)).
Returns the string representation of i and leaves sb alone if sb is null. Returns null and appends the string representation of i to sb if sb is non-null.
Equivalent to Long.toString(v, radix).
Equivalent to Long.toString(l).
Equivalent to sb.append(Long.toString(l)).
Returns the string representation of n and leaves sb alone if sb is null. Returns null and appends the string representation of n to sb if sb is non-null.
Inserts the unsigned decimal integer represented by n into the specified character array starting at position cursor.  Returns the index after the last character inserted (i.e., the value to pass in as cursor the next time this method is called). Note that n is interpreted as a large positive integer (not a negative integer) if its sign bit is set.
Returns a string composed of the specified characters. Note that the autoboxing does *not* result in an extra copy of the char array: we are using a package-private string constructor that incorporates the "autoboxing array" into the new string.
Constructs a new {@code InternalError} with the current stack trace and the specified detail message.
Constructs a new {@code InterruptedException} with the current stack trace and the specified detail message.
Constructs a new {@code LinkageError} with the current stack trace and the specified detail message.
Constructs a new {@code LinkageError} with the given detail message and cause.
Constructs a new {@code Long} with the specified primitive long value.
Constructs a new {@code Long} from the specified string.
Compares this object to the specified long object to determine their relative order.
Compares two {@code long} values.
Parses the specified string and returns a {@code Long} instance if the string can be decoded into a long value. The string may be an optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."), octal ("0..."), or decimal ("...") representation of a long.
Returns the {@code Long} value of the system property identified by {@code string}. Returns {@code null} if {@code string} is {@code null} or empty, if the property can not be found or if its value can not be parsed as a long.
Returns the {@code Long} value of the system property identified by {@code string}. Returns the specified default value if {@code string} is {@code null} or empty, if the property can not be found or if its value can not be parsed as a long.
Parses the specified string as a signed decimal long value. The ASCII character \u002d ('-') is recognized as the minus sign.
Parses the specified string as a signed long value using the specified radix. The ASCII character \u002d ('-') is recognized as the minus sign.
Converts the specified long value into its binary string representation. The returned string is a concatenation of '0' and '1' characters.
Converts the specified long value into its hexadecimal string representation. The returned string is a concatenation of characters from '0' to '9' and 'a' to 'f'.
Converts the specified long value into its octal string representation. The returned string is a concatenation of characters from '0' to '7'.
Converts the specified long value into its decimal string representation. The returned string is a concatenation of a minus sign if the number is negative and characters from '0' to '9'.
Converts the specified signed long value into a string representation based on the specified radix. The returned string is a concatenation of a minus sign if the number is negative and characters from '0' to '9' and 'a' to 'z', depending on the radix. If {@code radix} is not in the interval defined by {@code Character.MIN_RADIX} and {@code Character.MAX_RADIX} then 10 is used as the base for the conversion. <p>This method treats its argument as signed. If you want to convert an unsigned value to one of the common non-decimal bases, you may find {@link #toBinaryString}, {@code #toHexString}, or {@link #toOctalString} more convenient.
Parses the specified string as a signed decimal long value.
Parses the specified string as a signed long value using the specified radix.
Determines the highest (leftmost) bit of the specified long value that is 1 and returns the bit mask value for that bit. This is also referred to as the Most Significant 1 Bit. Returns zero if the specified long is zero.
Determines the lowest (rightmost) bit of the specified long value that is 1 and returns the bit mask value for that bit. This is also referred to as the Least Significant 1 Bit. Returns zero if the specified long is zero.
Determines the number of leading zeros in the specified long value prior to the {@link #highestOneBit(long) highest one bit}.
Determines the number of trailing zeros in the specified long value after the {@link #lowestOneBit(long) lowest one bit}.
Counts the number of 1 bits in the specified long value; this is also referred to as population count.
Rotates the bits of the specified long value to the left by the specified number of bits.
Rotates the bits of the specified long value to the right by the specified number of bits.
Reverses the order of the bytes of the specified long value.
Reverses the order of the bits of the specified long value.
Returns the value of the {@code signum} function for the specified long value.
Returns a {@code Long} instance for the specified long value. <p> If it is not necessary to get a new {@code Long} instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance.
Returns the most positive (closest to positive infinity) of the two arguments. <p> Special cases: <ul> <li>{@code max(NaN, (anything)) = NaN}</li> <li>{@code max((anything), NaN) = NaN}</li> <li>{@code max(+0.0, -0.0) = +0.0}</li> <li>{@code max(-0.0, +0.0) = +0.0}</li> </ul>
Returns the most positive (closest to positive infinity) of the two arguments.
Returns the most negative (closest to negative infinity) of the two arguments. <p> Special cases: <ul> <li>{@code min(NaN, (anything)) = NaN}</li> <li>{@code min((anything), NaN) = NaN}</li> <li>{@code min(+0.0, -0.0) = -0.0}</li> <li>{@code min(-0.0, +0.0) = -0.0}</li> </ul>
Returns the most negative (closest to negative infinity) of the two arguments.
Returns the result of rounding the argument to an integer. The result is equivalent to {@code (long) Math.floor(d+0.5)}. <p> Special cases: <ul> <li>{@code round(+0.0) = +0.0}</li> <li>{@code round(-0.0) = +0.0}</li> <li>{@code round((anything > Long.MAX_VALUE) = Long.MAX_VALUE}</li> <li>{@code round((anything < Long.MIN_VALUE) = Long.MIN_VALUE}</li> <li>{@code round(+infinity) = Long.MAX_VALUE}</li> <li>{@code round(-infinity) = Long.MIN_VALUE}</li> <li>{@code round(NaN) = +0.0}</li> </ul>
Returns the result of rounding the argument to an integer. The result is equivalent to {@code (int) Math.floor(f+0.5)}. <p> Special cases: <ul> <li>{@code round(+0.0) = +0.0}</li> <li>{@code round(-0.0) = +0.0}</li> <li>{@code round((anything > Integer.MAX_VALUE) = Integer.MAX_VALUE}</li> <li>{@code round((anything < Integer.MIN_VALUE) = Integer.MIN_VALUE}</li> <li>{@code round(+infinity) = Integer.MAX_VALUE}</li> <li>{@code round(-infinity) = Integer.MIN_VALUE}</li> <li>{@code round(NaN) = +0.0}</li> </ul>
Returns the signum function of the argument. If the argument is less than zero, it returns -1.0. If the argument is greater than zero, 1.0 is returned. If the argument is either positive or negative zero, the argument is returned as result. <p> Special cases: <ul> <li>{@code signum(+0.0) = +0.0}</li> <li>{@code signum(-0.0) = -0.0}</li> <li>{@code signum(+infinity) = +1.0}</li> <li>{@code signum(-infinity) = -1.0}</li> <li>{@code signum(NaN) = NaN}</li> </ul>
Returns a pseudo-random double {@code n}, where {@code n >= 0.0 && n < 1.0}. This method reuses a single instance of {@link java.util.Random}. This method is thread-safe because access to the {@code Random} is synchronized, but this harms scalability. Applications may find a performance benefit from allocating a {@code Random} for each of their threads.
Returns the measure in radians of the supplied degree angle. The result is {@code angdeg / 180 * pi}. <p> Special cases: <ul> <li>{@code toRadians(+0.0) = +0.0}</li> <li>{@code toRadians(-0.0) = -0.0}</li> <li>{@code toRadians(+infinity) = +infinity}</li> <li>{@code toRadians(-infinity) = -infinity}</li> <li>{@code toRadians(NaN) = NaN}</li> </ul>
Returns the measure in degrees of the supplied radian angle. The result is {@code angrad * 180 / pi}. <p> Special cases: <ul> <li>{@code toDegrees(+0.0) = +0.0}</li> <li>{@code toDegrees(-0.0) = -0.0}</li> <li>{@code toDegrees(+infinity) = +infinity}</li> <li>{@code toDegrees(-infinity) = -infinity}</li> <li>{@code toDegrees(NaN) = NaN}</li> </ul>
Returns the argument's ulp (unit in the last place). The size of a ulp of a double value is the positive distance between this value and the double value next larger in magnitude. For non-NaN {@code x}, {@code ulp(-x) == ulp(x)}. <p> Special cases: <ul> <li>{@code ulp(+0.0) = Double.MIN_VALUE}</li> <li>{@code ulp(-0.0) = Double.MIN_VALUE}</li> <li>{@code ulp(+infinity) = infinity}</li> <li>{@code ulp(-infinity) = infinity}</li> <li>{@code ulp(NaN) = NaN}</li> </ul>
Returns the argument's ulp (unit in the last place). The size of a ulp of a float value is the positive distance between this value and the float value next larger in magnitude. For non-NaN {@code x}, {@code ulp(-x) == ulp(x)}. <p> Special cases: <ul> <li>{@code ulp(+0.0) = Float.MIN_VALUE}</li> <li>{@code ulp(-0.0) = Float.MIN_VALUE}</li> <li>{@code ulp(+infinity) = infinity}</li> <li>{@code ulp(-infinity) = infinity}</li> <li>{@code ulp(NaN) = NaN}</li> </ul>
Returns a double with the given magnitude and the sign of {@code sign}. If {@code sign} is NaN, the sign of the result is arbitrary. If you need a determinate sign in such cases, use {@code StrictMath.copySign}.
Returns a float with the given magnitude and the sign of {@code sign}. If {@code sign} is NaN, the sign of the result is arbitrary. If you need a determinate sign in such cases, use {@code StrictMath.copySign}.
Returns the unbiased base-2 exponent of float {@code f}.
Returns the unbiased base-2 exponent of double {@code d}.
Returns the next double after {@code start} in the given {@code direction}.
Returns the next float after {@code start} in the given {@code direction}.
Returns the next double larger than {@code d}.
Returns the next float larger than {@code f}.
Returns {@code d} * 2^{@code scaleFactor}. The result may be rounded.
Shifts integer bits as float, if the digits is positive, left-shift; if not, shift to right and calculate its carry.
Shifts long bits as double, if the digits is positive, left-shift; if not, shift to right and calculate its carry.
Constructs a new {@code NegativeArraySizeException} with the current stack trace and the specified detail message.
Constructs a new {@code NoClassDefFoundError} with the current stack trace and the specified detail message.
Constructs a new {@code NoSuchFieldError} with the current stack trace and the specified detail message.
Constructs a new {@code NoSuchFieldException} with the current stack trace and the specified detail message.
Constructs a new {@code NoSuchMethodError} with the current stack trace and the specified detail message.
Constructs a new {@code NoSuchMethodException} with the current stack trace and the specified detail message.
Constructs a new {@code NullPointerException} with the current stack trace and the specified detail message.
Returns this object's value as a byte. Might involve rounding and/or truncating the value, so it fits into a byte.
Returns this object's value as a short. Might involve rounding and/or truncating the value, so it fits into a short.
Constructs a new {@code NumberFormatException} with the current stack trace and the specified detail message.
Creates and returns a copy of this {@code Object}. The default implementation returns a so-called "shallow" copy: It creates a new instance of the same class and then copies the field values (including object references) from this instance to the new instance. A "deep" copy, in contrast, would also recursively clone nested objects. A subclass that needs to implement this kind of cloning should call {@code super.clone()} to create the new instance and then create deep copies of the nested, mutable objects.
Compares this instance with the specified object and indicates if they are equal. In order to be equal, {@code o} must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. <p>The default implementation returns {@code true} only if {@code this == o}. See <a href="{@docRoot}reference/java/lang/Object.html#writing_equals">Writing a correct {@code equals} method</a> if you intend implementing your own {@code equals} method. <p>The general contract for the {@code equals} and {@link #hashCode()} methods is that if {@code equals} returns {@code true} for any two objects, then {@code hashCode()} must return the same value for these objects. This means that subclasses of {@code Object} usually override either both methods or neither of them.
Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: <pre> getClass().getName() + '@' + Integer.toHexString(hashCode())</pre> <p>See <a href="{@docRoot}reference/java/lang/Object.html#writing_toString">Writing a useful {@code toString} method</a> if you intend implementing your own {@code toString} method.
Causes the calling thread to wait until another thread calls the {@code notify()} or {@code notifyAll()} method of this object. This method can only be invoked by a thread which owns this object's monitor; see {@link #notify()} on how a thread can become the owner of a monitor. <p> A waiting thread can be sent {@code interrupt()} to cause it to prematurely stop waiting, so {@code wait} should be called in a loop to check that the condition that has been waited for has been met before continuing. </p> <p> While the thread waits, it gives up ownership of this object's monitor. When it is notified (or interrupted), it re-acquires the monitor before it starts running. </p>
Causes the calling thread to wait until another thread calls the {@code notify()} or {@code notifyAll()} method of this object or until the specified timeout expires. This method can only be invoked by a thread which owns this object's monitor; see {@link #notify()} on how a thread can become the owner of a monitor. <p> A waiting thread can be sent {@code interrupt()} to cause it to prematurely stop waiting, so {@code wait} should be called in a loop to check that the condition that has been waited for has been met before continuing. </p> <p> While the thread waits, it gives up ownership of this object's monitor. When it is notified (or interrupted), it re-acquires the monitor before it starts running. </p>
Constructs a new {@code OutOfMemoryError} with the current stack trace and the specified detail message.
Returns an empty array. Package annotations are not supported on Android.
Returns an empty array. Package annotations are not supported on Android.
Indicates whether the specified annotation is present.
Returns the title of the implementation of this package, or {@code null} if this is unknown. The format of this string is unspecified.
Returns the name of the vendor or organization that provides this implementation of the package, or {@code null} if this is unknown. The format of this string is unspecified.
Returns the version of the implementation of this package, or {@code null} if this is unknown. The format of this string is unspecified.
Returns the name of this package in the standard dot notation; for example: "java.lang".
Attempts to locate the requested package in the caller's class loader. If no package information can be located, {@code null} is returned.
Returns all the packages known to the caller's class loader.
Returns the title of the specification this package implements, or {@code null} if this is unknown.
Returns the name of the vendor or organization that owns and maintains the specification this package implements, or {@code null} if this is unknown.
Returns the version of the specification this package implements, or {@code null} if this is unknown. The version string is a sequence of non-negative integers separated by dots; for example: "1.2.3".
Indicates whether this package's specification version is compatible with the specified version string. Version strings are compared by comparing each dot separated part of the version as an integer.
Indicates whether this package is sealed.
Indicates whether this package is sealed with respect to the specified URL.
Constructs a new {@code ProcessBuilder} instance with the specified operating system program and its arguments.
Constructs a new {@code ProcessBuilder} instance with the specified operating system program and its arguments. Note that the list passed to this constructor is not copied, so any subsequent updates to it are reflected in this instance's state.
Returns this process builder's current program and arguments. Note that the returned list is not a copy and modifications to it will change the state of this instance.
Changes the program and arguments of this process builder.
Changes the program and arguments of this process builder. Note that the list passed to this method is not copied, so any subsequent updates to it are reflected in this instance's state.
Returns the working directory of this process builder. If {@code null} is returned, then the working directory of the Java process is used when a process is started.
Changes the working directory of this process builder. If the specified directory is {@code null}, then the working directory of the Java process is used when a process is started.
Returns this process builder's current environment. When a process builder instance is created, the environment is populated with a copy of the environment, as returned by {@link System#getenv()}. Note that the map returned by this method is not a copy and any changes made to it are reflected in this instance's state.
Indicates whether the standard error should be redirected to standard output. If redirected, the {@link Process#getErrorStream()} will always return end of stream and standard error is written to {@link Process#getInputStream()}.
Changes the state of whether or not standard error is redirected to standard output.
Starts a new process based on the current state of this process builder.
Cleans up after garbage collected processes. Requires the lock on the map.
Loops indefinitely and calls ProcessManager.onExit() when children exit.
Called by {@link #watchChildren()} when a child process exits.
Executes a native process. Fills in in, out, and err and returns the new process ID upon success.
Gets the process manager.
Prevent this class from being instantiated.
Executes the specified command and its arguments in a separate native process. The new process inherits the environment of the caller. Calling this method is equivalent to calling {@code exec(progArray, null, null)}.
Executes the specified command and its arguments in a separate native process. The new process uses the environment provided in {@code envp}. Calling this method is equivalent to calling {@code exec(progArray, envp, null)}.
Executes the specified command and its arguments in a separate native process. The new process uses the environment provided in {@code envp} and the working directory specified by {@code directory}.
Executes the specified program in a separate native process. The new process inherits the environment of the caller. Calling this method is equivalent to calling {@code exec(prog, null, null)}.
Executes the specified program in a separate native process. The new process uses the environment provided in {@code envp}. Calling this method is equivalent to calling {@code exec(prog, envp, null)}.
Executes the specified program in a separate native process. The new process uses the environment provided in {@code envp} and the working directory specified by {@code directory}.
Causes the VM to stop running and the program to exit. If {@link #runFinalizersOnExit(boolean)} has been previously invoked with a {@code true} argument, then all objects will be properly garbage-collected and finalized first.
Returns the single {@code Runtime} instance.
Loads and links the dynamic library that is identified through the specified path. This method is similar to {@link #loadLibrary(String)}, but it accepts a full path specification whereas {@code loadLibrary} just accepts the name of the library to load.
Loads and links a library without security checks.
Loads and links the library with the specified name. The mapping of the specified library name to the full path for loading the library is implementation-dependent.
Loads and links a library without security checks.
Provides a hint to the VM that it would be useful to attempt to perform any outstanding object finalization.
Switches the output of debug information for methods on or off.
Registers a VM shutdown hook. A shutdown hook is a {@code Thread} that is ready to run, but has not yet been started. All registered shutdown hooks will be executed when the VM terminates normally (typically when the {@link #exit(int)} method is called). <p><i>Note that on Android, the application lifecycle does not include VM termination, so calling this method will not ensure that your code is run</i>. Instead, you should use the most appropriate lifecycle notification ({@code Activity.onPause}, say). <p>Shutdown hooks are run concurrently and in an unspecified order. Hooks failing due to an unhandled exception are not a problem, but the stack trace might be printed to the console. Once initiated, the whole shutdown process can only be terminated by calling {@code halt()}. <p>If {@link #runFinalizersOnExit(boolean)} has been called with a {@code true} argument, garbage collection and finalization will take place after all hooks are either finished or have failed. Then the VM terminates. <p>It is recommended that shutdown hooks do not do any time-consuming activities, in order to not hold up the shutdown process longer than necessary.
Unregisters a previously registered VM shutdown hook.
Causes the VM to stop running, and the program to exit. Neither shutdown hooks nor finalizers are run before.
Returns the number of processors available to the VM, at least 1.
Constructs a new {@code RuntimeException} with the current stack trace and the specified detail message.
Constructs a new {@code RuntimeException} with the current stack trace, the specified detail message and the specified cause.
Constructs a new {@code RuntimeException} with the current stack trace and the specified cause.
Constructs a new {@code SecurityException} with the current stack trace and the specified detail message.
Constructs a new {@code SecurityException} with the current stack trace, the specified detail message and the specified cause.
Constructs a new {@code SecurityException} with the current stack trace and the specified cause.
Returns the current thread's thread group.
Constructs a new {@code Short} from the specified string.
Constructs a new {@code Short} with the specified primitive short value.
Compares this object to the specified short object to determine their relative order.
Compares two {@code short} values.
Parses the specified string and returns a {@code Short} instance if the string can be decoded into a short value. The string may be an optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."), octal ("0..."), or decimal ("...") representation of a short.
Parses the specified string as a signed decimal short value. The ASCII character \u002d ('-') is recognized as the minus sign.
Parses the specified string as a signed short value using the specified radix. The ASCII character \u002d ('-') is recognized as the minus sign.
Returns a string containing a concise, human-readable description of the specified short value with radix 10.
Parses the specified string as a signed decimal short value.
Parses the specified string as a signed short value using the specified radix.
Reverses the bytes of the specified short.
Returns a {@code Short} instance for the specified short value. <p> If it is not necessary to get a new {@code Short} instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance.
Constructs a new {@code StackOverflowError} with the current stack trace and the specified detail message.
Constructs a new {@code StackTraceElement} for a specified execution point.
Returns the fully qualified name of the class belonging to this {@code StackTraceElement}.
Returns the name of the Java source file containing class belonging to this {@code StackTraceElement}.
Returns the line number in the source for the class belonging to this {@code StackTraceElement}.
Returns the name of the method belonging to this {@code StackTraceElement}.
Indicates if the method name returned by {@link #getMethodName()} is implemented as a native method.
Returns the absolute value of the argument. <p> Special cases: <ul> <li>{@code abs(-0.0) = +0.0}</li> <li>{@code abs(+infinity) = +infinity}</li> <li>{@code abs(-infinity) = +infinity}</li> <li>{@code abs(NaN) = NaN}</li> </ul>
Returns the absolute value of the argument. <p> If the argument is {@code Integer.MIN_VALUE}, {@code Integer.MIN_VALUE} is returned.
Returns the absolute value of the argument. <p> If the argument is {@code Long.MIN_VALUE}, {@code Long.MIN_VALUE} is returned.
Returns a pseudo-random number between 0.0 (inclusive) and 1.0 (exclusive).
Returns the argument's ulp (unit in the last place). The size of a ulp of a double value is the positive distance between this value and the double value next larger in magnitude. For non-NaN {@code x}, {@code ulp(-x) == ulp(x)}. <p> Special cases: <ul> <li>{@code ulp(+0.0) = Double.MIN_VALUE}</li> <li>{@code ulp(-0.0) = Double.MIN_VALUE}</li> <li>{@code ulp(+infinity) = infinity}</li> <li>{@code ulp(-infinity) = infinity}</li> <li>{@code ulp(NaN) = NaN}</li> </ul>
Returns the argument's ulp (unit in the last place). The size of a ulp of a float value is the positive distance between this value and the float value next larger in magnitude. For non-NaN {@code x}, {@code ulp(-x) == ulp(x)}. <p> Special cases: <ul> <li>{@code ulp(+0.0) = Float.MIN_VALUE}</li> <li>{@code ulp(-0.0) = Float.MIN_VALUE}</li> <li>{@code ulp(+infinity) = infinity}</li> <li>{@code ulp(-infinity) = infinity}</li> <li>{@code ulp(NaN) = NaN}</li> </ul>
Returns a double with the given magnitude and the sign of {@code sign}. If {@code sign} is NaN, the sign of the result is positive.
Returns a float with the given magnitude and the sign of {@code sign}. If {@code sign} is NaN, the sign of the result is positive.
Returns the exponent of float {@code f}.
Returns the exponent of double {@code d}.
Compare the two objects to determine the relative ordering.
Creates an empty string.
Converts a subsequence of the byte array to a string using the system's {@link java.nio.charset.Charset#defaultCharset default charset}.
Converts the byte array to a string using the named charset. <p>The behavior when the bytes cannot be decoded by the named charset is unspecified. Use {@link java.nio.charset.CharsetDecoder} for more control.
Converts the byte array to a string using the given charset. <p>The behavior when the bytes cannot be decoded by the given charset is to replace malformed input and unmappable characters with the charset's default replacement string. Use {@link java.nio.charset.CharsetDecoder} for more control.
Converts the byte array to a String using the given charset.
Initializes this string to contain the characters in the specified character array. Modifying the character array after creating the string has no effect on the string.
Initializes this string to contain the specified characters in the character array. Modifying the character array after creating the string has no effect on the string.
Internal version of the String(char[], int, int) constructor. Does not range check, null check, or copy the character array.
Constructs a new string with the same sequence of characters as {@code toCopy}. The returned string's <a href="#backing_array">backing array</a> is no larger than necessary.
Creates a {@code String} from the contents of the specified {@code StringBuffer}.
Creates a {@code String} from the sub-array of Unicode code points.
Creates a {@code String} from the contents of the specified {@code StringBuilder}.
This isn't equivalent to either of ICU's u_foldCase case folds, and thus any of the Unicode case folds, but it's what the RI uses.
Compares the specified string to this string using the Unicode values of the characters, ignoring case differences. Returns 0 if the strings contain the same characters in the same order. Returns a negative integer if the first non-equal character in this string has a Unicode value which is less than the Unicode value of the character at the same position in the specified string, or if this string is a prefix of the specified string. Returns a positive integer if the first non-equal character in this string has a Unicode value which is greater than the Unicode value of the character at the same position in the specified string, or if the specified string is a prefix of this string.
Concatenates this string and the specified string.
Creates a new string containing the characters in the specified character array. Modifying the character array after creating the string has no effect on the string.
Creates a new string containing the specified characters in the character array. Modifying the character array after creating the string has no effect on the string.
Compares the specified string to this string to determine if the specified string is a suffix.
Returns a new byte array containing the characters of this string encoded using the system's {@link java.nio.charset.Charset#defaultCharset default charset}. <p>The behavior when this string cannot be represented in the system's default charset is unspecified. In practice, when the default charset is UTF-8 (as it is on Android), all strings can be encoded.
Returns a new byte array containing the characters of this string encoded using the named charset. <p>The behavior when this string cannot be represented in the named charset is unspecified. Use {@link java.nio.charset.CharsetEncoder} for more control.
Returns a new byte array containing the characters of this string encoded using the given charset. <p>The behavior when this string cannot be represented in the given charset is to replace malformed input and unmappable characters with the charset's default replacement byte array. Use {@link java.nio.charset.CharsetEncoder} for more control.
Copies the specified characters in this string to the character array starting at the specified offset in the character array.
Version of getChars without bounds checks, for use by other classes within the java.lang package only.  The caller is responsible for ensuring that start >= 0 && start <= end && end <= count.
Searches in this string for the first index of the specified character. The search for the character starts at the beginning and moves towards the end of this string.
Searches in this string for the index of the specified character. The search for the character starts at the specified offset and moves towards the end of this string.
Searches in this string for the first index of the specified string. The search for the string starts at the beginning and moves towards the end of this string.
Searches in this string for the index of the specified string. The search for the string starts at the specified offset and moves towards the end of this string.
Returns the last index of the code point {@code c}, or -1. The search for the character starts at the end and moves towards the beginning of this string.
Returns the last index of the code point {@code c}, or -1. The search for the character starts at offset {@code start} and moves towards the beginning of this string.
Searches in this string for the last index of the specified string. The search for the string starts at the end and moves towards the beginning of this string.
Searches in this string for the index of the specified string. The search for the string starts at the specified offset and moves towards the beginning of this string.
Compares the specified string to this string and compares the specified range of characters to determine if they are the same.
Compares the specified string to this string and compares the specified range of characters to determine if they are the same. When ignoreCase is true, the case of the characters is ignored during the comparison.
Copies this string replacing occurrences of the specified character with another character.
Copies this string replacing occurrences of the specified target sequence with another sequence. The string is processed from the beginning to the end.
Compares the specified string to this string to determine if the specified string is a prefix.
Compares the specified string to this string, starting at the specified offset, to determine if the specified string is a prefix.
Returns a string containing a suffix of this string. The returned string shares this string's <a href="#backing_array">backing array</a>.
Returns a string containing a subsequence of characters from this string. The returned string shares this string's <a href="#backing_array">backing array</a>.
Copies the characters in this string to a character array.
Converts this string to lower case, using the rules of the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Converts this string to lower case, using the rules of {@code locale}. <p>Most case mappings are unaffected by the language of a {@code Locale}. Exceptions include dotted and dotless I in Azeri and Turkish locales, and dotted and dotless I and J in Lithuanian locales. On the other hand, it isn't necessary to provide a Greek locale to get correct case mapping of Greek characters: any locale will do. for full details of context- and language-specific special cases.
Converts this this string to upper case, using the rules of the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Converts this this string to upper case, using the rules of {@code locale}. <p>Most case mappings are unaffected by the language of a {@code Locale}. Exceptions include dotted and dotless I in Azeri and Turkish locales, and dotted and dotless I and J in Lithuanian locales. On the other hand, it isn't necessary to provide a Greek locale to get correct case mapping of Greek characters: any locale will do. for full details of context- and language-specific special cases.
Copies this string removing white space characters from the beginning and end of the string.
Creates a new string containing the characters in the specified character array. Modifying the character array after creating the string has no effect on the string.
Creates a new string containing the specified characters in the character array. Modifying the character array after creating the string has no effect on the string.
Converts the specified character to its string representation.
Converts the specified double to its string representation.
Converts the specified float to its string representation.
Converts the specified integer to its string representation.
Converts the specified long to its string representation.
Converts the specified object to its string representation. If the object is null return the string {@code "null"}, otherwise use {@code toString()} to get the string representation.
Converts the specified boolean to its string representation. When the boolean is {@code true} return {@code "true"}, otherwise return {@code "false"}.
Returns whether the characters in the StringBuffer {@code strbuf} are the same as those in this string.
Compares a {@code CharSequence} to this {@code String} to determine if their contents are equal.
Tests whether this string matches the given {@code regularExpression}. This method returns true only if the regular expression matches the <i>entire</i> input string. A common mistake is to assume that this method behaves like {@link #contains}; if you want to match anywhere within the input string, you need to add {@code .*} to the beginning and end of your regular expression. See {@link Pattern#matches}. <p>If the same regular expression is to be used for multiple operations, it may be more efficient to reuse a compiled {@code Pattern}.
Replaces all matches for {@code regularExpression} within this string with the given {@code replacement}. See {@link Pattern} for regular expression syntax. <p>If the same regular expression is to be used for multiple operations, it may be more efficient to reuse a compiled {@code Pattern}.
Replaces the first match for {@code regularExpression} within this string with the given {@code replacement}. See {@link Pattern} for regular expression syntax. <p>If the same regular expression is to be used for multiple operations, it may be more efficient to reuse a compiled {@code Pattern}.
Splits this string using the supplied {@code regularExpression}. Equivalent to {@code split(regularExpression, 0)}. See {@link Pattern#split(CharSequence, int)} for an explanation of {@code limit}. See {@link Pattern} for regular expression syntax. <p>If the same regular expression is to be used for multiple operations, it may be more efficient to reuse a compiled {@code Pattern}.
Splits this string using the supplied {@code regularExpression}. See {@link Pattern#split(CharSequence, int)} for an explanation of {@code limit}. See {@link Pattern} for regular expression syntax. <p>If the same regular expression is to be used for multiple operations, it may be more efficient to reuse a compiled {@code Pattern}.
Has the same result as the substring function, but is present so that string may implement the CharSequence interface.
Returns the Unicode code point at the given {@code index}.
Returns the Unicode code point that precedes the given {@code index}.
Determines if this {@code String} contains the sequence of characters in the {@code CharSequence} passed.
Returns the index within this object that is offset from {@code index} by {@code codePointOffset} code points.
Returns a localized formatted string, using the supplied format and arguments, using the user's default locale. <p>If you're formatting a string other than for human consumption, you should use the {@code format(Locale, String, Object...)} overload and supply {@code Locale.US}. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a formatted string, using the supplied format and arguments, localized to the given locale.
Constructs a new StringBuffer using the specified capacity.
Constructs a new StringBuffer containing the characters in the specified string. The capacity of the new buffer will be the length of the {@code String} plus the default capacity.
Constructs a StringBuffer and initializes it with the content from the specified {@code CharSequence}. The capacity of the new buffer will be the length of the {@code CharSequence} plus the default capacity.
Adds the string representation of the specified boolean to the end of this StringBuffer. <p> If the argument is {@code true} the string {@code "true"} is appended, otherwise the string {@code "false"} is appended.
Adds the specified character to the end of this buffer.
Adds the string representation of the specified double to the end of this StringBuffer.
Adds the string representation of the specified float to the end of this StringBuffer.
Adds the string representation of the specified integer to the end of this StringBuffer.
Adds the string representation of the specified long to the end of this StringBuffer.
Adds the string representation of the specified object to the end of this StringBuffer. <p> If the specified object is {@code null} the string {@code "null"} is appended, otherwise the objects {@code toString} is used to get its string representation.
Adds the specified string to the end of this buffer. <p> If the specified string is {@code null} the string {@code "null"} is appended, otherwise the contents of the specified string is appended.
Adds the specified StringBuffer to the end of this buffer. <p> If the specified StringBuffer is {@code null} the string {@code "null"} is appended, otherwise the contents of the specified StringBuffer is appended.
Adds the character array to the end of this buffer.
Adds the specified sequence of characters to the end of this buffer.
Appends the specified CharSequence to this buffer. <p> If the specified CharSequence is {@code null} the string {@code "null"} is appended, otherwise the contents of the specified CharSequence is appended.
Appends the specified subsequence of the CharSequence to this buffer. <p> If the specified CharSequence is {@code null}, then the string {@code "null"} is used to extract a subsequence.
Appends the string representation of the specified Unicode code point to the end of this buffer. <p> The code point is converted to a {@code char[]} as defined by {@link Character#toChars(int)}.
Deletes a range of characters.
Deletes the character at the specified offset.
Inserts the character into this buffer at the specified offset.
Inserts the string representation of the specified boolean into this buffer at the specified offset.
Inserts the string representation of the specified integer into this buffer at the specified offset.
Inserts the string representation of the specified long into this buffer at the specified offset.
Inserts the string representation of the specified into this buffer double at the specified offset.
Inserts the string representation of the specified float into this buffer at the specified offset.
Inserts the string representation of the specified object into this buffer at the specified offset. <p> If the specified object is {@code null}, the string {@code "null"} is inserted, otherwise the objects {@code toString} method is used to get its string representation.
Inserts the string into this buffer at the specified offset. <p> If the specified string is {@code null}, the string {@code "null"} is inserted, otherwise the contents of the string is inserted.
Inserts the character array into this buffer at the specified offset.
Inserts the specified subsequence of characters into this buffer at the specified index.
Inserts the specified CharSequence into this buffer at the specified index. <p> If the specified CharSequence is {@code null}, the string {@code "null"} is inserted, otherwise the contents of the CharSequence.
Inserts the specified subsequence into this buffer at the specified index. <p> If the specified CharSequence is {@code null}, the string {@code "null"} is inserted, otherwise the contents of the CharSequence.
Replaces the characters in the specified range with the contents of the specified string.
Reverses the order of characters in this buffer.
Constructs an instance with the specified capacity.
Constructs an instance that's initialized with the contents of the specified {@code CharSequence}. The capacity of the new builder will be the length of the {@code CharSequence} plus 16.
Constructs an instance that's initialized with the contents of the specified {@code String}. The capacity of the new builder will be the length of the {@code String} plus 16.
Appends the string representation of the specified {@code boolean} value. The {@code boolean} value is converted to a String according to the rule defined by {@link String#valueOf(boolean)}.
Appends the string representation of the specified {@code char} value. The {@code char} value is converted to a string according to the rule defined by {@link String#valueOf(char)}.
Appends the string representation of the specified {@code int} value. The {@code int} value is converted to a string according to the rule defined by {@link String#valueOf(int)}.
Appends the string representation of the specified {@code long} value. The {@code long} value is converted to a string according to the rule defined by {@link String#valueOf(long)}.
Appends the string representation of the specified {@code float} value. The {@code float} value is converted to a string according to the rule defined by {@link String#valueOf(float)}.
Appends the string representation of the specified {@code double} value. The {@code double} value is converted to a string according to the rule defined by {@link String#valueOf(double)}.
Appends the string representation of the specified {@code Object}. The {@code Object} value is converted to a string according to the rule defined by {@link String#valueOf(Object)}.
Appends the contents of the specified string. If the string is {@code null}, then the string {@code "null"} is appended.
Appends the contents of the specified {@code StringBuffer}. If the StringBuffer is {@code null}, then the string {@code "null"} is appended.
Appends the string representation of the specified {@code char[]}. The {@code char[]} is converted to a string according to the rule defined by {@link String#valueOf(char[])}.
Appends the string representation of the specified subset of the {@code char[]}. The {@code char[]} value is converted to a String according to the rule defined by {@link String#valueOf(char[],int,int)}.
Appends the string representation of the specified {@code CharSequence}. If the {@code CharSequence} is {@code null}, then the string {@code "null"} is appended.
Appends the string representation of the specified subsequence of the {@code CharSequence}. If the {@code CharSequence} is {@code null}, then the string {@code "null"} is used to extract the subsequence from.
Appends the encoded Unicode code point. The code point is converted to a {@code char[]} as defined by {@link Character#toChars(int)}.
Deletes a sequence of characters specified by {@code start} and {@code end}. Shifts any remaining characters to the left.
Deletes the character at the specified index. shifts any remaining characters to the left.
Inserts the string representation of the specified {@code boolean} value at the specified {@code offset}. The {@code boolean} value is converted to a string according to the rule defined by {@link String#valueOf(boolean)}.
Inserts the string representation of the specified {@code char} value at the specified {@code offset}. The {@code char} value is converted to a string according to the rule defined by {@link String#valueOf(char)}.
Inserts the string representation of the specified {@code int} value at the specified {@code offset}. The {@code int} value is converted to a String according to the rule defined by {@link String#valueOf(int)}.
Inserts the string representation of the specified {@code long} value at the specified {@code offset}. The {@code long} value is converted to a String according to the rule defined by {@link String#valueOf(long)}.
Inserts the string representation of the specified {@code float} value at the specified {@code offset}. The {@code float} value is converted to a string according to the rule defined by {@link String#valueOf(float)}.
Inserts the string representation of the specified {@code double} value at the specified {@code offset}. The {@code double} value is converted to a String according to the rule defined by {@link String#valueOf(double)}.
Inserts the string representation of the specified {@code Object} at the specified {@code offset}. The {@code Object} value is converted to a String according to the rule defined by {@link String#valueOf(Object)}.
Inserts the specified string at the specified {@code offset}. If the specified string is null, then the String {@code "null"} is inserted.
Inserts the string representation of the specified {@code char[]} at the specified {@code offset}. The {@code char[]} value is converted to a String according to the rule defined by {@link String#valueOf(char[])}.
Inserts the string representation of the specified subsequence of the {@code char[]} at the specified {@code offset}. The {@code char[]} value is converted to a String according to the rule defined by {@link String#valueOf(char[],int,int)}.
Inserts the string representation of the specified {@code CharSequence} at the specified {@code offset}. The {@code CharSequence} is converted to a String as defined by {@link CharSequence#toString()}. If {@code s} is {@code null}, then the String {@code "null"} is inserted.
Inserts the string representation of the specified subsequence of the {@code CharSequence} at the specified {@code offset}. The {@code CharSequence} is converted to a String as defined by {@link CharSequence#subSequence(int, int)}. If the {@code CharSequence} is {@code null}, then the string {@code "null"} is used to determine the subsequence.
Replaces the specified subsequence in this builder with the specified string.
Reverses the order of characters in this builder.
Reads the state of a {@code StringBuilder} from the passed stream and restores it to this instance.
Writes the state of this object to the stream passed.
Constructs a new {@code StringIndexOutOfBoundsException} with the current stack trace and a detail message that is based on the specified invalid {@code index}.
Constructs a new {@code StringIndexOutOfBoundsException} with the current stack trace and the specified detail message.
Used internally for consistent high-quality error reporting.
Returns a StringExponentPair containing a String with no leading or trailing white space and trailing zeroes eliminated. The exponent of the StringExponentPair will be used to calculate the floating point number by taking the positive integer the String represents and multiplying by 10 raised to the power of the of the exponent.
Parses "+Nan", "NaN", "-Nan", "+Infinity", "Infinity", and "-Infinity", case-insensitively.
Returns the closest double value to the real number in the string.
Returns the closest float value to the real number in the string.
Sets the standard input stream to the given user defined input stream.
Sets the standard output stream to the given user defined output stream.
Sets the standard error output stream to the given user defined output stream.
Indicates to the VM that it would be a good time to run the garbage collector. Note that this is a hint only. There is no guarantee that the garbage collector will actually be run.
Returns the value of the environment variable with the given name {@code var}.
Returns an unmodifiable map of all available environment variables.
Returns the inherited channel from the creator of the current virtual machine.
Returns the system properties. Note that this is not a copy, so that changes made to the returned Properties object will be reflected in subsequent calls to getProperty and getProperties.
Adds each element of 'assignments' to 'p', treating each element as an assignment in the form "key=value".
Returns the value of a particular system property or {@code null} if no such property exists. <p>The following properties are always provided by the Dalvik VM: <p><table BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""> <tr BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"> <tr><td>file.separator</td>     <td>{@link java.io.File#separator}</td>    <td>{@code /}</td></tr> <tr><td>java.class.path</td>    <td>System class path</td>                 <td>{@code .}</td></tr> <tr><td>java.class.version</td> <td>(Not useful on Android)</td>           <td>{@code 50.0}</td></tr> <tr><td>java.compiler</td>      <td>(Not useful on Android)</td>           <td>Empty</td></tr> <tr><td>java.ext.dirs</td>      <td>(Not useful on Android)</td>           <td>Empty</td></tr> <tr><td>java.home</td>          <td>Location of the VM on the file system</td> <td>{@code /system}</td></tr> <tr><td>java.io.tmpdir</td>     <td>See {@link java.io.File#createTempFile}</td> <td>{@code /sdcard}</td></tr> <tr><td>java.library.path</td>  <td>Search path for JNI libraries</td>     <td>{@code /system/lib}</td></tr> <tr><td>java.vendor</td>        <td>Human-readable VM vendor</td>          <td>{@code The Android Project}</td></tr> <tr><td>java.version</td>       <td>(Not useful on Android)</td>           <td>{@code 0}</td></tr> <tr><td>java.specification.version</td>    <td>VM libraries version</td>        <td>{@code 0.9}</td></tr> <tr><td>java.specification.vendor</td>     <td>VM libraries vendor</td>         <td>{@code The Android Project}</td></tr> <tr><td>java.specification.name</td>       <td>VM libraries name</td>           <td>{@code Dalvik Core Library}</td></tr> <tr><td>java.vm.version</td>               <td>VM implementation version</td>   <td>{@code 1.2.0}</td></tr> <tr><td>java.vm.vendor</td>                <td>VM implementation vendor</td>    <td>{@code The Android Project}</td></tr> <tr><td>java.vm.name</td>                  <td>VM implementation name</td>      <td>{@code Dalvik}</td></tr> <tr><td>java.vm.specification.version</td> <td>VM specification version</td>    <td>{@code 0.9}</td></tr> <tr><td>java.vm.specification.vendor</td>  <td>VM specification vendor</td>     <td>{@code The Android Project}</td></tr> <tr><td>java.vm.specification.name</td>    <td>VM specification name</td>       <td>{@code Dalvik Virtual Machine Specification}</td></tr> <tr><td>line.separator</td>     <td>The system line separator</td>         <td>{@code \n}</td></tr> <tr><td>os.arch</td>            <td>OS architecture</td>                   <td>{@code armv7l}</td></tr> <tr><td>os.name</td>            <td>OS (kernel) name</td>                  <td>{@code Linux}</td></tr> <tr><td>os.version</td>         <td>OS (kernel) version</td>               <td>{@code 2.6.32.9-g103d848}</td></tr> <tr><td>path.separator</td>     <td>See {@link java.io.File#pathSeparator}</td> <td>{@code :}</td></tr> <tr><td>user.dir</td>           <td>Base of non-absolute paths</td>        <td>{@code /}</td></tr> <tr><td>user.home</td>          <td>(Not useful on Android)</td>           <td>Empty</td></tr> <tr><td>user.name</td>          <td>(Not useful on Android)</td>           <td>Empty</td></tr> </table> <p>It is a mistake to try to override any of these. Doing so will have unpredictable results.
Returns the value of a particular system property. The {@code defaultValue} will be returned if no such property has been found.
Sets the value of a particular system property.
Removes a specific system property.
Returns the {@link java.io.Console} associated with this VM, or null. Not all VMs will have an associated console. A console is typically only available for programs run from the command line.
Returns null. Android does not use {@code SecurityManager}. This method is only provided for source compatibility.
Returns the system's line separator. On Android, this is {@code "\n"}. The value comes from the value of the {@code line.separator} system property when the VM starts. Later changes to the property will not affect the value returned by this method.
Sets all system properties. This does not take a copy; the passed-in object is used directly. Passing null causes the VM to reinitialize the properties to how they were when the VM was started.
Throws {@code SecurityException}. <p>Security managers do <i>not</i> provide a secure environment for executing untrusted code and are unsupported on Android. Untrusted code cannot be safely isolated within a single VM on Android.
Constructs a new {@code Thread} with no {@code Runnable} object and a newly generated name. The new {@code Thread} will belong to the same {@code ThreadGroup} as the {@code Thread} calling this constructor.
Constructs a new {@code Thread} with a {@code Runnable} object and a newly generated name. The new {@code Thread} will belong to the same {@code ThreadGroup} as the {@code Thread} calling this constructor.
Constructs a new {@code Thread} with a {@code Runnable} object and name provided. The new {@code Thread} will belong to the same {@code ThreadGroup} as the {@code Thread} calling this constructor.
Constructs a new {@code Thread} with no {@code Runnable} object and the name provided. The new {@code Thread} will belong to the same {@code ThreadGroup} as the {@code Thread} calling this constructor.
Constructs a new {@code Thread} with a {@code Runnable} object and a newly generated name. The new {@code Thread} will belong to the {@code ThreadGroup} passed as parameter.
Constructs a new {@code Thread} with a {@code Runnable} object, the given name and belonging to the {@code ThreadGroup} passed as parameter.
Constructs a new {@code Thread} with no {@code Runnable} object, the given name and belonging to the {@code ThreadGroup} passed as parameter.
Package-scope method invoked by Dalvik VM to create "internal" threads or attach threads created externally. Don't call Thread.currentThread(), since there may not be such a thing (e.g. for Main).
Initializes a new, existing Thread object with a runnable object, the given name and belonging to the ThreadGroup passed as parameter. This is the method that the several public constructors delegate their work to.
Returns the number of active {@code Thread}s in the running {@code Thread}'s group and its subgroups.
Returns the Thread of the caller, that is, the current Thread.
Prints to the standard error stream a text representation of the current stack for this Thread.
Copies an array with all Threads which are in the same ThreadGroup as the receiver - and subgroups - into the array <code>threads</code> passed as parameter. If the array passed as parameter is too small no exception is thrown - the extra elements are simply not copied.
Returns a map of all the currently live threads to their stack traces.
Returns the context ClassLoader for this Thread.
Returns the default exception handler that's executed when uncaught exception terminates a thread.
Returns the thread's identifier. The ID is a positive <code>long</code> generated on thread creation, is unique to the thread, and doesn't change during the lifetime of the thread; the ID may be reused after the thread has been terminated.
Returns the name of the Thread.
Returns the priority of the Thread.
Returns an array of {@link StackTraceElement} representing the current thread's stack.
Returns the current state of the Thread. This method is useful for monitoring purposes.
Returns the ThreadGroup to which this Thread belongs.
Returns the thread's uncaught exception handler. If not explicitly set, then the ThreadGroup's handler is returned. If the thread is terminated, then <code>null</code> is returned.
Posts an interrupt request to this {@code Thread}. The behavior depends on the state of this {@code Thread}: <ul> <li> {@code Thread}s blocked in one of {@code Object}'s {@code wait()} methods or one of {@code Thread}'s {@code join()} or {@code sleep()} methods will be woken up, their interrupt status will be cleared, and they receive an {@link InterruptedException}. <li> {@code Thread}s blocked in an I/O operation of an {@link java.nio.channels.InterruptibleChannel} will have their interrupt status set and receive an {@link java.nio.channels.ClosedByInterruptException}. Also, the channel will be closed. <li> {@code Thread}s blocked in a {@link java.nio.channels.Selector} will have their interrupt status set and return immediately. They don't receive an exception in this case. <ul>
Returns a <code>boolean</code> indicating whether the current Thread ( <code>currentThread()</code>) has a pending interrupt request (<code> true</code>) or not (<code>false</code>). It also has the side-effect of clearing the flag.
Returns <code>true</code> if the receiver has already been started and still runs code (hasn't died yet). Returns <code>false</code> either if the receiver hasn't been started yet or if it has already started and run to completion and died.
Returns a <code>boolean</code> indicating whether the receiver is a daemon Thread (<code>true</code>) or not (<code>false</code>) A daemon Thread only runs as long as there are non-daemon Threads running. When the last non-daemon Thread ends, the whole program ends no matter if it had daemon Threads still running or not.
Returns a <code>boolean</code> indicating whether the receiver has a pending interrupt request (<code>true</code>) or not ( <code>false</code>)
Blocks the current Thread (<code>Thread.currentThread()</code>) until the receiver finishes its execution and dies.
Blocks the current Thread (<code>Thread.currentThread()</code>) until the receiver finishes its execution and dies or the specified timeout expires, whatever happens first.
Calls the <code>run()</code> method of the Runnable object the receiver holds. If no Runnable is set, does nothing.
Set the context ClassLoader for the receiver.
Set if the receiver is a daemon Thread or not. This can only be done before the Thread starts running.
Sets the default uncaught exception handler. This handler is invoked in case any Thread dies due to an unhandled exception.
Sets the name of the Thread.
Sets the priority of the Thread. Note that the final priority set may not be the parameter that was passed - it will depend on the receiver's ThreadGroup. The priority cannot be set to be higher than the receiver's ThreadGroup's maxPriority().
<p> Sets the uncaught exception handler. This handler is invoked in case this Thread dies due to an unhandled exception. </p>
Causes the thread which sent this message to sleep for the given interval of time (given in milliseconds). The precision is not guaranteed - the Thread may sleep more or less than requested.
Causes the thread which sent this message to sleep for the given interval of time (given in milliseconds and nanoseconds). The precision is not guaranteed - the Thread may sleep more or less than requested.
Starts the new Thread of execution. The <code>run()</code> method of the receiver will be called by the receiver Thread itself (and not the Thread calling <code>start()</code>).
Causes the calling Thread to yield execution time to another Thread that is ready to run. The actual scheduling is implementation-dependent.
Indicates whether the current Thread has a monitor lock on the specified object.
Unparks this thread. This unblocks the thread it if it was previously parked, or indicates that the thread is "preemptively unparked" if it wasn't already parked. The latter means that the next time the thread is told to park, it will merely clear its latent park bit and carry on without blocking. <p>See {@link java.util.concurrent.locks.LockSupport} for more in-depth information of the behavior of this method.</p>
Parks the current thread for a particular number of nanoseconds, or indefinitely. If not indefinitely, this method unparks the thread after the given number of nanoseconds if no other thread unparks it first. If the thread has been "preemptively unparked," this method cancels that unparking and returns immediately. This method may also return spuriously (that is, without the thread being told to unpark and without the indicated amount of time elapsing). <p>See {@link java.util.concurrent.locks.LockSupport} for more in-depth information of the behavior of this method.</p> <p>This method must only be called when <code>this</code> is the current thread. to park indefinitely
Parks the current thread until the specified system time. This method attempts to unpark the current thread immediately after <code>System.currentTimeMillis()</code> reaches the specified value, if no other thread unparks it first. If the thread has been "preemptively unparked," this method cancels that unparking and returns immediately. This method may also return spuriously (that is, without the thread being told to unpark and without the indicated amount of time elapsing). <p>See {@link java.util.concurrent.locks.LockSupport} for more in-depth information of the behavior of this method.</p> <p>This method must only be called when <code>this</code> is the current thread. in absolute milliseconds-since-the-epoch
Constructs a new {@code ThreadGroup} with the given name. The new {@code ThreadGroup} will be child of the {@code ThreadGroup} to which the calling thread belongs.
Constructs a new {@code ThreadGroup} with the given name, as a child of the given {@code ThreadGroup}.
Initialize the special "system" ThreadGroup. Was "main" in Harmony, but we have an additional group above that in Android.
Returns the number of running {@code Thread}s which are children of this thread group, directly or indirectly.
Returns the number of {@code ThreadGroup}s which are children of this group, directly or indirectly.
Adds a {@code ThreadGroup} to this thread group.
Destroys this thread group and recursively all its subgroups. It is only legal to destroy a {@code ThreadGroup} that has no threads in it. Any daemon {@code ThreadGroup} is destroyed automatically when it becomes empty (no threads or thread groups in it).
Auxiliary method that destroys this thread group and recursively all its subgroups if this is a daemon ThreadGroup.
Iterates over all active threads in this group (and its sub-groups) and stores the threads in the given array. Returns when the array is full or no more threads remain, whichever happens first. <p>Note that this method will silently ignore any threads that don't fit in the supplied array.
Iterates over all active threads in this group (and, optionally, its sub-groups) and stores the threads in the given array. Returns when the array is full or no more threads remain, whichever happens first. <p>Note that this method will silently ignore any threads that don't fit in the supplied array.
Iterates over all thread groups in this group (and its sub-groups) and and stores the groups in the given array. Returns when the array is full or no more groups remain, whichever happens first. <p>Note that this method will silently ignore any thread groups that don't fit in the supplied array.
Iterates over all thread groups in this group (and, optionally, its sub-groups) and stores the groups in the given array. Returns when the array is full or no more groups remain, whichever happens first. <p>Note that this method will silently ignore any thread groups that don't fit in the supplied array.
Copies into <param>enumeration</param> starting at <param>enumerationIndex</param> all Threads or ThreadGroups in the receiver. If <param>recurse</param> is true, recursively enumerate the elements in subgroups. If the array passed as parameter is too small no exception is thrown - the extra elements are simply not copied.
Returns the maximum allowed priority for a {@code Thread} in this thread group.
Returns the name of this thread group.
Returns this thread group's parent {@code ThreadGroup}. It can be null if this is the the root ThreadGroup.
Interrupts every {@code Thread} in this group and recursively in all its subgroups.
Checks whether this thread group is a daemon {@code ThreadGroup}.
Checks whether this thread group has already been destroyed.
Outputs to {@code System.out} a text representation of the hierarchy of {@code Thread}s and {@code ThreadGroup}s in this thread group (and recursively). Proper indentation is used to show the nesting of groups inside groups and threads inside groups.
Outputs to {@code System.out}a text representation of the hierarchy of Threads and ThreadGroups in this thread group (and recursively). The indentation will be four spaces per level of nesting. be output.
Checks whether this thread group is a direct or indirect parent group of a given {@code ThreadGroup}.
Removes an immediate subgroup.
Sets whether this is a daemon {@code ThreadGroup} or not. Daemon thread groups are automatically destroyed when they become empty.
Configures the maximum allowed priority for a {@code Thread} in this group and recursively in all its subgroups. <p>A caller can never increase the maximum priority of a thread group. Such an attempt will not result in an exception, it will simply leave the thread group with its current maximum priority.
Handles uncaught exceptions. Any uncaught exception in any {@code Thread} is forwarded to the thread's {@code ThreadGroup} by invoking this method. <p>New code should use {@link Thread#setUncaughtExceptionHandler} instead of thread groups.
Called by the Thread constructor.
Called by the VM when a Thread dies.
Provides the initial value of this variable for the current thread. The default implementation returns {@code null}.
Sets the value of this variable for the current thread. If set to {@code null}, the value will be set to null and the underlying entry will still be present.
Removes the entry for this variable in the current thread. If this call is followed by a {@link #get()} before a {@link #set}, {@code #get()} will call {@link #initialValue()} and create a new entry with the resulting value.
Creates Values instance for this thread and variable type.
Gets Values instance for this thread and variable type.
Constructs a new, empty instance.
Used for InheritableThreadLocals.
Creates a new, empty table with the given capacity.
Cleans up after garbage-collected thread locals.
Rehashes the table, expanding or contracting it as necessary. Gets rid of tombstones. Returns true if a rehash occurred. We must rehash every time we fill a null slot; we depend on the presence of null slots to end searches (otherwise, we'll infinitely loop).
Adds an entry during rehashing. Compared to put(), this method doesn't have to clean up, check for existing entries, account for tombstones, etc.
Sets entry for given ThreadLocal to given value, creating an entry if necessary.
Gets value for given ThreadLocal after not finding it in the first slot.
Removes entry for the given ThreadLocal.
Gets the next index. If we're at the end of the table, we wrap back around to 0.
Constructs a new {@code Throwable} that includes the current stack trace.
Constructs a new {@code Throwable} with the current stack trace and the specified detail message.
Constructs a new {@code Throwable} with the current stack trace, the specified detail message and the specified cause.
Constructs a new {@code Throwable} with the current stack trace and the specified cause.
Records the stack trace from the point where this method has been called to this {@code Throwable}. This method is invoked by the {@code Throwable} constructors. <p>This method is public so that code (such as an RPC system) which catches a {@code Throwable} and then re-throws it can replace the construction-time stack trace with a stack trace from the location where the exception was re-thrown, by <i>calling</i> {@code fillInStackTrace}. <p>This method is non-final so that non-Java language implementations can disable VM stack traces for their language. Filling in the stack trace is relatively expensive. <i>Overriding</i> this method in the root of a language's exception hierarchy allows the language to avoid paying for something it doesn't need.
Returns the extra information message which was provided when this {@code Throwable} was created. Returns {@code null} if no message was provided at creation time.
Returns the extra information message which was provided when this {@code Throwable} was created. Returns {@code null} if no message was provided at creation time. Subclasses may override this method to return localized text for the message. Android returns the regular detail message.
Returns the array of stack trace elements of this {@code Throwable}. Each {@code StackTraceElement} represents an entry in the call stack. The element at position 0 is the top of the stack, that is, the stack frame where this {@code Throwable} is thrown.
Sets the array of stack trace elements. Each {@code StackTraceElement} represents an entry in the call stack. A copy of the specified array is stored in this {@code Throwable}. will be returned by {@code getStackTrace()} and printed by {@code printStackTrace()}.
Writes a printable representation of this {@code Throwable}'s stack trace to the {@code System.err} stream.
Counts the number of duplicate stack frames, starting from the end of the stack.
Returns an array of StackTraceElement. Each StackTraceElement represents a entry on the stack.
Writes a printable representation of this {@code Throwable}'s stack trace to the specified print stream. If the {@code Throwable} contains a {@link #getCause() cause}, the method will be invoked recursively for the nested {@code Throwable}.
Writes a printable representation of this {@code Throwable}'s stack trace to the specified print writer. If the {@code Throwable} contains a {@link #getCause() cause}, the method will be invoked recursively for the nested {@code Throwable}.
Initializes the cause of this {@code Throwable}. The cause can only be initialized once.
Returns the cause of this {@code Throwable}, or {@code null} if there is no cause.
Adds {@code throwable} to the list of throwables suppressed by this. The throwable will included when this exception's stack trace is printed.
Returns the throwables suppressed by this.
Constructs a new {@code TypeNotPresentException} with the current stack trace, a detail message that includes the name of the type that could not be found and the {@code Throwable} that caused this exception.
Gets the fully qualified name of the type that could not be found.
Constructs a new {@code UnknownError} with the current stack trace and the specified detail message.
Moves the write pointer back to the beginning of the sequence, but without resizing or reallocating the buffer.
Constructs a new {@code UnsatisfiedLinkError} with the current stack trace and the specified detail message.
Constructs a new {@code UnsupportedClassVersionError} with the current stack trace and the specified detail message.
Constructs a new {@code UnsupportedOperationException} with the current stack trace and the specified detail message.
Constructs a new {@code UnsupportedOperationException} with the current stack trace, the specified detail message and the specified cause.
Constructs a new {@code UnsupportedOperationException} with the current stack trace and the specified cause.
Constructs a new {@code VerifyError} with the current stack trace and the specified detail message.
Constructs a new {@code VirtualMachineError} with the current stack trace and the specified detail message.
Get a resource from a file in the bootstrap class path. It would be simpler to just walk through the class path elements ourselves, but that would require reopening Jar files. We assume that the bootclasspath can't change once the VM has started.  This assumption seems to be supported by the spec.
Get an enumeration with all matching resources.
Constructs a new {@code BigDecimal} instance from a string representation given as a character array.
Constructs a new {@code BigDecimal} instance from a string representation given as a character array. The result is rounded according to the specified math context.
Constructs a new {@code BigDecimal} instance from a string representation.
Constructs a new {@code BigDecimal} instance from a string representation. The result is rounded according to the specified math context.
Constructs a new {@code BigDecimal} instance from the 64bit double {@code val}. The constructed big decimal is equivalent to the given double. For example, {@code new BigDecimal(0.1)} is equal to {@code 0.1000000000000000055511151231257827021181583404541015625}. This happens as {@code 0.1} cannot be represented exactly in binary. <p> To generate a big decimal instance which is equivalent to {@code 0.1} use the {@code BigDecimal(String)} constructor.
Constructs a new {@code BigDecimal} instance from the given big integer {@code val}. The scale of the result is {@code 0}.
Constructs a new {@code BigDecimal} instance from a given unscaled value {@code unscaledVal} and a given scale. The value of this instance is {@code unscaledVal} 10^(-{@code scale}).
Constructs a new {@code BigDecimal} instance from a given unscaled value {@code unscaledVal} and a given scale. The value of this instance is {@code unscaledVal} 10^(-{@code scale}). The result is rounded according to the specified math context.
Constructs a new {@code BigDecimal} instance from the given int {@code val}. The scale of the result is 0.
Constructs a new {@code BigDecimal} instance from the given int {@code val}. The scale of the result is {@code 0}. The result is rounded according to the specified math context.
Constructs a new {@code BigDecimal} instance from the given long {@code val}. The scale of the result is {@code 0}.
Constructs a new {@code BigDecimal} instance from the given long {@code val}. The scale of the result is {@code 0}. The result is rounded according to the specified math context.
Returns a new {@code BigDecimal} instance whose value is equal to {@code unscaledVal} 10^(-{@code scale}). The scale of the result is {@code scale}, and its unscaled value is {@code unscaledVal}.
Returns a new {@code BigDecimal} instance whose value is equal to {@code unscaledVal}. The scale of the result is {@code 0}, and its unscaled value is {@code unscaledVal}.
Returns a new {@code BigDecimal} instance whose value is equal to {@code val}. The new decimal is constructed as if the {@code BigDecimal(String)} constructor is called with an argument which is equal to {@code Double.toString(val)}. For example, {@code valueOf("0.1")} is converted to (unscaled=1, scale=1), although the double {@code 0.1} cannot be represented exactly as a double value. In contrast to that, a new {@code BigDecimal(0.1)} instance has the value {@code 0.1000000000000000055511151231257827021181583404541015625} with an unscaled value {@code 1000000000000000055511151231257827021181583404541015625} and the scale {@code 55}.
Returns a new {@code BigDecimal} whose value is {@code this + augend}. The scale of the result is the maximum of the scales of the two arguments.
Returns a new {@code BigDecimal} whose value is {@code this + augend}. The result is rounded according to the passed context {@code mc}.
Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}. The scale of the result is the maximum of the scales of the two arguments.
Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}. The result is rounded according to the passed context {@code mc}.
Returns a new {@code BigDecimal} whose value is {@code this multiplicand}. The scale of the result is the sum of the scales of the two arguments.
Returns a new {@code BigDecimal} whose value is {@code this multiplicand}. The result is rounded according to the passed context {@code mc}.
Returns a new {@code BigDecimal} whose value is {@code this / divisor}. As scale of the result the parameter {@code scale} is used. If rounding is required to meet the specified scale, then the specified rounding mode {@code roundingMode} is applied.
Returns a new {@code BigDecimal} whose value is {@code this / divisor}. The scale of the result is the scale of {@code this}. If rounding is required to meet the specified scale, then the specified rounding mode {@code roundingMode} is applied.
Returns a new {@code BigDecimal} whose value is {@code this / divisor}. The scale of the result is the difference of the scales of {@code this} and {@code divisor}. If the exact result requires more digits, then the scale is adjusted accordingly. For example, {@code 1/128 = 0.0078125} which has a scale of {@code 7} and precision {@code 5}.
Returns a new {@code BigDecimal} whose value is {@code this / divisor}. The result is rounded according to the passed context {@code mc}. If the passed math context specifies precision {@code 0}, then this call is equivalent to {@code this.divide(divisor)}.
Returns a new {@code BigDecimal} whose value is the integral part of {@code this / divisor}. The quotient is rounded down towards zero to the next integer. For example, {@code 0.5/0.2 = 2}.
Returns a new {@code BigDecimal} whose value is the integral part of {@code this / divisor}. The quotient is rounded down towards zero to the next integer. The rounding mode passed with the parameter {@code mc} is not considered. But if the precision of {@code mc > 0} and the integral part requires more digits, then an {@code ArithmeticException} is thrown.
Returns a new {@code BigDecimal} whose value is {@code this % divisor}. <p> The remainder is defined as {@code this - this.divideToIntegralValue(divisor) * divisor}.
Returns a new {@code BigDecimal} whose value is {@code this % divisor}. <p> The remainder is defined as {@code this - this.divideToIntegralValue(divisor) * divisor}. <p> The specified rounding mode {@code mc} is used for the division only.
Returns a {@code BigDecimal} array which contains the integral part of {@code this / divisor} at index 0 and the remainder {@code this % divisor} at index 1. The quotient is rounded down towards zero to the next integer.
Returns a {@code BigDecimal} array which contains the integral part of {@code this / divisor} at index 0 and the remainder {@code this % divisor} at index 1. The quotient is rounded down towards zero to the next integer. The rounding mode passed with the parameter {@code mc} is not considered. But if the precision of {@code mc > 0} and the integral part requires more digits, then an {@code ArithmeticException} is thrown.
Returns a new {@code BigDecimal} whose value is {@code this ^ n}. The scale of the result is {@code n} times the scales of {@code this}. <p> {@code x.pow(0)} returns {@code 1}, even if {@code x == 0}. <p> Implementation Note: The implementation is based on the ANSI standard X3.274-1996 algorithm.
Returns a new {@code BigDecimal} whose value is {@code this ^ n}. The result is rounded according to the passed context {@code mc}. <p> Implementation Note: The implementation is based on the ANSI standard X3.274-1996 algorithm.
Returns a new {@code BigDecimal} whose value is the absolute value of {@code this}. The scale of the result is the same as the scale of this.
Returns a new {@code BigDecimal} whose value is the absolute value of {@code this}. The result is rounded according to the passed context {@code mc}.
Returns a new {@code BigDecimal} whose value is the {@code -this}. The scale of the result is the same as the scale of this.
Returns a new {@code BigDecimal} whose value is the {@code -this}. The result is rounded according to the passed context {@code mc}.
Returns a new {@code BigDecimal} whose value is {@code +this}. The scale of the result is the same as the scale of this.
Returns a new {@code BigDecimal} whose value is {@code +this}. The result is rounded according to the passed context {@code mc}.
Returns the sign of this {@code BigDecimal}.
Returns the scale of this {@code BigDecimal}. The scale is the number of digits behind the decimal point. The value of this {@code BigDecimal} is the unsignedValue * 10^(-scale). If the scale is negative, then this {@code BigDecimal} represents a big integer.
Returns the precision of this {@code BigDecimal}. The precision is the number of decimal digits used to represent this decimal. It is equivalent to the number of digits of the unscaled value. The precision of {@code 0} is {@code 1} (independent of the scale).
Returns the unscaled value (mantissa) of this {@code BigDecimal} instance as a {@code BigInteger}. The unscaled value can be computed as {@code this} 10^(scale).
Returns a new {@code BigDecimal} whose value is {@code this}, rounded according to the passed context {@code mc}. <p> If {@code mc.precision = 0}, then no rounding is performed. <p> If {@code mc.precision > 0} and {@code mc.roundingMode == UNNECESSARY}, then an {@code ArithmeticException} is thrown if the result cannot be represented exactly within the given precision.
Returns a new {@code BigDecimal} instance with the specified scale. <p> If the new scale is greater than the old scale, then additional zeros are added to the unscaled value. In this case no rounding is necessary. <p> If the new scale is smaller than the old scale, then trailing digits are removed. If these trailing digits are not zero, then the remaining unscaled value has to be rounded. For this rounding operation the specified rounding mode is used.
Returns a new {@code BigDecimal} instance with the specified scale. If the new scale is greater than the old scale, then additional zeros are added to the unscaled value. If the new scale is smaller than the old scale, then trailing zeros are removed. If the trailing digits are not zeros then an ArithmeticException is thrown. <p> If no exception is thrown, then the following equation holds: {@code x.setScale(s).compareTo(x) == 0}.
Returns a new {@code BigDecimal} instance where the decimal point has been moved {@code n} places to the left. If {@code n < 0} then the decimal point is moved {@code -n} places to the right. <p> The result is obtained by changing its scale. If the scale of the result becomes negative, then its precision is increased such that the scale is zero. <p> Note, that {@code movePointLeft(0)} returns a result which is mathematically equivalent, but which has {@code scale >= 0}.
Returns a new {@code BigDecimal} instance where the decimal point has been moved {@code n} places to the right. If {@code n < 0} then the decimal point is moved {@code -n} places to the left. <p> The result is obtained by changing its scale. If the scale of the result becomes negative, then its precision is increased such that the scale is zero. <p> Note, that {@code movePointRight(0)} returns a result which is mathematically equivalent, but which has scale >= 0.
Returns a new {@code BigDecimal} whose value is {@code this} 10^{@code n}. The scale of the result is {@code this.scale()} - {@code n}. The precision of the result is the precision of {@code this}. <p> This method has the same effect as {@link #movePointRight}, except that the precision is not changed.
Returns a new {@code BigDecimal} instance with the same value as {@code this} but with a unscaled value where the trailing zeros have been removed. If the unscaled value of {@code this} has n trailing zeros, then the scale and the precision of the result has been reduced by n.
Compares this {@code BigDecimal} with {@code val}. Returns one of the three values {@code 1}, {@code 0}, or {@code -1}. The method behaves as if {@code this.subtract(val)} is computed. If this difference is > 0 then 1 is returned, if the difference is < 0 then -1 is returned, and if the difference is 0 then 0 is returned. This means, that if two decimal instances are compared which are equal in value but differ in scale, then these two instances are considered as equal.
Returns the minimum of this {@code BigDecimal} and {@code val}.
Returns the maximum of this {@code BigDecimal} and {@code val}.
Returns a string representation of this {@code BigDecimal}. This representation always prints all significant digits of this value. <p> If the scale is negative or if {@code scale - precision >= 6} then engineering notation is used. Engineering notation is similar to the scientific notation except that the exponent is made to be a multiple of 3 such that the integer part is >= 1 and < 1000.
Returns a string representation of this {@code BigDecimal}. No scientific notation is used. This methods adds zeros where necessary. <p> If this string representation is used to create a new instance, this instance is generally not identical to {@code this} as the precision changes. <p> {@code x.equals(new BigDecimal(x.toPlainString())} usually returns {@code false}. <p> {@code x.compareTo(new BigDecimal(x.toPlainString())} returns {@code 0}.
Returns this {@code BigDecimal} as a big integer instance. A fractional part is discarded.
Returns this {@code BigDecimal} as a big integer instance if it has no fractional part. If this {@code BigDecimal} has a fractional part, i.e. if rounding would be necessary, an {@code ArithmeticException} is thrown.
Returns this {@code BigDecimal} as a long value if it has no fractional part and if its value fits to the int range ([-2^{63}..2^{63}-1]). If these conditions are not met, an {@code ArithmeticException} is thrown.
Returns this {@code BigDecimal} as a int value if it has no fractional part and if its value fits to the int range ([-2^{31}..2^{31}-1]). If these conditions are not met, an {@code ArithmeticException} is thrown.
Returns this {@code BigDecimal} as a short value if it has no fractional part and if its value fits to the short range ([-2^{15}..2^{15}-1]). If these conditions are not met, an {@code ArithmeticException} is thrown.
Returns this {@code BigDecimal} as a byte value if it has no fractional part and if its value fits to the byte range ([-128..127]). If these conditions are not met, an {@code ArithmeticException} is thrown.
Returns the unit in the last place (ULP) of this {@code BigDecimal} instance. An ULP is the distance to the nearest big decimal with the same precision. <p> The amount of a rounding error in the evaluation of a floating-point operation is often expressed in ULPs. An error of 1 ULP is often seen as a tolerable error. <p> For class {@code BigDecimal}, the ULP of a number is simply 10^(-scale). <p> For example, {@code new BigDecimal(0.1).ulp()} returns {@code 1E-55}.
It does all rounding work of the public method {@code round(MathContext)}, performing an inplace rounding without creating a new object.
This method implements an efficient rounding for numbers which unscaled value fits in the type {@code long}.
Return an increment that can be -1,0 or 1, depending of {@code roundingMode}.
If {@code intVal} has a fractional part throws an exception, otherwise it counts the number of bits of value and checks if it's out of the range of the primitive type. If the number fits in the primitive type returns this number as {@code long}, otherwise throws an exception.
If the precision already was calculated it returns that value, otherwise it calculates a very good approximation efficiently . Note that this value will be {@code precision()} or {@code precision()-1} in the worst case.
It returns the value 0 with the most approximated scale of type {@code int}. if {@code longScale > Integer.MAX_VALUE} the scale will be {@code Integer.MAX_VALUE}; if {@code longScale < Integer.MIN_VALUE} the scale will be {@code Integer.MIN_VALUE}; otherwise {@code longScale} is casted to the type {@code int}.
Assigns all transient fields upon deserialization of a {@code BigDecimal} instance (bitLength and smallValue). The transient field precision is assigned lazily.
Prepares this {@code BigDecimal} for serialization, i.e. the non-transient field {@code intVal} is assigned.
Returns a string suitable for passing to OpenSSL. Throws if 's' doesn't match Java's rules for valid BigInteger strings. BN_dec2bn and BN_hex2bn do very little checking, so we need to manually ensure we comply with Java's rules.
Java supports non-ASCII decimal digits, but OpenSSL doesn't. We need to translate the decimal digits but leave any other characters alone. This method assumes it's being called on a string that has already been validated.
n > 0: shift left (multiply)
Constructs a number without creating new space. This construct should be used only if the three fields of representation are known.
Constructs a random non-negative {@code BigInteger} instance in the range {@code [0, pow(2, numBits)-1]}.
Constructs a random {@code BigInteger} instance in the range {@code [0, pow(2, bitLength)-1]} which is probably prime. The probability that the returned {@code BigInteger} is prime is beyond {@code 1 - 1/pow(2, certainty)}. <p><b>Implementation Note:</b> the {@code Random} argument is ignored. This implementation uses OpenSSL's {@code bn_rand} as a source of cryptographically strong pseudo-random numbers.
Constructs a new {@code BigInteger} by parsing {@code value}. The string representation consists of an optional plus or minus sign followed by a non-empty sequence of decimal digits. Digits are interpreted as if by {@code Character.digit(char,10)}.
Constructs a new {@code BigInteger} instance by parsing {@code value}. The string representation consists of an optional plus or minus sign followed by a non-empty sequence of digits in the specified radix. Digits are interpreted as if by {@code Character.digit(char, radix)}.
Constructs a new {@code BigInteger} instance with the given sign and magnitude.
Constructs a new {@code BigInteger} from the given two's complement representation. The most significant byte is the entry at index 0. The most significant bit of this entry determines the sign of the new {@code BigInteger} instance. The array must be nonempty.
Returns the internal native representation of this big integer, computing it if necessary.
Returns a {@code BigInteger} whose value is equal to {@code value}.
Returns the two's complement representation of this {@code BigInteger} in a byte array.
Returns a {@code BigInteger} whose value is the absolute value of {@code this}.
Returns a {@code BigInteger} whose value is the {@code -this}.
Returns a {@code BigInteger} whose value is {@code this + value}.
Returns a {@code BigInteger} whose value is {@code this - value}.
Returns the sign of this {@code BigInteger}.
Returns a {@code BigInteger} whose value is {@code this >> n}. For negative arguments, the result is also negative. The shift distance may be negative which means that {@code this} is shifted left. <p><b>Implementation Note:</b> Usage of this method on negative values is not recommended as the current implementation is not efficient.
Returns a {@code BigInteger} whose value is {@code this << n}. The result is equivalent to {@code this * pow(2, n)} if n >= 0. The shift distance may be negative which means that {@code this} is shifted right. The result then corresponds to {@code floor(this / pow(2, -n))}. <p><b>Implementation Note:</b> Usage of this method on negative values is not recommended as the current implementation is not efficient.
Returns the length of the value's two's complement representation without leading zeros for positive numbers / without leading ones for negative values. <p>The two's complement representation of {@code this} will be at least {@code bitLength() + 1} bits long. <p>The value will fit into an {@code int} if {@code bitLength() < 32} or into a {@code long} if {@code bitLength() < 64}.
Tests whether the bit at position n in {@code this} is set. The result is equivalent to {@code this & pow(2, n) != 0}. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns a {@code BigInteger} which has the same binary representation as {@code this} but with the bit at position n set. The result is equivalent to {@code this | pow(2, n)}. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns a {@code BigInteger} which has the same binary representation as {@code this} but with the bit at position n cleared. The result is equivalent to {@code this & ~pow(2, n)}. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns a {@code BigInteger} which has the same binary representation as {@code this} but with the bit at position n flipped. The result is equivalent to {@code this ^ pow(2, n)}. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns the position of the lowest set bit in the two's complement representation of this {@code BigInteger}. If all bits are zero (this==0) then -1 is returned as result. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns the number of bits in the two's complement representation of {@code this} which differ from the sign bit. If {@code this} is negative, the result is equivalent to the number of bits set in the two's complement representation of {@code -this - 1}. <p>Use {@code bitLength(0)} to find the length of the binary value in bits. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns a {@code BigInteger} whose value is {@code ~this}. The result of this operation is {@code -this-1}. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns a {@code BigInteger} whose value is {@code this & value}. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns a {@code BigInteger} whose value is {@code this | value}. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns a {@code BigInteger} whose value is {@code this ^ value}. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Returns a {@code BigInteger} whose value is {@code this & ~value}. Evaluating {@code x.andNot(value)} returns the same result as {@code x.and(value.not())}. <p><b>Implementation Note:</b> Usage of this method is not recommended as the current implementation is not efficient.
Compares this {@code BigInteger} with {@code value}. Returns {@code -1} if {@code this < value}, {@code 0} if {@code this == value} and {@code 1} if {@code this > value}, .
Returns the minimum of this {@code BigInteger} and {@code value}.
Returns the maximum of this {@code BigInteger} and {@code value}.
Returns a string containing a string representation of this {@code BigInteger} with base radix. If {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX} then a decimal representation is returned. The characters of the string representation are generated with method {@code Character.forDigit}.
Returns a {@code BigInteger} whose value is greatest common divisor of {@code this} and {@code value}. If {@code this == 0} and {@code value == 0} then zero is returned, otherwise the result is positive.
Returns a {@code BigInteger} whose value is {@code this * value}.
Returns a {@code BigInteger} whose value is {@code pow(this, exp)}.
Returns a two element {@code BigInteger} array containing {@code this / divisor} at index 0 and {@code this % divisor} at index 1.
Returns a {@code BigInteger} whose value is {@code this / divisor}.
Returns a {@code BigInteger} whose value is {@code this % divisor}. Regarding signs this methods has the same behavior as the % operator on ints: the sign of the remainder is the same as the sign of this.
Returns a {@code BigInteger} whose value is {@code 1/this mod m}. The modulus {@code m} must be positive. The result is guaranteed to be in the interval {@code [0, m)} (0 inclusive, m exclusive). If {@code this} is not relatively prime to m, then an exception is thrown.
Returns a {@code BigInteger} whose value is {@code pow(this, exponent) mod m}. The modulus {@code m} must be positive. The result is guaranteed to be in the interval {@code [0, m)} (0 inclusive, m exclusive). If the exponent is negative, then {@code pow(this.modInverse(m), -exponent) mod m} is computed. The inverse of this only exists if {@code this} is relatively prime to m, otherwise an exception is thrown.
Returns a {@code BigInteger} whose value is {@code this mod m}. The modulus {@code m} must be positive. The result is guaranteed to be in the interval {@code [0, m)} (0 inclusive, m exclusive). The behavior of this function is not equivalent to the behavior of the % operator defined for the built-in {@code int}'s.
Tests whether this {@code BigInteger} is probably prime. If {@code true} is returned, then this is prime with a probability beyond {@code 1 - 1/pow(2, certainty)}. If {@code false} is returned, then this is definitely composite. If the argument {@code certainty} <= 0, then this method returns true.
Returns the smallest integer x > {@code this} which is probably prime as a {@code BigInteger} instance. The probability that the returned {@code BigInteger} is prime is beyond {@code 1 - 1/pow(2, 80)}.
Returns a random positive {@code BigInteger} instance in the range {@code [0, pow(2, bitLength)-1]} which is probably prime. The probability that the returned {@code BigInteger} is prime is beyond {@code 1 - 1/pow(2, 80)}. <p><b>Implementation Note:</b> Currently {@code random} is ignored.
Returns the two's complement representation of this BigInteger in a byte array.
Returns a copy of the current instance to achieve immutability
Assigns all transient fields upon deserialization of a {@code BigInteger} instance.
Prepares this {@code BigInteger} for serialization, i.e. the non-transient fields {@code signum} and {@code magnitude} are assigned.
Performs a fast bit testing for positive numbers. The bit to to be tested must be in the range {@code [0, val.bitLength()-1]}
Check if there are 1s in the lowest bits of this BigInteger
Shifts right an array of integers. Total shift distance in bits is intCount * 32 + count.
Performs a flipBit on the BigInteger, returning a BigInteger with the the specified bit flipped.
Builds the correspondent {@code String} representation of {@code val} being scaled by {@code scale}.
can process only 32-bit numbers
Divides an array by an integer value. Implements the Knuth's division algorithm. See D. Knuth, The Art of Computer Programming, vol. 2.
Constructs a new {@code MathContext} with the specified precision and with the rounding mode {@link RoundingMode#HALF_UP HALF_UP}. If the precision passed is zero, then this implies that the computations have to be performed exact, the rounding mode in this case is irrelevant.
Constructs a new {@code MathContext} with the specified precision and with the specified rounding mode. If the precision passed is zero, then this implies that the computations have to be performed exact, the rounding mode in this case is irrelevant.
Constructs a new {@code MathContext} from a string. The string has to specify the precision and the rounding mode to be used and has to follow the following syntax: "precision=&lt;precision&gt; roundingMode=&lt;roundingMode&gt;" This is the same form as the one returned by the {@link #toString} method.
Returns the precision. The precision is the number of digits used for an operation. Results are rounded to this precision. The precision is guaranteed to be non negative. If the precision is zero, then the computations have to be performed exact, results are not rounded in this case.
Returns the rounding mode. The rounding mode is the strategy to be used to round results. <p> The rounding mode is one of {@link RoundingMode#UP}, {@link RoundingMode#DOWN}, {@link RoundingMode#CEILING}, {@link RoundingMode#FLOOR}, {@link RoundingMode#HALF_UP}, {@link RoundingMode#HALF_DOWN}, {@link RoundingMode#HALF_EVEN}, or {@link RoundingMode#UNNECESSARY}.
Makes checks upon deserialization of a {@code MathContext} instance. Checks whether {@code precision >= 0} and {@code roundingMode != null}
Multiplies a number by a positive integer.
Multiplies a number by a power of ten. This method is used in {@code BigDecimal} class.
It calculates a power of ten, which exponent could be out of 32-bit range. Note that internally this method will be used in the worst case with an exponent equals to: {@code Integer.MAX_VALUE - Integer.MIN_VALUE}.
Multiplies a number by a power of five. This method is used in {@code BigDecimal} class.
It uses the sieve of Eratosthenes to discard several composite numbers in some appropriate range (at the moment {@code [this, this + 1024]}). After this process it applies the Miller-Rabin test to the numbers that were not discarded in the sieve.
It sets the old constant.
Converts rounding mode constants from class {@code BigDecimal} into {@code RoundingMode} values.
Removes all entries from the cache.
Returns the cached InetAddress[] associated with 'hostname'. Returns null if nothing is known about 'hostname'. Returns a String suitable for use as an UnknownHostException detail message if 'hostname' is known not to exist.
Associates the given 'addresses' with 'hostname'. The association will expire after a certain length of time.
Associates the given 'detailMessage' with 'hostname'. The association will expire after a certain length of time.
Records that 'hostname' is known not to have any associated addresses. (I.e. insert a negative cache entry.)
Returns the collected username and password for authorization. The subclass has to override this method to return a value different to the default which is {@code null}. <p> Returns {@code null} by default.
Returns the port of the connection that requests authorization.
Returns the address of the connection that requests authorization or {@code null} if unknown.
Returns the realm (prompt string) of the connection that requests authorization.
Returns the protocol of the connection that requests authorization.
Returns the scheme of the connection that requests authorization, for example HTTP Basic Authentication.
Invokes the methods of the registered authenticator to get the authentication info.
Sets {@code a} as the default authenticator. It will be called whenever the realm that the URL is pointing to requires authorization.
Returns the host name of the connection that requests authentication or {@code null} if unknown.
Returns the URL of the authentication request.
Returns the type of this request, it can be {@code PROXY} or {@code SERVER}.
Constructs a new instance with the given detail message.
Constructs a new instance with the given detail message and cause.
Constructs a new instance with the given detail message.
Constructs a new instance with the given detail message and cause.
Returns the object pointed by the specified URL connection {@code uConn}.
Returns the system-wide cookie handler or {@code null} if not set.
Sets the system-wide cookie handler.
Constructs a new cookie manager. The invocation of this constructor is the same as the invocation of CookieManager(null, null).
Constructs a new cookie manager using a specified cookie store and a cookie policy.
Returns a cookie-safe path by truncating everything after the last "/". When request path like "/foo/bar.html" yields a cookie, that cookie's default path is "/foo/".
Sets the cookie policy of this cookie manager. ACCEPT_ORIGINAL_SERVER is the default policy for CookieManager.
Gets current cookie store.
A pre-defined policy, accepts all cookies.
A pre-defined policy, accepts no cookies at all.
A pre-defined policy, only accepts cookies from original server.
Constructs a new {@code DatagramPacket} object to receive data up to {@code length} bytes.
Constructs a new {@code DatagramPacket} object to receive data up to {@code length} bytes with a specified buffer offset.
Constructs a new {@code DatagramPacket} object to send data to the port {@code aPort} of the address {@code host}. The {@code length} must be lesser than or equal to the size of {@code data}. The first {@code length} bytes from the byte array position {@code offset} are sent.
Constructs a new {@code DatagramPacket} object to send data to the port {@code aPort} of the address {@code host}. The {@code length} must be lesser than or equal to the size of {@code data}. The first {@code length} bytes are sent.
Gets the sender or destination IP address of this datagram packet.
Gets the data of this datagram packet.
Gets the length of the data stored in this datagram packet.
Gets the offset of the data stored in this datagram packet.
Gets the port number of the target or sender host of this datagram packet.
Sets the IP address of the target host.
Sets the data buffer for this datagram packet.
Sets the data buffer for this datagram packet. The length of the datagram packet is set to the buffer length.
Gets the current capacity value.
Sets the length of the datagram packet. This length plus the offset must be lesser than or equal to the buffer size.
An alternative to {@link #setLength(int)}, that doesn't reset the {@link #capacity} field.
Sets the port number of the target host of this datagram packet.
Constructs a new {@code DatagramPacket} object to send data to the address {@code sockAddr}. The {@code length} must be lesser than or equal to the size of {@code data}. The first {@code length} bytes of the data are sent.
Gets the host address and the port to which this datagram packet is sent as a {@code SocketAddress} object.
Sets the {@code SocketAddress} for this datagram packet.
Constructs a UDP datagram socket which is bound to any available port on the localhost.
Constructs a UDP datagram socket which is bound to the specific port {@code aPort} on the localhost. Valid values for {@code aPort} are between 0 and 65535 inclusive.
Constructs a UDP datagram socket which is bound to the specific local address {@code addr} on port {@code aPort}. Valid values for {@code aPort} are between 0 and 65535 inclusive.
Closes this UDP datagram socket and all possibly associated channels. In the documentation jdk1.1.7a/guide/net/miscNet.html, this method is noted as not being synchronized.
Disconnects this UDP datagram socket from the remote host. This method called on an unconnected socket does nothing.
Gets the {@code InetAddress} instance representing the remote address to which this UDP datagram socket is connected.
Gets the {@code InetAddress} instance representing the bound local address of this UDP datagram socket.
Gets the local port which this socket is bound to.
Gets the remote port which this socket is connected to.
Indicates whether this socket is multicast or not.
Returns this socket's {@link SocketOptions#SO_RCVBUF receive buffer size}.
Returns this socket's {@link SocketOptions#SO_SNDBUF send buffer size}.
Gets the socket {@link SocketOptions#SO_TIMEOUT receive timeout}.
Receives a packet from this socket and stores it in the argument {@code pack}. All fields of {@code pack} must be set according to the data received. If the received data is longer than the packet buffer size it is truncated. This method blocks until a packet is received or a timeout has expired.
Sends a packet over this socket.
Sets the network interface used by this socket.  Any packets sent via this socket are transmitted via the specified interface.  Any packets received by this socket will come from the specified interface.  Broadcast datagrams received on this interface will be processed by this socket. This corresponds to Linux's SO_BINDTODEVICE.
Sets this socket's {@link SocketOptions#SO_SNDBUF send buffer size}.
Sets this socket's {@link SocketOptions#SO_SNDBUF receive buffer size}.
Sets the {@link SocketOptions#SO_TIMEOUT read timeout} in milliseconds for this socket. This receive timeout defines the period the socket will block waiting to receive data before throwing an {@code InterruptedIOException}. The value {@code 0} (default) is used to set an infinite timeout. To have effect this option must be set before the blocking method was called.
Sets the socket implementation factory. This may only be invoked once over the lifetime of the application. This factory is used to create a new datagram socket implementation.
Constructs a new {@code DatagramSocket} using the specific datagram socket implementation {@code socketImpl}. The created {@code DatagramSocket} will not be bound.
Constructs a new {@code DatagramSocket} bound to the host/port specified by the {@code SocketAddress} {@code localAddr} or an unbound {@code DatagramSocket} if the {@code SocketAddress} is {@code null}.
Binds this socket to the local address and port specified by {@code localAddr}. If this value is {@code null} any free port on a valid local address is used.
Connects this datagram socket to the address and port specified by {@code peer}. Future calls to {@link #send} will use this as the default target, and {@link #receive} will only accept packets from this source.
Connects this datagram socket to the specific {@code address} and {@code port}. Future calls to {@link #send} will use this as the default target, and {@link #receive} will only accept packets from this source. <p>Beware: because it can't throw, this method silently ignores failures. Use {@link #connect(SocketAddress)} instead.
Returns true if this socket is bound to a local address. See {@link #bind}.
Returns true if this datagram socket is connected to a remote address. See {@link #connect}.
Returns the {@code SocketAddress} this socket is connected to, or null for an unconnected socket.
Returns the {@code SocketAddress} this socket is bound to, or null for an unbound socket.
Sets the socket option {@code SocketOptions.SO_REUSEADDR}. This option has to be enabled if more than one UDP socket wants to be bound to the same address. That could be needed for receiving multicast packets. <p> There is an undefined behavior if this option is set after the socket is already bound.
Gets the state of the socket option {@code SocketOptions.SO_REUSEADDR}.
Sets the socket option {@code SocketOptions.SO_BROADCAST}. This option must be enabled to send broadcast messages.
Gets the state of the socket option {@code SocketOptions.SO_BROADCAST}.
Sets the {@see SocketOptions#IP_TOS} value for every packet sent by this socket.
Returns this socket's {@see SocketOptions#IP_TOS} setting.
Gets the state of this socket.
Returns this socket's {@code DatagramChannel}, if one exists. A channel is available only if this socket wraps a channel. (That is, you can go from a channel to a socket and back again, but you can't go from an arbitrary socket to a channel.) {@link java.nio.channels.DatagramChannel#open}.
Constructs an unbound datagram socket implementation.
Binds the datagram socket to the given localhost/port. Sockets must be bound prior to attempting to send or receive data.
Returns the local address to which the socket is bound.
Returns the local port to which this socket is bound.
Disconnects this socket from the remote host.
Returns true if {@code host} matches the domain pattern {@code domain}.
Returns true if {@code cookie} should be sent to or accepted from {@code uri} with respect to the cookie's path. Cookies match by directory prefix: URI "/foo" matches cookies "/foo", "/foo/" and "/foo/bar", but not "/" or "/foobar".
Returns true if {@code cookie} should be sent to {@code uri} with respect to the cookie's secure attribute. Secure cookies should not be sent in insecure (ie. non-HTTPS) requests.
Returns true if {@code cookie} should be sent to {@code uri} with respect to the cookie's port list.
Returns a non-null path ending in "/".
Returns true if {@code s.substring(firstCharacter)} contains a dot between its first and last characters, exclusive. This considers both {@code android.com} and {@code co.uk} to be fully qualified domain names, but not {@code android.com.}, {@code .com}. or {@code android}. <p>Although this implements the cookie spec's definition of FQDN, it is not general purpose. For example, this returns true for IPv4 addresses.
Constructs a cookie from a string. The string should comply with set-cookie or set-cookie2 header format as specified in set-cookies2 syntax allows more than one cookie definitions in one header, the returned object is a list.
Returns the next attribute name, or null if the input has been exhausted. Returns wth the cursor on the delimiter that follows.
Returns true if an equals sign was read and consumed.
Reads an attribute value, by parsing either a quoted string or until the next character in {@code terminators}. The terminator character is not consumed.
Returns the index of the next character in {@code chars}, or the end of the string.
Creates a new cookie.
Returns the {@code Comment} attribute.
Returns the value of {@code CommentURL} attribute.
Returns the {@code Discard} attribute.
Returns the {@code Domain} attribute.
Returns the {@code Max-Age} attribute, in delta-seconds.
Returns the name of this cookie.
Returns the {@code Path} attribute. This cookie is visible to all subpaths.
Returns the {@code Port} attribute, usually containing comma-separated port numbers. A null port indicates that the cookie may be sent to any port. The empty string indicates that the cookie should only be sent to the port of the originating request.
Returns the {@code Secure} attribute.
Returns the value of this cookie.
Returns the version of this cookie.
Returns true if this cookie's Max-Age is 0.
Set the {@code Comment} attribute of this cookie.
Set the {@code CommentURL} attribute of this cookie.
Set the {@code Discard} attribute of this cookie.
Set the {@code Domain} attribute of this cookie. HTTP clients send cookies only to matching domains.
Sets the {@code Max-Age} attribute of this cookie.
Set the {@code Path} attribute of this cookie. HTTP clients send cookies to this path and its subpaths.
Set the {@code Port} attribute of this cookie.
Sets the {@code Secure} attribute of this cookie.
Sets the opaque value of this cookie.
Sets the {@code Version} attribute of the cookie.
Returns true if {@code object} is a cookie with the same domain, name and path. Domain and name use case-insensitive comparison; path uses a case-sensitive comparison.
Returns the hash code of this HTTP cookie: <pre>   {@code name.toLowerCase(Locale.US).hashCode() }</pre>
Returns a string representing this cookie in the format used by the {@code Cookie} header line in an HTTP request.
Creates a new {@code HttpRetryException} instance with the specified response code and the given detail message.
Creates a new {@code HttpRetryException} instance with the specified response code, the given detail message and the value of the location field from the response header.
Gets the location value.
Gets the detail message.
Gets the response code.
Constructs a new {@code HttpURLConnection} instance pointing to the resource specified by the {@code url}.
Returns an input stream from the server in the case of an error such as the requested file has not been found on the remote server. This stream can be used to read the data the server will send back.
Returns the value of {@code followRedirects} which indicates if this connection follows a different URL redirected by the server. It is enabled by default.
Returns the request method which will be used to make the request to the remote HTTP server. All possible methods of this HTTP implementation is listed in the class definition.
Returns the response code returned by the remote HTTP server.
Returns the response message returned by the remote HTTP server.
Sets the flag of whether this connection will follow redirects returned by the remote server.
Sets the request command which will be sent to the remote HTTP server. This method can only be called before the connection is made.
Returns the encoding used to transmit the response body over the network. This is null or "identity" if the content was not encoded, or "gzip" if the body was gzip compressed. Most callers will be more interested in the {@link #getContentType() content type}, which may also include the content's character encoding.
Returns whether this connection follows redirects.
Sets whether this connection follows redirects.
If the length of a HTTP request body is known ahead, sets fixed length to enable streaming without buffering. Sets after connection will cause an exception.
Stream a request body whose length is not known in advance. Old HTTP/1.0 only servers may not support this mode. <p>When HTTP chunked encoding is used, the stream is divided into chunks, each prefixed with a header containing the chunk's size. Setting a large chunk length requires a large internal buffer, potentially wasting memory. Setting a small chunk length increases the number of bytes that must be transmitted because of the header on every chunk. Most caller should use {@code 0} to get the system default.
Transform a Unicode String to ASCII Compatible Encoding String according <p>If the transformation fails (because the input is not a valid IDN), an exception will be thrown. <p>This method can handle either an individual label or an entire domain name. In the latter case, the separators are: U+002E (full stop), U+3002 (ideographic full stop), U+FF0E (fullwidth full stop), and U+FF61 (halfwidth ideographic full stop). All of these will become U+002E (full stop) in the result.
Equivalent to {@code toASCII(input, 0)}.
Translates a string from ASCII Compatible Encoding (ACE) to Unicode <p>Unlike {@code toASCII}, this transformation cannot fail. <p>This method can handle either an individual label or an entire domain name. In the latter case, the separators are: U+002E (full stop), U+3002 (ideographic full stop), U+FF0E (fullwidth full stop), and U+FF61 (halfwidth ideographic full stop).
Equivalent to {@code toUnicode(input, 0)}.
Constructs an {@code InetAddress} representing the {@code address} and {@code name} and {@code scope_id}.
Constructs an IPv6 address according to the given {@code host}, {@code addr} and {@code scope_id}.
Gets an IPv6 address instance according to the given {@code host}, {@code addr} and {@code nif}. {@code scope_id} is set according to the given {@code nif} and the {@code addr} type (for example site-local or link-local).
Returns {@code true} if one of following cases applies: <p> <ol> <li>both addresses are site local</li> <li>both addresses are link local</li> <li>{@code ia} is neither site local nor link local</li> </ol>
Returns whether this IPv6 address is an IPv4-compatible address or not. An IPv4-compatible address has the prefix {@code ::/96} and is a deprecated and no-longer used equivalent of the modern IPv4-mapped IPv6 addresses.
Returns the scope id if this address is scoped to an interface, 0 otherwise.
Returns the network interface if this address is instanced with a scoped network interface, null otherwise.
Constructs an {@code InetAddress}. Note: this constructor is for subclasses only.
Returns the IP address represented by this {@code InetAddress} instance as a byte array. The elements are in network order (the highest order address byte is in the zeroth element).
Converts an array of byte arrays representing raw IP addresses of a host to an array of InetAddress objects.
Gets all IP addresses associated with the given {@code host} identified by name or literal IP address. The IP address is resolved by the configured name service. If the host name is empty or {@code null} an {@code UnknownHostException} is thrown. If the host name is a literal IP address string an array with the corresponding single {@code InetAddress} is returned.
Returns the InetAddresses for {@code host}. The returned array is shared and must be cloned before it is returned to application code.
Returns the address of a host according to the given host string name {@code host}. The host string may be either a machine name or a dotted string IP address. If the latter, the {@code hostName} field is determined upon demand. {@code host} can be {@code null} which means that an address of the loopback interface is returned.
Returns the numeric representation of this IP address (such as "127.0.0.1").
Returns the host name corresponding to this IP address. This may or may not be a fully-qualified name. If the IP address could not be resolved, the numeric representation is returned instead (see {@link #getHostAddress}).
Returns the fully qualified hostname corresponding to this IP address.
Returns an {@code InetAddress} for the local host if possible, or the loopback address otherwise. This method works by getting the hostname, performing a DNS lookup, and then taking the first returned address. For devices with multiple network interfaces and/or multiple addresses per interface, this does not necessarily return the {@code InetAddress} you want. <p>Multiple interface/address configurations were relatively rare when this API was designed, but multiple interfaces are the default for modern mobile devices (with separate wifi and radio interfaces), and the need to support both IPv4 and IPv6 has made multiple addresses commonplace. New code should thus avoid this method except where it's basically being used to get a loopback address or equivalent. <p>There are two main ways to get a more specific answer: <ul> <li>If you have a connected socket, you should probably use {@link Socket#getLocalAddress} instead: that will give you the address that's actually in use for that connection. (It's not possible to ask the question "what local address would a connection to a given remote address use?"; you have to actually make the connection and see.)</li> <li>For other use cases, see {@link NetworkInterface}, which lets you enumerate all available network interfaces and their addresses.</li> </ul> <p>Note that if the host doesn't have a hostname set&nbsp;&ndash; as Android devices typically don't&nbsp;&ndash; this method will effectively return the loopback address, albeit by getting the name {@code localhost} and then doing a lookup to translate that to {@code 127.0.0.1}. loopback address.
Resolves a hostname to its IP addresses using a cache.
Removes all entries from the VM's DNS cache. This does not affect the C library's DNS cache, nor any caching DNS servers between you and the canonical server.
Returns true if the string is a valid numeric IPv4 or IPv6 address (such as "192.168.0.1"). This copes with all forms of address that Java supports, detailed in the {@link InetAddress} class documentation.
Returns an InetAddress corresponding to the given numeric address (such as {@code "192.168.0.1"} or {@code "2001:4860:800d::68"}). This method will never do a DNS lookup. Non-numeric addresses are errors.
Returns the IPv6 loopback address {@code ::1} or the IPv4 loopback address {@code 127.0.0.1}.
Returns whether this is the IPv6 unspecified wildcard address {@code ::} or the IPv4 "any" address, {@code 0.0.0.0}.
Returns whether this address is a link-local address or not. <p>Valid IPv6 link-local addresses have the prefix {@code fe80::/10}. "Default Address Selection for Internet Protocol Version 6 (IPv6)" states that both IPv4 auto-configuration addresses (prefix {@code 169.254/16}) and IPv4 loopback addresses (prefix {@code 127/8}) have link-local scope, but {@link Inet4Address} only considers the auto-configuration addresses to have link-local scope. That is: the IPv4 loopback address returns false.
Returns whether this address is a loopback address or not. <p>Valid IPv4 loopback addresses have the prefix {@code 127/8}. <p>The only valid IPv6 loopback address is {@code ::1}.
Returns whether this address is a global multicast address or not. <p>Valid IPv6 global multicast addresses have the prefix {@code ffxe::/16}, where {@code x} is a set of flags and the additional 112 bits make up the global multicast address space. <p>Valid IPv4 global multicast addresses are the range of addresses from {@code 224.0.1.0} to {@code 238.255.255.255}.
Returns whether this address is a link-local multicast address or not. <p>Valid IPv6 link-local multicast addresses have the prefix {@code ffx2::/16}, where x is a set of flags and the additional 112 bits make up the link-local multicast address space. <p>Valid IPv4 link-local multicast addresses have the prefix {@code 224.0.0/24}.
Returns whether this address is a node-local multicast address or not. <p>Valid IPv6 node-local multicast addresses have the prefix {@code ffx1::/16}, where x is a set of flags and the additional 112 bits make up the link-local multicast address space. <p>There are no valid IPv4 node-local multicast addresses.
Returns whether this address is a organization-local multicast address or not. <p>Valid IPv6 organization-local multicast addresses have the prefix {@code ffx8::/16}, where x is a set of flags and the additional 112 bits make up the link-local multicast address space. <p>Valid IPv4 organization-local multicast addresses have the prefix {@code 239.192/14}.
Returns whether this address is a site-local multicast address or not. <p>Valid IPv6 site-local multicast addresses have the prefix {@code ffx5::/16}, where x is a set of flags and the additional 112 bits make up the link-local multicast address space. <p>Valid IPv4 site-local multicast addresses have the prefix {@code 239.255/16}.
Returns whether this address is a multicast address or not. <p>Valid IPv6 multicast addresses have the prefix {@code ff::/8}. <p>Valid IPv4 multicast addresses have the prefix {@code 224/4}.
Returns whether this address is a site-local address or not. <p>For the purposes of this method, valid IPv6 site-local addresses have the deprecated prefix {@code fec0::/10} from <i>not</i> the modern prefix {@code fc00::/7} from "Default Address Selection for Internet Protocol Version 6 (IPv6)" states that IPv4 private addresses have the prefix {@code 10/8}, {@code 172.16/12}, or {@code 192.168/16}.
Tries to reach this {@code InetAddress}. This method first tries to use ICMP <i>(ICMP ECHO REQUEST)</i>, falling back to a TCP connection on port 7 (Echo) of the remote host.
Equivalent to {@code getByAddress(null, ipAddress)}. Handy for addresses with no associated hostname.
Returns an {@code InetAddress} corresponding to the given network-order bytes {@code ipAddress} and {@code scopeId}. <p>For an IPv4 address, the byte array must be of length 4. For IPv6, the byte array must be of length 16. Any other length will cause an {@code UnknownHostException}. <p>No reverse lookup is performed. The given {@code hostName} (which may be null) is associated with the new {@code InetAddress} with no validation done. <p>(Note that numeric addresses such as {@code "127.0.0.1"} are names for the purposes of this API. Most callers probably want {@link #getAllByName} instead.)
The spec requires that if we encounter a generic InetAddress in serialized form then we should interpret it as an Inet4Address.
Creates a socket endpoint with the given port number {@code port} and no specified address. The range for valid port numbers is between 0 and 65535 inclusive.
Creates a socket endpoint with the given port number {@code port} and {@code address}. The range for valid port numbers is between 0 and 65535 inclusive. If {@code address} is {@code null} this socket is bound to the IPv4 wildcard address.
Creates a socket endpoint with the given port number {@code port} and the hostname {@code host}. The hostname is tried to be resolved and cannot be {@code null}. The range for valid port numbers is between 0 and 65535 inclusive.
Internal constructor for InetSocketAddress(String, int) and createUnresolved(String, int);
Creates an {@code InetSocketAddress} without trying to resolve the hostname into an {@code InetAddress}. The address field is marked as unresolved.
Gets the port number of this socket.
Gets the address of this socket.
Returns the hostname, doing a reverse lookup on the {@code InetAddress} if no hostname string was provided at construction time.
Returns the hostname if known, or the result of {@code InetAddress.getHostAddress}. Unlike {@link #getHostName}, this method will never cause a DNS lookup.
Returns whether this socket address is unresolved or not.
For IPv4.
For IPv6.
Returns the subnet-directed broadcast address if this is an IPv4 interface, null otherwise.
Returns the network prefix length in bits. (In IPv4 parlance, this is known as the subnet mask, but this method applies to IPv6 addresses too.)
Constructs an instance of {@code JarURLConnection} that refers to the specified URL.
Returns all attributes of the {@code JarEntry} referenced by this {@code JarURLConnection}.
Returns all certificates of the {@code JarEntry} referenced by this {@code JarURLConnection} instance. This method will return {@code null} until the {@code InputStream} has been completely verified.
Gets the name of the entry referenced by this {@code JarURLConnection}. The return value will be {@code null} if this instance refers to a JAR file rather than an JAR file entry.
Gets the {@code JarEntry} object of the entry referenced by this {@code JarURLConnection}.
Gets the manifest file associated with this JAR-URL.
Gets the {@code JarFile} object referenced by this {@code JarURLConnection}.
Gets all attributes of the manifest file referenced by this {@code JarURLConnection}. If this instance refers to a JAR-file rather than a JAR-file entry, {@code null} will be returned.
Constructs a new instance with the given detail message.
Constructs a new instance with given detail message and cause.
Constructs a multicast socket, bound to any available port on the local host.
Constructs a multicast socket, bound to the specified {@code port} on the local host.
Constructs a {@code MulticastSocket} bound to the address and port specified by {@code localAddress}, or an unbound {@code MulticastSocket} if {@code localAddress == null}. an {@code InetSocketAddress}, say).
Returns an address of the outgoing network interface used by this socket. To avoid inherent unpredictability, new code should use {@link #getNetworkInterface} instead.
Returns the outgoing network interface used by this socket.
Returns the time-to-live (TTL) for multicast packets sent on this socket.
Adds this socket to the specified multicast group. A socket must join a group before data may be received. A socket may be a member of multiple groups but may join any group only once.
Removes this socket from the specified multicast group.
Sets the outgoing network interface used by this socket. The interface used is the first interface found to have the given {@code address}. To avoid inherent unpredictability, new code should use {@link #getNetworkInterface} instead.
Sets the outgoing network interface used by this socket to the given {@code networkInterface}.
Sets the time-to-live (TTL) for multicast packets sent on this socket. Valid TTL values are between 0 and 255 inclusive.
Returns true if multicast loopback is <i>disabled</i>. See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the opposite of the underlying Unix {@code IP_MULTICAST_LOOP}.
Disables multicast loopback if {@code disable == true}. See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the opposite of the underlying Unix {@code IP_MULTICAST_LOOP}.
Returns the index for the network interface, or -1 if unknown.
Returns the name of this network interface (such as "eth0" or "lo").
Returns an enumeration of the addresses bound to this network interface.
Returns a human-readable name for this network interface. On Android, this is the same string as returned by {@link #getName}.
Returns the {@code NetworkInterface} corresponding to the named network interface, or null if no interface has this name.
Returns the {@code NetworkInterface} corresponding to the given address, or null if no interface has this address.
Returns the NetworkInterface corresponding to the given interface index, or null if no interface has this index.
Gets a list of all network interfaces available on the local system or {@code null} if no interface is available.
Returns the hash code for this {@code NetworkInterface}. Since the name should be unique for each network interface the hash code is generated using the name.
Returns a List of the InterfaceAddresses for this network interface.
Returns an enumeration of all the sub-interfaces of this network interface. Sub-interfaces are also known as virtual interfaces. <p>For example, {@code eth0:1} would be a sub-interface of {@code eth0}.
Returns the parent NetworkInterface of this interface if this is a sub-interface, or null if it's a physical (non virtual) interface.
Returns true if this network interface is up.
Returns true if this network interface is a loopback interface.
Returns true if this network interface is a point-to-point interface. (For example, a PPP connection using a modem.)
Returns true if this network interface supports multicast.
Returns the hardware address of the interface, if it has one, or null otherwise.
Returns the Maximum Transmission Unit (MTU) of this interface.
Returns true if this interface is a virtual interface (also called a sub-interface). Virtual interfaces are, on some systems, interfaces created as a child of a physical interface and given different settings (like address or MTU). Usually the name of the interface will the name of the parent followed by a colon (:) and a number identifying the child, since there can be several virtual interfaces attached to a single physical interface.
Constructs a new instance with the given detail message.
Constructs a new instance with given detail message and cause.
Creates an instance of a password authentication with a specified username and password.
Gets a clone of the password stored by this instance. The user is responsible to finalize the returned array if the password clone is no longer needed.
Gets the username stored by this instance.
Set the received address and port in the packet. We do this when the Datagram socket is connected at the native level and the recvConnnectedDatagramImpl does not update the packet with address from which the packet was received
Connects this socket to the specified remote host address/port.
Gets the SOCKS proxy server port.
Gets the InetAddress of the SOCKS proxy server.
Connect using a SOCKS server.
Request a SOCKS connection to the application server given. If the request fails to complete successfully, an exception is thrown.
Perform an accept for a SOCKS bind.
Bind using a SOCKS server.
Send a SOCKS V4 request.
Read a SOCKS V4 reply.
For PlainSocketInputStream.
For PlainSocketOutputStream.
Constructs a new instance with the given detail message.
Constructs a new instance with given detail message and cause.
Constructs a new instance with the given detail message.
Constructs a new instance with given detail message and cause.
Creates a new {@code Proxy} instance. {@code SocketAddress} must NOT be {@code null} when {@code type} is either {@code Proxy.Type.HTTP} or {@code Proxy.Type.SOCKS}. To create a {@code Proxy} instance representing the proxy type {@code Proxy.Type.DIRECT}, use {@code Proxy.NO_PROXY} instead of this constructor.
Constructs a Proxy instance, which is Proxy.DIRECT type with null SocketAddress. This constructor is used for NO_PROXY.
Gets the type of this {@code Proxy} instance.
Gets the address of this {@code Proxy} instance.
Returns the default proxy selector, or null if none exists.
Sets the default proxy selector. If {@code selector} is null, the current proxy selector will be removed.
Returns the proxy identified by the {@code hostKey} system property, or null.
Returns true if the {@code nonProxyHosts} system property pattern exists and matches {@code host}.
Returns the system's default response cache, or null.
Sets the system's default response cache. Use null to remove the response cache.
Constructs a new unbound {@code ServerSocket}.
Constructs a new {@code ServerSocket} instance bound to the given {@code port}. The backlog is set to 50. If {@code port == 0}, a port will be assigned by the OS.
Constructs a new {@code ServerSocket} instance bound to the given {@code port}. The backlog is set to {@code backlog}. If {@code port == 0}, a port will be assigned by the OS.
Constructs a new {@code ServerSocket} instance bound to the given {@code localAddress} and {@code port}. The backlog is set to {@code backlog}. If {@code localAddress == null}, the ANY address is used. If {@code port == 0}, a port will be assigned by the OS.
Waits for an incoming request and blocks until the connection is opened. This method returns a socket object representing the just opened connection.
Closes this server socket and its implementation. Any attempt to connect to this socket thereafter will fail.
Gets the local IP address of this server socket or {@code null} if the socket is unbound. This is useful for multihomed hosts.
Gets the local port of this server socket or {@code -1} if the socket is unbound.
Gets the socket {@link SocketOptions#SO_TIMEOUT accept timeout}.
Invokes the server socket implementation to accept a connection on the given socket {@code aSocket}.
Sets the server socket implementation factory of this instance. This method may only be invoked with sufficient security privilege and only once during the application lifetime.
Sets the {@link SocketOptions#SO_TIMEOUT accept timeout} in milliseconds for this socket. This accept timeout defines the period the socket will block waiting to accept a connection before throwing an {@code InterruptedIOException}. The value {@code 0} (default) is used to set an infinite timeout. To have effect this option must be set before the blocking method was called.
Binds this server socket to the given local socket address with a maximum backlog of 50 unaccepted connections. If the {@code localAddr} is set to {@code null} the socket will be bound to an available local address on any free port of the system.
Binds this server socket to the given local socket address. If the {@code localAddr} is set to {@code null} the socket will be bound to an available local address on any free port of the system.
Gets the local socket address of this server socket or {@code null} if the socket is unbound. This is useful on multihomed hosts.
Returns whether this server socket is bound to a local address and port or not.
Returns whether this server socket is closed or not.
Sets the value for the socket option {@code SocketOptions.SO_REUSEADDR}.
Gets the value of the socket option {@code SocketOptions.SO_REUSEADDR}.
Returns this socket's {@code ServerSocketChannel}, if one exists. A channel is available only if this socket wraps a channel. (That is, you can go from a channel to a socket and back again, but you can't go from an arbitrary socket to a channel.) {@link java.nio.channels.ServerSocketChannel#open}.
Sets performance preferences for connection time, latency and bandwidth. <p> This method does currently nothing.
Creates a new unconnected socket. When a SocketImplFactory is defined it creates the internal socket implementation, otherwise the default socket implementation will be used for this socket.
Creates a new unconnected socket using the given proxy type. When a {@code SocketImplFactory} is defined it creates the internal socket implementation, otherwise the default socket implementation will be used for this socket. <p> Example that will create a socket connection through a {@code SOCKS} proxy server: <br> {@code Socket sock = new Socket(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress("test.domain.org", 2130)));}
Tries to connect a socket to all IP addresses of the given hostname.
Creates a new streaming socket connected to the target host specified by the parameters {@code dstName} and {@code dstPort}. The socket is bound to any available port on the local host. <p>This implementation tries each IP address for the given hostname (in until it either connects successfully or it exhausts the set.
Creates a new streaming socket connected to the target host specified by the parameters {@code dstName} and {@code dstPort}. On the local endpoint the socket is bound to the given address {@code localAddress} on port {@code localPort}. If {@code host} is {@code null} a loopback address is used to connect to. <p>This implementation tries each IP address for the given hostname (in until it either connects successfully or it exhausts the set.
Creates a new streaming socket connected to the target host specified by the parameters {@code dstAddress} and {@code dstPort}. The socket is bound to any available port on the local host.
Creates a new streaming socket connected to the target host specified by the parameters {@code dstAddress} and {@code dstPort}. On the local endpoint the socket is bound to the given address {@code localAddress} on port {@code localPort}.
Creates an unconnected socket with the given socket implementation.
Checks whether the connection destination satisfies the security policy and the validity of the port range.
Closes the socket. It is not possible to reconnect or rebind to this socket thereafter which means a new socket instance has to be created.
Returns the IP address of the target host this socket is connected to, or null if this socket is not yet connected.
Returns an input stream to read data from this socket.
Returns this socket's {@link SocketOptions#SO_KEEPALIVE} setting.
Returns the local IP address this socket is bound to, or {@code InetAddress.ANY} if the socket is unbound.
Returns the local port this socket is bound to, or -1 if the socket is unbound.
Returns an output stream to write data into this socket.
Returns the port number of the target host this socket is connected to, or 0 if this socket is not yet connected.
Returns this socket's {@link SocketOptions#SO_LINGER linger} timeout in seconds, or -1 for no linger (i.e. {@code close} will return immediately).
Returns this socket's {@link SocketOptions#SO_TIMEOUT receive timeout}.
Returns this socket's {@code SocketOptions#TCP_NODELAY} setting.
Sets this socket's {@link SocketOptions#SO_KEEPALIVE} option.
Sets the internal factory for creating socket implementations. This may only be executed once during the lifetime of the application.
Sets this socket's {@link SocketOptions#SO_LINGER linger} timeout in seconds. If {@code on} is false, {@code timeout} is irrelevant.
Sets this socket's {@link SocketOptions#SO_TIMEOUT read timeout} in milliseconds. Use 0 for no timeout. To take effect, this option must be set before the blocking method was called.
Sets this socket's {@link SocketOptions#TCP_NODELAY} option.
Creates a stream socket, binds it to the nominated local address/port, then connects it to the nominated destination address/port.
Closes the input stream of this socket. Any further data sent to this socket will be discarded. Reading from this socket after this method has been called will return the value {@code EOF}.
Closes the output stream of this socket. All buffered data will be sent followed by the termination sequence. Writing to the closed output stream will cause an {@code IOException}.
Checks whether the socket is closed, and throws an exception. Otherwise creates the underlying SocketImpl.
Returns the local address and port of this socket as a SocketAddress or null if the socket is unbound. This is useful on multihomed hosts.
Returns the remote address and port of this socket as a {@code SocketAddress} or null if the socket is not connected.
Returns whether this socket is bound to a local address and port.
Returns whether this socket is connected to a remote host.
Returns whether this socket is closed.
Binds this socket to the given local host address and port specified by the SocketAddress {@code localAddr}. If {@code localAddr} is set to {@code null}, this socket will be bound to an available local address on any free port.
Connects this socket to the given remote host address and port specified by the SocketAddress {@code remoteAddr}.
Connects this socket to the given remote host address and port specified by the SocketAddress {@code remoteAddr} with the specified timeout. The connecting method will block until the connection is established or an error occurred.
Returns whether the incoming channel of the socket has already been closed.
Returns whether the outgoing channel of the socket has already been closed.
Sets this socket's {@link SocketOptions#SO_REUSEADDR} option.
Returns this socket's {@link SocketOptions#SO_REUSEADDR} setting.
Sets this socket's {@link SocketOptions#SO_OOBINLINE} option.
Returns this socket's {@link SocketOptions#SO_OOBINLINE} setting.
Sets this socket's {@link SocketOptions#IP_TOS} value for every packet sent by this socket.
Sends the given single byte data which is represented by the lowest octet of {@code value} as "TCP urgent data".
Returns this socket's {@code SocketChannel}, if one exists. A channel is available only if this socket wraps a channel. (That is, you can go from a channel to a socket and back again, but you can't go from an arbitrary socket to a channel.) {@link java.nio.channels.ServerSocketChannel#accept} or {@link java.nio.channels.SocketChannel#open}.
Sets performance preferences for connectionTime, latency and bandwidth. <p>This method does currently nothing.
Constructs a new instance with the given detail message.
Constructs a new instance with the given cause.
Constructs a new instance with given detail message and cause.
Waits for an incoming request and blocks until the connection is opened on the given socket.
Gets the remote address this socket is connected to.
Gets the input stream of this socket.
Gets the output stream of this socket.
Listens for connection requests on this streaming socket. Incoming connection requests are queued up to the limit specified by {@code backlog}. Additional requests are rejected. This method may only be invoked on stream sockets.
Closes the input channel of this socket. <p>This default implementation always throws an {@link IOException} to indicate that the subclass should have overridden this method.
Closes the output channel of this socket. <p>This default implementation always throws an {@link IOException} to indicate that the subclass should have overridden this method.
Connects this socket to the remote host address and port number specified by the {@code SocketAddress} object with the given timeout. This method will block indefinitely if the timeout is set to zero.
Sends the single byte of urgent data on the socket.
Constructs a new instance with the given detail message.
Constructs a new instance with given cause.
Constructs a new instance with given detail message and cause.
Helps us reuse more of Socket's implementation in SocketChannelImpl.SocketAdapter. It's not the case that we should set isCreated in the Socket(SocketImpl) constructor; SocketImpl.create should be called in general. But for SocketChannelImpl.SocketAdapter's SocketImpl, we don't want that behavior.
Get the request's command or result.
Set the request's command or result.
Returns the request's port number.
Set the request's port number.
Returns the IP address of the request as an integer.
Set the IP address. This expects an array of four bytes in host order.
Returns the user id for authentication.
Set the user id for authentication.
Returns the total number of bytes used for the request. This method searches for the end of the user id, then searches for the end of the password and returns the final index as the requests length.
Returns an error string corresponding to the given error value.
Returns the message's byte buffer.
Get a String from the buffer at the offset given. The method reads until it encounters a null value or reaches the maxLength given.
Returns the SOCKS version number. Should always be 4.
Put a string into the buffer at the offset given.
Set the SOCKS version number. This should always be 4.
Constructs a new {@code UnknownHostException} instance with the given detail message. The detail message should generally contain the hostname and a reason for the failure, if known.
Constructs a new instance with the given detail message.
Constructs a new instance with given detail message and cause.
Retains all ASCII chars including delimiters.
Creates a new URI instance by parsing {@code spec}.
Creates a new URI instance of the given unencoded component parts.
Breaks uri into its component parts. This first splits URI into scheme, scheme-specific part and fragment: [scheme:][scheme-specific part][#fragment] Then it breaks the scheme-specific part into authority, path and query: [//authority][path][?query] Finally it delegates to parseAuthority to break the authority into user info, host and port: [user-info@][host][:port]
Breaks this URI's authority into user info, host and port parts. [user-info@][host][:port] If any part of this fails this method will give up and potentially leave these fields with their default values.
Returns true if {@code host} is a well-formed host name or IP address.
Compares this URI with the given argument {@code uri}. This method will return a negative value if this URI instance is less than the given argument and a positive value if this URI instance is greater than the given argument. The return value {@code 0} indicates that the two instances represent the same URI. To define the order the single parts of the URI are compared with each other. String components will be ordered in the natural case-sensitive way. A hierarchical URI is less than an opaque URI and if one part is {@code null} the URI with the undefined part is less than the other one.
Returns the URI formed by parsing {@code uri}. This method behaves identically to the string constructor but throws a different exception on failure. The constructor fails with a checked {@link URISyntaxException}; this method fails with an unchecked {@link IllegalArgumentException}.
Takes a string that may contain hex sequences like %F1 or %2b and converts the hex values following the '%' to lowercase
Returns true if {@code first} and {@code second} are equal after unescaping hex sequences like %F1 and %2b.
Returns the scheme of this URI, or null if this URI has no scheme. This is also known as the protocol.
Returns the decoded scheme-specific part of this URI, or null if this URI has no scheme-specific part.
Returns the encoded scheme-specific part of this URI, or null if this URI has no scheme-specific part.
Returns the decoded authority part of this URI, or null if this URI has no authority.
Returns the encoded authority of this URI, or null if this URI has no authority.
Returns the decoded user info of this URI, or null if this URI has no user info.
Returns the encoded user info of this URI, or null if this URI has no user info.
Returns the host of this URI, or null if this URI has no host.
Returns the port number of this URI, or {@code -1} if this URI has no explicit port.
Returns the port to use for {@code scheme} connections will use when {@link #getPort} returns {@code specifiedPort}.
Returns the decoded path of this URI, or null if this URI has no path.
Returns the encoded path of this URI, or null if this URI has no path.
Returns the decoded query of this URI, or null if this URI has no query.
Returns the encoded query of this URI, or null if this URI has no query.
Returns the decoded fragment of this URI, or null if this URI has no fragment.
Gets the encoded fragment of this URI, or null if this URI has no fragment.
Returns true if this URI is absolute, which means that a scheme is defined.
Returns true if this URI is opaque. Opaque URIs are absolute and have a scheme-specific part that does not start with a slash character. All parts except scheme, scheme-specific and fragment are undefined.
Returns the normalized path.
Normalizes the path part of this URI.
Tries to parse the authority component of this URI to divide it into the host, port, and user-info. If this URI is already determined as a ServerAuthority this instance will be returned without changes.
Makes the given URI {@code relative} to a relative URI against the URI represented by this instance.
Resolves the given URI {@code relative} against the URI represented by this instance.
Helper method used to re-calculate the scheme specific part of the resolved or normalized URIs
Creates a new URI instance by parsing the given string {@code relative} and resolves the created URI against the URI represented by this instance.
Returns the textual string representation of this URI instance using the US-ASCII encoding.
Returns the encoded URI.
Form a string from the components of this URI, similarly to the toString() method. But this method converts scheme and host to lowercase, and converts escaped octets to lowercase.
Converts this URI instance to a URL.
Constructs a new {@code URISyntaxException} instance containing the string that caused the exception, a description of the problem and the index at which the error occurred.
Constructs a new {@code URISyntaxException} instance containing the string that caused the exception and a description of the problem.
Gets the index at which the syntax error was found or {@code -1} if the index is unknown/unavailable.
Gets a description of the syntax error.
Gets the initial string that contains an invalid syntax.
Sets the stream handler factory for this VM.
Creates a new URL instance by parsing {@code spec}.
Creates a new URL by resolving {@code spec} relative to {@code context}.
Creates a new URL of the given component parts. The URL uses the protocol's default port.
Sets the properties of this URL using the provided arguments. Only a {@code URLStreamHandler} can use this method to set fields of the existing URL instance. A URL is generally constant.
Returns true if this URL equals {@code o}. URLs are equal if they have the same protocol, host, port, file, and reference. <h3>Network I/O Warning</h3> <p>Some implementations of URL.equals() resolve host names over the network. This is problematic: <ul> <li><strong>The network may be slow.</strong> Many classes, including core collections like {@link java.util.Map Map} and {@link java.util.Set Set} expect that {@code equals} and {@code hashCode} will return quickly. By violating this assumption, this method posed potential performance problems. <li><strong>Equal IP addresses do not imply equal content.</strong> Virtual hosting permits unrelated sites to share an IP address. This method could report two otherwise unrelated URLs to be equal because they're hosted on the same server.</li> <li><strong>The network many not be available.</strong> Two URLs could be equal when a network is available and unequal otherwise.</li> <li><strong>The network may change.</strong> The IP address for a given host name varies by network and over time. This is problematic for mobile devices. Two URLs could be equal on some networks and unequal on others.</li> </ul> <p>This problem is fixed in Android in the Ice Cream Sandwich release. In that release, URLs are only equal if their host names are equal (ignoring case).
Returns true if this URL refers to the same resource as {@code otherURL}. All URL components except the reference field are compared.
Sets the receiver's stream handler to one which is appropriate for its protocol. <p>Note that this will overwrite any existing stream handler with the new one. Senders must check if the streamHandler is null before calling the method if they do not want this behavior (a speed optimization).
Returns the content of the resource which is referred by this URL. By default this returns an {@code InputStream}, or null if the content type of the response is unknown.
Equivalent to {@code openConnection().getInputStream(types)}.
Returns a new connection to the resource referred to by this URL.
Returns the URI equivalent to this URL.
Encodes this URL to the equivalent URI after escaping characters that are not permitted by URI.
Returns a string containing a concise, human-readable representation of this URL. The returned string is the same as the result of the method {@code toExternalForm()}.
Returns a string containing a concise, human-readable representation of this URL.
Returns the protocol of this URL like "http" or "file". This is also known as the scheme. The returned string is lower case.
Returns the authority part of this URL, or null if this URL has no authority.
Returns the user info of this URL, or null if this URL has no user info.
Returns the host name or IP address of this URL.
Returns the port number of this URL or {@code -1} if this URL has no explicit port. <p>If this URL has no explicit port, connections opened using this URL will use its {@link #getDefaultPort() default port}.
Returns the default port number of the protocol used by this URL. If no default port is defined by the protocol or the {@code URLStreamHandler}, {@code -1} will be returned.
Returns the file of this URL.
Returns the path part of this URL.
Returns the query part of this URL, or null if this URL has no query.
Returns the value of the reference part of this URL, or null if this URL has no reference part. This is also known as the fragment.
private URLClassLoader host;
Constructs a new {@code URLClassLoader} instance. The newly created instance will have the system ClassLoader as its parent. URLs that end with "/" are assumed to be directories, otherwise they are assumed to be JAR files.
Constructs a new URLClassLoader instance. The newly created instance will have the system ClassLoader as its parent. URLs that end with "/" are assumed to be directories, otherwise they are assumed to be JAR files.
Adds the specified URL to the search list.
Returns the search list of this {@code URLClassLoader}.
Determines if the URL is pointing to a directory.
Returns a new {@code URLClassLoader} instance for the given URLs and the system {@code ClassLoader} as its parent.
Returns a new {@code URLClassLoader} instance for the given URLs and the specified {@code ClassLoader} as its parent.
Constructs a new {@code URLClassLoader} instance. The newly created instance will have the specified {@code ClassLoader} as its parent and use the specified factory to create stream handlers. URLs that end with "/" are assumed to be directories, otherwise they are assumed to be JAR files.
Returns an URL that will be checked if it contains the class or resource. If the file component of the URL is not a directory, a Jar URL will be created.
Defines a new package using the information extracted from the specified manifest.
returns URLs referenced in the string classpath.
Creates a new {@code URLConnection} instance pointing to the resource specified by the given URL.
Opens a connection to the resource. This method will <strong>not</strong> reconnect to a resource after the initial connection has been closed.
Returns an object representing the content of the resource this {@code URLConnection} is connected to. First, it attempts to get the content type from the method {@code getContentType()} which looks at the response header field "Content-Type". If none is found it will guess the content type from the filename extension. If that fails the stream itself will be used to guess the content type.
Returns the content encoding type specified by the response header field {@code content-encoding} or {@code null} if this field is not set.
Returns the specific ContentHandler that will handle the type {@code contentType}.
Returns the content length in bytes specified by the response header field {@code content-length} or {@code -1} if this field is not set.
Returns the MIME-type of the content specified by the response header field {@code content-type} or {@code null} if type is unknown.
Returns the timestamp when this response has been sent as a date in milliseconds since January 1, 1970 GMT or {@code 0} if this timestamp is unknown.
Returns the default setting whether this connection allows user interaction.
Returns the default setting whether this connection allows using caches.
Returns the value of the option {@code doInput} which specifies whether this connection allows to receive data.
Returns the value of the option {@code doOutput} which specifies whether this connection allows to send data.
Returns the timestamp when this response will be expired in milliseconds since January 1, 1970 GMT or {@code 0} if this timestamp is unknown.
Returns the table which is used by all {@code URLConnection} instances to determine the MIME-type according to a file extension.
Returns the header value at the field position {@code pos} or {@code null} if the header has fewer than {@code pos} fields. The base implementation of this method returns always {@code null}. <p>Some implementations (notably {@code HttpURLConnection}) include a mapping for the null key; in HTTP's case, this maps to the HTTP status line and is treated as being at position 0 when indexing into the header fields.
Returns an unmodifiable map of the response-header fields and values. The response-header field names are the key values of the map. The map values are lists of header field values associated with a particular key name. <p>Some implementations (notably {@code HttpURLConnection}) include a mapping for the null key; in HTTP's case, this maps to the HTTP status line and is treated as being at position 0 when indexing into the header fields.
Returns an unmodifiable map of general request properties used by this connection. The request property names are the key values of the map. The map values are lists of property values of the corresponding key name.
Adds the given property to the request header. Existing properties with the same name will not be overwritten by this method.
Returns the value of the header field specified by {@code key} or {@code null} if there is no field with this name. The base implementation of this method returns always {@code null}. <p>Some implementations (notably {@code HttpURLConnection}) include a mapping for the null key; in HTTP's case, this maps to the HTTP status line and is treated as being at position 0 when indexing into the header fields.
Returns the specified header value as a number. Returns the {@code defaultValue} if no such header field could be found or the value could not be parsed as an {@code Integer}.
Returns the name of the header field at the given position {@code posn} or {@code null} if there are fewer than {@code posn} fields. The base implementation of this method returns always {@code null}. <p>Some implementations (notably {@code HttpURLConnection}) include a mapping for the null key; in HTTP's case, this maps to the HTTP status line and is treated as being at position 0 when indexing into the header fields.
Returns the point of time since when the data must be modified to be transmitted. Some protocols transmit data only if it has been modified more recently than a particular time.
Returns an {@code InputStream} for reading data from the resource pointed by this {@code URLConnection}. It throws an UnknownServiceException by default. This method must be overridden by its subclasses.
Returns the value of the response header field {@code last-modified} or {@code 0} if this value is not set.
Returns an {@code OutputStream} for writing data to this {@code URLConnection}. It throws an {@code UnknownServiceException} by default. This method must be overridden by its subclasses.
Returns a {@code Permission} object representing all needed permissions to open this connection. The returned permission object depends on the state of the connection and will be {@code null} if no permissions are necessary. By default, this method returns {@code AllPermission}. Subclasses should overwrite this method to return an appropriate permission object.
Returns the value of the request header property specified by {code field} or {@code null} if there is no field with this name. The base implementation of this method returns always {@code null}.
Returns the URL represented by this {@code URLConnection}.
Returns the value of the flag which specifies whether this {@code URLConnection} allows to use caches.
Determines the MIME-type of the given resource {@code url} by resolving the filename extension with the internal FileNameMap. Any fragment identifier is removed before processing.
Determines the MIME-type of the resource represented by the input stream {@code is} by reading its first few characters.
Performs any necessary string parsing on the input string such as converting non-alphanumeric character into underscore.
Sets the flag indicating whether this connection allows user interaction or not. This method can only be called prior to the connection establishment.
Sets the internally used content handler factory. The content factory can only be set once during the lifetime of the application.
Sets the default value for the flag indicating whether this connection allows user interaction or not. Existing {@code URLConnection}s are unaffected.
Sets the default value for the flag indicating whether this connection allows to use caches. Existing {@code URLConnection}s are unaffected.
Sets the flag indicating whether this {@code URLConnection} allows input. It cannot be set after the connection is established.
Sets the flag indicating whether this {@code URLConnection} allows output. It cannot be set after the connection is established.
Sets the internal map which is used by all {@code URLConnection} instances to determine the MIME-type according to a filename extension.
Sets the point of time since when the data must be modified to be transmitted. Some protocols transmit data only if it has been modified more recently than a particular time. The data will be transmitted regardless of its timestamp if this option is set to {@code 0}.
Sets the value of the specified request header field. The value will only be used by the current {@code URLConnection} instance. This method can only be called before the connection is established.
Sets the flag indicating whether this connection allows to use caches or not. This method can only be called prior to the connection establishment.
Sets the timeout value in milliseconds for establishing the connection to the resource pointed by this {@code URLConnection} instance. A {@code SocketTimeoutException} is thrown if the connection could not be established in this time. Default is {@code 0} which stands for an infinite timeout.
Returns the configured connecting timeout.
Sets the timeout value in milliseconds for reading from the input stream of an established connection to the resource. A {@code SocketTimeoutException} is thrown if the connection could not be established in this time. Default is {@code 0} which stands for an infinite timeout.
Returns the configured timeout for reading from the input stream of an established connection to the resource.
Decodes the argument which is assumed to be encoded in the {@code x-www-form-urlencoded} MIME content type using the specified encoding scheme. <p> '+' will be converted to space, '%' and two following hex digit characters are converted to the equivalent byte value. All other characters are passed through unmodified. For example "A+B+C %24%25" -> "A B C $%".
Encodes {@code s} using the {@link Charset} named by {@code charsetName}.
Establishes a new connection to the resource specified by the URL {@code u}. Since different protocols also have unique ways of connecting, it must be overwritten by the subclass.
Parses the clear text URL in {@code str} into a URL object. URL strings generally have the following format: <p> <p> The string is parsed in HTTP format. If the protocol has a different URL format this method must be overridden.
Returns a new path by resolving {@code path} relative to {@code base}.
Sets the fields of the URL {@code u} to the values of the supplied arguments.
Returns the clear text representation of a given URL using HTTP format.
Returns true if {@code a} and {@code b} have the same protocol, host, port, file, and reference.
Returns the default port of the protocol used by the handled URL. The default implementation always returns {@code -1}.
Returns the host address of {@code url}.
Returns the hash code of {@code url}.
Returns true if the hosts of {@code a} and {@code b} are equal.
Returns true if {@code a} and {@code b} have the same protocol, host, port and file.
Closes an open channel. If the channel is already closed then this method has no effect, otherwise it closes the receiver via the {@code implCloseChannel} method. <p> If an attempt is made to perform an operation on a closed channel then a {@link java.nio.channels.ClosedChannelException} is thrown. <p> If multiple threads attempt to simultaneously close a channel, then only one thread will run the closure code and the others will be blocked until the first one completes.
Indicates the beginning of a code section that includes an I/O operation that is potentially blocking. After this operation, the application should invoke the corresponding {@code end(boolean)} method.
Indicates the end of a code section that has been started with {@code begin()} and that includes a potentially blocking I/O operation.
Constructs a new {@code AbstractSelectableChannel}.
Implements the closing function of the SelectableChannel. This method is called from {@code implCloseChannel()}.
Implements the configuration of blocking/non-blocking mode.
Returns true if the keyList contains at least 1 valid key and false otherwise.
Implements the closing of this channel.
Returns this channel's set of canceled selection keys.
Deletes the key from the channel's key set.
Gets a provider instance by executing the following steps when called for the first time: <ul> <li> if the system property "java.nio.channels.spi.SelectorProvider" is set, the value of this property is the class name of the provider returned; </li> <li>if there is a provider-configuration file named "java.nio.channels.spi.SelectorProvider" in META-INF/services of a jar file valid in the system class loader, the first class name is the provider's class name; </li> <li> otherwise, a system default provider will be returned.</li> </ul>
Creates a new open {@code DatagramChannel}.
Returns an input stream on the given channel. The resulting stream has the following properties: <ul> <li>If the stream is closed, then the underlying channel is closed as well.</li> <li>It is thread safe.</li> <li>It throws an {@link IllegalBlockingModeException} if the channel is in non-blocking mode and {@code read} is called.</li> <li>Neither {@code mark} nor {@code reset} is supported.</li> <li>It is not buffered.</li> </ul>
Returns an output stream on the given channel. The resulting stream has the following properties: <ul> <li>If the stream is closed, then the underlying channel is closed as well.</li> <li>It is thread safe.</li> <li>It throws an {@link IllegalBlockingModeException} if the channel is in non-blocking mode and {@code write} is called.</li> <li>It is not buffered.</li> </ul>
Returns a readable channel on the given input stream. The resulting channel has the following properties: <ul> <li>If the channel is closed, then the underlying stream is closed as well.</li> <li>It is not buffered.</li> </ul>
Returns a writable channel on the given output stream. The resulting channel has following properties: <ul> <li>If the channel is closed, then the underlying stream is closed as well.</li> <li>It is not buffered.</li> </ul>
Returns a reader that decodes bytes from a channel.
Returns a reader that decodes bytes from a channel. This method creates a reader with a buffer of default size.
Returns a writer that encodes characters with the specified {@code encoder} and sends the bytes to the specified channel.
Returns a writer that encodes characters with the specified {@code encoder} and sends the bytes to the specified channel. This method creates a writer with a buffer of default size.
Constructs a new {@code DatagramChannel}.
Creates an opened and not-connected datagram channel. <p> method of the default {@link SelectorProvider} instance.
Connects the socket of this channel to a remote address, which is the only communication peer for getting and sending datagrams after being connected. <p> This method can be called at any time without affecting the read and write operations being processed at the time the method is called. The connection status does not change until the channel is disconnected or closed. <p> This method executes the same security checks as the connect method of the {@link DatagramSocket} class.
Writes a datagram from the byte buffer to this channel. <p> The precondition of calling this method is that the channel is connected and the datagram is sent to the connected address. Otherwise, this method has the same behavior as the {@code write} method in the {@link WritableByteChannel} interface.
Private constructor prevents others creating new modes.
Requests that all updates to this channel are committed to the storage device. <p> When this method returns, all modifications made to the platform file underlying this channel have been committed if the file resides on a local storage device. If the file is not hosted locally, for example on a networked file system, then applications cannot be certain that the modifications have been committed. <p> There are no assurances given that changes made to the file using methods defined elsewhere will be committed. For example, changes made via a mapped byte buffer may not be committed. <p> The <code>metadata</code> parameter indicates whether the update should include the file's metadata such as last modification time, last access time, etc. Note that passing <code>true</code> may invoke an underlying write to the operating system (if the platform is maintaining metadata such as last access time), even if the channel is opened read-only.
Obtains a lock on a specified region of the file. <p> This is the blocking version of lock acquisition, see also the <code>tryLock()</code> methods. <p> Attempts to acquire an overlapping lock region will fail. The attempt will fail if the overlapping lock has already been obtained, or if another thread is currently waiting to acquire the overlapping lock. <p> If the request is not for an overlapping lock, the thread calling this method will block until the lock is obtained (likely by no contention or another process releasing a lock), or until this thread is interrupted or the channel is closed. <p> If the lock is obtained successfully then the {@link FileLock} object returned represents the lock for subsequent operations on the locked region. <p> If the thread is interrupted while waiting for the lock, the thread is set to the interrupted state and throws a {@link FileLockInterruptionException}. If this channel is closed while the thread is waiting to obtain the lock then the thread throws a {@link AsynchronousCloseException}. <p> There is no requirement for the position and size to be within the current start and length of the file. <p> Some platforms do not support shared locks, and if a request is made for a shared lock on such a platform, this method will attempt to acquire an exclusive lock instead. It is undefined whether the lock obtained is advisory or mandatory.
Reads bytes from this file channel into a subset of the given buffers. This method attempts to read all {@code remaining()} bytes from {@code length} byte buffers, in order, starting at {@code targets[offset]}. It increases the file position by the number of bytes actually read. The number of bytes actually read is returned. <p> If a read operation is in progress, subsequent threads will block until the read is completed and will then contend for the ability to read.
Attempts to acquire an exclusive lock on this file without blocking. The method returns {@code null} if the acquisition would result in an overlapped lock with another OS process. <p> It is possible to acquire a lock for any region even if it's completely outside of the file's size. The size of the lock is fixed. If the file grows outside of the lock that region of the file won't be locked by this lock.
Constructs a new file lock instance for a given channel. The constructor enforces the starting position, length and sharing mode of the lock.
Returns the lock's {@link FileChannel}.
Returns the lock's starting position in the file.
Returns the length of the file lock in bytes.
Indicates if the file lock is shared with other processes or if it is exclusive.
Indicates if the receiver's lock region overlaps the region described in the parameter list.
Releases this particular lock on the file. If the lock is invalid then this method has no effect. Once released, the lock becomes invalid.
Constructs a new {@code SinkChannel}.
Constructs a new {@code SourceChannel}.
Returns a new pipe from the default {@see java.nio.channels.spi.SelectorProvider}.
Sets the blocking mode of this channel. A call to this method blocks if other calls to this method or to a {@code register} method are executing. The new blocking mode is valid for calls to other methods that are invoked after the call to this method. If other methods are already executing when this method is called, they still have the old mode and the call to this method might block depending on the implementation.
Attaches an object to this key. It is acceptable to attach {@code null}, this discards the old attachment.
Gets the attached object.
Indicates whether this key's channel is interested in the accept operation and is ready to accept new connections. A call to this method is equal to executing {@code (readyOps() & OP_ACCEPT) == OP_ACCEPT}.
Indicates whether this key's channel is interested in the connect operation and is ready to connect. A call to this method is equal to executing {@code (readyOps() & OP_CONNECT) == OP_CONNECT}.
Indicates whether this key's channel is interested in the read operation and is ready to read. A call to this method is equal to executing {@code (readyOps() & OP_READ) == OP_READ}.
Indicates whether this key's channel is interested in the write operation and is ready to write. A call to this method is equal to executing {@code (readyOps() & OP_WRITE) == OP_WRITE}.
Returns a selector returned by {@link SelectorProvider#provider}'s {@link SelectorProvider#openSelector} method.
Constructs a new {@link ServerSocketChannel}.
Creates an open and unbound server-socket channel. <p> of the default {@code SelectorProvider} instance.
Constructs a new {@code SocketChannel}.
Creates an open and unconnected socket channel. <p> default {@link SelectorProvider} instance.
Creates a socket channel and connects it to a socket address. <p> This method performs a call to {@code open()} followed by a call to {@code connect(SocketAddress)}.
Connects this channel's socket with a remote address. <p> If this channel is blocking, this method will suspend until connecting is finished or an I/O exception occurs. If the channel is non-blocking, this method will return {@code true} if the connection is finished at once or return {@code false} when the connection must be finished later by calling {@code finishConnect()}. <p> This method can be called at any moment and can block other read and write operations while connecting. It executes the same security checks as the connect method of the {@code Socket} class.
Writes bytes from the given byte buffer to this socket channel. The maximum number of bytes that are written is the remaining number of bytes in the buffer when this method is invoked. The bytes are taken from the buffer starting at the buffer's position. <p> The call may block if other threads are also attempting to write to the same channel. <p> Upon completion, the buffer's position is updated to the end of the bytes that have been written. The buffer's limit is not changed.
Constructs a <code>Charset</code> object. Duplicated aliases are ignored.
Returns an immutable case-insensitive map from canonical names to {@code Charset} instances. If multiple charsets have the same canonical name, it is unspecified which is returned in the map. This method may be slow. If you know which charset you're looking for, use {@link #forName}.
Returns a {@code Charset} instance for the named charset.
Equivalent to {@code forName} but only throws {@code UnsupportedEncodingException}, which is all pre-nio code claims to throw.
Determines whether the specified charset is supported by this runtime.
Gets the canonical name of this charset.
Gets the set of this charset's aliases.
Gets the name of this charset for the default locale. <p>The default implementation returns the canonical name of this charset. Subclasses may return a localized display name.
Gets the name of this charset for the specified locale. <p>The default implementation returns the canonical name of this charset. Subclasses may return a localized display name.
Indicates whether this charset is known to be registered in the IANA Charset Registry.
Returns true if this charset supports encoding, false otherwise.
Returns a new {@code ByteBuffer} containing the bytes encoding the characters from {@code buffer}. This method uses {@code CodingErrorAction.REPLACE}. <p>Applications should generally create a {@link CharsetEncoder} using {@link #newEncoder} for performance.
Returns a new {@code ByteBuffer} containing the bytes encoding the characters from {@code s}. This method uses {@code CodingErrorAction.REPLACE}. <p>Applications should generally create a {@link CharsetEncoder} using {@link #newEncoder} for performance.
Returns a new {@code CharBuffer} containing the characters decoded from {@code buffer}. This method uses {@code CodingErrorAction.REPLACE}. <p>Applications should generally create a {@link CharsetDecoder} using {@link #newDecoder} for performance.
Compares this charset with the given charset. This comparison is based on the case insensitive canonical names of the charsets.
Returns the system's default charset. This is determined during VM startup, and will not change thereafter. On Android, the default charset is UTF-8.
Constructs a new <code>CharsetDecoder</code> using the given <code>Charset</code>, average number and maximum number of characters string "\uFFFD".
single input byte.
Returns the {@link Charset} which this decoder uses.
This is a facade method for the decoding operation. <p> This method decodes the remaining byte sequence of the given byte buffer into a new character buffer. This method performs a complete decoding operation, resets at first, then decodes, and flushes at last. <p> This method should not be invoked while another {@code decode} operation is ongoing.
checks the result whether it needs to throw CharacterCodingException.
original output is full and doesn't have remaining. allocate more space to new CharBuffer and return it, the contents in the given buffer will be copied into the new buffer.
Decodes bytes starting at the current position of the given input buffer, and writes the equivalent character sequence into the given output buffer from its current position. <p> The buffers' position will be changed with the reading and writing operation, but their limits and marks will be kept intact. <p> A <code>CoderResult</code> instance will be returned according to following rules: <ul> <li>{@link CoderResult#OVERFLOW CoderResult.OVERFLOW} indicates that even though not all of the input has been processed, the buffer the output is being written to has reached its capacity. In the event of this code being returned this method should be called once more with an <code>out</code> argument that has not already been filled.</li> <li>{@link CoderResult#UNDERFLOW CoderResult.UNDERFLOW} indicates that as many bytes as possible in the input buffer have been decoded. If there is no further input and no remaining bytes in the input buffer then this operation may be regarded as complete. Otherwise, this method should be called once more with additional input.</li> <li>A {@link CoderResult#malformedForLength(int) malformed input} result indicates that some malformed input error has been encountered, and the erroneous bytes start at the input buffer's position and their number can be got by result's {@link CoderResult#length() length}. This kind of result can be returned only if the malformed action is {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}. </li> <li>A {@link CoderResult#unmappableForLength(int) unmappable character} result indicates that some unmappable character error has been encountered, and the erroneous bytes start at the input buffer's position and their number can be got by result's {@link CoderResult#length() length}. This kind of result can be returned only if the unmappable character action is {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}. </li> </ul> <p> The <code>endOfInput</code> parameter indicates that the invoker cannot provide further input. This parameter is true if and only if the bytes in current input buffer are all inputs for this decoding operation. Note that it is common and won't cause an error if the invoker sets false and then can't provide more input, while it may cause an error if the invoker always sets true in several consecutive invocations. This would make the remaining input to be treated as malformed input. <p> This method invokes the {@link #decodeLoop(ByteBuffer, CharBuffer) decodeLoop} method to implement the basic decode logic for a specific charset.
Gets the charset detected by this decoder; this method is optional. <p> If implementing an auto-detecting charset, then this decoder returns the detected charset from this method when it is available. The returned charset will be the same for the rest of the decode operation. <p> If insufficient bytes have been read to determine the charset, an <code>IllegalStateException</code> will be thrown. <p> The default implementation always throws <code>UnsupportedOperationException</code>, so it should be overridden by a subclass if needed.
Flushes this decoder. This method will call {@link #implFlush(CharBuffer) implFlush}. Some decoders may need to write some characters to the output buffer when they have read all input bytes; subclasses can override {@link #implFlush(CharBuffer) implFlush} to perform the writing operation. <p> The maximum number of written bytes won't be larger than {@link CharBuffer#remaining() out.remaining()}. If some decoder wants to write more bytes than an output buffer's remaining space allows, then a <code>CoderResult.OVERFLOW</code> will be returned, and this method must be called again with a character buffer that has more remaining space. Otherwise this method will return <code>CoderResult.UNDERFLOW</code>, which means one decoding process has been completed successfully. <p> During the flush, the output buffer's position will be changed accordingly, while its mark and limit will be intact.
Flushes this decoder. The default implementation does nothing and always returns <code>CoderResult.UNDERFLOW</code>; this method can be overridden if needed.
Notifies that this decoder's <code>CodingErrorAction</code> specified for malformed input error has been changed. The default implementation does nothing; this method can be overridden if needed.
Notifies that this decoder's <code>CodingErrorAction</code> specified for unmappable character error has been changed. The default implementation does nothing; this method can be overridden if needed.
Notifies that this decoder's replacement has been changed. The default implementation does nothing; this method can be overridden if needed.
Reset this decoder's charset related state. The default implementation does nothing; this method can be overridden if needed.
Indicates whether this decoder implements an auto-detecting charset.
Indicates whether this decoder has detected a charset; this method is optional. <p> If this decoder implements an auto-detecting charset, then this method may start to return true during decoding operation to indicate that a charset has been detected in the input bytes and that the charset can be retrieved by invoking the {@link #detectedCharset() detectedCharset} method. <p> Note that a decoder that implements an auto-detecting charset may still succeed in decoding a portion of the given input even when it is unable to detect the charset. For this reason users should be aware that a <code>false</code> return value does not indicate that no decoding took place. <p> The default implementation always throws an <code>UnsupportedOperationException</code>; it should be overridden by a subclass if needed.
Returns this decoder's <code>CodingErrorAction</code> when malformed input occurred during the decoding process.
decoder for one input byte, must be positive.
Sets this decoder's action on malformed input errors. This method will call the {@link #implOnMalformedInput(CodingErrorAction) implOnMalformedInput} method with the given new action as argument.
Sets this decoder's action on unmappable character errors. This method will call the {@link #implOnUnmappableCharacter(CodingErrorAction) implOnUnmappableCharacter} method with the given new action as argument.
Returns the replacement string, which is never null or empty.
Sets the new replacement string. This method first checks the given replacement's validity, then changes the replacement value, and at last calls the {@link #implReplaceWith(String) implReplaceWith} method with the given new replacement as argument.
Resets this decoder. This method will reset the internal status, and then calls <code>implReset()</code> to reset any status related to the specific charset.
Returns this decoder's <code>CodingErrorAction</code> when an unmappable character error occurred during the decoding process.
Constructs a new {@code CharsetEncoder} using the given parameters and the replacement byte array {@code { (byte) '?' }}.
Constructs a new <code>CharsetEncoder</code> using the given <code>Charset</code>, replacement byte array, average number and
input character.
Checks if the given character can be encoded by this encoder. <p> Note that this method can change the internal status of this encoder, so it should not be called when another encoding process is ongoing, otherwise it will throw an <code>IllegalStateException</code>. <p> This method can be overridden for performance improvement.
implementation of canEncode
Checks if a given <code>CharSequence</code> can be encoded by this encoder. Note that this method can change the internal status of this encoder, so it should not be called when another encode process is ongoing, otherwise it will throw an <code>IllegalStateException</code>. This method can be overridden for performance improvement.
Returns the {@link Charset} which this encoder uses.
This is a facade method for the encoding operation. <p> This method encodes the remaining character sequence of the given character buffer into a new byte buffer. This method performs a complete encoding operation, resets at first, then encodes, and flushes at last. <p> This method should not be invoked if another encode operation is ongoing.
allocate more spaces to the given ByteBuffer
Encodes characters starting at the current position of the given input buffer, and writes the equivalent byte sequence into the given output buffer from its current position. <p> The buffers' position will be changed with the reading and writing operation, but their limits and marks will be kept intact. <p> A <code>CoderResult</code> instance will be returned according to following rules: <ul> <li>A {@link CoderResult#malformedForLength(int) malformed input} result indicates that some malformed input error was encountered, and the erroneous characters start at the input buffer's position and their number can be got by result's {@link CoderResult#length() length}. This kind of result can be returned only if the malformed action is {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}.</li> <li>{@link CoderResult#UNDERFLOW CoderResult.UNDERFLOW} indicates that as many characters as possible in the input buffer have been encoded. If there is no further input and no characters left in the input buffer then this task is complete. If this is not the case then the client should call this method again supplying some more input characters.</li> <li>{@link CoderResult#OVERFLOW CoderResult.OVERFLOW} indicates that the output buffer has been filled, while there are still some characters remaining in the input buffer. This method should be invoked again with a non-full output buffer.</li> <li>A {@link CoderResult#unmappableForLength(int) unmappable character} result indicates that some unmappable character error was encountered, and the erroneous characters start at the input buffer's position and their number can be got by result's {@link CoderResult#length() length}. This kind of result can be returned only on {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}.</li> </ul> <p> The <code>endOfInput</code> parameter indicates if the invoker can provider further input. This parameter is true if and only if the characters in the current input buffer are all inputs for this encoding operation. Note that it is common and won't cause an error if the invoker sets false and then has no more input available, while it may cause an error if the invoker always sets true in several consecutive invocations. This would make the remaining input to be treated as malformed input. input. <p> This method invokes the {@link #encodeLoop(CharBuffer, ByteBuffer) encodeLoop} method to implement the basic encode logic for a specific charset.
Flushes this encoder. <p> This method will call {@link #implFlush(ByteBuffer) implFlush}. Some encoders may need to write some bytes to the output buffer when they have read all input characters, subclasses can overridden {@link #implFlush(ByteBuffer) implFlush} to perform writing action. <p> The maximum number of written bytes won't larger than {@link ByteBuffer#remaining() out.remaining()}. If some encoder wants to write more bytes than the output buffer's available remaining space, then <code>CoderResult.OVERFLOW</code> will be returned, and this method must be called again with a byte buffer that has free space. Otherwise this method will return <code>CoderResult.UNDERFLOW</code>, which means one encoding process has been completed successfully. <p> During the flush, the output buffer's position will be changed accordingly, while its mark and limit will be intact.
Flushes this encoder. The default implementation does nothing and always returns <code>CoderResult.UNDERFLOW</code>; this method can be overridden if needed.
Notifies that this encoder's <code>CodingErrorAction</code> specified for malformed input error has been changed. The default implementation does nothing; this method can be overridden if needed.
Notifies that this encoder's <code>CodingErrorAction</code> specified for unmappable character error has been changed. The default implementation does nothing; this method can be overridden if needed.
Notifies that this encoder's replacement has been changed. The default implementation does nothing; this method can be overridden if needed.
Resets this encoder's charset related state. The default implementation does nothing; this method can be overridden if needed.
Checks if the given argument is legal as this encoder's replacement byte array. The given byte array is legal if and only if it can be decode into sixteen bits Unicode characters. This method can be overridden for performance improvement.
Returns this encoder's <code>CodingErrorAction</code> when a malformed input error occurred during the encoding process.
one input character, must be positive.
Sets this encoder's action on malformed input error. This method will call the {@link #implOnMalformedInput(CodingErrorAction) implOnMalformedInput} method with the given new action as argument.
Sets this encoder's action on unmappable character error. This method will call the {@link #implOnUnmappableCharacter(CodingErrorAction) implOnUnmappableCharacter} method with the given new action as argument.
Returns the replacement byte array, which is never null or empty.
Sets the new replacement value. This method first checks the given replacement's validity, then changes the replacement value and finally calls the {@link #implReplaceWith(byte[]) implReplaceWith} method with the given new replacement as argument.
Resets this encoder. This method will reset the internal status and then calls <code>implReset()</code> to reset any status related to the specific charset.
Returns this encoder's <code>CodingErrorAction</code> when unmappable character occurred during encoding process.
Returns a new byte array containing the bytes corresponding to the given characters, encoded in UTF-16BE. All characters are representable in UTF-16BE.
Constructs a new {@code CoderMalfunctionError}.
Constructs a <code>CoderResult</code> object with its text description.
Gets a <code>CoderResult</code> object indicating a malformed-input error.
Gets a <code>CoderResult</code> object indicating an unmappable character error.
Returns true if this result is an underflow condition.
Returns true if this result represents a malformed-input error or an unmappable-character error.
Returns true if this result represents a malformed-input error.
Returns true if this result is an overflow condition.
Returns true if this result represents an unmappable-character error.
Gets the length of the erroneous input. The length is only meaningful to a malformed-input error or an unmappable character error.
Throws an exception corresponding to this coder result.
Can't instantiate outside.
Constructs a new {@code IllegalCharsetNameException} with the supplied charset name.
Returns the encountered illegal charset name.
Constructs a new {@code MalformedInputException}.
Gets the length of the malformed input.
Decodes a byte array containing <i>modified UTF-8</i> bytes into a string. <p>Note that although this method decodes the (supposedly impossible) zero byte to U+0000, that's what the RI does too.
Returns the number of bytes the modified UTF-8 representation of 's' would take. Note that this is just the space for the bytes representing the characters, not the length which precedes those bytes, because different callers represent the length differently, as two, four, or even eight bytes. If {@code shortLength} is true, we'll throw an exception if the string is too long for its length to be represented by a short.
Encodes the <i>modified UTF-8</i> bytes corresponding to string {@code s} into the byte array {@code dst}, starting at the given {@code offset}.
Returns an array containing the <i>modified UTF-8</i> form of {@code s}, using a big-endian 16-bit length. Throws UTFDataFormatException if {@code s} is too long for a two-byte length.
Constructs a new {@code UnmappableCharacterException}.
Returns the length of the unmappable character.
Constructs a new {@code UnsupportedCharsetException} with the supplied charset name.
Gets the encountered unsupported charset name.
Returns the capacity of this buffer.
Used for the scalar get/put operations.
Used for the ByteBuffer operations that get types larger than a byte.
Clears this buffer. <p> While the content of this buffer is not changed, the following internal changes take place: the current position is reset back to the start of the buffer, the value of the buffer limit is made equal to the capacity and mark is cleared.
Flips this buffer. <p> The limit is set to the current position, then the position is set to zero, and the mark is cleared. <p> The content of this buffer is not changed.
Indicates if there are elements remaining in this buffer, that is if {@code position < limit}.
Returns the limit of this buffer.
Sets the limit of this buffer. <p> If the current position in the buffer is in excess of <code>newLimit</code> then, on returning from this call, it will have been adjusted to be equivalent to <code>newLimit</code>. If the mark is set and is greater than the new limit, then it is cleared.
Subverts the fact that limit(int) is final, for the benefit of MappedByteBufferAdapter.
Marks the current position, so that the position may return to this point later by calling <code>reset()</code>.
Returns the position of this buffer.
Sets the position of this buffer. <p> If the mark is set and it is greater than the new position, then it is cleared.
Returns the number of remaining elements in this buffer, that is {@code limit - position}.
Resets the position of this buffer to the <code>mark</code>.
Rewinds this buffer. <p> The position is set to zero, and the mark is cleared. The content of this buffer is not changed.
Creates a byte buffer based on a newly allocated byte array.
Creates a direct byte buffer based on a newly allocated memory block.
Creates a new byte buffer by wrapping the given byte array. <p> Calling this method has the same effect as {@code wrap(array, 0, array.length)}.
Creates a new byte buffer by wrapping the given byte array. <p> The new buffer's position will be {@code start}, limit will be {@code start + byteCount}, capacity will be the length of the array.
Returns the byte array which this buffer is based on, if there is one.
Returns the offset of the byte array which this buffer is based on, if there is one. <p> The offset is the index of the array which corresponds to the zero position of the buffer.
Compares the remaining bytes of this buffer to another byte buffer's remaining bytes.
Reads bytes from the current position into the specified byte array and increases the position by the number of bytes read. <p> Calling this method has the same effect as {@code get(dst, 0, dst.length)}.
Reads bytes from the current position into the specified byte array, starting at the specified offset, and increases the position by the number of bytes read.
Returns the byte order used by this buffer when converting bytes from/to other primitive types. <p> The default byte order of byte buffer is always {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}
Sets the byte order of this buffer.
Subverts the fact that order(ByteOrder) is final, for the benefit of MappedByteBufferAdapter.
Writes bytes in the given byte array to the current position and increases the position by the number of bytes written. <p> Calling this method has the same effect as {@code put(src, 0, src.length)}.
Writes bytes in the given byte array, starting from the specified offset, to the current position and increases the position by the number of bytes written.
Writes all the remaining bytes of the {@code src} byte buffer to this buffer's current position, and increases both buffers' position by the number of bytes copied.
Returns the current platform byte order.
Creates a char buffer based on a newly allocated char array.
Creates a new char buffer by wrapping the given char array. <p> Calling this method has the same effect as {@code wrap(array, 0, array.length)}.
Creates a new char buffer by wrapping the given char array. <p> The new buffer's position will be {@code start}, limit will be {@code start + charCount}, capacity will be the length of the array.
Creates a new char buffer by wrapping the given char sequence. <p> Calling this method has the same effect as {@code wrap(chseq, 0, chseq.length())}.
Creates a new char buffer by wrapping the given char sequence. <p> The new buffer's position will be {@code start}, limit will be {@code end}, capacity will be the length of the char sequence. The new buffer is read-only.
Returns the character located at the specified index in the buffer. The index value is referenced from the current buffer position.
Compare the remaining chars of this buffer to another char buffer's remaining chars.
Reads chars from the current position into the specified char array and increases the position by the number of chars read. <p> Calling this method has the same effect as {@code get(dst, 0, dst.length)}.
Reads chars from the current position into the specified char array, starting from the specified offset, and increases the position by the number of chars read.
Returns the number of remaining chars.
Writes chars from the given char array to the current position and increases the position by the number of chars written. <p> Calling this method has the same effect as {@code put(src, 0, src.length)}.
Writes chars from the given char array, starting from the specified offset, to the current position and increases the position by the number of chars written.
Writes all the remaining chars of the {@code src} char buffer to this buffer's current position, and increases both buffers' position by the number of chars copied.
Writes all chars of the given string to the current position of this buffer, and increases the position by the length of string. <p> Calling this method has the same effect as {@code put(str, 0, str.length())}.
Writes chars of the given string to the current position of this buffer, and increases the position by the number of chars written.
Writes the given char to the current position and increases the position by 1.
Writes all chars of the given character sequence {@code csq} to the current position of this buffer, and increases the position by the length of the csq. <p> Calling this method has the same effect as {@code append(csq.toString())}. If the {@code CharSequence} is {@code null} the string "null" will be written to the buffer.
Writes chars of the given {@code CharSequence} to the current position of this buffer, and increases the position by the number of chars written.
Reads characters from this buffer and puts them into {@code target}. The number of chars that are copied is either the number of remaining chars in this buffer or the number of remaining chars in {@code target}, whichever is smaller.
read from channel, and store the result in the target.
Status check, must be open.
Status check, must be open and connected, for read and write.
Buffer check, must not null
Get the fd for internal use.
Constructor initialize the datagramSocketImpl and datagramChannelImpl
Creates a double buffer based on a newly allocated double array.
Creates a new double buffer by wrapping the given double array. <p> Calling this method has the same effect as {@code wrap(array, 0, array.length)}.
Creates a new double buffer by wrapping the given double array. <p> The new buffer's position will be {@code start}, limit will be {@code start + doubleCount}, capacity will be the length of the array.
Compare the remaining doubles of this buffer to another double buffer's remaining doubles.
Reads doubles from the current position into the specified double array and increases the position by the number of doubles read. <p> Calling this method has the same effect as {@code get(dst, 0, dst.length)}.
Reads doubles from the current position into the specified double array, starting from the specified offset, and increases the position by the number of doubles read.
Writes doubles from the given double array to the current position and increases the position by the number of doubles written. <p> Calling this method has the same effect as {@code put(src, 0, src.length)}.
Writes doubles from the given double array, starting from the specified offset, to the current position and increases the position by the number of doubles written.
Writes all the remaining doubles of the {@code src} double buffer to this buffer's current position, and increases both buffers' position by the number of doubles copied.
Create a new file channel implementation class that wraps the given fd and operates in the specified mode.
Non-API method to release a given lock on a file channel. Assumes that the lock will mark itself invalid after successful unlocking.
because the caller is a file/network read operation), false if we're copying data out of the buffers (for a file/network write operation).
Add a new pending lock to the manager. Throws an exception if the lock would overlap an existing lock. Once the lock is acquired it remains in this set as an acquired lock.
Removes an acquired lock from the lock manager. If the lock did not exist in the lock manager the operation is a no-op.
Creates a float buffer based on a newly allocated float array.
Creates a new float buffer by wrapping the given float array. <p> Calling this method has the same effect as {@code wrap(array, 0, array.length)}.
Creates a new float buffer by wrapping the given float array. <p> The new buffer's position will be {@code start}, limit will be {@code start + floatCount}, capacity will be the length of the array.
Compare the remaining floats of this buffer to another float buffer's remaining floats.
Reads floats from the current position into the specified float array and increases the position by the number of floats read. <p> Calling this method has the same effect as {@code get(dst, 0, dst.length)}.
Reads floats from the current position into the specified float array, starting from the specified offset, and increases the position by the number of floats read.
Writes floats from the given float array to the current position and increases the position by the number of floats written. <p> Calling this method has the same effect as {@code put(src, 0, src.length)}.
Writes floats from the given float array, starting from the specified offset, to the current position and increases the position by the number of floats written.
Writes all the remaining floats of the {@code src} float buffer to this buffer's current position, and increases both buffers' position by the number of floats copied.
Creates an int buffer based on a newly allocated int array.
Creates a new int buffer by wrapping the given int array. <p> Calling this method has the same effect as {@code wrap(array, 0, array.length)}.
Creates a new int buffer by wrapping the given int array. <p> The new buffer's position will be {@code start}, limit will be {@code start + intCount}, capacity will be the length of the array.
Compares the remaining ints of this buffer to another int buffer's remaining ints.
Reads ints from the current position into the specified int array and increases the position by the number of ints read. <p> Calling this method has the same effect as {@code get(dst, 0, dst.length)}.
Reads ints from the current position into the specified int array, starting from the specified offset, and increases the position by the number of ints read.
Writes ints from the given int array to the current position and increases the position by the number of ints written. <p> Calling this method has the same effect as {@code put(src, 0, src.length)}.
Writes ints from the given int array, starting from the specified offset, to the current position and increases the position by the number of ints written.
Writes all the remaining ints of the {@code src} int buffer to this buffer's current position, and increases both buffers' position by the number of ints copied.
Constructs an {@code InvalidMarkException} with the given detail message.
Creates a long buffer based on a newly allocated long array.
Creates a new long buffer by wrapping the given long array. <p> Calling this method has the same effect as {@code wrap(array, 0, array.length)}.
Creates a new long buffer by wrapping the given long array. <p> The new buffer's position will be {@code start}, limit will be {@code start + longCount}, capacity will be the length of the array.
Compare the remaining longs of this buffer to another long buffer's remaining longs.
Reads longs from the current position into the specified long array and increases the position by the number of longs read. <p> Calling this method has the same effect as {@code get(dst, 0, dst.length)}.
Reads longs from the current position into the specified long array, starting from the specified offset, and increase the position by the number of longs read.
Writes longs from the given long array to the current position and increases the position by the number of longs written. <p> Calling this method has the same effect as {@code put(src, 0, src.length)}.
Writes longs from the given long array, starting from the specified offset, to the current position and increases the position by the number of longs written.
Writes all the remaining longs of the {@code src} long buffer to this buffer's current position, and increases both buffers' position by the number of longs copied.
Returns true if there is a high probability that every page of this buffer is currently loaded in RAM, meaning that accesses will not cause a page fault. It is impossible to give a strong guarantee since this is only a snapshot of a dynamic situation.
Attempts to load every page of this buffer into RAM. See {@link #isLoaded}.
Writes all changes of the buffer to the mapped file. If the mapped file is stored on a local device, it is guaranteed that the changes are written to the file. No such guarantee is given if the file is located on a remote device.
Used to support array/arrayOffset/hasArray for direct buffers.
Returns the underlying native pointer to the data of the given Buffer starting at the Buffer's current position, or 0 if the Buffer is not backed by native heap storage. Note that this is different than what the Harmony implementation calls a "base address." position, or 0 if there is none
Returns the underlying Java array containing the data of the given Buffer, or null if the Buffer is not backed by a Java array. there is none
Returns the offset in bytes from the start of the underlying Java array object containing the data of the given Buffer to the actual start of the data. This method is only meaningful if getBaseArray() returns non-null.
Gets the start address of a direct buffer. <p> This method corresponds to the JNI function: <pre> </pre>
Returns the int file descriptor from within the given FileChannel 'fc'.
Helps bridge between io and nio.
Exposes the array backing a non-direct ByteBuffer, even if the ByteBuffer is read-only. Normally, attempting to access the array backing a read-only buffer throws.
Exposes the array offset for the array backing a non-direct ByteBuffer, even if the ByteBuffer is read-only.
Used by ByteBuffer.allocateDirect.
Used by the JNI NewDirectByteBuffer function.
package private method for setting the ready operation by selector
Returns true if the channel for this key is connected. If the channel does not need connecting, this always return true.
Updates the key ready ops and selected key set.
Removes cancelled keys from the key set and selected key set, and deregisters the corresponding channels. Returns the number of keys removed from the selected key set.
Creates a short buffer based on a newly allocated short array.
Creates a new short buffer by wrapping the given short array. <p> Calling this method has the same effect as {@code wrap(array, 0, array.length)}.
Creates a new short buffer by wrapping the given short array. <p> The new buffer's position will be {@code start}, limit will be {@code start + shortCount}, capacity will be the length of the array.
Compare the remaining shorts of this buffer to another short buffer's remaining shorts.
Reads shorts from the current position into the specified short array and increases the position by the number of shorts read. <p> Calling this method has the same effect as {@code get(dst, 0, dst.length)}.
Reads shorts from the current position into the specified short array, starting from the specified offset, and increases the position by the number of shorts read.
Writes shorts from the given short array to the current position and increases the position by the number of shorts written. <p> Calling this method has the same effect as {@code put(src, 0, src.length)}.
Writes shorts from the given short array, starting from the specified offset, to the current position and increases the position by the number of shorts written.
Writes all the remaining shorts of the {@code src} short buffer to this buffer's current position, and increases both buffers' position by the number of shorts copied.
Constructor for creating a connected socket channel.
Constructor for creating an optionally connected socket channel.
Status setting used by other class.
Status check, open and "connected", when read and write.
Status check, open and "unconnected", before connection.
Shared by this class and DatagramChannelImpl, to do the address transfer and check.
Get local address.
Get the fd.
Creates a new {@code AclNotFoundException}.
Creates a new {@code Certificate} with the specified type.
Returns the certificate type.
Compares the argument to the certificate, and returns {@code true} if they represent the <em>same</em> object using a class specific comparison. The implementation in Object returns {@code true} only if the argument is the exact same object as the callee (==).
Returns an integer hash code for the certificate. Any two objects which return {@code true} when passed to {@code equals} must return the same value for this method.
Returns the encoded representation for this certificate.
Creates a new {@code CertificateRep} instance with the specified certificate type and encoded data.
Deserializes a {@code Certificate} from a serialized {@code CertificateRep} object.
Creates a new {@code CertificateEncodingException} with the specified message.
Creates a new {@code CertificateEncodingException} with the specified message and cause.
Creates a new {@code CertificateEncodingException} with the specified cause.
Creates a new {@code CertificateException} with the specified message.
Creates a new {@code CertificateException} with the specified message and cause.
Creates a new {@code CertificateException} with the specified cause.
Creates a new {@code CertificateExpiredException} with the specified message.
Creates a new {@code CertificateFactory} instance.
Creates a new {@code CertificateFactory} instance that provides the requested certificate type.
Creates a new {@code CertificateFactory} instance from the specified provider that provides the requested certificate type.
Returns the {@code Provider} of the certificate factory represented by the certificate.
Returns the Certificate type.
Generates and initializes a {@code Certificate} from the provided input stream.
Returns an {@code Iterator} over the supported {@code CertPath} encodings (as Strings). The first element is the default encoding scheme to apply.
Generates a {@code CertPath} (a certificate chain) from the provided {@code InputStream}. The default encoding scheme is applied.
Generates a {@code CertPath} (a certificate chain) from the provided {@code InputStream} and the specified encoding scheme.
Generates a {@code CertPath} from the provided list of certificates. The encoding is the default encoding.
Generates and initializes a collection of (unrelated) certificates from the provided input stream.
Generates and initializes a <i>Certificate Revocation List</i> (CRL) from the provided input stream.
Generates and initializes a collection of <i>Certificate Revocation List</i> (CRL) from the provided input stream.
Generates and initializes a {@code Certificate} from the provided input stream.
Generates a {@code CertPath} from the provided {@code InputStream} in the specified encoding.
Generates a {@code CertPath} from the provided list of certificates. The encoding is the default encoding.
Returns an {@code Iterator} over the supported {@code CertPath} encodings (as Strings). The first element is the default encoding.
Creates a new {@code CertificateNotYetValidException} with the specified message.
Creates a new {@code CertificateParsingException} with the specified message.
Creates a new {@code CertificateParsingException} with the specified message and cause.
Creates a new {@code CertificateParsingException} with the specified cause.
Creates a new {@code CertPath} instance for the specified certificate type.
Returns the type of {@code Certificate} in this instance.
Returns {@code true} if {@code Certificate}s in the list are the same type and the lists are equal (and by implication the certificates contained within are the same).
Overrides {@code Object.hashCode()}. The function is defined as follows: <pre> {@code hashCode = 31 * path.getType().hashCode() + path.getCertificates().hashCode();} </pre>
Returns a {@code String} representation of this {@code CertPath} instance. It is the result of calling {@code toString} on all {@code Certificate}s in the {@code List}.
Returns an encoding of the {@code CertPath} using the default encoding.
Creates a new {@code CertPathRep} instance with the specified type and encoded data.
Deserializes a {@code CertPath} from a serialized {@code CertPathRep} object.
Creates a new {@code CertPathBuilder}.
Returns the algorithm name of this instance.
Returns the provider of this instance.
Creates a new {@code CertPathBuilder} instance with the specified algorithm.
Creates a new {@code CertPathBuilder} instance from the specified provider providing the specified algorithm.
Builds a certification path with the specified algorithm parameters.
Returns the default {@code CertPathBuilder} type from the <i>Security Properties</i>.
Creates a new {@code CertPathBuilderException} with the specified message and cause.
Creates a new {@code CertPathBuilderException} with the specified cause.
Creates a new {@code CertPathBuilderException} with the specified message.
Creates a new {@code CertPathValidator} instance.
Returns the certification path algorithm name.
Returns the security provider.
Returns a new certification path validator for the specified algorithm.
Returns a new certification path validator for the specified algorithm from the specified provider.
Validates the {@code CertPath} with the algorithm of this {@code CertPathValidator} using the specified algorithm parameters.
Returns the default {@code CertPathValidator} type from the <i>Security Properties</i>.
Creates a new {@code CertPathValidatorException} with the specified message , cause, certification path and certificate index in the certification path.
Creates a new {@code CertPathValidatorException} with the specified message and cause.
Creates a new {@code CertPathValidatorException} with the specified cause.
Creates a new {@code CertPathValidatorException} with the specified message.
Returns the certification path that failed validation.
Returns the index of the failed certificate in the certification path.
Creates a new {@code CertStore} instance.
Creates a new {@code CertStore} instance with the specified type and initialized with the specified parameters.
Creates a new {@code CertStore} instance from the specified provider with the specified type and initialized with the specified parameters.
Returns the certificate store type.
Returns a copy of the certificate store parameters that were used to initialize this instance.
Returns the list of {@code Certificate}s for the specified {@code CertSelector} from this certificate store.
Returns the list of {@code CRL}s for the specified {@code CRLSelector} from this certificate store.
Returns the default {@code CertStore} type from the <i>Security Properties</i>.
Creates a new {@code CertStoreException} with the specified message and cause.
Creates a new {@code CertStoreException} with the specified cause.
Creates a new {@code CertStoreException} with the specified message.
Creates a new {@code CertStoreSpi}.
Creates a new {@code CollectionCertStoreParameters} without a collection. <p> The default collection is an empty and unmodifiable {@code Collection}.
Creates a new {@code CollectionCertStoreParameters} with the specified collection. <p> The specified collection is not copied and therefore may be modified at any time.
Clones this {@code CollectionCertStoreParameters} instance, but not the underlying collection.
Returns the collection where the {@code Certificate}s and {@code CRL}s are retrieved from.
Returns the string representation of this instance.
Creates a new certificate revocation list of the specified type.
Returns the type of this CRL.
Creates a new {@code CRLException} with the specified message.
Creates a new {@code CRLException} with the specified message and cause.
Creates a new {@code CRLException} with the specified cause.
Creates a new {@code LDAPCertStoreParameters} instance with the specified server name and port.
Creates a new {@code LDAPCertStoreParameters} instance with default parameters. <p> The default parameters are server name "localhost" and port 389.
Creates a new {@code LDAPCertStoreParameters} instance with the specified server name and default port 389.
Clones this {@code LDAPCertStoreParameters} instance.
Returns the LDAP server port.
Returns the LDAP server name.
Returns the string representation of this {@code LDAPCertStoreParameters} instance.
Creates a new {@code PKIXBuilderParameters} instance with the specified set of {@code TrustAnchor} and certificate constraints.
Creates a new {@code PKIXBuilderParameters} instance with the trusted {@code X509Certificate} entries from the specified {@code KeyStore}.
Returns the maximum length of a certification path. <p> This is the maximum number of non-self-signed certificates in a certification path.
Set the maximum length of a certification path. <p> This is the maximum number of non-self-signed certificates in a certification path.
Returns a string representation of this {@code PKIXBuilderParameters} instance.
Creates a new {@code PKIXCertPathBuilderResult} instance with the specified validated certification path, the trust anchor of the certification path, the policy tree and the public key of the subject.
Returns the validated certification path.
Returns a string representation of this {@code PKIXCertPathBuilderResult} instance.
Clones this {@code PKIXCertPathChecker} instance.
Creates a new {@code PKIXCertPathValidatorResult} with the specified trust anchor, the valid policy tree and the subject public key.
Returns the valid policy tree from the validation.
Returns the subject public key from the validation.
Returns the trust anchor describing the certification authority (CA) that served as trust anchor for this certification path.
Clones this {@code PKIXCertPathValidatorResult} instance.
Returns a string representation for this {@code PKIXCertPathValidatorResult} instance.
Creates a new {@code PKIXParameters} instance with the specified set of <i>trusted</i> certificate authorities.
Creates a new {@code PKIXParameters} instance with the trusted {@code X509Certificate} entries from the specified {@code KeyStore}.
Returns a unmodifiable set of the <i>trusted</i> certificate authorities.
Sets the set of <i>trusted</i> certificate authorities.
Returns whether the <i>any policy OID</i> will be inhibited if it's included in a certificate.
Sets whether the <i>any policy OID</i> should be inhibited if it's included in a certificate.
Returns the list of checkers for the certification path. <p> The list is unmodifiable and the entries in the list are cloned.
Sets the list of checkers for the certification path. <p> The list is copied and the entries are cloned.
Adds the specified {@code PKIXCertPathChecker} to the list of certification path checkers.
Returns the list of certificate stores that are used to find certificates and CRLs.
Set the list of certificate stores that are used to find certificates and CRLs.
Adds a certificate store to the list of certificate stores that are used to find certificates and CRLs.
Returns the time for which the validation of the certification path should be evaluated.
Sets the time for which the validation of the certification path should be evaluated.
Returns whether an acceptable policy needs to be explicit identified in every certificate.
Sets whether an an acceptable policy needs to be explicit identified in every certificate.
Returns the list of policies (as OID strings) that would be acceptable for the purpose of certification path processing.
Sets the list of policies (as OID strings) that would be acceptable for the purpose of certification path processing.
Returns whether policy mapping is inhibited.
Sets whether policy mapping is to be inhibited.
Returns whether certificates are rejected that include policy qualifiers in a certificate policy extension that is marked as critical.
Sets whether certificates should be rejected that include policy qualifiers in a certificate policy extension that is marked as critical.
Returns whether the default revocation checking mechanism of the underlying service provider is used.
Sets whether the default revocation checking mechanism of the underlying service provider should be used.
Returns the name of the signature provider.
Sets the name of the preferred signature provider. <p> If set, the specified provider will be preferred for creating signatures. If not set, the first provider found supporting creation of signatures will be used.
Returns the constraints that are required for the target certificate.
Sets the constraints that are required for the target certificate.
Clones this {@code PKIXParameters} instance.
Returns a string representation of this {@code PKIXParameters} instance.
Checks that {@code trustAnchors} contains only {@code TrustAnchor} instances.
Creates a new {@code PolicyQualifierInfo} from the specified encoded form.
Returns a ASN.1 DER encoded copy of policy qualifier info.
Returns the identifier (an OID) of this policy qualifier info.
Returns a ASN.1 DER encoded copy of the qualifier of this policy qualifier info.
Returns a string representation of this {@code PolicyQualifierInfo} instance.
Creates a new {@code TrustAnchor} with the specified certificate and name constraints. <p> The name constraints will be used as additional constraints during the validation of certification paths.
Creates a new {@code TrustAnchor} with the specified certificate authority name, its public key and the specified name constraints. <p> The name constraints will be used as additional constraints during the validation of certification paths.
Creates a new {@code TrustAnchor} with the specified certificate authority name as principal, its public key and the specified name constraints. <p> The name constraints will be used as additional constraints during the validation of certification paths.
Returns a copy of the name constraints in ASN.1 DER encoded form.
Returns the certificate of this <i>trusted</i> certificate authority.
Returns the name of the certificate authority as {@code X500Principal}.
Returns the name of the certificate authority as {@code String} in RFC 2253 format.
Returns the public key of the certificate authority.
Returns a string representation of this {@code TrustAnchor} instance.
Decodes and checks NameConstraints structure. Throws IllegalArgumentException if NameConstraints encoding is invalid.
Creates a new {@code X509Certificate}.
Checks whether the certificate is currently valid. <p> The validity defined in ASN.1: <pre> validity             Validity Validity ::= SEQUENCE { CertificateValidityDate ::= CHOICE { </pre>
Returns the {@code subject} (subject distinguished name) as an {@code X500Principal}.
Returns the {@code tbsCertificate} information from this certificate in DER-encoded format.
Returns a read-only list of the subject alternative names from the {@code SubjectAltName} extension. <p> The ASN.1 definition of {@code SubjectAltName}: <pre> SubjectAltName ::= GeneralNames GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName GeneralName ::= CHOICE { </pre>
Returns a read-only list of the issuer alternative names from the {@code IssuerAltName} extension. <p> The ASN.1 definition of {@code IssuerAltName}: <pre> IssuerAltName ::= GeneralNames GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName GeneralName ::= CHOICE { </pre>
Sets the certificate that a matching certificate must be equal to.
Returns the certificate that a matching certificate must be equal to.
Sets the serial number that a certificate must match.
Returns the serial number that a certificate must match.
Sets the issuer that a certificate must match.
Returns the issuer that a certificate must match.
<b>Do not use</b>, use {@link #getIssuer()} or {@link #getIssuerAsBytes()} instead. Sets the issuer that a certificate must match.
<b>Do not use</b>, use {@link #getIssuer()} or {@link #getIssuerAsBytes()} instead. Returns the issuer that a certificate must match in a RFC 2253 format string.
Returns the issuer that a certificate must match.
Set the subject that a certificate must match.
Returns the subject that a certificate must match.
<b>Do not use</b>, use {@link #setSubject(byte[])} or {@link #setSubject(X500Principal)} instead. Returns the subject that a certificate must match.
<b>Do not use</b>, use {@link #getSubject()} or {@link #getSubjectAsBytes()} instead. Returns the subject that a certificate must match.
Sets the subject that a certificate must match.
Returns the subject that a certificate must match.
Sets the criterion for the {@literal SubjectKeyIdentifier} extension. <p> The {@code subjectKeyIdentifier} should be a single DER encoded value.
Returns the criterion for the {@literal SubjectKeyIdentifier} extension.
Sets the criterion for the {@literal AuthorityKeyIdentifier} extension.
Returns the criterion for the {@literal AuthorityKeyIdentifier} extension.
Sets the criterion for the validity date of the certificate. <p> The certificate must be valid at the specified date.
Returns the criterion for the validity date of the certificate.
Sets the criterion for the validity date of the private key. <p> The private key must be valid at the specified date.
Returns the criterion for the validity date of the private key. <p> The private key must be valid at the specified date.
Sets the criterion for the subject public key signature algorithm. <p> The certificate must contain a subject public key with the algorithm specified.
Returns the criterion for the subject public key signature algorithm.
Sets the criterion for the subject public key.
Returns the criterion for the subject public key.
Sets the criterion for the {@literal KeyUsage} extension.
Returns the criterion for the {@literal KeyUsage} extension.
Sets the criterion for the {@literal ExtendedKeyUsage} extension.
Returns the criterion for the {@literal ExtendedKeyUsage} extension.
Sets the flag for the matching behavior for subject alternative names. <p> The flag indicates whether a certificate must contain all or at least one of the subject alternative names specified by {@link #setSubjectAlternativeNames} or {@link #addSubjectAlternativeName}.
Returns the flag for the matching behavior for subject alternative names. <p> The flag indicates whether a certificate must contain all or at least one of the subject alternative names specified by {@link #setSubjectAlternativeNames} or {@link #addSubjectAlternativeName}.
Sets the criterion for subject alternative names. <p> the certificate must contain all or at least one of the specified subject alternative names. The behavior is specified by {@link #getMatchAllSubjectAltNames}. <p> The specified parameter {@code names} is a collection with an entry for each name to be included in the criterion. The name is specified as a {@code List}, the first entry must be an {@code Integer} specifying the name type (0-8), the second entry must be a {@code String} or a byte array specifying the name (in string or ASN.1 DER encoded form)
Adds a subject alternative name to the respective criterion.
Returns the criterion for subject alternative names. <p> the certificate must contain all or at least one of the specified subject alternative names. The behavior is specified by {@link #getMatchAllSubjectAltNames}. <p> The subject alternative names is a collection with an entry for each name included in the criterion. The name is specified as a {@code List}, the first entry is an {@code Integer} specifying the name type (0-8), the second entry is byte array specifying the name in ASN.1 DER encoded form)
Sets the criterion for the name constraints. <p> The certificate must constraint subject and subject alternative names that match the specified name constraints. <p> The name constraints in ASN.1: <pre> NameConstraints ::= SEQUENCE { GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree GeneralSubtree ::= SEQUENCE { BaseDistance ::= INTEGER (0..MAX) GeneralName ::= CHOICE { </pre>
Returns the criterion for the name constraints.
Sets the criterion for the basic constraints extension. <p> A value greater than or equal to zero indicates that a certificate must include a basic constraints extension with a path length of a least that value. A value of {@code -2} indicates that only end-entity certificates are accepted. A value of {@code -1} indicates that no check is done.
Returns the criterion for the basic constraints extension. <p> A value greater than or equal to zero indicates that a certificate must include a basic constraints extension with a path length of a least that value. A value of {@code -2} indicates that only end-entity certificates are accepted. A value of {@code -1} indicates that no check is done.
Sets the criterion for the policy constraint. <p> The certificate must have at least one of the specified certificate policy extensions. For an empty set the certificate must have at least some policies in its policy extension.
Returns the criterion for the policy constraint. <p> The certificate must have at least one of the certificate policy extensions. For an empty set the certificate must have at least some policies in its policy extension.
Adds a {@literal "pathToName"} to the respective criterion.
Sets the criterion for the pathToNames constraint. <p> This allows to specify the complete set of names, a certificate's name constraints must permit. <p> The specified parameter {@code names} is a collection with an entry for each name to be included in the criterion. The name is specified as a {@code List}, the first entry must be an {@code Integer} specifying the name type (0-8), the second entry must be a {@code String} or a byte array specifying the name (in string or ASN.1 DER encoded form)
Returns the criterion for the pathToNames constraint. <p> The constraint is a collection with an entry for each name to be included in the criterion. The name is specified as a {@code List}, the first entry is an {@code Integer} specifying the name type (0-8), the second entry is a byte array specifying the name in ASN.1 DER encoded form.
Returns a string representation of this {@code X509CertSelector} instance.
Returns whether the specified certificate matches all the criteria collected in this instance.
Clones this {@code X509CertSelector} instance.
Creates a new {@code X509CRL} instance.
Returns whether the specified object equals to this instance.
Returns the hashcode of this CRL instance.
Returns this CRL in ASN.1 DER encoded form.
Returns the CRL entry for the specified certificate.
Returns the hashcode of this instance.
Returns this entry in ASN.1 DER encoded form.
Sets the criterion for the issuer distinguished names. <p> The CRL issuer must match at least one of the specified distinguished names.
<b>Do not use:</b> use {@link #setIssuers(Collection)} or one of {@link #addIssuerName} instead. Sets the criterion for the issuer distinguished names. <p> The CRL issuer must match at least one of the specified distinguished names. <p> The specified parameter {@code names} is a collection with an entry for each name to be included in the criterion. The name is specified as a {@code String} or a byte array specifying the name (in RFC 2253 or ASN.1 DER encoded form)
Adds an issuer to the criterion for the issuer distinguished names. <p> The CRL issuer must match at least one of the specified distinguished names.
<b>Do not use:</b>, use {@link #addIssuer(X500Principal)} or {@link #addIssuerName(byte[])} instead. It can fail to match some CRLs because of a loss of encoding information in a RFC 2253 string. <p> Adds an issuer to the criterion for the issuer distinguished names. The CRK issuer must match at least one of the specified distinguished names.
Adds an issuer to the criterion for the issuer distinguished names. <p> The CRL issuer must match at least one of the specified distinguished names.
Sets the criterion for the minimum CRL number. <p> The CRL must have a number extension with a value greater than or equal to the specified parameter.
Sets the criterion for the maximum CRL number. <p> The CRL must have a number extension with a value less than or equal to the specified parameter.
Sets the criterion for the CRL update period. <p> The CRL's {@code thisUpdate} value must be equal or before the specified date and the {@code nextUpdate} value must be after the specified date.
Sets a certificate hint to find CRLs. It's not a criterion but may help finding relevant CRLs.
Returns the criterion for the issuer distinguished names. <p> The CRL issuer must match at least one of the distinguished names.
Returns the criterion for the issuer distinguished names. <p> The CRL issuer must match at least one of the distinguished names.
Returns the criterion for the minimum CRL number. <p> The CRL must have a number extension with a value greater than or equal to the returned value.
Returns the criterion for the maximum CRL number. <p> The CRL must have a number extension with a value less than or equal to the returned value.
Returns the criterion for the CRL update period. <p> The CRL's {@code thisUpdate} value must be equal or before the returned date and the {@code nextUpdate} value must be after the returned date.
Returns the certificate hint to find CRLs. It's not a criterion but may help finding relevant CRLs.
Returns a string representation of this {@code X509CRLSelector} instance.
Returns whether the specified CRL matches all the criteria collected in this instance.
Clones this {@code X509CRL} instance.
Creates a new {@code DSAParameterSpec} with the specified prime {@code p}, sub-prime {@code q} and the base {@code g}.
Returns the base {@code g}.
Returns the prime {@code p}.
Returns the sub-prime {@code q}.
Creates a new {@code DSAPrivateKeySpec} with the specified private key, prime, sub-prime and base.
Returns the private key {@code x}.
Creates a new {@code DSAPublicKeySpec} with the specified public key, prime, sub-prime and base.
Returns the public key value {@code y}.
Creates a new {@code ECFieldF2m} with {@code 2^m} elements with a normal basis.
Creates a new {@code ECFieldF2m} with {@code 2^m} elements with a polynomial basis and the reduction polynomial based on {@code rp}. <p> The reduction polynomial must be either <i>trinomial</i> or <i>pentanomial</i>.
Creates a new {@code ECFieldF2m} with {@code 2^m} elements with a polynomial basis and the reduction polynomial based on {@code ks}. <p> The reduction polynomial must be either <i>trinomial</i> or <i>pentanomial</i>.
Returns whether the specified object equals to this finite field.
Returns the size of this finite field (in bits).
Returns the exponent {@code m} for this finite field, with {@code 2^m} as the number of elements.
Returns a copy of the integer array containing the order of the middle term(s) of the reduction polynomial for a polynomial basis.
Returns the base of the reduction polynomial with the n-th bit corresponding to the n-th coefficient of the reduction polynomial for a polynomial basis.
Returns the hashcode value for this finite field.
Creates a new prime finite field of an elliptic curve with the specified prime {@code p}.
Returns the size of the finite field (in bits).
Returns the prime value {@code p} for this finite field.
Returns whether the specified object is equal to this finite field.
Creates a new {@code ECGenParameterSpec} with the specified standard or predefined name of the to-be-generated domain parameter.
Returns the name (standard or predefined) of the to-be-generated elliptic curve domain parameter.
Creates a new {@code ECParameterSpec} with the specified elliptic curve, the base point, the order of the generator (or base point) and the co-factor.
Returns the {@code cofactor}.
Returns the elliptic curve.
Returns the generator (or base point).
Returns the order of the generator.
Private ctor for POINT_INFINITY
Creates a new point at the specified coordinates.
Returns the x-coordinate.
Returns the y-coordinate.
Returns whether the specified object and this elliptic curve point are equal.
Returns the hashcode of this elliptic curve point.
Creates a new {@code ECPrivateKeySpec} with the specified private value {@code S} and parameter specification.
Returns the domain parameter specification.
Returns the private value {@code S}.
Creates a new {@code ECPublicKey} with the specified public elliptic curve point and parameter specification.
Returns the public elliptic curve point {@code W}.
Creates a new {@code EllipticCurve} with the specified field, coefficients and seed.
Creates a new {@code EllipticCurve} with the specified field and coefficients.
Returns the coefficient {@code a} of this elliptic curve.
Returns the coefficient {@code b} of this elliptic curve.
Returns the finite field of this elliptic curve.
Returns a copy of the seed that was used to generate this elliptic curve.
Returns whether the specified object equals to this elliptic curve.
Returns the hashcode of this elliptic curve.
Creates a new {@code EncodedKeySpec} with the specified encoded key bytes.
Returns the encoded key bytes.
Creates a new {@code InvalidKeySpecException} with the specified message.
Creates a new {@code InvalidKeySpecException} with the specified message and cause.
Creates a new {@code InvalidKeySpecException} with the specified cause.
Creates a new {@code InvalidParameterSpecException} with the specified message.
Creates a new {@code MGF1ParameterSpec} with the specified message digest algorithm name.
Returns the name of the message digest algorithm.
Creates a new {@code PKCS8EncodedKeySpec} with the specified encoded key bytes.
Returns a copy of the encoded key bytes.
Returns the name of the encoding format of this encoded key specification.
Creates a new {@code PSSParameterSpec} with the specified salt length and the default values.
Creates a new {@code PSSParameterSpec} with the specified message digest name, mask generation function name, mask generation function parameters, salt length, and trailer field value.
Returns the length of the salt (in bits).
Returns the name of the mask generation function algorithm.
Returns the parameter for the mask generation function algorithm.
Returns the trailer field value.
Creates a new {@code RSAKeyGenParameterSpec} with the specified key size and public exponent.
Returns the size of the modulus (number of bits).
Returns the value of the public exponent.
Creates a new {@code RSAMultiPrimePrivateCrtKeySpec} with the specified modulus, public exponent, private exponent, prime factors, prime exponents, crt coefficient, and additional primes.
Returns the CRT coefficient, {@code q^-1 mod p}.
Returns the information for the additional primes.
Returns the exponent of the prime {@code p}.
Returns the exponent of the prime {@code q}.
Returns the prime factor {@code p}.
Returns the prime factor {@code q}.
Returns the public exponent {@code e}.
Creates a new {@code RSAOtherPrimeInfo} with the specified prime, exponent, and CRT coefficient.
Returns the CRT coefficient.
Returns the prime factor.
Returns the exponent.
Creates a new {@code RSAMultiPrimePrivateCrtKeySpec} with the specified modulus, public exponent, private exponent, prime factors, prime exponents, crt coefficient, and additional primes.
Creates a new {@code RSAPrivateKeySpec} with the specified modulus and private exponent.
Returns the modulus {@code n}.
Returns the private exponent {@code e}.
Creates a new {@code RSAPublicKeySpec} with the specified modulus and public exponent.
Returns the public exponent {@code d}.
Creates a new {@code X509EncodedKeySpec} with the specified encoded key bytes.
Constructs a new instance of {@code AccessControlException} with the given message.
Constructs a new instance of {@code AccessControlException} with the given message and the requested {@code Permission} which was not granted.
Returns the requested permission that caused this Exception or {@code null} if there is no corresponding {@code Permission}.
Calls {@code action.run()}.
Calls {@code action.run()}.
Constructs a new instance of {@code AlgorithmParameterGenerator} with the given arguments.
Returns the name of the algorithm.
Returns a new instance of {@code AlgorithmParameterGenerator} for the specified algorithm.
Returns a new instance of {@code AlgorithmParameterGenerator} from the specified provider for the specified algorithm.
Returns the provider associated with this {@code AlgorithmParameterGenerator}.
Initializes this {@code AlgorithmParameterGenerator} with the given size. The default parameter set and a default {@code SecureRandom} instance will be used.
Initializes this {@code AlgorithmParameterGenerator} with the given size and the given {@code SecureRandom}. The default parameter set will be used.
Initializes this {@code AlgorithmParameterGenerator} with the given {@code AlgorithmParameterSpec}. A default {@code SecureRandom} instance will be used.
Initializes this {@code AlgorithmParameterGenerator} with the given {@code AlgorithmParameterSpec} and the given {@code SecureRandom}.
Computes and returns {@code AlgorithmParameters} for this generator's algorithm.
Constructs a new instance of {@code AlgorithmParameters} with the given arguments.
Returns a new instance of {@code AlgorithmParameters} for the specified algorithm.
Returns a new instance of {@code AlgorithmParameters} from the specified provider for the specified algorithm.
Returns the provider associated with this {@code AlgorithmParameters}.
Initializes this {@code AlgorithmParameters} with the specified {@code AlgorithmParameterSpec}.
Initializes this {@code AlgorithmParameters} with the specified {@code byte[]} using the default decoding format for parameters. The default encoding format is ASN.1.
Initializes this {@code AlgorithmParameters} with the specified {@code byte[]} using the specified decoding format.
Returns the {@code AlgorithmParameterSpec} for this {@code AlgorithmParameters}.
Returns this {@code AlgorithmParameters} in their default encoding format. The default encoding format is ASN.1.
Returns this {@code AlgorithmParameters} in the specified encoding format.
Constructs a new instance of {@code CodeSigner}.
Returns the certificate path associated with this {@code CodeSigner}.
Returns the time stamp associated with this {@code CodeSigner}.
Constructs a new instance of {@code DigestException} with the given message.
Constructs a new instance of {@code DigestException} with the given message and the cause.
Constructs a new instance of {@code DigestException} with the cause.
Constructs a new instance of this {@code DigestInputStream}, using the given {@code stream} and the {@code digest}. <p><strong>Warning:</strong> passing a null source creates an invalid {@code DigestInputStream}. All operations on such a stream will fail.
Returns the message digest for this stream.
Sets the message digest which this stream will use.
Enables or disables the digest function (default is on).
Constructs a new instance of this {@code DigestOutputStream}, using the given {@code stream} and the {@code digest}.
Constructs a new instance of {@code GeneralSecurityException} with the given message.
Constructs a new instance of {@code GeneralSecurityException} with the given message and the cause.
Constructs a new instance of {@code GeneralSecurityException} with the cause.
Constructs a new instance of {@code GuardedObject} which protects access to the specified {@code Object} using the specified {@code Guard}.
Returns the guarded {@code Object} if the associated {@code Guard} permits access. If access is not granted, then a {@code SecurityException} is thrown.
Checks the guard (if there is one) before performing a default serialization.
Creates a new instance of {@code Identity} with the specified name.
Creates a new instance of {@code Identity} with the specified name and the scope of this {@code Identity}.
Adds a {@code Certificate} to this {@code Identity}.
Removes the specified {@code Certificate} from this {@code Identity}.
Returns the certificates for this {@code Identity}. External modifications of the returned array has no impact on this {@code Identity}.
Compares the specified {@code Identity} with this {@code Identity} for equality and returns {@code true} if the specified object is equal, {@code false} otherwise. <p> To be equal, two {@code Identity} objects need to have the same name and the same public keys.
Returns a string containing a concise, human-readable description of the this {@code Identity}.
Returns the {@code IdentityScope} of this {@code Identity}.
Sets the specified {@code PublicKey} to this {@code Identity}.
Returns the {@code PublicKey} associated with this {@code Identity}.
Sets an information string for this {@code Identity}.
Returns the information string of this {@code Identity}.
Returns the name of this {@code Identity}.
Constructs a new instance of {@code IdentityScope} with the specified name.
Constructs a new instance of {@code IdentityScope} with the specified name and the specified scope.
Returns the system's scope.
Sets the system's scope.
Returns the {@code Identity} with the name of the specified principal or {@code null} if no {@code Identity} with the name of the specified principal is present in this scope.
Adds an {@code Identity} to this {@code IdentityScope}.
Constructs a new instance of {@code InvalidAlgorithmParameterException} with the given message.
Constructs a new instance of {@code InvalidAlgorithmParameterException} with the given message and the cause.
Constructs a new instance of {@code InvalidAlgorithmParameterException} with the cause.
Constructs a new instance of {@code InvalidKeyException} with the given message.
Constructs a new instance of {@code InvalidKeyException} with the given message and the cause.
Constructs a new instance of {@code InvalidKeyException} with the cause.
Constructs a new instance of {@code InvalidParameterException} with the given message.
Constructs a new instance of {@code KeyException} with the given message.
Constructs a new instance of {@code KeyException} with the given message and the cause.
Constructs a new instance of {@code KeyException} with the cause.
Constructs a new instance of {@code KeyFactory} with the specified arguments.
Returns a new instance of {@code KeyFactory} that utilizes the specified algorithm.
Returns a new instance of {@code KeyFactory} that utilizes the specified algorithm from the specified provider.
Returns the provider associated with this {@code KeyFactory}.
Returns the name of the algorithm associated with this {@code KeyFactory}.
Generates a instance of {@code PublicKey} from the given key specification.
Generates a instance of {@code PrivateKey} from the given key specification.
Returns the key specification for the specified key.
Translates the given key into a key from this key factory.
Constructs a new instance of {@code KeyManagementException} with the given message.
Constructs a new instance of {@code KeyManagementException} with the given message and the cause.
Constructs a new instance of {@code KeyManagementException} with the cause.
Constructs a new instance of {@code KeyPair} with a public key and the corresponding private key.
Returns the private key.
Returns the public key.
Constructs a new instance of {@code KeyPairGenerator} with the name of the algorithm to use.
Returns the name of the algorithm of this {@code KeyPairGenerator}.
Returns a new instance of {@code KeyPairGenerator} that utilizes the specified algorithm.
Returns a new instance of {@code KeyPairGenerator} that utilizes the specified algorithm from the specified provider.
Returns the provider associated with this {@code KeyPairGenerator}.
Initializes this {@code KeyPairGenerator} with the given key size. The default parameter set and a default {@code SecureRandom} instance will be used.
Initializes this {@code KeyPairGenerator} with the given {@code AlgorithmParameterSpec}. A default {@code SecureRandom} instance will be used.
Computes and returns a new unique {@code KeyPair} each time this method is called. <p> This does exactly the same as {@link #generateKeyPair()}.
Initializes this {@code KeyPairGeneratorSpi} with the given {@code AlgorithmParameterSpec} and the given {@code SecureRandom}.
Constructs a new instance of {@code KeyRep} with the specified arguments. The arguments should be obtained from the {@code Key} object that has to be serialized.
Resolves and returns the {@code Key} object. Three {@link Type}|format combinations are supported: <ul> <li> {@code Type.PRIVATE} | "PKCS#8" : returns a {@link PrivateKey} instance, generated from a key factory (suitable for the algorithm) that is initialized with a {@link PKCS8EncodedKeySpec} using the encoded key bytes. <li> {@code Type.SECRET} | "RAW" : returns a {@link SecretKeySpec} instance, created with the encoded key bytes and the algorithm. <li> {@code Type.PUBLIC} | "X.509": returns a {@link PublicKey} instance, generated from a key factory (suitable for the algorithm) that is initialized with a {@link X509EncodedKeySpec} using the encoded key bytes. </ul>
Makes defensive copy of key encoding
Constructs a new instance of {@code KeyStore} with the given arguments.
Throws the standard "keystore not initialized" exception.
Returns a new instance of {@code KeyStore} with the specified type.
Returns a new instance of {@code KeyStore} from the specified provider with the given type.
Returns the default type for {@code KeyStore} instances. <p>The default is specified in the {@code 'keystore.type'} property in the file named {@code java.security} properties file. If this property is not set, {@code "jks"} will be used.
Returns the provider associated with this {@code KeyStore}.
Returns the type of this {@code KeyStore}.
Returns the key with the given alias, using the password to recover the key from the store.
Returns the certificate chain for the entry with the given alias.
Returns the trusted certificate for the entry with the given alias.
Returns the creation date of the entry with the given alias.
Associates the given alias with the key, password and certificate chain. <p> If the specified alias already exists, it will be reassigned.
Associates the given alias with a key and a certificate chain. <p> If the specified alias already exists, it will be reassigned. <p> If this {@code KeyStore} is of type {@code "jks"}, {@code key} must be encoded conform to the PKS#8 standard as an {@link javax.crypto.EncryptedPrivateKeyInfo}.
Associates the given alias with a certificate. <p> If the specified alias already exists, it will be reassigned.
Deletes the entry identified with the given alias from this {@code KeyStore}.
Returns an {@code Enumeration} over all alias names stored in this {@code KeyStore}.
Indicates whether the given alias is present in this {@code KeyStore}.
Returns the number of entries stored in this {@code KeyStore}.
Indicates whether the specified alias is associated with either a {@link PrivateKeyEntry} or a {@link SecretKeyEntry}.
Indicates whether the specified alias is associated with a {@link TrustedCertificateEntry}.
Returns the alias associated with the first entry whose certificate matches the specified certificate.
Writes this {@code KeyStore} to the specified {@code OutputStream}. The data written to the {@code OutputStream} is protected by the specified password.
Stores this {@code KeyStore} using the specified {@code LoadStoreParameter}.
Initializes this {@code KeyStore} from the provided {@code InputStream}. Pass {@code null} as the {@code stream} argument to initialize an empty {@code KeyStore} or to initialize a {@code KeyStore} which does not rely on an {@code InputStream}. This {@code KeyStore} utilizes the given password to verify the stored data.
Loads this {@code KeyStore} using the specified {@code LoadStoreParameter}.
Returns the {@code Entry} with the given alias, using the specified {@code ProtectionParameter}.
Stores the given {@code Entry} in this {@code KeyStore} and associates the entry with the given {@code alias}. The entry is protected by the specified {@code ProtectionParameter}. <p> If the specified alias already exists, it will be reassigned.
Indicates whether the entry for the given alias is assignable to the provided {@code Class}.
Returns a new {@code Builder} that creates a new {@code KeyStore} based on the provided arguments. <p> If {@code provider} is {@code null}, all installed providers are searched, otherwise the key store from the specified provider is used.
Constructor BuilderImpl initializes private fields: keyStore, protParameter, typeForKeyStore providerForKeyStore fileForLoad, isGetKeyStore
Creates TmpLoadStoreParameter object
This method returns protection parameter
Constructs a new instance of {@code CallbackHandlerProtection} with the {@code CallbackHandler}.
Returns the {@code CallbackHandler}.
Constructs a new instance of {@code PasswordProtection} with a password. A copy of the password is stored in the new {@code PasswordProtection} object.
Returns the password.
Destroys / invalidates the password.
Indicates whether the password is invalidated.
Constructs a new instance of {@code PrivateKeyEntry} with the given {@code PrivateKey} and the provided certificate chain.
Returns the private key.
Returns the certificate chain.
Returns the certificate corresponding to the private key.
Constructs a new instance of {@code SecretKeyEntry} with the given {@code SecretKey}.
Returns the secret key.
Constructs a new instance of {@code TrustedCertificateEntry} with the given {@code Certificate}.
Returns the trusted certificate.
Constructs a new instance of {@code KeyStoreException} with the given message.
Constructs a new instance of {@code KeyStoreException} with the given message and the cause.
Constructs a new instance of {@code KeyStoreException} with the cause.
Returns the key with the given alias, using the password to recover the key from the store.
Loads this {@code KeyStoreSpi} from the given {@code InputStream}. Utilizes the given password to verify the stored data.
Returns the {@code Entry} with the given alias, using the specified {@code ProtectionParameter}.
Stores the given {@code Entry} in this {@code KeyStoreSpi} and associates the entry with the given {@code alias}. The entry is protected by the specified {@code ProtectionParameter}. <p> If the specified alias already exists, it will be reassigned.
Indicates whether the entry for the given alias is assignable to the provided {@code Class}.
This method returns password which is encapsulated in CallbackHandlerProtection object If there is no implementation of CallbackHandler then this method returns null
Constructs a new instance of {@code MessageDigest} with the name of the algorithm to use.
Returns a new instance of {@code MessageDigest} that utilizes the specified algorithm.
Returns a new instance of {@code MessageDigest} that utilizes the specified algorithm from the specified provider.
Puts this {@code MessageDigest} back in an initial state, such that it is ready to compute a one way hash value.
Updates this {@code MessageDigest} using the given {@code byte}.
Updates this {@code MessageDigest} using the given {@code byte[]}.
Computes and returns the final hash value for this {@link MessageDigest}. After the digest is computed the receiver is reset.
Computes and stores the final hash value for this {@link MessageDigest}. After the digest is computed the receiver is reset.
Performs the final update and then computes and returns the final hash value for this {@link MessageDigest}. After the digest is computed the receiver is reset.
Indicates whether to digest are equal by performing a simply byte-per-byte compare of the two digests.
Returns the name of the algorithm of this {@code MessageDigest}.
Returns the provider associated with this {@code MessageDigest}.
Returns the engine digest length in bytes. If the implementation does not implement this function or is not an instance of {@code Cloneable}, {@code 0} is returned.
Updates this {@code MessageDigest} using the given {@code input}.
MessageDigestImpl ctor
Returns the engine digest length in bytes. If the implementation does not implement this function {@code 0} is returned.
Updates this {@code MessageDigestSpi} using the given {@code input}.
Computes and stores the final hash value for this {@link MessageDigestSpi}. After the digest is computed the receiver is reset.
Constructs a new instance of {@code NoSuchAlgorithmException} with the given message.
Constructs a new instance of {@code NoSuchAlgorithmException} with the given message and the cause.
Constructs a new instance of {@code NoSuchAlgorithmException} with the cause.
Constructs a new instance of {@code NoSuchProviderException} with the given message.
Adds the argument to the collection.
Returns an enumeration of the permissions in the receiver.
Indicates whether the argument permission is implied by the permissions contained in the receiver.
Refreshes/reloads the policy configuration. The behavior of this method depends on the implementation. For example, calling refresh on a file-based policy will cause the file to be re-read. The default implementation of this method does nothing. This method should be overridden if a refresh operation is supported by the policy implementation.
Answers a PermissionCollection object containing the set of permissions granted to the specified CodeSource. The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden if the policy implementation can return a set of permissions granted to a CodeSource.
Answers a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain. The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden if the policy implementation can return a set of permissions granted to a ProtectionDomain.
Constructs a new instance of {@code Provider} with its name, version and description.
Returns the version number for the services being provided.
Returns a description of the services being provided.
Returns true if this provider implements the given algorithm. Caller must specify the cryptographic service and specify constraints via the attribute name and value.
Returns true if this provider has the same value as is given for the given attribute
Set the provider preference order number.
Get the provider preference order number.
Get the service of the specified type
Returns the service with the specified {@code type} implementing the specified {@code algorithm}, or {@code null} if no such implementation exists. <p> If two services match the requested type and algorithm, the one added with the {@link #putService(Service)} is returned (as opposed to the one added via {@link #put(Object, Object)}.
Returns an unmodifiable {@code Set} of all services registered by this provider.
Adds a {@code Service} to this {@code Provider}. If a service with the same name was registered via this method, it is replace.
Removes a previously registered {@code Service} from this {@code Provider}.
Add Service information to the provider's properties.
Remove Service information from the provider's properties.
Remove property information from provider Services
Update provider Services if the properties was changed
These attributes should be placed in each Provider object: Provider.id name, Provider.id version, Provider.id info, Provider.id className
Returns the property with the specified key in the provider properties. The name is not case-sensitive.
Constructs a new instance of {@code Service} with the given attributes.
Adds an alias.
Puts a new attribute mapping.
Returns the type of this {@code Service}. For example {@code KeyPairGenerator}.
Returns the name of the algorithm implemented by this {@code Service}.
Returns the {@code Provider} this {@code Service} belongs to.
Returns the name of the class implementing this {@code Service}.
Returns the value of the attribute with the specified {@code name}.
Creates and returns a new instance of the implementation described by this {@code Service}.
Indicates whether this {@code Service} supports the specified constructor parameter.
Constructs a new instance of {@code ProviderException} with the given message.
Constructs a new instance of {@code ProviderException} with the given message and the cause.
Constructs a new instance of {@code ProviderException} with the cause.
Constructs a new instance of {@code SecureClassLoader} with the specified parent {@code ClassLoader}.
Returns the {@code PermissionCollection} for the specified {@code CodeSource}.
Constructs a new class from an array of bytes containing a class definition in class file format with an optional {@code CodeSource}.
Constructs and caches ProtectionDomain for the given CodeSource object.<br> It calls {@link getPermissions()} to get a set of permissions.
Constructs a new {@code SecureRandom} that uses the default algorithm.
Constructs a new seeded {@code SecureRandom} that uses the default algorithm. <a href="#insecure_seed">Seeding {@code SecureRandom} may be insecure</a>.
Constructs a new instance of {@code SecureRandom} using the given implementation from the specified provider.
Returns a new instance of {@code SecureRandom} that utilizes the specified algorithm.
Returns a new instance of {@code SecureRandom} that utilizes the specified algorithm from the specified provider.
Returns the provider associated with this {@code SecureRandom}.
Returns the name of the algorithm of this {@code SecureRandom}.
Seeds this {@code SecureRandom} instance with the specified {@code seed}. <a href="#insecure_seed">Seeding {@code SecureRandom} may be insecure</a>.
Generates and returns the specified number of seed bytes, computed using the seed generation algorithm used by this {@code SecureRandom}.
Generates and returns the specified number of seed bytes, computed using the seed generation algorithm used by this {@code SecureRandom}.
Register default providers
Insert the given {@code Provider} at the specified {@code position}. The positions define the preference order in which providers are searched for requested algorithms.
Adds the given {@code provider} to the collection of providers at the next available position.
Removes the {@code Provider} with the specified name form the collection of providers. If the the {@code Provider} with the specified name is removed, all provider at a greater position are shifted down one position. <p>Returns silently if {@code name} is {@code null} or no provider with the specified name is installed.
Returns an array containing all installed providers. The providers are ordered according their preference order.
Returns the {@code Provider} with the specified name. Returns {@code null} if name is {@code null} or no provider with the specified name is installed.
Returns the array of providers which meet the user supplied string filter. The specified filter must be supplied in one of two formats: <nl> <li> CRYPTO_SERVICE_NAME.ALGORITHM_OR_TYPE <p> (for example: "MessageDigest.SHA") <li> CRYPTO_SERVICE_NAME.ALGORITHM_OR_TYPE ATTR_NAME:ATTR_VALUE <p> (for example: "Signature.MD2withRSA KeySize:512") </nl>
Returns the array of providers which meet the user supplied set of filters. The filter must be supplied in one of two formats: <nl> <li> CRYPTO_SERVICE_NAME.ALGORITHM_OR_TYPE <p> for example: "MessageDigest.SHA" The value associated with the key must be an empty string. <li> CRYPTO_SERVICE_NAME.ALGORITHM_OR_TYPE ATTR_NAME:ATTR_VALUE <p> for example: "Signature.MD2withRSA KeySize:512" where "KeySize:512" is the value of the filter map entry. </nl>
Returns the value of the security property named by the argument.
Sets the value of the specified security property.
Returns a {@code Set} of all registered algorithms for the specified cryptographic service. {@code "Signature"}, {@code "Cipher"} and {@code "KeyStore"} are examples for such kind of services.
Update sequence numbers of all providers.
Access to Security.renumProviders()
Access to Security.getAliases()
Access to Provider.getService()
Constructs a new instance of {@code Signature} with the name of the algorithm to use.
Returns a new instance of {@code Signature} that utilizes the specified algorithm.
Returns a new instance of {@code Signature} that utilizes the specified algorithm from the specified provider.
Returns the provider associated with this {@code Signature}.
Returns the name of the algorithm of this {@code Signature}.
Initializes this {@code Signature} instance for signature verification, using the public key of the identity whose signature is going to be verified.
Initializes this {@code Signature} instance for signature verification, using the certificate of the identity whose signature is going to be verified. <p> If the given certificate is an instance of {@link X509Certificate} and has a key usage parameter that indicates, that this certificate is not to be used for signing, an {@code InvalidKeyException} is thrown.
Initializes this {@code Signature} instance for signing, using the private key of the identity whose signature is going to be generated.
Initializes this {@code Signature} instance for signing, using the private key of the identity whose signature is going to be generated and the specified source of randomness.
Generates and returns the signature of all updated data. <p> This {@code Signature} instance is reset to the state of its last initialization for signing and thus can be used for another signature from the same identity.
Generates and stores the signature of all updated data in the provided {@code byte[]} at the specified position with the specified length. <p> This {@code Signature} instance is reset to the state of its last initialization for signing and thus can be used for another signature from the same identity.
Indicates whether the given {@code signature} can be verified using the public key or a certificate of the signer. <p> This {@code Signature} instance is reset to the state of its last initialization for verifying and thus can be used to verify another signature of the same signer.
Indicates whether the given {@code signature} starting at index {@code offset} with {@code length} bytes can be verified using the public key or a certificate of the signer. <p> This {@code Signature} instance is reset to the state of its last initialization for verifying and thus can be used to verify another signature of the same signer.
Updates the data to be verified or to be signed, using the specified {@code byte}.
Updates the data to be verified or to be signed, using the specified {@code byte[]}.
Updates the data to be verified or to be signed, using the given {@code byte[]}, starting form the specified index for the specified length.
Updates the data to be verified or to be signed, using the specified {@code ByteBuffer}.
Convert state to string
Sets the specified {@code AlgorithmParameterSpec}.
Returns the {@code AlgorithmParameters} of this {@link Signature} instance.
Constructs a new instance of {@code SignatureException} with the given message.
Constructs a new instance of {@code SignatureException} with the given message and the cause.
Constructs a new instance of {@code SignatureException} with the cause.
Initializes this {@code SignatureSpi} instance for signature verification, using the public key of the identity whose signature is going to be verified.
Updates the data to be verified or to be signed, using the specified {@code byte}.
Generates and returns the signature of all updated data. <p> This {@code SignatureSpi} instance is reset to the state of its last initialization for signing and thus can be used for another signature from the same identity.
Indicates whether the given {@code sigBytes} can be verified using the public key or a certificate of the signer. <p> This {@code SignatureSpi} instance is reset to the state of its last initialization for verifying and thus can be used to verify another signature of the same signer.
Returns the {@code AlgorithmParameters} of this {@link SignatureSpi} instance.
Constructs a new instance of {@code SignedObject} with the target object, the private key and the engine to compute the signature. The given {@code object} is signed with the specified key and engine.
Returns the encapsulated object. Each time this method is invoked, the encapsulated object is deserialized before it is returned.
Returns the signature data of the encapsulated serialized object.
Returns the name of the algorithm of this {@code SignedObject}.
Indicates whether the contained signature for the encapsulated object is valid.
Constructs a new instance of {@code Signer} with the given name.
Constructs a new instance of {@code Signer} with the given name in the given scope.
Returns the private key of this {@code Signer}.
Associates the specified key pair with this {@code Signer}.
Constructs a new instance of {@code Timestamp} with the specified {@code timestamp} and the given certificate path.
Returns the certificate path of this {@code Timestamp}.
Returns the date and time of this {@code Timestamp}.
Constructs a new instance of {@code UnrecoverableEntryException} with the given message.
Constructs a new instance of {@code UnrecoverableKeyException} with the given message.
Creates an BatchUpdateException object. The reason is set to null if cause == null otherwise to cause.toString(), and the cause Throwable object is set to the given cause Throwable object.
Creates an BatchUpdateException object. The Reason string is set to the null if cause == null otherwise to cause.toString(), and the cause Throwable object is set to the given cause Throwable object. SQLState is initialized to null while vendorCode is zero.
Creates an BatchUpdateException object. The cause Throwable object is set to the given cause Throwable object. SQLState is initialized to null while vendorCode is zero.
Creates an BatchUpdateException object. The cause Throwable object is set to the given cause Throwable object and the updateCounts array set to the int array parameter. SQLState is initialized to null while vendorCode is zero.
Creates an BatchUpdateException object. The cause Throwable object is set to the given cause Throwable object and the updateCounts array set to the int array parameter. VendorCode is set to the given vendorCode. SQLState is initialized to null while vendorCode is zero.
Creates a {@code BatchUpdateException} with the {@code updateCounts} set to the supplied value. All other fields are set to their default values.
Creates a {@code BatchUpdateException} with the {@code updateCounts} and {@code reason} set to the supplied values. All other fields are set to their default values.
Creates a {@code BatchUpdateException} with the {@code reason}, {@code SQLState} and {@code updateCounts} set to the supplied values. All other fields are set to their default values.
Creates a {@code BatchUpdateException} for the case where all relevant information is provided.
Gets the <i>update count</i> array giving status information for every command that was attempted in the batch. <p> If a batch update command fails and a {@code BatchUpdateException} is thrown, the JDBC driver may continue processing the remaining commands in the batch. If the driver does so, the array returned by {@code BatchUpdateException.getUpdateCounts} has an element for every command in the batch, not only those that executed successfully. In this case, the array element for any command which encountered a problem is set to {@code Statement.EXECUTE_FAILED}.
Creates the {@code DataTruncation} object. The reason is set to {@code "Data truncation"}, the {@code ErrorCode} is set to the {@code SQLException} default value, and the other fields are set to the values supplied as arguments.
Creates a DataTruncation. The Reason is set to "Data truncation", the ErrorCode is set to the SQLException default value and other fields are set to the values supplied on this method.
Gets the number of bytes of data that should have been read/written.
Gets the index of the column or of the parameter that was truncated.
Gets whether the value truncated was a parameter value or a column value.
Gets whether the value was truncated on a read operation or a write operation
Gets the number of bytes of data that was actually read or written.
Creates a date which corresponds to the day determined by the supplied milliseconds time value {@code theDate}.
Private method to format the time
Creates a {@code Date} from a string representation of a date in SQL format.
Private method which normalizes a Time value, removing all low significance digits corresponding to milliseconds, seconds, minutes and hours, so that the returned Time value corresponds to 00:00:00 GMT on a particular day.
Loads the set of JDBC drivers defined by the Property "jdbc.drivers" if it is defined.
Removes a driver from the {@code DriverManager}'s registered driver list. This will only succeed when the caller's class loader loaded the driver that is to be removed. If the driver was loaded by a different class loader, the removal of the driver fails silently. <p> If the removal succeeds, the {@code DriverManager} will not use this driver in the future when asked to get a {@code Connection}.
Attempts to establish a connection to the given database URL.
Tries to find a driver that can interpret the supplied URL.
Returns an {@code Enumeration} that contains all of the loaded JDBC drivers that the current caller can access.
Returns the login timeout when connecting to a database in seconds.
Retrieves the log writer.
Prints a message to the current JDBC log stream. This is either the {@code PrintWriter} or (deprecated) the {@code PrintStream}, if set.
Registers a given JDBC driver with the {@code DriverManager}. <p> A newly loaded JDBC driver class should register itself with the {@code DriverManager} by calling this method.
Sets the login timeout when connecting to a database in seconds.
Sets the {@code PrintWriter} that is used by all loaded drivers, and also the {@code DriverManager}.
Determines whether the supplied object was loaded by the given {@code ClassLoader}.
Creates a {@code DriverPropertyInfo} instance with the supplied name and value. Other class members take their default values.
Creates an SQLClientInfoException object. The Reason string is set to null, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLClientInfoException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0, and the Map<String,ClientInfoStatus> object is set to the failed properties.
Creates an SQLClientInfoException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null, the cause Throwable object is set to the given cause Throwable object, and the Map<String,ClientInfoStatus> object is set to the failed properties.
Creates an SQLClientInfoException object. The Reason string is set to reason, and the Map<String,ClientInfoStatus> object is set to the failed properties.
Creates an SQLClientInfoException object. The Reason string is set to reason, the cause Throwable object is set to the given cause Throwable object, and the Map<String,ClientInfoStatus> object is set to the failed properties.
Creates an SQLClientInfoException object. The Reason string is set to reason, the SQLState string is set to the sqlState, the Error Code is set to the vendorCode and the Map<String,ClientInfoStatus> object is set to the failed properties.
Creates an SQLClientInfoException object. The Reason string is set to reason, the SQLState string is set to the sqlState, the Error Code is set to the vendorCode the cause Throwable object is set to the given cause Throwable object, and the Map<String,ClientInfoStatus> object is set to the failed properties.
Creates an SQLClientInfoException object. The Reason string is set to reason, the SQLState string is set to the sqlState, and the Map<String,ClientInfoStatus> object is set to the failed properties.
Creates an SQLClientInfoException object. The Reason string is set to reason, the SQLState string is set to the sqlState, the Error Code is set to the vendorCode, and the Map<String,ClientInfoStatus> object is set to the failed properties.
returns that the client info properties which could not be set
Creates an SQLDataException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLDataException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLDataException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLDataException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLDataException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLDataException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLDataException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an {@code SQLException} object. The reason string is set to the given reason string, the {@code SQLState} string is set to {@code null} and the error code is set to 0.
Creates an {@code SQLException} object. The reason string is set to the given reason string, the {@code SQLState} string is set to the given {@code SQLState} string and the error code is set to 0.
Creates an {@code SQLException} object. The reason string is set to the given reason string, the {@code SQLState} string is set to the given {@code SQLState} string and the error code is set to the given error code value.
Creates an SQLException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Returns the integer error code for this {@code SQLException}.
Retrieves the {@code SQLException} chained to this {@code SQLException}, if any.
Retrieves the {@code SQLState} description string for this {@code SQLException} object.
Obsolete. Appends {@code ex} to the end of this chain.
Obsolete. {@link #getCause()} should be used instead of this iterator. Returns an iterator over the exceptions added with {@link #setNextException}.
Creates an SQLFeatureNotSupportedException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLFeatureNotSupportedException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLFeatureNotSupportedException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLFeatureNotSupportedException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLFeatureNotSupportedException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLFeatureNotSupportedException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLFeatureNotSupportedException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLIntegrityConstraintViolationException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLIntegrityConstraintViolationException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLIntegrityConstraintViolationException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLIntegrityConstraintViolationException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLIntegrityConstraintViolationException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLIntegrityConstraintViolationException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLIntegrityConstraintViolationException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLInvalidAuthorizationSpecException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLInvalidAuthorizationSpecException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLInvalidAuthorizationSpecException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLInvalidAuthorizationSpecException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLInvalidAuthorizationSpecException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLInvalidAuthorizationSpecException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLInvalidAuthorizationSpecException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLNonTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLNonTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLNonTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLNonTransientConnectionException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLNonTransientConnectionException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLNonTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLNonTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLNonTransientException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLNonTransientException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLNonTransientException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLNonTransientException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLNonTransientException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLNonTransientException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLNonTransientException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLRecoverableException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLRecoverableException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLRecoverableException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLRecoverableException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLRecoverableException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLRecoverableException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLRecoverableException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLSyntaxErrorException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLSyntaxErrorException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLSyntaxErrorException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLSyntaxErrorException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLSyntaxErrorException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLSyntaxErrorException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLSyntaxErrorException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTimeoutException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLTimeoutException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLTimeoutException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLTimeoutException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTimeoutException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTimeoutException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTimeoutException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransactionRollbackException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLTransactionRollbackException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLTransactionRollbackException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLTransactionRollbackException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransactionRollbackException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransactionRollbackException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransactionRollbackException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLTransientConnectionException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransientConnectionException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransientConnectionException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransientException object. The Reason string is set to the given reason string, the SQLState string is set to null and the Error Code is set to 0.
Creates an SQLTransientException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to 0.
Creates an SQLTransientException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the Error Code is set to the given error code value.
Creates an SQLTransientException object. The Reason string is set to the null if cause == null or cause.toString() if cause!=null,and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransientException object. The Reason string is set to the given and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransientException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string and the cause Throwable object is set to the given cause Throwable object.
Creates an SQLTransientException object. The Reason string is set to the given reason string, the SQLState string is set to the given SQLState string , the Error Code is set to the given error code value, and the cause Throwable object is set to the given cause Throwable object.
Creates an {@code SQLWarning} object. The reason string is set to the given reason string, the {@code SQLState} string is set to {@code null} and the error code is set to 0.
Creates an {@code SQLWarning} object. The reason string is set to the given reason string, the {@code SQLState} string is set to the given {@code SQLState} string and the error code is set to 0.
Creates an {@code SQLWarning} object. The reason string is set to the given reason string, the {@code SQLState} string is set to the given {@code SQLState} string and the error code is set to the given error code value.
Creates an SQLWarning object. The Reason string is set to null, the SQLState string is set to null and the Error Code is set to 0, cause is set to cause.
Creates an SQLWarning object. The Reason string is set to reason, the SQLState string is set to null and the Error Code is set to 0, cause is set to the given cause
Creates an SQLWarning object. The Reason string is set to reason, the SQLState string is set to given SQLState and the Error Code is set to 0, cause is set to the given cause
Creates an SQLWarning object. The Reason string is set to reason, the SQLState string is set to given SQLState and the Error Code is set to vendorCode, cause is set to the given cause
Gets the next {@code SQLWarning} chained to this {@code SQLWarning} object.
Chains a supplied {@code SQLWarning} to this {@code SQLWarning}.
Constructs a {@code Time} object using a supplied time specified in milliseconds.
Creates a {@code Time} object from a string holding a time represented in JDBC escape format: {@code hh:mm:ss}. <p> An exception occurs if the input string does not comply with this format.
Returns a {@code Timestamp} object corresponding to the time represented by a supplied time value.
Returns {@code true} if this timestamp object is later than the supplied timestamp, otherwise returns {@code false}.
Returns {@code true} if this {@code Timestamp} object is earlier than the supplied timestamp, otherwise returns {@code false}.
Compares this {@code Timestamp} object with a supplied {@code Timestamp} object.
Tests to see if this timestamp is equal to a supplied timestamp.
Gets this {@code Timestamp}'s nanosecond value
Sets the nanosecond value for this {@code Timestamp}.
Creates a {@code Timestamp} object with a time value equal to the time specified by a supplied String holding the time in JDBC timestamp escape format, which is {@code "yyyy-MM-dd HH:mm:ss.nnnnnnnnn}"
Default constructor, for use by subclasses.
Default constructor, for use by subclasses.
Default constructor, for use by subclasses.
Default constructor, for use by subclasses.
Default constructor, for use by subclasses.
Default constructor, for use by subclasses.
Constructs a new {@code Annotation}.
Returns the value of this annotation. The value may be {@code null}.
The constructor for an {@code Attribute} with the name passed.
Resolves a deserialized instance to the correct constant attribute.
Returns the begin index in the source string.
Returns the end index in the source String.
Returns the current index in the source String.
Returns a set of attributes present in the {@code AttributedString}. An empty set returned indicates that no attributes where defined.
Constructs an {@code AttributedString} from an {@code AttributedCharacterIterator}, which represents attributed text.
Constructs an {@code AttributedString} from a range of the text contained in the specified {@code AttributedCharacterIterator}, starting at {@code start} and ending at {@code end}. All attributes will be copied to this attributed string.
Constructs an {@code AttributedString} from a range of the text contained in the specified {@code AttributedCharacterIterator}, starting at {@code start}, ending at {@code end} and it will copy the attributes defined in the specified set. If the set is {@code null} then all attributes are copied.
Creates an {@code AttributedString} from the given text.
Creates an {@code AttributedString} from the given text and the attributes. The whole text has the given attributes applied.
Applies a given attribute to this string.
Applies a given attribute to the given range of this string.
Applies a given set of attributes to the given range of the string.
Returns an {@code AttributedCharacterIterator} that gives access to the complete content of this attributed string.
Returns an {@code AttributedCharacterIterator} that gives access to the complete content of this attributed string. Only attributes contained in {@code attributes} are available from this iterator if they are defined for this text.
Returns an {@code AttributedCharacterIterator} that gives access to the contents of this attributed string starting at index {@code start} up to index {@code end}. Only attributes contained in {@code attributes} are available from this iterator if they are defined for this text.
Creates a {@code Bidi} object from the {@code AttributedCharacterIterator} of a paragraph text. The RUN_DIRECTION attribute determines the base direction of the bidirectional text. If it is not specified explicitly, the algorithm uses DIRECTION_DEFAULT_LEFT_TO_RIGHT by default. The BIDI_EMBEDDING attribute specifies the level of embedding for each character. Values between -1 and -62 denote overrides at the level's absolute value, values from 1 to 62 indicate embeddings, and the 0 value indicates the level is calculated by the algorithm automatically. For the character with no BIDI_EMBEDDING attribute or with a improper attribute value, such as a {@code null} value, the algorithm treats its embedding level as 0. The NUMERIC_SHAPING attribute specifies the instance of NumericShaper used to convert European digits to other decimal digits before performing the bidi algorithm.
Creates a {@code Bidi} object.
create the native UBiDi struct, need to be closed with ubidi_close().
private constructor used by createLineBidi()
read info from the native UBiDi struct
Returns whether the base level is from left to right.
Creates a new {@code Bidi} object containing the information of one line from this object.
Returns the base level.
Returns the length of the text in the {@code Bidi} object.
Returns the level of a specified character.
Returns the number of runs in the bidirectional text.
Returns the level of the specified run.
Returns the limit offset of the specified run.
Returns the start offset of the specified run.
Indicates whether the text is from left to right, that is, both the base direction and the text direction is from left to right.
Indicates whether the text direction is mixed.
Indicates whether the text is from right to left, that is, both the base direction and the text direction is from right to left.
Reorders a range of objects according to their specified levels. This is a convenience function that does not use a {@code Bidi} object. The range of objects at {@code index} from {@code objectStart} to {@code objectStart + count} will be reordered according to the range of levels at {@code index} from {@code levelStart} to {@code levelStart + count}.
Indicates whether a range of characters of a text requires a {@code Bidi} object to display properly.
wrapping constructor
Returns an array of locales for which custom {@code BreakIterator} instances are available. <p>Note that Android does not support user-supplied locale service providers.
Returns a new instance of {@code BreakIterator} to iterate over characters using the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a new instance of {@code BreakIterator} to iterate over characters using the given locale.
Returns a new instance of {{@code BreakIterator} to iterate over line breaks using the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a new instance of {@code BreakIterator} to iterate over line breaks using the given locale.
Returns a new instance of {@code BreakIterator} to iterate over sentence-breaks using the default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a new instance of {@code BreakIterator} to iterate over sentence-breaks using the given locale.
Returns a new instance of {@code BreakIterator} to iterate over word-breaks using the default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a new instance of {@code BreakIterator} to iterate over word-breaks using the given locale.
Indicates whether the given offset is a boundary position. If this method returns true, the current iteration position is set to the given position; if the function returns false, the current iteration position is set as though {@link #following(int)} had been called.
Returns the position of last boundary preceding the given offset, and sets the current position to the returned value, or {@code DONE} if the given offset specifies the starting position.
Sets the new text string to be analyzed, the current position will be reset to the beginning of this new string, and the old string will be lost.
Constructs a new {@code ChoiceFormat} with the specified double values and associated strings. When calling {@link #format(double, StringBuffer, FieldPosition) format} with a double value {@code d}, then the element {@code i} in {@code formats} is selected where {@code i} fulfills {@code limits[i] <= d < limits[i+1]}. <p> The length of the {@code limits} and {@code formats} arrays must be the same.
Constructs a new {@code ChoiceFormat} with the strings and limits parsed from the specified pattern.
Parses the pattern to determine new strings and ranges for this {@code ChoiceFormat}.
Returns the strings associated with the ranges of this {@code ChoiceFormat}.
Returns the limits of this {@code ChoiceFormat}.
Returns the double value which is closest to the specified double but larger.
Returns the double value which is closest to the specified double but either larger or smaller as specified.
Returns the double value which is closest to the specified double but smaller.
Sets the double values and associated strings of this ChoiceFormat. When calling {@link #format(double, StringBuffer, FieldPosition) format} with a double value {@code d}, then the element {@code i} in {@code formats} is selected where {@code i} fulfills {@code limits[i] <= d < limits[i+1]}. <p> The length of the {@code limits} and {@code formats} arrays must be the same.
Returns the pattern of this {@code ChoiceFormat} which specifies the ranges and their associated strings.
Obtains the maximum length of any expansion sequence that ends with the specified collation element. Returns {@code 1} if there is no expansion with this collation element as the last element.
Obtains the character offset in the source string corresponding to the next collation element. This value could be any of: <ul> <li>The index of the first character in the source string that matches the value of the next collation element. This means that if {@code setOffset(offset)} sets the index in the middle of a contraction, {@code getOffset()} returns the index of the first character in the contraction, which may not be equal to the original offset that was set. Hence calling {@code getOffset()} immediately after {@code setOffset(offset)} does not guarantee that the original offset set will be returned.</li> <li>If normalization is on, the index of the immediate subsequent character, or composite character with the first character, having a combining class of 0.</li> <li>The length of the source string, if iteration has reached the end. </li> </ul>
Obtains the next collation element in the source string.
Obtains the previous collation element in the source string.
Obtains the primary order of the specified collation element, i.e. the first 16 bits. This value is unsigned.
Repositions the cursor to point at the first element of the current string. The next call to {@link #next()} or {@link #previous()} will return the first and last collation element in the string, respectively. <p> If the {@code RuleBasedCollator} used by this iterator has had its attributes changed, calling {@code reset()} reinitializes the iterator to use the new attributes.
Obtains the secondary order of the specified collation element, i.e. the 16th to 23th bits, inclusive. This value is unsigned.
Points the iterator at the collation element associated with the character in the source string which is found at the supplied offset. After this call completes, an invocation of the {@link #next()} method will return this collation element. <p> If {@code newOffset} corresponds to a character which is part of a sequence that maps to a single collation element then the iterator is adjusted to the start of that sequence. As a result of this, any subsequent call made to {@code getOffset()} may not return the same value set by this method. <p> If the decomposition mode is on, and offset is in the middle of a decomposable range of source text, the iterator may not return a correct result for the next forwards or backwards iteration. The user must ensure that the offset is not in the middle of a decomposable range.
Sets a new source string iterator for iteration, and resets the offset to the beginning of the text.
Sets a new source string for iteration, and resets the offset to the beginning of the text.
Obtains the tertiary order of the specified collation element, i.e. the last 8 bits. This value is unsigned.
Returns the string from which this collation key was created.
Constructs a new {@code Collator} instance.
Compares two objects to determine their relative order. The objects must be strings.
Compares two strings using the collation rules to determine if they are equal.
Returns an array of locales for which custom {@code Collator} instances are available. <p>Note that Android does not support user-supplied locale service providers.
Returns the decomposition rule for this collator.
Returns a {@code Collator} instance which is appropriate for the user's default {@code Locale}. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a {@code Collator} instance which is appropriate for {@code locale}.
Returns the strength value for this collator.
Sets the decomposition rule for this collator.
Sets the strength value for this collator.
Formats the specified date using the rules of this date format.
Returns an array of locales for which custom {@code DateFormat} instances are available. <p>Note that Android does not support user-supplied locale service providers.
Returns the calendar used by this {@code DateFormat}.
Returns a {@code DateFormat} instance for formatting and parsing dates in the DEFAULT style for the default locale.
Returns a {@code DateFormat} instance for formatting and parsing dates in the specified style for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a {@code DateFormat} instance for formatting and parsing dates in the specified style for the specified locale.
Returns a {@code DateFormat} instance for formatting and parsing dates and time values in the DEFAULT style for the default locale.
Returns a {@code DateFormat} instance for formatting and parsing of both dates and time values in the manner appropriate for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a {@code DateFormat} instance for formatting and parsing dates and time values in the specified styles for the specified locale.
Returns a {@code DateFormat} instance for formatting and parsing dates and times in the SHORT style for the default locale.
Returns the {@code NumberFormat} used by this {@code DateFormat}.
Returns a {@code DateFormat} instance for formatting and parsing time values in the DEFAULT style for the default locale.
Returns a {@code DateFormat} instance for formatting and parsing time values in the specified style for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a {@code DateFormat} instance for formatting and parsing time values in the specified style for the specified locale.
Returns the time zone of this date format's calendar.
Indicates whether the calendar used by this date format is lenient.
Parses a date from the specified string using the rules of this date format.
Sets the calendar used by this date format.
Specifies whether or not date/time parsing shall be lenient. With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object's format. With strict parsing, inputs must match this object's format.
Sets the {@code NumberFormat} used by this date format.
Sets the time zone of the calendar used by this date format.
Constructs a new instance of {@code DateFormat.Field} with the given fieldName and calendar field.
Returns the Calendar field that this field represents.
Returns the {@code DateFormat.Field} instance for the given calendar field.
Gets zone strings, initializing them if necessary. Does not create a defensive copy, so make sure you do so before exposing the returned arrays to clients.
Constructs a new {@code DateFormatSymbols} instance containing the symbols for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a new {@code DateFormatSymbols} instance containing the symbols for the specified locale.
Returns a new {@code DateFormatSymbols} instance for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a new {@code DateFormatSymbols} for the given locale.
Returns an array of locales for which custom {@code DateFormatSymbols} instances are available. <p>Note that Android does not support user-supplied locale service providers.
Returns the array of strings which represent AM and PM. Use the {@link java.util.Calendar} constants {@code Calendar.AM} and {@code Calendar.PM} as indices for the array.
Returns the array of strings which represent BC and AD. Use the {@link java.util.Calendar} constants {@code GregorianCalendar.BC} and {@code GregorianCalendar.AD} as indices for the array.
Returns the pattern characters used by {@link SimpleDateFormat} to specify date and time fields.
Returns the array of strings containing the full names of the months. Use the {@link java.util.Calendar} constants {@code Calendar.JANUARY} etc. as indices for the array.
Returns the array of strings containing the abbreviated names of the months. Use the {@link java.util.Calendar} constants {@code Calendar.JANUARY} etc. as indices for the array.
Returns the array of strings containing the abbreviated names of the days of the week. Use the {@link java.util.Calendar} constants {@code Calendar.SUNDAY} etc. as indices for the array.
Returns the array of strings containing the full names of the days of the week. Use the {@link java.util.Calendar} constants {@code Calendar.SUNDAY} etc. as indices for the array.
Returns the two-dimensional array of strings containing localized names for time zones. Each row is an array of five strings: <ul> <li>The time zone ID, for example "America/Los_Angeles". <li>The long display name, for example "Pacific Standard Time". <li>The short display name, for example "PST". <li>The long display name for DST, for example "Pacific Daylight Time". <li>The short display name for DST, for example "PDT". This is the </ul>
Sets the array of strings which represent AM and PM. Use the {@link java.util.Calendar} constants {@code Calendar.AM} and {@code Calendar.PM} as indices for the array.
Sets the array of Strings which represent BC and AD. Use the {@link java.util.Calendar} constants {@code GregorianCalendar.BC} and {@code GregorianCalendar.AD} as indices for the array.
Sets the pattern characters used by {@link SimpleDateFormat} to specify date and time fields.
Sets the array of strings containing the full names of the months. Use the {@link java.util.Calendar} constants {@code Calendar.JANUARY} etc. as indices for the array.
Sets the array of strings containing the abbreviated names of the months. Use the {@link java.util.Calendar} constants {@code Calendar.JANUARY} etc. as indices for the array.
Sets the array of strings containing the abbreviated names of the days of the week. Use the {@link java.util.Calendar} constants {@code Calendar.SUNDAY} etc. as indices for the array.
Sets the array of strings containing the full names of the days of the week. Use the {@link java.util.Calendar} constants {@code Calendar.SUNDAY} etc. as indices for the array.
Sets the two-dimensional array of strings containing localized names for time zones. See {@link #getZoneStrings} for details.
Constructs a new {@code DecimalFormat} for formatting and parsing numbers for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a new {@code DecimalFormat} using the specified non-localized pattern and the {@code DecimalFormatSymbols} for the user's default Locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a new {@code DecimalFormat} using the specified non-localized pattern and {@code DecimalFormatSymbols}.
Used by NumberFormat.getInstance because cloning DecimalFormatSymbols is slow.
Changes the pattern of this decimal format to the specified pattern which uses localized pattern characters.
Changes the pattern of this decimal format to the specified pattern which uses non-localized pattern characters.
Returns the {@code DecimalFormatSymbols} used by this decimal format.
Returns the number of digits grouped together by the grouping separator. This only allows to get the primary grouping size. There is no API to get the secondary grouping size.
Returns the multiplier which is applied to the number before formatting or after parsing.
Returns the prefix which is formatted or parsed before a negative number.
Returns the suffix which is formatted or parsed after a negative number.
Returns the prefix which is formatted or parsed before a positive number.
Returns the suffix which is formatted or parsed after a positive number.
Indicates whether the decimal separator is shown when there are no fractional digits.
This value indicates whether the return object of the parse operation is of type {@code BigDecimal}. This value defaults to {@code false}.
Sets the {@code DecimalFormatSymbols} used by this decimal format.
Sets whether the decimal separator is shown when there are no fractional digits.
Sets the number of digits grouped together by the grouping separator. This only allows to set the primary grouping size; the secondary grouping size can only be set with a pattern.
Sets the multiplier which is applied to the number before formatting or after parsing.
Sets the prefix which is formatted or parsed before a negative number.
Sets the suffix which is formatted or parsed after a negative number.
Sets the prefix which is formatted or parsed before a positive number.
Sets the suffix which is formatted or parsed after a positive number.
Sets the behavior of the parse method. If set to {@code true} then all the returned objects will be of type {@code BigDecimal}.
Returns the pattern of this decimal format using localized pattern characters.
Returns the pattern of this decimal format using non-localized pattern characters.
Writes serialized fields following serialized forms specified by Java specification.
Reads serialized fields following serialized forms specified by Java specification.
Returns the {@code RoundingMode} used by this {@code NumberFormat}.
Sets the {@code RoundingMode} used by this {@code NumberFormat}.
Constructs a new {@code DecimalFormatSymbols} containing the symbols for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>". Best practice is to create a {@code DecimalFormat} and then to get the {@code DecimalFormatSymbols} from that object by calling {@link DecimalFormat#getDecimalFormatSymbols()}.
Constructs a new DecimalFormatSymbols containing the symbols for the specified Locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>". Best practice is to create a {@code DecimalFormat} and then to get the {@code DecimalFormatSymbols} from that object by calling {@link DecimalFormat#getDecimalFormatSymbols()}.
Returns a new {@code DecimalFormatSymbols} instance for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a new {@code DecimalFormatSymbols} for the given locale.
Returns an array of locales for which custom {@code DecimalFormatSymbols} instances are available. <p>Note that Android does not support user-supplied locale service providers.
Returns the currency. <p> {@code null} is returned if {@code setInternationalCurrencySymbol()} has been previously called with a value that is not a valid ISO 4217 currency code. <p>
Returns the international currency symbol.
Returns the currency symbol.
Returns the character which represents the decimal point in a number.
Returns the character which represents a single digit in a format pattern.
Returns the character used as the thousands separator in a number.
Returns the string which represents infinity.
Returns the minus sign character.
Returns the character which represents the decimal point in a monetary value.
Returns the string which represents NaN.
Returns the character which separates the positive and negative patterns in a format pattern.
Returns the percent character.
Returns the per mill sign character.
Returns the character which represents zero.
Returns the string used to separate mantissa and exponent. Typically "E", as in "1.2E3".
Sets the currency. <p> The international currency symbol and the currency symbol are updated, but the min and max number of fraction digits stays the same. <p>
Sets the international currency symbol. <p> The currency and currency symbol are also updated if {@code value} is a valid ISO4217 currency code. <p> The min and max number of fraction digits stay the same.
Sets the currency symbol.
Sets the character which represents the decimal point in a number.
Sets the character which represents a single digit in a format pattern.
Sets the character used as the thousands separator in a number.
Sets the string which represents infinity.
Sets the minus sign character.
Sets the character which represents the decimal point in a monetary value.
Sets the string which represents NaN.
Sets the character which separates the positive and negative patterns in a format pattern.
Sets the percent character.
Sets the per mill sign character.
Sets the character which represents zero.
Sets the string used to separate mantissa and exponent. Typically "E", as in "1.2E3".
Constructs a new {@code FieldPosition} for the specified field.
Constructs a new {@code FieldPosition} for the specified {@code Field} attribute.
Constructs a new {@code FieldPosition} for the specified {@code Field} attribute and field id.
Returns the index of the beginning of the field.
Returns the index one past the end of the field.
Returns the field which is being identified.
Returns the attribute which is being identified.
Sets the index of the beginning of the field.
Sets the index of the end of the field.
Formats the specified object using the rules of this format.
Formats the specified object using the rules of this format and returns an {@code AttributedCharacterIterator} with the formatted string and no attributes. <p> Subclasses should return an {@code AttributedCharacterIterator} with the appropriate attributes.
Parses the specified string using the rules of this format.
Constructs a new instance of {@code Field} with the given field name.
Constructs a new {@code MessageFormat} using the specified pattern and {@code locale}.
Constructs a new {@code MessageFormat} using the specified pattern and the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Changes this {@code MessageFormat} to use the specified pattern.
Converts the specified objects into a string which it appends to the specified string buffer using the pattern of this message format. <p> If the {@code field} member of the specified {@code FieldPosition} is {@code MessageFormat.Field.ARGUMENT}, then the begin and end index of this field position is set to the location of the first occurrence of a message format argument. Otherwise, the {@code FieldPosition} is ignored.
Adds a new FieldContainer with MessageFormat.Field.ARGUMENT field, argIndex, begin and end index to the fields list, or sets the position's begin and end index if it has MessageFormat.Field.ARGUMENT as its field attribute.
If fields list is not null, find and add the fields of this format to the fields list by iterating through its AttributedCharacterIterator
Formats the supplied objects using the specified message format pattern.
Returns the {@code Format} instances used by this message format.
Returns the formats used for each argument index. If an argument is placed more than once in the pattern string, then this returns the format of the last one.
Sets the format used for the argument at index {@code argIndex} to {@code format}.
Sets the formats used for each argument. The {@code formats} array elements should be in the order of the argument indices.
Returns the locale used when creating formats.
Parses the message arguments from the specified string using the rules of this message format.
Parses the message argument from the specified string starting at the index specified by {@code position}. If the string is successfully parsed then the index of the {@code ParsePosition} is updated to the index following the parsed text. On error, the index is unchanged and the error index of {@code ParsePosition} is set to the index where the error occurred.
Sets the specified format used by this message format.
Sets the formats used by this message format.
Sets the locale to use when creating {@code Format} instances. Changing the locale may change the behavior of {@code applyPattern}, {@code toPattern}, {@code format} and {@code formatToCharacterIterator}.
Returns the pattern of this message format.
Constructs a new instance of {@code MessageFormat.Field} with the given field name.
Check whether the given character sequence <code>src</code> is normalized according to the normalization method <code>form</code>.
Normalize the character sequence <code>src</code> according to the normalization method <code>form</code>.
Formats the specified double using the rules of this number format.
Formats the specified long using the rules of this number format.
Returns an array of locales for which custom {@code NumberFormat} instances are available. <p>Note that Android does not support user-supplied locale service providers.
Returns the currency used by this number format. <p> This implementation throws {@code UnsupportedOperationException}, concrete subclasses should override this method if they support currency formatting. <p>
Returns a {@code NumberFormat} for formatting and parsing currency values for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a {@code NumberFormat} for formatting and parsing currency values for the specified locale.
Returns a {@code NumberFormat} for formatting and parsing integers for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a {@code NumberFormat} for formatting and parsing integers for the specified locale.
Returns a {@code NumberFormat} for formatting and parsing numbers for the default locale.
Returns a {@code NumberFormat} for formatting and parsing numbers for the specified locale.
Returns the maximum number of fraction digits that are printed when formatting. If the maximum is less than the number of fraction digits, the least significant digits are truncated.
Returns the maximum number of integer digits that are printed when formatting. If the maximum is less than the number of integer digits, the most significant digits are truncated.
Returns the minimum number of fraction digits that are printed when formatting.
Returns the minimum number of integer digits that are printed when formatting.
Returns a {@code NumberFormat} for formatting and parsing numbers for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns a {@code NumberFormat} for formatting and parsing numbers for the specified locale.
Returns a {@code NumberFormat} for formatting and parsing percentage values for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>". <p>The {@code NumberFormat} returned by this method should only be used to format floating-point numbers typically between 0 and 1 (with 1 being 100%). A value such as 0.53 will be treated as 53%, but 53.0 (or the integer 53) will be treated as 5,300%, which is rarely what you intended.
Returns a {@code NumberFormat} for formatting and parsing percentage values for the given {@code locale}. <p>The {@code NumberFormat} returned by this method should only be used to format floating-point numbers typically between 0 and 1 (with 1 being 100%). A value such as 0.53 will be treated as 53%, but 53.0 (or the integer 53) will be treated as 5,300%, which is rarely what you intended.
Indicates whether this number format formats and parses numbers using a grouping separator.
Indicates whether this number format only parses integer numbers. Parsing stops if a decimal separator is encountered.
Parses a {@code Number} from the specified string using the rules of this number format.
Sets the currency used by this number format when formatting currency values. The min and max fraction digits remain the same. <p> This implementation throws {@code UnsupportedOperationException}, concrete subclasses should override this method if they support currency formatting.
Sets whether this number format formats and parses numbers using a grouping separator.
Sets the maximum number of fraction digits that are printed when formatting. If the maximum is less than the number of fraction digits, the least significant digits are truncated.
Sets the new maximum count of integer digits that are printed when formatting. If the maximum is less than the number of integer digits, the most significant digits are truncated.
Sets the minimum number of fraction digits that are printed when formatting.
Sets the minimum number of integer digits that are printed when formatting.
Specifies if this number format should parse numbers only as integers or else as any kind of number. If this method is called with a {@code true} value then subsequent parsing attempts will stop if a decimal separator is encountered.
Constructs a new instance of {@code NumberFormat.Field} with the given field name.
Returns the {@code RoundingMode} used by this {@code NumberFormat}. The default implementation in {@code NumberFormat} throws {@code UnsupportedOperationException}. Subclasses for which a rounding mode is meaningful are expected to override this method.
Sets the {@code RoundingMode} used by this {@code NumberFormat}. The default implementation in {@code NumberFormat} throws {@code UnsupportedOperationException}. Subclasses for which a rounding mode is meaningful are expected to override this method.
Constructs a new instance of this class with its stack trace, detail message and the location of the error filled in.
Returns the index at which this parse exception occurred.
Constructs a new {@code ParsePosition} with the specified index.
Returns the index at which the parse could not continue.
Returns the current parse position.
Sets the index at which the parse could not continue.
Sets the current parse position.
check the offset, throw exception if it is invalid
Constructs a new instance of {@code RuleBasedCollator} using the specified {@code rules}. The {@code rules} are usually either hand-written based on the {@link RuleBasedCollator class description} or the result of a former {@link #getRules()} call. <p> Note that the {@code rules} are actually interpreted as a delta to the standard Unicode Collation Algorithm (UCA). This differs slightly from other implementations which work with full {@code rules} specifications and may result in different behavior.
Obtains a {@code CollationElementIterator} for the given {@code CharacterIterator}. The source iterator's integrity will be preserved since a new copy will be created for use.
Obtains a {@code CollationElementIterator} for the given string.
Returns the collation rules of this collator. These {@code rules} can be fed into the {@code RuleBasedCollator(String)} constructor. <p> Note that the {@code rules} are actually interpreted as a delta to the standard Unicode Collation Algorithm (UCA). Hence, an empty {@code rules} string results in the default UCA rules being applied. This differs slightly from other implementations which work with full {@code rules} specifications and may result in different behavior.
Constructs a new {@code SimpleDateFormat} for formatting and parsing dates and times in the {@code SHORT} style for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a new {@code SimpleDateFormat} using the specified non-localized pattern and the {@code DateFormatSymbols} and {@code Calendar} for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Validates the format character.
Validates the pattern.
Constructs a new {@code SimpleDateFormat} using the specified non-localized pattern and {@code DateFormatSymbols} and the {@code Calendar} for the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a new {@code SimpleDateFormat} using the specified non-localized pattern and the {@code DateFormatSymbols} and {@code Calendar} for the specified locale.
Changes the pattern of this simple date format to the specified pattern which uses localized pattern characters.
Changes the pattern of this simple date format to the specified pattern which uses non-localized pattern characters.
Formats the date. <p> If the FieldPosition {@code field} is not null, and the field specified by this FieldPosition is formatted, set the begin and end index of the formatted field in the FieldPosition. <p> If the list {@code fields} is not null, find fields of this date, set FieldPositions with these fields, and add them to the fields vector.
Append a representation of the time zone of 'calendar' to 'buffer'. for example. false implies that we should use RFC 822 format ("-0800") instead. This corresponds to 'z' versus 'Z' in the format string.
Returns the date which is the start of the one hundred year period for two-digit year values. See {@link #set2DigitYearStart} for details.
Returns the {@code DateFormatSymbols} used by this simple date format.
Sets the date which is the start of the one hundred year period for two-digit year values. <p>When parsing a date string using the abbreviated year pattern {@code yy}, {@code SimpleDateFormat} must interpret the abbreviated year relative to some century. It does this by adjusting dates to be within 80 years before and 20 years after the time the {@code SimpleDateFormat} instance was created. For example, using a pattern of {@code MM/dd/yy}, an instance created on Jan 1, 1997 would interpret the string {@code "01/11/12"} as Jan 11, 2012 but interpret the string {@code "05/04/64"} as May 4, 1964. During parsing, only strings consisting of exactly two digits, as defined by {@link java.lang.Character#isDigit(char)}, will be parsed into the default century. Any other numeric string, such as a one digit string, a three or more digit string, or a two digit string that isn't all digits (for example, {@code "-1"}), is interpreted literally. So using the same pattern, both {@code "01/02/3"} and {@code "01/02/003"} are parsed as Jan 2, 3 AD. Similarly, {@code "01/02/-3"} is parsed as Jan 2, 4 BC. <p>If the year pattern does not have exactly two 'y' characters, the year is interpreted literally, regardless of the number of digits. So using the pattern {@code MM/dd/yyyy}, {@code "01/11/12"} is parsed as Jan 11, 12 A.D.
Sets the {@code DateFormatSymbols} used by this simple date format.
Returns the pattern of this simple date format using localized pattern characters.
Returns the pattern of this simple date format using non-localized pattern characters.
Constructs a new {@code StringCharacterIterator} on the specified string. The begin and current indices are set to the beginning of the string, the end index is set to the length of the string.
Constructs a new {@code StringCharacterIterator} on the specified string with the current index set to the specified value. The begin index is set to the beginning of the string, the end index is set to the length of the string.
Constructs a new {@code StringCharacterIterator} on the specified string with the begin, end and current index set to the specified values.
Returns the character at the current index in the source string.
Sets the current position to the begin index and returns the character at the new position in the source string.
Returns the end index in the source string.
Returns the current index in the source string.
Sets the current position to the end index - 1 and returns the character at the new position.
Increments the current index and returns the character at the new index.
Decrements the current index and returns the character at the new index.
Sets the current index in the source string.
Sets the source string to iterate over. The begin and end positions are set to the start and end of this string.
Creates a new {@code AtomicBoolean} with the given initial value.
Returns the current value.
Atomically sets the value to the given updated value if the current value {@code ==} the expected value. the actual value was not equal to the expected value.
Atomically sets the value to the given updated value if the current value {@code ==} the expected value. <p>May <a href="package-summary.html#Spurious">fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}.
Unconditionally sets to the given value.
Atomically sets to the given value and returns the previous value.
Creates a new AtomicInteger with the given initial value.
Atomically increments by one the current value.
Atomically decrements by one the current value.
Atomically increments by one the current value.
Atomically decrements by one the current value.
Creates a new AtomicIntegerArray of the given length, with all elements initially zero.
Creates a new AtomicIntegerArray with the same length as, and all elements copied from, the given array.
Atomically sets the element at position {@code i} to the given value and returns the old value.
Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value. the actual value was not equal to the expected value.
Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value. <p>May <a href="package-summary.html#Spurious">fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}.
Atomically increments by one the element at index {@code i}.
Atomically decrements by one the element at index {@code i}.
Atomically adds the given value to the element at index {@code i}.
Atomically increments by one the element at index {@code i}.
Atomically decrements by one the element at index {@code i}.
Atomically adds the given value to the element at index {@code i}.
Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match. volatile integer type exception if the class does not hold field or is the wrong type
Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
Atomically increments by one the current value of the field of the given object managed by this updater.
Atomically decrements by one the current value of the field of the given object managed by this updater.
Atomically adds the given value to the current value of the field of the given object managed by this updater.
Atomically increments by one the current value of the field of the given object managed by this updater.
Atomically decrements by one the current value of the field of the given object managed by this updater.
Atomically adds the given value to the current value of the field of the given object managed by this updater.
Creates a new AtomicLong with the given initial value.
Creates a new AtomicLongArray of the given length, with all elements initially zero.
Creates a new AtomicLongArray with the same length as, and all elements copied from, the given array.
Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match. volatile long type. exception if the class does not hold field or is the wrong type.
Creates a new {@code AtomicMarkableReference} with the given initial values.
Returns the current value of the reference.
Returns the current value of the mark.
Returns the current values of both the reference and the mark. Typical usage is {@code boolean[1] holder; ref = v.get(holder); }. {@code markholder[0]} will hold the value of the mark.
Atomically sets the value of both the reference and mark to the given update values if the current reference is {@code ==} to the expected reference and the current mark is equal to the expected mark. <p>May <a href="package-summary.html#Spurious">fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}.
Atomically sets the value of both the reference and mark to the given update values if the current reference is {@code ==} to the expected reference and the current mark is equal to the expected mark.
Unconditionally sets the value of both the reference and mark.
Atomically sets the value of the mark to the given update value if the current reference is {@code ==} to the expected reference.  Any given invocation of this operation may fail (return {@code false}) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed.
Creates a new AtomicReference with the given initial value.
Creates a new AtomicReferenceArray of the given length, with all elements initially zero.
Creates a new AtomicReferenceArray with the same length as, and all elements copied from, the given array.
Creates and returns an updater for objects with the given field. The Class arguments are needed to check that reflective types and generic types match. exception if the class does not hold field or is the wrong type.
Internal type checks within all update methods contain internal inlined optimizations checking for the common cases where the class is final (in which case a simple getClass comparison suffices) or is of type Object (in which case no check is needed because all objects are instances of Object). The Object case is handled simply by setting vclass to null in constructor.  The targetCheck and updateCheck methods are invoked when these faster screenings fail.
Creates a new {@code AtomicStampedReference} with the given initial values.
Returns the current value of the stamp.
Returns the current values of both the reference and the stamp. Typical usage is {@code int[1] holder; ref = v.get(holder); }. {@code stampholder[0]} will hold the value of the stamp.
Atomically sets the value of both the reference and stamp to the given update values if the current reference is {@code ==} to the expected reference and the current stamp is equal to the expected stamp. <p>May <a href="package-summary.html#Spurious">fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}.
Atomically sets the value of both the reference and stamp to the given update values if the current reference is {@code ==} to the expected reference and the current stamp is equal to the expected stamp.
Unconditionally sets the value of both the reference and stamp.
Atomically sets the value of the stamp to the given update value if the current reference is {@code ==} to the expected reference.  Any given invocation of this operation may fail (return {@code false}) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed.
This class is uninstantiable.
Sets the thread that currently owns exclusive access. A <tt>null</tt> argument indicates that no thread owns access. This method does not otherwise impose any synchronization or <tt>volatile</tt> field accesses.
Returns the thread last set by <tt>setExclusiveOwnerThread</tt>, or <tt>null</tt> if never set.  This method does not otherwise impose any synchronization or <tt>volatile</tt> field accesses.
Returns true if node is waiting in shared mode
Returns the current value of synchronization state. This operation has memory semantics of a <tt>volatile</tt> read.
Sets the value of synchronization state. This operation has memory semantics of a <tt>volatile</tt> write.
Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a <tt>volatile</tt> read and write.
Creates and enqueues node for current thread and given mode.
Release action for shared mode -- signal successor and ensure propagation. (Note: For exclusive mode, release just amounts to calling unparkSuccessor of head if it needs signal.)
Checks and updates status for a node that failed to acquire. Returns true if thread should block. This is the main signal control in all acquire loops.  Requires that pred == node.prev
Convenience method to interrupt current thread.
Acquires in exclusive uninterruptible mode for thread already in queue. Used by condition wait methods as well as acquire.
Attempts to acquire in exclusive mode. This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it. <p>This method is always invoked by the thread performing acquire.  If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. This can be used to implement method {@link Lock#tryLock()}. <p>The default implementation throws {@link UnsupportedOperationException}.
Attempts to set the state to reflect a release in exclusive mode. <p>This method is always invoked by the thread performing release. <p>The default implementation throws {@link UnsupportedOperationException}.
Attempts to acquire in shared mode. This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it. <p>This method is always invoked by the thread performing acquire.  If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. <p>The default implementation throws {@link UnsupportedOperationException}.
Attempts to set the state to reflect a release in shared mode. <p>This method is always invoked by the thread performing release. <p>The default implementation throws {@link UnsupportedOperationException}.
Returns {@code true} if synchronization is held exclusively with respect to the current (calling) thread.  This method is invoked upon each call to a non-waiting {@link ConditionObject} method. (Waiting methods instead invoke {@link #release}.) <p>The default implementation throws {@link UnsupportedOperationException}. This method is invoked internally only within {@link ConditionObject} methods, so need not be defined if conditions are not used.
Acquires in exclusive mode, ignoring interrupts.  Implemented by invoking at least once {@link #tryAcquire}, returning on success.  Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success.  This method can be used to implement method {@link Lock#lock}.
Acquires in exclusive mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquire}, returning on success.  Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success or the thread is interrupted.  This method can be used to implement method {@link Lock#lockInterruptibly}.
Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses.  Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquire}, returning on success.  Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success or the thread is interrupted or the timeout elapses.  This method can be used to implement method {@link Lock#tryLock(long, TimeUnit)}.
Releases in exclusive mode.  Implemented by unblocking one or more threads if {@link #tryRelease} returns true. This method can be used to implement method {@link Lock#unlock}.
Acquires in shared mode, ignoring interrupts.  Implemented by first invoking at least once {@link #tryAcquireShared}, returning on success.  Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquireShared} until success.
Acquires in shared mode, aborting if interrupted.  Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquireShared}, returning on success.  Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquireShared} until success or the thread is interrupted. This value is conveyed to {@link #tryAcquireShared} but is otherwise uninterpreted and can represent anything you like.
Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses.  Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquireShared}, returning on success.  Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquireShared} until success or the thread is interrupted or the timeout elapses.
Releases in shared mode.  Implemented by unblocking one or more threads if {@link #tryReleaseShared} returns true.
Queries whether any threads are waiting to acquire. Note that because cancellations due to interrupts and timeouts may occur at any time, a {@code true} return does not guarantee that any other thread will ever acquire. <p>In this implementation, this operation returns in constant time.
Queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked. <p>In this implementation, this operation returns in constant time.
Returns the first (longest-waiting) thread in the queue, or {@code null} if no threads are currently queued. <p>In this implementation, this operation normally returns in constant time, but may iterate upon contention if other threads are concurrently modifying the queue.
Version of getFirstQueuedThread called when fastpath fails
Returns true if the given thread is currently queued. <p>This implementation traverses the queue to determine presence of the given thread.
Returns {@code true} if the apparent first queued thread, if one exists, is waiting in exclusive mode.  If this method returns {@code true}, and the current thread is attempting to acquire in shared mode (that is, this method is invoked from {@link #tryAcquireShared}) then it is guaranteed that the current thread is not the first queued thread.  Used only as a heuristic in ReentrantReadWriteLock.
Queries whether any threads have been waiting to acquire longer than the current thread. <p>An invocation of this method is equivalent to (but may be more efficient than): <pre> {@code getFirstQueuedThread() != Thread.currentThread() && hasQueuedThreads()}</pre> <p>Note that because cancellations due to interrupts and timeouts may occur at any time, a {@code true} return does not guarantee that some other thread will acquire before the current thread.  Likewise, it is possible for another thread to win a race to enqueue after this method has returned {@code false}, due to the queue being empty. <p>This method is designed to be used by a fair synchronizer to avoid <a href="AbstractQueuedSynchronizer#barging">barging</a>. Such a synchronizer's {@link #tryAcquire} method should return {@code false}, and its {@link #tryAcquireShared} method should return a negative value, if this method returns {@code true} (unless this is a reentrant acquire).  For example, the {@code tryAcquire} method for a fair, reentrant, exclusive mode synchronizer might look like this: <pre> {@code protected boolean tryAcquire(int arg) { if (isHeldExclusively()) { } else if (hasQueuedPredecessors()) { } else { } }}</pre>
Returns an estimate of the number of threads waiting to acquire.  The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures.  This method is designed for use in monitoring system state, not for synchronization control.
Returns a collection containing threads that may be waiting to acquire.  Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate.  The elements of the returned collection are in no particular order.  This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.
Returns a collection containing threads that may be waiting to acquire in exclusive mode. This has the same properties as {@link #getQueuedThreads} except that it only returns those threads waiting due to an exclusive acquire.
Returns a collection containing threads that may be waiting to acquire in shared mode. This has the same properties as {@link #getQueuedThreads} except that it only returns those threads waiting due to a shared acquire.
Transfers a node from a condition queue onto sync queue. Returns true if successful. cancelled before signal).
Transfers node, if necessary, to sync queue after a cancelled wait. Returns true if thread was cancelled before being signalled.
Queries whether any threads are waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, a <tt>true</tt> return does not guarantee that a future <tt>signal</tt> will awaken any threads.  This method is designed primarily for use in monitoring of the system state.
Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters.  This method is designed for use in monitoring of the system state, not for synchronization control.
Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer.  Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order.
Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock.
Moves all threads from the wait queue for this condition to the wait queue for the owning lock.
Implements uninterruptible condition wait. <ol> <li> Save lock state returned by {@link #getState}. <li> Invoke {@link #release} with <li> Block until signalled. <li> Reacquire by invoking specialized version of </ol>
Throws InterruptedException, reinterrupts current thread, or does nothing, depending on mode.
Implements interruptible condition wait. <ol> <li> If current thread is interrupted, throw InterruptedException. <li> Save lock state returned by {@link #getState}. <li> Invoke {@link #release} with <li> Block until signalled or interrupted. <li> Reacquire by invoking specialized version of <li> If interrupted while blocked in step 4, throw InterruptedException. </ol>
Implements timed condition wait. <ol> <li> If current thread is interrupted, throw InterruptedException. <li> Save lock state returned by {@link #getState}. <li> Invoke {@link #release} with <li> Block until signalled, interrupted, or timed out. <li> Reacquire by invoking specialized version of <li> If interrupted while blocked in step 4, throw InterruptedException. </ol>
Implements absolute timed condition wait. <ol> <li> If current thread is interrupted, throw InterruptedException. <li> Save lock state returned by {@link #getState}. <li> Invoke {@link #release} with <li> Block until signalled, interrupted, or timed out. <li> Reacquire by invoking specialized version of <li> If interrupted while blocked in step 4, throw InterruptedException. <li> If timed out while blocked in step 4, return false, else true. </ol>
Implements timed condition wait. <ol> <li> If current thread is interrupted, throw InterruptedException. <li> Save lock state returned by {@link #getState}. <li> Invoke {@link #release} with <li> Block until signalled, interrupted, or timed out. <li> Reacquire by invoking specialized version of <li> If interrupted while blocked in step 4, throw InterruptedException. <li> If timed out while blocked in step 4, return false, else true. </ol>
Queries whether any threads are waiting on this condition. Implements {@link AbstractQueuedLongSynchronizer#hasWaiters}.
Returns an estimate of the number of threads waiting on this condition. Implements {@link AbstractQueuedLongSynchronizer#getWaitQueueLength}.
Returns a collection containing those threads that may be waiting on this Condition. Implements {@link AbstractQueuedLongSynchronizer#getWaitingThreads}.
Queries whether any threads are waiting on this condition. Implements {@link AbstractQueuedSynchronizer#hasWaiters}.
Returns an estimate of the number of threads waiting on this condition. Implements {@link AbstractQueuedSynchronizer#getWaitQueueLength}.
Returns a collection containing those threads that may be waiting on this Condition. Implements {@link AbstractQueuedSynchronizer#getWaitingThreads}.
Makes available the permit for the given thread, if it was not already available.  If the thread was blocked on {@code park} then it will unblock.  Otherwise, its next call to {@code park} is guaranteed not to block. This operation is not guaranteed to have any effect at all if the given thread has not been started.
Disables the current thread for thread scheduling purposes unless the permit is available. <p>If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: <ul> <li>Some other thread invokes {@link #unpark unpark} with the current thread as the target; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The call spuriously (that is, for no reason) returns. </ul> <p>This method does <em>not</em> report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread upon return.
Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available. <p>If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: <ul> <li>Some other thread invokes {@link #unpark unpark} with the current thread as the target; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The specified waiting time elapses; or <li>The call spuriously (that is, for no reason) returns. </ul> <p>This method does <em>not</em> report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the elapsed time upon return.
Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available. <p>If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: <ul> <li>Some other thread invokes {@link #unpark unpark} with the current thread as the target; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The specified deadline passes; or <li>The call spuriously (that is, for no reason) returns. </ul> <p>This method does <em>not</em> report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the current time upon return.
Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked.  The value returned is just a momentary snapshot -- the thread may have since unblocked or blocked on a different blocker object.
Disables the current thread for thread scheduling purposes unless the permit is available. <p>If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: <ul> <li>Some other thread invokes {@link #unpark unpark} with the current thread as the target; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The call spuriously (that is, for no reason) returns. </ul> <p>This method does <em>not</em> report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread upon return.
Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available. <p>If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: <ul> <li>Some other thread invokes {@link #unpark unpark} with the current thread as the target; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The specified deadline passes; or <li>The call spuriously (that is, for no reason) returns. </ul> <p>This method does <em>not</em> report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the current time upon return.
Performs non-fair tryLock.  tryAcquire is implemented in subclasses, but both need nonfair try for trylock method.
Acquires the lock. <p>Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. <p>If the current thread already holds the lock then the hold count is incremented by one and the method returns immediately. <p>If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired, at which time the lock hold count is set to one.
Acquires the lock unless the current thread is {@linkplain Thread#interrupt interrupted}. <p>Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. <p>If the current thread already holds this lock then the hold count is incremented by one and the method returns immediately. <p>If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: <ul> <li>The lock is acquired by the current thread; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread. </ul> <p>If the lock is acquired by the current thread then the lock hold count is set to one. <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while acquiring the lock, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock.
Acquires the lock only if it is not held by another thread at the time of invocation. <p>Acquires the lock if it is not held by another thread and returns immediately with the value {@code true}, setting the lock hold count to one. Even when this lock has been set to use a fair ordering policy, a call to {@code tryLock()} <em>will</em> immediately acquire the lock if it is available, whether or not other threads are currently waiting for the lock. This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) } which is almost equivalent (it also detects interruption). <p> If the current thread already holds this lock then the hold count is incremented by one and the method returns {@code true}. <p>If the lock is held by another thread then this method will return immediately with the value {@code false}.
Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}. <p>Acquires the lock if it is not held by another thread and returns immediately with the value {@code true}, setting the lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock <em>will not</em> be acquired if any other threads are waiting for the lock. This is in contrast to the {@link #tryLock()} method. If you want a timed {@code tryLock} that does permit barging on a fair lock then combine the timed and un-timed forms together: <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... } </pre> <p>If the current thread already holds this lock then the hold count is incremented by one and the method returns {@code true}. <p>If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: <ul> <li>The lock is acquired by the current thread; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The specified waiting time elapses </ul> <p>If the lock is acquired then the value {@code true} is returned and the lock hold count is set to one. <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while acquiring the lock, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>If the specified waiting time elapses then the value {@code false} is returned.  If the time is less than or equal to zero, the method will not wait at all. <p>In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.
Attempts to release this lock. <p>If the current thread is the holder of this lock then the hold count is decremented.  If the hold count is now zero then the lock is released.  If the current thread is not the holder of this lock then {@link IllegalMonitorStateException} is thrown.
Returns a {@link Condition} instance for use with this {@link Lock} instance. <p>The returned {@link Condition} instance supports the same usages as do the {@link Object} monitor methods ({@link Object#wait() wait}, {@link Object#notify notify}, and {@link Object#notifyAll notifyAll}) when used with the built-in monitor lock. <ul> <li>If this lock is not held when any of the {@link Condition} {@linkplain Condition#await() waiting} or {@linkplain Condition#signal signalling} methods are called, then an {@link IllegalMonitorStateException} is thrown. <li>When the condition {@linkplain Condition#await() waiting} methods are called the lock is released and, before they return, the lock is reacquired and the lock hold count restored to what it was when the method was called. <li>If a thread is {@linkplain Thread#interrupt interrupted} while waiting then the wait will terminate, an {@link InterruptedException} will be thrown, and the thread's interrupted status will be cleared. <li> Waiting threads are signalled in FIFO order. <li>The ordering of lock reacquisition for threads returning from waiting methods is the same as for threads initially acquiring the lock, which is in the default case not specified, but for <em>fair</em> locks favors those threads that have been waiting the longest. </ul>
Queries the number of holds on this lock by the current thread. <p>A thread has a hold on a lock for each lock action that is not matched by an unlock action. <p>The hold count information is typically only used for testing and debugging purposes. For example, if a certain section of code should not be entered with the lock already held then we can assert that fact: <pre> class X { ReentrantLock lock = new ReentrantLock(); // ... public void m() { } </pre>
Queries if this lock is held by the current thread. <p>Analogous to the {@link Thread#holdsLock} method for built-in monitor locks, this method is typically used for debugging and testing. For example, a method that should only be called while a lock is held can assert that this is the case: <pre> class X { ReentrantLock lock = new ReentrantLock(); // ... public void m() { } </pre> <p>It can also be used to ensure that a reentrant lock is used in a non-reentrant manner, for example: <pre> class X { ReentrantLock lock = new ReentrantLock(); // ... public void m() { } </pre>
Queries if this lock is held by any thread. This method is designed for use in monitoring of the system state, not for synchronization control.
Returns the thread that currently owns this lock, or {@code null} if not owned. When this method is called by a thread that is not the owner, the return value reflects a best-effort approximation of current lock status. For example, the owner may be momentarily {@code null} even if there are threads trying to acquire the lock but have not yet done so. This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities.
Queries whether any threads are waiting to acquire this lock. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that any other thread will ever acquire this lock.  This method is designed primarily for use in monitoring of the system state.
Queries whether the given thread is waiting to acquire this lock. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that this thread will ever acquire this lock.  This method is designed primarily for use in monitoring of the system state.
Returns an estimate of the number of threads waiting to acquire this lock.  The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures.  This method is designed for use in monitoring of the system state, not for synchronization control.
Returns a collection containing threads that may be waiting to acquire this lock.  Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate.  The elements of the returned collection are in no particular order.  This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.
Queries whether any threads are waiting on the given condition associated with this lock. Note that because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee that a future {@code signal} will awaken any threads.  This method is designed primarily for use in monitoring of the system state.
Returns an estimate of the number of threads waiting on the given condition associated with this lock. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control.
Returns a collection containing those threads that may be waiting on the given condition associated with this lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order.  This method is designed to facilitate construction of subclasses that provide more extensive condition monitoring facilities.
Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes either the String {@code "Unlocked"} or the String {@code "Locked by"} followed by the {@linkplain Thread#getName name} of the owning thread.
Acquires the read lock. <p>Acquires the read lock if the write lock is not held by another thread and returns immediately. <p>If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the read lock has been acquired.
Acquires the read lock unless the current thread is {@linkplain Thread#interrupt interrupted}. <p>Acquires the read lock if the write lock is not held by another thread and returns immediately. <p>If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: <ul> <li>The read lock is acquired by the current thread; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread. </ul> <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while acquiring the read lock, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock.
Acquires the read lock only if the write lock is not held by another thread at the time of invocation. <p>Acquires the read lock if the write lock is not held by another thread and returns immediately with the value {@code true}. Even when this lock has been set to use a fair ordering policy, a call to {@code tryLock()} <em>will</em> immediately acquire the read lock if it is available, whether or not other threads are currently waiting for the read lock.  This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) } which is almost equivalent (it also detects interruption). <p>If the write lock is held by another thread then this method will return immediately with the value {@code false}.
Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}. <p>Acquires the read lock if the write lock is not held by another thread and returns immediately with the value {@code true}. If this lock has been set to use a fair ordering policy then an available lock <em>will not</em> be acquired if any other threads are waiting for the lock. This is in contrast to the {@link #tryLock()} method. If you want a timed {@code tryLock} that does permit barging on a fair lock then combine the timed and un-timed forms together: <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... } </pre> <p>If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: <ul> <li>The read lock is acquired by the current thread; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The specified waiting time elapses. </ul> <p>If the read lock is acquired then the value {@code true} is returned. <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while acquiring the read lock, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>If the specified waiting time elapses then the value {@code false} is returned.  If the time is less than or equal to zero, the method will not wait at all. <p>In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.
Acquires the write lock. <p>Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately, setting the write lock hold count to one. <p>If the current thread already holds the write lock then the hold count is incremented by one and the method returns immediately. <p>If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the write lock has been acquired, at which time the write lock hold count is set to one.
Acquires the write lock unless the current thread is {@linkplain Thread#interrupt interrupted}. <p>Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately, setting the write lock hold count to one. <p>If the current thread already holds this lock then the hold count is incremented by one and the method returns immediately. <p>If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: <ul> <li>The write lock is acquired by the current thread; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread. </ul> <p>If the write lock is acquired by the current thread then the lock hold count is set to one. <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; <li>is {@linkplain Thread#interrupt interrupted} while acquiring the write lock, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock.
Acquires the write lock only if it is not held by another thread at the time of invocation. <p>Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately with the value {@code true}, setting the write lock hold count to one. Even when this lock has been set to use a fair ordering policy, a call to {@code tryLock()} <em>will</em> immediately acquire the lock if it is available, whether or not other threads are currently waiting for the write lock.  This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) } which is almost equivalent (it also detects interruption). <p> If the current thread already holds this lock then the hold count is incremented by one and the method returns {@code true}. <p>If the lock is held by another thread then this method will return immediately with the value {@code false}. by the current thread, or the write lock was already held by the current thread; and {@code false} otherwise.
Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}. <p>Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately with the value {@code true}, setting the write lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock <em>will not</em> be acquired if any other threads are waiting for the write lock. This is in contrast to the {@link #tryLock()} method. If you want a timed {@code tryLock} that does permit barging on a fair lock then combine the timed and un-timed forms together: <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... } </pre> <p>If the current thread already holds this lock then the hold count is incremented by one and the method returns {@code true}. <p>If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: <ul> <li>The write lock is acquired by the current thread; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The specified waiting time elapses </ul> <p>If the write lock is acquired then the value {@code true} is returned and the write lock hold count is set to one. <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; <li>is {@linkplain Thread#interrupt interrupted} while acquiring the write lock, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>If the specified waiting time elapses then the value {@code false} is returned.  If the time is less than or equal to zero, the method will not wait at all. <p>In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time. by the current thread, or the write lock was already held by the current thread; and {@code false} if the waiting time elapsed before the lock could be acquired.
Attempts to release this lock. <p>If the current thread is the holder of this lock then the hold count is decremented. If the hold count is now zero then the lock is released.  If the current thread is not the holder of this lock then {@link IllegalMonitorStateException} is thrown. hold this lock.
Returns a {@link Condition} instance for use with this {@link Lock} instance. <p>The returned {@link Condition} instance supports the same usages as do the {@link Object} monitor methods ({@link Object#wait() wait}, {@link Object#notify notify}, and {@link Object#notifyAll notifyAll}) when used with the built-in monitor lock. <ul> <li>If this write lock is not held when any {@link Condition} method is called then an {@link IllegalMonitorStateException} is thrown.  (Read locks are held independently of write locks, so are not checked or affected. However it is essentially always an error to invoke a condition waiting method when the current thread has also acquired read locks, since other threads that could unblock it will not be able to acquire the write lock.) <li>When the condition {@linkplain Condition#await() waiting} methods are called the write lock is released and, before they return, the write lock is reacquired and the lock hold count restored to what it was when the method was called. <li>If a thread is {@linkplain Thread#interrupt interrupted} while waiting then the wait will terminate, an {@link InterruptedException} will be thrown, and the thread's interrupted status will be cleared. <li> Waiting threads are signalled in FIFO order. <li>The ordering of lock reacquisition for threads returning from waiting methods is the same as for threads initially acquiring the lock, which is in the default case not specified, but for <em>fair</em> locks favors those threads that have been waiting the longest. </ul>
Returns a string identifying this lock, as well as its lock state.  The state, in brackets includes either the String {@code "Unlocked"} or the String {@code "Locked by"} followed by the {@linkplain Thread#getName name} of the owning thread.
Queries if this write lock is held by the current thread. Identical in effect to {@link ReentrantReadWriteLock#isWriteLockedByCurrentThread}.
Queries the number of holds on this write lock by the current thread.  A thread has a hold on a lock for each lock action that is not matched by an unlock action.  Identical in effect to {@link ReentrantReadWriteLock#getWriteHoldCount}.
Returns the thread that currently owns the write lock, or {@code null} if not owned. When this method is called by a thread that is not the owner, the return value reflects a best-effort approximation of current lock status. For example, the owner may be momentarily {@code null} even if there are threads trying to acquire the lock but have not yet done so. This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities.
Queries if the write lock is held by any thread. This method is designed for use in monitoring system state, not for synchronization control.
Queries if the write lock is held by the current thread.
Queries the number of reentrant write holds on this lock by the current thread.  A writer thread has a hold on a lock for each lock action that is not matched by an unlock action.
Queries the number of reentrant read holds on this lock by the current thread.  A reader thread has a hold on a lock for each lock action that is not matched by an unlock action.
Returns a collection containing threads that may be waiting to acquire the write lock.  Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate.  The elements of the returned collection are in no particular order.  This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities.
Returns a collection containing threads that may be waiting to acquire the read lock.  Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate.  The elements of the returned collection are in no particular order.  This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities.
Queries whether any threads are waiting to acquire the read or write lock. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that any other thread will ever acquire a lock.  This method is designed primarily for use in monitoring of the system state.
Queries whether the given thread is waiting to acquire either the read or write lock. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that this thread will ever acquire a lock.  This method is designed primarily for use in monitoring of the system state.
Returns an estimate of the number of threads waiting to acquire either the read or write lock.  The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures.  This method is designed for use in monitoring of the system state, not for synchronization control.
Returns a collection containing threads that may be waiting to acquire either the read or write lock.  Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order.  This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.
Queries whether any threads are waiting on the given condition associated with the write lock. Note that because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee that a future {@code signal} will awaken any threads.  This method is designed primarily for use in monitoring of the system state.
Returns an estimate of the number of threads waiting on the given condition associated with the write lock. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control.
Returns a collection containing those threads that may be waiting on the given condition associated with the write lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order.  This method is designed to facilitate construction of subclasses that provide more extensive condition monitoring facilities.
Returns a <tt>RunnableFuture</tt> for the given runnable and default value. underlying runnable and which, as a <tt>Future</tt>, will yield the given value as its result and provide for cancellation of the underlying task.
Returns a <tt>RunnableFuture</tt> for the given callable task. underlying callable and which, as a <tt>Future</tt>, will yield the callable's result as its result and provide for cancellation of the underlying task.
the main mechanics of invokeAny.
Circularly decrement i.
Returns item at index i.
Inserts element at current put position, advances, and signals. Call only when holding lock.
Extracts element at current take position, advances, and signals. Call only when holding lock.
Deletes item at position i. Utility for remove and iterator.remove. Call only when holding lock.
Creates an {@code ArrayBlockingQueue} with the given (fixed) capacity and default access policy.
Creates an {@code ArrayBlockingQueue} with the given (fixed) capacity and the specified access policy.
Creates an {@code ArrayBlockingQueue} with the given (fixed) capacity, the specified access policy and initially containing the elements of the given collection, added in traversal order of the collection's iterator.
Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning {@code true} upon success and throwing an {@code IllegalStateException} if this queue is full.
Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning {@code true} upon success and {@code false} if this queue is full.  This method is generally preferable to method {@link #add}, which can fail to insert an element only by throwing an exception.
Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full.
Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full.
this doc comment is a modified copy of the inherited doc comment, without the reference to unlimited queues. Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking. This is always equal to the initial capacity of this queue less the current {@code size} of this queue. <p>Note that you <em>cannot</em> always tell if an attempt to insert an element will succeed by inspecting {@code remainingCapacity} because it may be the case that another thread is about to insert or remove an element.
Removes a single instance of the specified element from this queue, if it is present.  More formally, removes an element {@code e} such that {@code o.equals(e)}, if this queue contains one or more such elements. Returns {@code true} if this queue contained the specified element (or equivalently, if this queue changed as a result of the call). <p>Removal of interior elements in circular array based queues is an intrinsically slow and disruptive operation, so should be undertaken only in exceptional circumstances, ideally only when the queue is known not to be accessible by other threads.
Returns an iterator over the elements in this queue in proper sequence. The elements will be returned in order from first (head) to last (tail). <p>The returned {@code Iterator} is a "weakly consistent" iterator that will never throw {@link java.util.ConcurrentModificationException ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Constructs a <tt>BrokenBarrierException</tt> with the specified detail message.
Constructs a <tt>CancellationException</tt> with the specified detail message.
Creates a new, empty map with the specified initial capacity, load factor and concurrency level. performs internal sizing to accommodate this many elements. Resizing may be performed when the average number of elements per bin exceeds this threshold. updating threads. The implementation performs internal sizing to try to accommodate this many threads. negative or the load factor or concurrencyLevel are nonpositive.
Creates a new, empty map with the specified initial capacity and load factor and with the default concurrencyLevel (16). sizing to accommodate this many elements. Resizing may be performed when the average number of elements per bin exceeds this threshold. elements is negative or the load factor is nonpositive
Creates a new, empty map with the specified initial capacity, and with default load factor (0.75) and concurrencyLevel (16). performs internal sizing to accommodate this many elements. elements is negative.
Creates a new, empty map with a default initial capacity (16), load factor (0.75) and concurrencyLevel (16).
Creates a new map with the same mappings as the given map. The map is created with a capacity of 1.5 times the number of mappings in the given map or 16 (whichever is greater), and a default load factor (0.75) and concurrencyLevel (16).
Returns the number of key-value mappings in this map.  If the map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns <tt>Integer.MAX_VALUE</tt>.
Returns <tt>true</tt> if this map maps one or more keys to the specified value. Note: This method requires a full internal traversal of the hash table, and so is much slower than method <tt>containsKey</tt>.
Legacy method testing if some key maps into the specified value in this table.  This method is identical in functionality to {@link #containsValue}, and exists solely to ensure full compatibility with class {@link java.util.Hashtable}, which supported this method prior to introduction of the Java Collections framework.
Maps the specified key to the specified value in this table. Neither the key nor the value can be null. <p> The value can be retrieved by calling the <tt>get</tt> method with a key that is equal to the original key.
Returns a {@link Set} view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  The set supports element removal, which removes the corresponding mapping from this map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations. <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Returns a {@link Collection} view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa.  The collection supports element removal, which removes the corresponding mapping from this map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations. <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Returns a {@link Set} view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations. <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Set our entry's value and write through to the map. The value to return is somewhat arbitrary here. Since a WriteThroughEntry does not necessarily track asynchronous changes, the most recent "previous" value could be different from what we return (or could even have been removed in which case the put will re-establish). We do not and cannot guarantee more.
Save the state of the <tt>ConcurrentHashMap</tt> instance to a stream (i.e., serialize it). the key (Object) and value (Object) for each key-value mapping, followed by a null pair. The key-value mappings are emitted in no particular order.
Reconstitute the <tt>ConcurrentHashMap</tt> instance from a stream (i.e., deserialize it).
Constructs a new node.  Uses relaxed write because item can only be seen after publication via casNext or casPrev.
Links e as first element.
Links e as last element.
Unlinks non-null node x.
Unlinks non-null first node.
Unlinks non-null last node.
Guarantees that any node which was unlinked before a call to this method will be unreachable from head after it returns. Does not guarantee to eliminate slack, only that head will point to a node that was active while this method was running.
Guarantees that any node which was unlinked before a call to this method will be unreachable from tail after it returns. Does not guarantee to eliminate slack, only that tail will point to a node that was active while this method was running.
Returns the successor of p, or the first node if p.next has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.
Returns the predecessor of p, or the last node if p.prev has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.
Returns the first node, the unique node p for which: The returned node may or may not be logically deleted. Guarantees that head is set to the returned node.
Returns the last node, the unique node p for which: The returned node may or may not be logically deleted. Guarantees that tail is set to the returned node.
Initializes head and tail, ensuring invariants hold.
Inserts the specified element at the front of this deque. As the deque is unbounded, this method will never throw {@link IllegalStateException}.
Inserts the specified element at the end of this deque. As the deque is unbounded, this method will never throw {@link IllegalStateException}. <p>This method is equivalent to {@link #add}.
Inserts the specified element at the front of this deque. As the deque is unbounded, this method will never return {@code false}.
Inserts the specified element at the end of this deque. As the deque is unbounded, this method will never return {@code false}. <p>This method is equivalent to {@link #add}.
Inserts the specified element at the tail of this deque. As the deque is unbounded, this method will never return {@code false}.
Inserts the specified element at the tail of this deque. As the deque is unbounded, this method will never throw {@link IllegalStateException} or return {@code false}.
Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator.  Attempts to {@code addAll} of a deque to itself result in {@code IllegalArgumentException}.
Returns an array containing all of the elements in this deque, in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.  If the deque fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this deque. <p>If this deque fits in the specified array with room to spare (i.e., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to {@code null}. <p>Like the {@link #toArray()} method, this method acts as bridge between array-based and collection-based APIs.  Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. <p>Suppose {@code x} is a deque known to contain only strings. The following code can be used to dump the deque into a newly allocated array of {@code String}: <pre> Note that {@code toArray(new Object[0])} is identical in function to {@code toArray()}.
Returns an iterator over the elements in this deque in proper sequence. The elements will be returned in order from first (head) to last (tail). <p>The returned iterator is a "weakly consistent" iterator that will never throw {@link java.util.ConcurrentModificationException ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Returns an iterator over the elements in this deque in reverse sequential order.  The elements will be returned in order from last (tail) to first (head). <p>The returned iterator is a "weakly consistent" iterator that will never throw {@link java.util.ConcurrentModificationException ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Sets nextNode and nextItem to next valid node, or to null if no such.
Creates a {@code ConcurrentLinkedQueue} that is initially empty.
Creates a {@code ConcurrentLinkedQueue} initially containing the elements of the given collection, added in traversal order of the collection's iterator.
Try to CAS head to p. If successful, repoint old head to itself as sentinel for succ(), below.
Returns the first live (non-deleted) node on list, or null if none. This is yet another variant of poll/peek; here returning the first node, not element.  We could make peek() a wrapper around first(), but that would cost an extra volatile read of item, and the need to add a retry loop to deal with the possibility of losing a race to a concurrent poll().
Returns the number of elements in this queue.  If this queue contains more than {@code Integer.MAX_VALUE} elements, returns {@code Integer.MAX_VALUE}. <p>Beware that, unlike in most collections, this method is <em>NOT</em> a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires an O(n) traversal. Additionally, if elements are added or removed during execution of this method, the returned result may be inaccurate.  Thus, this method is typically not very useful in concurrent applications.
Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator.  Attempts to {@code addAll} of a queue to itself result in {@code IllegalArgumentException}.
Moves to next valid node and returns item to return for next(), or null if no such.
Creates a new marker node. A marker is distinguished by having its value field point to itself.  Marker nodes also have null keys, a fact that is exploited in a few places, but this doesn't distinguish markers from the base-level header node (head.node), which also has a null key.
Returns value if this node contains a valid key-value pair, else null. is deleted, else null.
Creates and returns a new SimpleImmutableEntry holding current mapping if this node holds a valid value, else null.
Tries to CAS newSucc as successor.  To minimize races with unlink that may lose this index node, if the node being indexed is known to be deleted, it doesn't try to link in.
Tries to CAS right field to skip over apparent successor succ.  Fails (forcing a retraversal by caller) if this node is known to be deleted.
Returns true if given key greater than or equal to least and strictly less than fence, bypassing either test if least or fence are null. Needed mainly in submap operations.
Returns true if given key greater than or equal to least and less or equal to fence. Needed mainly in submap operations.
Returns a base-level node with key strictly less than given key, or the base-level header if there is no such node.  Also unlinks indexes to deleted nodes found along the way.  Callers rely on this side-effect of clearing indices to deleted nodes.
Returns node holding key or null if no such, clearing out any deleted nodes seen along the way.  Repeatedly traverses at base-level looking for key starting at predecessor returned from findPredecessor, processing base-level deletions as encountered. Some callers rely on this side-effect of clearing deleted nodes. Restarts occur, at traversal step centered on node n, if: (1) After reading n's next field, n is no longer assumed (2) n's value field is null, indicating n is deleted, in (3) n is a marker or n's predecessor's value field is null, The traversal loops in doPut, doRemove, and findNear all include the same three kinds of checks. And specialized versions appear in findFirst, and findLast and their variants. They can't easily share code because each uses the reads of fields held in locals occurring in the orders they were performed.
Main insertion method.  Adds element if not present, or replaces value if present and onlyIfAbsent is false.
Returns a random level for inserting a new node. Hardwired to k=1, p=0.5, max 31 (see above and Pugh's "Skip List Cookbook", sec 3.4). This uses the simplest of the generators described in George Marsaglia's "Xorshift RNGs" paper.  This is not a high-quality generator but is acceptable here.
Adds given index nodes from given level down to 1. snapshotted by callers to provide correct insertion level
Main deletion method. Locates node, nulls value, appends a deletion marker, unlinks predecessor, removes associated index nodes, and possibly reduces head index level. Index nodes are cleared out simply by calling findPredecessor. which unlinks indexes to deleted nodes found along path to key, which will include the indexes to this node.  This is done unconditionally. We can't check beforehand whether there are index nodes because it might be the case that some or all indexes hadn't been inserted yet for this node during initial search for it, and we'd like to ensure lack of garbage retention, so must call to be sure. associated with key
Possibly reduce head level if it has no nodes.  This method can (rarely) make mistakes, in which case levels can disappear even though they are about to contain index nodes. This impacts performance, not correctness.  To minimize mistakes as well as to reduce hysteresis, the level is reduced by one only if the topmost three levels look empty. Also, if the removed level looks non-empty after CAS, we try to change it back quick before anyone notices our mistake! (This trick works pretty well because this method will practically never make mistakes unless current thread stalls immediately before first CAS, in which case it is very unlikely to stall again immediately afterwards, so will recover.) We put up with all this rather than just let levels grow because otherwise, even a small map that has undergone a large number of insertions and removals will have a lot of levels, slowing down access more than would an occasional unwanted reduction.
Specialized variant of findNode to get first valid node.
Removes first entry; returns its snapshot.
Specialized version of find to get last valid node.
Specialized variant of findPredecessor to get predecessor of last valid node.  Needed when removing the last entry.  It is possible that all successors of returned node will have been deleted upon return, in which case this method can be retried.
Utility for ceiling, floor, lower, higher methods.
Returns SimpleImmutableEntry for results of findNear.
Constructs a new, empty map, sorted according to the {@linkplain Comparable natural ordering} of the keys.
Constructs a new, empty map, sorted according to the specified comparator.
Constructs a new map containing the same mappings as the given map, sorted according to the {@linkplain Comparable natural ordering} of the keys.
Constructs a new map containing the same mappings and using the same ordering as the specified sorted map.
Returns a shallow copy of this <tt>ConcurrentSkipListMap</tt> instance. (The keys and values themselves are not cloned.)
Streamlined bulk insertion to initialize from elements of given sorted map.  Call only from constructor or clone method.
Save the state of this map to a stream. key-value mapping represented by the map, followed by <tt>null</tt>. The key-value mappings are emitted in key-order (as determined by the Comparator, or by the keys' natural ordering if no Comparator).
Returns <tt>true</tt> if this map contains a mapping for the specified key.
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code key} compares equal to {@code k} according to the map's ordering, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.)
Returns <tt>true</tt> if this map maps one or more keys to the specified value.  This operation requires time linear in the map size.
Returns the number of key-value mappings in this map.  If this map contains more than <tt>Integer.MAX_VALUE</tt> elements, it returns <tt>Integer.MAX_VALUE</tt>. <p>Beware that, unlike in most collections, this method is <em>NOT</em> a constant-time operation. Because of the asynchronous nature of these maps, determining the current number of elements requires traversing them all to count them. Additionally, it is possible for the size to change during execution of this method, in which case the returned result will be inaccurate. Thus, this method is typically not very useful in concurrent applications.
Returns a {@link NavigableSet} view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  The set supports element removal, which removes the corresponding mapping from the map, via the {@code Iterator.remove}, {@code Set.remove}, {@code removeAll}, {@code retainAll}, and {@code clear} operations.  It does not support the {@code add} or {@code addAll} operations. <p>The view's {@code iterator} is a "weakly consistent" iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction. <p>This method is equivalent to method {@code navigableKeySet}.
Returns a {@link Collection} view of the values contained in this map. The collection's iterator returns the values in ascending order of the corresponding keys. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa.  The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations. <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Returns a {@link Set} view of the mappings contained in this map. The set's iterator returns the entries in ascending key order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations. <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction. <p>The <tt>Map.Entry</tt> elements returned by <tt>iterator.next()</tt> do <em>not</em> support the <tt>setValue</tt> operation.
Compares the specified object with this map for equality. Returns <tt>true</tt> if the given object is also a map and the two maps represent the same mappings.  More formally, two maps <tt>m1</tt> and <tt>m2</tt> represent the same mappings if <tt>m1.entrySet().equals(m2.entrySet())</tt>.  This operation may return misleading results if either map is concurrently modified during execution of this method.
------ SortedMap API methods ------
Returns a key-value mapping associated with the greatest key strictly less than the given key, or <tt>null</tt> if there is no such key. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.
Returns a key-value mapping associated with the greatest key less than or equal to the given key, or <tt>null</tt> if there is no such key. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.
Returns a key-value mapping associated with the least key greater than or equal to the given key, or <tt>null</tt> if there is no such entry. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.
Returns a key-value mapping associated with the least key strictly greater than the given key, or <tt>null</tt> if there is no such key. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.
Returns a key-value mapping associated with the least key in this map, or <tt>null</tt> if the map is empty. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.
Returns a key-value mapping associated with the greatest key in this map, or <tt>null</tt> if the map is empty. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.
Removes and returns a key-value mapping associated with the least key in this map, or <tt>null</tt> if the map is empty. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.
Removes and returns a key-value mapping associated with the greatest key in this map, or <tt>null</tt> if the map is empty. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.
Factory methods for iterators needed by ConcurrentSkipListSet etc
Creates a new submap, initializing all fields
----------------  Utilities --------------
Returns true if node key is less than upper bound of range
Returns lowest node. This node might not be in range, so most usages need to check bounds
Returns highest node. This node might not be in range, so most usages need to check bounds
Returns lowest absolute key (ignoring directonality)
Returns highest absolute key (ignoring directonality)
Submap version of ConcurrentSkipListMap.getNearEntry
Almost the same as getNearEntry, except for keys
----------------  Map API methods --------------
----------------  ConcurrentMap API methods --------------
----------------  SortedMap API methods --------------
Utility to create submaps, where given bounds override unbounded(null) ones and/or are checked against bounded ones.
----------------  Relational methods --------------
---------------- Submap Views --------------
Constructs a new, empty set that orders its elements according to the specified comparator.
Constructs a new set containing the elements in the specified collection, that orders its elements according to their {@linkplain Comparable natural ordering}.
Constructs a new set containing the same elements and using the same ordering as the specified sorted set.
Returns a shallow copy of this <tt>ConcurrentSkipListSet</tt> instance. (The elements themselves are not cloned.)
Returns the number of elements in this set.  If this set contains more than <tt>Integer.MAX_VALUE</tt> elements, it returns <tt>Integer.MAX_VALUE</tt>. <p>Beware that, unlike in most collections, this method is <em>NOT</em> a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires traversing them all to count them. Additionally, it is possible for the size to change during execution of this method, in which case the returned result will be inaccurate. Thus, this method is typically not very useful in concurrent applications.
Returns <tt>true</tt> if this set contains the specified element. More formally, returns <tt>true</tt> if and only if this set contains an element <tt>e</tt> such that <tt>o.equals(e)</tt>.
Adds the specified element to this set if it is not already present. More formally, adds the specified element <tt>e</tt> to this set if the set contains no element <tt>e2</tt> such that <tt>e.equals(e2)</tt>. If this set already contains the element, the call leaves the set unchanged and returns <tt>false</tt>.
Removes the specified element from this set if it is present. More formally, removes an element <tt>e</tt> such that <tt>o.equals(e)</tt>, if this set contains such an element. Returns <tt>true</tt> if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)
Compares the specified object with this set for equality.  Returns <tt>true</tt> if the specified object is also a set, the two sets have the same size, and every member of the specified set is contained in this set (or equivalently, every member of this set is contained in the specified set).  This definition ensures that the equals method works properly across different implementations of the set interface.
Removes from this set all of its elements that are contained in the specified collection.  If the specified collection is also a set, this operation effectively modifies this set so that its value is the <i>asymmetric set difference</i> of the two sets.
Creates a new empty instance.
Creates a new instance containing the elements of {@code array}.
Searches this list for {@code object} and returns the index of the first occurrence that is at or after {@code from}.
Searches this list for {@code object} and returns the index of the last occurrence that is before {@code to}.
Returns an {@link Iterator} that iterates over the elements of this list as they were at the time of this method call. Changes to the list made after this method call will not be reflected by the iterator, nor will they trigger a {@link ConcurrentModificationException}. <p>The returned iterator does not support {@link Iterator#remove()}.
Returns a {@link ListIterator} that iterates over the elements of this list as they were at the time of this method call. Changes to the list made after this method call will not be reflected by the iterator, nor will they trigger a {@link ConcurrentModificationException}. <p>The returned iterator does not support {@link ListIterator#add}, {@link ListIterator#set} or {@link Iterator#remove()},
Equivalent to {@code listIterator(0)}.
Adds the elements of {@code collection} that are not already present in this list. If {@code collection} includes a repeated value, at most one occurrence of that value will be added to this list. Elements are added at the end of this list. <p>Callers of this method may prefer {@link CopyOnWriteArraySet}, whose API is more appropriate for set operations.
Adds {@code object} to the end of this list if it is not already present. <p>Callers of this method may prefer {@link CopyOnWriteArraySet}, whose API is more appropriate for set operations.
Removes or retains the elements in {@code collection}. Returns the number of elements removed.
Throws if {@code index} doesn't identify an element in the array.
Throws if {@code index} doesn't identify an insertion point in the array. Unlike element index, it's okay to add or iterate at size().
Creates an empty set.
Creates a set containing all of the elements of the specified collection.
Returns the number of elements in this set.
Returns <tt>true</tt> if this set contains the specified element. More formally, returns <tt>true</tt> if and only if this set contains an element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
Returns an array containing all of the elements in this set. If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. <p>The returned array will be "safe" in that no references to it are maintained by this set.  (In other words, this method must allocate a new array even if this set is backed by an array). The caller is thus free to modify the returned array. <p>This method acts as bridge between array-based and collection-based APIs.
Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array. If the set fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this set. <p>If this set fits in the specified array with room to spare (i.e., the array has more elements than this set), the element in the array immediately following the end of the set is set to <tt>null</tt>.  (This is useful in determining the length of this set <i>only</i> if the caller knows that this set does not contain any null elements.) <p>If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. <p>Like the {@link #toArray()} method, this method acts as bridge between array-based and collection-based APIs.  Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. <p>Suppose <tt>x</tt> is a set known to contain only strings. The following code can be used to dump the set into a newly allocated array of <tt>String</tt>: <pre> Note that <tt>toArray(new Object[0])</tt> is identical in function to <tt>toArray()</tt>.
Removes all of the elements from this set. The set will be empty after this call returns.
Removes the specified element from this set if it is present. More formally, removes an element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>, if this set contains such an element.  Returns <tt>true</tt> if this set contained the element (or equivalently, if this set changed as a result of the call).  (This set will not contain the element once the call returns.)
Adds the specified element to this set if it is not already present. More formally, adds the specified element <tt>e</tt> to this set if the set contains no element <tt>e2</tt> such that <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>. If this set already contains the element, the call leaves the set unchanged and returns <tt>false</tt>.
Returns <tt>true</tt> if this set contains all of the elements of the specified collection.  If the specified collection is also a set, this method returns <tt>true</tt> if it is a <i>subset</i> of this set.
Adds all of the elements in the specified collection to this set if they're not already present.  If the specified collection is also a set, the <tt>addAll</tt> operation effectively modifies this set so that its value is the <i>union</i> of the two sets.  The behavior of this operation is undefined if the specified collection is modified while the operation is in progress.
Removes from this set all of its elements that are contained in the specified collection.  If the specified collection is also a set, this operation effectively modifies this set so that its value is the <i>asymmetric set difference</i> of the two sets.
Retains only the elements in this set that are contained in the specified collection.  In other words, removes from this set all of its elements that are not contained in the specified collection.  If the specified collection is also a set, this operation effectively modifies this set so that its value is the <i>intersection</i> of the two sets.
Returns an iterator over the elements contained in this set in the order in which these elements were added. <p>The returned iterator provides a snapshot of the state of the set when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does <em>NOT</em> support the <tt>remove</tt> method.
Compares the specified object with this set for equality. Returns {@code true} if the specified object is the same object as this object, or if it is also a {@link Set} and the elements returned by an {@linkplain List#iterator() iterator} over the specified set are the same as the elements returned by an iterator over this set.  More formally, the two iterators are considered to return the same elements if they return the same number of elements and for every element {@code e1} returned by the iterator over the specified set, there is an element {@code e2} returned by the iterator over this set such that {@code (e1==null ? e2==null : e1.equals(e2))}.
Test for equality, coping with nulls.
Causes the current thread to wait until the latch has counted down to zero, unless the thread is {@linkplain Thread#interrupt interrupted}. <p>If the current count is zero then this method returns immediately. <p>If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happen: <ul> <li>The count reaches zero due to invocations of the {@link #countDown} method; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread. </ul> <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while waiting, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared.
Causes the current thread to wait until the latch has counted down to zero, unless the thread is {@linkplain Thread#interrupt interrupted}, or the specified waiting time elapses. <p>If the current count is zero then this method returns immediately with the value {@code true}. <p>If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happen: <ul> <li>The count reaches zero due to invocations of the {@link #countDown} method; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The specified waiting time elapses. </ul> <p>If the count reaches zero then the method returns with the value {@code true}. <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while waiting, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>If the specified waiting time elapses then the value {@code false} is returned.  If the time is less than or equal to zero, the method will not wait at all.
Main barrier code, covering the various policies.
Creates a new <tt>CyclicBarrier</tt> that will trip when the given number of parties (threads) are waiting upon it, and which will execute the given barrier action when the barrier is tripped, performed by the last thread entering the barrier.
Creates a new <tt>CyclicBarrier</tt> that will trip when the given number of parties (threads) are waiting upon it, and does not perform a predefined action when the barrier is tripped.
Waits until all {@linkplain #getParties parties} have invoked <tt>await</tt> on this barrier. <p>If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: <ul> <li>The last thread arrives; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>Some other thread {@linkplain Thread#interrupt interrupts} one of the other waiting threads; or <li>Some other thread times out while waiting for barrier; or <li>Some other thread invokes {@link #reset} on this barrier. </ul> <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while waiting </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>If the barrier is {@link #reset} while any thread is waiting, or if the barrier {@linkplain #isBroken is broken} when <tt>await</tt> is invoked, or while any thread is waiting, then {@link BrokenBarrierException} is thrown. <p>If any thread is {@linkplain Thread#interrupt interrupted} while waiting, then all other waiting threads will throw {@link BrokenBarrierException} and the barrier is placed in the broken state. <p>If the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state.
Waits until all {@linkplain #getParties parties} have invoked <tt>await</tt> on this barrier, or the specified waiting time elapses. <p>If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: <ul> <li>The last thread arrives; or <li>The specified timeout elapses; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>Some other thread {@linkplain Thread#interrupt interrupts} one of the other waiting threads; or <li>Some other thread times out while waiting for barrier; or <li>Some other thread invokes {@link #reset} on this barrier. </ul> <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while waiting </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>If the specified waiting time elapses then {@link TimeoutException} is thrown. If the time is less than or equal to zero, the method will not wait at all. <p>If the barrier is {@link #reset} while any thread is waiting, or if the barrier {@linkplain #isBroken is broken} when <tt>await</tt> is invoked, or while any thread is waiting, then {@link BrokenBarrierException} is thrown. <p>If any thread is {@linkplain Thread#interrupt interrupted} while waiting, then all other waiting threads will throw {@link BrokenBarrierException} and the barrier is placed in the broken state. <p>If the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state.
Queries if this barrier is in a broken state.
Returns the number of parties currently waiting at the barrier. This method is primarily useful for debugging and assertions.
Retrieves, but does not remove, the head of this queue, or returns <tt>null</tt> if this queue is empty.  Unlike <tt>poll</tt>, if no expired elements are available in the queue, this method returns the element that will expire next, if one exists.
Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array. The returned array elements are in no particular order. If the queue fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this queue. <p>If this queue fits in the specified array with room to spare (i.e., the array has more elements than this queue), the element in the array immediately following the end of the queue is set to <tt>null</tt>. <p>Like the {@link #toArray()} method, this method acts as bridge between array-based and collection-based APIs.  Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. <p>The following code can be used to dump a delay queue into a newly allocated array of <tt>Delayed</tt>: <pre> Note that <tt>toArray(new Object[0])</tt> is identical in function to <tt>toArray()</tt>.
Creates node with given item and empty hole.
Main exchange function, handling the different policy variants. Uses Object, not "V" as argument and return value to simplify handling of sentinel values.  Callers from public methods decode and cast accordingly.
Returns a hash index for the current thread.  Uses a one-step based on the current thread's Thread.getId().  These hash codes have more uniform distribution properties with respect to small moduli (here 1-31) than do other simple hashing functions. <p>To return an index between 0 and max, we use a cheap approximation to a mod operation, that also corrects for bias due to non-power-of-2 remaindering (see {@link java.util.Random#nextInt}).  Bits of the hashcode are masked with "nbits", the ceiling power of two of table size (looked up in a table packed into three ints).  If too large, this is retried after rotating the hash by nbits bits, while forcing new top bit to 0, which guarantees eventual termination (although with a non-random-bias).  This requires an average of less than 2 tries for all table sizes, and has a maximum 2% difference from perfectly uniform slot probabilities when applied to all possible hash codes for sizes less than 32.
Creates a new slot at given index.  Called only when the slot appears to be null.  Relies on double-check using builtin locks, since they rarely contend.  This in turn relies on the arena array being declared volatile.
Tries to cancel a wait for the given node waiting in the given slot, if so, helping clear the node from its slot to avoid garbage retention.
Spin-waits for hole for a non-0 slot.  Fails if spin elapses before hole filled.  Does not check interrupt, relying on check in public exchange method to abort if interrupted on entry.
Waits for (by spinning and/or blocking) and gets the hole filled in by another thread.  Fails if interrupted before hole filled. When a node/thread is about to block, it sets its waiter field and then rechecks state at least one more time before actually parking, thus covering race vs fulfiller noticing that waiter is non-null so should be woken. Thread interruption status is checked only surrounding calls to park.  The caller is assumed to have checked interrupt status on entry.
Waits for (at index 0) and gets the hole filled in by another thread.  Fails if timed out or interrupted before hole filled. Same basic logic as untimed version, but a bit messier.
Sweeps through arena checking for any waiting threads.  Called only upon return from timeout while waiting in slot 0.  When a thread gives up on a timed wait, it is possible that a previously-entered thread is still waiting in some other slot.  So we scan to check for any.  This is almost always overkill, but decreases the likelihood of timeouts when there are other threads present to far less than that in lock-based exchangers in which earlier-arriving threads may still be waiting on entry locks.
Waits for another thread to arrive at this exchange point (unless the current thread is {@linkplain Thread#interrupt interrupted}), and then transfers the given object to it, receiving its object in return. <p>If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread.  The current thread returns immediately, receiving the object passed to the exchange by that other thread. <p>If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of two things happens: <ul> <li>Some other thread enters the exchange; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread. </ul> <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while waiting for the exchange, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared.
Waits for another thread to arrive at this exchange point (unless the current thread is {@linkplain Thread#interrupt interrupted} or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return. <p>If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread.  The current thread returns immediately, receiving the object passed to the exchange by that other thread. <p>If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of three things happens: <ul> <li>Some other thread enters the exchange; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or <li>The specified waiting time elapses. </ul> <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while waiting for the exchange, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. <p>If the specified waiting time elapses then {@link TimeoutException} is thrown.  If the time is less than or equal to zero, the method will not wait at all.
Constructs an <tt>ExecutionException</tt> with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause(Throwable) initCause}.
Constructs an <tt>ExecutionException</tt> with the specified detail message and cause.
Constructs an <tt>ExecutionException</tt> with the specified cause. The detail message is set to: <pre> (cause == null ? null : cause.toString())</pre> (which typically contains the class and detail message of <tt>cause</tt>).
Creates an ExecutorCompletionService using the supplied executor for base task execution and a {@link LinkedBlockingQueue} as a completion queue.
Creates an ExecutorCompletionService using the supplied executor for base task execution and the supplied queue as its completion queue.
Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.  At any point, at most <tt>nThreads</tt> threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.  The threads in the pool will exist until it is explicitly {@link ExecutorService#shutdown shutdown}.
Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed.  At any point, at most <tt>nThreads</tt> threads will be active processing tasks.  If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available.  If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.  The threads in the pool will exist until it is explicitly {@link ExecutorService#shutdown shutdown}.
Creates an Executor that uses a single worker thread operating off an unbounded queue. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.)  Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent <tt>newFixedThreadPool(1)</tt> the returned executor is guaranteed not to be reconfigurable to use additional threads.
Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed. Unlike the otherwise equivalent <tt>newFixedThreadPool(1, threadFactory)</tt> the returned executor is guaranteed not to be reconfigurable to use additional threads. threads
Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available.  These pools will typically improve the performance of programs that execute many short-lived asynchronous tasks. Calls to <tt>execute</tt> will reuse previously constructed threads if available. If no existing thread is available, a new thread will be created and added to the pool. Threads that have not been used for sixty seconds are terminated and removed from the cache. Thus, a pool that remains idle for long enough will not consume any resources. Note that pools with similar properties but different details (for example, timeout parameters) may be created using {@link ThreadPoolExecutor} constructors.
Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed.
Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.)  Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent <tt>newScheduledThreadPool(1)</tt> the returned executor is guaranteed not to be reconfigurable to use additional threads.
Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically.  (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.)  Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent <tt>newScheduledThreadPool(1, threadFactory)</tt> the returned executor is guaranteed not to be reconfigurable to use additional threads. threads
Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically. even if they are idle.
Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically. even if they are idle. creates a new thread.
Returns an object that delegates all defined {@link ExecutorService} methods to the given executor, but not any other methods that might otherwise be accessible using casts. This provides a way to safely "freeze" configuration and disallow tuning of a given concrete implementation.
Returns an object that delegates all defined {@link ScheduledExecutorService} methods to the given executor, but not any other methods that might otherwise be accessible using casts. This provides a way to safely "freeze" configuration and disallow tuning of a given concrete implementation.
Returns a default thread factory used to create new threads. This factory creates all new threads used by an Executor in the same {@link ThreadGroup}. If there is a {@link java.lang.SecurityManager}, it uses the group of {@link System#getSecurityManager}, else the group of the thread invoking this <tt>defaultThreadFactory</tt> method. Each new thread is created as a non-daemon thread with priority set to the smaller of <tt>Thread.NORM_PRIORITY</tt> and the maximum priority permitted in the thread group.  New threads have names accessible via {@link Thread#getName} of <em>pool-N-thread-M</em>, where <em>N</em> is the sequence number of this factory, and <em>M</em> is the sequence number
Returns a thread factory used to create new threads that have the same permissions as the current thread. This factory creates threads with the same settings as {@link Executors#defaultThreadFactory}, additionally setting the AccessControlContext and contextClassLoader of new threads to be the same as the thread invoking this <tt>privilegedThreadFactory</tt> method.  A new <tt>privilegedThreadFactory</tt> can be created within an {@link AccessController#doPrivileged} action setting the current thread's access control context to create threads with the selected permission settings holding within that action. <p> Note that while tasks running within such threads will have the same access control and class loader settings as the current thread, they need not have the same {@link java.lang.ThreadLocal} or {@link java.lang.InheritableThreadLocal} values. If necessary, particular values of thread locals can be set or reset before any task runs in {@link ThreadPoolExecutor} subclasses using {@link ThreadPoolExecutor#beforeExecute}. Also, if it is necessary to initialize worker threads to have the same InheritableThreadLocal settings as some other designated thread, you can create a custom ThreadFactory in which that thread waits for and services requests to create others that will inherit its values. context does not have permission to both get and set context class loader.
Returns a {@link Callable} object that, when called, runs the given task and returns the given result.  This can be useful when applying methods requiring a <tt>Callable</tt> to an otherwise resultless action.
Returns a {@link Callable} object that, when called, runs the given task and returns <tt>null</tt>.
Returns a {@link Callable} object that, when called, runs the given privileged action and returns its result.
Returns a {@link Callable} object that, when called, runs the given privileged exception action and returns its result.
Returns a {@link Callable} object that will, when called, execute the given <tt>callable</tt> under the current access control context. This method should normally be invoked within an {@link AccessController#doPrivileged} action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated {@link AccessControlException}.
Returns a {@link Callable} object that will, when called, execute the given <tt>callable</tt> under the current access control context, with the current context class loader as the context class loader. This method should normally be invoked within an {@link AccessController#doPrivileged} action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated {@link AccessControlException}. context does not have permission to both set and get context class loader.
Creates a <tt>FutureTask</tt> that will, upon running, execute the given <tt>Callable</tt>.
Creates a <tt>FutureTask</tt> that will, upon running, execute the given <tt>Runnable</tt>, and arrange that <tt>get</tt> will return the given result on successful completion. you don't need a particular result, consider using constructions of the form: {@code Future<?> f = new FutureTask<Void>(runnable, null)}
Sets the result of this Future to the given value unless this future has already been set or has been cancelled. This method is invoked internally by the <tt>run</tt> method upon successful completion of the computation.
Causes this future to report an <tt>ExecutionException</tt> with the given throwable as its cause, unless this Future has already been set or has been cancelled. This method is invoked internally by the <tt>run</tt> method upon failure of the computation.
The following (duplicated) doc comment can be removed once 6270645: Javadoc comments should be inherited from most derived is fixed. Sets this Future to the result of its computation unless it has been cancelled.
Executes the computation without setting its result, and then resets this Future to initial state, failing to do so if the computation encounters an exception or is cancelled.  This is designed for use with tasks that intrinsically execute more than once.
Implements AQS base acquire to succeed if ran or cancelled
Implements AQS base release to always signal after setting final done status by nulling runner thread.
Inserts the specified element at the end of this deque unless it would violate capacity restrictions.  When using a capacity-restricted deque, it is generally preferable to use method {@link #offer offer}. <p>This method is equivalent to {@link #addLast}.
Retrieves and removes the head of the queue represented by this deque. This method differs from {@link #poll poll} only in that it throws an exception if this deque is empty. <p>This method is equivalent to {@link #removeFirst() removeFirst}.
Retrieves, but does not remove, the head of the queue represented by this deque.  This method differs from {@link #peek peek} only in that it throws an exception if this deque is empty. <p>This method is equivalent to {@link #getFirst() getFirst}.
Returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking. This is always equal to the initial capacity of this deque less the current {@code size} of this deque. <p>Note that you <em>cannot</em> always tell if an attempt to insert an element will succeed by inspecting {@code remainingCapacity} because it may be the case that another thread is about to insert or remove an element.
Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element {@code e} such that {@code o.equals(e)} (if such an element exists). Returns {@code true} if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). <p>This method is equivalent to {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.
Signals a waiting take. Called only from put/offer (which do not otherwise ordinarily lock takeLock.)
Signals a waiting put. Called only from take/poll.
Links node at end of queue.
Removes a node from head of queue.
Lock to prevent both puts and takes.
Unlock to allow both puts and takes.
Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}.
Creates a {@code LinkedBlockingQueue} with the given (fixed) capacity.
Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}, initially containing the elements of the given collection, added in traversal order of the collection's iterator.
Inserts the specified element at the tail of this queue, waiting if necessary for space to become available.
Inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available.
Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning {@code true} upon success and {@code false} if this queue is full. When using a capacity-restricted queue, this method is generally preferable to method {@link BlockingQueue#add add}, which can fail to insert an element only by throwing an exception.
Unlinks interior Node p with predecessor trail.
Returns the next live successor of p, or null if no such. Unlike other traversal methods, iterators need to handle both: - dequeued nodes (p.next == p) - (possibly multiple) interior removed nodes (p.item == null)
Save the state to a stream (that is, serialize it). its elements (each an {@code Object}) in the proper order, followed by a null
Reconstitute this queue instance from a stream (that is, deserialize it).
Creates a {@code PriorityBlockingQueue} with the default initial capacity (11) that orders its elements according to their {@linkplain Comparable natural ordering}.
Creates a {@code PriorityBlockingQueue} with the specified initial capacity that orders its elements according to their {@linkplain Comparable natural ordering}.
Creates a {@code PriorityBlockingQueue} with the specified initial capacity that orders its elements according to the specified comparator.
Creates a {@code PriorityBlockingQueue} containing the elements in the specified collection.  If the specified collection is a {@link SortedSet} or a {@link PriorityQueue},  this priority queue will be ordered according to the same ordering. Otherwise, this priority queue will be ordered according to the {@linkplain Comparable natural ordering} of its elements.
Tries to grow array to accommodate at least one more element (but normally expand by about 50%), giving up (allowing retry) on contention (which we expect to be rare). Call only while holding lock.
Mechanics for poll().  Call only while holding lock.
Inserts item x at position k, maintaining heap invariant by promoting x up the tree until it is greater than or equal to its parent, or is the root. To simplify and speed up coercions and comparisons. the Comparable and Comparator versions are separated into different methods that are otherwise identical. (Similarly for siftDown.) These methods are static, with heap state as arguments, to simplify use in light of possible comparator exceptions.
Inserts item x at position k, maintaining heap invariant by demoting x down the tree repeatedly until it is less than or equal to its children or is a leaf.
Establishes the heap invariant (described above) in the entire tree, assuming nothing about the order of the elements prior to the call.
Inserts the specified element into this priority queue. As the queue is unbounded, this method will never return {@code false}.
Inserts the specified element into this priority queue. As the queue is unbounded, this method will never block.
Inserts the specified element into this priority queue. As the queue is unbounded, this method will never block or return {@code false}. {@link BlockingQueue#offer BlockingQueue.offer})
Returns the comparator used to order the elements in this queue, or {@code null} if this queue uses the {@linkplain Comparable natural ordering} of its elements.
Always returns {@code Integer.MAX_VALUE} because a {@code PriorityBlockingQueue} is not capacity constrained.
Removes the ith element from queue.
Identity-based version for use in Itr.remove
Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array. The returned array elements are in no particular order. If the queue fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this queue. <p>If this queue fits in the specified array with room to spare (i.e., the array has more elements than this queue), the element in the array immediately following the end of the queue is set to {@code null}. <p>Like the {@link #toArray()} method, this method acts as bridge between array-based and collection-based APIs.  Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. <p>Suppose {@code x} is a queue known to contain only strings. The following code can be used to dump the queue into a newly allocated array of {@code String}: <pre> Note that {@code toArray(new Object[0])} is identical in function to {@code toArray()}.
Returns an iterator over the elements in this queue. The iterator does not return the elements in any particular order. <p>The returned iterator is a "weakly consistent" iterator that will never throw {@link java.util.ConcurrentModificationException ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.
Saves the state to a stream (that is, serializes it).  For compatibility with previous version of this class, elements are first copied to a java.util.PriorityQueue, which is then serialized.
Reconstitutes the {@code PriorityBlockingQueue} instance from a stream (that is, deserializes it).
Constructs a <tt>RejectedExecutionException</tt> with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause(Throwable) initCause}.
Constructs a <tt>RejectedExecutionException</tt> with the specified detail message and cause.
Constructs a <tt>RejectedExecutionException</tt> with the specified cause.  The detail message is set to: <pre> (cause == null ? null : cause.toString())</pre> (which typically contains the class and detail message of <tt>cause</tt>).
Creates a one-shot action with given nanoTime-based trigger.
Returns true if this is a periodic (not a one-shot) action.
Overrides FutureTask version so as to reset/requeue if periodic.
Main execution method for delayed or periodic tasks.  If pool is shut down, rejects the task. Otherwise adds task to queue and starts a thread, if necessary, to run it.  (We cannot prestart the thread to run the task because the task (probably) shouldn't be run yet,) If the pool is shut down while the task is being added, cancel and remove it if required by state and run-after-shutdown parameters.
Cancels and clears the queue of all tasks that should not be run due to shutdown policy.  Invoked within super.shutdown.
Creates a new {@code ScheduledThreadPoolExecutor} with the given core pool size.
Creates a new {@code ScheduledThreadPoolExecutor} with the given initial parameters.
Creates a new ScheduledThreadPoolExecutor with the given initial parameters.
Executes {@code command} with zero required delay. This has effect equivalent to {@link #schedule(Runnable,long,TimeUnit) schedule(command, 0, anyUnit)}. Note that inspections of the queue and of the list returned by {@code shutdownNow} will access the zero-delayed {@link ScheduledFuture}, not the {@code command} itself. <p>A consequence of the use of {@code ScheduledFuture} objects is that {@link ThreadPoolExecutor#afterExecute afterExecute} is always called with a null second {@code Throwable} argument, even if the {@code command} terminated abruptly.  Instead, the {@code Throwable} thrown by such a task can be obtained via {@link Future#get}.
Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.  This value is by default {@code false}.
Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.  This value is by default {@code false}.
Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. <p>This method does not wait for previously submitted tasks to complete execution.  Use {@link #awaitTermination awaitTermination} to do that. <p>If the {@code ExecuteExistingDelayedTasksAfterShutdownPolicy} has been set {@code false}, existing delayed tasks whose delays have not yet elapsed are cancelled.  And unless the {@code ContinueExistingPeriodicTasksAfterShutdownPolicy} has been set {@code true}, future executions of existing periodic tasks will be cancelled.
Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. <p>This method does not wait for actively executing tasks to terminate.  Use {@link #awaitTermination awaitTermination} to do that. <p>There are no guarantees beyond best-effort attempts to stop processing actively executing tasks.  This implementation cancels tasks via {@link Thread#interrupt}, so any task that fails to respond to interrupts may never terminate.
Returns the task queue used by this executor.  Each element of this queue is a {@link ScheduledFuture}, including those tasks submitted using {@code execute} which are for scheduling purposes used as the basis of a zero-delay {@code ScheduledFuture}.  Iteration over this queue is <em>not</em> guaranteed to traverse tasks in the order in which they will execute.
Set f's heapIndex if it is a ScheduledFutureTask.
Sift element added at bottom up to its heap-ordered spot. Call only when holding lock.
Sift element added at top down to its heap-ordered spot. Call only when holding lock.
Resize the heap array.  Call only when holding lock.
Find index of given object, or -1 if absent
Performs common bookkeeping for poll and take: Replaces first element with last and sifts it down.  Call only when holding lock.
Return and remove first element only if it is expired. Used only by drainTo.  Call only when holding lock.
Acquires a permit from this semaphore, blocking until one is available, or the thread is {@linkplain Thread#interrupt interrupted}. <p>Acquires a permit, if one is available and returns immediately, reducing the number of available permits by one. <p>If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: <ul> <li>Some other thread invokes the {@link #release} method for this semaphore and the current thread is next to be assigned a permit; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread. </ul> <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while waiting for a permit, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared.
Acquires a permit from this semaphore, blocking until one is available. <p>Acquires a permit, if one is available and returns immediately, reducing the number of available permits by one. <p>If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes the {@link #release} method for this semaphore and the current thread is next to be assigned a permit. <p>If the current thread is {@linkplain Thread#interrupt interrupted} while waiting for a permit then it will continue to wait, but the time at which the thread is assigned a permit may change compared to the time it would have received the permit had no interruption occurred.  When the thread does return from this method its interrupt status will be set.
Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is {@linkplain Thread#interrupt interrupted}. <p>Acquires the given number of permits, if they are available, and returns immediately, reducing the number of available permits by the given amount. <p>If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: <ul> <li>Some other thread invokes one of the {@link #release() release} methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request; or <li>Some other thread {@linkplain Thread#interrupt interrupts} the current thread. </ul> <p>If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is {@linkplain Thread#interrupt interrupted} while waiting for a permit, </ul> then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. Any permits that were to be assigned to this thread are instead assigned to other threads trying to acquire permits, as if permits had been made available by a call to {@link #release()}.
Acquires the given number of permits from this semaphore, blocking until all are available. <p>Acquires the given number of permits, if they are available, and returns immediately, reducing the number of available permits by the given amount. <p>If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes one of the {@link #release() release} methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request. <p>If the current thread is {@linkplain Thread#interrupt interrupted} while waiting for permits then it will continue to wait and its position in the queue is not affected.  When the thread does return from this method its interrupt status will be set.
Queries whether any threads are waiting to acquire. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that any other thread will ever acquire.  This method is designed primarily for use in monitoring of the system state.
Returns a collection containing threads that may be waiting to acquire. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate.  The elements of the returned collection are in no particular order.  This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.
Returns a string identifying this semaphore, as well as its state. The state, in brackets, includes the String {@code "Permits ="} followed by the number of permits.
Unlinks s from the stack.
Tries to cancel by CAS'ing ref to this as item.
Returns true if this node is known to be off the queue because its next pointer has been forgotten due to an advanceHead operation.
Tries to cas nh as new head; if successful, unlink old head's next node to avoid garbage retention.
Tries to cas nt as new tail.
Tries to CAS cleanMe slot.
Puts or takes an item.
Spins/blocks until node s is fulfilled.
Gets rid of cancelled node s with original predecessor pred.
Creates a <tt>SynchronousQueue</tt> with nonfair access policy.
Creates a <tt>SynchronousQueue</tt> with the specified fairness policy.
Adds the specified element to this queue, waiting if necessary for another thread to receive it.
Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it.
Inserts the specified element into this queue, if another thread is waiting to receive it.
Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it.
Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it.
Retrieves and removes the head of this queue, if another thread is currently making an element available.
Always returns <tt>true</tt>. A <tt>SynchronousQueue</tt> has no internal capacity.
Always returns zero. A <tt>SynchronousQueue</tt> has no internal capacity.
Always returns zero. A <tt>SynchronousQueue</tt> has no internal capacity.
Always returns <tt>false</tt>. A <tt>SynchronousQueue</tt> has no internal capacity.
Always returns <tt>false</tt>. A <tt>SynchronousQueue</tt> has no internal capacity.
Returns <tt>false</tt> unless the given collection is empty. A <tt>SynchronousQueue</tt> has no internal capacity.
Always returns <tt>false</tt>. A <tt>SynchronousQueue</tt> has no internal capacity.
Always returns <tt>false</tt>. A <tt>SynchronousQueue</tt> has no internal capacity.
Always returns <tt>null</tt>. A <tt>SynchronousQueue</tt> does not return elements unless actively waited on.
Returns an empty iterator in which <tt>hasNext</tt> always returns <tt>false</tt>.
Returns a zero-length array.
Sets the zeroeth element of the specified array to <tt>null</tt> (if the array has non-zero length) and returns it.
Save the state to a stream (that is, serialize it).
Unsafe mechanics
Bit field accessors that don't require unpacking ctl. These depend on the bit layout and on workerCount being never negative.
Attempt to CAS-increment the workerCount field of ctl.
Attempt to CAS-decrement the workerCount field of ctl.
Decrements the workerCount field of ctl. This is called only on abrupt termination of a thread (see processWorkerExit). Other decrements are performed within getTask.
Creates with given first task and thread from ThreadFactory.
Delegates main run loop to outer runWorker
Lock methods The value 0 represents the unlocked state. The value 1 represents the locked state.
Transitions runState to given target, or leaves it alone if already at least the given target.
Transitions to TERMINATED state if either (SHUTDOWN and pool and queue empty) or (STOP and pool empty).  If otherwise eligible to terminate but workerCount is nonzero, interrupts an idle worker to ensure that shutdown signals propagate. This method must be called following any action that might make termination possible -- reducing worker count or removing tasks from the queue during shutdown. The method is non-private to allow access from ScheduledThreadPoolExecutor.
If there is a security manager, makes sure caller has permission to shut down threads in general (see shutdownPerm). If this passes, additionally makes sure the caller is allowed to interrupt each worker thread. This might not be true even if first check passed, if the SecurityManager treats some threads specially.
Interrupts all threads, even if active. Ignores SecurityExceptions (in which case some threads may remain uninterrupted).
Interrupts threads that might be waiting for tasks (as indicated by not being locked) so they can check for termination or configuration changes. Ignores SecurityExceptions (in which case some threads may remain uninterrupted). called only from tryTerminate when termination is otherwise enabled but there are still other workers.  In this case, at most one waiting worker is interrupted to propagate shutdown signals in case all threads are currently waiting. Interrupting any arbitrary thread ensures that newly arriving workers since shutdown began will also eventually exit. To guarantee eventual termination, it suffices to always interrupt only one idle worker, but shutdown() interrupts all idle workers so that redundant workers exit promptly, not waiting for a straggler task to finish.
Common form of interruptIdleWorkers, to avoid having to remember what the boolean argument means.
Ensures that unless the pool is stopping, the current thread does not have its interrupt set. This requires a double-check of state in case the interrupt was cleared concurrently with a shutdownNow -- if so, the interrupt is re-enabled.
Invokes the rejected execution handler for the given command. Package-protected for use by ScheduledThreadPoolExecutor.
Drains the task queue into a new list, normally using drainTo. But if the queue is a DelayQueue or any other kind of queue for which poll or drainTo may fail to remove some elements, it deletes them one by one.
Checks if a new worker can be added with respect to current pool state and the given bound (either core or maximum). If so, the worker count is adjusted accordingly, and, if possible, a new worker is created and started running firstTask as its first task. This method returns false if the pool is stopped or eligible to shut down. It also returns false if the thread factory fails to create a thread when asked, which requires a backout of workerCount, and a recheck for termination, in case the existence of this worker was holding up termination. null if none). Workers are created with an initial first task (in method execute()) to bypass queuing when there are fewer than corePoolSize threads (in which case we always start one), or when the queue is full (in which case we must bypass queue). Initially idle threads are usually created via prestartCoreThread or to replace other dying workers. maximumPoolSize. (A boolean indicator is used here rather than a value to ensure reads of fresh values after checking other pool state).
Performs cleanup and bookkeeping for a dying worker. Called only from worker threads. Unless completedAbruptly is set, assumes that workerCount has already been adjusted to account for exit.  This method removes thread from worker set, and possibly terminates the pool or replaces the worker if either it exited due to user task exception or if fewer than corePoolSize workers are running or queue is non-empty but there are no workers.
Performs blocking or timed wait for a task, depending on current configuration settings, or returns null if this worker must exit because of any of: 1. There are more than maximumPoolSize workers (due to 2. The pool is stopped. 3. The pool is shutdown and the queue is empty. 4. This worker timed out waiting for a task, and timed-out
Main worker run loop.  Repeatedly gets tasks from queue and executes them, while coping with a number of issues: 1. We may start out with an initial task, in which case we don't need to get the first one. Otherwise, as long as pool is running, we get tasks from getTask. If it returns null then the worker exits due to changed pool state or configuration parameters.  Other exits result from exception throws in external code, in which case completedAbruptly holds, which usually leads processWorkerExit to replace this thread. 2. Before running any task, the lock is acquired to prevent other pool interrupts while the task is executing, and clearInterruptsForTaskRun called to ensure that unless pool is stopping, this thread does not have its interrupt set. 3. Each task run is preceded by a call to beforeExecute, which might throw an exception, in which case we cause thread to die (breaking loop with completedAbruptly true) without processing the task. 4. Assuming beforeExecute completes normally, we run the task, gathering any of its thrown exceptions to send to afterExecute. We separately handle RuntimeException, Error (both of which the specs guarantee that we trap) and arbitrary Throwables.  Because we cannot rethrow Throwables within Runnable.run, we wrap them within Errors on the way out (to the thread's UncaughtExceptionHandler).  Any thrown exception also conservatively causes thread to die. 5. After task.run completes, we call afterExecute, which may also throw an exception, which will also cause thread to die. According to JLS Sec 14.20, this exception is the one that will be in effect even if task.run throws. The net effect of the exception mechanics is that afterExecute and the thread's UncaughtExceptionHandler have as accurate information as we can provide about any problems encountered by user code.
Creates a new {@code ThreadPoolExecutor} with the given initial parameters and default thread factory and rejected execution handler. It may be more convenient to use one of the {@link Executors} factory methods instead of this general purpose constructor.
Creates a new {@code ThreadPoolExecutor} with the given initial parameters and default rejected execution handler.
Creates a new {@code ThreadPoolExecutor} with the given initial parameters and default thread factory.
Creates a new {@code ThreadPoolExecutor} with the given initial parameters.
Executes the given task sometime in the future.  The task may execute in a new thread or in an existing pooled thread. If the task cannot be submitted for execution, either because this executor has been shutdown or because its capacity has been reached, the task is handled by the current {@code RejectedExecutionHandler}.
Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. <p>This method does not wait for previously submitted tasks to complete execution.  Use {@link #awaitTermination awaitTermination} to do that.
Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. These tasks are drained (removed) from the task queue upon return from this method. <p>This method does not wait for actively executing tasks to terminate.  Use {@link #awaitTermination awaitTermination} to do that. <p>There are no guarantees beyond best-effort attempts to stop processing actively executing tasks.  This implementation cancels tasks via {@link Thread#interrupt}, so any task that fails to respond to interrupts may never terminate.
Returns true if this executor is in the process of terminating after {@link #shutdown} or {@link #shutdownNow} but has not completely terminated.  This method may be useful for debugging. A return of {@code true} reported a sufficient period after shutdown may indicate that submitted tasks have ignored or suppressed interruption, causing this executor not to properly terminate.
Invokes {@code shutdown} when this executor is no longer referenced and it has no threads.
Sets the thread factory used to create new threads.
Returns the thread factory used to create new threads.
Sets a new handler for unexecutable tasks.
Returns the current handler for unexecutable tasks.
Sets the core number of threads.  This overrides any value set in the constructor.  If the new value is smaller than the current value, excess existing threads will be terminated when they next become idle.  If larger, new threads will, if needed, be started to execute any queued tasks.
Returns the core number of threads.
Starts a core thread, causing it to idly wait for work. This overrides the default policy of starting core threads only when new tasks are executed. This method will return {@code false} if all core threads have already been started.
Starts all core threads, causing them to idly wait for work. This overrides the default policy of starting core threads only when new tasks are executed.
Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive. When true, the same keep-alive policy applying to non-core threads applies also to core threads. When false (the default), core threads are never terminated due to lack of incoming tasks.
Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive. When false, core threads are never terminated due to lack of incoming tasks. When true, the same keep-alive policy applying to non-core threads applies also to core threads. To avoid continual thread replacement, the keep-alive time must be greater than zero when setting {@code true}. This method should in general be called before the pool is actively used.
Sets the maximum allowed number of threads. This overrides any value set in the constructor. If the new value is smaller than the current value, excess existing threads will be terminated when they next become idle.
Returns the maximum allowed number of threads.
Sets the time limit for which threads may remain idle before being terminated.  If there are more than the core number of threads currently in the pool, after waiting this amount of time without processing a task, excess threads will be terminated.  This overrides any value set in the constructor.
Returns the thread keep-alive time, which is the amount of time that threads in excess of the core pool size may remain idle before being terminated.
Returns the task queue used by this executor. Access to the task queue is intended primarily for debugging and monitoring. This queue may be in active use.  Retrieving the task queue does not prevent queued tasks from executing.
Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started. <p> This method may be useful as one part of a cancellation scheme.  It may fail to remove tasks that have been converted into other forms before being placed on the internal queue. For example, a task entered using {@code submit} might be converted into a form that maintains {@code Future} status. However, in such cases, method {@link #purge} may be used to remove those Futures that have been cancelled.
Tries to remove from the work queue all {@link Future} tasks that have been cancelled. This method can be useful as a storage reclamation operation, that has no other impact on functionality. Cancelled tasks are never executed, but may accumulate in work queues until worker threads can actively remove them. Invoking this method instead tries to remove them now. However, this method may fail to remove tasks in the presence of interference by other threads.
Returns the largest number of threads that have ever simultaneously been in the pool.
Returns the approximate total number of tasks that have ever been scheduled for execution. Because the states of tasks and threads may change dynamically during computation, the returned value is only an approximation.
Returns the approximate total number of tasks that have completed execution. Because the states of tasks and threads may change dynamically during computation, the returned value is only an approximation, but one that does not ever decrease across successive calls.
Returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts.
Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded.
Always throws RejectedExecutionException.
Obtains and ignores the next task that the executor would otherwise execute, if one is immediately available, and then retries execution of task r, unless the executor is shut down, in which case task r is instead discarded.
Constructs a <tt>TimeoutException</tt> with the specified detail message.
Scale d by m, checking for overflow. This has a short name to make above code more readable.
Convert the given time duration in the given unit to this unit.  Conversions from finer to coarser granularities truncate, so lose precision. For example converting <tt>999</tt> milliseconds to seconds results in <tt>0</tt>. Conversions from coarser to finer granularities with arguments that would numerically overflow saturate to <tt>Long.MIN_VALUE</tt> if negative or <tt>Long.MAX_VALUE</tt> if positive. <p>For example, to convert 10 minutes to milliseconds, use: <tt>TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)</tt> or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
Equivalent to <tt>NANOSECONDS.convert(duration, this)</tt>. or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
Equivalent to <tt>MICROSECONDS.convert(duration, this)</tt>. or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
Equivalent to <tt>MILLISECONDS.convert(duration, this)</tt>. or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
Equivalent to <tt>SECONDS.convert(duration, this)</tt>. or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
Equivalent to <tt>MINUTES.convert(duration, this)</tt>. or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
Equivalent to <tt>HOURS.convert(duration, this)</tt>. or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
Equivalent to <tt>DAYS.convert(duration, this)</tt>.
Performs a timed {@link Object#wait(long, int) Object.wait} using this time unit. This is a convenience method that converts timeout arguments into the form required by the <tt>Object.wait</tt> method. <p>For example, you could implement a blocking <tt>poll</tt> method (see {@link BlockingQueue#poll BlockingQueue.poll}) using: <pre> {@code public synchronized Object poll(long timeout, TimeUnit unit) while (empty) { } }}</pre> or equal to zero, do not wait at all.
Performs a timed {@link Thread#join(long, int) Thread.join} using this time unit. This is a convenience method that converts time arguments into the form required by the <tt>Thread.join</tt> method. or equal to zero, do not wait at all.
Performs a {@link Thread#sleep(long, int) Thread.sleep} using this time unit. This is a convenience method that converts time arguments into the form required by the <tt>Thread.sleep</tt> method. or equal to zero, do not sleep at all.
Constructs an {@code Attributes} instance.
Constructs an {@code Attributes} instance with initial capacity of size {@code size}.
Removes all key/value pairs from this {@code Attributes}.
Determines whether this {@code Attributes} contains the specified key.
Determines whether this {@code Attributes} contains the specified value.
Returns a set containing map entries for each of the key/value pair contained in this {@code Attributes}.
Returns the value associated with the parameter key.
Determines whether this {@code Attributes} contains any keys.
Returns a {@code Set} containing all the keys found in this {@code Attributes}.
Require cast to force ClassCastException
Stores all the key/value pairs in the argument in this {@code Attributes}.
Deletes the key/value pair with key {@code key} from this {@code Attributes}.
Returns the number of key/value pairs associated with this {@code Attributes}.
Returns a collection of all the values present in this {@code Attributes}.
Returns the value associated with the parameter {@code Attributes.Name} key.
Returns the string associated with the parameter name.
Stores the value {@code val} associated with the key {@code name} in this {@code Attributes}.
Read a single line from the manifest buffer.
Creates a new {@code JarEntry} named name.
Creates a new {@code JarEntry} using the values obtained from entry.
Returns the {@code Attributes} object associated with this entry or {@code null} if none exists.
Returns an array of {@code Certificate} Objects associated with this entry or {@code null} if none exists. Make sure that the everything is read from the input stream before calling this method, or else the method returns {@code null}.
Create a new {@code JarEntry} using the values obtained from the argument.
Returns the code signers for the digital signatures associated with the JAR file. If there is no such code signer, it returns {@code null}. Make sure that the everything is read from the input stream before calling this method, or else the method returns {@code null}.
Constructs a new {@code JarException} instance with the specified message.
Create a new {@code JarFile} using the contents of the specified file.
Create a new {@code JarFile} using the contents of file.
Create a new {@code JarFile} from the contents of the file specified by filename.
Create a new {@code JarFile} from the contents of the file specified by {@code filename}.
Return the {@code JarEntry} specified by its name or {@code null} if no such entry exists.
Returns the {@code Manifest} object associated with this {@code JarFile} or {@code null} if no MANIFEST entry exists.
Called by the JarFile constructors, this method reads the contents of the file's META-INF/ directory and picks out the MANIFEST.MF file and verifier signature files if they exist. Any signature files found are registered with the verifier.
Returns all the ZipEntry's that relate to files in the JAR's META-INF directory.
Constructs a new {@code JarInputStream} from an input stream.
Returns the {@code Manifest} object associated with this {@code JarInputStream} or {@code null} if no manifest entry exists.
Returns the next {@code JarEntry} contained in this stream or {@code null} if no more entries are present.
Constructs a new {@code JarOutputStream} using an output stream. The content of the {@code Manifest} must match the JAR entry information written subsequently to the stream.
Constructs a new {@code JarOutputStream} using an arbitrary output stream.
Verifies that the digests stored in the manifest match the decrypted digests from the .SF file. This indicates the validity of the signing, not the integrity of the file, as it's digest must be calculated and verified when its contents are read.
Constructs and returns a new instance of {@code JarVerifier}.
Invoked for each new JAR entry read operation from the input stream. This method constructs and returns a new {@link VerifierEntry} which contains the certificates used to sign the entry and its hash value as specified in the JAR MANIFEST format.
Add a new meta entry to the internal collection of data held on each JAR entry in the {@code META-INF} directory including the manifest file itself. Files associated with the signing of a JAR would also be added to this collection.
If the associated JAR file is signed, check on the validity of all of the known signatures.
Associate this verifier with the specified {@link Manifest} object.
Returns a <code>boolean</code> indication of whether or not the associated jar file is signed.
Returns all of the {@link java.security.cert.Certificate} instances that were used to verify the signature on the JAR entry called {@code name}.
Remove all entries from the internal collection of data held about each JAR entry in the {@code META-INF} directory.
Returns a {@code Vector} of all of the {@link java.security.cert.Certificate}s that are associated with the signing of the named signature file.
Creates a new {@code Manifest} instance using the attributes obtained from the input stream.
Resets the both the main attributes as well as the entry attributes associated with this {@code Manifest}.
Returns the {@code Attributes} associated with the parameter entry {@code name}.
Returns a map containing the {@code Attributes} for each entry in the {@code Manifest}.
Returns the main {@code Attributes} of the {@code JarFile}.
Writes out the attribute information of the receiver to the specified {@code OutputStream}.
Merges name/attribute pairs read from the input stream {@code is} into this manifest.
Returns a byte[] containing all the bytes from a ByteArrayInputStream. Where possible, this returns the actual array rather than a copy.
Writes out the attribute information of the specified manifest to the specified {@code OutputStream}
Prevent this class from being instantiated.
Returns a new instance of a packer engine. <p> The implementation of the packer engine is defined by the system property {@code 'java.util.jar.Pack200.Packer'}. If this system property is defined an instance of the specified class is returned, otherwise the system's default implementation is returned.
Returns a new instance of a unpacker engine. <p> The implementation of the unpacker engine is defined by the system property {@code 'java.util.jar.Pack200.Unpacker'}. If this system property is defined an instance of the specified class is returned, otherwise the system's default implementation is returned.
Pack the specified JAR file to the specified output stream.
Constructs a {@code ConsoleHandler} object.
Reports an error using the given message, exception and error code. This implementation will write out the message to {@link System#err} on the first call and all subsequent calls are ignored. A subclass of this class should override this method.
Construct a {@code FileHandler} using {@code LogManager} properties or their default value.
init properties
Transform the pattern to the valid file name, replacing any patterns, and applying generation and uniqueID if present.
get boolean LogManager property, if invalid value got, using default value
get String LogManager property, if invalid value got, using default value
get int LogManager property, if invalid value got, using default value
Constructs a new {@code FileHandler}. The given name pattern is used as output filename, the file limit is set to zero (no limit), the file count is set to one; the remaining configuration is done using {@code LogManager} properties or their default values. This handler writes to only one file with no size limit.
Construct a new {@code FileHandler}. The given name pattern is used as output filename, the file limit is set to zero (no limit), the file count is initialized to one and the value of {@code append} becomes the new instance's append mode. The remaining configuration is done using {@code LogManager} properties. This handler writes to only one file with no size limit.
Construct a new {@code FileHandler}. The given name pattern is used as output filename, the maximum file size is set to {@code limit} and the file count is initialized to {@code count}. The remaining configuration is done using {@code LogManager} properties. This handler is configured to write to a rotating set of count files, when the limit of bytes has been written to one output file, another file will be opened instead.
Construct a new {@code FileHandler}. The given name pattern is used as output filename, the maximum file size is set to {@code limit}, the file count is initialized to {@code count} and the append mode is set to {@code append}. The remaining configuration is done using {@code LogManager} properties. This handler is configured to write to a rotating set of count files, when the limit of bytes has been written to one output file, another file will be opened instead.
Formats a {@code LogRecord} object into a localized string representation. This is a convenience method for subclasses of {@code Formatter}. <p> The message string is firstly localized using the {@code ResourceBundle} object associated with the supplied {@code LogRecord}. <p> Notice : if message contains "{0", then java.text.MessageFormat is used. Otherwise no formatting is performed.
Gets the head string used to wrap a set of log records. This base class always returns an empty string.
Gets the tail string used to wrap a set of log records. This base class always returns the empty string.
Constructs a {@code Handler} object with a default error manager instance {@code ErrorManager}, the default encoding, and the default logging level {@code Level.ALL}. It has no filter and no formatter.
get a instance from given class name, using Class.forName()
get a instance from given class name, using context classloader
print error message in some format
init the common properties, including filter, level, formatter, and encoding
Gets the character encoding used by this handler, {@code null} for default encoding.
Gets the error manager used by this handler to report errors during logging.
Gets the filter used by this handler.
Gets the formatter used by this handler to format the logging messages.
Gets the logging level of this handler, records with levels lower than this value will be dropped.
Determines whether the supplied log record needs to be logged. The logging levels will be checked as well as the filter.
Reports an error to the error manager associated with this handler, {@code ErrorManager} is used for that purpose. No security checks are done, therefore this is compatible with environments where the caller is non-privileged.
Sets the character encoding used by this handler. A {@code null} value indicates the use of the default encoding. This internal method does not check security.
Sets the character encoding used by this handler, {@code null} indicates a default encoding.
Sets the error manager for this handler.
Sets the filter to be used by this handler.
Sets the formatter to be used by this handler. This internal method does not check security.
Sets the formatter to be used by this handler.
Sets the logging level of the messages logged by this handler, levels lower than this value will be dropped.
Parses a level name into a {@code Level} object.
Constructs an instance of {@code Level} taking the supplied name and level value.
Constructs an instance of {@code Level} taking the supplied name, level value and resource bundle name.
Gets the name of this level.
Gets the name of the resource bundle associated with this level.
Gets the integer value indicating this level.
Serialization helper method to maintain singletons and add any new levels.
Serialization helper to setup transient resource bundle instance.
Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned.
A handler for use when no handler optimization is possible.
We've optimized for the common case: logging to a single handler that implements {@link DalvikLogHandler}. This is how Android framework applications are configured by default. <p>This optimization has been measured to show a 2.75x improvement in throughput in the common case: 154ns vs. 56ns per message on a Cortex-A8. Direct use of {@code android.util.Log} takes 29ns per message. <p>Each time the handler configuration changes, either directly or indirectly, it's necessary to either turn on or off this optimization. When the optimization is off, {@link #dalvikLogHandler} is assigned to {@link #GENERAL_LOG_HANDLER} which can satisfy arbitrary configuration. When the optimization is possible, {@link #dalvikLogHandler} is assigned to the user's efficient implementation. In pratice this is usually the {@code com.android.internal.logging.AndroidHandler}.
Constructs a {@code Logger} object with the supplied name and resource bundle name; {@code notifiyParentHandlers} is set to {@code true}. <p> Notice : Loggers use a naming hierarchy. Thus "z.x.y" is a child of "z.x".
Load the specified resource bundle, use privileged code.
Gets an anonymous logger to use internally in a thread. Anonymous loggers are not registered in the log manager's namespace. No security checks will be performed when updating an anonymous logger's control settings. <p> The anonymous loggers' parent is set to be the root logger. This way it inherits the default logging level and handlers from the root logger.
Gets an anonymous logger to use internally in a thread. Anonymous loggers are not registered in the log manager's namespace. No security checks will be performed when updating an anonymous logger's control settings. <p> The anonymous loggers' parent is set to be the root logger. This way it inherits default logging level and handlers from the root logger.
Initializes this logger's resource bundle.
Gets a named logger. The returned logger may already exist or may be newly created. In the latter case, its level will be set to the configured level according to the {@code LogManager}'s properties.
Gets a named logger associated with the supplied resource bundle. The resource bundle will be used to localize logging messages.
Returns the global {@code Logger}.
Adds a handler to this logger. The {@code name} will be fed with log records received by this logger.
Set the logger's manager and initializes its configuration from the manager's properties.
Gets all the handlers associated with this logger.
Removes a handler from this logger. If the specified handler does not exist then this method has no effect.
Gets the filter used by this logger.
Sets the filter used by this logger.
Gets the logging level of this logger. A {@code null} level indicates that this logger inherits its parent's level.
Sets the logging level for this logger. A {@code null} level indicates that this logger will inherit its parent's level.
Gets the flag which indicates whether to use the handlers of this logger's parent to publish incoming log records, potentially recursively up the namespace.
Sets the flag which indicates whether to use the handlers of this logger's parent, potentially recursively up the namespace.
Gets the nearest parent of this logger in the namespace, a {@code null} value will be returned if called on the root logger.
Sets the parent of this logger in the namespace. This method should be used by the {@code LogManager} object only.
Gets the name of this logger, {@code null} for anonymous loggers.
Gets the loaded resource bundle used by this logger to localize logging messages. If the value is {@code null}, the parent's resource bundle will be inherited.
Gets the name of the loaded resource bundle used by this logger to localize logging messages. If the value is {@code null}, the parent's resource bundle name will be inherited.
This method is for compatibility. Tests written to the reference implementation API imply that the isLoggable() method is not called directly. This behavior is important because subclass may override isLoggable() method, so that affect the result of log methods.
Determines whether this logger will actually log messages of the specified level. The effective level used to do the determination may be inherited from its parent. The default level is {@code Level.INFO}.
Sets the resource bundle and its name for a supplied LogRecord object. This method first tries to use this logger's resource bundle if any, otherwise try to inherit from this logger's parent, recursively up the namespace.
Logs a message indicating that a method has been entered. A log record with log level {@code Level.FINER}, log message "ENTRY", the specified source class name and source method name is submitted for logging.
Logs a message indicating that a method has been entered. A log record with log level {@code Level.FINER}, log message "ENTRY", the specified source class name, source method name and one parameter is submitted for logging.
Logs a message indicating that a method has been entered. A log record with log level {@code Level.FINER}, log message "ENTRY", the specified source class name, source method name and array of parameters is submitted for logging.
Logs a message indicating that a method is exited. A log record with log level {@code Level.FINER}, log message "RETURN", the specified source class name and source method name is submitted for logging.
Logs a message indicating that a method is exited. A log record with log level {@code Level.FINER}, log message "RETURN", the specified source class name, source method name and return value is submitted for logging.
Logs a message indicating that an exception is thrown. A log record with log level {@code Level.FINER}, log message "THROW", the specified source class name, source method name and the {@code Throwable} object is submitted for logging.
Logs a message of level {@code Level.SEVERE}; the message is transmitted to all subscribed handlers.
Logs a message of level {@code Level.WARNING}; the message is transmitted to all subscribed handlers.
Logs a message of level {@code Level.INFO}; the message is transmitted to all subscribed handlers.
Logs a message of level {@code Level.CONFIG}; the message is transmitted to all subscribed handlers.
Logs a message of level {@code Level.FINE}; the message is transmitted to all subscribed handlers.
Logs a message of level {@code Level.FINER}; the message is transmitted to all subscribed handlers.
Logs a message of level {@code Level.FINEST}; the message is transmitted to all subscribed handlers.
Logs a message of the specified level. The message is transmitted to all subscribed handlers.
Logs a message of the specified level with the supplied parameter. The message is then transmitted to all subscribed handlers.
Logs a message of the specified level with the supplied parameter array. The message is then transmitted to all subscribed handlers.
Logs a message of the specified level with the supplied {@code Throwable} object. The message is then transmitted to all subscribed handlers.
Logs a given log record. Only records with a logging level that is equal or greater than this logger's level will be submitted to this logger's handlers for logging. If {@code getUseParentHandlers()} returns {@code true}, the log record will also be submitted to the handlers of this logger's parent, potentially recursively up the namespace. <p> Since all other log methods call this method to actually perform the logging action, subclasses of this class can override this method to catch all logging activities. </p>
Logs a message of the given level with the specified source class name and source method name.
Logs a message of the given level with the specified source class name, source method name and parameter.
Logs a message of the given level with the specified source class name, source method name and parameter array.
Logs a message of the given level with the specified source class name, source method name and {@code Throwable} object.
Logs a message of the given level with the specified source class name and source method name, using the given resource bundle to localize the message. If {@code bundleName} is null, the empty string or not valid then the message is not localized.
Logs a message of the given level with the specified source class name, source method name and parameter, using the given resource bundle to localize the message. If {@code bundleName} is null, the empty string or not valid then the message is not localized.
Logs a message of the given level with the specified source class name, source method name and parameter array, using the given resource bundle to localize the message. If {@code bundleName} is null, the empty string or not valid then the message is not localized.
Logs a message of the given level with the specified source class name, source method name and {@code Throwable} object, using the given resource bundle to localize the message. If {@code bundleName} is null, the empty string or not valid then the message is not localized.
Get the {@code LoggingMXBean} instance. this implementation always throws an UnsupportedOperationException.
Default constructor. This is not public because there should be only one {@code LogManager} instance, which can be get by {@code LogManager.getLogManager()}. This is protected so that application can subclass the object.
Add a given logger into the hierarchical namespace. The {@code Logger.addLogger()} factory methods call this method to add newly created Logger. This returns false if a logger with the given name has existed in the namespace <p> Note that the {@code LogManager} may only retain weak references to registered loggers. In order to prevent {@code Logger} objects from being unexpectedly garbage collected it is necessary for <i>applications</i> to maintain references to them. </p>
Get the logger with the given name.
Get a {@code Enumeration} of all registered logger names.
Get the global {@code LogManager} instance.
Get the value of property with given name.
Re-initialize the properties and configuration. The initialization process is same as the {@code LogManager} instantiation. <p> Notice : No {@code PropertyChangeEvent} are fired. </p>
use SystemClassLoader to load class from system classpath
actual initialization process from a given input stream
Re-initialize the properties and configuration from the given {@code InputStream} <p> Notice : No {@code PropertyChangeEvent} are fired. </p>
Reset configuration. <p>All handlers are closed and removed from any named loggers. All loggers' level is set to null, except the root logger's level is set to {@code Level.INFO}.
Add a {@code PropertyChangeListener}, which will be invoked when the properties are reread.
Remove a {@code PropertyChangeListener}, do nothing if the given listener is not found.
Returns a named logger associated with the supplied resource bundle.
Sets the parent of this logger in the namespace. Callers must first {@link #checkAccess() check security}.
Sets the level on {@code logger} to {@code newLevel}. Any child loggers currently inheriting their level from {@code logger} will be updated recursively.
Constructs a {@code LogRecord} object using the supplied the logging level and message. The millis property is set to the current time. The sequence property is set to a new unique value, allocated in increasing order within the VM. The thread ID is set to a unique value for the current thread. All other properties are set to {@code null}.
Gets the logging level.
Sets the logging level.
Gets the name of the logger.
Sets the name of the logger.
Gets the raw message.
Sets the raw message. When this record is formatted by a logger that has a localization resource bundle that contains an entry for {@code message}, then the raw message is replaced with its localized version.
Gets the time when this event occurred, in milliseconds since 1970.
Sets the time when this event occurred, in milliseconds since 1970.
Gets the parameters.
Sets the parameters.
Gets the resource bundle used to localize the raw message during formatting.
Sets the resource bundle used to localize the raw message during formatting.
Gets the name of the resource bundle.
Sets the name of the resource bundle.
Gets the sequence number.
Sets the sequence number. It is usually not necessary to call this method to change the sequence number because the number is allocated when this instance is constructed.
Gets the name of the class that is the source of this log record. This information can be changed, may be {@code null} and is untrusted.
Init the sourceClass and sourceMethod fields.
Sets the name of the class that is the source of this log record.
Gets the name of the method that is the source of this log record.
Sets the name of the method that is the source of this log record.
Gets a unique ID of the thread originating the log record. Every thread becomes a different ID. <p> Notice : the ID doesn't necessary map the OS thread ID </p>
Sets the ID of the thread originating this log record.
Gets the {@code Throwable} object associated with this log record.
Sets the {@code Throwable} object associated with this log record.
Customized serialization.
Customized deserialization.
Default constructor, construct and init a {@code MemoryHandler} using {@code LogManager} properties or default values.
Construct and init a {@code MemoryHandler} using given target, size and push level, other properties using {@code LogManager} properties or default values.
Put a given {@code LogRecord} into internal buffer. If given record is not loggable, just return. Otherwise it is stored in the buffer. Furthermore if the record's level is not less than the push level, the push action is triggered to output all the buffered records to the target handler, and the target handler will publish them.
Return the push level.
Triggers a push action to output all buffered records to the target handler, and the target handler will publish them. Then the buffer is cleared.
Set the push level. The push level is used to check the push action triggering. When a new {@code LogRecord} is put into the internal buffer and its level is not less than the push level, the push action will be triggered. Note that set new push level won't trigger push action.
Constructs a {@code SocketHandler} object using the properties read by the log manager, including the host name and port number. Default formatting uses the XMLFormatter class and level is set to ALL.
Constructs a {@code SocketHandler} object using the specified host name and port number together with other properties read by the log manager. Default formatting uses the XMLFormatter class and level is set to ALL.
Initialize the socket connection and prepare the output stream
Constructs a {@code StreamHandler} object. The new stream handler does not have an associated output stream.
Constructs a {@code StreamHandler} object with the supplied output stream. Default properties are read.
Constructs a {@code StreamHandler} object. The specified default values will be used if the corresponding properties are not found in the log manager's properties.
Constructs a {@code StreamHandler} object with the supplied output stream and formatter.
initialize the writer
Write a string to the output stream.
Sets the output stream this handler writes to. Note it does nothing else.
Sets the output stream this handler writes to. If there's an existing output stream, the tail string of the associated formatter will be written to it. Then it will be flushed, closed and replaced with {@code os}.
Closes this handler, but the underlying output stream is only closed if {@code closeStream} is {@code true}. Security is not checked.
----------------------------------------------------------- Constructors ----------------------------------------------------------- Constructs a new {@code AbstractPreferences} instance using the given parent node and node name.
----------------------------------------------------------- Methods ----------------------------------------------------------- Returns an array of all cached child nodes.
Returns the child node with the specified name or {@code null} if it doesn't exist. Implementers can assume that the name supplied to this method will be a valid node name string (conforming to the node naming format) and will not correspond to a node that has been cached or removed.
Returns whether this node has been removed by invoking the method {@code removeNode()}.
Flushes changes of this node to the backing store. This method should only flush this node and should not include the descendant nodes. Any implementation that wants to provide functionality to flush all nodes at once should override the method {@link #flush() flush()}.
Constructs a new {@code BackingStoreException} instance with a detailed exception message.
Constructs a new {@code BackingStoreException} instance with a nested {@code Throwable}.
Construct root <code>FilePreferencesImpl</code> instance, construct user root if userNode is true, system root otherwise
Construct a prefs using given parent and given name
Constructs a new {@code InvalidPreferencesFormatException} instance with a detailed exception message.
Constructs a new {@code InvalidPreferencesFormatException} instance with a detailed exception message and a nested {@code Throwable}.
Constructs a new {@code InvalidPreferencesFormatException} instance with a nested {@code Throwable}.
Constructs a new {@code NodeChangeEvent} instance.
Gets the {@code Preferences} instance that fired this event.
Gets the child {@code Preferences} node that was added or removed.
This method always throws a <code>NotSerializableException</code>, because this object cannot be serialized,
This method always throws a <code>NotSerializableException</code>, because this object cannot be serialized,
Construct a new {@code PreferenceChangeEvent} instance.
Gets the key of the changed preference.
Gets the new value of the changed preference or {@code null} if the preference has been removed.
Gets the {@code Preferences} instance that fired this event.
Returns the names of all children of this node or an empty array if this node has no children.
Returns all preference keys stored in this node or an empty array if no key was found.
Returns the root node of the system preference hierarchy.
Returns the user preference node for the package of the given class. The absolute path of the returned node is one slash followed by the given class's full package name, replacing each period character ('.') with a slash. For example, the absolute path of the preference associated with the class Object would be "/java/lang". As a special case, the unnamed package is associated with a preference node "/&lt;unnamed&gt;". This method will create the node and its ancestors as needed. Any nodes created by this method won't necessarily be persisted until the method {@code flush()} is invoked.
parse node's absolute path from class instance
Returns the root node of the user preference hierarchy.
utilities for Preferences export
utilities for Preferences import
TODO dirty implementation of a method from javax.xml.xpath should be replaced with a call to a good impl of this method
Returns the preferences from {@code xmlFile}. Returns empty properties if any errors occur.
Writes the preferences to {@code xmlFile}.
Creates a matcher for a given combination of pattern and input. Both elements can be changed later on.
Appends a literal part of the input plus a replacement for the current match to a given {@link StringBuffer}. The literal part is exactly the part of the input between the previous match and the current match. The method can be used in conjunction with {@link #find()} and {@link #appendTail(StringBuffer)} to walk through the input and replace all occurrences of the {@code Pattern} with something else.
Internal helper method to append a given string to a given string buffer. If the string contains any references to groups, these are replaced by the corresponding group's contents.
Resets the {@code Matcher}. This results in the region being set to the whole input. Results of a previous find get lost. The next attempt to find an occurrence of the {@link Pattern} in the string will start at the beginning of the input.
Provides a new input and resets the {@code Matcher}. This results in the region being set to the whole input. Results of a previous find get lost. The next attempt to find an occurrence of the {@link Pattern} in the string will start at the beginning of the input.
Resets the Matcher. A new input sequence and a new region can be specified. Results of a previous find get lost. The next attempt to find an occurrence of the Pattern in the string will start at the beginning of the region. This is the internal version of reset() to which the several public versions delegate.
Sets a new pattern for the {@code Matcher}. Results of a previous find get lost. The next attempt to find an occurrence of the {@link Pattern} in the string will start at the beginning of the input.
Resets this matcher and sets a region. Only characters inside the region are considered for a match.
Appends the (unmatched) remainder of the input to the given {@link StringBuffer}. The method can be used in conjunction with {@link #find()} and {@link #appendReplacement(StringBuffer, String)} to walk through the input and replace all matches of the {@code Pattern} with something else.
Replaces the first occurrence of this matcher's pattern in the input with a given string.
Replaces all occurrences of this matcher's pattern in the input with a given string.
Returns the {@link Pattern} instance used inside this matcher.
Returns the text that matched a given group of the regular expression. Explicit capturing groups in the pattern are numbered left to right in order of their <i>opening</i> parenthesis, starting at 1. The special group 0 represents the entire match (as if the entire pattern is surrounded by an implicit capturing group). For example, "a((b)c)" matching "abc" would give the following groups: <pre> 0 "abc" 1 "bc" 2 "b" </pre> <p>An optional capturing group that failed to match as part of an overall successful match (for example, "a(b)?c" matching "ac") returns null. A capturing group that matched the empty string (for example, "a(b?)c" matching "ac") returns the empty string.
Returns the text that matched the whole regular expression.
Returns the next occurrence of the {@link Pattern} in the input. The method starts the search from the given character in the input.
Returns the next occurrence of the {@link Pattern} in the input. If a previous match was successful, the method continues the search from the first character following that match in the input. Otherwise it searches either from the region start (if one has been set), or from position 0.
Tries to match the {@link Pattern}, starting from the beginning of the region (or the beginning of the input, if no region has been set). Doesn't require the {@code Pattern} to match against the whole region.
Tries to match the {@link Pattern} against the entire region (or the entire input, if no region has been set).
Returns the index of the first character of the text that matched a given group.
Returns the index of the first character following the text that matched a given group.
Returns a replacement string for the given one that has all backslashes and dollar signs escaped.
Returns the index of the first character of the text that matched the whole regular expression.
Returns the number of groups in the results, which is always equal to the number of groups in the original regular expression.
Returns the index of the first character following the text that matched the whole regular expression.
Converts the current match into a separate {@link MatchResult} instance that is independent from this matcher. The new object is unaffected when the state of this matcher changes.
Determines whether this matcher has anchoring bounds enabled or not. When anchoring bounds are enabled, the start and end of the input match the '^' and '$' meta-characters, otherwise not. Anchoring bounds are enabled by default.
Indicates whether this matcher has anchoring bounds enabled. When anchoring bounds are enabled, the start and end of the input match the '^' and '$' meta-characters, otherwise not. Anchoring bounds are enabled by default.
Determines whether this matcher has transparent bounds enabled or not. When transparent bounds are enabled, the parts of the input outside the region are subject to lookahead and lookbehind, otherwise they are not. Transparent bounds are disabled by default.
Makes sure that a successful match has been made. Is invoked internally from various places in the class.
Indicates whether this matcher has transparent bounds enabled. When transparent bounds are enabled, the parts of the input outside the region are subject to lookahead and lookbehind, otherwise they are not. Transparent bounds are disabled by default.
Returns this matcher's region start, that is, the first character that is considered for a match.
Returns this matcher's region end, that is, the first character that is not considered for a match.
Indicates whether more input might change a successful match into an unsuccessful one.
Indicates whether the last match hit the end of the input.
Returns a {@link Matcher} for this pattern applied to the given {@code input}. The {@code Matcher} can be used to match the {@code Pattern} against the whole input, find occurrences of the {@code Pattern} in the input, or replace parts of the input.
Splits the given {@code input} at occurrences of this pattern. <p>If this pattern does not occur in the input, the result is an array containing the input (converted from a {@code CharSequence} to a {@code String}). <p>Otherwise, the {@code limit} parameter controls the contents of the returned array as described below.
Equivalent to {@code split(input, 0)}.
Returns the regular expression supplied to {@code compile}.
Returns the flags supplied to {@code compile}.
Returns a compiled form of the given {@code regularExpression}, as modified by the given {@code flags}. See the <a href="#flags">flags overview</a> for more on flags.
Equivalent to {@code Pattern.compile(pattern, 0)}.
Tests whether the given {@code regularExpression} matches the given {@code input}. Equivalent to {@code Pattern.compile(regularExpression).matcher(input).matches()}. If the same regular expression is to be used for multiple operations, it may be more efficient to reuse a compiled {@code Pattern}.
Quotes the given {@code string} using "\Q" and "\E", so that all meta-characters lose their special meaning. This method correctly escapes embedded instances of "\Q" or "\E". If the entire result is to be passed verbatim to {@link #compile}, it's usually clearer to use the {@link #LITERAL} flag instead.
Creates a new PatternSyntaxException for a given message, pattern, and error index.
Returns the syntactically incorrect regular expression.
Returns the description of the syntax error, or {@code null} if the description is not known.
Returns the character index around which the error occurred, or -1 if the index is not known.
Returns a result equivalent to {@code s.split(separator, limit)} if it's able to compute it more cheaply than ICU, or null if the caller should fall back to using ICU.
Default constructor, for use by subclasses.
Default constructor, for use by subclasses.
Default constructor, for use by subclasses.
Default constructor, for use by subclasses.
Returns the {@code Adler32} checksum for all input received.
Reset this instance to its initial checksum.
Update this {@code Adler32} checksum with the single byte provided as argument.
Update this {@code Adler32} checksum using the contents of {@code buf}.
Update this {@code Adler32} checksum with the contents of {@code buf}, starting from {@code offset} and reading {@code byteCount} bytes of data.
Constructs a new {@code CheckedInputStream} on {@code InputStream} {@code is}. The checksum will be calculated using the algorithm implemented by {@code csum}. <p><strong>Warning:</strong> passing a null source creates an invalid {@code CheckedInputStream}. All operations on such a stream will fail.
Returns the checksum calculated on the stream read so far.
Constructs a new {@code CheckedOutputStream} on {@code OutputStream} {@code os}. The checksum is calculated using the algorithm implemented by {@code csum}.
Returns the CRC32 checksum for all input received.
Resets the CRC32 checksum to it initial state.
Updates this checksum with the byte value provided as integer.
Updates this checksum with the bytes contained in buffer {@code buf}.
Update this {@code CRC32} checksum with the contents of {@code buf}, starting from {@code offset} and reading {@code byteCount} bytes of data.
Constructs a new {@code DataFormatException} instance with the specified message.
Constructs a new {@code Deflater} instance using the default compression level. The strategy can be specified with {@link #setStrategy}. A header is added to the output by default; use {@link #Deflater(int, boolean)} if you need to omit the header.
Constructs a new {@code Deflater} instance using compression level {@code level}. The strategy can be specified with {@link #setStrategy}. A header is added to the output by default; use {@link #Deflater(int, boolean)} if you need to omit the header.
Constructs a new {@code Deflater} instance with a specific compression level. If {@code noHeader} is true, no ZLIB header is added to the output. In a ZIP archive every entry (compressed file) comes with such a header. The strategy can be specified using {@link #setStrategy}.
Deflates the data (previously passed to {@link #setInput setInput}) into the supplied buffer.
Deflates data (previously passed to {@link #setInput setInput}) into a specific region within the supplied buffer.
Deflates data (previously passed to {@link #setInput setInput}) into a specific region within the supplied buffer, optionally flushing the input buffer.
Frees all resources held onto by this deflating algorithm. Any unused input or output is discarded. This method should be called explicitly in order to free native resources as soon as possible. After {@code end()} is called, other methods will typically throw {@code IllegalStateException}.
Indicates to the {@code Deflater} that all uncompressed input has been provided to it.
Returns true if {@link #finish finish} has been called and all data provided by {@link #setInput setInput} has been successfully compressed and consumed by {@link #deflate deflate}.
Returns the {@link Adler32} checksum of the uncompressed data read so far.
Returns the total number of bytes of input read by this {@code Deflater}. This method is limited to 32 bits; use {@link #getBytesRead} instead.
Returns the total number of bytes written to the output buffer by this {@code Deflater}. The method is limited to 32 bits; use {@link #getBytesWritten} instead.
Returns true if {@link #setInput setInput} must be called before deflation can continue. If all uncompressed data has been provided to the {@code Deflater}, {@link #finish} must be called to ensure the compressed data is output.
Resets the {@code Deflater} to accept new input without affecting any previously made settings for the compression strategy or level. This operation <i>must</i> be called after {@link #finished} returns true if the {@code Deflater} is to be reused.
Sets the dictionary to be used for compression by this {@code Deflater}. This method can only be called if this {@code Deflater} supports the writing of ZLIB headers. This is the default, but can be overridden using {@link #Deflater(int, boolean)}.
Sets the input buffer the {@code Deflater} will use to extract uncompressed bytes for later compression.
Sets the compression level to be used when compressing data. The compression level must be a value between 0 and 9. This value must be set prior to calling {@link #setInput setInput}.
Sets the compression strategy to be used. The strategy must be one of FILTERED, HUFFMAN_ONLY or DEFAULT_STRATEGY. This value must be set prior to calling {@link #setInput setInput}.
Returns the total number of bytes read by the {@code Deflater}. This method is the same as {@link #getTotalIn} except that it returns a {@code long} value instead of an integer.
Returns a the total number of bytes written by this {@code Deflater}. This method is the same as {@code getTotalOut} except it returns a {@code long} value instead of an integer.
Constructs a {@code DeflaterInputStream} with a new {@code Deflater} and an implementation-defined default internal buffer size. {@code in} is a source of uncompressed data, and this stream will be a source of compressed data.
Constructs a {@code DeflaterInputStream} with the given {@code Deflater} and an implementation-defined default internal buffer size. {@code in} is a source of uncompressed data, and this stream will be a source of compressed data.
Constructs a {@code DeflaterInputStream} with the given {@code Deflater} and given internal buffer size. {@code in} is a source of uncompressed data, and this stream will be a source of compressed data.
Reads a byte from the compressed input stream. The result will be a byte of compressed data corresponding to an uncompressed byte or bytes read from the underlying stream.
Reads compressed data into a byte buffer. The result will be bytes of compressed data corresponding to an uncompressed byte or bytes read from the underlying stream.
This constructor lets you pass the {@code Deflater} specifying the compression algorithm.
This is the most basic constructor. You only need to pass the {@code OutputStream} to which the compressed data shall be written to. The default settings for the {@code Deflater} and internal buffer are used. In particular the {@code Deflater} produces a ZLIB header in the output stream.
This constructor lets you specify both the compression algorithm as well as the internal buffer size to be used.
Compress the data in the input buffer and write it to the underlying stream.
Writes any unwritten data to the underlying stream. Does not close the stream.
Compresses {@code byteCount} bytes of data from {@code buf} starting at {@code offset} and writes it to the underlying stream.
Flushes the underlying stream. This flushes only the bytes that can be compressed at the highest level. <p>For deflater output streams constructed with Java 7's {@code syncFlush} parameter set to true (not yet available on Android), this first flushes all outstanding data so that it may be immediately read by its recipient. Doing so may degrade compression.
Construct a {@code GZIPInputStream} to read from GZIP data from the underlying stream.
Construct a {@code GZIPInputStream} to read from GZIP data from the underlying stream. Set the internal buffer size to {@code size}.
Construct a new {@code GZIPOutputStream} to write data in GZIP format to the underlying stream.
Construct a new {@code GZIPOutputStream} to write data in GZIP format to the underlying stream. Set the internal compression buffer to size {@code size}.
This constructor creates an inflater that expects a header from the input stream. Use {@link #Inflater(boolean)} if the input comes without a ZLIB header.
This constructor allows to create an inflater that expects no header from the input stream.
Releases resources associated with this {@code Inflater}. Any unused input or output is discarded. This method should be called explicitly in order to free native resources as soon as possible. After {@code end()} is called, other methods will typically throw {@code IllegalStateException}.
Indicates if the {@code Inflater} has inflated the entire deflated stream. If deflated bytes remain and {@link #needsInput} returns {@code true} this method will return {@code false}. This method should be called after all deflated input is supplied to the {@code Inflater}.
Returns the {@link Adler32} checksum of the bytes inflated so far, or the checksum of the preset dictionary if {@link #needsDictionary} returns true.
Returns the total number of bytes read by the {@code Inflater}. This method is the same as {@link #getTotalIn} except that it returns a {@code long} value instead of an integer.
Returns a the total number of bytes written by this {@code Inflater}. This method is the same as {@code getTotalOut} except it returns a {@code long} value instead of an integer.
Returns the number of bytes of current input remaining to be read by this inflater.
Returns the total number of bytes of input read by this {@code Inflater}. This method is limited to 32 bits; use {@link #getBytesRead} instead.
Returns the total number of bytes written to the output buffer by this {@code Inflater}. The method is limited to 32 bits; use {@link #getBytesWritten} instead.
Inflates bytes from the current input and stores them in {@code buf}.
Inflates up to {@code byteCount} bytes from the current input and stores them in {@code buf} starting at {@code offset}.
Returns true if the input bytes were compressed with a preset dictionary. This method should be called if the first call to {@link #inflate} returns 0, to determine whether a dictionary is required. If so, {@link #setDictionary} should be called with the appropriate dictionary before calling {@code inflate} again. Use {@link #getAdler} to determine which dictionary is required.
Returns true if {@link #setInput} must be called before inflation can continue.
Resets this {@code Inflater}. Should be called prior to inflating a new set of data.
Sets the preset dictionary to be used for inflation to {@code dictionary}. See {@link #needsDictionary} for details.
Sets the preset dictionary to be used for inflation to a subsequence of {@code dictionary} starting at {@code offset} and continuing for {@code byteCount} bytes. See {@link #needsDictionary} for details.
Sets the current input to to be decompressed. This method should only be called if {@link #needsInput} returns {@code true}.
This is the most basic constructor. You only need to pass the {@code InputStream} from which the compressed data is to be read from. Default settings for the {@code Inflater} and internal buffer are be used. In particular the Inflater expects a ZLIB header from the input stream.
This constructor lets you pass a specifically initialized Inflater, for example one that expects no ZLIB header.
This constructor lets you specify both the {@code Inflater} as well as the internal buffer size to be used.
Reads a single byte of decompressed data.
Fills the input buffer with data to be decompressed.
Constructs an {@code InflaterOutputStream} with a new {@code Inflater} and an implementation-defined default internal buffer size. {@code out} is a destination for uncompressed data, and compressed data will be written to this stream.
Constructs an {@code InflaterOutputStream} with the given {@code Inflater} and an implementation-defined default internal buffer size. {@code out} is a destination for uncompressed data, and compressed data will be written to this stream.
Constructs an {@code InflaterOutputStream} with the given {@code Inflater} and given internal buffer size. {@code out} is a destination for uncompressed data, and compressed data will be written to this stream.
Finishes writing current uncompressed data into the InflaterOutputStream without closing it.
Constructs a new {@code ZipEntry} with the specified name.
Gets the comment for this {@code ZipEntry}.
Gets the compressed size of this {@code ZipEntry}.
Gets the checksum for this {@code ZipEntry}.
Gets the extra information for this {@code ZipEntry}.
Gets the compression method for this {@code ZipEntry}.
Gets the name of this {@code ZipEntry}.
Gets the uncompressed size of this {@code ZipEntry}.
Gets the last modification time of this {@code ZipEntry}.
Determine whether or not this {@code ZipEntry} is a directory.
Sets the comment for this {@code ZipEntry}.
Sets the compressed size for this {@code ZipEntry}.
Sets the checksum for this {@code ZipEntry}.
Sets the extra information for this {@code ZipEntry}.
Sets the compression method for this {@code ZipEntry}.
Sets the uncompressed size of this {@code ZipEntry}.
Sets the modification time of this {@code ZipEntry}.
Constructs a new {@code ZipEntry} using the values obtained from {@code ze}.
Returns a deep copy of this zip entry.
Internal constructor.  Creates a new ZipEntry by reading the Central Directory Entry from "in", which must be positioned at the CDE signature. On exit, "in" will be positioned at the start of the next entry.
Constructs a ZipError with the given detail message.
Constructs a new {@code ZipException} instance with the specified message.
Constructs a new {@code ZipFile} with the specified file.
Opens a file as <i>ZIP-archive</i>. "mode" must be {@code OPEN_READ} or {@code OPEN_DELETE} . The latter sets the "delete on exit" flag through a file.
Opens a ZIP archived file.
Closes this ZIP file. This method is idempotent.
Returns an enumeration of the entries. The entries are listed in the order in which they appear in the ZIP archive.
Gets the ZIP entry with the specified name from this {@code ZipFile}.
Returns an input stream on the data of the specified {@code ZipEntry}.
Gets the file name of this {@code ZipFile}.
Returns the number of {@code ZipEntries} in this {@code ZipFile}.
Find the central directory and read the contents. <p>The central directory can be followed by a variable-length comment field, so we have to scan through it backwards.  The comment is at most 64K, plus we have 18 bytes for the end-of-central-dir stuff itself, plus apparently sometimes people throw random junk on the end just for the fun of it. <p>This is all a little wobbly.  If the wrong value ends up in the EOCD area, we're hosed. This appears to be the way that everybody handles it though, so we're in good company if this fails.
Constructs a new {@code ZipInputStream} from the specified input stream.
Closes the current ZIP entry and positions to read the next entry.
Reads the next entry from this {@code ZipInputStream} or {@code null} if no more entries are present.
creates a {@link ZipEntry } with the given name.
Constructs a new {@code ZipOutputStream} with the specified output stream.
Closes the current {@code ZipEntry}. Any entry terminal data is written to the underlying stream.
Writes entry information to the underlying stream. Data associated with the entry can then be written using {@code write()}. After data is written {@code closeEntry()} must be called to complete the writing of the entry to the underlying stream.
Sets the {@code ZipFile} comment associated with the file being written.
Sets the compression level to be used for writing entry data. This level may be set on a per entry basis. The level must have a value between -1 and 8 according to the {@code Deflater} compression level bounds.
Sets the compression method to be used when compressing entry data. method must be one of {@code STORED} (for no compression) or {@code DEFLATED}.
Attempts to add all of the objects contained in {@code collection} to the contents of this {@code Collection} (optional). This implementation iterates over the given {@code Collection} and calls {@code add} for each element. If any of these calls return {@code true}, then {@code true} is returned as result of this method call, {@code false} otherwise. If this {@code Collection} does not support adding elements, an {@code UnsupportedOperationException} is thrown. <p> If the passed {@code Collection} is changed during the process of adding elements to this {@code Collection}, the behavior depends on the behavior of the passed {@code Collection}.
Removes all elements from this {@code Collection}, leaving it empty (optional). This implementation iterates over this {@code Collection} and calls the {@code remove} method on each element. If the iterator does not support removal of elements, an {@code UnsupportedOperationException} is thrown. <p> Concrete implementations usually can clear a {@code Collection} more efficiently and should therefore overwrite this method.
Tests whether this {@code Collection} contains the specified object. This implementation iterates over this {@code Collection} and tests, whether any element is equal to the given object. If {@code object != null} then {@code object.equals(e)} is called for each element {@code e} returned by the iterator until the element is found. If {@code object == null} then each element {@code e} returned by the iterator is compared with the test {@code e == null}.
Tests whether this {@code Collection} contains all objects contained in the specified {@code Collection}. This implementation iterates over the specified {@code Collection}. If one element returned by the iterator is not contained in this {@code Collection}, then {@code false} is returned; {@code true} otherwise.
Returns if this {@code Collection} contains no elements. This implementation tests, whether {@code size} returns 0.
Removes one instance of the specified object from this {@code Collection} if one is contained (optional). This implementation iterates over this {@code Collection} and tests for each element {@code e} returned by the iterator, whether {@code e} is equal to the given object. If {@code object != null} then this test is performed using {@code object.equals(e)}, otherwise using {@code object == null}. If an element equal to the given object is found, then the {@code remove} method is called on the iterator and {@code true} is returned, {@code false} otherwise. If the iterator does not support removing elements, an {@code UnsupportedOperationException} is thrown.
Removes all occurrences in this {@code Collection} of each object in the specified {@code Collection} (optional). After this method returns none of the elements in the passed {@code Collection} can be found in this {@code Collection} anymore. <p> This implementation iterates over this {@code Collection} and tests for each element {@code e} returned by the iterator, whether it is contained in the specified {@code Collection}. If this test is positive, then the {@code remove} method is called on the iterator. If the iterator does not support removing elements, an {@code UnsupportedOperationException} is thrown.
Removes all objects from this {@code Collection} that are not also found in the {@code Collection} passed (optional). After this method returns this {@code Collection} will only contain elements that also can be found in the {@code Collection} passed to this method. <p> This implementation iterates over this {@code Collection} and tests for each element {@code e} returned by the iterator, whether it is contained in the specified {@code Collection}. If this test is negative, then the {@code remove} method is called on the iterator. If the iterator does not support removing elements, an {@code UnsupportedOperationException} is thrown.
Inserts the specified object into this List at the specified location. The object is inserted before any previous element at the specified location. If the location is equal to the size of this List, the object is added at the end. <p> Concrete implementations that would like to support the add functionality must override this method.
Inserts the objects in the specified Collection at the specified location in this List. The objects are added in the order they are returned from the collection's iterator.
Searches this list for the specified object and returns the index of the first occurrence.
Searches this list for the specified object and returns the index of the last occurrence.
Returns a ListIterator on the elements of this list. The elements are iterated in the same order that they occur in the list.
Returns a list iterator on the elements of this list. The elements are iterated in the same order as they occur in the list. The iteration starts at the specified location.
Removes the object at the specified location from this list.
Removes the objects in the specified range from the start to the end index minus one.
Replaces the element at the specified location in this list with the specified object.
Returns a part of consecutive elements of this list as a view. The returned view will be of zero length if start equals end. Any change that occurs in the returned subList will be reflected to the original list, and vice-versa. All the supported optional operations by the original list will also be supported by this subList. <p> This method can be used as a handy method to do some operations on a sub range of the original list, for example {@code list.subList(from, to).clear();} <p> If the original list is modified in other ways than through the returned subList, the behavior of the returned subList becomes undefined. <p> The returned subList is a subclass of AbstractList. The subclass stores offset, size of itself, and modCount of the original list. If the original list implements RandomAccess interface, the returned subList also implements RandomAccess interface. <p> The subList's set(int, Object), get(int), add(int, Object), remove(int), addAll(int, Collection) and removeRange(int, int) methods first check the bounds, adjust offsets and then call the corresponding methods of the original AbstractList. addAll(Collection c) method of the returned subList calls the original addAll(offset + size, c). <p> The listIterator(int) method of the subList wraps the original list iterator. The iterator() method of the subList invokes the original listIterator() method, and the size() method merely returns the size of the subList. <p> All methods will throw a ConcurrentModificationException if the modCount of the original list is not equal to the expected value.
Constructs an instance with the key and value of {@code copyFrom}.
This base implementation throws {@code UnsupportedOperationException} always.
Constructs an instance with the key and value of {@code copyFrom}.
{@inheritDoc} <p>This implementation calls {@code entrySet().clear()}.
{@inheritDoc} <p>This implementation iterates its key set, looking for a key that {@code key} equals.
{@inheritDoc} <p>This implementation iterates its entry set, looking for an entry with a value that {@code value} equals.
{@inheritDoc} <p>This implementation first checks the structure of {@code object}. If it is not a map or of a different size, this returns false. Otherwise it iterates its own entry set, looking up each entry's key in {@code object}. If any value does not equal the other map's value for the same key, this returns false. Otherwise it returns true.
{@inheritDoc} <p>This implementation iterates its entry set, looking for an entry with a key that {@code key} equals.
{@inheritDoc} <p>This implementation iterates its entry set, summing the hashcodes of its entries.
{@inheritDoc} <p>This implementation compares {@code size()} to 0.
{@inheritDoc} <p>This implementation returns a view that calls through this to map. Its iterator transforms this map's entry set iterator to return keys.
{@inheritDoc} <p>This base implementation throws {@code UnsupportedOperationException}.
{@inheritDoc} <p>This implementation iterates through {@code map}'s entry set, calling {@code put()} for each.
{@inheritDoc} <p>This implementation iterates its entry set, removing the entry with a key that {@code key} equals.
{@inheritDoc} <p>This implementation returns its entry set's size.
{@inheritDoc} <p>This implementation composes a string by iterating its entry set. If this map contains itself as a key or a value, the string "(this Map)" will appear in its place.
{@inheritDoc} <p>This implementation returns a view that calls through this to map. Its iterator transforms this map's entry set iterator to return values.
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning <tt>true</tt> upon success and throwing an <tt>IllegalStateException</tt> if no space is currently available. <p>This implementation returns <tt>true</tt> if <tt>offer</tt> succeeds, else throws an <tt>IllegalStateException</tt>.
Retrieves and removes the head of this queue.  This method differs from {@link #poll poll} only in that it throws an exception if this queue is empty. <p>This implementation returns the result of <tt>poll</tt> unless the queue is empty.
Retrieves, but does not remove, the head of this queue.  This method differs from {@link #peek peek} only in that it throws an exception if this queue is empty. <p>This implementation returns the result of <tt>peek</tt> unless the queue is empty.
Removes all of the elements from this queue. The queue will be empty after this call returns. <p>This implementation repeatedly invokes {@link #poll poll} until it returns <tt>null</tt>.
Adds all of the elements in the specified collection to this queue.  Attempts to addAll of a queue to itself result in <tt>IllegalArgumentException</tt>. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress. <p>This implementation iterates over the specified collection, and adds each element returned by the iterator to this queue, in turn.  A runtime exception encountered while trying to add an element (including, in particular, a <tt>null</tt> element) may result in only some of the elements having been successfully added when the associated exception is thrown.
Allocate empty array to hold the given number of elements.
Double the capacity of this deque.  Call only when full, i.e., when head and tail have wrapped around to become equal.
Copies the elements from our element array into the specified array, in order (from first to last element in the deque).  It is assumed that the array is large enough to hold all elements in the deque.
Constructs an empty array deque with an initial capacity sufficient to hold 16 elements.
Constructs an empty array deque with an initial capacity sufficient to hold the specified number of elements.
Constructs a deque containing the elements of the specified collection, in the order they are returned by the collection's iterator.  (The first element returned by the collection's iterator becomes the first element, or <i>front</i> of the deque.)
Inserts the specified element at the end of this deque. <p>This method is equivalent to {@link #add}.
Inserts the specified element at the end of this deque.
Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail). If the deque does not contain the element, it is unchanged. More formally, removes the first element <tt>e</tt> such that <tt>o.equals(e)</tt> (if such an element exists). Returns <tt>true</tt> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).
Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail). If the deque does not contain the element, it is unchanged. More formally, removes the last element <tt>e</tt> such that <tt>o.equals(e)</tt> (if such an element exists). Returns <tt>true</tt> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).
Inserts the specified element at the end of this deque. <p>This method is equivalent to {@link #addLast}.
Inserts the specified element at the end of this deque. <p>This method is equivalent to {@link #offerLast}.
Retrieves and removes the head of the queue represented by this deque. This method differs from {@link #poll poll} only in that it throws an exception if this deque is empty. <p>This method is equivalent to {@link #removeFirst}.
Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns <tt>null</tt> if this deque is empty. <p>This method is equivalent to {@link #pollFirst}.
Retrieves, but does not remove, the head of the queue represented by this deque.  This method differs from {@link #peek peek} only in that it throws an exception if this deque is empty. <p>This method is equivalent to {@link #getFirst}.
Retrieves, but does not remove, the head of the queue represented by this deque, or returns <tt>null</tt> if this deque is empty. <p>This method is equivalent to {@link #peekFirst}.
Pushes an element onto the stack represented by this deque.  In other words, inserts the element at the front of this deque. <p>This method is equivalent to {@link #addFirst}.
Pops an element from the stack represented by this deque.  In other words, removes and returns the first element of this deque. <p>This method is equivalent to {@link #removeFirst()}.
Removes the element at the specified position in the elements array, adjusting head and tail as necessary.  This can result in motion of elements backwards or forwards in the array. <p>This method is called delete rather than remove to emphasize that its semantics differ from those of {@link List#remove(int)}.
Returns <tt>true</tt> if this deque contains no elements.
Returns an iterator over the elements in this deque.  The elements will be ordered from first (head) to last (tail).  This is the same order that elements would be dequeued (via successive calls to {@link #remove} or popped (via successive calls to {@link #pop}).
Returns <tt>true</tt> if this deque contains the specified element. More formally, returns <tt>true</tt> if and only if this deque contains at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.
Removes a single instance of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element <tt>e</tt> such that <tt>o.equals(e)</tt> (if such an element exists). Returns <tt>true</tt> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). <p>This method is equivalent to {@link #removeFirstOccurrence}.
Removes all of the elements from this deque. The deque will be empty after this call returns.
Returns an array containing all of the elements in this deque in proper sequence (from first to last element). <p>The returned array will be "safe" in that no references to it are maintained by this deque.  (In other words, this method must allocate a new array).  The caller is thus free to modify the returned array. <p>This method acts as bridge between array-based and collection-based APIs.
Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.  If the deque fits in the specified array, it is returned therein.  Otherwise, a new array is allocated with the runtime type of the specified array and the size of this deque. <p>If this deque fits in the specified array with room to spare (i.e., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to <tt>null</tt>. <p>Like the {@link #toArray()} method, this method acts as bridge between array-based and collection-based APIs.  Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. <p>Suppose <tt>x</tt> is a deque known to contain only strings. The following code can be used to dump the deque into a newly allocated array of <tt>String</tt>: <pre> Note that <tt>toArray(new Object[0])</tt> is identical in function to <tt>toArray()</tt>.
Returns a copy of this deque.
Serialize this deque. followed by all of its elements (each an object reference) in first-to-last order.
Deserialize this deque.
Constructs a new instance of {@code ArrayList} with the specified initial capacity.
Constructs a new {@code ArrayList} instance with zero initial capacity.
Constructs a new instance of {@code ArrayList} containing the elements of the specified collection.
Adds the specified object at the end of this {@code ArrayList}.
Inserts the specified object into this {@code ArrayList} at the specified location. The object is inserted before any previous element at the specified location. If the location is equal to the size of this {@code ArrayList}, the object is added at the end.
This method controls the growth of ArrayList capacities.  It represents a time-space tradeoff: we don't want to grow lists too frequently (which wastes time and fragments storage), but we don't want to waste too much space in unused excess capacity. NOTE: This method is inlined into {@link #add(Object)} for performance. If you change the method, change it there too!
Adds the objects in the specified collection to this {@code ArrayList}.
This method was extracted to encourage VM to inline callers. TODO: when we have a VM that can actually inline, move the test in here too!
Removes all elements from this {@code ArrayList}, leaving it empty.
Returns a new {@code ArrayList} with the same elements, the same size and the same capacity as this {@code ArrayList}.
Ensures that after this operation the {@code ArrayList} can hold the specified number of elements without further growing.
Returns the number of elements in this {@code ArrayList}.
Searches this {@code ArrayList} for the specified object.
Replaces the element at the specified location in this {@code ArrayList} with the specified object.
Returns a new array containing all elements contained in this {@code ArrayList}.
Returns an array containing all elements contained in this {@code ArrayList}. If the specified array is large enough to hold the elements, the specified array is used, otherwise an array of the same type is created. If the specified array is used and is larger than this {@code ArrayList}, the array element following the collection elements is set to null.
Sets the capacity of this {@code ArrayList} to be the same as the current size.
Returns a {@code List} of the objects in the specified array. The size of the {@code List} cannot be modified, i.e. adding and removing are unsupported, but the elements can be set. Setting an element modifies the underlying array.
Performs a binary search for {@code value} in the ascending sorted array {@code array}. Searching in an unsorted array has an undefined result. It's also undefined which element is found if there are multiple occurrences of the same element.
Performs a binary search for {@code value} in the ascending sorted array {@code array}, in the range specified by fromIndex (inclusive) and toIndex (exclusive). Searching in an unsorted array has an undefined result. It's also undefined which element is found if there are multiple occurrences of the same element.
Performs a binary search for {@code value} in the ascending sorted array {@code array}, using {@code comparator} to compare elements. Searching in an unsorted array has an undefined result. It's also undefined which element is found if there are multiple occurrences of the same element.
Performs a binary search for {@code value} in the ascending sorted array {@code array}, in the range specified by fromIndex (inclusive) and toIndex (exclusive), using {@code comparator} to compare elements. Searching in an unsorted array has an undefined result. It's also undefined which element is found if there are multiple occurrences of the same element.
Fills the specified array with the specified element.
Fills the specified range in the array with the specified element.
Returns a hash code based on the contents of the given array. For any two {@code boolean} arrays {@code a} and {@code b}, if {@code Arrays.equals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.hashCode(a)} equals {@code Arrays.hashCode(b)}. <p> The value returned by this method is the same value as the {@link List#hashCode()} method which is invoked on a {@link List} containing a sequence of {@link Boolean} instances representing the elements of array in the same order. If the array is {@code null}, the return value is 0.
Returns a hash code based on the contents of the given array. For any two not-null {@code int} arrays {@code a} and {@code b}, if {@code Arrays.equals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.hashCode(a)} equals {@code Arrays.hashCode(b)}. <p> The value returned by this method is the same value as the {@link List#hashCode()} method which is invoked on a {@link List} containing a sequence of {@link Integer} instances representing the elements of array in the same order. If the array is {@code null}, the return value is 0.
Returns a hash code based on the contents of the given array. For any two {@code short} arrays {@code a} and {@code b}, if {@code Arrays.equals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.hashCode(a)} equals {@code Arrays.hashCode(b)}. <p> The value returned by this method is the same value as the {@link List#hashCode()} method which is invoked on a {@link List} containing a sequence of {@link Short} instances representing the elements of array in the same order. If the array is {@code null}, the return value is 0.
Returns a hash code based on the contents of the given array. For any two {@code char} arrays {@code a} and {@code b}, if {@code Arrays.equals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.hashCode(a)} equals {@code Arrays.hashCode(b)}. <p> The value returned by this method is the same value as the {@link List#hashCode()} method which is invoked on a {@link List} containing a sequence of {@link Character} instances representing the elements of array in the same order. If the array is {@code null}, the return value is 0.
Returns a hash code based on the contents of the given array. For any two {@code byte} arrays {@code a} and {@code b}, if {@code Arrays.equals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.hashCode(a)} equals {@code Arrays.hashCode(b)}. <p> The value returned by this method is the same value as the {@link List#hashCode()} method which is invoked on a {@link List} containing a sequence of {@link Byte} instances representing the elements of array in the same order. If the array is {@code null}, the return value is 0.
Returns a hash code based on the contents of the given array. For any two {@code long} arrays {@code a} and {@code b}, if {@code Arrays.equals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.hashCode(a)} equals {@code Arrays.hashCode(b)}. <p> The value returned by this method is the same value as the {@link List#hashCode()} method which is invoked on a {@link List} containing a sequence of {@link Long} instances representing the elements of array in the same order. If the array is {@code null}, the return value is 0.
Returns a hash code based on the contents of the given array. For any two {@code float} arrays {@code a} and {@code b}, if {@code Arrays.equals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.hashCode(a)} equals {@code Arrays.hashCode(b)}. <p> The value returned by this method is the same value as the {@link List#hashCode()} method which is invoked on a {@link List} containing a sequence of {@link Float} instances representing the elements of array in the same order. If the array is {@code null}, the return value is 0.
Returns a hash code based on the contents of the given array. For any two {@code double} arrays {@code a} and {@code b}, if {@code Arrays.equals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.hashCode(a)} equals {@code Arrays.hashCode(b)}. <p> The value returned by this method is the same value as the {@link List#hashCode()} method which is invoked on a {@link List} containing a sequence of {@link Double} instances representing the elements of array in the same order. If the array is {@code null}, the return value is 0.
Returns a hash code based on the contents of the given array. If the array contains other arrays as its elements, the hash code is based on their identities not their contents. So it is acceptable to invoke this method on an array that contains itself as an element, either directly or indirectly. <p> For any two arrays {@code a} and {@code b}, if {@code Arrays.equals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.hashCode(a)} equals {@code Arrays.hashCode(b)}. <p> The value returned by this method is the same value as the method Arrays.asList(array).hashCode(). If the array is {@code null}, the return value is 0.
Returns a hash code based on the "deep contents" of the given array. If the array contains other arrays as its elements, the hash code is based on their contents not their identities. So it is not acceptable to invoke this method on an array that contains itself as an element, either directly or indirectly. <p> For any two arrays {@code a} and {@code b}, if {@code Arrays.deepEquals(a, b)} returns {@code true}, it means that the return value of {@code Arrays.deepHashCode(a)} equals {@code Arrays.deepHashCode(b)}. <p> The computation of the value returned by this method is similar to that of the value returned by {@link List#hashCode()} invoked on a {@link List} containing a sequence of instances representing the elements of array in the same order. The difference is: If an element e of array is itself an array, its hash code is computed by calling the appropriate overloading of {@code Arrays.hashCode(e)} if e is an array of a primitive type, or by calling {@code Arrays.deepHashCode(e)} recursively if e is an array of a reference type. The value returned by this method is the same value as the method {@code Arrays.asList(array).hashCode()}. If the array is {@code null}, the return value is 0.
Compares the two arrays.
Compares the two arrays. The values are compared in the same manner as {@code Float.equals()}.
Compares the two arrays. The values are compared in the same manner as {@code Double.equals()}.
Returns {@code true} if the two given arrays are deeply equal to one another. Unlike the method {@code equals(Object[] array1, Object[] array2)}, this method is appropriate for use for nested arrays of arbitrary depth. <p> Two array references are considered deeply equal if they are both {@code null}, or if they refer to arrays that have the same length and the elements at each index in the two arrays are equal. <p> Two {@code null} elements {@code element1} and {@code element2} are possibly deeply equal if any of the following conditions satisfied: <p> {@code element1} and {@code element2} are both arrays of object reference types, and {@code Arrays.deepEquals(element1, element2)} would return {@code true}. <p> {@code element1} and {@code element2} are arrays of the same primitive type, and the appropriate overloading of {@code Arrays.equals(element1, element2)} would return {@code true}. <p> {@code element1 == element2} <p> {@code element1.equals(element2)} would return {@code true}. <p> Note that this definition permits {@code null} elements at any depth. <p> If either of the given arrays contain themselves as elements, the behavior of this method is uncertain.
Sorts the specified array in ascending numerical order.
Sorts the specified range in the array in ascending numerical order.
Checks that the range described by {@code offset} and {@code count} doesn't exceed {@code arrayLength}.
Checks that the range described by {@code start} and {@code end} doesn't exceed {@code len}.
Sorts the specified range in the array in ascending numerical order. The values are sorted according to the order imposed by {@code Double.compareTo()}.
Sorts the specified range in the array in ascending numerical order. The values are sorted according to the order imposed by {@code Float.compareTo()}.
Sorts the specified array in ascending natural order.
Sorts the specified range in the array in ascending natural order. All elements must implement the {@code Comparable} interface and must be comparable to each other without a {@code ClassCastException} being thrown.
Sorts the specified range in the array using the specified {@code Comparator}. All elements must be comparable to each other without a {@code ClassCastException} being thrown.
Sorts the specified array using the specified {@code Comparator}. All elements must be comparable to each other without a {@code ClassCastException} being thrown.
Creates a {@code String} representation of the {@code boolean[]} passed. The result is surrounded by brackets ({@code "[]"}), each element is converted to a {@code String} via the {@link String#valueOf(boolean)} and separated by {@code ", "}. If the array is {@code null}, then {@code "null"} is returned.
Creates a {@code String} representation of the {@code byte[]} passed. The result is surrounded by brackets ({@code "[]"}), each element is converted to a {@code String} via the {@link String#valueOf(int)} and separated by {@code ", "}. If the array is {@code null}, then {@code "null"} is returned.
Creates a {@code String} representation of the {@code char[]} passed. The result is surrounded by brackets ({@code "[]"}), each element is converted to a {@code String} via the {@link String#valueOf(char)} and separated by {@code ", "}. If the array is {@code null}, then {@code "null"} is returned.
Creates a {@code String} representation of the {@code double[]} passed. The result is surrounded by brackets ({@code "[]"}), each element is converted to a {@code String} via the {@link String#valueOf(double)} and separated by {@code ", "}. If the array is {@code null}, then {@code "null"} is returned.
Creates a {@code String} representation of the {@code float[]} passed. The result is surrounded by brackets ({@code "[]"}), each element is converted to a {@code String} via the {@link String#valueOf(float)} and separated by {@code ", "}. If the array is {@code null}, then {@code "null"} is returned.
Creates a {@code String} representation of the {@code int[]} passed. The result is surrounded by brackets ({@code "[]"}), each element is converted to a {@code String} via the {@link String#valueOf(int)} and separated by {@code ", "}. If the array is {@code null}, then {@code "null"} is returned.
Creates a {@code String} representation of the {@code long[]} passed. The result is surrounded by brackets ({@code "[]"}), each element is converted to a {@code String} via the {@link String#valueOf(long)} and separated by {@code ", "}. If the array is {@code null}, then {@code "null"} is returned.
Creates a {@code String} representation of the {@code short[]} passed. The result is surrounded by brackets ({@code "[]"}), each element is converted to a {@code String} via the {@link String#valueOf(int)} and separated by {@code ", "}. If the array is {@code null}, then {@code "null"} is returned.
Creates a {@code String} representation of the {@code Object[]} passed. The result is surrounded by brackets ({@code "[]"}), each element is converted to a {@code String} via the {@link String#valueOf(Object)} and separated by {@code ", "}. If the array is {@code null}, then {@code "null"} is returned.
Creates a <i>"deep"</i> {@code String} representation of the {@code Object[]} passed, such that if the array contains other arrays, the {@code String} representation of those arrays is generated as well. <p> If any of the elements are primitive arrays, the generation is delegated to the other {@code toString} methods in this class. If any element contains a reference to the original array, then it will be represented as {@code "[...]"}. If an element is an {@code Object[]}, then its representation is generated by a recursive call to this method. All other elements are converted via the {@link String#valueOf(Object)} method.
Implementation method used by {@link #deepToString(Object[])}.
Utility method used to assist the implementation of {@link #deepToString(Object[])}.
Copies {@code newLength} elements from {@code original} into a new array. If {@code newLength} is greater than {@code original.length}, the result is padded with the value {@code false}.
Copies {@code newLength} elements from {@code original} into a new array. If {@code newLength} is greater than {@code original.length}, the result is padded with the value {@code (byte) 0}.
Copies {@code newLength} elements from {@code original} into a new array. If {@code newLength} is greater than {@code original.length}, the result is padded with the value {@code '\\u0000'}.
Copies {@code newLength} elements from {@code original} into a new array. If {@code newLength} is greater than {@code original.length}, the result is padded with the value {@code 0.0d}.
Copies {@code newLength} elements from {@code original} into a new array. If {@code newLength} is greater than {@code original.length}, the result is padded with the value {@code 0.0f}.
Copies {@code newLength} elements from {@code original} into a new array. If {@code newLength} is greater than {@code original.length}, the result is padded with the value {@code 0}.
Copies {@code newLength} elements from {@code original} into a new array. If {@code newLength} is greater than {@code original.length}, the result is padded with the value {@code 0L}.
Copies {@code newLength} elements from {@code original} into a new array. If {@code newLength} is greater than {@code original.length}, the result is padded with the value {@code (short) 0}.
Copies {@code newLength} elements from {@code original} into a new array. If {@code newLength} is greater than {@code original.length}, the result is padded with the value {@code null}.
Copies elements from {@code original} into a new array, from indexes start (inclusive) to end (exclusive). The original order of elements is preserved. If {@code end} is greater than {@code original.length}, the result is padded with the value {@code false}.
Copies elements from {@code original} into a new array, from indexes start (inclusive) to end (exclusive). The original order of elements is preserved. If {@code end} is greater than {@code original.length}, the result is padded with the value {@code (byte) 0}.
Copies elements from {@code original} into a new array, from indexes start (inclusive) to end (exclusive). The original order of elements is preserved. If {@code end} is greater than {@code original.length}, the result is padded with the value {@code '\\u0000'}.
Copies elements from {@code original} into a new array, from indexes start (inclusive) to end (exclusive). The original order of elements is preserved. If {@code end} is greater than {@code original.length}, the result is padded with the value {@code 0.0d}.
Copies elements from {@code original} into a new array, from indexes start (inclusive) to end (exclusive). The original order of elements is preserved. If {@code end} is greater than {@code original.length}, the result is padded with the value {@code 0.0f}.
Copies elements from {@code original} into a new array, from indexes start (inclusive) to end (exclusive). The original order of elements is preserved. If {@code end} is greater than {@code original.length}, the result is padded with the value {@code 0}.
Copies elements from {@code original} into a new array, from indexes start (inclusive) to end (exclusive). The original order of elements is preserved. If {@code end} is greater than {@code original.length}, the result is padded with the value {@code 0L}.
Copies elements from {@code original} into a new array, from indexes start (inclusive) to end (exclusive). The original order of elements is preserved. If {@code end} is greater than {@code original.length}, the result is padded with the value {@code (short) 0}.
Updates 'longCount' by inspecting 'bits'. Assumes that the new longCount is <= the current longCount, to avoid scanning large tracts of empty array. This means it's safe to call directly after a clear operation that may have cleared the highest set bit, but not safe after an xor operation that may have cleared the highest set bit or made a new highest set bit. In that case, you'd need to set 'longCount' to a conservative estimate before calling this method.
Creates a new {@code BitSet} with size equal to 64 bits.
Creates a new {@code BitSet} with size equal to {@code bitCount}, rounded up to a multiple of 64.
Ensures that our long[] can hold at least 64 * desiredLongCount bits.
Returns the bit at index {@code index}. Indexes greater than the current length return false.
Sets the bit at index {@code index} to true.
Clears the bit at index {@code index}.
Flips the bit at index {@code index}.
Returns a new {@code BitSet} containing the range of bits {@code [fromIndex, toIndex)}, shifted down so that the bit at {@code fromIndex} is at bit 0 in the new {@code BitSet}.
Sets the bit at index {@code index} to {@code state}.
Sets the range of bits {@code [fromIndex, toIndex)} to {@code state}.
Clears all the bits in this {@code BitSet}. This method does not change the capacity. Use {@code clear} if you want to reuse this {@code BitSet} with the same capacity, but create a new {@code BitSet} if you're trying to potentially reclaim memory.
Sets the range of bits {@code [fromIndex, toIndex)}.
Clears the range of bits {@code [fromIndex, toIndex)}.
Flips the range of bits {@code [fromIndex, toIndex)}.
Returns true if {@code this.and(bs)} is non-empty, but may be faster than computing that.
Logically ands the bits of this {@code BitSet} with {@code bs}.
Clears all bits in this {@code BitSet} which are also set in {@code bs}.
Logically ors the bits of this {@code BitSet} with {@code bs}.
Logically xors the bits of this {@code BitSet} with {@code bs}.
Returns the capacity in bits of the array implementing this {@code BitSet}. This is unrelated to the length of the {@code BitSet}, and not generally useful. Use {@link #nextSetBit} to iterate, or {@link #length} to find the highest set bit.
Returns the number of bits up to and including the highest bit set. This is unrelated to the {@link #size} of the {@code BitSet}.
Returns a string containing a concise, human-readable description of the receiver: a comma-delimited list of the indexes of all set bits. For example: {@code "{0,1,8}"}.
Returns the index of the first bit that is set on or after {@code index}, or -1 if no higher bits are set.
Returns the index of the first bit that is clear on or after {@code index}. Since all bits past the end are implicitly clear, this never returns -1.
Returns the index of the first bit that is set on or before {@code index}, or -1 if no lower bits are set or {@code index == -1}.
Returns the index of the first bit that is clear on or before {@code index}, or -1 if no lower bits are clear or {@code index == -1}.
Returns true if all the bits in this {@code BitSet} are set to false, false otherwise.
Returns the number of bits that are {@code true} in this {@code BitSet}.
Equivalent to {@code BitSet.valueOf(LongBuffer.wrap(longs))}, but likely to be faster. This is likely to be the fastest way to create a {@code BitSet} because it's closest to the internal representation.
Returns a {@code BitSet} corresponding to {@code longBuffer}, interpreted as a little-endian sequence of bits. This method does not alter the {@code LongBuffer}.
Equivalent to {@code BitSet.valueOf(ByteBuffer.wrap(bytes))}.
Returns a {@code BitSet} corresponding to {@code byteBuffer}, interpreted as a little-endian sequence of bits. This method does not alter the {@code ByteBuffer}.
Returns a new {@code long[]} containing a little-endian representation of the bits of this {@code BitSet}, suitable for passing to {@code valueOf} to reconstruct this {@code BitSet}.
Returns a new {@code byte[]} containing a little-endian representation the bits of this {@code BitSet}, suitable for passing to {@code valueOf} to reconstruct this {@code BitSet}.
Constructs a {@code Calendar} instance using the default {@code TimeZone} and {@code Locale}.
Constructs a {@code Calendar} instance using the specified {@code TimeZone} and {@code Locale}.
Returns whether the {@code Date} specified by this {@code Calendar} instance is after the {@code Date} specified by the parameter. The comparison is not dependent on the time zones of the {@code Calendar}.
Returns whether the {@code Date} specified by this {@code Calendar} instance is before the {@code Date} specified by the parameter. The comparison is not dependent on the time zones of the {@code Calendar}.
Clears all of the fields of this {@code Calendar}. All fields are initialized to zero.
Clears the specified field to zero and sets the isSet flag to {@code false}.
Computes the time from the fields if the time has not already been set. Computes the fields from the time if the fields are not already set.
Gets the value of the specified field after computing the field values by calling {@code complete()} first.
Gets the maximum value of the specified field for the current date.
Gets the minimum value of the specified field for the current date.
Returns an array of locales for which custom {@code Calendar} instances are available. <p>Note that Android does not support user-supplied locale service providers.
Gets the first day of the week for this {@code Calendar}.
Constructs a new instance of the {@code Calendar} subclass appropriate for the default {@code Locale}.
Constructs a new instance of the {@code Calendar} subclass appropriate for the specified {@code Locale}.
Constructs a new instance of the {@code Calendar} subclass appropriate for the default {@code Locale}, using the specified {@code TimeZone}.
Gets the minimal days in the first week of the year.
Gets the time of this {@code Calendar} as a {@code Date} object.
Computes the time from the fields if required and returns the time.
Gets the timezone of this {@code Calendar}.
Gets the value of the specified field without recomputing.
Returns if this {@code Calendar} accepts field values which are outside the valid range for the field.
Returns whether the specified field is set. Note that the interpretation of "is set" is somewhat technical. In particular, it does <i>not</i> mean that the field's value is up to date. If you want to know whether a field contains an up-to-date value, you must also check {@code areFieldsSet}, making this method somewhat useless unless you're a subclass, in which case you can access the {@code isSet} array directly. <p> A field remains "set" from the first time its value is computed until it's cleared by one of the {@code clear} methods. Thus "set" does not mean "valid". You probably want to call {@code get} -- which will update fields as necessary -- rather than try to make use of this method.
Adds the specified amount to the specified field and wraps the value of the field when it goes beyond the maximum or minimum value for the current date. Other fields will be adjusted as required to maintain a consistent date.
Sets a field to the specified value.
Sets the year, month and day of the month fields. Other fields are not changed.
Sets the year, month, day of the month, hour of day and minute fields. Other fields are not changed.
Sets the year, month, day of the month, hour of day, minute and second fields. Other fields are not changed.
Sets the first day of the week for this {@code Calendar}.
Sets this {@code Calendar} to accept field values which are outside the valid range for the field.
Sets the minimal days in the first week of the year.
Sets the time of this {@code Calendar}.
Sets the time of this {@code Calendar}.
Sets the {@code TimeZone} used by this Calendar.
Compares the times of the two {@code Calendar}, which represent the milliseconds from the January 1, 1970 00:00:00.000 GMT (Gregorian).
Returns a human-readable string for the value of {@code field} using the given style and locale. If no string is available, returns null. The value is retrieved by invoking {@code get(field)}. <p>For example, {@code getDisplayName(MONTH, SHORT, Locale.US)} will return "Jan" while {@code getDisplayName(MONTH, LONG, Locale.US)} will return "January".
Returns a map of human-readable strings to corresponding values, for the given field, style, and locale. Returns null if no strings are available. <p>For example, {@code getDisplayNames(MONTH, ALL_STYLES, Locale.US)} would contain mappings from "Jan" and "January" to {@link #JANUARY}, and so on.
Replaces this SynchronizedRandomAccessList with a SynchronizedList so that JREs before 1.4 can deserialize this object without any problems. This is necessary since RandomAccess API was introduced only in 1.4. <p>
Resolves SynchronizedList instances to SynchronizedRandomAccessList instances if the underlying list is a Random Access list. <p> This is necessary since SynchronizedRandomAccessList instances are replaced with SynchronizedList instances during serialization for compliance with JREs before 1.4. <p>
Replaces this UnmodifiableRandomAccessList with an UnmodifiableList so that JREs before 1.4 can deserialize this object without any problems. This is necessary since RandomAccess API was introduced only in 1.4. <p>
Resolves UnmodifiableList instances to UnmodifiableRandomAccessList instances if the underlying list is a Random Access list. <p> This is necessary since UnmodifiableRandomAccessList instances are replaced with UnmodifiableList instances during serialization for compliance with JREs before 1.4. <p>
Copies the elements from the source list to the destination list. At the end both lists will have the same objects at the same index. If the destination array is larger than the source list, the elements in the destination list with {@code index >= source.size()} will be unchanged.
Returns an {@code Enumeration} on the specified collection.
Fills the specified list with the specified element.
Searches the specified collection for the maximum element.
Searches the specified collection for the maximum element using the specified comparator.
Searches the specified collection for the minimum element.
Searches the specified collection for the minimum element using the specified comparator.
Returns a list containing the specified number of the specified element. The list cannot be modified. The list is serializable.
Returns a {@link Comparator} that reverses the order of the {@code Comparator} passed. If the {@code Comparator} passed is {@code null}, then this method is equivalent to {@link #reverseOrder()}. <p> The {@code Comparator} that's returned is {@link Serializable} if the {@code Comparator} passed is serializable or {@code null}.
Moves every element of the list to a random new position in the list.
Moves every element of the list to a random new position in the list using the specified random number generator.
Returns a set containing the specified element. The set cannot be modified. The set is serializable.
Returns a list containing the specified element. The list cannot be modified. The list is serializable.
Returns a Map containing the specified key and value. The map cannot be modified. The map is serializable.
Replaces all occurrences of Object {@code obj} in {@code list} with {@code newObj}. If the {@code obj} is {@code null}, then all occurrences of {@code null} are replaced with {@code newObj}.
Searches the {@code list} for {@code sublist} and returns the beginning index of the first occurrence. <p> -1 is returned if the {@code sublist} does not exist in {@code list}.
Searches the {@code list} for {@code sublist} and returns the beginning index of the last occurrence. <p> -1 is returned if the {@code sublist} does not exist in {@code list}.
Returns an {@code ArrayList} with all the elements in the {@code enumeration}. The elements in the returned {@code ArrayList} are in the same order as in the {@code enumeration}.
Returns a wrapper on the specified collection which synchronizes all access to the collection.
Returns a wrapper on the specified List which synchronizes all access to the List.
Returns a wrapper on the specified map which synchronizes all access to the map.
Returns a wrapper on the specified set which synchronizes all access to the set.
Returns a wrapper on the specified sorted map which synchronizes all access to the sorted map.
Returns a wrapper on the specified sorted set which synchronizes all access to the sorted set.
Returns a wrapper on the specified sorted set which throws an {@code UnsupportedOperationException} whenever an attempt is made to modify the sorted set.
Returns the number of elements in the {@code Collection} that match the {@code Object} passed. If the {@code Object} is {@code null}, then the number of {@code null} elements is returned.
Returns a list iterator containing no elements.
Returns a dynamically typesafe view of the specified collection. Trying to insert an element of the wrong type into this collection throws a {@code ClassCastException}. At creation time the types in {@code c} are not checked for correct type.
Returns a dynamically typesafe view of the specified map. Trying to insert an element of the wrong type into this map throws a {@code ClassCastException}. At creation time the types in {@code m} are not checked for correct type.
Returns a dynamically typesafe view of the specified list. Trying to insert an element of the wrong type into this list throws a {@code ClassCastException}. At creation time the types in {@code list} are not checked for correct type.
Returns a dynamically typesafe view of the specified set. Trying to insert an element of the wrong type into this set throws a {@code ClassCastException}. At creation time the types in {@code s} are not checked for correct type.
Returns a dynamically typesafe view of the specified sorted map. Trying to insert an element of the wrong type into this sorted map throws a {@code ClassCastException}. At creation time the types in {@code m} are not checked for correct type.
Returns a dynamically typesafe view of the specified sorted set. Trying to insert an element of the wrong type into this sorted set throws a {@code ClassCastException}. At creation time the types in {@code s} are not checked for correct type.
Adds all the specified elements to the specified collection.
Returns whether the specified collections have no elements in common.
Checks if specified object is instance of specified class. Used for a dynamically typesafe view of the collections.
Returns a set backed by {@code map}.
Returns a last-in, first-out queue as a view of {@code deque}.
Constructs a dynamically typesafe view of the specified ListIterator.
The next two methods (which are package private and static) constitute the entire API of this class.  Each of these methods obeys the contract of the public method with the same signature in java.util.Arrays.
Returns the minimum acceptable run length for an array of the specified length. Natural runs shorter than this will be extended with {@link #binarySort}. Roughly speaking, the computation is: If n < MIN_MERGE, return n (it's too small to bother with fancy stuff). Else if n is an exact power of 2, return MIN_MERGE/2. Else return an int k, MIN_MERGE/2 <= k <= MIN_MERGE, such that n/k is close to, but strictly less than, an exact power of 2. For the rationale, see listsort.txt.
Examines the stack of runs waiting to be merged and merges adjacent runs until the stack invariants are reestablished: This method is called each time a new run is pushed onto the stack, so the invariants are guaranteed to hold for i < stackSize upon entry to the method.
Merges all runs on the stack until only one remains.  This method is called once, to complete the sort.
Locates the position at which to insert the specified key into the specified sorted range; if the range contains an element equal to key, returns the index of the leftmost equal element.
Like gallopLeft, except that if the range contains an element equal to key, gallopRight returns the index after the rightmost equal element.
Ensures that the external array tmp has at least the specified number of elements, increasing its size if necessary.  The size increases exponentially to ensure amortized linear time complexity.
Constructs a new {@code ConcurrentModificationException} with the current stack trace filled in.
Constructs a new {@code ConcurrentModificationException} with the current stack trace and message filled in.
Constructs a new {@code ConcurrentModificationException} with the given detail message and cause.
Constructs a new {@code ConcurrentModificationException} with the given cause.
Returns the {@code Currency} instance for the given ISO 4217 currency code.
Returns the {@code Currency} instance for this {@code Locale}'s country.
Returns a set of all known currencies.
Returns this currency's ISO 4217 currency code.
Equivalent to {@code getDisplayName(Locale.getDefault())}. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns the localized name of this currency in the given {@code locale}. Returns the ISO 4217 currency code if no localized name is available.
Equivalent to {@code getSymbol(Locale.getDefault())}. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns the localized currency symbol for this currency in {@code locale}. That is, given "USD" and Locale.US, you'd get "$", but given "USD" and a non-US locale, you'd get "US$". <p>If the locale only specifies a language rather than a language and a country (such as {@code Locale.JAPANESE} or {new Locale("en", "")} rather than {@code Locale.JAPAN} or {new Locale("en", "US")}), the ISO 4217 currency code is returned. <p>If there is no locale-specific currency symbol, the ISO 4217 currency code is returned.
Returns the default number of fraction digits for this currency. For instance, the default number of fraction digits for the US dollar is 2 because there are 100 US cents in a US dollar. For the Japanese Yen, the number is 0 because coins smaller than 1 Yen became invalid in 1953. In the case of pseudo-currencies, such as IMF Special Drawing Rights, -1 is returned.
Initializes this {@code Date} instance to the current time.
Initializes this {@code Date} instance using the specified millisecond value. The value is the number of milliseconds since Jan. 1, 1970 GMT.
Returns if this {@code Date} is after the specified Date.
Returns if this {@code Date} is before the specified Date.
Compare the receiver to the specified {@code Date} to determine the relative ordering.
Returns this {@code Date} as a millisecond value. The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.
Sets this {@code Date} to the specified millisecond value. The value is the number of milliseconds since Jan. 1, 1970 GMT.
Sorts the specified array into ascending numerical order.
Sorts the specified range of the array into ascending order. The range to be sorted extends from the index {@code fromIndex}, inclusive, to the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex}, the range to be sorted is empty (and the call is a no-op).
Sorts the specified range of the array into ascending order. This method differs from the public {@code sort} method in that the {@code right} index is inclusive, and it does no range checking on {@code left} or {@code right}.
Sorts the specified range of the array into ascending order by the Dual-Pivot Quicksort algorithm.
Sorts the specified range of the array into ascending order. This method differs from the public {@code sort} method in that the {@code right} index is inclusive, and it does no range checking on {@code left} or {@code right}.
Sorts the specified array into ascending numerical order. <p>The {@code <} relation does not provide a total order on all float values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN} value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method {@link Float#compareTo}: {@code -0.0f} is treated as less than value {@code 0.0f} and {@code Float.NaN} is considered greater than any other value and all {@code Float.NaN} values are considered equal.
Sorts the specified range of the array into ascending order. The range to be sorted extends from the index {@code fromIndex}, inclusive, to the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex}, the range to be sorted is empty  and the call is a no-op). <p>The {@code <} relation does not provide a total order on all float values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN} value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method {@link Float#compareTo}: {@code -0.0f} is treated as less than value {@code 0.0f} and {@code Float.NaN} is considered greater than any other value and all {@code Float.NaN} values are considered equal.
Sorts the specified range of the array into ascending order. The sort is done in three phases to avoid expensive comparisons in the inner loop. The comparisons would be expensive due to anomalies associated with negative zero {@code -0.0f} and {@code Float.NaN}.
Returns the index of some zero element in the specified range via binary search. The range is assumed to be sorted, and must contain at least one zero.
Sorts the specified range of the array into ascending order. This method differs from the public {@code sort} method in three ways: {@code right} index is inclusive, it does no range checking on {@code left} or {@code right}, and it does not handle negative zeros or NaNs in the array.
Sorts the specified array into ascending numerical order. <p>The {@code <} relation does not provide a total order on all double values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN} value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method {@link Double#compareTo}: {@code -0.0d} is treated as less than value {@code 0.0d} and {@code Double.NaN} is considered greater than any other value and all {@code Double.NaN} values are considered equal.
Sorts the specified range of the array into ascending order. The range to be sorted extends from the index {@code fromIndex}, inclusive, to the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex}, the range to be sorted is empty (and the call is a no-op). <p>The {@code <} relation does not provide a total order on all double values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN} value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method {@link Double#compareTo}: {@code -0.0d} is treated as less than value {@code 0.0d} and {@code Double.NaN} is considered greater than any other value and all {@code Double.NaN} values are considered equal.
Sorts the specified range of the array into ascending order. The sort is done in three phases to avoid expensive comparisons in the inner loop. The comparisons would be expensive due to anomalies associated with negative zero {@code -0.0d} and {@code Double.NaN}.
Constructs a new {@code DuplicateFormatFlagsException} with the flags containing duplicates.
Returns the format flags that contain a duplicate flag.
Constructs an empty {@code EnumMap} using the given key type.
Constructs an {@code EnumMap} using the same key type as the given {@code EnumMap} and initially containing the same mappings.
Creates an empty enum set. The permitted elements are of type Class&lt;E&gt;.
Creates an enum set filled with all the enum elements of the specified {@code elementType}.
Creates an enum set. All the contained elements are of type Class&lt;E&gt;, and the contained elements are the same as those contained in {@code s}.
Creates an enum set. The contained elements are the same as those contained in collection {@code c}. If c is an enum set, invoking this method is the same as invoking {@link #copyOf(EnumSet)}.
Creates an enum set. All the contained elements complement those from the specified enum set.
Creates a new enum set, containing only the specified element. There are six overloadings of the method. They accept from one to five elements respectively. The sixth one receives an arbitrary number of elements, and runs slower than those that only receive a fixed number of elements.
Creates a new enum set, containing only the specified elements. There are six overloadings of the method. They accept from one to five elements respectively. The sixth one receives an arbitrary number of elements, and runs slower than those that only receive a fixed number of elements.
Creates a new enum set, containing only the specified elements. It can receive an arbitrary number of elements, and runs slower than those only receiving a fixed number of elements.
Creates an enum set containing all the elements within the range defined by {@code start} and {@code end} (inclusive). All the elements must be in order.
Creates a new {@code EventListener} proxy instance.
Returns the wrapped {@code EventListener}.
Constructs a new instance of this class.
Returns the object which fired the event.
Returns the string representation of this {@code EventObject}.
Constructs a new {@code FormatFlagsConversionMismatchException} with the flags and conversion specified.
Returns the incompatible format flag.
Returns the incompatible conversion.
Creates a native peer if we don't already have one, or reconfigures an existing one. This means we get to reuse the peer in cases like "x=%.2f y=%.2f".
Constructs a {@code Formatter}. <p>The output is written to a {@code StringBuilder} which can be acquired by invoking {@link #out()} and whose content can be obtained by calling {@code toString}. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a {@code Formatter} whose output will be written to the specified {@code Appendable}. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a {@code Formatter} with the specified {@code Locale}. <p>The output is written to a {@code StringBuilder} which can be acquired by invoking {@link #out()} and whose content can be obtained by calling {@code toString}.
Constructs a {@code Formatter} with the specified {@code Locale} and whose output will be written to the specified {@code Appendable}.
Constructs a {@code Formatter} whose output is written to the specified file. <p>The charset of the {@code Formatter} is the default charset. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a {@code Formatter} whose output is written to the specified file. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a {@code Formatter} with the given {@code Locale} and charset, and whose output is written to the specified file.
Constructs a {@code Formatter} whose output is written to the specified {@code File}. The charset of the {@code Formatter} is the default charset. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a {@code Formatter} with the given charset, and whose output is written to the specified {@code File}. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a {@code Formatter} with the given {@code Locale} and charset, and whose output is written to the specified {@code File}.
Constructs a {@code Formatter} whose output is written to the specified {@code OutputStream}. <p>The charset of the {@code Formatter} is the default charset. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a {@code Formatter} with the given charset, and whose output is written to the specified {@code OutputStream}. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Constructs a {@code Formatter} with the given {@code Locale} and charset, and whose output is written to the specified {@code OutputStream}.
Constructs a {@code Formatter} whose output is written to the specified {@code PrintStream}. <p>The charset of the {@code Formatter} is the default charset. <p>The {@code Locale} used is the user's default locale. See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
Returns the {@code Locale} of the {@code Formatter}.
Returns the output destination of the {@code Formatter}.
Flushes the {@code Formatter}. If the output destination is {@link Flushable}, then the method {@code flush()} will be called on that destination.
Closes the {@code Formatter}. If the output destination is {@link Closeable}, then the method {@code close()} will be called on that destination. If the {@code Formatter} has been closed, then calling the this method will have no effect. Any method but the {@link #ioException()} that is called after the {@code Formatter} has been closed will raise a {@code FormatterClosedException}.
Returns the last {@code IOException} thrown by the {@code Formatter}'s output destination. If the {@code append()} method of the destination does not throw {@code IOException}s, the {@code ioException()} method will always return {@code null}.
Writes a formatted string to the output destination of the {@code Formatter}.
Tests whether there were no flags, no width, and no precision specified.
Sets qualified char as one of the flags. If the char is qualified, sets it as a flag and returns true. Or else returns false.
Gets the formatted string according to the format token and the argument.
Returns a CharSequence corresponding to {@code s} with all the ASCII digits replaced by digits appropriate to this formatter's locale. Other characters remain unchanged.
Inserts the grouping separator every 3 digits. DecimalFormat lets you configure grouping size, but you can't access that from Formatter, and the default is every 3 digits.
Constructs a new parser for the given format string.
Returns a FormatToken representing the format specifier starting at 'offset'.
Returns a string corresponding to the last format specifier that was parsed. Used to construct error messages.
We pass the width in because in some cases we've already parsed it. (Because of the ambiguity between argument indexes and widths.)
Parses an integer (of arbitrary length, but typically just one digit).
Swallow remaining digits to resync our attempted parse, but return failure.
Return true if the given year is a leap year.
Return the number of days in the given month.
Return the length of a previous month of the Gregorian calendar.
Convert a year, month, and day-of-month, given in the proleptic Gregorian calendar, to 1970 epoch days.
Return the day of week on the 1970-epoch day
Convert long time to date/time fields result[0] : year result[1] : month result[2] : dayOfMonth result[3] : dayOfWeek result[4] : dayOfYear result[5] : millisecond in day
Returns the ordinal number for the specified day of week in the month. The valid return value is 1, 2, 3, 4 or -1.
Constructs a new {@code GregorianCalendar} initialized to the current date and time with the default {@code Locale} and {@code TimeZone}.
Constructs a new {@code GregorianCalendar} initialized to midnight in the default {@code TimeZone} and {@code Locale} on the specified date.
Constructs a new {@code GregorianCalendar} initialized to the specified date and time in the default {@code TimeZone} and {@code Locale}.
Constructs a new {@code GregorianCalendar} initialized to the current date and time and using the specified {@code Locale} and the default {@code TimeZone}.
Constructs a new {@code GregorianCalendar} initialized to the current date and time and using the specified {@code TimeZone} and the default {@code Locale}.
Constructs a new {@code GregorianCalendar} initialized to the current date and time and using the specified {@code TimeZone} and {@code Locale}.
Returns the gregorian change date of this calendar. This is the date on which the gregorian calendar came into effect.
Returns whether the specified year is a leap year.
Sets the gregorian change date of this calendar.
Constructs a new {@code HashMap} instance with the specified capacity.
Constructs a new {@code HashMap} instance with the specified capacity and load factor.
Constructs a new {@code HashMap} instance containing the mappings from the specified map.
Inserts all of the elements of map into this HashMap in a manner suitable for use by constructors and pseudo-constructors (i.e., clone, readObject). Also used by LinkedHashMap.
Returns an appropriate capacity for the specified initial size. Does not round the result up to a power of two; the caller must do this! The returned value will be between 0 and MAXIMUM_CAPACITY (inclusive).
Returns the value of the mapping with the specified key.
Maps the specified key to the specified value.
This method is just like put, except that it doesn't do things that are inappropriate or unnecessary for constructors and pseudo-constructors (i.e., clone, readObject). In particular, this method does not check to ensure that capacity is sufficient, and does not increment modCount.
Creates a new entry for the given key, value, hash, and index and inserts it into the hash table. This method is called by put (and indirectly, putAll), and overridden by LinkedHashMap. The hash must incorporate the secondary hash function.
Creates a new entry for the null key, and the given value and inserts it into the hash table. This method is called by put (and indirectly, putAll), and overridden by LinkedHashMap.
Like newEntry, but does not perform any activity that would be unnecessary or inappropriate for constructors. In this class, the two methods behave identically; in LinkedHashMap, they differ.
Copies all the mappings in the specified map to this map. These mappings will replace all mappings that this map had for any of the keys currently in the given map.
Ensures that the hash table has sufficient capacity to store the specified number of mappings, with room to grow. If not, it increases the capacity as appropriate. Like doubleCapacity, this method moves existing entries to new buckets as appropriate. Unlike doubleCapacity, this method can grow the table by factors of 2^n for n > 1. Hopefully, a single call to this method will be faster than multiple calls to doubleCapacity. <p>This method is called only by putAll.
Removes the mapping with the specified key from this map.
Removes all mappings from this hash map, leaving it empty.
Returns a set of the keys contained in this map. The set is backed by this map so changes to one are reflected by the other. The set does not support adding.
Returns a collection of the values contained in this map. The collection is backed by this map so changes to one are reflected by the other. The collection supports remove, removeAll, retainAll and clear operations, and it does not support add or addAll operations. <p> This method returns a collection which is the subclass of AbstractCollection. The iterator method of this subclass returns a "wrapper object" over the iterator of map's entrySet(). The {@code size} method wraps the map's size method and the {@code contains} method wraps the map's containsValue method. </p> <p> The collection is created when this method is called for the first time and returned in response to all subsequent calls. This method may return different collections when multiple concurrent calls occur, since no synchronization is performed. </p>
Returns true if this map contains the specified mapping.
Removes the mapping from key to value and returns true if this mapping exists; otherwise, returns does nothing and returns false.
Returns the smallest power of two >= its argument, with several caveats: If the argument is negative but not Integer.MIN_VALUE, the method returns zero. If the argument is > 2^30 or equal to Integer.MIN_VALUE, the method returns Integer.MIN_VALUE. If the argument is zero, the method returns zero.
Constructs a new empty instance of {@code HashSet}.
Constructs a new instance of {@code HashSet} with the specified capacity.
Constructs a new instance of {@code HashSet} with the specified capacity and load factor.
Constructs a new instance of {@code HashSet} containing the unique elements in the specified collection.
Constructs a new {@code Hashtable} using the specified capacity and the default load factor.
Constructs a new {@code Hashtable} using the specified capacity and load factor.
Constructs a new instance of {@code Hashtable} containing the mappings from the specified map.
Inserts all of the elements of map into this Hashtable in a manner suitable for use by constructors and pseudo-constructors (i.e., clone, readObject).
Returns true if this {@code Hashtable} has no key/value pairs.
Returns the number of key/value pairs in this {@code Hashtable}.
Returns the value associated with the specified key in this {@code Hashtable}.
Returns true if this {@code Hashtable} contains the specified object as a key of one of the key/value pairs.
Searches this {@code Hashtable} for the specified value.
Returns true if this {@code Hashtable} contains the specified object as the value of at least one of the key/value pairs.
Associate the specified value with the specified key in this {@code Hashtable}. If the key already exists, the old value is replaced. The key and value cannot be null.
Copies every mapping to this {@code Hashtable} from the specified map.
Increases the capacity of this {@code Hashtable}. This method is called when the size of this {@code Hashtable} exceeds the load factor.
Removes the key/value pair with the specified key from this {@code Hashtable}.
Removes all key/value pairs from this {@code Hashtable}, leaving the size zero and the capacity unchanged.
Returns a set of the keys contained in this {@code Hashtable}. The set is backed by this {@code Hashtable} so changes to one are reflected by the other. The set does not support adding.
Returns a collection of the values contained in this {@code Hashtable}. The collection is backed by this {@code Hashtable} so changes to one are reflected by the other. The collection does not support adding.
Returns a set of the mappings contained in this {@code Hashtable}. Each element in the set is a {@link Map.Entry}. The set is backed by this {@code Hashtable} so changes to one are reflected by the other. The set does not support adding.
Returns an enumeration on the keys of this {@code Hashtable} instance. The results of the enumeration may be affected if the contents of this {@code Hashtable} are modified.
Returns an enumeration on the values of this {@code Hashtable}. The results of the Enumeration may be affected if the contents of this {@code Hashtable} are modified.
Compares this {@code Hashtable} with the specified object and indicates if they are equal. In order to be equal, {@code object} must be an instance of Map and contain the same key/value pairs.
Returns the string representation of this {@code Hashtable}.
Applies a supplemental hash function to a given hashCode, which defends against poor quality hash functions. This is critical because Hashtable uses power-of-two length hash tables, that otherwise encounter collisions for hashCodes that do not differ in lower or upper bits.
Constructs an instance. order
Assigns mask and index to the next available value, cycling currentBits as necessary.
Creates an IdentityHashMap with default expected maximum size.
Creates an IdentityHashMap with the specified maximum size parameter.
Create a new element array
Creates an IdentityHashMap using the given map as initial values.
Constructs a new {@code IllegalFormatCodePointException} which is specified by the invalid Unicode code point.
Returns the invalid Unicode code point.
Constructs a new {@code IllegalFormatConversionException} with the class of the mismatched conversion and corresponding parameter.
Returns the class of the mismatched parameter.
the constructor is not callable from outside from the package
Constructs a new {@code IllegalFormatFlagsException} with the specified flags.
Returns the flags that are illegal.
Constructs a new {@code IllegalFormatPrecisionException} with specified precision.
Returns the precision associated with the exception.
Constructs a new {@code IllegalFormatWidthException} with specified width.
Returns the width associated with the exception.
Constructs a new {@code InputMismatchException} with the stack trace filled in and {@code msg} as its error message.
Constructs a new {@code InvalidPropertiesFormatException} with the current stack trace and message filled in.
Constructs a new {@code InvalidPropertiesFormatException} with the cause for the Exception.
Constructs a new empty {@code LinkedHashMap} instance.
Constructs a new {@code LinkedHashMap} instance with the specified capacity.
Constructs a new {@code LinkedHashMap} instance with the specified capacity and load factor.
Constructs a new {@code LinkedHashMap} instance with the specified capacity, load factor and a flag specifying the ordering behavior.
Constructs a new {@code LinkedHashMap} instance containing the mappings from the specified map. The order of the elements is preserved.
Create the header entry
Create a normal entry
Returns the eldest entry in the map, or {@code null} if the map is empty.
Evicts eldest entry if instructed, creates a new entry and links it in as head of linked list. This method should call constructorNewEntry (instead of duplicating code) if the performance of your VM permits. <p>It may seem strange that this method is tasked with adding the entry to the hash table (which is properly the province of our superclass). The alternative of passing the "next" link in to this method and returning the newly created element does not work! If we remove an (eldest) entry that happens to be the first entry in the same bucket as the newly created entry, the "next" link would become invalid, and the resulting hash table corrupt.
As above, but without eviction.
Relinks the given entry to the tail of the list. Under access ordering, this method is invoked whenever the value of a  pre-existing entry is read by Map.get or modified by Map.put.
This override is done for LinkedHashMap performance: iteration is cheaper via LinkedHashMap nxt links.
Override view iterator methods to generate correct iteration order
Constructs a new empty instance of {@code LinkedHashSet}.
Constructs a new instance of {@code LinkedHashSet} with the specified capacity.
Constructs a new instance of {@code LinkedHashSet} with the specified capacity and load factor.
Constructs a new instance of {@code LinkedHashSet} containing the unique elements in the specified collection.
Constructs a new empty instance of {@code LinkedList}.
Constructs a new instance of {@code LinkedList} that holds all of the elements contained in the specified {@code collection}. The order of the elements in this new {@code LinkedList} will be determined by the iteration order of {@code collection}.
Adds the specified object at the beginning of this {@code LinkedList}.
Adds the specified object at the end of this {@code LinkedList}.
Returns the first element in this {@code LinkedList}.
Returns the last element in this {@code LinkedList}.
Removes the first object from this {@code LinkedList}.
Removes the last object from this {@code LinkedList}.
Returns a set of the keys in this ResourceBundle but not in its parents.
There's a circular dependency between toLowerCase/toUpperCase and Locale.US. Work around this by avoiding these methods when constructing the built-in locales.
Constructs a new {@code Locale} using the specified language.
Constructs a new {@code Locale} using the specified language and country codes.
Constructs a new {@code Locale} using the specified language, country, and variant codes.
Returns true if {@code object} is a locale with the same language, country and variant.
Returns the system's installed locales. This array always includes {@code Locale.US}, and usually several others. Most locale-sensitive classes offer their own {@code getAvailableLocales} method, which should be preferred over this general purpose method.
Returns the country code for this locale, or {@code ""} if this locale doesn't correspond to a specific country.
Returns the user's preferred locale. This may have been overridden for this process with {@link #setDefault}. <p>Since the user's locale changes dynamically, avoid caching this value. Instead, use this method to look it up for each use.
Equivalent to {@code getDisplayCountry(Locale.getDefault())}.
Returns the name of this locale's country, localized to {@code locale}. Returns the empty string if this locale does not correspond to a specific country.
Equivalent to {@code getDisplayLanguage(Locale.getDefault())}.
Returns the name of this locale's language, localized to {@code locale}. If the language name is unknown, the language code is returned.
Equivalent to {@code getDisplayName(Locale.getDefault())}.
Returns this locale's language name, country name, and variant, localized to {@code locale}. The exact output form depends on whether this locale corresponds to a specific language, country and variant. <p>For example: <ul> <li>{@code new Locale("en").getDisplayName(Locale.US)} -> {@code English} <li>{@code new Locale("en", "US").getDisplayName(Locale.US)} -> {@code English (United States)} <li>{@code new Locale("en", "US", "POSIX").getDisplayName(Locale.US)} -> {@code English (United States,Computer)} <li>{@code new Locale("en").getDisplayName(Locale.FRANCE)} -> {@code anglais} <li>{@code new Locale("en", "US").getDisplayName(Locale.FRANCE)} -> {@code anglais (États-Unis)} <li>{@code new Locale("en", "US", "POSIX").getDisplayName(Locale.FRANCE)} -> {@code anglais (États-Unis,informatique)}. </ul>
Returns the full variant name in the default {@code Locale} for the variant code of this {@code Locale}. If there is no matching variant name, the variant code is returned.
Returns the full variant name in the specified {@code Locale} for the variant code of this {@code Locale}. If there is no matching variant name, the variant code is returned.
Returns the three letter ISO country code which corresponds to the country code for this {@code Locale}.
Returns the three letter ISO language code which corresponds to the language code for this {@code Locale}.
Returns an array of strings containing all the two-letter ISO country codes that can be used as the country code when constructing a {@code Locale}.
Returns an array of strings containing all the two-letter ISO language codes that can be used as the language code when constructing a {@code Locale}.
Returns the language code for this {@code Locale} or the empty string if no language was set.
Returns the variant code for this {@code Locale} or an empty {@code String} if no variant was set.
Overrides the default locale. This does not affect system configuration, and attempts to override the system-provided default locale may themselves be overridden by actual changes to the system configuration. Code that calls this method is usually incorrect, and should be fixed by passing the appropriate locale to each locale-sensitive method that's called.
Constructs an instance. order
Constructs a new {@code MissingFormatArgumentException} with the specified conversion that lacks the argument.
Returns the conversion associated with the exception.
Constructs a new {@code MissingFormatWidthException} with the specified format specifier.
Returns the format specifier associated with the exception.
Constructs a new {@code MissingResourceException} with the stack trace, message, the class name of the resource bundle and the name of the missing resource filled in.
Returns the class name of the resource bundle from which a resource could not be found, or in the case of a missing resource, the name of the missing resource bundle.
Returns the name of the missing resource, or an empty string if the resource bundle is missing.
Constructs a new {@code NoSuchElementException} with the current stack trace and message filled in.
Adds the specified observer to the list of observers. If it is already registered, it is not added a second time.
Clears the changed flag for this {@code Observable}. After calling {@code clearChanged()}, {@code hasChanged()} will return {@code false}.
Returns the number of observers registered to this {@code Observable}.
Removes the specified observer from the list of observers. Passing null won't do anything.
Removes all observers from the list of observers.
Returns the changed flag for this {@code Observable}.
If {@code hasChanged()} returns {@code true}, calls the {@code update()} method for every observer in the list of observers using null as the argument. Afterwards, calls {@code clearChanged()}. <p> Equivalent to calling {@code notifyObservers(null)}.
Sets the changed flag for this {@code Observable}. After calling {@code setChanged()}, {@code hasChanged()} will return {@code true}.
Constructs a priority queue with an initial capacity of 11 and natural ordering.
Constructs a priority queue with the specified capacity and natural ordering.
Constructs a priority queue with the specified capacity and comparator.
Constructs a priority queue that contains the elements of a collection. The constructed priority queue has the initial capacity of 110% of the size of the collection. The queue uses natural ordering to order its elements.
Constructs a priority queue that contains the elements of another priority queue. The constructed priority queue has the initial capacity of 110% of the specified one. Both priority queues have the same comparator.
Constructs a priority queue that contains the elements of a sorted set. The constructed priority queue has the initial capacity of 110% of the size of the sorted set. The priority queue will have the same comparator as the sorted set.
Inserts the element to the priority queue.
Gets and removes the head of the queue.
Gets but does not remove the head of the queue.
Gets the comparator of the priority queue.
Constructs a new {@code Properties} object using the specified default {@code Properties}.
Searches for the property with the specified name. If the property is not found, the default {@code Properties} are checked. If the property is not found in the default {@code Properties}, {@code null} is returned.
Searches for the property with the specified name. If the property is not found, it looks in the default {@code Properties}. If the property is not found in the default {@code Properties}, it returns the specified default.
Lists the mappings in this {@code Properties} to {@code out} in a human-readable form. Note that values are truncated to 37 characters, so this method is rarely useful.
Loads properties from the specified {@code InputStream}, assumed to be ISO-8859-1. See "<a href="#character_encoding">Character Encoding</a>".
Returns all of the property names (keys) in this {@code Properties} object.
Returns those property names (keys) in this {@code Properties} object for which both key and value are strings.
Maps the specified key to the specified value. If the key already exists, the old value is replaced. The key and value cannot be {@code null}.
Stores properties to the specified {@code OutputStream}, using ISO-8859-1. See "<a href="#character_encoding">Character Encoding</a>".
Stores the mappings in this {@code Properties} object to {@code out}, putting the specified comment at the beginning.
Loads the properties from an {@code InputStream} containing the properties in XML form. The XML document must begin with (and conform to) following DOCTYPE: <pre> </pre> Also the content of the XML data must satisfy the DTD but the xml is not validated against it. The DTD is not loaded from the SYSTEM ID. After this method returns the InputStream is not closed.
Writes all properties stored in this instance into the {@code OutputStream} in XML representation. The DOCTYPE is <pre> </pre> If the comment is null, no comment is added to the output. UTF-8 is used as the encoding. The {@code OutputStream} is not closed at the end. A call to this method is the same as a call to {@code storeToXML(os, comment, "UTF-8")}.
Writes all properties stored in this instance into the {@code OutputStream} in XML representation. The DOCTYPE is <pre> </pre> If the comment is null, no comment is added to the output. The parameter {@code encoding} defines which encoding should be used. The {@code OutputStream} is not closed at the end.
Constructs a new instance of {@code PropertyResourceBundle} and loads the properties file from the specified {@code InputStream}.
Constructs a new resource bundle with properties read from {@code reader}.
Constructs a random generator with an initial state that is unlikely to be duplicated by a subsequent instantiation. <p>The initial state (that is, the seed) is <i>partially</i> based on the current time of day in milliseconds.
Construct a random generator with the given {@code seed} as the initial state. Equivalent to {@code Random r = new Random(); r.setSeed(seed);}. <p>This constructor is mainly useful for <i>predictability</i> in tests. The default constructor is likely to provide better randomness.
Returns a pseudo-random uniformly distributed {@code int} value of the number of bits specified by the argument {@code bits} as described by Donald E. Knuth in <i>The Art of Computer Programming, Volume 2: Seminumerical Algorithms</i>, section 3.2.1. <p>Most applications will want to use one of this class' convenience methods instead.
Returns a pseudo-random uniformly distributed {@code boolean}.
Fills {@code buf} with random bytes.
Returns a pseudo-random uniformly distributed {@code double} in the half-open range [0.0, 1.0).
Returns a pseudo-random uniformly distributed {@code float} in the half-open range [0.0, 1.0).
Returns a pseudo-random (approximately) normally distributed {@code double} with mean 0.0 and standard deviation 1.0. This method uses the <i>polar method</i> of G. E. P. Box, M. E. Muller, and G. Marsaglia, as described by Donald E. Knuth in <i>The Art of Computer Programming, Volume 2: Seminumerical Algorithms</i>, section 3.4.1, subsection C, algorithm P.
Returns a pseudo-random uniformly distributed {@code int}.
Returns a pseudo-random uniformly distributed {@code int} in the half-open range [0, n).
Returns a pseudo-random uniformly distributed {@code long}.
Modifies the seed using a linear congruential formula presented in <i>The Art of Computer Programming, Volume 2</i>, Section 3.2.1.
Constructs a new instance of this class.
Finds the named resource bundle for the default {@code Locale} and the caller's {@code ClassLoader}.
Finds the named {@code ResourceBundle} for the specified {@code Locale} and the caller {@code ClassLoader}.
Finds the named resource bundle for the specified {@code Locale} and {@code ClassLoader}. The passed base name and {@code Locale} are used to create resource bundle names. of {@link Locale#toString()}. From this name all parent bundle names are derived. Then the same thing is done for the default {@code Locale}. This results in a list of possible bundle names. <strong>Example</strong> For the basename "BaseName", the {@code Locale} of the German part of Switzerland (de_CH) and the default {@code Locale} en_US the list would look something like this: <ol> <li>BaseName_de_CH</li> <li>BaseName_de</li> <li>Basename_en_US</li> <li>Basename_en</li> <li>BaseName</li> </ol> This list also shows the order in which the bundles will be searched for a requested resource in the German part of Switzerland (de_CH). As a first step, this method tries to instantiate a {@code ResourceBundle} with the names provided. If such a class can be instantiated and initialized, it is returned and all the parent bundles are instantiated too. If no such class can be found this method tries to load a {@code .properties} file with the names by replacing dots in the base name with a slash and by appending "{@code .properties}" at the end of the string. If such a resource can be found by calling {@link ClassLoader#getResource(String)} it is used to initialize a {@link PropertyResourceBundle}. If this succeeds, it will also load the parents of this {@code ResourceBundle}. For compatibility with older code, the bundle name isn't required to be a fully qualified class name. It's also possible to directly pass the path to a properties file (without a file extension).
Finds the named resource bundle for the specified base name and control.
Gets the {@code Locale} of this {@code ResourceBundle}. In case a bundle was not found for the requested {@code Locale}, this will return the actual {@code Locale} of this resource bundle that was found after doing a fallback.
Returns the named resource from this {@code ResourceBundle}. If the resource cannot be found in this bundle, it falls back to the parent bundle (if it's not null) by calling the {@link #handleGetObject} method. If the resource still can't be found it throws a {@code MissingResourceException}.
Returns the named string resource from this {@code ResourceBundle}.
Returns the named resource from this {@code ResourceBundle}.
Sets the parent resource bundle of this {@code ResourceBundle}. The parent is searched for resources which are not found in this {@code ResourceBundle}.
Returns a locale with the most-specific field removed, or null if this locale had an empty language, country and variant.
default constructor
Returns a control according to {@code formats}.
Returns a control according to {@code formats} whose fallback locale is null.
Returns a list of candidate locales according to {@code baseName} in {@code locale}.
Returns a list of strings of formats according to {@code baseName}.
Returns the fallback locale for {@code baseName} in {@code locale}.
Returns a new ResourceBundle.
Returns the time to live of the ResourceBundle {@code baseName} in {@code locale}, default is TTL_NO_EXPIRATION_CONTROL.
Returns true if the ResourceBundle needs to reload.
a utility method to answer the name of a resource bundle according to the given base name and locale
a utility method to answer the name of a resource according to the given bundleName and suffix
Creates a {@code Scanner} with the specified {@code File} as input. The default charset is applied when reading the file.
Creates a {@code Scanner} with the specified {@code File} as input. The specified charset is applied when reading the file.
Creates a {@code Scanner} on the specified string.
Creates a {@code Scanner} on the specified {@code InputStream}. The default charset is applied when decoding the input.
Creates a {@code Scanner} on the specified {@code InputStream}. The specified charset is applied when decoding the input.
Creates a {@code Scanner} with the specified {@code Readable} as input.
Creates a {@code Scanner} with the specified {@code ReadableByteChannel} as input. The default charset is applied when decoding the input.
Creates a {@code Scanner} with the specified {@code ReadableByteChannel} as input. The specified charset is applied when decoding the input.
Closes this {@code Scanner} and the underlying input if the input implements {@code Closeable}. If the {@code Scanner} has been closed, this method will have no effect. Any scanning operation called after calling this method will throw an {@code IllegalStateException}.
Returns the delimiter {@code Pattern} in use by this {@code Scanner}.
Tries to find the pattern in the input. Delimiters are ignored. If the pattern is found before line terminator, the matched string will be returned, and the {@code Scanner} will advance to the end of the matched string. Otherwise, {@code null} will be returned and the {@code Scanner} will not advance. When waiting for input, the {@code Scanner} may be blocked. All the input may be cached if no line terminator exists in the buffer.
Compiles the pattern string and tries to find a substing matching it in the input data. The delimiter will be ignored. This is the same as invoking {@code findInLine(Pattern.compile(pattern))}.
Tries to find the pattern in the input between the current position and the specified horizon. Delimiters are ignored. If the pattern is found, the matched string will be returned, and the {@code Scanner} will advance to the end of the matched string. Otherwise, null will be returned and {@code Scanner} will not advance. When waiting for input, the {@code Scanner} may be blocked. <p> The {@code Scanner}'s search will never go more than {@code horizon} code points from current position. The position of {@code horizon} does have an effect on the result of the match. For example, when the input is "123" and current position is at zero, <code>findWithinHorizon(Pattern.compile("\\p{Digit}{3}"), 2)</code> will return {@code null}, while <code>findWithinHorizon(Pattern.compile("\\p{Digit}{3}"), 3)</code> will return {@code "123"}. {@code horizon} is treated as a transparent, non-anchoring bound. (refer to {@link Matcher#useTransparentBounds(boolean)} and {@link Matcher#useAnchoringBounds(boolean)}) <p> A {@code horizon} whose value is zero will be ignored and the whole input will be used for search. In this situation, all the input may be cached.
Tries to find the pattern in the input between the current position and the specified {@code horizon}. Delimiters are ignored. This call is the same as invoking {@code findWithinHorizon(Pattern.compile(pattern))}.
Returns whether this {@code Scanner} has one or more tokens remaining to parse. This method will block if the data is still being read.
Returns whether this {@code Scanner} has one or more tokens remaining to parse and the next token matches the given pattern. This method will block if the data is still being read.
Returns {@code true} if this {@code Scanner} has one or more tokens remaining to parse and the next token matches a pattern compiled from the given string. This method will block if the data is still being read. This call is equivalent to {@code hasNext(Pattern.compile(pattern))}.
Returns whether the next token can be translated into a valid {@code BigDecimal}.
Returns whether the next token can be translated into a valid {@code BigInteger} in the default radix.
Returns whether the next token can be translated into a valid {@code BigInteger} in the specified radix.
Returns whether the next token can be translated into a valid {@code boolean} value.
Returns whether the next token can be translated into a valid {@code byte} value in the default radix.
Returns whether the next token can be translated into a valid {@code byte} value in the specified radix.
Returns whether the next token translated into a valid {@code double} value.
Returns whether the next token can be translated into a valid {@code float} value.
Returns whether the next token can be translated into a valid {@code int} value in the default radix.
Returns whether the next token can be translated into a valid {@code int} value in the specified radix.
Returns whether there is a line terminator in the input. This method may block.
Returns whether the next token can be translated into a valid {@code long} value in the default radix.
Returns whether the next token can be translated into a valid {@code long} value in the specified radix.
Returns whether the next token can be translated into a valid {@code short} value in the default radix.
Returns whether the next token can be translated into a valid {@code short} value in the specified radix.
Returns the last {@code IOException} that was raised while reading from the underlying input.
Return the {@code Locale} of this {@code Scanner}.
Returns the result of the last matching operation. <p> The next* and find* methods return the match result in the case of a successful match.
Returns the next token. The token will be both prefixed and postfixed by the delimiter that is currently being used (or a string that matches the delimiter pattern). This method will block if input is being read.
Returns the next token if it matches the specified pattern. The token will be both prefixed and postfixed by the delimiter that is currently being used (or a string that matches the delimiter pattern). This method will block if input is being read.
Returns the next token if it matches the specified pattern. The token will be both prefixed and postfixed by the delimiter that is currently being used (or a string that matches the delimiter pattern). This method will block if input is being read. Calling this method is equivalent to {@code next(Pattern.compile(pattern))}.
Returns the next token as a {@code BigDecimal}. This method will block if input is being read. If the next token can be translated into a {@code BigDecimal} the following is done: All {@code Locale}-specific prefixes, group separators, and {@code Locale}-specific suffixes are removed. Then non-ASCII digits are mapped into ASCII digits via {@link Character#digit(char, int)}, and a negative sign (-) is added if the {@code Locale}-specific negative prefix or suffix was present. Finally the resulting string is passed to {@code BigDecimal(String) }.
Returns the next token as a {@code BigInteger}. This method will block if input is being read. Equivalent to {@code nextBigInteger(DEFAULT_RADIX)}.
Returns the next token as a {@code BigInteger} with the specified radix. This method will block if input is being read. If the next token can be translated into a {@code BigInteger} the following is done: All {@code Locale}-specific prefixes, group separators, and {@code Locale}-specific suffixes are removed. Then non-ASCII digits are mapped into ASCII digits via {@link Character#digit(char, int)}, and a negative sign (-) is added if the {@code Locale}-specific negative prefix or suffix was present. Finally the resulting String is passed to {@link BigInteger#BigInteger(String, int)}} with the specified radix.
Returns the next token as a {@code boolean}. This method will block if input is being read.
Returns the next token as a {@code byte}. This method will block if input is being read. Equivalent to {@code nextByte(DEFAULT_RADIX)}.
Returns the next token as an {@code int}. This method will block if input is being read. Equivalent to {@code nextInt(DEFAULT_RADIX)}.
Returns the skipped input and advances the {@code Scanner} to the beginning of the next line. The returned result will exclude any line terminator. When searching, if no line terminator is found, then a large amount of input will be cached. If no line at all can be found, a {@code NoSuchElementException} will be thrown.
Returns the next token as a {@code long}. This method will block if input is being read. Equivalent to {@code nextLong(DEFAULT_RADIX)}.
Returns the next token as a {@code short}. This method will block if input is being read. Equivalent to {@code nextShort(DEFAULT_RADIX)}.
Return the radix of this {@code Scanner}.
Tries to use specified pattern to match input starting from the current position. The delimiter will be ignored. If a match is found, the matched input will be skipped. If an anchored match of the specified pattern succeeds, the corresponding input will also be skipped. Otherwise, a {@code NoSuchElementException} will be thrown. Patterns that can match a lot of input may cause the {@code Scanner} to read in a large amount of input.
Tries to use the specified string to construct a pattern and then uses the constructed pattern to match input starting from the current position. The delimiter will be ignored. This call is the same as invoke {@code skip(Pattern.compile(pattern))}.
Sets the delimiting pattern of this {@code Scanner}.
Sets the delimiting pattern of this {@code Scanner} with a pattern compiled from the supplied string value.
Sets the {@code Locale} of this {@code Scanner} to a specified {@code Locale}.
Sets the radix of this {@code Scanner} to the specified radix.
Remove is not a supported operation on {@code Scanner}.
Initialize some components.
Check the {@code Scanner}'s state, if it is closed, IllegalStateException will be thrown.
Check the inputed pattern. If it is null, then a NullPointerException will be thrown out.
Change the matcher's string after reading input
Save the matcher's last find position
Change the matcher's status to last find position
Get integer's pattern
Get pattern of float
Add the locale specific positive prefixes and suffixes to the pattern
Add the locale specific negative prefixes and suffixes to the pattern
Remove locale related information from float String
Remove the locale specific prefixes, group separators, and locale specific suffixes from input string
Remove positive and negative sign from the parameter stringBuilder, and return whether the input string is negative
Find the prefixed delimiter and posefixed delimiter in the input resource and set the start index and end index of Matcher region. If postfixed delimiter does not exist, the end index is set to be end of input.
Find prefix delimiter
Handle some special cases
Find postfix delimiter
Read more data from underlying Readable. If nothing is available or I/O operation fails, global boolean variable inputExhausted will be set to true, otherwise set to false.
Expand the size of internal buffer.
Resets this scanner's delimiter, locale, and radix.
Constructs a new error with the given detail message.
Constructs a new error with the given detail message and cause.
Invalidates the cache of known service provider class names.
Returns an iterator over all the service providers offered by this service loader. Note that {@code hasNext} and {@code next} may throw if the configuration is invalid. <p>Each iterator will return new instances of the classes it iterates over, so callers may want to cache the results of a single call to this method rather than call it repeatedly. <p>The returned iterator does not support {@code remove}.
Constructs a service loader. If {@code classLoader} is null, the system class loader is used.
Constructs a service loader, using the current thread's context class loader.
Constructs a service loader, using the extension class loader.
Internal API to support built-in SPIs that check a system property first. Returns an instance specified by a property with the class' binary name, or null if no such property is set.
Constructs a {@code SimpleTimeZone} with the given base time zone offset from GMT and time zone ID. Timezone IDs can be obtained from {@code TimeZone.getAvailableIDs}. Normally you should use {@code TimeZone.getDefault} to construct a {@code TimeZone}.
Constructs a {@code SimpleTimeZone} with the given base time zone offset from GMT, time zone ID, and times to start and end the daylight savings time. Timezone IDs can be obtained from {@code TimeZone.getAvailableIDs}. Normally you should use {@code TimeZone.getDefault} to create a {@code TimeZone}. For a time zone that does not use daylight saving time, do not use this constructor; instead you should use {@code SimpleTimeZone(rawOffset, ID)}. <p> By default, this constructor specifies day-of-week-in-month rules. That is, if the {@code startDay} is 1, and the {@code startDayOfWeek} is {@code SUNDAY}, then this indicates the first Sunday in the {@code startMonth}. A {@code startDay} of -1 likewise indicates the last Sunday. However, by using negative or zero values for certain parameters, other types of rules can be specified. <p> Day of month: To specify an exact day of the month, such as March 1, set {@code startDayOfWeek} to zero. <p> Day of week after day of month: To specify the first day of the week occurring on or after an exact day of the month, make the day of the week negative. For example, if {@code startDay} is 5 and {@code startDayOfWeek} is {@code -MONDAY}, this indicates the first Monday on or after the 5th day of the {@code startMonth}. <p> Day of week before day of month: To specify the last day of the week occurring on or before an exact day of the month, make the day of the week and the day of the month negative. For example, if {@code startDay} is {@code -21} and {@code startDayOfWeek} is {@code -WEDNESDAY}, this indicates the last Wednesday on or before the 21st of the {@code startMonth}. <p> The above examples refer to the {@code startMonth}, {@code startDay}, and {@code startDayOfWeek}; the same applies for the {@code endMonth}, {@code endDay}, and {@code endDayOfWeek}. <p> The daylight savings time difference is set to the default value: one hour.
Constructs a {@code SimpleTimeZone} with the given base time zone offset from GMT, time zone ID, times to start and end the daylight savings time, and the daylight savings time difference in milliseconds.
Construct a {@code SimpleTimeZone} with the given base time zone offset from GMT, time zone ID, times to start and end the daylight savings time including a mode specifier, the daylight savings time difference in milliseconds. The mode specifies either {@link #WALL_TIME}, {@link #STANDARD_TIME}, or {@link #UTC_TIME}.
Sets the daylight savings offset in milliseconds for this {@code SimpleTimeZone}.
Sets the rule which specifies the end of daylight savings time.
Sets the rule which specifies the start of daylight savings time.
Sets the starting year for daylight savings time in this {@code SimpleTimeZone}. Years before this start year will always be in standard time.
Returns whether the stack is empty or not.
Pushes the specified object onto the top of the stack.
Returns the index of the first occurrence of the object, starting from the top of the stack.
Constructs a new {@code StringTokenizer} for the parameter string using whitespace as the delimiter. The {@code returnDelimiters} flag is set to {@code false}.
Constructs a new {@code StringTokenizer} for the parameter string using the specified delimiters. The {@code returnDelimiters} flag is set to {@code false}. If {@code delimiters} is {@code null}, this constructor doesn't throw an {@code Exception}, but later calls to some methods might throw a {@code NullPointerException}.
Constructs a new {@code StringTokenizer} for the parameter string using the specified delimiters, returning the delimiters as tokens if the parameter {@code returnDelimiters} is {@code true}. If {@code delimiters} is null this constructor doesn't throw an {@code Exception}, but later calls to some methods might throw a {@code NullPointerException}.
Returns the number of unprocessed tokens remaining in the string.
Returns {@code true} if unprocessed tokens remain. This method is implemented in order to satisfy the {@code Enumeration} interface.
Returns {@code true} if unprocessed tokens remain.
Returns the next token in the string as an {@code Object}. This method is implemented in order to satisfy the {@code Enumeration} interface.
Returns the next token in the string as a {@code String}.
Returns the next token in the string as a {@code String}. The delimiters used are changed to the specified delimiters.
Starts a new timer.
Cancels timer.
Creates a new named {@code Timer} which may be specified to be run as a daemon thread.
Creates a new named {@code Timer} which does not run as a daemon thread.
Creates a new {@code Timer} which may be specified to be run as a daemon thread.
Creates a new non-daemon {@code Timer}.
Cancels the {@code Timer} and all scheduled tasks. If there is a currently running task it is not affected. No more tasks may be scheduled on this {@code Timer}. Subsequent calls do nothing.
Removes all canceled tasks from the task queue. If there are no other references on the tasks, then after this call they are free to be garbage collected.
Schedule a task for single execution. If {@code when} is less than the current time, it will be scheduled to be executed as soon as possible.
Schedule a task for single execution after a specified delay.
Schedule a task for repeated fixed-delay execution after a specific delay.
Schedule a task for repeated fixed-delay execution after a specific time has been reached.
Schedule a task for repeated fixed-rate execution after a specific delay has passed.
Schedule a task for repeated fixed-rate execution after a specific time has been reached.
Schedule a task.
Method called from the Timer for synchronized getting of when field.
Method called from the Timer object when scheduling an event @param time
Is TimerTask scheduled into any timer? otherwise.
Cancels the {@code TimerTask} and removes it from the {@code Timer}'s queue. Generally, it returns {@code false} if the call did not prevent a {@code TimerTask} from running at least once. Subsequent calls have no effect.
Returns the scheduled execution time. If the task execution is in progress it returns the execution time of the ongoing task. Tasks which have not yet run return an undefined value.
Returns a new time zone with the same ID, raw offset, and daylight savings time rules as this time zone.
Returns the system's installed time zone IDs. Any of these IDs can be passed to {@link #getTimeZone} to lookup the corresponding time zone instance.
Returns the IDs of the time zones whose offset from UTC is {@code offsetMillis}. Any of these IDs can be passed to {@link #getTimeZone} to lookup the corresponding time zone instance.
Returns the user's preferred time zone. This may have been overridden for this process with {@link #setDefault}. <p>Since the user's time zone changes dynamically, avoid caching this value. Instead, use this method to look it up for each use.
Equivalent to {@code getDisplayName(false, TimeZone.LONG, Locale.getDefault())}. <a href="../util/Locale.html#default_locale">Be wary of the default locale</a>.
Equivalent to {@code getDisplayName(false, TimeZone.LONG, locale)}.
Equivalent to {@code getDisplayName(daylightTime, style, Locale.getDefault())}. <a href="../util/Locale.html#default_locale">Be wary of the default locale</a>.
Returns the {@link #SHORT short} or {@link #LONG long} name of this time zone with either standard or daylight time, as written in {@code locale}. If the name is not available, the result is in the format {@code GMT[+-]hh:mm}.
Returns the ID of this {@code TimeZone}, such as {@code America/Los_Angeles}, {@code GMT-08:00} or {@code UTC}.
Returns the daylight savings offset in milliseconds for this time zone. The base implementation returns {@code 3600000} (1 hour) for time zones that use daylight savings time and {@code 0} for timezones that do not. Subclasses should override this method for other daylight savings offsets. <p>Note that this method doesn't tell you whether or not to apply the offset: you need to call {@code inDaylightTime} for the specific time you're interested in. If this method returns a non-zero offset, that only tells you that this {@code TimeZone} sometimes observes daylight savings.
Returns the offset in milliseconds from UTC for this time zone at {@code time}. The offset includes daylight savings time if the specified date is within the daylight savings time period.
Returns a {@code TimeZone} suitable for {@code id}, or {@code GMT} on failure. <p>An id can be an Olson name of the form <i>Area</i>/<i>Location</i>, such as {@code America/Los_Angeles}. The {@link #getAvailableIDs} method returns the supported names. <p>This method can also create a custom {@code TimeZone} using the following syntax: {@code GMT[+|-]hh[[:]mm]}. For example, {@code TimeZone.getTimeZone("GMT+14:00")} would return an object with a raw offset of +14 hours from UTC, and which does <i>not</i> use daylight savings. These are rarely useful, because they don't correspond to time zones actually in use. <p>Other than the special cases "UTC" and "GMT" (which are synonymous in this context, both corresponding to UTC), Android does not support the deprecated three-letter time zone IDs used in Java 1.1.
Returns a new SimpleTimeZone for an id of the form "GMT[+|-]hh[[:]mm]", or null.
Returns true if {@code timeZone} has the same rules as this time zone. <p>The base implementation returns true if both time zones have the same raw offset.
Overrides the default time zone for the current process only. <p><strong>Warning</strong>: avoid using this method to use a custom time zone in your process. This value may be cleared or overwritten at any time, which can cause unexpected behavior. Instead, manually supply a custom time zone as needed.
Sets the ID of this {@code TimeZone}.
Returns the length of the run beginning at the specified position in the specified array and reverses the run if it is descending (ensuring that the run will always be ascending when the method returns). A run is the longest ascending sequence with: or the longest descending sequence with: For its intended use in a stable mergesort, the strictness of the definition of "descending" is needed so that the call can safely reverse a descending sequence without violating stability.
Merges the two runs at stack indices i and i+1.  Run i must be the penultimate or antepenultimate run on the stack.  In other words, i must be equal to stackSize-2 or stackSize-3.
Merges two adjacent runs in place, in a stable fashion.  The first element of the first run must be greater than the first element of the second run (a[base1] > a[base2]), and the last element of the first run (a[base1 + len1-1]) must be greater than all elements of the second run. For performance, this method should be called only when len1 <= len2; its twin, mergeHi should be called if len1 >= len2.  (Either method may be called if len1 == len2.)
Like mergeLo, except that this method should be called only if len1 >= len2; mergeLo should be called if len1 <= len2.  (Either method may be called if len1 == len2.)
Constructs a new {@code TooManyListenersException} with the stack trace and message filled in.
Create a natural order tree map populated with the key/value pairs of {@code copyFrom}. This map's keys must be mutually comparable and non-null. <p>Even if {@code copyFrom} is a {@code SortedMap}, the constructed map <strong>will not</strong> use {@code copyFrom}'s ordering. This constructor always creates a naturally-ordered map. Because the {@code TreeMap} constructor overloads are ambiguous, prefer to construct a map and populate it in two steps: <pre>   {@code TreeMap<String, Integer> customOrderedMap customOrderedMap.putAll(copyFrom); }</pre>
Returns a possibly-flipped relation for use in descending views.
Returns an immutable version of {@param entry}. Need this because we allow entry to be null, in which case we return a null SimpleImmutableEntry.
Returns the next node in an inorder traversal, or null if this is the last node in the tree.
Returns the previous node in an inorder traversal, or null if this is the first node in the tree.
Navigable methods.
View factory methods.
Returns true if the key is in bounds. Use this overload with NO_BOUND to skip bounds checking on either end.
Returns the entry if it is in bounds, or null if it is out of bounds.
Navigable methods.
Performs a find on the underlying tree after constraining it to the bounds of this view. Examples: bound is (A..C) findBounded(B, FLOOR) stays source.find(B, FLOOR) bound is (A..C) findBounded(C, FLOOR) becomes source.find(C, LOWER) bound is (A..C) findBounded(D, LOWER) becomes source.find(C, LOWER) bound is (A..C] findBounded(D, FLOOR) becomes source.find(C, FLOOR) bound is (A..C] findBounded(D, LOWER) becomes source.find(C, FLOOR)
Returns the number of elements in the iteration.
Constructs a new empty instance of {@code TreeSet} which uses natural ordering.
Constructs a new instance of {@code TreeSet} which uses natural ordering and containing the unique elements in the specified collection.
Constructs a new empty instance of {@code TreeSet} which uses the specified comparator.
Constructs a new instance of {@code TreeSet} containing the elements of the specified SortedSet and using the same Comparator.
Returns the comparator used to compare elements in this {@code TreeSet}.
Returns the first element in this set.
Returns the last element in this set.
Constructs an {@code UnknownFormatConversionException} with the unknown format conversion.
Returns the conversion associated with the exception.
Constructs a new {@code UnknownFormatFlagsException} with the specified flags.
Returns the flags associated with the exception.
<p> Constructs an instance with the specified bits.
<p> Sets up the transient fields of this instance based on the current values of the {@code mostSigBits} and {@code leastSigBits} fields.
<p> Generates a variant 2, version 4 (randomly generated number) UUID as per
<p> Generates a variant 2, version 3 (name-based, MD5-hashed) UUID as per <a
<p> Parses a UUID string with the format defined by {@link #toString()}.
<p> The 64 least significant bits of the UUID.
<p> The 64 most significant bits of the UUID.
<p> The version of the variant 2 UUID as per <a is not 2, then the version will be 0. <ul> <li>1 - Time-based UUID</li> <li>2 - DCE Security UUID</li> <li>3 - Name-based with MD5 hashing UUID ({@link #nameUUIDFromBytes(byte[])})</li> <li>4 - Randomly generated UUID ({@link #randomUUID()})</li> <li>5 - Name-based with SHA-1 hashing UUID</li> </ul>
<p> The variant of the UUID as per <a <ul> <li>0 - Reserved for NCS compatibility</li> <li>2 - RFC 4122/Leach-Salz</li> <li>6 - Reserved for Microsoft Corporation compatibility</li> <li>7 - Reserved for future use</li> </ul>
<p> The timestamp value of the version 1, variant 2 UUID as per <a
<p> The clock sequence value of the version 1, variant 2 UUID as per <a
<p> The node value of the version 1, variant 2 UUID as per <a
<p> Compares this UUID to the specified UUID. The natural ordering of UUIDs is based upon the value of the bits from most significant to least significant.
<p> Resets the transient fields to match the behavior of the constructor.
Constructs a new vector using the default capacity.
Constructs a new vector using the specified capacity.
Constructs a new vector using the specified capacity and capacity increment.
Constructs a new instance of {@code Vector} containing the elements in {@code collection}. The order of the elements in the new {@code Vector} is dependent on the iteration order of the seed collection.
Adds the specified object at the end of this vector.
Returns the number of elements this vector can hold without growing.
Attempts to copy elements contained by this {@code Vector} into the corresponding elements of the supplied {@code Object} array.
Returns an enumeration on the elements of this vector. The results of the enumeration may be affected if the contents of this vector is modified.
Ensures that this vector can hold the specified number of elements without growing.
JIT optimization
Searches in this vector for the index of the specified object. The search for the object starts at the specified location and moves towards the end of this vector.
Inserts the specified object into this vector at the specified location. This object is inserted before any previous element at the specified location. All elements with an index equal or greater than {@code location} have their index increased by 1. If the location is equal to the size of this vector, the object is added at the end.
Searches in this vector for the index of the specified object. The search for the object starts at the specified location and moves towards the start of this vector.
Removes all elements from this vector, leaving the size zero and the capacity unchanged.
Removes the first occurrence, starting at the beginning and moving towards the end, of the specified object from this vector. All elements with an index bigger than the element that gets removed have their index decreased by 1.
Removes the element found at index position {@code location} from this {@code Vector}. All elements with an index bigger than {@code location} have their index decreased by 1.
Replaces the element at the specified location in this vector with the specified object.
This method was extracted to encourage VM to inline callers. TODO: when we have a VM that can actually inline, move the test in here too!
Sets the size of this vector to the specified size. If there are more than length elements in this vector, the elements at end are lost. If there are less than length elements in the vector, the additional elements contain null.
Sets the capacity of this vector to be the same as the size.
Constructs a new empty {@code WeakHashMap} instance.
Constructs a new {@code WeakHashMap} instance with the specified capacity.
Constructs a new {@code WeakHashMap} instance with the specified capacity and load factor.
Constructs a new {@code WeakHashMap} instance containing the mappings from the specified map.
Creates a new <code>DESedeKeySpec</code> instance from the first 24 ( {@link #DES_EDE_KEY_LEN}) bytes of the specified key data.
Creates a new <code>DESedeKeySpec</code> instance from the first 24 ( {@link #DES_EDE_KEY_LEN} ) bytes of the specified key data starting at <code>offset</code>.
Returns a copy of the key.
Returns whether the specified key data starting at <code>offset</code> is <i>parity-adjusted</i>.
Creates a new <code>DESKeySpec</code> from the first 8 bytes of the specified key data.
Creates a new <code>DESKeySpec</code> from the first 8 bytes of the specified key data starting at <code>offset</code>.
Returns whether the specified key data starting at <code>offset</code> is weak or semi-weak.
Creates a new <code>DHGenParameterSpec</code> instance with the specified parameters.
Returns the size of the <i>prime modulus</i> in bits.
Returns the size of the <i>random exponent</i> in bits.
Creates a new <code>DHParameterSpec</code> instance with the specified <i>prime modulus</i> and <i>base generator</i>.
Creates a new <code>DHParameterSpec</code> instance with the specified <i>prime modulus</i>, <i>base generator</i> and size (in bits) of the <i>random exponent</i>.
Returns the <i>prime modulus</i> of this parameter specification.
Returns the <i>base generator</i> of this parameter specification.
Returns the size (in bits) of the <i>random exponent</i>.
Creates a new <code>DHPrivateKeySpec</code> with the specified <i>private value</i> <code>x</code>. <i>prime modulus</i> <code>p</code> and <i>base generator</i> <code>g</code>.
Returns the <i>private value</i> <code>x</code>.
Returns the <i>prime modulus</i> <code>p</code>.
Returns the <i>base generator</i> <code>g</code>.
Creates a new <code>DHPublicKeySpec</code> instance with the specified <i>public value</i> <code>y</code>, the <i>prime modulus</i> <code>p</code> and the <i>base generator</i> <code>g</code>.
Returns the <i>public value</i> <code>y</code>.
Returns the <i>base generator</i> <code>g</code>;
Creates a new <code>IvParameterSpec</code> instance with the bytes from the specified buffer <i>iv</i> used as <i>initialization vector</i>.
Creates a new <code>IvParameterSpec</code> instance with <code>byteCount</code> bytes from the specified buffer <code>iv</code> starting at <code>offset</code>.
Returns a copy of the <i>initialization vector</i> data.
Creates a new <code>OAEPParameterSpec</code> instance with the specified <i>message digest</i> algorithm name, <i>mask generation function</i> (<i>mgf</i>) algorithm name, <i>parameters</i> for the <i>mgf</i> algorithm and the <i>source of the label <code>L</code></i>.
Returns the algorithm name of the <i>message digest</i>.
Returns the algorithm name of the <i>mask generation function</i>.
Returns the algorithm parameter specification for the mask generation function algorithm.
Returns the source of the label <code>L</code>.
Creates a new <code>PBEKeySpec</code> with the specified password.
Creates a new <code>PBEKeySpec</code> with the specified password, salt, iteration count and the desired length of the derived key.
Creates a new <code>PBEKeySpec</code> with the specified password, salt and iteration count.
Clears the password by overwriting it.
Returns a copy of the password of this key specification.
Returns a copy of the salt of this key specification.
Returns the iteration count of this key specification.
Returns the desired key length of the derived key.
Creates a new <code>PBEParameterSpec</code> with the specified salt and iteration count.
Returns a copy to the salt.
Returns the iteration count.
Creates a new <code>PSource</code> instance with the specified source algorithm identifier.
Returns the source algorithm identifier.
Creates a new instance of <code>PSpecified</code> with the specified parameter <code>P</code>.
Returns a copy of the value of the parameter <code>P</code>.
Creates a new <code>RC2ParameterSpec</code> instance with the specified effective key length (in bits),
Creates a new <code>RC2ParameterSpec</code> instance with the specified effective key length (in bits) and <i>initialization vector</i>. <p> The size of the <i>initialization vector</i> must be at least 8 bytes which are copied to protect them against modification.
Creates a new <code>RC2ParameterSpec</code> instance with the specified effective key length (in bits) and <i>initialization vector<i>. <p> The size of the <i>initialization vector</i> starting at <code>offset</code> must be at least 8 bytes which are copied to protect them against modification.
Returns the effective key length (in bits).
Returns a copy of the initialization vector.
Creates a new <code>RC5ParameterSpec</code> instance with the specified version, round count an word size (in bits).
Creates a new <code>RC5ParameterSpec</code> instance with the specified version, round count, word size (in bits) and an <i>initialization vector</i>. <p> The size of the <i>initialization vector</i> must be at least <code>2 * (wordSize / 8)</code> bytes which are copied to protect them against modification.
Creates a new <code>RC5ParameterSpec</code> instance with the specified version, round count, wordSize (in bits), an <i>initialization vector</i> and an offset. <p> The size of the <i>initialization vector</i> must be at least <code>offset + (2 * (wordSize / 8))</code> bytes. The bytes starting at <code>offset</code> are copied to protect them against modification.
Returns the round count.
Returns the word size (in bits).
Creates a new <code>SecretKeySpec</code> for the specified key data and algorithm name.
Creates a new <code>SecretKeySpec</code> for the key data from the specified buffer <code>key</code> starting at <code>offset</code> with length <code>len</code> and the specified <code>algorithm</code> name.
Returns the algorithm name.
Returns the name of the format used to encode the key.
Returns the encoded form of this secret key.
Creates a new instance of {@code BadPaddingException} with a message.
Creates a new Cipher instance.
Creates a new Cipher for the specified transformation. The installed providers are searched in order for an implementation of the specified transformation. The first found provider providing the transformation is used to create the cipher. If no provider is found an exception is thrown.
Creates a new cipher for the specified transformation provided by the specified provider.
Creates a new cipher for the specified transformation.
Find appropriate Cipher according the specification rules
Returns the provider of this cipher instance.
Returns the name of the algorithm of this cipher instance. <p> This is the name of the <i>transformation</i> argument used in the {@code getInstance} call creating this object.
Returns this ciphers block size (in bytes).
Returns the length in bytes an output buffer needs to be when this cipher is updated with {@code inputLen} bytes.
Returns the <i>initialization vector</i> for this cipher instance.
Returns the parameters that where used to create this cipher instance. <p> These may be a the same parameters that were used to create this cipher instance, or may be a combination of default and random parameters, depending on the underlying cipher implementation.
Returns the exemption mechanism associated with this cipher.
Initializes this cipher instance with the specified key. <p> The cipher is initialized for the specified operational mode (one of: encryption, decryption, key wrapping or key unwrapping) depending on {@code opmode}. <p> If this cipher instance needs any algorithm parameters or random values that the specified key can not provide, the underlying implementation of this cipher is supposed to generate the required parameters (using its provider or random values). <p> When a cipher instance is initialized by a call to any of the {@code init} methods, the state of the instance is overridden, meaning that it is equivalent to creating a new instance and calling its {@code init} method.
Initializes this cipher instance with the specified key and a source of randomness. <p> The cipher is initialized for the specified operational mode (one of: encryption, decryption, key wrapping or key unwrapping) depending on {@code opmode}. <p> If this cipher instance needs any algorithm parameters or random values that the specified key can not provide, the underlying implementation of this cipher is supposed to generate the required parameters (using its provider or random values). Random values are generated using {@code random}; <p> When a cipher instance is initialized by a call to any of the {@code init} methods, the state of the instance is overridden, means it is equivalent to creating a new instance and calling it {@code init} method.
Initializes this cipher instance with the specified key and algorithm parameters. <p> The cipher is initialized for the specified operational mode (one of: encryption, decryption, key wrapping or key unwrapping). <p> If this cipher instance needs any algorithm parameters and {@code params} is {@code null}, the underlying implementation of this cipher is supposed to generate the required parameters (using its provider or random values). <p> When a cipher instance is initialized by a call to any of the {@code init} methods, the state of the instance is overridden, means it is equivalent to creating a new instance and calling it {@code init} method.
Initializes this cipher instance with the specified key, algorithm parameters and a source of randomness. <p> The cipher is initialized for the specified operational mode (one of: encryption, decryption, key wrapping or key unwrapping) depending on {@code opmode}. <p> If this cipher instance needs any algorithm parameters and {@code params} is {@code null}, the underlying implementation of this cipher is supposed to generate the required parameters (using its provider or random values). Random values are generated using {@code random}; <p> When a cipher instance is initialized by a call to any of the {@code init} methods, the state of the instance is overridden, meaning that it is equivalent to creating a new instance and calling it {@code init} method.
Initializes this cipher instance with the specified key and algorithm parameters. <p> The cipher is initialized for the specified operation (one of: encryption, decryption, key wrapping or key unwrapping) depending on {@code opmode}. <p> If this cipher instance needs any algorithm parameters and {@code params} is {@code null}, the underlying implementation of this cipher is supposed to generate the required parameters (using its provider or random values). <p> When a cipher instance is initialized by a call to any of the {@code init} methods, the state of the instance is overridden, meaning that it is equivalent to creating a new instance and calling it {@code init} method.
Initializes this cipher instance with the specified key, algorithm parameters and a source of randomness. <p> The cipher will be initialized for the specified operation (one of: encryption, decryption, key wrapping or key unwrapping) depending on {@code opmode}. <p> If this cipher instance needs any algorithm parameters and {@code params} is {@code null}, the underlying implementation of this cipher is supposed to generate the required parameters (using its provider or random values). Random values are generated using {@code random}. <p> When a cipher instance is initialized by a call to any of the {@code init} methods, the state of the instance is overridden, means it is equivalent to creating a new instance and calling it {@code init} method.
Initializes this cipher instance with the public key from the specified certificate. <p> The cipher will be initialized for the specified operation (one of: encryption, decryption, key wrapping or key unwrapping) depending on {@code opmode}. <p> It the type of the certificate is X.509 and the certificate has a <i>key usage</i> extension field marked as critical, the specified {@code opmode} has the be enabled for this key, otherwise an {@code InvalidKeyException} is thrown. <p> If this cipher instance needs any algorithm parameters that the key in the certificate can not provide, the underlying implementation of this cipher is supposed to generate the required parameters (using its provider or random values). <p> When a cipher instance is initialized by a call to any of the {@code init} methods, the state of the instance is overridden, means it is equivalent to creating a new instance and calling it {@code init} method.
Initializes this cipher instance with the public key from the specified certificate and a source of randomness. <p> The cipher will be initialized for the specified operation (one of: encryption, decryption, key wrapping or key unwrapping) depending on {@code opmode}. <p> It the type of the certificate is X.509 and the certificate has a <i>key usage</i> extension field marked as critical, the specified {@code opmode} has the be enabled for this key, otherwise an {@code InvalidKeyException} is thrown. <p> If this cipher instance needs any algorithm parameters that the key in the certificate can not provide, the underlying implementation of this cipher is supposed to generate the required parameters (using its provider or random values). Random values are generated using {@code random}. <p> When a cipher instance is initialized by a call to any of the {@code init} methods, the state of the instance is overridden, means it is equivalent to creating a new instance and calling it {@code init} method.
Continues a multi-part transformation (encryption or decryption). The transformed bytes are returned.
Continues a multi-part transformation (encryption or decryption). The transformed bytes are stored in the {@code output} buffer. <p> If the size of the {@code output} buffer is too small to hold the result, a {@code ShortBufferException} is thrown. Use {@link Cipher#getOutputSize getOutputSize} to check for the size of the output buffer.
Continues a multi-part transformation (encryption or decryption). The {@code input.remaining()} bytes starting at {@code input.position()} are transformed and stored in the {@code output} buffer. <p> If the {@code output.remaining()} is too small to hold the transformed bytes a {@code ShortBufferException} is thrown. Use {@link Cipher#getOutputSize getOutputSize} to check for the size of the output buffer.
Finishes a multi-part transformation (encryption or decryption). <p> Processes any bytes that may have been buffered in previous {@code update} calls.
Finishes a multi-part transformation (encryption or decryption). <p> Processes any bytes that may have been buffered in previous {@code update} calls. <p> The final transformed bytes are stored in the {@code output} buffer.
Finishes a multi-part transformation (encryption or decryption). <p> Processes the bytes in {@code input} buffer, and any bytes that have been buffered in previous {@code update} calls.
Finishes a multi-part transformation (encryption or decryption). <p> Processes the {@code inputLen} bytes in {@code input} buffer at {@code inputOffset}, and any bytes that have been buffered in previous {@code update} calls.
Finishes a multi-part transformation (encryption or decryption). <p> Processes the {@code input.remaining()} bytes in {@code input} buffer at {@code input.position()}, and any bytes that have been buffered in previous {@code update} calls. The transformed bytes are placed into {@code output} buffer.
Wraps a key using this cipher instance.
Unwraps a key using this cipher instance.
Returns the maximum key length for the specified transformation.
Returns the maximum cipher parameter value for the specified transformation. If there is no maximum limit, {@code null} is returned.
Creates a new {@code CipherInputStream} instance for an {@code InputStream} and a cipher. <p><strong>Warning:</strong> passing a null source creates an invalid {@code CipherInputStream}. All read operations on such a stream will fail.
Creates a new {@code CipherInputStream} instance for an {@code InputStream} without a cipher. <p> A {@code NullCipher} is created and used to process the data.
Creates a new {@code CipherOutputStream} instance for an {@code OutputStream} and a {@code Cipher}.
Creates a new {@code CipherOutputStream} instance for an {@code OutputStream} without a cipher. <p> A {@code NullCipher} is created to process the data.
Writes the single byte to this cipher output stream.
Writes the {@code len} bytes from buffer {@code b} starting at offset {@code off} to this cipher output stream.
Sets the mode for this cipher.
Finishes a multi-part transformation (encryption or decryption). <p> Processes the {@code inputLen} bytes in {@code input} buffer at {@code inputOffset}, and any bytes that have been buffered in previous {@code update} calls.
Wraps a key using this cipher instance. This method has been added to this class (for backwards compatibility, it cannot be abstract). If this method is not overridden, it throws an {@code UnsupportedOperationException}.
Unwraps a key using this cipher instance. <p> This method has been added to this class (for backwards compatibility, it cannot be abstract). If this method is not overridden, it throws an {@code UnsupportedOperationException}.
Returns the size of a specified key object in bits. This method has been added to this class (for backwards compatibility, it cannot be abstract). If this method is not overridden, it throws an {@code UnsupportedOperationException}.
Creates an {@code EncryptedPrivateKeyInfo} instance from its encoded representation by parsing it.
Creates an {@code EncryptedPrivateKeyInfo} instance from an algorithm name and its encrypted data.
Creates an {@code EncryptedPrivateKeyInfo} instance from the encryption algorithm parameters an its encrypted data.
Returns the name of the encryption algorithm.
Returns the parameters used by the encryption algorithm.
Returns the encrypted data of this key.
Returns the {@code PKCS8EncodedKeySpec} object extracted from the encrypted data. <p> The cipher must be initialize in either {@code Cipher.DECRYPT_MODE} or {@code Cipher.UNWRAP_MODE} with the same parameters and key used for encrypting this.
Returns the {@code PKCS8EncodedKeySpec} object extracted from the encrypted data.
Returns the ASN.1 encoded representation of this object.
Performs all needed alg name mappings. Returns 'true' if mapping available 'false' otherwise
Creates a {@code ExemptionMechanism} instance.
Returns the name of this {@code ExemptionMechanism}.
Returns a new {@code ExemptionMechanism} instance that provides the specified exemption mechanism algorithm.
Returns a new {@code ExemptionMechansm} instance that provides the specified exemption mechanism algorithm from the specified provider.
Returns a new {@code ExemptionMechanism} instance that provides the specified exemption mechanism algorithm from the specified provider.
Returns the provider of this {@code ExemptionMechanism} instance.
Returns whether the result blob for this {@code ExemptionMechanism} instance has been generated successfully and that the specified key is the same as the one that was used to initialize and generate.
Returns the size in bytes for the output buffer needed to hold the output of the next {@link #genExemptionBlob} call, given the specified {@code inputLen} (in bytes).
Initializes this {@code ExemptionMechanism} instance with the specified key.
Initializes this {@code ExemptionMechanism} instance with the specified key and algorithm parameters.
Generates the result key blob for this exemption mechanism.
Generates the result key blob for this exemption mechanism and stores it into the {@code output} buffer.
Generates the result key blob for this exemption mechanism and stores it into the {@code output} buffer at offset {@code outputOffset}.
Override to clear any key state in the instance.
Creates a new {@code ExemptionMechanismException} with the specified message.
Creates a new {@code IllegalBlockSizeException} with the specified message.
Creates a new {@code KeyAgreement} instance.
Returns the name of the key agreement algorithm.
Returns the provider for this {@code KeyAgreement} instance.
Creates a new {@code KeyAgreement} for the specified algorithm.
Creates a new {@code KeyAgreement} for the specified algorithm from the specified provider.
Create a new {@code KeyAgreement} for the specified algorithm from the specified provider.
Initializes this {@code KeyAgreement} with the specified key.
Initializes this {@code KeyAgreement} with the specified key and the specified randomness source.
Initializes this {@code KeyAgreement} with the specified key and the algorithm parameters.
Initializes this {@code KeyAgreement} with the specified key, algorithm parameters and randomness source.
Does the next (or the last) phase of the key agreement, using the specified key.
Generates the shared secret.
Generates the shared secret and stores it into the buffer {@code sharedSecred} at {@code offset}.
Creates a new {@code KeyGenerator} instance.
Returns the name of the key generation algorithm.
Returns the provider of this {@code KeyGenerator} instance.
Creates a new {@code KeyGenerator} instance that provides the specified key algorithm,
Creates a new {@code KeyGenerator} instance that provides the specified key algorithm from the specified provider.
Generates a secret key.
Initializes this {@code KeyGenerator} instance with the specified algorithm parameters.
Initializes this {@code KeyGenerator} instance with the specified algorithm parameters and randomness source.
Initializes this {@code KeyGenerator} instance for the specified key size (in bits).
Initializes this {@code KeyGenerator} instance for the specified key size (in bits) using the specified randomness source.
Initializes this {@code KeyGenerator} with the specified randomness source.
Creates a new {@code Mac} instance.
Returns the name of the MAC algorithm.
Returns the provider of this {@code Mac} instance.
Creates a new {@code Mac} instance that provides the specified MAC algorithm.
Creates a new {@code Mac} instance that provides the specified MAC algorithm from the specified provider.
Returns the length of this MAC (in bytes).
Initializes this {@code Mac} instance with the specified key and algorithm parameters.
Initializes this {@code Mac} instance with the specified key.
Updates this {@code Mac} instance with the specified byte.
Updates this {@code Mac} instance with the data from the specified buffer {@code input} from the specified {@code offset} and length {@code len}.
Copies the buffer provided as input for further processing.
Updates this {@code Mac} instance with the data from the specified buffer, starting at {@link ByteBuffer#position()}, including the next {@link ByteBuffer#remaining()} bytes.
Computes the digest of this MAC based on the data previously specified in {@link #update} calls. <p> This {@code Mac} instance is reverted to its initial state and can be used to start the next MAC computation with the same parameters or initialized with different parameters.
Computes the digest of this MAC based on the data previously specified in {@link #update} calls and stores the digest in the specified {@code output} buffer at offset {@code outOffset}. <p> This {@code Mac} instance is reverted to its initial state and can be used to start the next MAC computation with the same parameters or initialized with different parameters.
Computes the digest of this MAC based on the data previously specified on {@link #update} calls and on the final bytes specified by {@code input} (or based on those bytes only). <p> This {@code Mac} instance is reverted to its initial state and can be used to start the next MAC computation with the same parameters or initialized with different parameters.
Resets this {@code Mac} instance to its initial state. <p> This {@code Mac} instance is reverted to its initial state and can be used to start the next MAC computation with the same parameters or initialized with different parameters.
Initializes this {@code MacSpi} instance with the specified key and algorithm parameters.
Creates a new {@code NoSuchPaddingException} with the specified message.
Creates a new {@code NullCipher} instance.
Creates a new {@code SealedObject} instance wrapping the specified object and sealing it using the specified cipher. <p> The cipher must be fully initialized.
Creates a new {@code SealedObject} instance by copying the data from the specified object.
Returns the algorithm this object was sealed with.
Returns the wrapped object, decrypting it using the specified key.
Returns the wrapped object, decrypting it using the specified cipher.
Returns the wrapped object, decrypting it using the specified key. The specified provider is used to retrieve the cipher algorithm.
Creates a new {@code SecretKeyFactory}
Returns the name of the secret key algorithm.
Returns the provider for this {@code SecretKeyFactory} instance.
Creates a new {@code SecretKeyFactory} instance for the specified key algorithm.
Creates a new {@code SecretKeyFactory} instance for the specified key algorithm from the specified {@code provider}.
Creates a new {@code SecretKeyFactory} instance for the specified key algorithm from the specified provider.
Generate a secret key from the specified key specification.
Translates the specified secret key into an instance of the corresponding key from the provider of this key factory.
Creates a new instance of {@code ShortBufferException} with the specified message
Creates a new {@code CertPathTrustManagerParameters} with the specified certification path parameters.
Returns a copy of the certification path parameters.
Returns true if {@code hostname} matches {@code cn}.
Returns all SubjectAlt DNS names from an X509Certificate. <p>Note: Java doesn't appear able to extract international characters from the SubjectAlts.  It can only extract international characters from the CN field. <p>(Or maybe the version of OpenSSL I'm using to test isn't storing the international characters correctly in the SubjectAlts?).
Creates a new {@code HandshakeCompletedEvent} with the specified SSL socket and SSL session.
Returns the SSL session associated with this event.
Returns the name of the cipher suite negotiated during this handshake.
Returns the list of local certificates used during the handshake. These certificates were sent to the peer.
Return the list of certificates identifying the peer during the handshake.
Returns the list of certificates identifying the peer. The peer's identity certificate is followed by the validated certificate authority certificates. <p> <b>Replaced by:</b> {@link #getPeerCertificates()}
Returns the {@code Principal} identifying the peer.
Returns the {@code Principal} used to identify during the handshake.
Returns the SSL socket that produced this event.
Sets the default hostname verifier to be used by new instances.
Returns the default hostname verifier.
Sets the default SSL socket factory to be used by new instances.
Returns the default SSL socket factory for new instances.
Creates a new {@code HttpsURLConnection} with the specified {@code URL}.
Return the list of certificates identifying the peer during the handshake.
Returns the {@code Principal} used to identify the local host during the handshake.
Sets the hostname verifier for this instance.
Returns the hostname verifier used by this instance.
Sets the SSL socket factory for this instance.
Returns the SSL socket factory used by this instance.
Returns the default key manager factory algorithm name. <p> The default algorithm name is specified by the security property: {@code 'ssl.KeyManagerFactory.algorithm'}.
Creates a new {@code KeyManagerFactory} instance for the specified key management algorithm.
Creates a new {@code KeyManagerFactory} instance for the specified key management algorithm from the specified provider.
Creates a new {@code KeyManagerFactory}.
Returns the name of the key management algorithm.
Returns the provider for this {@code KeyManagerFactory} instance.
Initializes this instance with the specified key store and password.
Initializes this instance with the specified factory parameters.
Returns a list of key managers, one instance for each type of key in the key store.
Creates a new {@code KeyStoreBuilderParameters} with the specified key store builder.
Creates a new {@code KeyStoreBuilderParameters} with the specified list of {@code KeyStore.Builder}s.
Returns the unmodifiable list of {@code KeyStore.Builder}s associated with this parameters instance.
Returns the default SSLContext. The default SSL context can be set with {@link #setDefault}. If not, one will be created with {@code SSLContext.getInstance("Default")}, which will already be initialized. the default instance.
Sets the default SSLContext instance as returned by {@link #getDefault()} to a non-null initialized value.
Creates a new {@code SSLContext} instance for the specified protocol.
Creates a new {@code SSLContext} instance for the specified protocol from the specified provider.
Creates a new {@code SSLContext}.
Returns the name of the secure socket protocol of this instance.
Returns the provider of this {@code SSLContext} instance.
Initializes this {@code SSLContext} instance. All of the arguments are optional, and the security providers will be searched for the required implementations of the needed algorithms.
Returns a socket factory for this instance.
Returns a server socket factory for this instance.
Creates an {@code SSLEngine} instance from this context.
Creates an {@code SSLEngine} instance from this context with the specified hostname and port.
Returns the SSL session context that encapsulates the set of SSL sessions that can be used for handshake of server-side SSL sockets.
Returns the SSL session context that encapsulates the set of SSL sessions that can be used for handshake of client-side SSL sockets.
Returns the default SSL handshake parameters for SSLSockets
Returns SSL handshake parameters for SSLSockets that includes all supported cipher suites and protocols.
Initializes this {@code SSLContext} instance. All of the arguments are optional, and the security providers will be searched for the required implementations of the needed algorithms.
Returns a new SSLParameters instance that includes all supported cipher suites and protocols. <p>The default implementation returns an SSLParameters with values based an SSLSocket created from this instances SocketFactory.
Creates a new {@code SSLEngine} instance.
Creates a new {@code SSLEngine} instance with the specified host and port.
Returns the name of the peer host.
Returns the port number of the peer host.
Initiates a handshake on this engine. <p> Calling this method is not needed for the initial handshake: it will be called by {@code wrap} or {@code unwrap} if the initial handshake has not been started yet.
Decodes the incoming network data buffer into the application data buffers. If a handshake has not been started yet, it will automatically be started.
Encodes the outgoing application data buffers into the network data buffer. If a handshake has not been started yet, it will automatically be started.
Encodes the outgoing application data buffer into the network data buffer. If a handshake has not been started yet, it will automatically be started.
Returns a new SSLParameters based on this SSLSocket's current cipher suites, protocols, and client authentication settings.
Sets various SSL handshake parameters based on the SSLParameter argument. Specifically, sets the SSLEngine's enabled cipher suites if the parameter's cipher suites are non-null. Similarly sets the enabled protocols. If the parameters specify the want or need for client authentication, those requirements are set on the SSLEngine, otherwise both are set to false.
Creates a new {@code SSLEngineResult} instance with the specified state values.
Returns the return value of the {@code SSLEngine} operation.
Returns the status of the current handshake.
Returns the number of bytes retrieved from the source buffer(s).
Returns the number of bytes transferred to the destination buffer(s).
Creates a new {@code SSLException} with the specified reason.
Creates a new {@code SSLException} with the specified message and cause.
Creates a new {@code SSLException} with the specified cause.
Constructs a new instance with the given detail message.
Constructs a new instance with given cause.
Constructs a new instance with given detail message and cause.
Creates a new {@code SSLKeyException} with the specified message.
A SSLParameters constructor that allows the values for the initial cipher suites array to be provided. Other values default as specified in {@link #SSLParameters()}. use within the SSLParameters, or null.
A SSLParameters constructor that allows the values for initial cipher suites and protocols arrays to be provided. Other values default as specified in {@link #SSLParameters()}. use within the SSLParameters, or null. use within the SSLParameters, or null.
Returns a copy of the cipher suites, or null if none have been specified.
Sets the cipher suites to a copy of the input, or null
Returns a copy of the protocols, or null if none have been specified.
Sets the protocols to a copy of the input, or null
Returns true if a server requires authentication from a client during handshaking. If this returns true, {@link #getWantClientAuth} will return false.
Sets whether or not to a server needs client authentication. After calling this, #getWantClientAuth() will return false.
Returns true if a server optionally wants to authenticate a client during handshaking. If this returns true, {@link #getNeedClientAuth} will return false.
Sets whether or not to a server wants client authentication. After calling this, #getNeedClientAuth() will return false.
Creates a new {@code SSLPeerUnverifiedException} with the specified message.
Creates a new {@code SSLProtocolException} with the specified message.
Only to be used by subclasses. <p> Creates a TCP server socket on the specified port with the default authentication context. The connection's default backlog size is 50 connections.
Only to be used by subclasses. <p> Creates a TCP server socket on the specified port using the specified backlog and the default authentication context.
Only to be used by subclasses. <p> Creates a TCP server socket on the specified port, using the specified backlog, listening on the specified interface, and using the default authentication context.
Returns the default {@code SSLServerSocketFactory} instance. The default implementation is defined by the security property "ssl.ServerSocketFactory.provider".
Creates a new {@code SSLSessionBindingEvent} for the specified session indicating a binding event for the specified name.
Returns the name of the binding being added or removed.
Returns the session to which the binding is added or from which it is removed.
Only to be used by subclasses. <p> Creates a TCP socket connection to the specified host at the specified port.
Only to be used by subclasses. <p> Creates a TCP socket connection to the specified address at the specified port.
Only to be used by subclasses. <p> Creates a TCP socket connection to the specified host at the specified port with the client side bound to the specified address and port.
Only to be used by subclasses. <p> Creates a TCP socket connection to the specified address at the specified port with the client side bound to the specified address and port.
Unsupported for SSL because reading from an SSL socket may require writing to the network.
Unsupported for SSL because writing to an SSL socket may require reading from the network.
Starts a new SSL handshake on this connection.
Sets various SSL handshake parameters based on the SSLParameter argument. Specifically, sets the SSLSocket's enabled cipher suites if the parameter's cipher suites are non-null. Similarly sets the enabled protocols. If the parameters specify the want or need for client authentication, those requirements are set on the SSLSocket, otherwise both are set to false.
Returns the default {@code SSLSocketFactory} instance. The default is defined by the security property {@code 'ssl.SocketFactory.provider'}.
Returns the default algorithm name for the {@code TrustManagerFactory}. The default algorithm name is specified by the security property {@code 'ssl.TrustManagerFactory.algorithm'}.
Creates a new {@code TrustManagerFactory} instance for the specified trust management algorithm.
Creates a new {@code TrustManagerFactory} instance for the specified trust management algorithm from the specified provider.
Creates a new {@code TrustManagerFactory} instance.
Returns the name of this {@code TrustManagerFactory} algorithm implementation.
Returns the provider for this {@code TrustManagerFactory} instance.
Initializes this factory instance with the specified keystore as source of certificate authorities and trust material.
Initializes this factory instance with the specified provider-specific parameters for a source of trust material.
Returns the list of {@code TrustManager}s with one entry for each type of trust material.
Chooses an alias for the client side of an SSL connection to authenticate it with the specified public key type and certificate issuers.
Chooses an alias for the server side of an SSL connection to authenticate it with the specified public key type and certificate issuers.
Gets the default server socket factory of the system which can be used to create new server sockets without creating a subclass of this factory.
Creates a new server socket which is not bound to any local address. This method has to be overridden by a subclass otherwise a {@code SocketException} is thrown.
Gets the default socket factory of the system which can be used to create new sockets without creating a subclass of this factory.
Creates a new socket which is not connected to any remote host. This method has to be overridden by a subclass otherwise a {@code SocketException} is thrown.
Creates a new {@code PasswordCallback} instance.
Returns the prompt that was specified when creating this {@code PasswordCallback}
Queries whether this {@code PasswordCallback} expects user input to be echoed, which is specified during the creation of the object.
Sets the password. The {@link CallbackHandler} that performs the actual provisioning or input of the password needs to call this method to hand back the password to the security service that requested it.
Returns the password. The security service that needs the password usually calls this method once the {@link CallbackHandler} has finished its work.
Clears the password stored in this {@code PasswordCallback}.
Creates a new exception instance and initializes it with just the unsupported {@code Callback}, but no error message.
Creates a new exception instance and initializes it with both the unsupported {@code Callback} and an error message.
Returns the unsupported {@code Callback} that triggered this exception.
Creates a new exception instance and initializes it with a given message.
Creates a new X500Principal from a given ASN.1 DER encoding of a distinguished name.
Creates a new X500Principal from a string representation of a distinguished name.
Returns an ASN.1 DER-encoded representation of the distinguished name contained in this X.500 principal.
Returns a human-readable string representation of the distinguished name contained in this X.500 principal.
Returns a string representation of the distinguished name contained in this X.500 principal. The format of the representation can be chosen. Valid arguments are {@link #RFC1779}, {@link #RFC2253}, and {@link #CANONICAL}. The representations are specified in RFC 1779 and RFC 2253, respectively. The canonical form is based on RFC 2253, but adds some canonicalizing operations like removing leading and trailing whitespace, lower-casing the whole name, and bringing it into a normalized Unicode representation.
Creates an exception of type {@code DestroyFailedException}.
The default constructor initializing the sets of public and private credentials and principals with the empty set.
The constructor for the subject, setting its public and private credentials and principals according to the arguments.
Returns this {@code Subject}'s {@link Principal}.
Returns this {@code Subject}'s {@link Principal} which is a subclass of the {@code Class} provided.
Returns the private credentials associated with this {@code Subject}.
Returns this {@code Subject}'s private credentials which are a subclass of the {@code Class} provided.
Returns the public credentials associated with this {@code Subject}.
Returns this {@code Subject}'s public credentials which are a subclass of the {@code Class} provided.
Prevents from modifications being done to the credentials and {@link Principal} sets. After setting it to read-only this {@code Subject} can not be made writable again. The destroy method on the credentials still works though.
Returns whether this {@code Subject} is read-only or not.
Returns the {@code Subject} that was last associated with the {@code context} provided as argument.
creates set from specified collection with specified permission all collection elements are verified before adding
verifies new set element
return set with elements that are instances or subclasses of the specified class
checks set state, and security permission to modify set before removing current element
Compares the argument to this Certificate. If both have the same bytes they are assumed to be equal.
Returns an integer hash code for the receiver. Any two objects which return <code>true</code> when passed to <code>equals</code> must answer the same value for this method.
Creates a new {@code X509Certificate} and initializes it from the specified input stream.
Creates a new {@code X509Certificate} and initializes it from the specified byte array.
Creates a connection event initialized with the supplied {@code PooledConnection} reporting that the application has closed the connection.
Creates a {@code ConnectionEvent} initialized with the supplied {@code PooledConnection} and with the supplied {@code SQLException} indicating that an error has occurred within the {@code PooledConnection}.
Gets the {@code SQLException} which holds information about the error which occurred in the {@code PooledConnection}.
Creates a {@code RowSetEvent} object containing a reference to the {@link RowSet} object that generated the event. Information about the changes that have occurred to the {@code RowSet} can be extracted from the {@code RowSet} using one or more of the query methods available on the {@code RowSet}.
the constructor
the constructor with null exception
Returns the statement of this event
Returns the exception to be thrown
<p>Create a new <code>DatatypeConfigurationException</code> with the specified detail message.</p>
<p>Create a new <code>DatatypeConfigurationException</code> with the specified detail message and cause.</p>
<p>Create a new <code>DatatypeConfigurationException</code> with the specified cause.</p>
Print the the trace of methods from where the error originated.  This will trace all nested exception objects, as well as this object.
<p>Construct a <code>Field</code> with specified values.</p>
<p>Get id of this Field.</p>
<p>Obtain a new instance of a <code>DatatypeFactory</code>.</p> <p>The implementation resolution mechanisms are <a href="#DatatypeFactory.newInstance">defined</a> in this <code>Class</code>'s documentation.</p> available or cannot be instantiated.
Returns an instance of the named implementation of {@code DatatypeFactory}.
<p>Obtain a new instance of a <code>Duration</code> specifying the <code>Duration</code> as isPositive, years, months, days, hours, minutes, seconds.</p> <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p> of the duration is zero, this parameter will be ignored. boolean isPositive, BigInteger years, BigInteger months, BigInteger days, BigInteger hours, BigInteger minutes, BigDecimal seconds)
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> by parsing its <code>String</code> representation, XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.</p> <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code> whose lexical representation contains only day, hour, minute, and second components. <p>All four values are set and available from the created {@link Duration}</p> <p>The XML Schema specification states that values can be of an arbitrary size. Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values. An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits if implementation capacities are exceeded.</p>
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified milliseconds as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.</p> <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code> whose lexical representation contains only day, hour, minute, and second components. <p>All four values are set by computing their values from the specified milliseconds and are available using the <code>get</code> methods of  the created {@link Duration}. The values conform to and are defined by:</p> <ul> <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li> </li> <li>{@link XMLGregorianCalendar}  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation</li> </ul> <p>The default start instance is defined by {@link GregorianCalendar}'s use of the start of the epoch: i.e., {@link java.util.Calendar#YEAR} = 1970, {@link java.util.Calendar#MONTH} = {@link java.util.Calendar#JANUARY}, {@link java.util.Calendar#DATE} = 1, etc. This is important as there are variations in the Gregorian Calendar, e.g. leap years have different days in the month = {@link java.util.Calendar#FEBRUARY} so the result of {@link Duration#getDays()} can be influenced.</p> <p>Any remaining milliseconds after determining the day, hour, minute and second are discarded.</p> XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.</p> <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code> whose lexical representation contains only day, hour, minute, and second components. <p>The XML Schema specification states that values can be of an arbitrary size. Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values. An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits if implementation capacities are exceeded.</p> <p>A <code>null</code> value indicates that field is not set.</p> of the duration is zero, this parameter will be ignored. and <code>second</code>.
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.</p> <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code> whose lexical representation contains only day, hour, minute, and second components. <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p> of the duration is zero, this parameter will be ignored. and <code>second</code>.
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> by parsing its <code>String</code> representation, XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.</p> <p>The datatype <code>xdt:yearMonthDuration</code> is a subtype of <code>xs:duration</code> whose lexical representation contains only year and month components. This datatype resides in the namespace {@link javax.xml.XMLConstants#W3C_XPATH_DATATYPE_NS_URI}.</p> <p>Both values are set and available from the created {@link Duration}</p> <p>The XML Schema specification states that values can be of an arbitrary size. Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values. An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits if implementation capacities are exceeded.</p>
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified milliseconds as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.</p> <p>The datatype <code>xdt:yearMonthDuration</code> is a subtype of <code>xs:duration</code> whose lexical representation contains only year and month components. This datatype resides in the namespace {@link javax.xml.XMLConstants#W3C_XPATH_DATATYPE_NS_URI}.</p> <p>Both values are set by computing their values from the specified milliseconds and are available using the <code>get</code> methods of  the created {@link Duration}. The values conform to and are defined by:</p> <ul> <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li> </li> <li>{@link XMLGregorianCalendar}  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation</li> </ul> <p>The default start instance is defined by {@link GregorianCalendar}'s use of the start of the epoch: i.e., {@link java.util.Calendar#YEAR} = 1970, {@link java.util.Calendar#MONTH} = {@link java.util.Calendar#JANUARY}, {@link java.util.Calendar#DATE} = 1, etc. This is important as there are variations in the Gregorian Calendar, e.g. leap years have different days in the month = {@link java.util.Calendar#FEBRUARY} so the result of {@link Duration#getMonths()} can be influenced.</p> <p>Any remaining milliseconds after determining the year and month are discarded.</p>
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified <code>year</code> and <code>month</code> as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.</p> <p>The XML Schema specification states that values can be of an arbitrary size. Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values. An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits if implementation capacities are exceeded.</p> <p>A <code>null</code> value indicates that field is not set.</p> of the duration is zero, this parameter will be ignored.
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified <code>year</code> and <code>month</code> as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.</p> <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p> of the duration is zero, this parameter will be ignored.
<p>Constructor of value spaces that a <code>java.util.GregorianCalendar</code> instance would need to convert to an <code>XMLGregorianCalendar</code> instance.</p> <p><code>XMLGregorianCalendar eon</code> and <code>fractionalSecond</code> are set to <code>null</code></p> <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p> as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar} or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance as determined by {@link XMLGregorianCalendar#isValid()}.
<p>Create a Java representation of XML Schema builtin datatype <code>date</code> or <code>g*</code>.</p> <p>For example, an instance of <code>gYear</code> can be created invoking this factory with <code>month</code> and <code>day</code> parameters set to {@link DatatypeConstants#FIELD_UNDEFINED}.</p> <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p> as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar} or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance as determined by {@link XMLGregorianCalendar#isValid()}.
<p>Create a Java instance of XML Schema builtin datatype <code>time</code>.</p> <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p> as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar} or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance as determined by {@link XMLGregorianCalendar#isValid()}.
<p>Create a Java instance of XML Schema builtin datatype time.</p> <p>A <code>null</code> value indicates that field is not set.</p> <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p> as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar} or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance as determined by {@link XMLGregorianCalendar#isValid()}.
<p>Create a Java instance of XML Schema builtin datatype time.</p> <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p> as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar} or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance as determined by {@link XMLGregorianCalendar#isValid()}.
<p>Return the name of the XML Schema date/time type that this instance maps to. Type is computed based on fields that are set, i.e. {@link #isSet(DatatypeConstants.Field field)} == <code>true</code>.</p> <table border="2" rules="all" cellpadding="2"> <thead> </thead> <tbody> </tbody> </table> {@link DatatypeConstants#DURATION}, {@link DatatypeConstants#DURATION_DAYTIME} or {@link DatatypeConstants#DURATION_YEARMONTH}.
<p>Get the years value of this <code>Duration</code> as an <code>int</code> or <code>0</code> if not present.</p> <p><code>getYears()</code> is a convenience method for {@link #getField(DatatypeConstants.Field field) getField(DatatypeConstants.YEARS)}.</p> <p>As the return value is an <code>int</code>, an incorrect value will be returned for <code>Duration</code>s with years that go beyond the range of an <code>int</code>. Use {@link #getField(DatatypeConstants.Field field) getField(DatatypeConstants.YEARS)} to avoid possible loss of precision.</p>
Obtains the value of the MONTHS field as an integer value, or 0 if not present. This method works just like {@link #getYears()} except that this method works on the MONTHS field.
Obtains the value of the DAYS field as an integer value, or 0 if not present. This method works just like {@link #getYears()} except that this method works on the DAYS field.
Obtains the value of the HOURS field as an integer value, or 0 if not present. This method works just like {@link #getYears()} except that this method works on the HOURS field.
Obtains the value of the MINUTES field as an integer value, or 0 if not present. This method works just like {@link #getYears()} except that this method works on the MINUTES field.
Obtains the value of the SECONDS field as an integer value, or 0 if not present. This method works just like {@link #getYears()} except that this method works on the SECONDS field. will be discarded (for example, if the actual value is 2.5, this method returns 2)
<p>Returns the length of the duration in milliseconds.</p> <p>If the seconds field carries more digits than millisecond order, those will be simply discarded (or in other words, rounded to zero.) For example, for any Calendar value <code>x</code>,</p> <pre> <code>new Duration("PT10.00099S").getTimeInMills(x) == 10000</code>. <code>new Duration("-PT10.00099S").getTimeInMills(x) == -10000</code>. </pre> <p> Note that this method uses the {@link #addTo(Calendar)} method, which may work incorrectly with <code>Duration</code> objects with very large values in its fields. See the {@link #addTo(Calendar)} method for details. <code>startInstant</code> plus this <code>Duration</code> is null.
<p>Returns the length of the duration in milliseconds.</p> <p>If the seconds field carries more digits than millisecond order, those will be simply discarded (or in other words, rounded to zero.) For example, for any <code>Date</code> value <code>x</code>,</p> <pre> <code>new Duration("PT10.00099S").getTimeInMills(x) == 10000</code>. <code>new Duration("-PT10.00099S").getTimeInMills(x) == -10000</code>. </pre> <p> Note that this method uses the {@link #addTo(Date)} method, which may work incorrectly with <code>Duration</code> objects with very large values in its fields. See the {@link #addTo(Date)} method for details. <code>startInstant</code> plus this <code>Duration</code>
Gets the value of a field as an <code>int</code>.
Adds this duration to a {@link Date} object. <p> The given date is first converted into a {@link java.util.GregorianCalendar}, then the duration is added exactly like the {@link #addTo(Calendar)} method. <p> The updated time instant is then converted back into a {@link Date} object and used to update the given {@link Date} object. <p> This somewhat redundant computation is necessary to unambiguously determine the duration of months and years.
<p>Computes a new duration whose value is <code>this-rhs</code>.</p> <p>For example:</p> <pre> "1 day" - "-3 days" = "4 days" "1 year" - "1 day" = IllegalStateException "-(1 hour,50 minutes)" - "-20 minutes" = "-(1hours,30 minutes)" "15 hours" - "-3 days" = "3 days and 15 hours" "1 year" - "-1 day" = "1 year and 1 day" </pre> <p>Since there's no way to meaningfully subtract 1 day from 1 month, there are cases where the operation fails in {@link IllegalStateException}.</p> <p>Formally the computation is defined as follows. First, we can assume that two <code>Duration</code>s are both positive without losing generality.  (i.e., <code>(-X)-Y=-(X+Y)</code>, <code>X-(-Y)=X+Y</code>, <code>(-X)-(-Y)=-(X-Y)</code>)</p> <p>Then two durations are subtracted field by field. If the sign of any non-zero field <tt>F</tt> is different from the sign of the most significant field, 1 (if <tt>F</tt> is negative) or -1 (otherwise) will be borrowed from the next bigger unit of <tt>F</tt>.</p> <p>This process is repeated until all the non-zero fields have the same sign.</p> <p>If a borrow occurs in the days field (in other words, if the computation needs to borrow 1 or -1 month to compensate days), then the computation fails by throwing an {@link IllegalStateException}.</p>
<p>Computes a new duration whose value is <code>factor</code> times longer than the value of this duration.</p> <p>This method is provided for the convenience. It is functionally equivalent to the following code:</p> <pre> multiply(new BigDecimal(String.valueOf(factor))) </pre>
<p>Checks if this duration object is strictly longer than another <code>Duration</code> object.</p> <p>Duration X is "longer" than Y if and only if X>Y as defined in the section 3.2.6.2 of the XML Schema 1.0 specification.</p> <p>For example, "P1D" (one day) > "PT12H" (12 hours) and "P2Y" (two years) > "P23M" (23 months).</p> cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability.
<p>Checks if this duration object is strictly shorter than another <code>Duration</code> object.</p> else <code>false</code>. cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability.
<p>Checks if this duration object has the same duration as another <code>Duration</code> object.</p> <p>For example, "P1D" (1 day) is equal to "PT24H" (24 hours).</p> <p>Duration X is equal to Y if and only if time instant t+X and t+Y are the same for all the test time instants specified in the section 3.2.6.2 of the XML Schema 1.0 specification.</p> <p>Note that there are cases where two <code>Duration</code>s are "incomparable" to each other, like one month and 30 days. For example,</p> <pre> !new Duration("P1M").isShorterThan(new Duration("P30D")) !new Duration("P1M").isLongerThan(new Duration("P30D")) !new Duration("P1M").equals(new Duration("P30D")) </pre> cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability.
<p>Returns a <code>String</code> representation of this <code>Duration</code> <code>Object</code>.</p> <p>The result is formatted according to the XML Schema 1.0 specification and can be always parsed back later into the equivalent <code>Duration</code> <code>Object</code> by {@link DatatypeFactory#newDuration(String  lexicalRepresentation)}.</p> <p>Formally, the following holds for any <code>Duration</code> <code>Object</code> x:</p> <pre> new Duration(x.toString()).equals(x) </pre>
<p>Turns {@link BigDecimal} to a string representation.</p> <p>Due to a behavior change in the {@link BigDecimal#toString()} method in JDK1.5, this had to be implemented here.</p>
<p>Calls the {@link Calendar#getTimeInMillis} method. Prior to JDK1.4, this method was protected and therefore cannot be invoked directly.</p> <p>TODO: In future, this should be replaced by <code>cal.getTimeInMillis()</code>.</p>
<p>Output debugging messages.</p>
<p>Find the appropriate <code>ClassLoader</code> to use.</p> <p>The context ClassLoader is preferred.</p>
<p>Create an instance of a class using the specified ClassLoader.</p>
Finds the implementation Class object in the specified order.  Main entry point. Package private so this code can be shared.
Try to find provider using Jar Service Provider Mechanism
<p>Construct a new instance with the specified detail string and exception.</p>
<p>Get the Exception that caused the error.</p>
Returns the location where the given Class is loaded from.
<p>Set time as one unit.</p> <a href="#datetimefield-hour">hour field of date/time field mapping table</a>. <a href="#datetimefield-minute">minute field of date/time field mapping table</a>. <a href="#datetimefield-second">second field of date/time field mapping table</a>. outside value constraints for the field as specified in <a href="#datetimefieldmapping">date/time field mapping table</a>.
<p>Set time as one unit, including the optional infinite precision fractional seconds.</p> <a href="#datetimefield-hour">hour field of date/time field mapping table</a>. <a href="#datetimefield-minute">minute field of date/time field mapping table</a>. <a href="#datetimefield-second">second field of date/time field mapping table</a>. field is not set. outside value constraints for the field as specified in <a href="#datetimefieldmapping">date/time field mapping table</a>.
<p>Set time as one unit, including optional milliseconds.</p> <a href="#datetimefield-hour">hour field of date/time field mapping table</a>. <a href="#datetimefield-minute">minute field of date/time field mapping table</a>. <a href="#datetimefield-second">second field of date/time field mapping table</a>. outside value constraints for the field as specified in <a href="#datetimefieldmapping">date/time field mapping table</a>.
<p>Return millisecond precision of {@link #getFractionalSecond()}.</p> <p>This method represents a convenience accessor to infinite precision fractional second value returned by {@link #getFractionalSecond()}. The returned value is the rounded down to milliseconds value of {@link #getFractionalSecond()}. When {@link #getFractionalSecond()} returns <code>null</code>, this method must return {@link DatatypeConstants#FIELD_UNDEFINED}.</p> <p>Value constraints for this value are summarized in <a href="#datetimefield-second">second field of date/time field mapping table</a>.</p>
<p>Indicates whether parameter <code>obj</code> is "equal to" this one.</p> and  {@link #compare(XMLGregorianCalendar obj)} returns {@link DatatypeConstants#EQUAL}, otherwise <code>false</code>.
<p>Returns a hash code consistent with the definition of the equals method.</p>
<p>Returns a <code>String</code> representation of this <code>XMLGregorianCalendar</code> <code>Object</code>.</p> <p>The result is a lexical representation generated by {@link #toXMLFormat()}.</p>
<p><code>QName</code> constructor specifying the Namespace URI and local part.</p> <p>If the Namespace URI is <code>null</code>, it is set to {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}.  This value represents no explicitly defined Namespace as defined by the <a in XML</a> specification.  This action preserves compatible behavior with QName 1.0.  Explicitly providing the {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI} value is the preferred coding style.</p> <p>If the local part is <code>null</code> an <code>IllegalArgumentException</code> is thrown. A local part of "" is allowed to preserve compatible behavior with QName 1.0. </p> <p>When using this constructor, the prefix is set to {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX}.</p> <p>The Namespace URI is not validated as a The local part is not validated as a in XML</a>.</p> prefix) QName(String namespaceURI, String localPart, String prefix)
<p><code>QName</code> constructor specifying the Namespace URI, local part and prefix.</p> <p>If the Namespace URI is <code>null</code>, it is set to {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}.  This value represents no explicitly defined Namespace as defined by the <a in XML</a> specification.  This action preserves compatible behavior with QName 1.0.  Explicitly providing the {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI} value is the preferred coding style.</p> <p>If the local part is <code>null</code> an <code>IllegalArgumentException</code> is thrown. A local part of "" is allowed to preserve compatible behavior with QName 1.0. </p> <p>If the prefix is <code>null</code>, an <code>IllegalArgumentException</code> is thrown.  Use {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX} to explicitly indicate that no prefix is present or the prefix is not relevant.</p> <p>The Namespace URI is not validated as a The local part and prefix are not validated as a in XML</a>.</p>
<p><code>QName</code> constructor specifying the local part.</p> <p>If the local part is <code>null</code> an <code>IllegalArgumentException</code> is thrown. A local part of "" is allowed to preserve compatible behavior with QName 1.0. </p> <p>When using this constructor, the Namespace URI is set to {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI} and the prefix is set to {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX}.</p> <p><em>In an XML context, all Element and Attribute names exist in the context of a Namespace.  Making this explicit during the construction of a <code>QName</code> helps prevent hard to diagnosis XML validity errors.  The constructors {@link #QName(String namespaceURI, String localPart) QName(String namespaceURI, String localPart)} and {@link #QName(String namespaceURI, String localPart, String prefix)} are preferred.</em></p> <p>The local part is not validated as a in XML</a>.</p> namespaceURI, String localPart) prefix) QName(String namespaceURI, String localPart, String prefix)
<p>Get the Namespace URI of this <code>QName</code>.</p>
<p>Get the local part of this <code>QName</code>.</p>
<p>Get the prefix of this <code>QName</code>.</p> <p>The prefix assigned to a <code>QName</code> might <strong><em>NOT</em></strong> be valid in a different context. For example, a <code>QName</code> may be assigned a prefix in the context of parsing a document but that prefix may be invalid in the context of a different document.</p>
<p>Test this <code>QName</code> for equality with another <code>Object</code>.</p> <p>If the <code>Object</code> to be tested is not a <code>QName</code> or is <code>null</code>, then this method returns <code>false</code>.</p> <p>Two <code>QName</code>s are considered equal if and only if both the Namespace URI and local part are equal. This method uses <code>String.equals()</code> to check equality of the Namespace URI and local part. The prefix is <strong><em>NOT</em></strong> used to determine equality.</p> <p>This method satisfies the general contract of {@link java.lang.Object#equals(Object) Object.equals(Object)}</p> equality with this <code>QName</code> equal to this <code>QName</code> else <code>false</code>
<p>Generate the hash code for this <code>QName</code>.</p> <p>The hash code is calculated using both the Namespace URI and the local part of the <code>QName</code>.  The prefix is <strong><em>NOT</em></strong> used to calculate the hash code.</p> <p>This method satisfies the general contract of {@link java.lang.Object#hashCode() Object.hashCode()}.</p>
<p><code>String</code> representation of this <code>QName</code>.</p> <p>The commonly accepted way of representing a <code>QName</code> by James Clark.  Although this is not a <em>standard</em> specification, it is in common use,  e.g. {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}. This implementation represents a <code>QName</code> as: "{" + Namespace URI + "}" + local part.  If the Namespace URI <code>.equals(XMLConstants.NULL_NS_URI)</code>, only the local part is returned.  An appropriate use of this method is for debugging or logging for human consumption.</p> <p>Note the prefix value is <strong><em>NOT</em></strong> returned as part of the <code>String</code> representation.</p> <p>This method satisfies the general contract of {@link java.lang.Object#toString() Object.toString()}.</p>
<p><code>QName</code> derived from parsing the formatted <code>String</code>.</p> <p>If the <code>String</code> is <code>null</code> or does not conform to {@link #toString() QName.toString()} formatting, an <code>IllegalArgumentException</code> is thrown.</p> <p><em>The <code>String</code> <strong>MUST</strong> be in the form returned by {@link #toString() QName.toString()}.</em></p> <p>The commonly accepted way of representing a <code>QName</code> by James Clark.  Although this is not a <em>standard</em> specification, it is in common use,  e.g. {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}. This implementation parses a <code>String</code> formatted as: "{" + Namespace URI + "}" + local part.  If the Namespace URI <code>.equals(XMLConstants.NULL_NS_URI)</code>, only the local part should be provided.</p> <p>The prefix value <strong><em>CANNOT</em></strong> be represented in the <code>String</code> and will be set to {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX}.</p> <p>This method does not do full validation of the resulting <code>QName</code>. <p>The Namespace URI is not validated as a The local part is not validated as a as specified in of the <code>QName</code>
For old versions of QName which didn't have a prefix field, <code>ObjectInputStream.defaultReadObject()</code> will initialize the prefix to <code>null</code> instead of the empty string. This method fixes up the prefix field if it didn't exist in the serialized object.
<p>Reset this <code>DocumentBuilder</code> to its original configuration.</p> <p><code>DocumentBuilder</code> is reset to the same state as when it was created with {@link DocumentBuilderFactory#newDocumentBuilder()}. <code>reset()</code> is designed to allow the reuse of existing <code>DocumentBuilder</code>s thus saving resources associated with the creation of new <code>DocumentBuilder</code>s.</p> <p>The reset <code>DocumentBuilder</code> is not guaranteed to have the same {@link EntityResolver} or {@link ErrorHandler} <code>Object</code>s, e.g. {@link Object#equals(Object obj)}.  It is guaranteed to have a functionally equal <code>EntityResolver</code> and <code>ErrorHandler</code>.</p>
Parse the content of the given <code>InputStream</code> as an XML document and return a new DOM {@link Document} object. An <code>IllegalArgumentException</code> is thrown if the <code>InputStream</code> is null. <code>InputStream</code>
Parse the content of the given <code>InputStream</code> as an XML document and return a new DOM {@link Document} object. An <code>IllegalArgumentException</code> is thrown if the <code>InputStream</code> is null.
Parse the content of the given URI as an XML document and return a new DOM {@link Document} object. An <code>IllegalArgumentException</code> is thrown if the URI is <code>null</code> null.
Parse the content of the given file as an XML document and return a new DOM {@link Document} object. An <code>IllegalArgumentException</code> is thrown if the <code>File</code> is <code>null</code> null.
Parse the content of the given input source as an XML document and return a new DOM {@link Document} object. An <code>IllegalArgumentException</code> is thrown if the <code>InputSource</code> is <code>null</code> null.
<p>Get the XInclude processing mode for this parser.</p>
Returns Android's implementation of {@code DocumentBuilderFactory}. Unlike other Java implementations, this method does not consult system properties, property files, or the services API.
Returns an instance of the named implementation of {@code DocumentBuilderFactory}.
Creates a new instance of a {@link javax.xml.parsers.DocumentBuilder} using the currently configured parameters. cannot be created which satisfies the configuration requested.
Specifies that the parser produced by this code will validate documents as they are parsed. By default the value of this is set to <code>false</code>. <p> Note that "the validation" here means parser</a> as defined in the XML recommendation. In other words, it essentially just controls the DTD validation. (except the legacy two properties defined in JAXP 1.2. See <a href="#validationCompatibility">here</a> for more details.) </p> <p> To use modern schema languages such as W3C XML Schema or RELAX NG instead of DTD, you can configure your parser to be a non-validating parser by leaving the {@link #setValidating(boolean)} method <tt>false</tt>, then use the {@link #setSchema(Schema)} method to associate a schema to a parser. </p>
whitespace in element content (sometimes known loosely as 'ignorable whitespace') when parsing XML documents (see XML Rec 2.10). Note that only whitespace which is directly contained within element content that has an element only content model (see XML Rec 3.2.1) will be eliminated. Due to reliance on the content model this setting requires the parser to be in validating mode. By default the value of this is set to <code>false</code>.
Specifies that the parser produced by this code will expand entity reference nodes. By default the value of this is set to <code>true</code>
<p>Specifies that the parser produced by this code will ignore comments. By default the value of this is set to <code>false </code>.</p>
Specifies that the parser produced by this code will convert CDATA nodes to Text nodes and append it to the adjacent (if any) text node. By default the value of this is set to <code>false</code>
Indicates whether or not the factory is configured to produce parsers which are namespace aware.
Indicates whether or not the factory is configured to produce parsers which validate the XML content during parse.
Indicates whether or not the factory is configured to produce parsers which ignore ignorable whitespace in element content.
Indicates whether or not the factory is configured to produce parsers which expand entity reference nodes.
Indicates whether or not the factory is configured to produce parsers which ignores comments.
Indicates whether or not the factory is configured to produce parsers which converts CDATA nodes to Text nodes and appends it to the adjacent (if any) Text node.
Allows the user to set specific attributes on the underlying implementation. implementation doesn't recognize the attribute.
<p>Set the {@link Schema} to be used by parsers created from this factory. <p> When a {@link Schema} is non-null, a parser will use a validator created from it to validate documents before it passes information down to the application. <p>When errors are found by the validator, the parser is responsible to report them to the user-specified {@link org.xml.sax.ErrorHandler} (or if the error handler is not set, ignore them or throw them), just like any other errors found by the parser itself. In other words, if the user-specified {@link org.xml.sax.ErrorHandler} is set, it must receive those errors, and if not, they must be treated according to the implementation specific default error handling rules. <p> A validator may modify the outcome of a parse (for example by adding default values that were missing in documents), and a parser is responsible to make sure that the application will receive modified DOM trees. <p> Initially, null is set as the {@link Schema}. <p> This processing will take effect even if the {@link #isValidating()} method returns <tt>false</tt>. <p>It is an error to use property in conjunction with a {@link Schema} object. Such configuration will cause a {@link ParserConfigurationException} exception when the {@link #newDocumentBuilder()} is invoked.</p> <h4>Note for implementors</h4> <p> A parser must be able to work with any {@link Schema} implementation. However, parsers and schemas are allowed to use implementation-specific custom mechanisms as long as they yield the result described in the specification.
<p>Set state of XInclude processing.</p> <p>If XInclude markup is found in the document instance, should it be XML Inclusions (XInclude) Version 1.0</a>.</p> <p>XInclude processing defaults to <code>false</code>.</p> <code>false</code>
<p>Get state of XInclude processing.</p>
Create a new <code>FactoryConfigurationError</code> with no detail message.
Create a new <code>FactoryConfigurationError</code> with the <code>String </code> specified as an error message.
Create a new <code>FactoryConfigurationError</code> with a given <code>Exception</code> base cause of the error. FactoryConfigurationError.
Create a new <code>FactoryConfigurationError</code> with the given <code>Exception</code> base cause and detail message. FactoryConfigurationError
Return the message (if any) for this error . If there is no message for the exception and there is an encapsulated exception then the message of that exception, if it exists will be returned. Else the name of the encapsulated exception will be returned.
Return the actual exception (if any) that caused this exception to be raised.
To escape a file path to a URI, by using %HH to represent special ASCII characters: 0x00~0x1F, 0x7F, ' ', '<', '>', '#', '%' and '"' and non-ASCII characters (whose value >= 128).
Create a new <code>ParserConfigurationException</code> with the <code>String</code> specified as an error message.
<p>Protected constructor to prevent instantiation. Use {@link javax.xml.parsers.SAXParserFactory#newSAXParser()}.</p>
<p>Reset this <code>SAXParser</code> to its original configuration.</p> <p><code>SAXParser</code> is reset to the same state as when it was created with {@link SAXParserFactory#newSAXParser()}. <code>reset()</code> is designed to allow the reuse of existing <code>SAXParser</code>s thus saving resources associated with the creation of new <code>SAXParser</code>s.</p> <p>The reset <code>SAXParser</code> is not guaranteed to have the same {@link Schema} <code>Object</code>, e.g. {@link Object#equals(Object obj)}.  It is guaranteed to have a functionally equal <code>Schema</code>.</p>
<p>Parse the content of the given {@link java.io.InputStream} instance as XML using the specified {@link org.xml.sax.HandlerBase}. <i> Use of the DefaultHandler version of this method is recommended as the HandlerBase class has been deprecated in SAX 2.0</i>.</p> <code>InputStream</code>.
<p>Parse the content of the given {@link java.io.InputStream} instance as XML using the specified {@link org.xml.sax.HandlerBase}. <i> Use of the DefaultHandler version of this method is recommended as the HandlerBase class has been deprecated in SAX 2.0</i>.</p> <code>null</code>. <code>InputStream</code>.
Parse the content of the given {@link java.io.InputStream} instance as XML using the specified {@link org.xml.sax.helpers.DefaultHandler}.
Parse the content described by the giving Uniform Resource Identifier (URI) as XML using the specified {@link org.xml.sax.HandlerBase}. <i> Use of the DefaultHandler version of this method is recommended as the <code>HandlerBase</code> class has been deprecated in SAX 2.0</i>
Parse the content described by the giving Uniform Resource Identifier (URI) as XML using the specified {@link org.xml.sax.helpers.DefaultHandler}.
Parse the content of the file specified as XML using the specified {@link org.xml.sax.HandlerBase}. <i> Use of the DefaultHandler version of this method is recommended as the HandlerBase class has been deprecated in SAX 2.0</i>
Parse the content of the file specified as XML using the specified {@link org.xml.sax.helpers.DefaultHandler}.
Parse the content given {@link org.xml.sax.InputSource} as XML using the specified {@link org.xml.sax.HandlerBase}. <i> Use of the DefaultHandler version of this method is recommended as the HandlerBase class has been deprecated in SAX 2.0</i> is <code>null</code>.
Parse the content given {@link org.xml.sax.InputSource} as XML using the specified {@link org.xml.sax.helpers.DefaultHandler}. is <code>null</code>.
Returns the SAX parser that is encapsulated by the implementation of this class.
<p>Protected constructor to force use of {@link #newInstance()}.</p>
Returns Android's implementation of {@code SAXParserFactory}. Unlike other Java implementations, this method does not consult system properties, property files, or the services API.
Returns an instance of the named implementation of {@code SAXParserFactory}.
<p>Creates a new instance of a SAXParser using the currently configured factory parameters.</p> be created which satisfies the requested configuration.
Specifies that the parser produced by this code will validate documents as they are parsed. By default the value of this is set to <code>false</code>. <p> Note that "the validation" here means parser</a> as defined in the XML recommendation. In other words, it essentially just controls the DTD validation. (except the legacy two properties defined in JAXP 1.2. See <a href="#validationCompatibility">here</a> for more details.) </p> <p> To use modern schema languages such as W3C XML Schema or RELAX NG instead of DTD, you can configure your parser to be a non-validating parser by leaving the {@link #setValidating(boolean)} method <tt>false</tt>, then use the {@link #setSchema(Schema)} method to associate a schema to a parser. </p>
<p>Sets the particular feature in the underlying implementation of org.xml.sax.XMLReader. A list of the core features and properties can be found at <p>All implementations are required to support the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature. When the feature is</p> <ul> <li> </li> <li> </li> </ul>
<p>Set the {@link Schema} to be used by parsers created from this factory.</p> <p>When a {@link Schema} is non-null, a parser will use a validator created from it to validate documents before it passes information down to the application.</p> <p>When warnings/errors/fatal errors are found by the validator, the parser must handle them as if those errors were found by the parser itself. In other words, if the user-specified {@link org.xml.sax.ErrorHandler} is set, it must receive those errors, and if not, they must be treated according to the implementation specific default error handling rules. <p>A validator may modify the SAX event stream (for example by adding default values that were missing in documents), and a parser is responsible to make sure that the application will receive those modified event stream.</p> <p>Initially, <code>null</code> is set as the {@link Schema}.</p> <p>This processing will take effect even if the {@link #isValidating()} method returns <code>false</code>. <p>It is an error to use property in conjunction with a non-null {@link Schema} object. Such configuration will cause a {@link SAXException} exception when those properties are set on a {@link SAXParser}.</p> <h4>Note for implementors</h4> <p> A parser must be able to work with any {@link Schema} implementation. However, parsers and schemas are allowed to use implementation-specific custom mechanisms as long as they yield the result described in the specification. </p>
<p>Zero-argument default constructor.</p> <p><code>node</code>, <code>siblingNode</code> and <code>systemId</code> will be set to <code>null</code>.</p>
<p>Use a DOM node to create a new output target.</p> <p>In practice, the node should be a {@link org.w3c.dom.Document} node, a {@link org.w3c.dom.DocumentFragment} node, or a {@link org.w3c.dom.Element} node. In other words, a node that accepts children.</p> <p><code>siblingNode</code> and <code>systemId</code> will be set to <code>null</code>.</p>
<p>Use a DOM node to create a new output target with the specified System ID.<p> <p>In practice, the node should be a {@link org.w3c.dom.Document} node, a {@link org.w3c.dom.DocumentFragment} node, or a {@link org.w3c.dom.Element} node. In other words, a node that accepts children.</p> <p><code>siblingNode</code> will be set to <code>null</code>.</p>
<p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before.</p> <p>In practice, <code>node</code> and <code>nextSibling</code> should be a {@link org.w3c.dom.Document} node, a {@link org.w3c.dom.DocumentFragment} node, or a {@link org.w3c.dom.Element} node. In other words, a node that accepts children.</p> <p>Use <code>nextSibling</code> to specify the child node where the result nodes should be inserted before. If <code>nextSibling</code> is not a sibling of <code>node</code>, then an <code>IllegalArgumentException</code> is thrown. If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>, then an <code>IllegalArgumentException</code> is thrown. If <code>nextSibling</code> is <code>null</code>, then the behavior is the same as calling {@link #DOMResult(Node node)}, i.e. append the result nodes as the last child of the specified <code>node</code>.</p> <p><code>systemId</code> will be set to <code>null</code>.</p>
<p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before and the specified System ID.</p> <p>In practice, <code>node</code> and <code>nextSibling</code> should be a {@link org.w3c.dom.Document} node, a {@link org.w3c.dom.DocumentFragment} node, or a {@link org.w3c.dom.Element} node. In other words, a node that accepts children.</p> <p>Use <code>nextSibling</code> to specify the child node where the result nodes should be inserted before. If <code>nextSibling</code> is not a sibling of <code>node</code>, then an <code>IllegalArgumentException</code> is thrown. If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>, then an <code>IllegalArgumentException</code> is thrown. If <code>nextSibling</code> is <code>null</code>, then the behavior is the same as calling {@link #DOMResult(Node node, String systemId)}, i.e. append the result nodes as the last child of the specified node and use the specified System ID.</p>
<p>Set the node that will contain the result DOM tree.<p> <p>In practice, the node should be a {@link org.w3c.dom.Document} node, a {@link org.w3c.dom.DocumentFragment} node, or a {@link org.w3c.dom.Element} node. In other words, a node that accepts children.</p> <p>An <code>IllegalStateException</code> is thrown if <code>nextSibling</code> is not <code>null</code> and <code>node</code> is not a parent of <code>nextSibling</code>. An <code>IllegalStateException</code> is thrown if <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>.</p> <code>nextSibling</code> is not a child of <code>node</code>. <code>nextSibling</code> is not <code>null</code>.
<p>Get the node that will contain the result DOM tree.</p> <p>If no node was set via {@link #DOMResult(Node node)}, {@link #DOMResult(Node node, String systeId)}, {@link #DOMResult(Node node, Node nextSibling)}, {@link #DOMResult(Node node, Node nextSibling, String systemId)} or {@link #setNode(Node node)}, then the node will be set by the transformation, and may be obtained from this method once the transformation is complete. Calling this method before the transformation will return <code>null</code>.</p>
<p>Set the child node before which the result nodes will be inserted.</p> <p>Use <code>nextSibling</code> to specify the child node before which the result nodes should be inserted. If <code>nextSibling</code> is not a descendant of <code>node</code>, then an <code>IllegalArgumentException</code> is thrown. If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>, then an <code>IllegalStateException</code> is thrown. If <code>nextSibling</code> is <code>null</code>, then the behavior is the same as calling {@link #DOMResult(Node node)}, i.e. append the result nodes as the last child of the specified <code>node</code>.</p>
<p>Get the child node before which the result nodes will be inserted.</p> <p>If no node was set via {@link #DOMResult(Node node, Node nextSibling)}, {@link #DOMResult(Node node, Node nextSibling, String systemId)} or {@link #setNextSibling(Node nextSibling)}, then <code>null</code> will be returned.</p>
<p>Set the systemId that may be used in association with the node.</p>
<p>Get the System Identifier.</p> <p>If no System ID was set via {@link #DOMResult(Node node, String systemId)}, {@link #DOMResult(Node node, Node nextSibling, String systemId)} or {@link #setSystemId(String systemId)}, then <code>null</code> will be returned.</p>
Create a new input source with a DOM node.  The operation will be applied to the subtree rooted at this node.  In XSLT, a "/" pattern still means the root of the tree (not the subtree), and the evaluation of global variables and parameters is done from the root node also.
Create a new input source with a DOM node, and with the system ID also passed in as the base URI.
Set the node that will represents a Source DOM tree.
Get the node that represents a Source DOM tree.
Set the base ID (URL or system ID) from where URLs will be resolved.
Get the base ID (URL or system ID) from where URLs will be resolved.
Create a SAXResult that targets a SAX2 {@link org.xml.sax.ContentHandler}.
Set the target to be a SAX2 {@link org.xml.sax.ContentHandler}.
Get the {@link org.xml.sax.ContentHandler} that is the Result.
Set the SAX2 {@link org.xml.sax.ext.LexicalHandler} for the output. <p>This is needed to handle XML comments and the like.  If the lexical handler is not set, an attempt should be made by the transformer to cast the {@link org.xml.sax.ContentHandler} to a <code>LexicalHandler</code>.</p> handling lexical parse events.
Get a SAX2 {@link org.xml.sax.ext.LexicalHandler} for the output.
Method setSystemId Set the systemID that may be used in association with the {@link org.xml.sax.ContentHandler}.
Get the system identifier that was set with setSystemId. if setSystemId was not called.
Create a <code>SAXSource</code>, using an {@link org.xml.sax.XMLReader} and a SAX InputSource. The {@link javax.xml.transform.Transformer} or {@link javax.xml.transform.sax.SAXTransformerFactory} will set itself to be the reader's {@link org.xml.sax.ContentHandler}, and then will call reader.parse(inputSource). and that will be passed to the reader parse method.
Create a <code>SAXSource</code>, using a SAX <code>InputSource</code>. The {@link javax.xml.transform.Transformer} or {@link javax.xml.transform.sax.SAXTransformerFactory} creates a reader via {@link org.xml.sax.helpers.XMLReaderFactory} (if setXMLReader is not used), sets itself as the reader's {@link org.xml.sax.ContentHandler}, and calls reader.parse(inputSource). and that will be passed to the parse method of the reader.
Set the XMLReader to be used for the Source.
Get the XMLReader to be used for the Source.
Set the SAX InputSource to be used for the Source.
Get the SAX InputSource to be used for the Source.
Set the system identifier for this Source.  If an input source has already been set, it will set the system ID or that input source, otherwise it will create a new input source. <p>The system identifier is optional if there is a byte stream or a character stream, but it is still useful to provide one, since the application can use it to resolve relative URIs and can include it in error messages and warnings (the parser will attempt to open a connection to the URI only if no byte stream or character stream is specified).</p>
<p>Get the base ID (URI or system ID) from where URIs will be resolved.</p>
Attempt to obtain a SAX InputSource object from a Source object.
Construct a StreamResult from a byte stream.  Normally, a stream should be used rather than a reader, so that the transformer may use instructions contained in the transformation instructions to control the encoding.
Construct a StreamResult from a character stream.  Normally, a stream should be used rather than a reader, so that the transformer may use instructions contained in the transformation instructions to control the encoding.  However, there are times when it is useful to write to a character stream, such as when using a StringWriter.
Construct a StreamResult from a URL.
Construct a StreamResult from a File.
Set the ByteStream that is to be written to.  Normally, a stream should be used rather than a reader, so that the transformer may use instructions contained in the transformation instructions to control the encoding.
Get the byte stream that was set with setOutputStream. if setOutputStream or the ByteStream constructor was not called.
Set the writer that is to receive the result.  Normally, a stream should be used rather than a writer, so that the transformer may use instructions contained in the transformation instructions to control the encoding.  However, there are times when it is useful to write to a writer, such as when using a StringWriter.
Get the character stream that was set with setWriter. if setWriter or the Writer constructor was not called.
Set the systemID that may be used in association with the byte or character stream, or, if neither is set, use this value as a writeable URI (probably a file name).
<p>Set the system ID from a <code>File</code> reference.</p> <p>Note the use of {@link File#toURI()} and {@link File#toURL()}. <code>toURI()</code> is preferred and used if possible. To allow JAXP 1.3 to run on J2SE 1.3, <code>toURL()</code> is used if a {@link NoSuchMethodException} is thrown by the attempt to use <code>toURI()</code>.</p>
Construct a StreamSource from a byte stream.  Normally, a stream should be used rather than a reader, so the XML parser can resolve character encoding specified by the XML declaration. <p>If this constructor is used to process a stylesheet, normally setSystemId should also be called, so that relative URI references can be resolved.</p>
Construct a StreamSource from a byte stream.  Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. <p>This constructor allows the systemID to be set in addition to the input stream, which allows relative URIs to be processed.</p>
Construct a StreamSource from a character reader.  Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration.  However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.
Construct a StreamSource from a character reader.  Normally, a stream should be used rather than a reader, so that the XML parser may resolve character encoding specified by the XML declaration.  However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.
Construct a StreamSource from a URL.
Construct a StreamSource from a File.
Set the byte stream to be used as input.  Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. <p>If this Source object is used to process a stylesheet, normally setSystemId should also be called, so that relative URL references can be resolved.</p>
Get the byte stream that was set with setByteStream. if setByteStream or the ByteStream constructor was not called.
Set the input to be a character reader.  Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration.  However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.
Get the character stream that was set with setReader. if setReader or the Reader constructor was not called.
Set the public identifier for this Source. <p>The public identifier is always optional: if the application writer includes one, it will be provided as part of the location information.</p>
Get the public identifier that was set with setPublicId. if setPublicId was not called.
Set the system identifier for this Source. <p>The system identifier is optional if there is a byte stream or a character stream, but it is still useful to provide one, since the application can use it to resolve relative URIs and can include it in error messages and warnings (the parser will attempt to open a connection to the URI only if there is no byte stream or character stream specified).</p>
Set the system ID from a File reference.
<p>Reset this <code>Transformer</code> to its original configuration.</p> <p><code>Transformer</code> is reset to the same state as when it was created with {@link TransformerFactory#newTransformer()}, {@link TransformerFactory#newTransformer(Source source)} or {@link Templates#newTransformer()}. <code>reset()</code> is designed to allow the reuse of existing <code>Transformer</code>s thus saving resources associated with the creation of new <code>Transformer</code>s.</p> <p>The reset <code>Transformer</code> is not guaranteed to have the same {@link URIResolver} or {@link ErrorListener} <code>Object</code>s, e.g. {@link Object#equals(Object obj)}. It is guaranteed to have a functionally equal <code>URIResolver</code> and <code>ErrorListener</code>.</p>
Create a new <code>TransformerConfigurationException</code> with no detail message.
Create a new <code>TransformerConfigurationException</code> with the <code>String </code> specified as an error message.
Create a new <code>TransformerConfigurationException</code> with a given <code>Exception</code> base cause of the error. TransformerConfigurationException.
Create a new <code>TransformerConfigurationException</code> with the given <code>Exception</code> base cause and detail message.
Create a new TransformerConfigurationException from a message and a Locator. <p>This constructor is especially useful when an application is creating its own exception from within a DocumentHandler callback.</p>
Wrap an existing exception in a TransformerConfigurationException.
Method getLocator retrieves an instance of a SourceLocator object that specifies where an error occurred.
Method setLocator sets an instance of a SourceLocator object that specifies where an error occurred.
This method retrieves an exception that this exception wraps.
Returns the cause of this throwable or <code>null</code> if the cause is nonexistent or unknown.  (The cause is the throwable that caused this throwable to get thrown.)
Initializes the <i>cause</i> of this throwable to the specified value. (The cause is the throwable that caused this throwable to get thrown.) <p>This method can be called at most once.  It is generally called from within the constructor, or immediately after creating the throwable.  If this throwable was created with {@link #TransformerException(Throwable)} or {@link #TransformerException(String,Throwable)}, this method cannot be called even once.
Create a new TransformerException.
Create a new TransformerException wrapping an existing exception.
Wrap an existing exception in a TransformerException. <p>This is used for throwing processor exceptions before the processing has started.</p>
Create a new TransformerException from a message and a Locator. <p>This constructor is especially useful when an application is creating its own exception from within a DocumentHandler callback.</p>
Wrap an existing exception in a TransformerException.
Get the error message with location information appended.
Get the location information as a string. if there is no location information.
Returns Android's implementation of {@code TransformerFactory}. Unlike other Java implementations, this method does not consult system properties, properties files, or the services API.
Returns an instance of the named implementation of {@code TransformerFactory}.
Create a new <code>TransformerFactoryConfigurationError</code> with no detail message.
Create a new <code>TransformerFactoryConfigurationError</code> with the <code>String</code> specified as an error message.
Create a new <code>TransformerFactoryConfigurationError</code> with a given <code>Exception</code> base cause of the error. TransformerFactoryConfigurationError.
Create a new <code>TransformerFactoryConfigurationError</code> with the given <code>Exception</code> base cause and detail message. TransformerFactoryConfigurationError
Return the message (if any) for this error . If there is no message for the exception and there is an encapsulated exception then the message of that exception will be returned.
<p>Lookup an implementation of the <code>SchemaFactory</code> that supports the specified schema language and return it.</p> <p>To find a <code>SchemaFactory</code> object for a given schema language, this method looks the following places in the following order where "the class loader" refers to the context class loader:</p> <ol> <li> </li> <li> </li> <li> </li> <li> </li> </ol> <p>If everything fails, {@link IllegalArgumentException} will be thrown.</p> <p><strong>Tip for Trouble-shooting:</strong></p> <p>See {@link java.util.Properties#load(java.io.InputStream)} for exactly how a property file is parsed. In particular, colons ':' need to be escaped in a property file, so make sure schema language URIs are properly escaped in it. For example:</p> <pre> http\://www.w3.org/2001/XMLSchema=org.acme.foo.XSSchemaFactory </pre>
Returns an instance of the named implementation of {@code SchemaFactory}.
Look up the value of a feature flag. <p>The feature name is any fully-qualified URI.  It is possible for a {@link SchemaFactory} to recognize a feature name but temporarily be unable to return its value. <p>Implementers are free (and encouraged) to invent their own features, using names built on their own URIs.</p>
Set the value of a feature flag. <p> Feature can be used to control the way a {@link SchemaFactory} parses schemas, although {@link SchemaFactory}s are not required to recognize any specific feature names.</p> <p>The feature name is any fully-qualified URI.  It is possible for a {@link SchemaFactory} to expose a feature value but to be unable to change the current value.</p> <p>All implementations are required to support the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature. When the feature is:</p> <ul> <li> </li> <li> </li> </ul>
Set the value of a property. <p>The property name is any fully-qualified URI.  It is possible for a {@link SchemaFactory} to recognize a property name but to be unable to change the current value.</p> <p>{@link SchemaFactory}s are not required to recognize setting any specific property names.</p>
Look up the value of a property. <p>The property name is any fully-qualified URI.  It is possible for a {@link SchemaFactory} to recognize a property name but temporarily be unable to return its value.</p> <p>{@link SchemaFactory}s are not required to recognize any specific property names.</p> <p>Implementers are free (and encouraged) to invent their own properties, using names built on their own URIs.</p>
<p>Parses the specified source as a schema and returns it as a schema.</p> <p>This is a convenience method for {@link #newSchema(Source[] schemas)}.</p>
<p>Parses the specified <code>File</code> as a schema and returns it as a <code>Schema</code>.</p> <p>This is a convenience method for {@link #newSchema(Source schema)}.</p>
<p>Parses the specified <code>URL</code> as a schema and returns it as a <code>Schema</code>.</p> <p>This is a convenience method for {@link #newSchema(Source schema)}.</p>
<p>Conditional debug printing.</p>
<p>Constructor that specifies <code>ClassLoader</code> to use to find <code>SchemaFactory</code>.</p>
<p>Creates a new {@link SchemaFactory} object for the specified schema language.</p>
<p>Lookup a <code>SchemaFactory</code> for the given <code>schemaLanguage</code>.</p>
<p>Creates an instance of the specified and returns it.</p>
Returns an {@link Iterator} that enumerates all the META-INF/services files that we care.
Searches for a SchemaFactory for a given schema language in a META-INF/services file.
<p>Search the specified classloader for the given classname.</p>
Validates the specified input. <p> This is just a convenience method of: <pre> validate(source,null); </pre>
Validates the specified input and send the augmented validation result to the specified output. <p> This method places the following restrictions on the types of the {@link Source}/{@link Result} accepted. <h4>{@link Source}/{@link Result} accepted:</h4> <table border=1> <thead> <tr> <td></td> <td>{@link javax.xml.transform.sax.SAXSource}</td> <td>{@link javax.xml.transform.dom.DOMSource}</td> <td>{@link javax.xml.transform.stream.StreamSource}</td> </tr> </thead> <tbody> <tr> <td><tt>null</tt></td> <td>OK</td> <td>OK</td> <td>OK</td> <td>OK</td> </tr> <tr> <td>{@link javax.xml.transform.sax.SAXResult}</td> <td>OK</td> <td>Err</td> <td>Err</td> <td>Err</td> </tr> <tr> <td>{@link javax.xml.transform.dom.DOMResult}</td> <td>Err</td> <td>OK</td> <td>Err</td> <td>Err</td> </tr> <tr> <td>{@link javax.xml.transform.stream.StreamResult}</td> <td>Err</td> <td>Err</td> <td>Err</td> <td>OK</td> </tr> </tbody> </table> <p> To validate one {@link Source} into another kind of {@link Result}, use the identity transformer (see {@link javax.xml.transform.TransformerFactory#newTransformer()}). <p> Errors found during the validation is sent to the specified {@link ErrorHandler}. <p> If a document is valid, or if a document contains some errors but none of them were fatal and the {@link ErrorHandler} didn't throw any exception, then the method returns normally.
Set the value of a feature flag. <p> Feature can be used to control the way a {@link Validator} parses schemas, although {@link Validator}s are not required to recognize any specific property names.</p> <p>The feature name is any fully-qualified URI.  It is possible for a {@link Validator} to expose a feature value but to be unable to change the current value. Some feature values may be immutable or mutable only in specific contexts, such as before, during, or after a validation.</p>
Set the value of a property. <p>The property name is any fully-qualified URI.  It is possible for a {@link Validator} to recognize a property name but to be unable to change the current value. Some property values may be immutable or mutable only in specific contexts, such as before, during, or after a validation.</p> <p>{@link Validator}s are not required to recognize setting any specific property names.</p>
Look up the value of a property. <p>The property name is any fully-qualified URI.  It is possible for a {@link Validator} to recognize a property name but temporarily be unable to return its value. Some property values may be available only in specific contexts, such as before, during, or after a validation.</p> <p>{@link Validator}s are not required to recognize any specific property names.</p> <p>Implementors are free (and encouraged) to invent their own properties, using names built on their own URIs.</p>
Look up the value of a feature flag. <p>The feature name is any fully-qualified URI.  It is possible for a {@link ValidatorHandler} to recognize a feature name but temporarily be unable to return its value. Some feature values may be available only in specific contexts, such as before, during, or after a validation. <p>Implementors are free (and encouraged) to invent their own features, using names built on their own URIs.</p>
Set the value of a feature flag. <p> Feature can be used to control the way a {@link ValidatorHandler} parses schemas, although {@link ValidatorHandler}s are not required to recognize any specific property names.</p> <p>The feature name is any fully-qualified URI.  It is possible for a {@link ValidatorHandler} to expose a feature value but to be unable to change the current value. Some feature values may be immutable or mutable only in specific contexts, such as before, during, or after a validation.</p>
Set the value of a property. <p>The property name is any fully-qualified URI.  It is possible for a {@link ValidatorHandler} to recognize a property name but to be unable to change the current value. Some property values may be immutable or mutable only in specific contexts, such as before, during, or after a validation.</p> <p>{@link ValidatorHandler}s are not required to recognize setting any specific property names.</p>
Look up the value of a property. <p>The property name is any fully-qualified URI.  It is possible for a {@link ValidatorHandler} to recognize a property name but temporarily be unable to return its value. Some property values may be available only in specific contexts, such as before, during, or after a validation.</p> <p>{@link ValidatorHandler}s are not required to recognize any specific property names.</p> <p>Implementors are free (and encouraged) to invent their own properties, using names built on their own URIs.</p>
<p>Constructs a new <code>XPathException</code> with the specified detail <code>message</code>.</p> <p>The <code>cause</code> is not initialized.</p> <p>If <code>message</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>
<p>Constructs a new <code>XPathException</code> with the specified <code>cause</code>.</p> <p>If <code>cause</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>
<p>Constructs a new <code>XPathExpressionException</code> with the specified detail <code>message</code>.</p> <p>The <code>cause</code> is not initialized.</p> <p>If <code>message</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>
<p>Constructs a new <code>XPathExpressionException</code> with the specified <code>cause</code>.</p> <p>If <code>cause</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>
<p>Get a new <code>XPathFactory</code> instance using the default object model, {@link #DEFAULT_OBJECT_MODEL_URI}, the W3C DOM.</p> <p>This method is functionally equivalent to:</p> <pre> newInstance(DEFAULT_OBJECT_MODEL_URI) </pre> <p>Since the implementation for the W3C DOM is always available, this method will never fail.</p>
<p>Get a new <code>XPathFactory</code> instance using the specified object model.</p> <p>To find a <code>XPathFactory</code> object, this method looks the following places in the following order where "the class loader" refers to the context class loader:</p> <ol> <li> </li> <li> </li> <li> </li> <li> </li> </ol> <p>If everything fails, an <code>XPathFactoryConfigurationException</code> will be thrown.</p> <p>Tip for Trouble-shooting:</p> <p>See {@link java.util.Properties#load(java.io.InputStream)} for exactly how a property file is parsed. In particular, colons ':' need to be escaped in a property file, so make sure the URIs are properly escaped in it. For example:</p> <pre> http\://java.sun.com/jaxp/xpath/dom=org.acme.DomXPathFactory </pre> The specification only defines the URI {@link #DEFAULT_OBJECT_MODEL_URI}, the org.w3c.dom package, and implementations are free to introduce other URIs for other object models.
<p>Constructs a new <code>XPathFactoryConfigurationException</code> with the specified detail <code>message</code>.</p> <p>The <code>cause</code> is not initialized.</p> <p>If <code>message</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>
<p>Constructs a new <code>XPathFactoryConfigurationException</code> with the specified <code>cause</code>.</p> <p>If <code>cause</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>
<p>Constructor that specifies <code>ClassLoader</code> to use to find <code>SchemaFactory</code>.</p>
<p>Creates a new {@link XPathFactory} object for the specified schema language.</p>
<p>Lookup a {@link XPathFactory} for the given object model.</p>
Searches for a XPathFactory for a given uri in a META-INF/services file.
<p>Constructs a new <code>XPathFunctionException</code> with the specified detail <code>message</code>.</p> <p>The <code>cause</code> is not initialized.</p> <p>If <code>message</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>
<p>Constructs a new <code>XPathFunctionException</code> with the specified <code>cause</code>.</p> <p>If <code>cause</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>
Execute the test method expecting that an Exception of class fExpected or one of its subclasses will be thrown
The basic run behavior.
Asserts that two objects do not refer to the same object. If they are an AssertionFailedError is thrown with the given message.
Asserts that two objects do not refer to the same object. If they are the same an AssertionFailedError is thrown.
Constructs a comparison failure.
Returns "..." in place of common prefix and "..." in place of common suffix between expected and actual.
No-arg constructor to enable serialization. This method is not intended to be used by mere mortals without calling setName().
Constructs a test case with the given name.
Counts the number of test cases executed by run(TestResult result).
Creates a default TestResult object
A convenience method to run this test, collecting the results with a default TestResult object.
Runs the test case and collects the results in TestResult.
Runs the bare test sequence.
Override to run the test and assert its state.
Returns a string representation of the test case
Gets the name of a TestCase
Sets the name of a TestCase
Constructs a TestFailure with the given test and exception.
Gets the failed test.
Gets the thrown exception.
Returns a short description of the failure.
Adds an error to the list of errors. The passed in exception caused the error.
Adds a failure to the list of failures. The passed in exception caused the failure.
Registers a TestListener
Unregisters a TestListener
Returns a copy of the listeners.
Informs the result that a test was completed.
Gets the number of detected errors.
Returns an Enumeration for the errors
Gets the number of detected failures.
Returns an Enumeration for the failures
Runs a TestCase.
Gets the number of run tests.
Runs a TestCase.
Checks whether the test run should stop
Informs the result that a test will be started.
Marks that the test run should stop.
Returns whether the entire test was successful or not.
Constructs a TestSuite from the given class with the given name.
Constructs a TestSuite from the given class. Adds all the methods starting with "test" as test cases to the suite. Parts of this method was written at 2337 meters in the Huffihutte, Kanton Uri
Constructs an empty TestSuite.
Adds a test to the suite.
Adds the tests from the given class to the suite
...as the moon sets over the early morning Merlin, Oregon mountains, our intrepid adventurers type...
Converts the stack trace into a string
Counts the number of test cases that will be run by this test.
Gets a constructor which takes a single String as its argument or a no arg constructor.
Runs the tests and collects their result in a TestResult.
Returns the test at the given index
Returns the number of tests in this suite
Returns the tests as an enumeration
Sets the name of the suite.
Returns the name of the suite. Not all test suites have a name and this method can return null.
Returns a test which will fail and log a warning message.
Reset the collation elements to their initial state. This will move the 'cursor' to the beginning of the text.
Get the ordering priority of the next collation element in the text. A single character may contain more than one collation element.
Get the ordering priority of the previous collation element in the text. A single character may contain more than one collation element.
Get the maximum length of any expansion sequences that end with the specified comparison order.
Set the text containing the collation elements.
Get the offset of the current source character. This is an offset into the text of the character containing the current collation elements.
Set the offset of the current source character. This is an offset into the text of the character to be processed.
Gets the primary order of a collation order.
Gets the secondary order of a collation order.
Gets the tertiary order of a collation order.
Garbage collection. Close C collator and reclaim memory.
Creates a hash code for this CollationKey. Compute the hash by iterating sparsely over about 32 (up to 63) bytes spaced evenly through the string.  For each byte, multiply the previous hash value by a prime number and add the new byte in, like a linear congruential random number generator, producing a pseudo-random deterministic value well distributed over the output range.
Returns an array of ISO language names (two-letter codes), fetched either from ICU's database or from our memory cache.
Returns an array of ISO country names (two-letter codes), fetched either from ICU's database or from our memory cache.
Returns the appropriate {@code Locale} given a {@code String} of the form returned by {@code toString}. This is very lenient, and doesn't care what's between the underscores: this method can parse strings that {@code Locale.toString} won't produce. Used to remove duplication.
Returns a shared LocaleData for the given locale.
Translates from Java's enum to the magic numbers #defined in "NativeConverter.cpp".
Used so java.util.Formatter doesn't need to allocate DecimalFormatSymbols instances.
Used to implement clone.
Copies the DecimalFormatSymbols settings into our native peer in bulk.
start getter and setter
called by native
Returns the constant defined in this class corresponding to the first rule that matches the given value.
Returns the appropriate string from 'zoneStrings'. Used with getZoneStrings.
Returns an array of time zone strings, as used by DateFormatSymbols.getZoneStrings.
Returns an array containing the time zone ids in use in the country corresponding to the given locale. This is not necessary for Java API, but is used by telephony as a fallback.
Returns a string equal to {@code new String(array, start, length)}.
Returns an editor for the entry named {@code key}, or null if it cannot currently be edited.
Converts the stashed function name and errno value to a human-readable string. We do this here rather than in the constructor so that callers only pay for this if they need it.
Converts the stashed function name and error value to a human-readable string. We do this here rather than in the constructor so that callers only pay for this if they need it.
Returns a new iterator over {@code buffer}, starting at {@code offset} and continuing for {@code byteCount} bytes. Items larger than a byte are interpreted using the given byte order.
Connects socket 'fd' to 'inetAddress' on 'port', with no timeout. The lack of a timeout means this method won't throw SocketTimeoutException.
Connects socket 'fd' to 'inetAddress' on 'port', with a the given 'timeoutMs'. Use timeoutMs == 0 for a blocking connect with no timeout.
java.net has its own socket options similar to the underlying Unix ones. We paper over the differences here.
java.net has its own socket options similar to the underlying Unix ones. We paper over the differences here.
java.io only throws FileNotFoundException when opening files, regardless of what actually went wrong. Additionally, java.io is more restrictive than POSIX when it comes to opening directories: POSIX says read-only is okay, but java.io doesn't even allow that. We also have an Android-specific hack to alter the default permissions.
java.io thinks that a read at EOF is an error and should return -1, contrary to traditional Unix practice where you'd read until you got 0 bytes (and any future read would return -1).
java.io always writes every byte it's asked to, or fails with an error. (That is, unlike Unix it never just writes as many bytes as happens to be convenient.)
Calls close(2) on 'fd'. Also resets the internal int to -1. Does nothing if 'fd' is null or invalid.
Closes 'fd', ignoring any exceptions. Does nothing if 'fd' is null or invalid.
Closes 'socket', ignoring any exceptions. Does nothing if 'socket' is null.
Sets 'fd' to be blocking or non-blocking, according to the state of 'blocking'.
Returns the contents of 'path' as a byte array.
Returns the contents of 'path' as a string. The contents are assumed to be UTF-8.
Use this if you've called {@code mmap} yourself.
Use this to mmap the whole file read-only.
Unmaps this memory-mapped file using munmap(2). This is a no-op if close has already been called. Note that this class does <i>not</i> use finalization; you must call {@code close} yourself. Calling this method invalidates any iterators over this {@code MemoryMappedFile}. It is an error to use such an iterator after calling {@code close}.
Returns a new iterator that treats the mapped data as big-endian.
Returns a new iterator that treats the mapped data as little-endian.
Returns the size in bytes of the memory-mapped region.
Implements InputStream.read(int) in terms of InputStream.read(byte[], int, int). InputStream assumes that you implement InputStream.read(int) and provides default implementations of the others, but often the opposite is more efficient.
Implements OutputStream.write(int) in terms of OutputStream.write(byte[], int, int). OutputStream assumes that you implement OutputStream.write(int) and provides default implementations of the others, but often the opposite is more efficient.
Fills 'dst' with bytes from 'in', throwing EOFException if insufficient bytes are available.
Reads exactly 'byteCount' bytes from 'in' (into 'dst' at offset 'offset'), and throws EOFException if insufficient bytes are available. Used to implement {@link java.io.DataInputStream#readFully(byte[], int, int)}.
Returns a byte[] containing the remainder of 'in', closing it when done.
Returns a byte[] containing the remainder of 'in'.
Call {@code in.read()} repeatedly until either the stream is exhausted or {@code byteCount} bytes have been read. <p>This method reuses the skip buffer but is careful to never use it at the same time that another stream is using it. Otherwise streams that use the caller's buffer for consistency checks like CRC could be clobbered by other threads. A thread-local buffer is also insufficient because some streams may call other streams in their skip() method, also clobbering the buffer.
Copies all of the bytes from {@code in} to {@code out}. Neither stream is closed. Returns the total number of bytes transferred.
read() is implemented using read(byte[], int, int) so subclasses only need to override the latter.
Closes the cache entry and makes the socket available for reuse. This should be invoked when the end of the body has been reached.
Calls abort on the cache entry and disconnects the socket. This should be invoked when the connection is closed unexpectedly to invalidate the cache entry and to prevent the HTTP connection from being reused. HTTP messages are sent in serial so whenever a message cannot be read to completion, subsequent messages cannot be read either and the connection must be discarded. <p>An earlier implementation skipped the remaining bytes, but this requires that the entire transfer be completed. If the intention was to cancel the transfer, closing the connection is the only solution.
Returns the amount of data that can be transmitted in a chunk whose total length (data+headers) is {@code dataPlusHeaderLength}. This is presumably useful to match sizes with wire-protocol packets.
Equivalent to, but cheaper than writing Integer.toHexString().getBytes() followed by CRLF.
Parse a comma-separated list of cache control header values.
Returns the next index in {@code input} at or after {@code pos} that contains a character from {@code characters}. Returns the input length if none of the requested characters can be found.
Returns the next non-whitespace character in {@code input} that is white space. Result is undefined if input contains newline characters.
Returns {@code value} as a positive integer, or 0 if it is negative, or -1 if it cannot be parsed.
Create an {@code SSLSocket} and perform the SSL handshake (performing certificate validation. TLS extensions and SSL deflate compression. If false, use an SSL3 only fallback mode without compression.
Return an {@code SSLSocket} that is not only connected but has also passed hostname verification. connected to is an acceptable match for the peer certificate chain of the SSLSession.
Return an {@code SSLSocket} if already connected, otherwise null.
Returns true if the connection is functional. This uses a shameful hack to peek a byte from the socket.
Returns true if this connection is eligible to be recycled. This is like {@link #isStale} except that it doesn't try to actually perform any I/O.
Returns the date for {@code value}. Returns null if the value couldn't be parsed.
Figures out what the response source will be, and opens a socket to that source if necessary. Prepares the request headers and gets ready to start writing the request body if it exists.
Initialize the source for this response. It may be corrected later if the request headers forbids network use.
Connect to the origin server either directly or via a proxy.
Returns true if {@code cacheResponse} is of the right type. This condition is necessary but not sufficient for the cached response to be used.
Cause the socket connection to be released to the connection pool when it is no longer needed. If it is already unneeded, it will be pooled immediately.
Releases this engine so that its resources may be either reused or closed.
Returns true if the response must have a (possibly 0-length) body. See RFC 2616 section 4.3.
Trailers are headers included after the last chunk of a response encoded with chunked encoding.
Prepares the HTTP headers and sends them to the server. <p>For streaming requests with a body, headers must be prepared <strong>before</strong> the output stream has been written to. Otherwise the body would need to be buffered! <p>For non-streaming requests with a body, headers must be prepared <strong>after</strong> the output stream has been written to and closed. This ensures that the {@code Content-Length} header field receives the proper value.
Returns the headers to send on a network request. <p>This adds the content length and content-type headers, which are neither needed nor known when querying the response cache. <p>It updates the status line, which may need to be fully qualified if the connection is using a proxy.
Populates requestHeaders with defaults and cookies. <p>This client doesn't specify a default {@code Accept} header because it doesn't know what content types the application is interested in.
Returns true if the request line should contain the full URL with host (like "GET /foo HTTP/1.1"). <p>This is non-final because for HTTPS it's never necessary to supply the full URL, even if a proxy is in use.
Flushes the remaining request header and body, parses the HTTP response headers and starts reading the HTTP response body if it exists.
Returns an input stream that reads the body of a snapshot, closing the snapshot when the stream is closed.
Reads an entry from an input stream. A typical entry looks like this: GET 2 Accept-Language: fr-CA Accept-Charset: UTF-8 HTTP/1.1 200 OK 3 Content-Type: image/png Content-Length: 100 Cache-Control: max-age=600 A typical HTTPS file looks like this: GET 2 Accept-Language: fr-CA Accept-Charset: UTF-8 HTTP/1.1 200 OK 3 Content-Type: image/png Content-Length: 100 Cache-Control: max-age=600 AES_256_WITH_MD5 2 base64-encoded peerCertificate[0] base64-encoded peerCertificate[1] -1 The file is newline separated. The first two lines are the URL and the request method. Next is the number of HTTP Vary request header lines, followed by those lines. Next is the response status line, followed by the number of HTTP response header lines, followed by those lines. HTTPS responses also contain SSL session information. This begins with a blank line, and then a line containing the cipher suite. Next is the length of the peer certificate chain. These certificates are base64-encoded and appear each on their own line. The next line contains the length of the local certificate chain. These certificates are also base64-encoded and appear each on their own line. A length of -1 is used to encode a null array.
Attempt to make an https connection. Returns true if a connection was reused, false otherwise. TLS extensions and SSL deflate compression. If false, use an SSL3 only fallback mode without compression.
To make an HTTPS connection over an HTTP proxy, send an unencrypted CONNECT request to create the proxy connection. This may need to be retried if the proxy requires authorization.
If we're establishing an HTTPS tunnel with CONNECT (RFC 2817 5.2), send only the minimum set of headers. This avoids sending potentially sensitive data like HTTP cookies to the proxy unencrypted.
Returns an input stream from the server in the case of error such as the requested file (txt, htm, html) is not found on the remote server.
Returns the value of the field at {@code position}. Returns null if there are fewer than {@code position} headers.
Returns the value of the field corresponding to the {@code fieldName}, or null if there is no such field. If the field has multiple values, the last value is returned.
Create a new HTTP engine. This hook method is non-final so it can be overridden by HttpsURLConnectionImpl.
Aggressively tries to get the final HTTP response, potentially making many HTTP requests in the process in order to cope with redirects and authentication.
Returns the retry action to take for the current response headers. The headers, proxy and target URL or this connection may be adjusted to prepare for a follow up request.
React to a failed authorization response by looking up new credentials.
Returns the authorization credentials on the base of provided challenge.
Sets the response status line (like "HTTP/1.0 200 OK") or request line (like "GET / HTTP/1.1").
Returns the status line's HTTP minor version. This returns 0 for HTTP/1.0 and 1 for HTTP/1.1. This returns 1 if the HTTP version is unknown.
Returns the HTTP status code or -1 if it is unknown.
Returns the HTTP status message or null if it is unknown.
Add an HTTP header line containing a field name, a literal colon, and a value.
Set a field with the specified value. If the field is not found, it is added. If the field is found, the existing values are replaced.
Returns the number of field values.
Returns the field at {@code position} or null if that is out of range.
Returns the value at {@code index} or null if that is out of range.
Returns an immutable map containing each field to its list of values. The status line is mapped to null.
Creates a new instance from the given map of fields to values. If present, the null field's last element will be used to set the status line.
Returns true if the request contains conditions that save the server from sending a response that the client has locally. When the caller adds conditions, this cache won't participate in the request.
Returns the current age of the response, in milliseconds. The calculation is specified by RFC 2616, 13.2.3 Age Calculations.
Returns the number of milliseconds that the response was fresh for, starting from the served date.
Returns true if computeFreshnessLifetime used a heuristic. If we used a heuristic to serve a cached response older than 24 hours, we are required to attach a warning.
Returns true if this response can be stored to later serve another request.
Returns true if a Vary header contains an asterisk. Such responses cannot be cached.
Returns true if none of the Vary headers on this response have changed between {@code cachedRequest} and {@code newRequest}.
Returns the source to satisfy {@code request} given this cached response.
Returns true if this cached response should be used; false if the network response should be used.
Combines this cached header with a network header as defined by RFC 2616, 13.5.3.
Returns true if {@code fieldName} is an end-to-end HTTP header, as defined by RFC 2616, 13.5.1.
Creates an instance of <code>FileURLConnection</code> for establishing a connection to the file pointed by this <code>URL<code>
Returns the directory listing of the file component as an input stream.
FtpURLConnection constructor comment.
FtpURLConnection constructor.
Change the server directory to that specified in the URL
Read a line of text and return it for possible parsing
Issue the STOR command to the server with the file as the parameter
Set the type of the file transfer. Only Image is supported
Returns the Jar file referred by this {@code URLConnection}
Look up the JarEntry of the entry referenced by this {@code URLConnection}.
Closes the cached files.
Returns the path will relative path segments like ".." and "." resolved. The returned path will not necessarily start with a "/" character. This handles ".." and "." segments at both the beginning and end of the path.
Returns a path that can be safely concatenated with {@code authority}. If the authority is null or empty, this can be any path. Otherwise the paths
Returns the scheme prefix like "http" from the URL spec, or null if the spec doesn't start with a scheme. Scheme prefixes match this pattern: {@code alpha ( alpha | digit | '+' | '-' | '.' )* ':'}
Returns the index of the first char of {@code chars} in {@code string} bounded between {@code start} and {@code end}. This returns {@code end} if none of the characters exist in the requested range.
Reads a raw packet into the specified buffer, with the specified timeout.  Packets not destined for the desired UDP port are discarded.  Returns the length actually read.  No indication of overflow is signaled.  The packet data will start at the IP header (EthernetII dest/source/type headers are removed).
Writes a raw packet to the desired interface.  A L2 header will be added which includes the specified destination address, our source MAC, and the IP type.  The caller is responsible for computing correct IP-header and payload checksums.
Closes the socket.  After this method is invoked, subsequent read/write operations will fail.
Throws if {@code s} is invalid according to this encoder.
Throws if {@code s} contains characters that are not letters, digits or in {@code legal}.
Encodes {@code s} and appends the result to {@code builder}.
Like {@link Character#digit}, but without support for non-ASCII characters.
Called after a cache miss to compute a value for the corresponding key. Returns the computed value or null if no value can be computed. The default implementation returns null.
Clear the cache, calling {@link #entryEvicted} on each removed entry.
Returns an iterator over the values referenced by the elements of {@code iterable}.
Sorts and removes duplicate elements from {@code list}. This method does not use {@link Object#equals}: only the comparator defines equality.
Reads the file indicating the database version in use.
Traditionally, Unix systems have one file per time zone. We have one big data file, which is just a concatenation of regular time zone files. To allow random access into this big data file, we also have an index. We read the index at startup, and keep it in memory so we can binary search by id when we need time zone data. The format of this file is, I believe, Android's own, and undocumented. All this code assumes strings are US-ASCII.
Tests a given byte array to see if it contains only valid characters within the Base64 alphabet.
Encodes binary data using the base64 algorithm but does not chunk the output.
Encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks
Decodes an Object using the base64 algorithm.  This method is provided in order to satisfy the requirements of the Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[].
Decodes a byte[] containing containing characters in the Base64 alphabet.
Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
Discards any whitespace from a base-64 encoded block. from.
Encodes an Object using the base64 algorithm.  This method is provided in order to satisfy the requirements of the Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].
Encodes a byte[] containing binary data, into a byte[] containing characters in the Base64 alphabet.
Converts an array of raw binary data into an array of ascii 0 and 1 characters.
Converts an array of raw binary data into an array of ascii 0 and 1 chars.
Decodes a byte array where each byte represents an ascii '0' or '1'.
Decodes a String where each char of the String represents an ascii '0' or '1'.
------------------------------------------------------------------------ static codec operations ------------------------------------------------------------------------ Decodes a byte array where each char represents an ascii '0' or '1'.
Decodes a byte array where each byte represents an ascii '0' or '1'.
Converts an array of raw binary data into an array of ascii 0 and 1 character bytes - each byte is a truncated char.
Converts an array of raw binary data into an array of ascii 0 and 1 characters.
Converts an array of raw binary data into a String of ascii 0 and 1 characters.
Converts an array of characters representing hexidecimal values into an array of bytes of those same values. The returned array will be half the length of the passed array, as it takes two characters to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.
Converts an array of bytes into an array of characters representing the hexidecimal values of each byte in order. The returned array will be double the length of the passed array, as it takes two characters to represent any given byte.
Converts an array of character bytes representing hexidecimal values into an array of bytes of those same values. The returned array will be half the length of the passed array, as it takes two characters to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.
Converts a String or an array of character bytes representing hexidecimal values into an array of bytes of those same values. The returned array will be half the length of the passed String or array, as it takes two characters to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.
Converts an array of bytes into an array of bytes for the characters representing the hexidecimal values of each byte in order. The returned array will be double the length of the passed array, as it takes two characters to represent any given byte.
Converts a String or an array of bytes into an array of characters representing the hexidecimal values of each byte in order. The returned array will be double the length of the passed String or array, as it takes two characters to represent any given byte.
Encode a value with Double Metaphone
Encode a value with Double Metaphone, optionally using the alternate encoding.
Encode the value using DoubleMetaphone.  It will only work if <code>obj</code> is a <code>String</code> (like <code>Metaphone</code>).
Encode the value using DoubleMetaphone.
Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases
Handles 'C' cases
Handles 'CC' cases
Handles 'CH' cases
Handles 'D' cases
Handles 'G' cases
Handles 'GH' cases
Handles 'H' cases
Handles 'J' cases
Handles 'L' cases
Handles 'P' cases
Handles 'R' cases
Handles 'S' cases
Handles 'SC' cases
Handles 'T' cases
Handles 'W' cases
Handles 'X' cases
Handles 'Z' cases
Complex condition 0 for 'C'
Complex condition 0 for 'CH'
Complex condition 1 for 'CH'
Complex condition 0 for 'L'
Complex condition 0 for 'M'
Determines whether or not a value is of slavo-germanic orgin. A value is of slavo-germanic origin if it contians any of 'W', 'K', 'CZ', or 'WITZ'.
Cleans the input
Gets the character at index <code>index</code> if available, otherwise it returns <code>Character.MIN_VALUE</code> so that there is some sort of a default
Shortcut method with 1 criteria
Shortcut method with 2 criteria
Shortcut method with 3 criteria
Shortcut method with 4 criteria
Shortcut method with 5 criteria
Shortcut method with 6 criteria
Determines whether <code>value</code> contains any of the criteria at index <code>start</code> and matching up to length <code>length</code>
Encodes an Object using the metaphone algorithm.  This method is provided in order to satisfy the requirements of the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.
Encodes a String using the Metaphone algorithm.
BEGIN android-note Removed @see reference to SoundexUtils below, since the class isn't public. END android-note Returns the number of characters in the two encoded Strings that are the same. This return value ranges from 0 to the length of the shortest encoded String: 0 indicates little or no similarity, and 4 out of 4 (for example) indicates strong similarity or identical values. For refined Soundex, the return value can be greater than 4.
Encodes an Object using the refined soundex algorithm. This method is provided in order to satisfy the requirements of the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.
Encodes a String using the refined soundex algorithm.
Retreives the Refined Soundex code for a given String object.
BEGIN android-note Removed @see reference to SoundexUtils below, since the class isn't public. END android-note Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or identical values.
Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.
Encodes a String using the soundex algorithm.
Used internally by the SoundEx algorithm. Consonants from the same code group separated by W or H are treated as one.
Returns the maxLength. Standard Soundex
Maps the given upper-case character to it's Soudex code.
Sets the maxLength.
Sets the soundexMapping.
Retreives the Soundex code for a given String object.
Encodes a string into its Base64 form using the default charset. Unsafe characters are escaped.
Decodes a Base64 string into its original form. Escaped characters are converted back to their original representation.
Encodes an object into its Base64 form using the default charset. Unsafe characters are escaped.
Decodes a Base64 object into its original form. Escaped characters are converted back to their original representation.
Constructor which allows for the selection of a default charset
Encodes a string into its quoted-printable form using the default charset. Unsafe characters are escaped.
Decodes a quoted-printable string into its original form. Escaped characters are converted back to their original representation.
Encodes an object into its quoted-printable form using the default charset. Unsafe characters are escaped.
Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original representation.
Tests if optional tranformation of SPACE characters is to be used
Defines whether optional tranformation of SPACE characters is to be used
Default constructor.
Constructor which allows for the selection of a default charset
Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped. <p> This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in RFC 1521 and is suitable for encoding binary data and unformatted text. </p>
Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are converted back to their original representation. <p> This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in RFC 1521. </p>
Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped. <p> This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in RFC 1521 and is suitable for encoding binary data and unformatted text. </p>
Decodes an array of quoted-printable characters into an array of original bytes. Escaped characters are converted back to their original representation. <p> This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in RFC 1521. </p>
Encodes a string into its quoted-printable form using the default string charset. Unsafe characters are escaped. <p> This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in RFC 1521 and is suitable for encoding binary data. </p>
Decodes a quoted-printable string into its original form using the default string charset. Escaped characters are converted back to their original representation.
Encodes an object into its quoted-printable safe form. Unsafe characters are escaped.
Returns the default charset used for string decoding and encoding.
Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped. <p> This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in RFC 1521 and is suitable for encoding binary data and unformatted text. </p>
Applies an RFC 1522 compliant encoding scheme to the given string of text with the given charset. This method constructs the "encoded-word" header common to all the RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete class to perform the specific enconding. process.
Applies an RFC 1522 compliant decoding scheme to the given string of text. This method processes the "encoded-word" header common to all the RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete class to perform the specific deconding. process. header is not supported
Constructor which allows for the selection of a default charset
Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.
Decodes an array of URL safe 7-bit characters into an array of original bytes. Escaped characters are converted back to their original representation.
Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.
Decodes an array of URL safe 7-bit characters into an array of original bytes. Escaped characters are converted back to their original representation.
Encodes a string into its URL safe form using the specified string charset. Unsafe characters are escaped.
Encodes a string into its URL safe form using the default string charset. Unsafe characters are escaped.
Decodes a URL safe string into its original form using the specified encoding. Escaped characters are converted back to their original representation.
Decodes a URL safe string into its original form using the default string charset. Escaped characters are converted back to their original representation.
Encodes an object into its URL safe form. Unsafe characters are escaped.
Decodes a URL safe object into its original form. Escaped characters are converted back to their original representation.
The <code>String</code> encoding used for decoding and encoding.
Creates a DecoderException
Creates a new instance of this exception with an useful message.
Constructs a new instance.
Compares two strings based not on the strings themselves, but on an encoding of the two strings using the StringEncoder this Comparator was created with. If an {@link EncoderException} is encountered, return <code>0</code>.
Construct a named instance of this Logger.
--------------------------------------------------------- Public Methods
Logs a message with <code>java.util.logging.Level.FINE</code>.
Logs a message with <code>java.util.logging.Level.SEVERE</code>.
Logs a message with <code>java.util.logging.Level.SEVERE</code>.
Return the native Logger instance we are using.
Logs a message with <code>java.util.logging.Level.INFO</code>.
Is debug logging currently enabled?
Is error logging currently enabled?
Is fatal logging currently enabled?
Is info logging currently enabled?
Is trace logging currently enabled?
Is warn logging currently enabled?
Logs a message with <code>java.util.logging.Level.FINEST</code>.
Logs a message with <code>java.util.logging.Level.WARNING</code>.
Public no-arguments constructor required by the lookup mechanism.
Return the configuration attribute with the specified name (if any), or <code>null</code> if there is no such attribute.
Return an array containing the names of all currently defined configuration attributes.  If there are no such attributes, a zero length array is returned.
Convenience method to derive a name from the specified class and call <code>getInstance(String)</code> with it. instance cannot be returned
<p>Construct (if necessary) and return a <code>Log</code> instance, using the factory's current set of configuration attributes.</p> <p><strong>NOTE</strong> - Depending upon the implementation of the <code>LogFactory</code> you are using, the <code>Log</code> instance you are returned may or may not be local to the current application, and may or may not be returned again on a subsequent call with the same name argument.</p> returned (the meaning of this name is only known to the underlying logging implementation that is being wrapped) instance cannot be returned
Release any internal references to previously created {@link org.apache.commons.logging.Log} instances returned by this factory.  This is useful in environments like servlet containers, which implement application reloading by throwing away a ClassLoader.  Dangling references to objects in that class loader would prevent garbage collection.
Remove any configuration attribute associated with the specified name. If there is no such attribute, no action is taken.
Set the configuration attribute with the specified name.  Calling this with a <code>null</code> value is equivalent to calling <code>removeAttribute(name)</code>. <p> This method can be used to set logging configuration programmatically rather than via system properties. It can also be used in code running within a container (such as a webapp) to configure behaviour on a per-component level instead of globally as system properties would do. To use this method instead of a system property, call <pre> LogFactory.getFactory().setAttribute(...) </pre> This must be done before the first Log object is created; configuration changes after that point will be ignored. <p> This method is also called automatically if LogFactory detects a commons-logging.properties file; every entry in that file is set automatically as an attribute here. to remove any setting for this attribute
Gets the context classloader. This method is a workaround for a java 1.2 compiler bug.
Workaround for bug in Java1.2; in theory this method is not needed. See LogFactory.isDiagnosticsEnabled.
Workaround for bug in Java1.2; in theory this method is not needed. See LogFactory.getClassLoader.
Calculate and cache a string that uniquely identifies this instance, including which classloader the object was loaded from. <p> This string will later be prefixed to each "internal logging" message emitted, so that users can clearly see any unexpected behaviour. <p> Note that this method does not detect whether internal logging is enabled or not, nor where to output stuff if it is; that is all handled by the parent LogFactory class. This method just computes its own unique prefix for log messages.
Output a diagnostic message to a user-specified destination (if the user has enabled diagnostic logging).
Return the fully qualified Java classname of the {@link Log} implementation we will be using.
<p>Return the <code>Constructor</code> that can be called to instantiate new {@link org.apache.commons.logging.Log} instances.</p> <p><strong>IMPLEMENTATION NOTE</strong> - Race conditions caused by calling this method from more than one thread are ignored, because the same <code>Constructor</code> instance will ultimately be derived in all circumstances.</p> cannot be returned
Is <em>JDK 1.3 with Lumberjack</em> logging available?
<p>Return <code>true</code> if <em>JDK 1.4 or later</em> logging is available.  Also checks that the <code>Throwable</code> class supports <code>getStackTrace()</code>, which is required by Jdk14Logger.</p>
Is a <em>Log4J</em> implementation available?
Create and return a new {@link org.apache.commons.logging.Log} instance for the specified name. be created
Utility method to check whether a particular logging library is present and available for use. Note that this does <i>not</i> affect the future behaviour of this class.
Attempt to find an attribute (see method setAttribute) or a system property with the provided name and return its value. <p> The attributes associated with this object are checked before system properties in case someone has explicitly called setAttribute, or a configuration property has been set in a commons-logging.properties file.
Get the setting for the user-configurable behaviour specified by key. If nothing has explicitly been set, then return dflt.
Initialize a number of variables that control the behaviour of this class and that can be tweaked by the user. This is done when the first logger is created, not in the constructor of this class, because we need to give the user a chance to call method setAttribute in order to configure this object.
Attempts to create a Log instance for the given category name. Follows the discovery process described in the class javadoc. or if no adapter at all can be instantiated
Appends message if the given name is similar to the candidate. not null
Checks system properties and the attribute map for a Log implementation specified by the user under the property names {@link #LOG_PROPERTY} or {@link #LOG_PROPERTY_OLD}.
Attempts to load the given class, find a suitable constructor, and instantiate an instance of Log. constructor be affected by this method call, <code>false</code> otherwise. library associated with the specified adapter is not available. configuration and the handleFlawedDiscovery method decided this problem was fatal.
Return the classloader from which we should try to load the logging adapter classes. <p> This method usually returns the context classloader. However if it is discovered that the classloader which loaded this class is a child of the context classloader <i>and</i> the allowFlawedContext option has been set then the classloader which loaded this class is returned instead. <p> The only time when the classloader which loaded this class is a descendant (rather than the same as or an ancestor of the context classloader) is when an app has created custom classloaders but failed to correctly set the context classloader. This is a bug in the calling application; however we provide the option for JCL to simply generate a warning rather than fail outright.
Given two related classloaders, return the one which is a child of the other. <p> and null if neither is an ancestor of the other.
Generates an internal diagnostic logging of the discovery failure and then throws a <code>LogConfigurationException</code> that wraps the passed <code>Throwable</code>. that could not be instantiated. Cannot be <code>null</code>. logAdapterClassName from when the exception occurred.
Report a problem loading the log adapter, then either return (if the situation is considered recoverable) or throw a LogConfigurationException. <p> There are two possible reasons why we successfully loaded the specified log adapter class then failed to cast it to a Log object: <ol> <li>the specific class just doesn't implement the Log interface <li> the specified class has bound to a Log class loaded by some other </ol> <p> Here we try to figure out which case has occurred so we can give the user some reasonable feedback. ie it is equivalent to badClass.getClassLoader(). does not implement Log correctly. should not be recovered from.
------------------------------------------------------------ Initializer
Construct a simple log with given name.
<p> Set logging level. </p>
<p> Get logging level. </p>
<p> Do the actual logging. This method assembles the message and then calls <code>write()</code> to cause it to be written.</p>
<p>Write the content of the message accumulated in the specified <code>StringBuffer</code> to the appropriate output destination.  The default implementation writes to <code>System.err</code>.</p> text to be logged
Is the given log level currently enabled?
Logs a message with <code>org.apache.commons.logging.impl.SimpleLog.LOG_LEVEL_DEBUG</code>.
Logs a message with <code>org.apache.commons.logging.impl.SimpleLog.LOG_LEVEL_TRACE</code>.
Logs a message with <code>org.apache.commons.logging.impl.SimpleLog.LOG_LEVEL_INFO</code>.
Logs a message with <code>org.apache.commons.logging.impl.SimpleLog.LOG_LEVEL_WARN</code>.
Logs a message with <code>org.apache.commons.logging.impl.SimpleLog.LOG_LEVEL_ERROR</code>.
Log a message with <code>org.apache.commons.logging.impl.SimpleLog.LOG_LEVEL_FATAL</code>.
Logs a message with <code>org.apache.commons.logging.impl.SimpleLog.LOG_LEVEL_FATAL</code>.
<p> Are debug messages currently enabled? </p> <p> This allows expensive operations such as <code>String</code> concatenation to be avoided when the message will be ignored by the logger. </p>
<p> Are error messages currently enabled? </p> <p> This allows expensive operations such as <code>String</code> concatenation to be avoided when the message will be ignored by the logger. </p>
<p> Are fatal messages currently enabled? </p> <p> This allows expensive operations such as <code>String</code> concatenation to be avoided when the message will be ignored by the logger. </p>
<p> Are info messages currently enabled? </p> <p> This allows expensive operations such as <code>String</code> concatenation to be avoided when the message will be ignored by the logger. </p>
<p> Are trace messages currently enabled? </p> <p> This allows expensive operations such as <code>String</code> concatenation to be avoided when the message will be ignored by the logger. </p>
<p> Are warn messages currently enabled? </p> <p> This allows expensive operations such as <code>String</code> concatenation to be avoided when the message will be ignored by the logger. </p>
Return the thread context class loader if available. Otherwise return null. The thread context class loader is available for JDK 1.2 or later, if certain security conditions are met. cannot be identified.
Purges all entries whose wrapped keys have been garbage collected.
Purges one entry whose wrapped key has been garbage collected.
Construct a new exception with <code>null</code> as its detail message.
Construct a new exception with the specified detail message.
Construct a new exception with the specified cause and a derived detail message.
Construct a new exception with the specified detail message and cause.
Return the underlying cause of this exception (if any).
<p>Construct (if necessary) and return a <code>LogFactory</code> instance, using the following ordered lookup procedure to determine the name of the implementation class to be loaded.</p> <ul> <li>The <code>org.apache.commons.logging.LogFactory</code> system <li>The JDK 1.3 Service Discovery mechanism</li> <li>Use the properties file <code>commons-logging.properties</code> <li>Fall back to a default implementation class </ul> <p><em>NOTE</em> - If the properties file method of identifying the <code>LogFactory</code> implementation class is utilized, all of the properties defined in this file will be set as configuration attributes on the corresponding <code>LogFactory</code> instance.</p> <p><em>NOTE</em> - In a multithreaded environment it is possible that two different instances will be returned for the same classloader environment. </p> available or cannot be instantiated.
Convenience method to return a named logger, without the application having to care about factories. instance cannot be returned
Convenience method to return a named logger, without the application having to care about factories. returned (the meaning of this name is only known to the underlying logging implementation that is being wrapped) instance cannot be returned
Release any internal references to previously created {@link LogFactory} instances that have been associated with the specified class loader (if any), after calling the instance method <code>release()</code> on each of them.
Release any internal references to previously created {@link LogFactory} instances, after calling the instance method <code>release()</code> on each of them.  This is useful in environments like servlet containers, which implement application reloading by throwing away a ClassLoader. Dangling references to objects in that class loader would prevent garbage collection.
Safely get access to the classloader for the specified class. <p> Theoretically, calling getClassLoader can throw a security exception, and so should be done under an AccessController in order to provide maximum flexibility. However in practice people don't appear to use security policies that forbid getClassLoader calls. So for the moment all code is written to call this method rather than Class.getClassLoader, so that we could put AccessController stuff in this method without any disruption later if we need to. <p> Even when using an AccessController, however, this method can still throw SecurityException. Commons-logging basically relies on the ability to access classloaders, ie a policy that forbids all classloader access will also prevent commons-logging from working: currently this method will throw an exception preventing the entire app from starting up. Maybe it would be good to detect this situation and just disable all commons-logging? Not high priority though - as stated above, security policies that prevent classloader access aren't common.
Calls LogFactory.directGetContextClassLoader under the control of an AccessController class. This means that java code running under a security manager that forbids access to ClassLoaders will still work if this class is given appropriate privileges, even when the caller doesn't have such privileges. Without using an AccessController, the the entire call stack must have the privilege before the call is allowed. or null if security doesn't allow it. attempting to get the context classloader. allow this class to access the context classloader.
Return the thread context class loader if available; otherwise return null. <p> Most/all code should call getContextClassLoader rather than calling this method directly. <p> The thread context class loader is available for JDK 1.2 or later, if certain security conditions are met. <p> Note that no internal logging is done within this method because this method is called every time LogFactory.getLogger() is called, and we don't want too much output generated here. cannot be identified. access to the context classloader from one of the classes in the current call stack.
Check cached factories (keyed by contextClassLoader) with the current thread. This allows separate LogFactory objects per component within a container, provided each component has a distinct context classloader set. This parameter may be null in JDK1.1, and in embedded systems where jcl-using code is placed in the bootclasspath. one has previously been created, or null if this is the first time we have seen this particular classloader.
Remember this factory, so later calls to LogFactory.getCachedFactory can return the previously created object (together with all its cached Log objects). this can be null under some circumstances; this is ok.
Return a new instance of the specified <code>LogFactory</code> implementation class, loaded by the specified class loader. If that fails, try the class loader used to load this (abstract) LogFactory. <p> <h2>ClassLoader conflicts</h2> Note that there can be problems if the specified ClassLoader is not the same as the classloader that loaded this class, ie when loading a concrete LogFactory subclass via a context classloader. <p> The problem is the same one that can occur when loading a concrete Log subclass via a context classloader. <p> The problem occurs when code running in the context classloader calls class X which was loaded via a parent classloader, and class X then calls LogFactory.getFactory (either directly or via LogFactory.getLog). Because class X was loaded via the parent, it binds to LogFactory loaded via the parent. When the code in this method finds some LogFactoryYYYY class in the child (context) classloader, and there also happens to be a LogFactory class defined in the child classloader, then LogFactoryYYYY will be bound to LogFactory@childloader. It cannot be cast to LogFactory@parentloader, ie this method cannot return the object as the desired type. Note that it doesn't matter if the LogFactory class in the child classloader is identical to the LogFactory class in the parent classloader, they are not compatible. <p> The solution taken here is to simply print out an error message when this occurs then throw an exception. The deployer of the application must ensure they remove all occurrences of the LogFactory class from the child classloader in order to resolve the issue. Note that they do not have to move the custom LogFactory subclass; that is ok as long as the only LogFactory class it can find to bind to is in the parent classloader. <p> implementation class manage logging for. cannot be created
Method provided for backwards compatibility; see newFactory version that takes 3 parameters. <p> This method would only ever be called in some rather odd situation. Note that this method is static, so overriding in a subclass doesn't have any effect unless this method is called from a method in that subclass. However this method only makes sense to use from the getFactory method, and as that is almost always invoked via LogFactory.getFactory, any custom definition in a subclass would be pointless. Only a class with a custom getFactory method, then invoked directly via CustomFactoryImpl.getFactory or similar would ever call this. Anyway, it's here just in case, though the "managed class loader" value output to the diagnostics will not report the correct value.
Implements the operations described in the javadoc for newFactory. expected to be either the TCCL or the classloader which loaded this class. Note that the classloader which loaded this class might be "null" (ie the bootloader) for embedded systems.
Determines whether the given class actually implements <code>LogFactory</code>. Diagnostic information is also logged. <p> <strong>Usage:</strong> to diagnose whether a classloader conflict is the cause of incompatibility. The test used is whether the class is assignable from the <code>LogFactory</code> class loaded by the class's classloader. <code>LogFactory</code> when that class is loaded via the same classloader that loaded the <code>logFactoryClass</code>.
Applets may run in an environment where accessing resources of a loader is a secure operation, but where the commons-logging library has explicitly been granted permission for that operation. In this case, we need to run the operation using an AccessController.
Given a filename, return an enumeration of URLs pointing to all the occurrences of that filename in the classpath. <p> This is just like ClassLoader.getResources except that the operation is done under an AccessController so that this method will succeed when this jarfile is privileged but the caller is not. This method must therefore remain private to avoid security issues. <p> If no instances are found, an Enumeration is returned whose hasMoreElements method returns false (ie an "empty" enumeration). If resources could not be listed for some reason, null is returned.
Given a URL that refers to a .properties file, load that file. This is done under an AccessController so that this method will succeed when this jarfile is privileged but the caller is not. This method must therefore remain private to avoid security issues. <p> Null is returned if the URL cannot be opened.
Locate a user-provided configuration file. <p> The classpath of the specified classLoader (usually the context classloader) is searched for properties files of the specified name. If none is found, null is returned. If more than one is found, then the file with the greatest value for its PRIORITY property is returned. If multiple files have the same PRIORITY value then the first in the classpath is returned. <p> This differs from the 1.0.x releases; those always use the first one found. However as the priority is a new field, this change is backwards compatible. <p> The purpose of the priority field is to allow a webserver administrator to override logging settings in all webapps by placing a commons-logging.properties file in a shared classpath location with a priority > 0; this overrides any commons-logging.properties files without priorities which are in the webapps. Webapps can also use explicit priorities to override a configuration file in the shared classpath if needed.
Determines whether the user wants internal diagnostic output. If so, returns an appropriate writer object. Users can enable diagnostic output by setting the system property named {@link #DIAGNOSTICS_DEST_PROPERTY} to a filename, or the special values STDOUT or STDERR.
Indicates true if the user has enabled internal logging. <p> By the way, sorry for the incorrect grammar, but calling this method areDiagnosticsEnabled just isn't java beans style.
Write the specified message to the internal logging destination. <p> Note that this method is private; concrete subclasses of this class should not call it because the diagnosticPrefix string this method puts in front of all its messages is LogFactory@...., while subclasses should put SomeSubClass@... <p> Subclasses should instead compute their own prefix, then call logRawDiagnostic. Note that calling isDiagnosticsEnabled is fine for subclasses. <p> Note that it is safe to call this method before initDiagnostics is called; any output will just be ignored (as isDiagnosticsEnabled will return false).
Write the specified message to the internal logging destination.
Generate useful diagnostics regarding the classloader tree for the specified class. <p> As an example, if the specified class was loaded via a webapp's classloader, then you may get the following output: <pre> Class com.acme.Foo was loaded via classloader 11111 ClassLoader tree: 11111 -> 22222 (SYSTEM) -> 33333 -> BOOT </pre> <p> This method returns immediately if isDiagnosticsEnabled() returns false. output.
Logs diagnostic messages about the given classloader and it's hierarchy. The prefix is prepended to the message and is intended to make it easier to understand the logs.
Returns a string that uniquely identifies the specified object, including its class. <p> The returned string is of form "classname@hashcode", ie is the same as the return value of the Object.toString() method, but works even when the specified object's class has overidden the toString method.
Set the log implementation/log implementation factory by the name of the class.  The given class must implement {@link Log}, and provide a constructor that takes a single {@link String} argument (containing the name of the log).
Set the log implementation/log implementation factory by class.  The given class must implement {@link Log}, and provide a constructor that takes a single {@link String} argument (containing the name of the log).
Get a <code>Log</code> instance by class name
Get a <code>Log</code> instance by class
Create a new {@link Log} implementation, based on the given <i>name</i>. <p> The specific {@link Log} implementation returned is determined by the value of the <tt>org.apache.commons.logging.log</tt> property. The value of <tt>org.apache.commons.logging.log</tt> may be set to the fully specified name of a class that implements the {@link Log} interface.  This class must also have a public constructor that takes a single {@link String} argument (containing the <i>name</i> of the {@link Log} to be constructed. <p> When <tt>org.apache.commons.logging.log</tt> is not set, or when no corresponding class can be found, this method will return a Log4JLogger if the log4j Logger class is available in the {@link LogSource}'s classpath, or a Jdk14Logger if we are on a JDK 1.4 or later system, or NoOpLog if neither of the above conditions is true.
Returns a {@link String} array containing the names of all logs known to me.
Constructor with all fields.
Construct from a ByteBuffer.  The chunk is assumed to start at offset 0 and continue to the current position.
Create a FAIL chunk.  The "handleChunk" methods can use this to return an error message when they are not able to process a chunk.
Utility function to wrap a ByteBuffer around a Chunk.
Utility function to copy a String out of a ByteBuffer. This is here because multiple chunk handlers can make use of it, and there's nowhere better to put it.
Utility function to copy a String into a ByteBuffer.
Convert a 4-character string to a 32-bit type.
Convert an integer type to a 4-character string.
Register an instance of the ChunkHandler class to handle a specific chunk type. Throws an exception if the type already has a handler registered.
Unregister the existing handler for the specified type. Returns the old handler.
The application must call here after it finishes registering handlers.
Send a chunk of data to the DDM server.  This takes the form of a JDWP "event", which does not elicit a response from the server. Use this for "unsolicited" chunks.
Called by the VM when the DDM server connects or disconnects.
This is called by the VM when a chunk arrives. For a DDM-aware application, we want to wait until the app has had a chance to register all of its chunk handlers.  Otherwise, we'll end up dropping early-arriving packets on the floor. For a non-DDM-aware application, we'll end up waiting here forever if DDMS happens to connect.  It's hard to know for sure that registration isn't going to happen, so we settle for a timeout.
This class is uninstantiable.
This method is intended to be "inlined" by the virtual machine (e.g., given special treatment as an intrinsic).
This class is uninstantiable.
Combine a list of strings in an <code>Object[]</code> into a single string.
Reflects specified annotation type and returns an array of member element definitions with default values.
Provides a new annotation instance.
New instances should not be created directly, use factory method {@link #createAnnotation(Class, AnnotationMember[]) createAnnotation()} instead.
Reads the object, obtains actual member definitions for the annotation type, and merges deserialized values with the new definitions.
Returns true if the specified object represents the same annotation instance. That is, if it implements the same annotation type and returns the same element values. <br>Note, actual underlying implementation mechanism does not matter - it may differ completely from this class. false otherwise.
Returns a hash code composed as a sum of hash codes of member elements, including elements with default values.
Provides detailed description of this annotation instance, including all member name-values pairs.
Processes a method invocation request to this annotation instance. Recognizes the methods declared in the {@link java.lang.annotation.Annotation java.lang.annotation.Annotation} interface, and member-defining methods of the implemented annotation type.
Creates a new element with specified name and value. Definition info will be provided later when this element becomes actual annotation member. as specified in the description of this class
Creates the completely defined element. as specified in the description of this class (return type of the defining method)
Fills in element's definition info and returns this.
Returns readable description of this annotation value.
Returns true if the specified object represents equal element (equivalent name-value pair). <br> A special case is the contained Throwable value; it is considered transcendent so no other element would be equal. false otherwise
Returns true if the contained value and a passed object are equal arrays, false otherwise. Appropriate overloaded method of Arrays.equals() is used for equality testing. false otherwise
Computes hash code of this element. The formula is as follows: <code> (name.hashCode() * 127) ^ value.hashCode() </code> <br>If value is an array, one of overloaded Arrays.hashCode() methods is used.
Throws contained error (if any) with a renewed stack trace.
Validates contained value against its member definition and if ok returns the value. Otherwise, if the value type mismatches definition or the value itself describes an error, throws appropriate exception. <br> Note, this method may return null if this element was constructed with such value.
Provides mutation-safe access to contained value. That is, caller is free to modify the returned value, it will not affect the contained data value.
Retrieves the singleton instance of this class.
Sets the singleton instance of this class.
Parses the generic signature of a class and creates the data structure representing the signature.
Parses the generic signature of a method and creates the data structure representing the signature.
Parses the generic signature of a constructor and creates the data structure representing the signature.
Parses the generic signature of a field and creates the data structure representing the signature.
PRE: symbol is the first char of the identifier. POST: symbol = the next symbol AFTER the identifier.
Returns our singleton instance, creating it if necessary.
Schedules a file for deletion.
Constructs an empty HashMap
Returns a collection view of the values
Returns a collection view of the mappings
Clears the map
Removes the mapping for the keys
Associates the specified value with the specified keys in this map
Returns true if this map contains a mapping for {@code key1} and {@code key2}.
Return the value by keys
Returns true if this map contains no key-value mappings
Returns the number of mappings
Creates new entry
Creates entries iterator
Creates values iterator
Removes entry
Constructs ASN.1 ANY type The constructor is provided for inheritance purposes when there is a need to create a custom ASN.1 ANY type. To get a default implementation it is recommended to use getInstance() method.
Returns ASN.1 ANY type default implementation The default implementation works with full encoding that is represented as raw byte array.
Tests provided identifier.
Extracts array of bytes that represents full encoding from BER input stream.
Constructs ASN.1 Bitstring type The constructor is provided for inheritance purposes when there is a need to create a custom ASN.1 Bitstring type. To get a default implementation it is recommended to use getInstance() method.
Returns ASN.1 Bitstring type default implementation The default implementation works with encoding that is represented as BitString object.
Extracts BitString object from BER input stream.
Constructs ASN.1 Boolean type The constructor is provided for inheritance purposes when there is a need to create a custom ASN.1 Boolean type. To get a default implementation it is recommended to use getInstance() method.
Returns ASN.1 Boolean type default implementation The default implementation works with encoding that is represented as Boolean object.
Extracts Boolean object from BER input stream.
Constructs ASN.1 choice type.
Tests whether one of choice alternatives has the same identifier or not.
Constructs ASN.1 Enumerated type The constructor is provided for inheritance purposes when there is a need to create a custom ASN.1 Enumerated type. To get a default implementation it is recommended to use getInstance() method.
Returns ASN.1 Enumerated type default implementation The default implementation works with encoding that is represented as byte array.
Extracts array of bytes from BER input stream.
Constructs explicitly tagged ASN.1 type with context-specific tag class and specified tag number.
Constructs explicitly tagged ASN.1 type.
Constructs ASN.1 GeneralizedTime type The constructor is provided for inheritance purposes when there is a need to create a custom ASN.1 GeneralizedTime type. To get a default implementation it is recommended to use getInstance() method.
Returns ASN.1 GeneralizedTime type default implementation The default implementation works with encoding that is represented as Date object.
Constructs implicitly tagged ASN.1 type with context-specific tag class and specified tag number.
Constructs ASN.1 Integer type The constructor is provided for inheritance purposes when there is a need to create a custom ASN.1 Integer type. To get a default implementation it is recommended to use getInstance() method.
Returns ASN.1 Integer type default implementation The default implementation works with encoding that is represented as byte array in two's-complement notation.
Converts decoded ASN.1 Integer to int value. If the object represents an integer value larger than 32 bits, the high bits will be lost.
Converts decoded ASN.1 Integer to a BigInteger.
Converts primitive int value to a form most suitable for encoding.
Constructs ASN.1 octet string type The constructor is provided for inheritance purposes when there is a need to create a custom ASN.1 octet string type. To get a default implementation it is recommended to use getInstance() method.
Returns ASN.1 octet string type default implementation The default implementation works with encoding that is represented as byte array.
Constructs ASN.1 Object Identifier type The constructor is provided for inheritance purposes when there is a need to create a custom ASN.1 Object Identifier type. To get a default implementation it is recommended to use getInstance() method.
Returns ASN.1 Object Identifier type default implementation The default implementation works with encoding that is represented as array of integers.
Extracts array of integers from BER input stream.
Returns ASN.1 Object Identifier type implementation This implementation works with encoding that is mapped to java.lang.String object.
TODO: what about defining them as separate classes? TODO: check decoded/encoded characters
Extracts String object from BER input stream.
Constructs a primitive, universal ASN.1 type.
Constructs an ASN.1 type.
Decodes ASN.1 type.
Constructs ASN.1 collection type.
Sets a collection component as optional
Sets a default value for a collection component. The component also became an optional component.
Provides an object's values to be encoded Derived classes should override this method to provide encoding for a selected class of objects. The default implementation throws RuntimeException.
Constructs ASN.1 UTCTime type The constructor is provided for inheritance purposes when there is a need to create a custom ASN.1 UTCTime type. To get a default implementation it is recommended to use getInstance() method.
Returns ASN.1 UTCTime type default implementation The default implementation works with encoding that is represented as Date object.
Constructs ASN1 collection type.
Provides an object's values to be encoded Derived classes should override this method to provide encoding for a selected class of objects.
Creates stream for decoding.
Creates stream for decoding. Allocates initial buffer of default size
Resets this stream to initial state.
Decodes next encoded type. Initializes tag, length, tagOffset and contentOffset variables
Returns the length of the encoding
Decodes ASN.1 bitstring type
Decodes ASN.1 Enumerated type
Decodes ASN.1 boolean type
Decodes ASN.1 GeneralizedTime type
Decodes ASN.1 UTCTime type
Decodes ASN.1 Integer type
Decodes ASN.1 Octetstring type
Decodes ASN.1 ObjectIdentifier type
Decodes ASN.1 Sequence type
Decodes ASN.1 SequenceOf type
Decodes ASN.1 Set type
Decodes ASN.1 SetOf type
Decodes ASN.1 String type
Returns encoded array. MUST be invoked after decoding corresponding ASN.1 notation
Returns internal buffer used for decoding
Returns length of the current content for decoding
Returns the current offset
Returns end offset for the current encoded type
Returns start offset for the current encoded type
Sets verify mode.
Reads the next encoded byte from the encoded input stream.
Reads the next encoded content from the encoded input stream. The method MUST be used for reading a primitive encoded content.
Reallocates the buffer in order to make it exactly the size of data it contains
Creates ObjectIdentifier(OID) from array of integers.
Creates ObjectIdentifier(OID) from string representation.
Validates ObjectIdentifier (OID).
Returns string representation of OID. Note: it is supposed that passed array of integers contains valid OID value, so no checks are performed.
Gets ObjectIdentifier (OID) from string representation. String representation is defined by the following syntax:
Returns whether the given string is a valid ObjectIdentifier (OID) representation. String representation is defined as for {@link #toIntArray}.
Gets ObjectIdentifier (OID) from string representation. String representation is defined by the following syntax: invalid or null and shouldThrow is false shouldThrow is true
Creates a Engine object
Finds the appropriate service implementation and returns an {@code SpiAndProvider} instance containing a reference to SPI and its {@code Provider}
Finds the appropriate service implementation and returns and instance of the class that implements corresponding Service Provider Interface.
Load statically registered providers and init Services Info
Returns registered providers
Returns registered providers as List
Returns the provider with the specified name
Inserts a provider at a specified position
Removes the provider
Adds information about provider services into HashMap.
Updates services hashtable for all registered providers
Returns true if services contain any provider information
Returns service description. Call refresh() before.
Returns the default SecureRandom service description. Call refresh() before.
Set flag needRefresh
Refresh services info
Returns ASN.1 encoded form of this CertificationRequest value.
Returns ASN.1 encoded form of this CertificationRequestInfo.
Returns ASN.1 encoded form of this authenticatedAttributes.
Returns the OCTET STRING.
Returns ASN.1 encoded form of this PrivateKeyInfo.
Creates the Cache object. encoded form will be used for hash computation
Creates the Cache object of size of 9. encoded form will be used for hash computation
Creates the Cache object of size of 9.
Returns the hash code for the array. This code is used to predetermine whether the object was built on the base of the similar encoding or not (by means of <code>contains(long)</code> method), to exactly determine whether object is contained in the cache or not, and to put the object in the cache. Note: parameter array should be of length not less than specified by <code>prefix_size</code> (default 28) of the encoding.
Checks if there are any object in the cache generated on the base of encoding with prefix corresponding to the specified hash code. of the encoding (retrieved by method <code>getHash(byte[]))</code> on the base of encoding with specified hash code, true otherwise.
Returns the object built on the base on the specified encoded form if it is contained in the cache and null otherwise. This method is computationally expensive and should be called only if the method <code>contains(long)</code> for the hash code returned true. (retrieved by method <code>getHash(byte[])</code>) there is no such correspondence.
Puts the object into the cache.
Returns the hash code built on the base of the tail of the encoded form of encoded form
Constructs the instance of the certificate factory provider.
Generates the X.509 certificate from the data in the stream. The data in the stream can be either in ASN.1 DER encoded X.509 certificate, or PEM (Base64 encoding bounded by <code>"-----BEGIN CERTIFICATE-----"</code> at the beginning and <code>"-----END CERTIFICATE-----"</code> at the end) representation of the former encoded form. Before the generation the encoded form is looked up in the cache. If the cache contains the certificate with requested encoded form it is returned from it, otherwise it is generated by ASN.1 decoder. method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
Method retrieves the PEM encoded data from the stream and returns its decoded representation. Method checks correctness of PEM boundaries. It supposes that the first '-' of the opening boundary has already been read from the stream. So first of all it checks that the leading bytes are equal to "-----BEGIN" boundary prefix. Than if boundary_suffix is not null, it checks that next bytes equal to boundary_suffix + new line char[s] ([CR]LF). If boundary_suffix parameter is null, method supposes free suffix format and skips any bytes until the new line.<br> After the opening boundary has been read and checked, the method read Base64 encoded data until closing PEM boundary is not reached.<br> Than it checks closing boundary - it should start with new line + "-----END" + boundary_suffix. If boundary_suffix is null, any characters are skipped until the new line.<br> After this any trailing new line characters are skipped from the stream, Base64 encoding is decoded and returned. boundary delimiter.<br> If it is null, that any character sequences are accepted. with expected or some I/O or decoding problems occur.
Reads the data of specified length from source and returns it as an array. null if the stream contains not enough data
Returns the Certificate object corresponding to the provided encoding. Resulting object is retrieved from the cache if it contains such correspondence and is constructed on the base of encoding and stored in the cache otherwise. (in the case of cache miss).
Returns the Certificate object corresponding to the encoding provided by the stream. Resulting object is retrieved from the cache if it contains such correspondence and is constructed on the base of encoding and stored in the cache otherwise. (in the case of cache miss).
Returns the CRL object corresponding to the provided encoding. Resulting object is retrieved from the cache if it contains such correspondence and is constructed on the base of encoding and stored in the cache otherwise. (in the case of cache miss).
Returns the CRL object corresponding to the encoding provided by the stream. Resulting object is retrieved from the cache if it contains such correspondence and is constructed on the base of encoding and stored in the cache otherwise. (in the case of cache miss).
Creates the mark supporting wrapper over the stream.
Reads the byte from the stream. If mark has been set up and was not invalidated byte is read from the underlying stream and saved into the buffer. If the current read position has been reset to the marked position and there are remaining bytes in the buffer, the byte is taken from it. In the other cases (if mark has been invalidated, or there are no buffered bytes) the byte is taken directly from the underlying stream and it is returned without saving to the buffer. method documentation for more info
Constructs the instance on the base of ASN.1 encoded form of X.509 certificate provided via stream parameter.
Constructs the instance on the base of existing Certificate object to be wrapped.
Constructs the instance on the base of ASN.1 encoded form of X.509 certificate provided via array of bytes.
method documentation for more information.
Creates an instance of X.509 Certification Path over the specified list of certificates. is not an instance of subclass of X509Certificate.
Internally used constructor. Creates an X.509 Certification Path over the specified list of certificates and their encoded form of specified type. this list of certificates had been built.
Generates certification path object on the base of PkiPath encoded form provided via input stream. the decoding.
Generates certification path object on the base of encoding provided via input stream. The format of provided encoded form is specified by parameter <code>encoding</code>. or some problems occurred during the decoding.
Generates certification path object on the base of PkiPath encoded form provided via array of bytes. the decoding.
Generates certification path object on the base of encoding provided via array of bytes. The format of provided encoded form is specified by parameter <code>encoding</code>. or some problems occurred during the decoding.
method documentation for more info
method documentation for more info
method documentation for more info
encoder for PKCS#7 SignedData it is assumed that only certificate field is important all other fields contain precalculated encodings: encodes X509CertPathImpl objects
Creates an instance on the base of existing <code>TBSCertList.RevokedCertificate</code> object and information about the issuer of revoked certificate. If specified issuer is null, it is supposed that issuer of the revoked certificate is the same as for involving CRL.
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
Creates X.509 CRL by wrapping of the specified CertificateList object.
Creates X.509 CRL on the base of ASN.1 DER encoded form of the CRL (CertificateList structure described in RFC 3280) provided via input stream.
Creates X.509 CRL on the base of ASN.1 DER encoded form of the CRL (CertificateList structure described in RFC 3280) provided via array of bytes.
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
Retrieves the crl entries (TBSCertList.RevokedCertificate objects) from the TBSCertList structure and converts them to the X509CRLEntryImpl objects
Searches for certificate in CRL. This method supports indirect CRLs: if CRL is indirect method takes into account serial number and issuer of the certificate, if CRL issued by CA (i.e. it is not indirect) search is done only by serial number of the specified certificate. method documentation for more info
Method searches for CRL entry with specified serial number. The method will search only certificate issued by CRL's issuer. method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
method documentation for more info
Creates a Provider and puts parameters
This method generates a DSAPrivateKey object from the provided key specification.
This method generates a DSAPublicKey object from the provided key specification.
This method returns a specification for the supplied key. The specification will be returned in the form of an object of the type specified by keySpec.
The method generates a DSAPublicKey object from the provided key.
Creates object from DSAPrivateKeySpec.
Creates object from PKCS8EncodedKeySpec.
Creates object from DSAPublicKeySpec.
Creates object from X509EncodedKeySpec.
The method is called by provider to determine if a device is available.
On platforms with "random" devices available, the method reads random bytes from the device.  <BR> In case of any runtime failure ProviderException gets thrown.
The method returns byte array of requested length provided service is available. ProviderException gets thrown otherwise.
The method generates a 160 bit hash value using a 512 bit message stored in first 16 words of int[] array argument and current hash value stored in five words, beginning OFFSET+1, of the array argument. Computation is done according to SHA-1 algorithm. The resulting hash value replaces the previous hash value in the array; original bits of the message are not preserved. No checks on argument supplied, that is, a calling method is responsible for such checks. In case of incorrect array passed to the method either NPE or IndexOutOfBoundException gets thrown by JVM.
The method appends new bytes to existing ones within limit of a frame of 64 bytes (16 words). Once a length of accumulated bytes reaches the limit the "computeHash(int[])" method is invoked on the array to compute updated hash, and the number of bytes in the frame is set to 0. Thus, after appending all bytes, the array contain only those bytes that were not used in computing final hash value yet. No checks on arguments passed to the method, that is, a calling method is responsible for such checks.
Creates object and sets implementation variables to their initial values
The method invokes the SHA1Impl's "updateHash(..)" method to update current seed frame and to compute new intermediate hash value if the frame is full. After that it computes a length of whole seed.
Changes current seed by supplementing a seed argument to the current seed, if this already set; the argument is used as first seed otherwise. <BR> The method overrides "engineSetSeed(byte[])" in class SecureRandomSpi.
Returns a required number of random bytes. <BR> The method overrides "engineGenerateSeed (int)" in class SecureRandomSpi. <BR>
Writes random bytes into an array supplied. Bits in a byte are from left to right. <BR> To generate random bytes, the "expansion of source bits" method is used, that is, the current seed with a 64-bit counter appended is used to compute new bits. The counter is incremented by 1 for each 20-byte output. <BR> The method overrides engineNextBytes in class SecureRandomSpi.
The solo constructor.
Deprecated method.
Initializes this signature object with PrivateKey object passed as argument to the method.
Initializes this signature object with PublicKey object passed as argument to the method.
Deprecated method.
Returns signature bytes as byte array containing ASN1 representation for two BigInteger objects which is SEQUENCE of two INTEGERS. Length of sequence varies from less than 46 to 48. Resets object to the state it was in when previous call to either "initSign" method was called.
Updates data to sign or to verify.
Verifies the signature bytes.
The constructor creates needed buffers and sets the engine at initial state
The method performs final actions and invokes the "computeHash(int[])" method. In case if there is no enough words in current frame after processing its data, extra frame is prepared and the "computeHash(int[])" method is invoked second time. <BR> After processing, the method resets engine's state
Returns a "deep" copy of this SHA1MDImpl object. <BR> The method overrides "clone()" in class Object. <BR>
Computes a message digest value. <BR> The method resets the engine. <BR> The method overrides "engineDigest()" in class MessageDigestSpi. <BR>
Computes message digest value. Upon return, the value is stored in "buf" buffer beginning "offset" byte. <BR> The method resets the engine. <BR> The method overrides "engineDigest(byte[],int,int) in class MessageDigestSpi.
Returns a message digest length. <BR> The method overrides "engineGetDigestLength()" in class MessageDigestSpi. <BR>
Resets the engine. <BR> The method overrides "engineReset()" in class MessageDigestSpi. <BR>
Supplements a byte to current message. <BR> The method overrides "engineUpdate(byte)" in class MessageDigestSpi. <BR>
Updates current message. <BR> The method overrides "engineUpdate(byte[],int,int)" in class MessageDigestSpi. <BR> The method silently returns if "len" <= 0.
Returns OID for algName
Returns algName for OID
Returns Algorithm name for given algorithm alias
Searches given provider for mappings like Alg.Alias.<service>.<OID-INTS-DOT-SEPARATED>=<alg-name> or Alg.Alias.<service>.OID.<OID-INTS-DOT-SEPARATED>=<alg-name> Puts mappings found into appropriate internal maps
Checks if parameter represents OID
Removes leading "OID." from oid String passed
Represents <code>array</code> as <code>String</code> for printing. Array length can be up to 32767
This method handle all the work with  PKCS7, ASN1 encoding, signature verifying, and certification path building. See also PKCS #7: Cryptographic Message Syntax Standard:
Gets OID.
Gets OID's name.
Gets OID's group.
Compares object with OID for equality.
Add "OID." to the beginning of string representation.
Overrides Object.toString()
Validates ObjectIdentifier (OID).
Returns hash code for array of integers
add from RFC2253 (includes RFC1779)
add attributes from RFC2459
for decoder only
Creates AttributeTypeAndValue with OID and AttributeValue. Parses OID string representation
Appends AttributeTypeAndValue string representation
Gets type of the AttributeTypeAndValue
X.501 AttributeTypeAndValue structure is defined as follows: AttributeTypeAndValue ::= SEQUENCE {
Returns known OID or null.
Adds known OID to pool. for static AttributeTypeAndValue initialization only
Returns hash for array of integers.
compares two AttributeTypeAndValues
compares two Object identifiers
Checks if the string is PrintableString (see X.680)
Escapes: 1) chars ",", "+", """, "\", "<", ">", ";" (RFC 2253) 2) chars "#", "=" (required by RFC 1779) 3) a space char at the beginning or end 4) according to the requirement to be RFC 1779 compatible:
Creates new <code>Name</code> instance from its DER encoding
Creates new <code>Name</code> instance
Returns <code>X500Principal</code> instance corresponding to this <code>Name</code> instance
Returns Relative Distinguished Name as <code>String</code> according the format requested
Returns Relative Distinguished Name as <code>String</code> according the format requested, format is int value
Gets encoded form of DN
Returns ASN.1 encoded form of this TimeStampReq.
Returns ASN.1 encoded form of this X.509 AccessDescription.
Custom AccessDescription DER encoder/decoder
Returns the value of algorithm field of the structure.
Returns the name of the algorithm corresponding to its OID. If there is no the such correspondence, algorithm OID is returned.
Returns the value of parameters field of the structure.
Returns ASN.1 encoded form of this X.509 AlgorithmIdentifier value.
Custom AlgorithmIdentifier DER encoder/decoder
Creates the extension object on the base of its encoded form. (Subject's or Issuer's)
Returns ASN.1 encoded form of this X.509 AlternativeName value.
Creates the extension object on the base of its encoded form.
Returns the encoded form of the object.
ASN.1 Encoder/Decoder.
Returns the value of tbsCertificate field of the structure.
Returns the value of signatureValue field of the structure.
Returns ASN.1 encoded form of this X.509 TBSCertificate value.
Creates an object on the base of its encoded form.
Returns the value of tbsCertList field of the structure.
Returns ASN.1 encoded form of this X.509 TBSCertList value.
Returns the values of policyInformation field of the structure.
Returns ASN.1 encoded form of this X.509 CertificatePolicies value.
ASN.1 DER X.509 CertificatePolicies encoder/decoder class.
Custom X.509 decoder.
Constructs the object on the base of its encoded form.
Returns the invalidity date.
Returns ASN.1 encoded form of this X.509 CRLNumber value.
Custom X.509 decoder.
Returns the next attribute type: (ALPHA 1*keychar) / oid
Returns a quoted attribute value: QUOTATION *( quotechar / pair ) QUOTATION
Returns a hex string attribute value: "#" hexstring
Returns a string attribute value: *( stringchar / pair ).
Returns an escaped char
Decodes a UTF-8 char.
Parses DN
Returns ASN.1 encoded form of this X.509 EDIPartyName value.
ASN.1 DER X.509 EDIPartyName encoder/decoder class.
Creates the extension object on the base of its encoded form.
Returns the list of string representation of OIDs corresponding to key purpose IDs.
Returns the value of extnID field of the structure.
Returns the value of critical field of the structure.
Returns the value of extnValue field of the structure.
Returns the raw (undecoded octet string) value of extnValue field of the structure.
Returns ASN.1 encoded form of this X.509 Extension value.
X.509 Extension encoder/decoder.
Returns the list of critical extensions.
Returns the list of critical extensions.
Makes the separated lists with oids of critical and non-critical extensions
Returns the values of extensions.
Returns the value of Key Usage extension (OID == 2.5.29.15). The ASN.1 definition of Key Usage Extension is: <pre> id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 } KeyUsage ::= BIT STRING { </pre> (as specified in RFC 3280) and null if there is no such extension or its value can not be decoded otherwise. Note, that the length of returned array can be greater than 9.
Returns the value of Extended Key Usage extension (OID == 2.5.29.37). The ASN.1 definition of Extended Key Usage Extension is: <pre> id-ce-extKeyUsage OBJECT IDENTIFIER ::= { id-ce 37 } ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId KeyPurposeId ::= OBJECT IDENTIFIER </pre> (as specified in RFC 3280) and null
Returns the value of Basic Constraints Extension (OID = 2.5.29.19). The ASN.1 definition of Basic Constraints Extension is: <pre> id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 } BasicConstraints ::= SEQUENCE { } </pre> (as specified in RFC 3280) and Integer.MAX_VALUE if does not.
Returns the value of Subject Alternative Name (OID = 2.5.29.17). The ASN.1 definition for Subject Alternative Name is: <pre> id-ce-subjectAltName OBJECT IDENTIFIER ::=  { id-ce 17 } SubjectAltName ::= GeneralNames </pre> (as specified in RFC 3280) (Integer (tag), Object (name value)) if extension presents, and null if does not.
Returns the value of Issuer Alternative Name Extension (OID = 2.5.29.18). The ASN.1 definition for Issuer Alternative Name is: <pre> id-ce-issuerAltName OBJECT IDENTIFIER ::=  { id-ce 18 } IssuerAltName ::= GeneralNames </pre> (as specified in RFC 3280) (Integer (tag), Object (name value)) if extension presents, and null if does not.
Returns the value of Certificate Issuer Extension (OID = 2.5.29.29). It is a CRL entry extension and contains the GeneralNames describing the issuer of revoked certificate. Its ASN.1 notation is as follows: <pre> id-ce-certificateIssuer   OBJECT IDENTIFIER ::= { id-ce 29 } certificateIssuer ::=     GeneralNames </pre> (as specified in RFC 3280)
Returns ASN.1 encoded form of this X.509 Extensions value.
Custom X.509 Extensions decoder.
Creates the object on the base of its encoded form.
Returns encoded form of the object.
Makes the GeneralName object from the tag type and corresponding well established string representation of the name value. The String representation of [7] iPAddress is such as: For IP v4, as specified in RFC 791, the address must contain exactly 4 byte component.  For IP v6, as specified in RFC 1883, the address must contain exactly 16 byte component. If GeneralName structure is used as a part of Name Constraints extension, to represent an address range the number of address component is doubled (to 8 and 32 bytes respectively). Note that the names: [0] otherName, [3] x400Address, [5] ediPartyName have no the string representation, so exception will be thrown. To make the GeneralName object with such names use another constructor.
Constructor for type [7] iPAddress. name is an array of bytes such as: For IP v4, as specified in RFC 791, the address must contain exactly 4 byte component.  For IP v6, as specified in RFC 1883, the address must contain exactly 16 byte component. If GeneralName structure is used as a part of Name Constraints extension, to represent an address range the number of address component is doubled (to 8 and 32 bytes respectively).
Constructs an object representing the value of GeneralName. to the name type (0-8),
Returns the tag of the name in the structure
The class of name object depends on the tag as follows: [0] otherName - OtherName object, [1] rfc822Name - String object, [2] dNSName - String object, [3] x400Address - ORAddress object, [4] directoryName - instance of Name object, [5] ediPartyName - EDIPartyName object, [6] uniformResourceIdentifier - String object, [7] iPAddress - array of bytes such as: For IP v4, as specified in RFC 791, the address must contain exactly 4 byte component.  For IP v6, as specified in RFC 1883, the address must contain exactly 16 byte component. If GeneralName structure is used as a part of Name Constraints extension, to represent an address range the number of address component is doubled (to 8 and 32 bytes respectively). [8] registeredID - String.
Checks if the other general name is acceptable by this object. The name is acceptable if it has the same type name and its name value is equal to name value of this object. Also the name is acceptable if this general name object is a part of name constraints and the specified name is satisfied the restriction provided by this object (for more detail see section 4.2.1.11 of rfc 3280). Note that for X400Address [3] check procedure is unclear so method just checks the equality of encoded forms. For otherName [0], ediPartyName [5], and registeredID [8] the check procedure if not defined by rfc 3280 and for names of these types this method also checks only for equality of encoded forms.
Gets a list representation of this GeneralName object. The first entry of the list is an Integer object representing the type of mane (0-8), and the second entry is a value of the name: string or ASN.1 DER encoded form depending on the type as follows: rfc822Name, dNSName, uniformResourceIdentifier names are returned as Strings, using the string formats for those types (rfc 3280) IP v4 address names are returned using dotted quad notation. IP v6 address names are returned in the form "p1:p2:...:p8", where p1-p8 are hexadecimal values representing the eight 16-bit pieces of the address. registeredID name are returned as Strings represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are returned in RFC 2253 string format. otherName, X400Address, ediPartyName returned as byte arrays containing the ASN.1 DER encoded form of the name.
Returns ASN.1 encoded form of this X.509 GeneralName value.
Checks the correctness of the string representation of DNS name. The correctness is checked as specified in RFC 1034 p. 10, and modified by RFC 1123 (section 2.1).
Checks the correctness of the string representation of URI name. The correctness is checked as pointed out in RFC 3280 p. 34.
Converts OID into array of ints.
Returns the bytes of the given IP address or masked IP address.
Returns the string form of the given IP address. Addresses of length 2x the canonical length are treated as a route/mask pair.
Returns the list of values.
Returns the collection of pairs: (Integer (tag), Object (name value))
Returns ASN.1 encoded form of this X.509 GeneralNames value.
ASN.1 DER X.509 GeneralNames encoder/decoder class.
Returns the value of base field of the structure.
Returns ASN.1 encoded form of this X.509 GeneralSubtree value.
ASN.1 DER X.509 GeneralSubtree encoder/decoder class.
Returns the list of values of subtrees.
ASN.1 DER X.509 GeneralSubtrees encoder/decoder class.
Returns ASN.1 encoded form of this X.509 InfoAccessSyntax.
ASN.1 DER X.509 AuthorityInfoAccessSyntax and SubjectInfoAccessSyntax encoder/decoder class.
Creates an object on the base of its encoded form.
Returns ASN.1 encoded form of the object.
Constructs the object on the base of its encoded form.
Returns the invalidity date.
Returns ASN.1 encoded form of this X.509 InvalidityDate value.
Constructs the object on the base of its distributionPoint and onlySomeReasons fields values.
Creates the extension object on the base of its encoded form.
Sets the value of onlyContainsUserCerts field of the structure.
Sets the value of onlyContainsCACerts field of the structure.
Sets the value of indirectCRL field of the structure.
Sets the value of onlyContainsAttributeCerts field of the structure.
Creates the extension object on the base of its encoded form.
Constructs <code>NameConstrains</code> object
Prepare the data structure to speed up the checking process.
Returns the value of certificate extension
Apply the name restrictions specified by this NameConstraints instance to the subject distinguished name and subject alternative names of specified X509Certificate. Restrictions apply only if specified name form is present in the certificate. The restrictions are applied according the RFC 3280 (see 4.2.1.11 Name Constraints), excepting that restrictions are applied and to CA certificates, and to certificates which issuer and subject names the same (i.e. method does not check if it CA's certificate or not, or if the names differ or not. This check if it is needed should be done by caller before calling this method).
Check if this list of names is acceptable according to this NameConstraints object.
X.509 NameConstraints encoder/decoder.
Returns ASN.1 encoded form of this X.509 ORAddress value.
ASN.1 DER X.509 ORAddress encoder/decoder class.
Returns the value of value field of the structure.
Returns ASN.1 encoded form of this X.509 OtherName value.
ASN.1 DER X.509 OtherName encoder/decoder class.
Returns ASN.1 encoded form of this X.509 PolicyConstraints value.
X.509 PolicyConstraints encoder/decoder.
Returns the value of policyIdentifier field of the structure.
Returns ASN.1 encoded form of this X.509 PolicyInformation value.
ASN.1 DER X.509 PolicyInformation encoder/decoder class.
Returns the value of notBefore field of the structure.
Returns the value of notAfter field of the structure.
Returns ASN.1 encoded form of this X.509 PrivateKeyUsagePeriod value.
ASN.1 DER X.509 PrivateKeyUsagePeriod encoder/decoder class.
Creates the extension object corresponding to the given flags.
Creates the object on the base of the value of key identifier.
Creates an object on the base of its encoded form.
Returns the value of algorithmIdentifier field of the structure.
Returns the value of subjectPublicKey field of the structure.
Returns ASN.1 encoded form of this X.509 SubjectPublicKeyInfo value.
Returns The PublicKey corresponding to this SubjectPublicKeyInfo instance.
Returns the value of version field of the structure.
Returns the value of serialNumber field of the structure.
Returns the value of signature field of the structure.
Returns the value of issuer field of the structure.
Returns the value of validity field of the structure.
Returns the value of subject field of the structure.
Returns the value of subjectPublicKeyInfo field of the structure.
Returns the value of issuerUniqueID field of the structure.
Returns the value of subjectUniqueID field of the structure.
Returns the value of extensions field of the structure.
X.509 TBSCertificate encoder/decoder.
Returns the value of Certificate Issuer Extension, if it is presented.
Constructs the object with associated ASN.1 encoding
Returns the value of thisUpdate field of the structure.
Returns the value of nextUpdate field of the structure.
Returns the value of revokedCertificates field of the structure.
Returns the value of crlExtensions field of the structure.
X.509 TBSCertList encoder/decoder.
Returns ASN.1 encoded form of this X.509 Validity value.
Splits this CDATA node into parts that do not contain a "]]>" sequence. Any newly created nodes will be inserted before this node.
Returns true if this CDATA section contains the illegal character sequence "]]>". Such nodes must be {@link #split} before they are serialized.
Replaces this node with a semantically equivalent text node. This node will be removed from the DOM tree and the new node inserted in its place.
Appends this node's text content to the given builder.
Returns true if this comment contains the illegal character sequence "--". Such nodes may not be serialized.
Returns a shallow copy of the given node. If the node is an element node, its attributes are always copied.
Returns a copy of the given node or subtree with this document as its owner.
Detaches the node from its parent (if any) and changes its document to this document. The node's subtree and attributes will remain attached, but their document will be changed to this document.
Recursively change the document of {@code node} without also changing its parent node. Only adoptNode() should invoke this method, otherwise nodes will be left in an inconsistent state.
Document elements may have at most one root element and at most one DTD element.
Returns a map with the user data objects attached to the specified node. This map is readable and writable.
Returns a map with the user data objects attached to the specified node. The returned map may be read-only.
Calls {@link UserDataHandler#handle} on each of the source node's value/handler pairs. <p>If the source node comes from another DOM implementation, user data handlers will <strong>not</strong> be notified. The DOM API provides no mechanism to inspect a foreign node's user data.
Returns true if all of the characters in the text are permitted for use in XML documents.
Requests the singleton instance of the class. Creates it first, if necessary.
This implementation walks the entire document looking for an element with the given ID attribute. We should consider adding an index to speed navigation of large documents.
Inserts {@code newChild} at {@code index}. If it is already child of another node, it is removed from there.
Removes {@code oldChild} and adds {@code newChild} in its place. This is not atomic.
Returns true if {@code pattern} equals either "*" or {@code s}. Pattern may be {@code null}.
Validates the element or attribute namespace prefix on this node.
Sets {@code node} to be namespace-aware and assigns its namespace URI and qualified name.
Sets {@code node} to be not namespace-aware and assigns its name.
Returns the sanitized input if it is a URI, or {@code null} otherwise.
Returns the element whose namespace definitions apply to this node. Use this element when mapping prefixes to URIs and vice versa.
Returns the nearest ancestor element that contains this node.
Returns true if the given prefix is mapped to the given URI on this element. Since child elements can redefine prefixes, this check is necessary: {@code </bar> </foo>}
Returns a list of objects such that two nodes are equal if their lists are equal. Be careful: the lists may contain NamedNodeMaps and Nodes, neither of which override Object.equals(). Such values must be compared manually.
Returns the first text or CDATA node in the current sequence of text and CDATA nodes.
Returns the next sibling node if it exists and it is text or CDATA. Otherwise returns null.
Tries to remove this node using itself and the previous node as context. If this node's text is empty, this node is removed and null is returned. If the previous node exists and is a text node, this node's text will be appended to that node's text and this node will be removed. <p>Although this method alters the structure of the DOM tree, it does not alter the document's semantics.
adding a new field? don't forget to update reset().
Implements the whole parsing of the XML document. The XML pull parser is actually more of a tokenizer, and we are doing a classical recursive descent parsing (the method invokes itself for XML elements). Our approach to parsing does accept some illegal documents (more than one root element, for example). The assumption is that the DOM implementation throws the proper exceptions in these cases.
Controls whether this DocumentBuilder ignores comments.
Controls whether this DocumentBuilder ignores element content whitespace.
Controls whether this DocumentBuilder is namespace-aware.
Returns the replacement text or null if {@code entity} isn't predefined.
Constructs a new parser with the specified encoding.
Used by {@link EntityParser}.
Called at the start of an element. disabled disabled a separate pointer so we can detach it from the parser instance
Handles an external entity.
Picks an encoding for an external entity. Defaults to UTF-8.
Parses the the external entity provided by the input source.
Appends part of an XML document. This parser will parse the given XML to the extent possible and dispatch to the appropriate methods.
Parses an XML Document from the given reader.
Parses XML from the given Reader.
Parses XML from the given input stream.
Indicate that we're finished parsing.
Gets the current line number within the XML file.
Gets the current column number within the XML file.
Clones the current attributes so they can be used outside of startElement().
Constructs a Java wrapper for native attributes. length is 0.
Opens an InputStream for the given URL.
Returns the current lexical handler.
Registers a lexical event handler. Supports neither {@link LexicalHandler#startEntity(String)} nor {@link LexicalHandler#endEntity(String)}. <p>If the application does not register a lexical handler, all lexical events reported by the SAX parser will be silently ignored.</p> <p>Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately.</p>
Returns true if this SAX parser processes namespaces.
Enables or disables namespace processing. Set to true by default. If you enable namespace processing, the parser will invoke {@link ContentHandler#startPrefixMapping(String, String)} and {@link ContentHandler#endPrefixMapping(String)}, and it will filter out namespace declarations from element attributes.
Constructs a new session context.
Returns the collection of sessions ordered from oldest to newest
Makes sure cache size is < maximumSize.
Converts the given session to bytes.
Creates a session from the given bytes.
Constructs the instance.
Returns the reason of alert. This reason should be rethrown after alert processing.
Returns alert's description code.
Sets up the record protocol to be used by this allert protocol.
Reports an alert to be sent/received by transport. This method is usually called during processing of the income TSL record: if it contains alert message from another peer, or if warning alert occured during the processing of the message and this warning should be sent to another peer.
Returns the description code of alert or -100 if there is no alert.
Resets the protocol to be in "no alert" state. This method shoud be called after processing of the reported alert.
Checks if any alert has occured.
Checks if occured alert is fatal alert.
Returns the string representation of occured alert. If no alert has occured null is returned.
Returns the record with reported alert message. The returned array of bytes is ready to be sent to another peer. Note, that this method does not automatically set the state of alert protocol in "no alert" state, so after wrapping the method setProcessed should be called.
Shutdown the protocol. It will be impossible to use the instance after the calling of this method.
Creates inbound message
Creates outbound message
Creates outbound message
Creates inbound message
Returns requested certificate types as array of strings
Creates outbound message
Creates inbound message
Returns CipherSuite by name
Returns CipherSuite based on TLS CipherSuite code
Returns CipherSuite based on V2CipherSpec code as described in TLS 1.0 spec., E. Backward Compatibility With SSL
Creates CipherSuite
Returns true if cipher suite is anonymous
Returns array of supported CipherSuites
Returns array of supported cipher suites names
Returns cipher suite name
Returns cipher suite code as byte array
Returns cipher algorithm name
Returns cipher block size
Returns MAC algorithm name
Returns hash algorithm name
Returns hash size
Indicates whether this cipher suite is exportable
Returns key type constant suitable for calling X509KeyManager.chooseServerAlias or X509ExtendedKeyManager.chooseEngineServerAlias.
Similar to getServerKeyType, but returns value given TLS ClientCertificateType byte values from a CertificateRequest message for use with X509KeyManager.chooseClientAlias or X509ExtendedKeyManager.chooseEngineClientAlias.
Returns auth type constant suitable for calling X509TrustManager.checkServerTrusted.
Creates Client Handshake Implementation
Starts renegotiation on a new session
Starts/resumes session
Processes ServerHelloDone: makes verification of the server messages; sends client messages, computers masterSecret, sends ChangeCipherSpec
Verifies certificate path
Find session to resume in client session context
Creates outbound message
Creates inbound message
Parse V2ClientHello
Returns client random
Creates outbound message
Creates empty message
Creates inbound message
Returns true if the message is empty (in case of implicit DH Yc)
Finds a cached session for the given host name and port.
Returns the minimal possible size of the Generic[Stream|Generic]Cipher structure under this connection state.
Returns the size of the Generic[Stream|Generic]Cipher structure corresponding to the content data of specified size.
Returns the minimal upper bound of the content size enclosed into the Generic[Stream|Generic]Cipher structure of specified size. For stream ciphers the returned value will be exact value.
Returns the number of bytes of padding required to round the content up to the required block size. Assumes power of two block size.
Creates the GenericStreamCipher or GenericBlockCipher data structure for specified data of specified type. data to be encrypted under the current connection state.
Retrieves the fragment of the Plaintext structure of the specified type from the provided data. data to be encrypted under the current connection state.
Increments the sequence number.
Shutdownes the protocol. It will be impossiblke to use the instance after the calling of this method.
Creates the instance of SSL v3 Connection State. All of the security parameters are provided by session object. all of the security parameters established by handshake protocol. The key calculation for the state is done according to the SSL v3 Protocol specification.
Creates the instance of TLS v1 Connection State. All of the security parameters are provided by session object. all of the security parameters established by handshake protocol. The key calculation for the state is done according to the TLS v 1.0 Protocol specification.
DefaultSSLContextImpl delegates the work to the super class since there is no way to put a synchronized around both the call to super and the rest of this constructor to guarantee that we don't have races in creating the state shared between all default SSLContexts.
TODO javax.net.ssl.keyStoreProvider system property
TODO javax.net.ssl.trustStoreProvider system property
Returns prime bytes
Create Signature type
Initiate Signature type by private key
Initiate Signature type by certificate
Update Signature hash
Sets MD5 hash
Sets SHA hash
Sign hash
Verifies the signature data.
Constructs a new cache backed by the given directory.
Creates a new access-ordered linked hash map.
Gets the file name for the given host and port.
Deletes old files if necessary.
Lazily updates accessOrder to know about all files as opposed to just the files accessed since this process started.
Returns a cache backed by the given directory. Creates the directory (including parent directories) if necessary. This cache should have exclusive access to the given directory. creating the directories fails
For testing.
Creates outbound message
Creates inbound message
Returns verify data
Removes the data from the marked position to the current read position. The method is usefull when it is needed to delete one message from the internal buffer.
Appends the income data to be read by handshake protocol. The attempts to overflow the buffer by means of this methods seem to be futile because of: 1. The SSL protocol specifies the maximum size of the record and record protocol does not pass huge messages. p 6.2) 2. After each call of this method, handshake protocol should start (and starts) the operations on received data and recognize the fake data if such was provided (to check the size of certificate for example).
checks if the data can be written in the buffer
Writes an opaque value
Writes Uint8 value
Writes Uint16 value
Writes Uint24 value
Writes Uint32 value
Writes Uint64 value
writes vector of opaque values
------------------- Retrieve the written bytes ----------------------
returns the chunk of stored data with the length no more than specified.
Returns the MD5 digest of the data passed throught the stream
Returns the SHA-1 digest of the data passed throught the stream
Returns the MD5 digest of the data passed throught the stream except last message
Returns the SHA-1 digest of the data passed throught the stream except last message
Returns all the data passed throught the stream
Creates HandshakeProtocol instance
Sets SSL Record Protocol
Stops the current session renegotiation process. Such functionality is needed when it is session renegotiation process and no_renegotiation alert message is received from another peer.
Returns handshake status
Returns pending session
Proceses outbound handshake messages
Sends fatal alert, breaks execution
Sends fatal alert, breaks execution
Computers reference TLS verify_data that is used to verify finished message
Computer TLS verify_data
Computer reference SSLv3 verify_data that is used to verify finished message
Computer SSLv3 verify_data
Verifies finished data
Sends fatal alert "UNEXPECTED MESSAGE"
Writes message to HandshakeIODataStream
Computers master secret
Returns a delegated task.
Clears previously sent and received handshake messages
Returns RSA key length
Shuts down the protocol. It will be impossible to use the instance after calling this method.
Creates inbound message
Creates Key manager
Returns message length
Sends fatal alert
--- X509_NAME -----------------------------------------------------------
Creates a new OpenSSLMessageDigest instance for the given algorithm name.
This method enables the compression methods listed by getSupportedCompressionMethods().
Check if any of the enabled cipher suites has a chance to work. Not 100% accurate, just a useful diagnostic that the RI does.
Class constructor creates an SSL session context given the appropriate SSL parameters.
Constructs a session from a byte[] containing DER data. This allows loading the saved session.
Gets the identifier of the actual SSL session
Reset the id field to the current value found in the native SSL_SESSION. It can change during the lifetime of the session because while a session is created during initial handshake, with handshake_cutthrough, the SSL_do_handshake may return before we have read the session ticket from the server side and therefore have computed no id based on the SHA of the ticket.
Get the session object in DER format. This allows saving the session data or sharing it with other processes.
Gets the creation time of the SSL session.
Returns the last time this concrete SSL session was accessed. Accessing here is to mean that a new connection with the same SSL context data was established.
Returns the largest buffer size for the application's data bound to this concrete SSL session.
Returns the largest SSL/TLS packet size one can expect for this concrete SSL session.
Returns the principal (subject) of this concrete SSL session used in the handshaking phase of the connection.
Returns the certificate(s) of the principal (subject) of this concrete SSL session used in the handshaking phase of the connection. The OpenSSL native method supports only RSA certificates.
Returns the certificate(s) of the peer in this SSL session used in the handshaking phase of the connection. Please notice hat this method is superseded by <code>getPeerCertificates()</code>.
Provide a value to initialize the volatile peerCertificateChain field based on the native SSL_SESSION
Return the identity of the peer in this SSL session determined via certificate(s).
Throw SSLPeerUnverifiedException on null or empty peerCertificates array
The identity of the principal that was used by the peer during the SSL handshake phase is returned by this method.
The peer's host name used in this SSL session is returned. It is the host name of the client for the server; and that of the server for the client. It is not a reliable way to get a fully qualified host name: it is mainly used internally to implement links for a temporary cache of SSL sessions.
Returns the peer's port number for the actual SSL session. It is the port number of the client for the server; and that of the server for the client. It is not a reliable way to get a peer's port number: it is mainly used internally to implement links for a temporary cache of SSL sessions.
Returns a string identifier of the crypto tools used in the actual SSL session. For example AES_256_WITH_MD5.
Returns the standard version name of the SSL protocol used in all connections pertaining to this SSL session.
Returns the compression method name used in all connections pertaining to this SSL session.
Returns the context to which the actual SSL session is bound. A SSL context consists of (1) a possible delegate, (2) a provider and (3) a protocol. unavailable.
Returns a boolean flag signaling whether a SSL session is valid and available for resuming or joining or not.
It invalidates a SSL session forbidding any resumption.
Returns the object which is bound to the the input parameter name. This name is a sort of link to the data of the SSL session's application layer, if any exists. The search for this link is monitored, as a matter of security, by the full machinery of the <code>AccessController</code> class.
Returns an array with the names (sort of links) of all the data objects of the application layer bound into the SSL session. The search for this link is monitored, as a matter of security, by the full machinery of the <code>AccessController</code> class.
A link (name) with the specified value object of the SSL session's application layer data is created or replaced. If the new (or existing) value object implements the <code>SSLSessionBindingListener</code> interface, that object will be notified in due course. These links-to -data bounds are monitored, as a matter of security, by the full machinery of the <code>AccessController</code> class.
Removes a link (name) with the specified value object of the SSL session's application layer data. <p>If the value object implements the <code>SSLSessionBindingListener</code> interface, the object will receive a <code>valueUnbound</code> notification. <p>These links-to -data bounds are monitored, as a matter of security, by the full machinery of the <code>AccessController</code> class.
Creates a new OpenSSLSignature instance for the given algorithm name.
Creates a new OpenSSLSignature instance for the given algorithm name.
Create an SSL socket that wraps another socket. Invoked by OpenSSLSocketImplWrapper constructor.
Initialize the SSL socket and set the certificates for the future handshaking.
Gets the suitable session reference from the session cache container.
Perform the handshake
Return a possibly null array of X509Certificates given the possibly null array of DER encoded bytes.
The names of the compression methods that may be used on this SSL connection.
The names of the compression methods versions that are in use on this SSL connection.
Enables compression methods listed by getSupportedCompressionMethods().
This method enables session ticket support.
This method enables Server Name Indication
Set the handshake timeout on this socket.  This timeout is specified in milliseconds and will be used only during the handshake process.
Computes the value of SSLv3 pseudo random function.
Computes the value of TLS pseudo random function.
Returns true if protocol version is supported
Returns ProtocolVersion
Returns true if provider supports protocol version
Returns ProtocolVersion
Highest protocol version supported by provider implementation
Creates Server Handshake Implementation
Processes Client Hello message. Server responds to client hello message with server hello and (if necessary) server certificate, server key exchange, certificate request, and server hello done messages.
find sesssion in the session hash
find appropriate cipher_suite in the client suites
Creates outbound message
Creates inbound message
Returns server random
Creates inbound message
Creates outbound message
Remove first byte if 0. Needed because BigInteger.toByteArray() sometimes returns a zero prefix.
Creates inbound message
Returns RSAPublicKey generated using ServerRSAParams (rsa_modulus and rsa_exponent).
Sets the buffer as a data source
Returns the number of consumed bytes.
Constuctor for the DefaultSSLContextImpl. public SSLContextImpl() constructor.
Stores received data. The source data is not cloned, just the array reference is remembered into the buffer field.
Places the data from the buffer into the array of destination ByteBuffer objects.
Shutdownes the engine and makes all cleanup work.
Reads and returns uint16 value.
Reads and returns uint24 value.
Reads and returns uint32 value.
Reads and returns uint64 value.
Returns the vector of opaque values of specified length;
Initializes the parameters. Naturally this constructor is used in SSLContextImpl.engineInit method which directly passes its parameters. In other words this constructor holds all the functionality provided by SSLContext.init method. See {@link javax.net.ssl.SSLContext#init(KeyManager[],TrustManager[], SecureRandom)} for more information
Sets the set of available cipher suites for use in SSL connection.
Sets the set of available protocols for use in SSL connection.
Tunes the peer holding this parameters to work in client mode.
Returns the value indicating if the parameters configured to work in client mode.
Tunes the peer holding this parameters to require client authentication
Returns the value indicating if the peer with this parameters tuned to require client authentication
Tunes the peer holding this parameters to request client authentication
Returns the value indicating if the peer with this parameters tuned to request client authentication
Allows/disallows the peer holding this parameters to create new SSL session
Returns the value indicating if the peer with this parameters allowed to cteate new SSL session
Gets the default trust manager. TODO: Move this to a published API under dalvik.system.
Creates an instance of record protocol and tunes up the client protocols to use ut.
Returns the session obtained during the handshake negotiation. If the handshake process was not completed, method returns null.
Returns the minimum possible length of the SSL record.
Returns the record length for the specified incoming data length. If actual resulting record length is greater than MAX_CIPHERED_DATA_LENGTH, MAX_CIPHERED_DATA_LENGTH is returned.
Returns the upper bound of length of data containing in the record with specified length. If the provided record_size is greater or equal to MAX_CIPHERED_DATA_LENGTH the returned value will be MAX_DATA_LENGTH counted as for data with MAX_CIPHERED_DATA_LENGTH length.
Depending on the Connection State (Session) encrypts and compress the provided data, and packs it into TLSCiphertext structure.
Set the ssl session to be used after sending the changeCipherSpec message
Returns the change cipher spec message to be sent to another peer. The pending connection state will be built on the base of provided session object The calling of this method triggers pending write connection state to be active.
Retrieves the fragment field of TLSCiphertext, and than depending on the established Connection State decrypts and decompresses it. The following structure is expected on the input at the moment of the call: struct { } TLSCiphertext; (as specified by RFC 2246, TLS v1 Protocol specification) In addition this method can recognize SSLv2 hello message which are often used to establish the SSL/TLS session.
Passes the alert information to the alert protocol.
Sets up the SSL version used in this connection. This method is calling from the handshake protocol after it becomes known witch protocol version will be used.
Shuts down the protocol. It will be impossible to use the instance after the calling of this method.
Constructor for more information.
Constructor method documentation for more information.
Initialize the SSL socket.
Initialize the transport data streams.
Closes the transport data streams.
This method is called by SSLSocketInputStream class when client application tries to read application data from the stream, but there is no data in its underlying buffer.
This method is called by SSLSocketOutputStream when a client application tries to send the data over ssl protocol.
Performs handshake process over this connection. The handshake process is directed by the handshake status code provided by handshake protocol. If this status is NEED_WRAP, method retrieves handshake message from handshake protocol and sends it to another peer. If this status is NEED_UNWRAP, method receives and processes handshake message from another peer. Each of this stages (wrap/unwrap) change the state of handshake protocol and this process is performed until handshake status is FINISHED. After handshake process is finished handshake completed event are sent to the registered listeners. For more information about the handshake process see
Process received alert message
Sends fatal alert message and throws exception
Creates the application data input stream for specified socket. to client applications.
Tells to the stream that the end of the income data has been reached.
Appends the data to the stream. This method could be implemented in the outer class itself, but it could be insecure.
Returns a File for where the certificate is found if it exists or where it should be installed if it does not exist. The caller can disambiguate these cases by calling {@code File.exists()} on the result.
This non-{@code KeyStoreSpi} public interface is used by {@code TrustManagerImpl} to locate a CA certificate with the same name and public key as the provided {@code X509Certificate}. We match on the name and public key and not the entire certificate since a CA may be reissued with the same name and PublicKey but with other differences (for example when switching signature from md2WithRSAEncryption to SHA1withRSA)
This non-{@code KeyStoreSpi} public interface is used by {@code TrustManagerImpl} to locate the CA certificate that signed the provided {@code X509Certificate}.
This non-{@code KeyStoreSpi} public interface is used by the {@code KeyChainService} to install new CA certificates. It silently ignores the certificate if it already exists in the store.
This could be considered the implementation of {@code TrustedCertificateKeyStoreSpi.engineDeleteEntry} but we consider {@code TrustedCertificateKeyStoreSpi} to be read only. Instead, this is used by the {@code KeyChainService} to delete CA certificates.
Creates X509TrustManager based on a keystore
Clean up the certificate chain, returning a cleaned up chain, which may be a new array instance if elements were removed. Theoretically, we shouldn't have to do this, but various web servers in practice are mis-configured to have out-of-order certificates, expired self-issued root certificate, or CAs with unsupported signature algorithms such as md2WithRSAEncryption. This also handles removing old certs after bridge CA certs.
Check the trustedCertificateIndex for the cert to see if it is already trusted and failing that check the KeyStore if it is available.
Obtains the charset for encoding {@link org.apache.http.auth.Credentials}. If not configured, {@link HTTP#DEFAULT_PROTOCOL_CHARSET HTTP.DEFAULT_PROTOCOL_CHARSET} is used instead.
Sets the charset to be used when encoding {@link org.apache.http.auth.Credentials}.
Creates a new AuthenticationException with a <tt>null</tt> detail message.
Creates a new AuthenticationException with the specified message.
Creates a new AuthenticationException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Registers a {@link AuthSchemeFactory} with  the given identifier. If a factory with the given name already exists it will be overridden. This name is the same one used to retrieve the {@link AuthScheme authentication scheme} from {@link #getAuthScheme}. <p> Please note that custom authentication preferences, if used, need to be updated accordingly for the new {@link AuthScheme authentication scheme} to take effect. </p>
Unregisters the class implementing an {@link AuthScheme authentication scheme} with the given name.
Gets the {@link AuthScheme authentication scheme} with the given name. scheme.
Obtains a list containing names of all registered {@link AuthScheme authentication schemes} in their default order.
Populates the internal collection of registered {@link AuthScheme authentication schemes} with the content of the map passed as a parameter.
Creates a new credentials scope for the given <tt>host</tt>, <tt>port</tt>, <tt>realm</tt>, and <tt>authentication scheme</tt>. to <tt>null</tt> if credenticals are applicable to any host. to negative value if credenticals are applicable to any port. to <tt>null</tt> if credenticals are applicable to any realm. May be set to <tt>null</tt> if credenticals are applicable to any authentication scheme.
Creates a new credentials scope for the given <tt>host</tt>, <tt>port</tt>, <tt>realm</tt>, and any authentication scheme. to <tt>null</tt> if credenticals are applicable to any host. to negative value if credenticals are applicable to any port. to <tt>null</tt> if credenticals are applicable to any realm.
Creates a new credentials scope for the given <tt>host</tt>, <tt>port</tt>, any realm name, and any authentication scheme. to <tt>null</tt> if credenticals are applicable to any host. to negative value if credenticals are applicable to any port.
Creates a copy of the given credentials scope.
Tests if the authentication scopes match.
Default constructor.
Invalidates the authentication state by resetting its parameters.
Assigns the given {@link AuthScheme authentication scheme}.
Returns the {@link AuthScheme authentication scheme}.
Returns user {@link Credentials} selected for authentication if available
Sets user {@link Credentials} to be used for authentication
Returns actual {@link AuthScope} if available
Sets actual {@link AuthScope}.
Creates a new InvalidCredentialsException with a <tt>null</tt> detail message.
Creates a new InvalidCredentialsException with the specified message.
Creates a new InvalidCredentialsException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Creates a new MalformedChallengeException with a <tt>null</tt> detail message.
Creates a new MalformedChallengeException with the specified message.
Creates a new MalformedChallengeException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
The constructor with the fully qualified username and password combined string argument.
Constructor. For example: "user" is correct whereas "DOMAIN\\user" is not. Essentially, the computer name for this machine.
Retrieves the name to authenticate with.
Retrieves the workstation name of the computer originating the request.
The constructor with the username and password combined string argument.
The constructor with the username and password arguments.
Constructs a new {@link UrlEncodedFormEntity} with the list of parameters in the specified encoding.
Constructs a new {@link UrlEncodedFormEntity} with the list of parameters with the default encoding of {@link HTTP#DEFAULT_CONTENT_CHARSET}
BEGIN android-added Don't log the cookie's value; that's potentially sensitive information.
Constructs a {@link URI} using all the parameters. This should be used instead of {@link URI#URI(String, String, String, int, String, String, String)} or any of the other URI multi-argument URI constructors. See <a for more information.
A convenience method for creating a new {@link URI} whose scheme, host and port are taken from the target host, but whose path, query and fragment are taken from the existing URI. The fragment is only used if dropFragment is false.
A convenience method for {@link URIUtils#rewriteURI(URI, HttpHost, boolean)} that always keeps the fragment.
Resolves a URI reference against a base URI. Work-around for bug in
Returns a list of {@link NameValuePair NameValuePairs} as built from the URI's query portion. For example, a URI of NameValuePairs, one for a=1, one for b=2, and one for c=3. <p> This is typically useful while parsing an HTTP PUT.
Returns a list of {@link NameValuePair NameValuePairs} as parsed from an {@link HttpEntity}. The encoding is taken from the entity's Content-Encoding header. <p> This is typically used while parsing an HTTP POST.
Returns true if the entity's Content-Type header is <code>application/x-www-form-urlencoded</code>.
Adds all parameters within the Scanner to the list of <code>parameters</code>, as encoded by <code>encoding</code>. For example, a scanner containing the string <code>a=1&b=2&c=3</code> would add the {@link NameValuePair NameValuePairs} a=1, b=2, and c=3 to the list of parameters.
Returns a String that is suitable for use as an <code>application/x-www-form-urlencoded</code> list of parameters in an HTTP PUT or HTTP POST.
Creates a new CircularRedirectException with a <tt>null</tt> detail message.
Creates a new CircularRedirectException with the specified detail message.
Creates a new CircularRedirectException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Creates a new NonRepeatableEntityException with a <tt>null</tt> detail message.
Creates a new NonRepeatableEntityException with the specified detail message.
Creates a new RedirectException with a <tt>null</tt> detail message.
Creates a new RedirectException with the specified detail message.
Creates a new RedirectException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Returns the timeout in milliseconds used when retrieving a {@link org.apache.http.conn.ManagedClientConnection} from the {@link org.apache.http.conn.ClientConnectionManager}.
Sets the timeout in milliseconds used when retrieving a {@link org.apache.http.conn.ManagedClientConnection} from the {@link org.apache.http.conn.ClientConnectionManager}.
The default maximum number of connections allowed per host
Sets lookup interface for maximum number of connections allowed per route.
Returns lookup interface for maximum number of connections allowed per route.
Sets the maximum number of connections allowed.
Gets the maximum number of connections allowed.
Disabled default constructor.
Obtains the {@link ConnRoutePNames#DEFAULT_PROXY DEFAULT_PROXY} parameter value. {@link #NO_HOST} will be mapped to <code>null</code>, to allow unsetting in a hierarchy.
Sets the {@link ConnRoutePNames#DEFAULT_PROXY DEFAULT_PROXY} parameter value.
Obtains the {@link ConnRoutePNames#FORCED_ROUTE FORCED_ROUTE} parameter value. {@link #NO_ROUTE} will be mapped to <code>null</code>, to allow unsetting in a hierarchy.
Sets the {@link ConnRoutePNames#FORCED_ROUTE FORCED_ROUTE} parameter value.
Obtains the {@link ConnRoutePNames#LOCAL_ADDRESS LOCAL_ADDRESS} parameter value. There is no special value that would automatically be mapped to <code>null</code>. You can use the wildcard address (0.0.0.0 for IPv4, :: for IPv6) to override a specific local address in a hierarchy.
Sets the {@link ConnRoutePNames#LOCAL_ADDRESS LOCAL_ADDRESS} parameter value.
Provides the next step.
Determines the first step to establish a route.
Determines the next step to establish a direct connection.
Determines the next step to establish a connection via proxy.
Internal, fully-specified constructor. This constructor does <i>not</i> clone the proxy chain array, nor test it for <code>null</code> elements. This conversion and check is the responsibility of the public constructors. The order of arguments here is different from the similar public constructor, as required by Java.
Creates a new route with all attributes specified explicitly.
Creates a new route with at most one proxy.
Creates a new direct route. That is a route without a proxy.
Creates a new direct insecure route.
Creates a new route through a proxy. When using this constructor, the <code>proxy</code> MUST be given. For convenience, it is assumed that a secure connection will be layered over a tunnel through the proxy.
Helper to convert a proxy to a proxy chain.
Helper to duplicate and check a proxy chain. An empty proxy chain is converted to <code>null</code>.
non-JavaDoc, see interface RouteInfo
non-JavaDoc, see interface RouteInfo
non-JavaDoc, see interface RouteInfo
non-JavaDoc, see interface RouteInfo
non-JavaDoc, see interface RouteInfo
non-JavaDoc, see interface RouteInfo
non-JavaDoc, see interface RouteInfo
non-JavaDoc, see interface RouteInfo
non-JavaDoc, see interface RouteInfo
non-JavaDoc, see interface RouteInfo
Creates a new route tracker. The target and origin need to be specified at creation time.
Creates a new tracker for the given route. Only target and origin are taken from the route, everything else remains to be tracked.
Tracks connecting to the target.
Tracks connecting to the first proxy.
Tracks tunnelling to the target.
Tracks tunnelling to a proxy in a proxy chain. This will extend the tracked proxy chain, but it does not mark the route as tunnelled. Only end-to-end tunnels are considered there.
Tracks layering a protocol.
non-JavaDoc, see interface RouteInfo
Obtains the tracked route. If a route has been tracked, it is {@link #isConnected connected}. If not connected, nothing has been tracked so far.
Gets the singleton instance of this class.
non-javadoc, see interface org.apache.http.conn.SocketFactory
non-javadoc, see interface org.apache.http.conn.SocketFactory
Checks whether a socket connection is secure. This factory creates plain socket connections which are not considered secure.
Creates a new scheme. Whether the created scheme allows for layered connections depends on the class of <code>factory</code>.
Obtains the default port.
Obtains the socket factory. If this scheme is {@link #isLayered layered}, the factory implements {@link LayeredSocketFactory LayeredSocketFactory}.
Obtains the scheme name.
Indicates whether this scheme allows for layered connections.
Resolves the correct port for this scheme. Returns the given port if it is valid, the default port otherwise.
Creates a new, empty scheme registry.
Obtains a scheme by name.
Obtains the scheme for a host. Convenience method for <code>getScheme(host.getSchemeName())</pre>
Obtains a scheme by name, if registered.
Registers a scheme. The scheme can later be retrieved by its name using {@link #getScheme(String) getScheme} or {@link #get get}.
Unregisters a scheme.
Obtains the names of the registered schemes in their default order.
Populates the internal collection of registered {@link Scheme protocol schemes} with the content of the map passed as a parameter.
Extracts the array of SubjectAlt DNS names from an X509Certificate. Returns null if there aren't any. <p/> Note:  Java doesn't appear able to extract international characters from the SubjectAlts.  It can only extract international characters from the CN field. <p/> (Or maybe the version of OpenSSL I'm using to test isn't storing the international characters correctly in the SubjectAlts?).
Counts the number of dots "." in a string.
Gets an singleton instance of the SSLProtocolSocketFactory.
Constructs an HttpClient SSLSocketFactory backed by the given JSSE SSLSocketFactory.
Creates the default SSL socket factory. This constructor is used exclusively to instantiate the factory for {@link #getSocketFactory getSocketFactory}.
Checks whether a socket connection is secure. This factory creates TLS/SSL socket connections which, by default, are considered secure. <br/> Derived classes may override this method to perform runtime checks, for example based on the cypher suite.
non-javadoc, see interface LayeredSocketFactory
Creates a new watcher for auto-releasing a connection.
non-javadoc, see interface EofSensorWatcher
non-javadoc, see interface EofSensorWatcher
non-javadoc, see interface EofSensorWatcher
Creates a new managed entity that can release a connection.
non-javadoc, see interface ConnectionReleaseTrigger
non-javadoc, see interface ConnectionReleaseTrigger
Releases the connection gracefully. The connection attribute will be nullified. Subsequent invocations are no-ops.
Creates a ConnectTimeoutException with a <tt>null</tt> detail message.
Creates a ConnectTimeoutException with the specified detail message.
Creates a ConnectTimeoutException with a <tt>null</tt> detail message.
Creates a ConnectTimeoutException with the specified detail message.
Creates a new EOF sensor. If no watcher is passed, the underlying stream will simply be closed when EOF is detected or {@link #close close} is called. Otherwise, the watcher decides whether the underlying stream should be closed before detaching from it.
Checks whether the underlying stream can be read from.
Detects EOF and notifies the watcher. This method should only be called while the underlying stream is still accessible. Use {@link #isReadAllowed isReadAllowed} to check that condition. <br/> If EOF is detected, the watcher will be notified and this stream is detached from the underlying stream. This prevents multiple notifications from this stream.
Detects stream close and notifies the watcher. There's not much to detect since this is called by {@link #close close}. The watcher will only be notified if this stream is closed for the first time and before EOF has been detected. This stream will be detached from the underlying stream to prevent multiple notifications to the watcher.
Detects stream abort and notifies the watcher. There's not much to detect since this is called by {@link #abortConnection abortConnection}. The watcher will only be notified if this stream is aborted for the first time and before EOF has been detected or the stream has been {@link #close closed} gracefully. This stream will be detached from the underlying stream to prevent multiple notifications to the watcher.
Same as {@link #close close()}.
Aborts this stream. This is a special version of {@link #close close()} which prevents re-use of the underlying connection, if any. Calling this method indicates that there should be no attempt to read until the end of the stream.
Restricted default constructor.
Attempts to connects the socket to any of the {@link InetAddress}es the given host name resolves to. If connection to all addresses fail, the last I/O exception is propagated to the caller.
Registers a {@link CookieSpecFactory} with the given identifier. If a specification with the given name already exists it will be overridden. This nameis the same one used to retrieve the {@link CookieSpecFactory} from {@link #getCookieSpec(String)}.
Unregisters the {@link CookieSpecFactory} with the given ID.
Gets the {@link CookieSpec cookie specification} with the given ID. specification.
Gets the {@link CookieSpec cookie specification} with the given name.
Obtains a list containing names of all registered {@link CookieSpec cookie specs} in their default order. Note that the DEFAULT policy (if present) is likely to be the same as one of the other policies, but does not have to be.
Populates the internal collection of registered {@link CookieSpec cookie specs} with the content of the map passed as a parameter.
Creates a new MalformedCookieException with a <tt>null</tt> detail message.
Creates a new MalformedCookieException with a specified message string.
Creates a new MalformedCookieException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Protected default constructor. The attributes of the created object remain <code>null</code> and <code>false</code>, respectively.
Obtains the Content-Type header. The default implementation returns the value of the {@link #contentType contentType} attribute.
Obtains the Content-Encoding header. The default implementation returns the value of the {@link #contentEncoding contentEncoding} attribute.
Obtains the 'chunked' flag. The default implementation returns the value of the {@link #chunked chunked} attribute.
Specifies the Content-Type header. The default implementation sets the value of the {@link #contentType contentType} attribute.
Specifies the Content-Type header, as a string. The default implementation calls {@link #setContentType(Header) setContentType(Header)}.
Specifies the Content-Encoding header. The default implementation sets the value of the {@link #contentEncoding contentEncoding} attribute.
Specifies the Content-Encoding header, as a string. The default implementation calls {@link #setContentEncoding(Header) setContentEncoding(Header)}.
Specifies the 'chunked' flag. The default implementation sets the value of the {@link #chunked chunked} attribute.
Does not consume anything. The default implementation does nothing if {@link HttpEntity#isStreaming isStreaming} returns <code>false</code>, and throws an exception if it returns <code>true</code>. This removes the burden of implementing an empty method for non-streaming entities.
Creates a new basic entity. The content is initially missing, the content length is set to a negative number.
non-javadoc, see interface HttpEntity
Obtains the content, once only.
Tells that this entity is not repeatable.
Specifies the length of the content.
Specifies the content.
non-javadoc, see interface HttpEntity
non-javadoc, see interface HttpEntity
non-javadoc, see interface HttpEntity
Tells that this entity does not have to be chunked.
Tells that this entity is repeatable.
Creates a new entity wrapper.
Processes the given challenge token. Some authentication schemes may involve multiple challenge-response exchanges. Such schemes must be able to maintain the state information when dealing with sequential challenges is malformed
Default constructor for the basic authetication scheme.
Returns textual designation of the basic authentication scheme.
Tests if the Basic authentication process has been completed. <tt>false</tt> otherwise.
Returns <tt>false</tt>. Basic authentication scheme is request based.
Produces basic authorization header for the given set of {@link Credentials}. be generated due to an authentication failure
Returns a basic <tt>Authorization</tt> header value for the given {@link Credentials} and charset.
Default constructor for the digest authetication scheme.
Tests if the Digest authentication process has been completed. <tt>false</tt> otherwise.
Returns textual designation of the digest authentication scheme.
Returns <tt>false</tt>. Digest authentication scheme is request based.
Produces a digest authorization string for the given set of {@link Credentials}, method name and URI. be generated due to an authentication failure
Creates an MD5 response digest.
Creates digest-response header as defined in RFC2617.
Encodes the 128 bit (16 bytes) MD5 digest into a 32 characters long <CODE>String</CODE> according to RFC 2617.
Creates a random cnonce value based on the current time.
Creates a new NTLMEngineException with the specified message.
Creates a new NTLMEngineException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Default constructor for RFC2617 compliant authetication schemes.
Returns authentication parameters map. Keys in the map are lower-cased.
Returns authentication parameter with the given name, if available.
Returns authentication realm. The realm may not be null.
Creates a new UnsupportedAuthAlgoritmException with a <tt>null</tt> detail message.
Creates a new UnsupportedAuthAlgoritmException with the specified message.
Creates a new UnsupportedAuthAlgoritmException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Creates a new HTTP client.
non-javadoc, see interface HttpClient
Replaces the parameters. The implementation here does not update parameters of dependent objects.
non-javadoc, see interface HttpClient
Maps to {@link HttpClient#execute(HttpHost,HttpRequest,HttpContext) The target is determined from the URI of the request.
Obtains parameters for executing a request. The default implementation in this class creates a new {@link ClientParamsStack} from the request parameters and the client parameters. <br/> This method is called by the default implementation of {@link #execute(HttpHost,HttpRequest,HttpContext)} to obtain the parameters for the {@link DefaultRequestDirector}.
Default constructor.
Adds an {@link Cookie HTTP cookie}, replacing any existing equivalent cookies. If the given cookie has already expired it will not be added, but existing values will still be removed.
Adds an array of {@link Cookie HTTP cookies}. Cookies are added individually and in the given array order. If any of the given cookies has already expired it will not be added, but existing values will still be removed.
Returns an immutable array of {@link Cookie cookies} that this HTTP state currently contains.
Removes all of {@link Cookie cookies} in this HTTP state that have expired by the specified {@link java.util.Date date}.
Clears all cookies.
Default constructor.
Sets the {@link Credentials credentials} for the given authentication scope. Any previous credentials for the given scope will be overwritten. for the given scope.
Find matching {@link Credentials credentials} for the given authentication scope.
Get the {@link Credentials credentials} for the given authentication scope.
Clears all credentials.
Returns the response body as a String if the response was successful (a 2xx status code). If no response body exists, this returns null. If the response was unsuccessful (>= 300 status code), throws an {@link HttpResponseException}.
Creates a new parameter stack from elements. The arguments will be stored as-is, there is no copying to prevent modification.
Creates a copy of a parameter stack. The new stack will have the exact same entries as the argument stack. There is no copying of parameters.
Creates a modified copy of a parameter stack. The new stack will contain the explicitly passed elements. For elements where the explicit argument is <code>null</code>, the corresponding element from the argument stack is used. There is no copying of parameters.
Obtains the application parameters of this stack.
Obtains the client parameters of this stack.
Obtains the request parameters of this stack.
Obtains the override parameters of this stack.
Obtains a parameter from this stack. See class comment for search order.
Does <i>not</i> set a parameter. Parameter stacks are read-only. It is possible, though discouraged, to access and modify specific stack entries. Derived classes may change this behavior.
Does <i>not</i> remove a parameter. Parameter stacks are read-only. It is possible, though discouraged, to access and modify specific stack entries. Derived classes may change this behavior.
Does <i>not</i> copy parameters. Parameter stacks are lightweight objects, expected to be instantiated as needed and to be used only in a very specific context. On top of that, they are read-only. The typical copy operation to prevent accidental modification of parameters passed by the application to a framework object is therefore pointless and disabled. Create a new stack if you really need a copy. <br/> Derived classes may change this behavior.
Creates a new HTTP client from parameters and a connection manager.
Default constructor
Used <code>retryCount</code> and <code>requestSentRetryEnabled</code> to determine if the given method should be retried.
successfully sent their request, <code>false</code> otherwise
non-javadoc, see interface ClientRequestDirector
Returns the connection back to the connection manager and prepares for retrieving a new connection during the next request.
Determines the route for a request. Called by {@link #execute} to determine the route for either the original or a followup request.
Establishes the target route.
Creates a tunnel to the target server. The connection must be established to the (last) proxy. A CONNECT request for tunnelling through the proxy will be created and sent, the response received and checked. This method does <i>not</i> update the connection with information about the tunnel, that is left to the caller.
Creates a tunnel to an intermediate proxy. This method is <i>not</i> implemented in this class. It just throws an exception here.
Creates the CONNECT request for tunnelling. Called by {@link #createTunnelToTarget createTunnelToTarget}.
Analyzes a response to check need for a followup.
Shuts down the connection. This method is called from a <code>catch</code> block in {@link #execute execute} during exception handling.
Returns true if this collection contains the given URI.
Adds a new URI to the list of redirects.
Removes a URI from the list of redirects.
Creates a new routed request.
Creates a new connection pool.
Enables connection garbage collection (GC). This method must be called immediately after creating the connection pool. It is not possible to enable connection GC after pool entries have been created. Neither is it possible to disable connection GC.
non-javadoc, see interface RefQueueHandler BEGIN android-changed
Closes idle connections.
Shuts down this pool and all associated resources. Overriding methods MUST call the implementation here!
Closes a connection from this pool.
Creates a new adapter.
Obtains the pool entry.
Creates a new pool entry.
Creates a new reference to a pool entry.
Obtain the planned route for the referenced entry. The planned route is still available, even if the entry is gone.
Creates a new connection pool, managed by route.
Creates the queue for {@link #freeConnections}. Called once by the constructor.
Creates the queue for {@link #waitingThreads}. Called once by the constructor.
Creates the map for {@link #routeToPool}. Called once by the constructor.
Creates a new route-specific pool. Called by {@link #getRoutePool} when necessary.
Creates a new waiting thread. Called by {@link #getRoutePool} when necessary.
Get a route-specific pool of available connections.
@@@ consider alternatives for gathering statistics
Obtains a pool entry with a connection within the given timeout. If a {@link WaitingThread} is used to block, {@link WaitingThreadAborter#setWaitingThread(WaitingThread)} must be called before blocking, to allow the thread to be interrupted.
If available, get a free pool entry for a route.
Creates a new pool entry. This method assumes that the new connection will be handed out immediately.
Deletes a given pool entry. This closes the pooled connection and removes all references, so that it can be GCed. <p><b>Note:</b> Does not remove the entry from the freeConnections list. It is assumed that the caller has already handled this step.</p> <!-- @@@ is that a good idea? or rather fix it? -->
Delete an old, free pool entry to make room for a new one. Used to replace pool entries with ones for a different route.
Notifies a waiting thread that a connection is available. This will wake a thread waiting in the specific route pool, if there is one. Otherwise, a thread in the connection pool will be notified.
Instantiates a new worker to listen for lost connections.
The main loop of this worker. If initialization succeeds, this method will only return after {@link #shutdown shutdown()}. Only one thread can execute the main loop at any time.
Shuts down this worker. It can be re-started afterwards by another call to {@link #run run()}.
Creates a new route-specific pool.
Obtains the route for which this pool is specific.
Obtains the maximum number of entries allowed for this pool.
Indicates whether this pool is unused. A pool is unused if there is neither an entry nor a waiting thread. All entries count, not only the free but also the allocated ones.
Return remaining capacity of this pool
Obtains the number of entries. This includes not only the free entries, but also those that have been created and are currently issued to an application.
Obtains a free entry from this pool, if one is available.
Returns an allocated entry to this pool.
Indicates creation of an entry for this pool. The entry will <i>not</i> be added to the list of free entries, it is only recognized as belonging to this pool now. It can then be passed to {@link #freeEntry freeEntry}.
Deletes an entry from this pool. Only entries that are currently free in this pool can be deleted. Allocated entries can not be deleted.
Forgets about an entry from this pool. This method is used to indicate that an entry {@link #allocEntry allocated} from this pool has been lost and will not be returned.
Adds a waiting thread. This pool makes no attempt to match waiting threads with pool entries. It is the caller's responsibility to check that there is no entry before adding a waiting thread.
Checks whether there is a waiting thread in this pool.
Returns the next thread in the queue.
Removes a waiting thread, if it is queued.
Creates a new thread safe connection manager.
Hook for creating the connection pool.
non-javadoc, see interface ClientConnectionManager
non-javadoc, see interface ClientConnectionManager
non-javadoc, see interface ClientConnectionManager
Gets the total number of pooled connections for the given route. This is the total number of connections that have been created and are still in use by this connection manager for the route. This value will not exceed the maximum number of connections per host.
Gets the total number of pooled connections.  This is the total number of connections that have been created and are still in use by this connection manager.  This value will not exceed the maximum number of connections in total.
non-javadoc, see interface ClientConnectionManager
Creates a new entry for a waiting thread.
Obtains the condition.
Obtains the pool, if there is one.
Obtains the thread, if there is one.
Blocks the calling thread. This method returns when the thread is notified or interrupted, if a timeout occurrs, or if there is a spurious wakeup. <br/> This method assumes external synchronization.
Wakes up the waiting thread. <br/> This method assumes external synchronization.
If a waiting thread has been set, interrupts it.
Sets the waiting thread.  If this has already been aborted, the waiting thread is immediately interrupted.
Creates a new connection adapter. The adapter is initially <i>not</i> {@link #isMarkedReusable marked} as reusable.
Detaches this adapter from the wrapped connection. This adapter becomes useless.
Asserts that the connection has not been aborted.
Asserts that there is a wrapped connection to delegate to.
non-javadoc, see interface HttpConnection
non-javadoc, see interface HttpConnection
non-javadoc, see interface HttpConnection
non-javadoc, see interface HttpConnection
non-javadoc, see interface HttpConnection
non-javadoc, see interface HttpClientConnection
non-javadoc, see interface HttpClientConnection
non-javadoc, see interface HttpClientConnection
non-javadoc, see interface HttpClientConnection
non-javadoc, see interface HttpClientConnection
non-javadoc, see interface HttpClientConnection
non-javadoc, see interface HttpInetConnection
non-javadoc, see interface HttpInetConnection
non-javadoc, see interface HttpInetConnection
non-javadoc, see interface HttpInetConnection
non-javadoc, see interface ManagedClientConnection
non-javadoc, see interface ManagedClientConnection
non-javadoc, see interface ManagedClientConnection
non-javadoc, see interface ManagedClientConnection
non-javadoc, see interface ManagedClientConnection
Creates a new connection adapter.
Asserts that this adapter is still attached.
non-javadoc, see interface ManagedHttpConnection
non-javadoc, see interface ManagedHttpConnection
non-javadoc, see interface ManagedHttpConnection
non-javadoc, see interface ManagedHttpConnection
non-javadoc, see interface ManagedHttpConnection
non-javadoc, see interface HttpConnection
non-javadoc, see interface HttpConnection
non-javadoc, see interface ManagedClientConnection
non-javadoc, see interface ManagedClientConnection
Creates a new pool entry.
Returns the state object associated with this pool entry.
Assigns a state object to this pool entry.
Opens the underlying connection.
Tracks tunnelling of the connection to the target. The tunnel has to be established outside by sending a CONNECT request to the (last) proxy.
Tracks tunnelling of the connection to a chained proxy. The tunnel has to be established outside by sending a CONNECT request to the previous proxy. See {@link org.apache.http.conn.ManagedClientConnection#tunnelProxy
Layers a protocol on top of an established tunnel.
Shuts down the entry. If {@link #open(HttpRoute, HttpContext, HttpParams)} is in progress, this will cause that open to possibly throw an {@link IOException}.
non-javadoc, see interface OperatedClientConnection
non-javadoc, see interface OperatedClientConnection
non-javadoc, see interface OperatedClientConnection
Creates a new client connection operator for the given scheme registry.
non-javadoc, see interface ClientConnectionOperator
non-javadoc, see interface ClientConnectionOperator
non-javadoc, see interface ClientConnectionOperator
Performs standard initializations on a newly created socket.
Creates a new default route planner.
non-javadoc, see interface HttpRoutePlanner
Registers the given connection with this handler.  The connection will be held until {@link #remove} or {@link #closeIdleConnections} is called.
Removes the given connection from the list of connections to be closed when idle. This will return true if the connection is still valid, and false if the connection should be considered expired and not used.
Removes all connections referenced by this handler.
Closes connections that have been idle for at least the given amount of time. @@@ add TimeUnit argument here?
Create an instance that wraps the specified session input buffer.
Create an instance that wraps the specified session output buffer.
Creates a new proxy selector route planner.
Obtains the proxy selector to use.
Sets the proxy selector to use.
Determines a proxy for the given target.
Obtains a host from an {@link InetSocketAddress}. <br/> (TODO: determine format for IPv6 addresses, with or without [brackets])
Chooses a proxy from a list of available proxies. The default implementation just picks the first non-SOCKS proxy from the list. If there are only SOCKS proxies, {@link Proxy#NO_PROXY Proxy.NO_PROXY} is returned. Derived classes may implement more advanced strategies, such as proxy rotation if there are multiple options.
Creates a new simple connection manager.
Asserts that this manager is not shut down.
Obtains a connection. This method does not block.
Revokes the currently issued connection. The adapter gets disconnected, the connection will be shut down.
Creates a new pool entry.
Closes the connection in this pool entry.
Shuts down the connection in this pool entry.
Creates a new connection adapter.
Default constructor
Finds an attribute handler {@link CookieAttributeHandler} for the given attribute. Returns <tt>null</tt> if no attribute handler is found for the specified attribute.
Gets attribute handler {@link CookieAttributeHandler} for the given attribute.
Default Constructor taking a name and a value. The value may be null.
Sets the value
Returns the comment describing the purpose of this cookie, or <tt>null</tt> if no such comment has been defined.
If a user agent (web browser) presents this cookie to a user, the cookie's purpose will be described using this comment.
Returns null. Cookies prior to RFC2965 do not set this attribute
Returns the expiration {@link Date} of the cookie, or <tt>null</tt> if none exists. <p><strong>Note:</strong> the object returned by this method is considered immutable. Changing it (e.g. using setTime()) could result in undefined behaviour. Do so at your peril. </p>
Sets expiration date. <p><strong>Note:</strong> the object returned by this method is considered immutable. Changing it (e.g. using setTime()) could result in undefined behaviour. Do so at your peril.</p>
Returns <tt>false</tt> if the cookie should be discarded at the end of the "session"; <tt>true</tt> otherwise.
Returns domain attribute of the cookie.
Sets the domain attribute.
Returns the path attribute of the cookie
Sets the path attribute.
Sets the secure attribute of the cookie. <p> When <tt>true</tt> the cookie should only be sent using a secure protocol (https).  This should only be set when the cookie's originating server used a secure protocol to set the cookie's value.
Returns null. Cookies prior to RFC2965 do not set this attribute
Returns the version of the cookie specification to which this cookie conforms.
Sets the version of the cookie specification to which this cookie conforms.
Returns true if this cookie has expired.
Default Constructor taking a name and a value. The value may be null.
Default constructor
Parses a date value.  The formats used for parsing the date value are retrieved from the default http params. supported date formats
Parses the date value using the given date formats.
Parses the date value using the given date formats. <code>startDate</code> to <code>startDate + 100 years</code>. This value may be <code>null</code>. When <code>null</code> is given as a parameter, year <code>2000</code> will be used.
Formats the given date according to the RFC 1123 pattern.
Formats the given date according to the specified pattern.  The pattern must conform to that used by the {@link SimpleDateFormat simple date format} class.
creates a {@link SimpleDateFormat} for the requested format string.
Checks if the given domain is in one of the seven special top level domains defined by the Netscape cookie specification.
Default constructor
Parses the Set-Cookie value into an array of <tt>Cookie</tt>s. <p>Syntax of the Set-Cookie HTTP Response Header:</p> <p>This is the format a CGI script would use to add to the HTTP headers a new piece of data which is to be stored by the client for later retrieval.</p> <PRE> Set-Cookie: NAME=VALUE; expires=DATE; path=PATH; domain=DOMAIN_NAME; secure </PRE> <p>Please note that Netscape draft specification does not fully conform to the HTTP header format. Netscape draft does not specify whether multiple cookies may be sent in one header. Hence, comma character may be present in unquoted cookie value or unquoted parameter value.</p> The Cookie Spec.</a>
Default constructor
Return a name/value string suitable for sending in a <tt>"Cookie"</tt> header as defined in RFC 2109 for backward compatibility with cookie version 0
Return a string suitable for sending in a <tt>"Cookie"</tt> header as defined in RFC 2109 for backward compatibility with cookie version 0
Parse cookie domain attribute.
Performs domain-match as defined by the RFC2965. <p> Host A's name domain-matches host B's if <ol> <ul>their host name strings string-compare equal; or</ul> <ul>A is a HDN string and has the form NB, where N is a non-empty </ol>
Validate cookie domain attribute.
Match cookie domain attribute.
Parses the given Port attribute value (e.g. "8000,8001,8002") into an array of ports.
Returns <tt>true</tt> if the given port exists in the given ports list.
Parse cookie port attribute.
Validate cookie port attribute. If the Port attribute was specified in header, the request port must be in cookie's port list.
Match cookie port attribute. If the Port attribute is not specified in header, the cookie can be sent to any port. Otherwise, the request port must be in the cookie's port list.
Default constructor
Set 'effective host name' as defined in RFC 2965. <p> If a host name contains no dots, the effective host name is that name with the string .local appended to it.  Otherwise the effective host name is the same as the host name.  Note that all effective host names contain at least one dot.
Parse cookie version attribute.
validate cookie version attribute. Version attribute is REQUIRED.
Parses HTTP headers from the data receiver stream according to the generic format as given in Section 3.1 of RFC 822, RFC-2616 Section 4 and 19.3. of headers received from the data stream exceeds maxCount value, an IOException will be thrown. Setting this parameter to a negative value or zero  will disable the check.
<p> Returns all the data in a chunked stream in coalesced form. A chunk is followed by a CRLF. The method returns -1 as soon as a chunksize of 0 is detected.</p> <p> Trailer headers are read automcatically at the end of the stream and can be obtained with the getResponseFooters() method.</p> byte
Read some bytes from the stream. placed. reached.
Read some bytes from the stream. reached.
Read the next chunk.
Expects the stream to start with a chunksize in hex with optional comments after a semicolon. The line must end with a CRLF: "a3; some comment\r\n" Positions the stream at the start of the next line.
Reads and stores the Trailer headers.
Upon close, this reads the remainder of the chunked message, leaving the underlying socket at a position to start reading the next response without scanning.
Exhaust an input stream, reading until EOF has been encountered. <p>Note that this function is intended as a non-public utility. This is a little weird, but it seemed silly to make a utility class for this one function, so instead it is just static and shared that way.</p>
----------------------------------------------------------- Constructors Wraps a session output buffer and chunks the output.
Wraps a session output buffer and chunks the output. The default buffer size of 2048 was chosen because the chunk overhead is less than 0.5%
----------------------------------------------------------- Internal methods Writes the cache out onto the underlying stream
Writes the cache and bufferToAppend to the underlying stream as one large chunk
----------------------------------------------------------- Public Methods Must be called to ensure the internal cache is flushed and the closing chunk is written.
-------------------------------------------- OutputStream Methods
Writes the array. If the array does not fit within the buffer, it is not split, but rather written out as one large chunk.
Flushes the content buffer and the underlying stream.
Finishes writing to the underlying stream, but does NOT close the underlying stream.
Creates a new length limited stream the stream. Subsequent read operations will return -1.
<p>Reads until the end of the known length of content.</p> <p>Does not close the underlying socket input, but instead leaves it primed to parse the next response.</p>
Read the next byte from the stream
Does standard {@link InputStream#read(byte[], int, int)} behavior, but also notifies the watcher when the contents have been consumed. reached.
Read more bytes from the stream.
Skips and discards a number of bytes from the input stream. are skipped.
Creates a new length limited stream the stream. Subsequent write operations will be ignored.
<p>Does not close the underlying socket output.</p>
BEGIN android-added Returns true if the connection is probably functional. It's insufficient to rely on isDataAvailable() returning normally; that approach cannot distinguish between an exhausted stream and a stream with zero bytes buffered.
see interface ConnectionReuseStrategy
Creates a token iterator from a header iterator. This method can be overridden to replace the implementation of the token iterator.
Creates a new response factory with the given catalog.
Creates a new response factory with the default catalog. The default catalog is {@link EnglishReasonPhraseCatalog EnglishReasonPhraseCatalog}.
non-javadoc, see interface HttpResponseFactory
Determines the locale of the response. The implementation in this class always returns the default locale.
Restricted default constructor, for derived classes. If you need an instance of this class, use {@link #INSTANCE INSTANCE}.
Obtains the reason phrase for a status code.
Stores the given reason phrase, by status code. Helper method to initialize the static lookup table.
------------------  Public interface method --------------------------
non-JavaDoc, see interface ConnectionReuseStrategy
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpMessage
Constructor with name and value
Returns the header name.
Returns the header value.
Returns a {@link String} representation of the header.
Returns an array of {@link HeaderElement}s constructed from my value.
Constructor with name, value and parameters. Parameters are copied by reference, not by value
Constructor with name and value.
Get parameters, if any. The returned array is created for each invocation and can be modified by the caller without affecting this header element.
Obtains the number of parameters.
Obtains the parameter with the given index.
Returns parameter with the given name, if found. Otherwise null is returned
Creates a new instance of BasicHeaderElementIterator
Creates a new header iterator.
Determines the index of the next header.
Checks whether a header is part of the iteration.
non-javadoc, see interface HeaderIterator
Obtains the next header from this iteration.
Returns the next header. Same as {@link #nextHeader nextHeader}, but not type-safe.
Removing headers is not supported.
non-javadoc, see interface HeaderValueFormatter
Estimates the length of formatted header elements.
non-javadoc, see interface HeaderValueFormatter
Estimates the length of a formatted header element.
non-javadoc, see interface HeaderValueFormatter
Estimates the length of formatted parameters.
non-javadoc, see interface HeaderValueFormatter
Estimates the length of a formatted name-value pair.
Actually formats the value of a name-value pair. This does not include a leading = character. Called from {@link #formatNameValuePair formatNameValuePair}.
Checks whether a character is a {@link #SEPARATORS separator}.
Checks whether a character is {@link #UNSAFE_CHARS unsafe}.
non-javadoc, see interface HeaderValueParser
non-javadoc, see interface HeaderValueParser
Creates a header element. Called from {@link #parseHeaderElement}.
non-javadoc, see interface HeaderValueParser
non-javadoc, see interface HeaderValueParser
Creates a name-value pair. Called from {@link #parseNameValuePair}.
Creates a new response. This is the constructor to which all others map.
Creates a response from a status line. The response will not have a reason phrase catalog and use the system default locale.
Creates a response from elements of a status line. The response will not have a reason phrase catalog and use the system default locale.
non-javadoc, see interface HttpMessage
non-javadoc, see interface HttpResponse
non-javadoc, see interface HttpResponse
non-javadoc, see interface HttpResponse
non-javadoc, see interface HttpResponse
non-javadoc, see interface HttpResponse
non-javadoc, see interface HttpResponse
non-javadoc, see interface HttpResponse
non-javadoc, see interface HttpResponse
Looks up a reason phrase. This method evaluates the currently set catalog and locale. It also handles a missing catalog.
Obtains a buffer for formatting.
non-javadoc, see interface LineFormatter
Guesses the length of a formatted protocol version. Needed to guess the length of a formatted request or status line.
Formats a request line.
non-javadoc, see interface LineFormatter
Actually formats a request line. Called from {@link #formatRequestLine}.
Formats a status line.
non-javadoc, see interface LineFormatter
Actually formats a status line. Called from {@link #formatStatusLine}.
Formats a header.
non-javadoc, see interface LineFormatter
Actually formats a header. Called from {@link #formatHeader}.
Creates a new line parser for the given HTTP-like protocol.
Creates a new line parser for HTTP.
non-javadoc, see interface LineParser
Creates a protocol version. Called from {@link #parseProtocolVersion}.
non-javadoc, see interface LineParser
Parses a request line.
Instantiates a new request line. Called from {@link #parseRequestLine}.
non-javadoc, see interface LineParser
Instantiates a new status line. Called from {@link #parseStatusLine}.
non-javadoc, see interface LineParser
Helper to skip whitespace.
Creates a new header iterator.
Removes the header that was returned last.
Get a string representation of this pair.
----------------------------------------------------------- Constructors Creates a new status line with the given version, status, and reason.
Creates a new instance of {@link BasicTokenIterator}.
non-javadoc, see interface TokenIterator
Obtains the next token from this iteration.
Returns the next token. Same as {@link #nextToken}, but with generic return type.
Removing tokens is not supported.
Determines the next token. If found, the token is stored in {@link #currentToken}. The return value indicates the position after the token in {@link #currentHeader}. If necessary, the next header will be obtained from {@link #headerIt}. If not found, {@link #currentToken} is set to <code>null</code>.
Creates a new token to be returned. Called from {@link #findNext findNext} after the token is identified. The default implementation simply calls {@link java.lang.String#substring String.substring}. <br/> If header values are significantly longer than tokens, and some tokens are permanently referenced by the application, there can be problems with garbage collection. A substring will hold a reference to the full characters of the original string and therefore occupies more memory than might be expected. To avoid this, override this method and create a new string instead of a substring.
Determines the starting position of the next token. This method will iterate over headers if necessary.
Determines the position of the next token separator. Because of multi-header joining rules, the end of a header value is a token separator. This method does therefore not need to iterate over headers.
Determines the ending position of the current token. This method will not leave the current header value, since the end of the header value is a token boundary.
Checks whether a character is a token separator. RFC 2616, section 2.1 defines comma as the separator for <tt>#token</tt> sequences. The end of a header value will also separate tokens, but that is not a character check.
Checks whether a character is a whitespace character. RFC 2616, section 2.2 defines space and horizontal tab as whitespace. The optional preceeding line break is irrelevant, since header continuation is handled transparently when parsing messages.
Checks whether a character is a valid token character. Whitespace, control characters, and HTTP separators are not valid token characters. The HTTP specification (RFC 2616, section 2.2) defines tokens only for the US-ASCII character set, this method extends the definition to other character sets.
Checks whether a character is an HTTP separator. The implementation in this class checks only for the HTTP separators defined in RFC 2616, section 2.2. If you need to detect other separators beyond the US-ASCII character set, override this method.
Creates a new header from a buffer. The name of the header will be parsed immediately, the value only if it is accessed.
Constructor for HeaderGroup.
Removes any contained headers.
Adds the given header to the group.  The order in which this header was added is preserved.
Removes the given header.
Replaces the first occurence of the header with the same name. If no header with the same name is found the given header is added to the end of the list. name if present in the list.
Sets all of the headers contained within this group overriding any existing headers. The headers are added in the order in which they appear in the array.
Gets a header representing all of the header values with the given name. If more that one header with the given name exists the values will be combined with a "," as per RFC 2616. <p>Header name comparison is case insensitive. headers by the given name are present
Gets all of the headers with the given name.  The returned array maintains the relative order in which the headers were added. <p>Header name comparison is case insensitive.
Gets the first header with the given name. <p>Header name comparison is case insensitive.
Gets the last header with the given name. <p>Header name comparison is case insensitive.
Gets all of the headers contained within this group.
Tests if headers with the given name are contained within this group. <p>Header name comparison is case insensitive. contained, <code>false</code> otherwise
Returns an iterator over this group of headers.
Returns an iterator over the headers with a given name in this group.
Returns a copy of this object
Instantiates parameters.
Assigns the value to all the parameter with the given names
Removes all parameters from this collection.
Creates a copy of these parameters. The implementation here instantiates {@link BasicHttpParams}, then calls {@link #copyParams(HttpParams)} to populate the copy.
Copies the locally defined parameters to the argument parameters. This method is called from {@link #copy()}.
Creates a copy of the local collection with the same default
Retrieves the value of the parameter from the local collection and, if the parameter is not set locally, delegates its resolution to the default collection.
Attempts to remove the parameter from the local collection. This method <i>does not</i> modify the default collection.
Sets the parameter in the local collection. This method <i>does not</i> modify the default collection.
Returns the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the timeout for waiting for data. A timeout value of zero is interpreted as an infinite timeout. This value is used when no socket timeout is set in the method parameters.
Sets the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the timeout for waiting for data. A timeout value of zero is interpreted as an infinite timeout. This value is used when no socket timeout is set in the method parameters.
Tests if Nagle's algorithm is to be used. (that is enable TCP_NODELAY), <tt>false</tt> otherwise.
Determines whether Nagle's algorithm is to be used. The Nagle's algorithm tries to conserve bandwidth by minimizing the number of segments that are sent. When applications wish to decrease network latency and increase performance, they can disable Nagle's algorithm (that is enable TCP_NODELAY). Data will be sent earlier, at the cost of an increase in bandwidth consumption. (that is enable TCP_NODELAY), <tt>false</tt> otherwise.
Returns linger-on-close timeout. Value <tt>0</tt> implies that the option is disabled. Value <tt>-1</tt> implies that the JRE default is used.
Returns linger-on-close timeout. This option disables/enables immediate return from a close() of a TCP Socket. Enabling this option with a non-zero Integer timeout means that a close() will block pending the transmission and acknowledgement of all data written to the peer, at which point the socket is closed gracefully. Value <tt>0</tt> implies that the option is disabled. Value <tt>-1</tt> implies that the JRE default is used.
Returns the timeout until a connection is etablished. A value of zero means the timeout is not used. The default value is zero.
Sets the timeout until a connection is etablished. A value of zero means the timeout is not used. The default value is zero.
Tests whether stale connection check is to be used. Disabling stale connection check may result in slight performance improvement at the risk of getting an I/O error when executing a request over a connection that has been closed at the server side. <tt>false</tt> otherwise.
Defines whether stale connection check is to be used. Disabling stale connection check may result in slight performance improvement at the risk of getting an I/O error when executing a request over a connection that has been closed at the server side. <tt>false</tt> otherwise.
Returns the charset to be used for writing HTTP headers.
Sets the charset to be used for writing HTTP headers.
Returns the default charset to be used for writing content body, when no charset explicitly specified.
Sets the default charset to be used for writing content body, when no charset explicitly specified.
Returns {@link ProtocolVersion protocol version} to be used per default.
Assigns the {@link ProtocolVersion protocol version} to be used by the HTTP methods that this collection of parameters applies to.
non-Javadoc, see interface HttpRequestInterceptorList
non-Javadoc, see interface HttpRequestInterceptorList
non-Javadoc, see interface HttpResponseInterceptorList
non-Javadoc, see interface HttpRequestInterceptorList
non-Javadoc, see interface HttpRequestInterceptorList
non-Javadoc, see interface HttpRequestInterceptorList
non-Javadoc, see interface HttpResponseInterceptorList
non-Javadoc, see interface HttpResponseInterceptorList
non-Javadoc, see interface HttpResponseInterceptorList
non-Javadoc, see interface HttpResponseInterceptorList
Sets the interceptor lists. First, both interceptor lists maintained by this processor will be cleared. Subsequently, elements of the argument list that are request interceptors will be added to the request interceptor list. Elements that are response interceptors will be added to the response interceptor list. Elements that are both request and response interceptor will be added to both lists. Elements that are neither request nor response interceptor will be ignored.
Clears both interceptor lists maintained by this processor.
non-Javadoc, see interface HttpRequestInterceptor (via HttpProcessor)
non-Javadoc, see interface HttpResponseInterceptor (via HttpProcessor)
Creates a copy of this instance
Create a new request executor.
Synchronously send a request and obtain the response.
Prepare a request for sending.
Send a request over a connection. This method also handles the expect-continue handshake if necessary. If it does not have to handle an expect-continue handshake, it will not use the connection for reading or anything else that depends on data coming in over the connection.
Wait for and receive a response. This method will automatically ignore intermediate responses with status code 1xx.
Finish a response. This includes post-processing of the response object. It does <i>not</i> read the response entity, if any. It does <i>not</i> allow for immediate re-use of the connection over which the response is coming in.
Create a new HTTP service.
Converts the byte array of HTTP content characters to a string. If the specified charset is not supported, default system encoding is used.
Converts the specified string to a byte array.  If the charset is not supported the default system charset is used.
Converts the specified string to byte array of ASCII characters.
Converts the byte array of ASCII characters to a string. This method is to be used when decoding content of HTTP elements (such as response headers)
Returns a <code>Method<code> allowing access to {@link Throwable#initCause(Throwable) initCause} method of {@link Throwable}, or <code>null</code> if the method does not exist. <code>null</code> if unavailable.
If we're running on JDK 1.4 or later, initialize the cause for the given throwable.
Instantiates version information.
Obtains the package name. The package name identifies the module or informal unit.
Obtains the name of the versioned module or informal unit. This data is read from the version information for the package.
Obtains the release of the versioned module or informal unit. This data is read from the version information for the package.
Obtains the timestamp of the versioned module or informal unit. This data is read from the version information for the package.
Obtains the classloader used to read the version information. This is just the <code>toString</code> output of the classloader, since the version information should not keep a reference to the classloader itself. That could prevent garbage collection.
Provides the version information in human-readable format.
Loads version information for a list of packages.
Loads version information for a package.
Instantiates version information from properties.
Creates a new ConnectionClosedException with the specified detail message.
Creates a new HttpException with a <tt>null</tt> detail message.
Creates a new HttpException with the specified detail message.
Creates a new HttpException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Creates a new {@link HttpHost HttpHost}, specifying all values. Constructor for HttpHost.
Creates a new {@link HttpHost HttpHost}, with default scheme.
Creates a new {@link HttpHost HttpHost}, with default scheme and port.
Copy constructor for {@link HttpHost HttpHost}.
Returns the host name.
Returns the scheme name.
Return the host URI, as a string.
Obtains the host string, without scheme prefix.
Create an HTTP protocol version designator.
Obtains a specific HTTP version.
Creates a MalformedChunkCodingException without a detail message.
Creates a MalformedChunkCodingException with the specified detail message.
Creates a new MethodNotSupportedException with the specified detail message.
Creates a new MethodNotSupportedException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Creates a new NoHttpResponseException with the specified detail message.
Creates a {@link ParseException} without details.
Creates a {@link ParseException} with a detail message.
Creates a new ProtocolException with a <tt>null</tt> detail message.
Creates a new ProtocolException with the specified detail message.
Creates a new ProtocolException with the specified detail message and cause. if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
Create a protocol version designator.
Returns the name of the protocol.
Returns the major version number of the protocol.
Returns the minor version number of the HTTP protocol.
Obtains a specific version of this protocol. This can be used by derived classes to instantiate themselves instead of the base class, and to define constants for commonly used versions. <br/> The default implementation in this class returns <code>this</code> if the version matches, and creates a new {@link ProtocolVersion} otherwise.
Obtains a hash code consistent with {@link #equals}.
Checks equality of this protocol version with an object. The object is equal if it is a protocl version with the same protocol name, major version number, and minor version number. The specific class of the object is <i>not</i> relevant, instances of derived classes with identical attributes are equal to instances of the base class and vice versa.
Checks whether this protocol can be compared to another one. Only protocol versions with the same protocol name can be {@link #compareToVersion compared}.
Compares this protocol version with another one. Only protocol versions with the same protocol name can be compared. This method does <i>not</i> define a total ordering, as it would be required for {@link java.lang.Comparable}.
Tests if this protocol version is greater or equal to the given one.
Tests if this protocol version is less or equal to the given one.
Converts this protocol version to a string.
Creates an exception without a detail message.
Creates an exception with the specified detail message.
Produce an object suitable for an ASN1OutputStream. <pre> ContentInfo ::= SEQUENCE { </pre>
Basic constructor. allowed uses for the key. e.g. (X509NetscapeCertType.sslCA | X509NetscapeCertType.smimeCA)
return the X9ECParameters object for the named curve represented by the passed in object identifier. Null if the curve isn't present.
return the object identifier signified by the passed in name. Null if there is no object identifier associated with name.
return the named curve name represented by the given object identifier.
returns an enumeration containing the name strings for curves contained in this structure.
Produce an object suitable for an ASN1OutputStream. <pre> EncryptedPrivateKeyInfo ::= SEQUENCE { EncryptedData ::= OCTET STRING KeyEncryptionAlgorithms ALGORITHM-IDENTIFIER ::= { </pre>
<pre> MacData ::= SEQUENCE { </pre>
write out an RSA private key with its associated information as described in PKCS8. <pre> </pre>
The default version
<pre> RSAES-OAEP-params ::= SEQUENCE { } OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= { } PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= { } PKCS1PSourceAlgorithms    ALGORITHM-IDENTIFIER ::= { </pre>
This outputs the key in PKCS1v2 format. <pre> </pre> <p> This routine is written to output PKCS1 version 2.1, private keys.
The default version
<pre> RSASSA-PSS-params ::= SEQUENCE { hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1, OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= { PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= { { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms }, TrailerField ::= INTEGER { trailerFieldBC(1) } </pre>
Produce an object suitable for an ASN1OutputStream. <pre> SignedData ::= SEQUENCE { </pre>
ECPrivateKey ::= SEQUENCE {
dump a DER object as a formatted string with indentation
dump out a DER object as a formatted string, in non-verbose mode.
Dump out the object as a string.
parse backwards
convert in reverse
<pre> AttributeTypeAndValue ::= SEQUENCE { </pre>
<pre> DirectoryString ::= CHOICE { </pre>
Create a single valued RDN.
Create a multi-valued RDN.
<pre> RelativeDistinguishedName ::= AttributeTypeAndValue ::= SEQUENCE { </pre>
Return a X509Name based on the passed in tagged object.
Constructor from ASN1Sequence the principal will be a list of constructed sets, each containing an (OID, String) pair.
return an array of RDNs in structure order.
return an array of RDNs containing the attribute type given by OID in structure order.
test for equality - note: case is ignored.
Set the default style for X500Name construction.
Return the current default style.
Produce an object suitable for an ASN1OutputStream. <pre> </pre>
Don't use this one if you are trying to be RFC 3281 compliant. Use it for v1 attribute certificates only.
Produce an object suitable for an ASN1OutputStream. <pre> AttCertIssuer ::= CHOICE { </pre>
Produce an object suitable for an ASN1OutputStream. <pre> AttCertValidityPeriod  ::= SEQUENCE { } </pre>
return an Attribute object from the given object.
Produce an object suitable for an ASN1OutputStream. <pre> Attribute ::= SEQUENCE { </pre>
Produce an object suitable for an ASN1OutputStream. <pre> AttributeCertificate ::= SEQUENCE { </pre>
Produce an object suitable for an ASN1OutputStream. <pre> AttributeCertificateInfo ::= SEQUENCE { AttCertVersion ::= INTEGER { v2(1) } </pre>
Calulates the keyidentifier using a SHA1 hash over the BIT STRING from SubjectPublicKeyInfo as defined in RFC2459. Example of making a AuthorityKeyIdentifier: <pre> SubjectPublicKeyInfo apki = new SubjectPublicKeyInfo((ASN1Sequence)new ASN1InputStream( AuthorityKeyIdentifier aki = new AuthorityKeyIdentifier(apki); </pre>
create an AuthorityKeyIdentifier with the GeneralNames tag and the serial number provided as well.
create an AuthorityKeyIdentifier with the GeneralNames tag and the serial number provided.
create an AuthorityKeyIdentifier with a precomupted key identifier
create an AuthorityKeyIdentifier with a precomupted key identifier and the GeneralNames tag and the serial number provided as well.
Produce an object suitable for an ASN1OutputStream.
create a cA=true object for the given path length constraint.
Produce an object suitable for an ASN1OutputStream. <pre> BasicConstraints := SEQUENCE { </pre>
Return the distribution points making up the sequence.
Produce an object suitable for an ASN1OutputStream. <pre> CRLDistPoint ::= SEQUENCE SIZE {1..MAX} OF DistributionPoint </pre>
Return the tag number applying to the underlying choice.
Return the tagged object inside the distribution point name.
Returns all extended key usages. The returned vector contains DERObjectIdentifiers.
When the subjectAltName extension contains an Internet mail address, the address MUST be included as an rfc822Name. The format of an rfc822Name is an "addr-spec" as defined in RFC 822 [RFC 822]. When the subjectAltName extension contains a domain name service label, the domain name MUST be stored in the dNSName (an IA5String). The name MUST be in the "preferred name syntax," as specified by RFC 1034 [RFC 1034]. When the subjectAltName extension contains a URI, the name MUST be stored in the uniformResourceIdentifier (an IA5String). The name MUST be a non-relative URL, and MUST follow the URL syntax and encoding rules specified in [RFC 1738].  The name must include both a scheme (e.g., "http" or "ftp") and a scheme-specific-part.  The scheme- specific-part must include a fully qualified domain name or IP address as the host. When the subjectAltName extension contains a iPAddress, the address MUST be stored in the octet string in "network byte order," as specified in RFC 791 [RFC 791]. The least significant bit (LSB) of each octet is the LSB of the corresponding byte in the network address. For IP Version 4, as specified in RFC 791, the octet string MUST contain exactly four octets.  For IP Version 6, as specified in RFC 1883, the octet string MUST contain exactly sixteen octets [RFC 1883].
Create a GeneralName for the given tag from the passed in String. <p> This constructor can handle: <ul> <li>rfc822Name <li>iPAddress <li>directoryName <li>dNSName <li>uniformResourceIdentifier <li>registeredID </ul> For x400Address, otherName and ediPartyName there is no common string format defined. <p> Note: A directory name can be encoded in different ways into a byte representation. Be aware of this if the byte representation is used for comparing results.
Construct a GeneralNames object containing one GeneralName.
Produce an object suitable for an ASN1OutputStream. <pre> GeneralNames ::= SEQUENCE SIZE {1..MAX} OF GeneralName </pre>
Constructor from a given details. According RFC 3280, the minimum and maximum fields are not used with any name forms, thus minimum MUST be zero, and maximum MUST be absent. <p> If minimum is <code>null</code>, zero is assumed, if maximum is <code>null</code>, maximum is absent.
Produce an object suitable for an ASN1OutputStream. Returns: <pre> </pre>
Constructor for a holder for an v1 attribute certificate.
Constructor for a holder for an v2 attribute certificate.
Constructs a holder from a IssuerSerial.
Returns 1 for v2 attribute certificates or 0 for v1 attribute certificates.
Constructs a holder with an entityName for v2 attribute certificates or with a subjectName for v1 attribute certificates.
Constructs a holder from an object digest info.
Returns the entityName for an v2 attribute certificate or the subjectName for an v1 attribute certificate.
Produce an object suitable for an ASN1OutputStream. <pre> IssuerSerial  ::=  SEQUENCE { </pre>
Constructor from given details.
Constructor from ASN1Sequence
Create a KeyPurposeId from an OID string
Basic constructor. allowed uses for the key. e.g. (KeyUsage.keyEncipherment | KeyUsage.dataEncipherment)
Constructor from a given details. <p> permitted and excluded are Vectors of GeneralSubtree objects.
NameConstraints ::= SEQUENCE { permittedSubtrees [0] GeneralSubtrees OPTIONAL, excludedSubtrees [1] GeneralSubtrees OPTIONAL }
Constructor from given details. <p> If <code>digestedObjectType</code> is not {@link #publicKeyCert} or {@link #publicKey} <code>otherObjectTypeID</code> must be given, otherwise it is ignored.
PolicyInformation ::= SEQUENCE {
allowed uses for the key.
This outputs the key in PKCS1v2 format. <pre> </pre> <p>
Calculates the keyidentifier using a SHA1 hash over the BIT STRING from SubjectPublicKeyInfo as defined in RFC3280.
Return a RFC 3280 type 1 key identifier. As in: <pre> (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the value of the BIT STRING subjectPublicKey (excluding the tag, length, and number of unused bits). </pre>
Return a RFC 3280 type 2 key identifier. As in: <pre> (2) The keyIdentifier is composed of a four bit type field with the value 0100 followed by the least significant 60 bits of the SHA-1 hash of the value of the BIT STRING subjectPublicKey. </pre>
for when the public key is an encoded object - if the bitstring can't be decoded this routine throws an IOException. encoded object.
for when the public key is raw bits...
Produce an object suitable for an ASN1OutputStream. <pre> SubjectPublicKeyInfo ::= SEQUENCE { </pre>
creates a time object from a given date - if the date is between 1950 and 2049 a UTCTime object is generated, otherwise a GeneralizedTime is used.
Produce an object suitable for an ASN1OutputStream. <pre> Time ::= CHOICE { </pre>
Produce an object suitable for an ASN1OutputStream. <pre> V2Form ::= SEQUENCE { </pre>
Apply default coversion for the given value depending on the oid and the character range of the value.
Convert the value of the passed in extension to an object
Constructor from ASN1Sequence. the extensions are a list of constructed sequences, either with (OID, OctetString) or (OID, Boolean, OctetString)
constructor from a table of extensions. <p> it's is assumed the table contains OID/String pairs.
Constructor from a table of extensions with ordering. <p> It's is assumed the table contains OID/String pairs.
Constructor from two vectors
return an Enumeration of the extension field's object ids.
return the extension represented by the object identifier passed in.
Reset the generator
Add an extension with the given oid and the passed in value to be included in the OCTET STRING associated with the extension.
Add an extension with the given oid and the passed in byte array to be wrapped in the OCTET STRING associated with the extension.
Return true if there are no extension present in this generator.
Generate an X509Extensions object based on the current state of the generator.
Constructor from ASN1Sequence the principal will be a list of constructed sets, each containing an (OID, String) pair.
constructor from a table of attributes. <p> it's is assumed the table contains OID/String pairs, and the contents of the table are copied into an internal table as part of the construction process. <p> <b>Note:</b> if the name you are trying to generate should be following a specific ordering, you should use the constructor with the ordering specified below.
Constructor from a table of attributes with ordering. <p> it's is assumed the table contains OID/String pairs, and the contents of the table are copied into an internal table as part of the construction process. The ordering vector should contain the OIDs in the order they are meant to be encoded or printed in toString.
Constructor from a table of attributes with ordering. <p> it's is assumed the table contains OID/String pairs, and the contents of the table are copied into an internal table as part of the construction process. The ordering vector should contain the OIDs in the order they are meant to be encoded or printed in toString. <p> The passed in converter will be used to convert the strings into their ASN.1 counterparts.
Takes two vectors one of the oids and the other of the values.
Takes two vectors one of the oids and the other of the values. <p> The passed in converter will be used to convert the strings into their ASN.1 counterparts.
Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or some such, converting it into an ordered set of name attributes.
Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or some such, converting it into an ordered set of name attributes with each string value being converted to its associated ASN.1 type using the passed in converter.
Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or some such, converting it into an ordered set of name attributes. If reverse is true, create the encoded version of the sequence starting from the last element in the string.
Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or some such, converting it into an ordered set of name attributes with each string value being converted to its associated ASN.1 type using the passed in converter. If reverse is true the ASN.1 sequence representing the DN will be built by starting at the end of the string, rather than the start.
Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or some such, converting it into an ordered set of name attributes. lookUp should provide a table of lookups, indexed by lowercase only strings and yielding a DERObjectIdentifier, other than that OID. and numeric oids will be processed automatically. <br> If reverse is true, create the encoded version of the sequence starting from the last element in the string.
Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or some such, converting it into an ordered set of name attributes. lookUp should provide a table of lookups, indexed by lowercase only strings and yielding a DERObjectIdentifier, other than that OID. and numeric oids will be processed automatically. The passed in converter is used to convert the string values to the right of each equals sign to their ASN.1 counterparts. <br>
return a vector of the oids in the name, in the order they were found.
return a vector of the values found in the name, in the order they were found.
return a vector of the values found in the name, in the order they were found, with the DN label corresponding to passed in oid.
as well as the values associated with each element.
convert the structure to a string - if reverse is true the oids and values are listed out starting with the last element in the sequence (ala RFC 2253), otherwise the string will begin with the first element of the structure. If no string definition for the oid is found in oidSymbols the string value of the oid is added. Two standard symbol tables are provided DefaultSymbols, and RFC2253Symbols as part of this class.
Convert an inline encoded hex string rendition of an ASN.1 object back into its corresponding ASN.1 object.
return true if the passed in String can be represented without loss as a PrintableString, false otherwise.
F2m Curves
Produce an object suitable for an ASN1OutputStream. <pre> Parameters ::= CHOICE { </pre>
Produce an object suitable for an ASN1OutputStream. <pre> Curve ::= SEQUENCE { </pre>
Produce an object suitable for an ASN1OutputStream. <pre> ECParameters ::= SEQUENCE { </pre>
Produce an object suitable for an ASN1OutputStream. <pre> ECPoint ::= OCTET STRING </pre> <p> Octet string produced using ECPoint.getEncoded().
Produce an object suitable for an ASN1OutputStream. <pre> FieldElement ::= OCTET STRING </pre> <p> <ol> <li> if <i>q</i> is an odd prime then the field element is processed as an Integer and converted to an octet string according to x 9.62 4.3.1.</li> <li> if <i>q</i> is 2<sup>m</sup> then the bit string contained in the field element is converted into an octet string with the same ordering padded at the front if necessary. </li> </ol>
Constructor for elliptic curves over prime fields <code>F<sub>2</sub></code>.
Constructor for elliptic curves over binary fields <code>F<sub>2<sup>m</sup></sub></code>. <code>F<sub>2<sup>m</sup></sub></code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>..
Produce a DER encoding of the following structure. <pre> FieldID ::= SEQUENCE { </pre>
Return the default BER or DER encoding for this object.
Return either the default for "BER" or a DER encoding if "DER" is specified.
Return the DER encoding of the object, null if the DER encoding can not be made.
Create an ASN1InputStream based on the input byte array. The length of DER objects in the stream is automatically limited to the length of the input array.
Create an ASN1InputStream where no DER object will be longer than limit.
Create an ASN1InputStream where no DER object will be longer than limit, and constructed objects such as sequences will be parsed lazily.
build an object given its tag and the number of bytes to construct it from.
BEGIN android-changed
END android-changed
Create a base ASN.1 object from a byte stream.
Return an OID that creates a branch under the current one.
return an Octet String from a tagged object.
return an Octet String from the given object.
return an ASN1Sequence from the given object.
Return an ASN1 sequence from a tagged object. There is a special case here, if an object appears to have been explicitly tagged on reading but we were expecting it to be implicitly tagged in the normal course of events it indicates that we lost the surrounding sequence - so we need to add it back (this will happen if the tagged object is a sequence that contains other sequences). If you are dealing with implicitly tagged sequences you really <b>should</b> be using this method.
return the object at the sequence position indicated by index.
return the number of objects in this sequence.
return an ASN1Set from the given object.
Return an ASN1 set from a tagged object. There is a special case here, if an object appears to have been explicitly tagged on reading but we were expecting it to be implicitly tagged in the normal course of events it indicates that we lost the surrounding set - so we need to add it back (this will happen if the tagged object is a sequence that contains other sequences). If you are dealing with implicitly tagged sets you really <b>should</b> be using this method.
return the object at the set position indicated by index.
return the number of objects in this set.
return true if a <= b (arrays are assumed padded with zeros).
Create a tagged object in the explicit style.
Create a tagged object with the style given by the value of explicit. <p> If the object implements ASN1Choice the tag style will always be changed to explicit in accordance with the ASN.1 encoding rules. </p>
return whether or not the object may be explicitly tagged. <p> Note: if the object has been read from an input stream, the only time you can be sure if isExplicit is returning the true state of affairs is if it returns false. An implicitly tagged object may appear to be explicitly tagged, so you need to understand the context under which the reading was done as well, see getObject below.
return whatever was following the tag. <p> Note: tagged objects are generally context dependent if you're trying to extract a tagged object you should be going via the appropriate getInstance method.
Return the object held in this tagged object as a parser assuming it has the type of the passed in tag. If the object doesn't have a parser associated with it, the base object is returned.
convert a vector of octet strings into a single byte string
return the DER octets that make up this string.
create an empty sequence
create a sequence containing one object
create a sequence containing a vector of objects.
create an empty sequence
create a set containing one object
create an implicitly tagged object that contains a zero length sequence.
Return the enclosed object assuming explicit tagging.
Return the enclosed object assuming implicit tagging.
return the correct number of pad bits for a bit string defined in a 32 bit constant
return the correct number of bytes for a bit string defined in a 32 bit constant
return a Bit String from the passed in object
return a Bit String from a tagged object.
return a BMP String from the given object.
return a BMP String from a tagged object.
basic constructor - byte encoded string.
basic constructor
return a boolean from the passed in object.
return a DERBoolean from the passed in boolean.
BEGIN android-added return a DERBoolean from the passed in array.
return a Boolean from a tagged object.
BEGIN android-changed
return an integer from the passed in object
return an Enumerated from a tagged object.
Creates a new instance of DERExternal See X.690 for more informations about the meaning of these parameters
Creates a new instance of DERExternal. See X.690 for more informations about the meaning of these parameters
Returns the data value descriptor
Returns the direct reference of the external element
Returns the encoding of the content. Valid values are <ul> <li><code>0</code> single-ASN1-type</li> <li><code>1</code> OCTET STRING</li> <li><code>2</code> BIT STRING</li> </ul>
Returns the content of this element
Returns the indirect reference of this element
Sets the data value descriptor
Sets the direct reference of the external element
Sets the encoding of the content. Valid values are <ul> <li><code>0</code> single-ASN1-type</li> <li><code>1</code> OCTET STRING</li> <li><code>2</code> BIT STRING</li> </ul>
Sets the content of this element
Sets the indirect reference of this element
return a generalized time from the passed in object
return a Generalized Time object from a tagged object.
The correct format for this is YYYYMMDDHHMMSS[.f]Z, or without the Z for local time, or Z+-HHMM on the end, for difference between local time and UTC time. The fractional second amount f must consist of at least one number with trailing zeroes removed.
base constructer from a java.util.date object
Return the time.
return the time - always in the form of YYYYMMDDhhmmssGMT(+hh:mm|-hh:mm). <p> Normally in a certificate we would expect "Z" rather than "GMT", however adding the "GMT" means we can just use: <pre> </pre> To read in the time and get a date which is compatible with our local time zone.
return a IA5 string from the passed in object
return an IA5 String from a tagged object.
basic constructor - with bytes.
basic constructor - without validation.
Constructor with optional validation. contains characters that should not be in an IA5String.
return true if the passed in String can be represented without loss as an IA5String, false otherwise.
return an Integer from a tagged object.
in some cases positive values get crammed into a space, that's not quite big enough...
BEGIN android-changed
return a Numeric string from the passed in object
return an Numeric String from a tagged object.
basic constructor - with bytes.
basic constructor -  without validation..
Constructor with optional validation. contains characters that should not be in a NumericString.
Return true if the string can be represented as a NumericString ('0'..'9', ' ')
return an OID from the passed in object
return an Object Identifier from a tagged object.
return a printable string from the passed in object.
return a Printable String from a tagged object.
basic constructor - byte encoded string.
basic constructor - this does not validate the string
Constructor with optional validation. contains characters that should not be in a PrintableString.
return true if the passed in String can be represented without loss as a PrintableString, false otherwise.
create an empty sequence
create a sequence containing one object
create a sequence containing a vector of objects.
create a sequence containing an array of objects.
A note on the implementation: <p> As DER requires the constructed, definite-length model to be used for structured types, this varies slightly from the ASN.1 descriptions given. Rather than just outputing SEQUENCE, we also have to specify CONSTRUCTED, and the objects length.
create an empty set
create a set from an array of objects.
A note on the implementation: <p> As DER requires the constructed, definite-length model to be used for structured types, this varies slightly from the ASN.1 descriptions given. Rather than just outputing SET, we also have to specify CONSTRUCTED, and the objects length.
return a T61 string from the passed in object.
return an T61 String from a tagged object.
basic constructor - with bytes.
basic constructor - with string.
create an implicitly tagged object that contains a zero length sequence.
return a Universal String from the passed in object.
return a Universal String from a tagged object.
basic constructor - byte encoded string.
return an UTC Time from the passed in object.
return an UTC Time from a tagged object.
The correct format for this is YYMMDDHHMMSSZ (it used to be that seconds were never encoded. When you're creating one of these objects from scratch, that's what you want to use, otherwise we'll try to deal with whatever gets read from the input stream... (this is why the input format is different from the getTime() method output). <p>
base constructer from a java.util.date object
return the time as a date based on whatever a 2 digit year will return. For standardised processing use getAdjustedDate().
return the time as an adjusted date in the range of 1950 - 2049.
return the time - always in the form of YYMMDDhhmmssGMT(+hh:mm|-hh:mm). <p> Normally in a certificate we would expect "Z" rather than "GMT", however adding the "GMT" means we can just use: <pre> </pre> To read in the time and get a date which is compatible with our local time zone. <p> <b>Note:</b> In some cases, due to the local date processing, this may lead to unexpected results. If you want to stick the normal convention of 1950 to 2049 use the getAdjustedTime() method.
return a time string as an adjusted date with a 4 digit year. This goes in the range of 1950 - 2049.
return an UTF8 string from the passed in object.
return an UTF8 String from a tagged object.
basic constructor - byte encoded string.
basic constructor
return a Visible String from the passed in object.
return a Visible String from a tagged object.
basic constructor - byte encoded string.
basic constructor
given a short term public key from a given party calculate the next message in the agreement sequence.
Constructor for variable length word
Copy constructor.  We are using copy constructors in place of the Object.clone() interface as this interface is not supported by J2ME.
adjust the byte counts so that byteCount2 represents the upper long (less 3 bits) word of the byte count.
SHA-384 and SHA-512 functions (as for SHA-256 but for longs)
Standard constructor
Copy constructor.  This will copy the state of the provided message digest.
reset the chaining variables to the IV values.
rotate int x left n bits.
F, G, H and I are the basic MD5 functions.
Creates a new OpenSSLMessageDigest instance for the given algorithm name.
Standard constructor
Copy constructor.  This will copy the state of the provided message digest.
SHA-256 functions
Standard constructor
Copy constructor.  This will copy the state of the provided message digest.
Standard constructor
Copy constructor.  This will copy the state of the provided message digest.
return the input block size. The largest message we can process is (key_size_in_bits + 3)/16, which in our world comes to key_size_in_bytes / 2.
return the maximum possible size for the output.
set the number of bits in the next message to be treated as pad bits.
retrieve the number of pad bits in the last decoded message.
be badly formatted.
int to octet string.
mask generator function, as described in PKCS1v2.
Basic constructor.
for J2ME compatibility
Calculate the necessary round keys The number of calculations depends on key size and block size AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits This code is written assuming those are the only possible values
default constructor - 128 bit block size.
initialise an AES cipher. inappropriate.
default constructor - 128 bit block size.
initialise a Blowfish cipher. inappropriate.
================================== Private Implementation ==================================
apply the encryption cycle to each value pair in the table.
Encrypt the given input starting at the given offset and place the result in the provided buffer starting at the given offset. The input will be an exact multiple of our blocksize.
Decrypt the given input starting at the given offset and place the result in the provided buffer starting at the given offset. The input will be an exact multiple of our blocksize.
standard constructor.
initialise a DESede cipher. inappropriate.
Method init
Method getAlgorithmName
Method wrap
Method unwrap
Some key wrap algorithms make use of the Key Checksum defined in CMS [CMS-Algorithms]. This is used to provide an integrity check value for the key being wrapped. The algorithm is - Compute the 20 octet SHA-1 hash on the key being wrapped. - Use the first 8 octets of this hash as the checksum value.
standard constructor.
initialise a DES cipher. inappropriate.
generate an integer based working key based on our secret key and what we processing we are planning to do. Acknowledgements for this routine go to James Gillogly & Phil Karn.
the DES engine.
initialise a RC2 cipher. inappropriate.
return the result rotating the 16 bit number in x left by y
initialise a RC4 cipher. inappropriate.
Private implementation
initialise the RSA engine.
Return the maximum size for an input block to this engine. For RSA this is always one byte less than the key size on encryption, and the same length as the key size on decryption.
Return the maximum size for an output block to this engine. For RSA this is always one byte less than the key size on decryption, and the same length as the key size on encryption.
Process a single block using the basic RSA algorithm.
initialise a Twofish cipher. inappropriate.
================================== Private Implementation ==================================
Encrypt the given input starting at the given offset and place the result in the provided buffer starting at the given offset. The input will be an exact multiple of our blocksize. encryptBlock uses the pre-calculated gSBox[] and subKey[] arrays.
TODO:  This can be optimised and made cleaner by combining the functionality in this function and applying it appropriately to the creation of the subkeys during key setup.
Use (12, 8) Reed-Solomon code over GF(256) to produce a key S-box 32-bit entity from 2 key material 32-bit entities.
Reed-Solomon code parameters: (12,8) reversible code:<p> <pre> g(x) = x^4 + (a+1/a)x^3 + ax^2 + (a+1/a)x + 1 </pre> where a = primitive root of field generator 0x14D
initialise the key generator - if strength is set to zero the key generated will be 192 bits in size, otherwise strength can be 128 or 192 (or 112 or 168 if you don't count parity bits), depending on whether you wish to do 2-key or 3-key triple DES.
initialise the key generator - if strength is set to zero the key generated will be 64 bits in size, otherwise strength can be 64 or 56 bits (if you don't count the parity bits).
Initialise the parameters generator.
which generates the p and g values from the given parameters, returning the DHParameters object. <p> Note: can take a while...
Finds a pair of prime BigInteger's {p, q: p = 2q + 1} (see: Handbook of Applied Cryptography 4.86)
Select a high order element of the multiplicative group Zp p and q must be s.t. p = 2*q + 1, where p and q are prime (see generateSafePrimes)
initialise the key generator.
TODO Make public to enable support for DSA keys > 1024 bits
which generates the p and g values from the given parameters, returning the DSAParameters object. <p> Note: can take a while...
generate suitable parameters for DSA, in line with <i>FIPS 186-3 A.1 Generation of the FFC Primes p and q</i>.
A.2.3 Verifiable Canonical Generation of the Generator g
Given the domain parameters this routine generates an EC key pair in accordance with X9.62 section 5.2.1 pages 26, 27.
Construct a OpenSSL Parameters generator.
Initialise - note the iteration count for this algorithm is fixed at 1.
the derived key function, the ith hash of the password and the salt.
Generate a key parameter derived from the password, salt, and iteration count we are currently initialised with.
Generate a key with initialisation vector parameter derived from the password, salt, and iteration count we are currently initialised with.
Generate a key parameter for use with a MAC derived from the password, salt, and iteration count we are currently initialised with.
Construct a PKCS 12 Parameters generator. This constructor will accept any digest which also implements ExtendedDigest.
add a + b + 1, returning the result in a. The a value is treated as a BigInteger of length (b.length * 8) bits. The result is modulo 2^b.length in case of overflow.
generation of a derived key ala PKCS12 V1.0.
Construct a PKCS 5 Scheme 1 Parameters generator.
construct a PKCS5 Scheme 2 Parameters generator.
create a standard MAC based on a CBC block cipher. This will produce an authentication code half the length of the block size of the cipher.
create a standard MAC based on a block cipher with the size of the MAC been given in bits. This class uses CBC mode as the basis for the MAC generation. <p> Note: the size of the MAC must be at least 24 bits (FIPS Publication 81), or 16 bits if being used as a data authenticator (FIPS Publication 113), and in general should be less than the size of the block cipher as it reduces the chance of an exhaustive attack (see Handbook of Applied Cryptography).
P is the value with only bit i=1 set
Basic constructor.
return the underlying block cipher that we are wrapping.
Initialise the cipher and, possibly, the initialisation vector (IV). If an IV isn't passed as part of the parameter, the IV will be all zeros. encryption, if false for decryption. inappropriate.
return the algorithm name and mode.
return the block size of the underlying cipher.
Process one block of input from the array in and write it to the out array. space in out.
reset the chaining vector back to the IV and reset the underlying cipher.
Do the appropriate chaining step for CBC mode encryption. space in out.
Do the appropriate chaining step for CBC mode decryption. space in out.
Basic constructor.
Returns a byte array containing the mac calculated as part of the last encrypt or decrypt operation.
Basic constructor. feedback mode.
Initialise the cipher and, possibly, the initialisation vector (IV). If an IV isn't passed as part of the parameter, the IV will be all zeros. An IV which is too short is handled in FIPS compliant fashion. encryption, if false for decryption. inappropriate.
return the algorithm name and mode. and the block size in bits.
return the block size we are operating at.
Do the appropriate processing for CFB mode encryption. space in out.
Do the appropriate processing for CFB mode decryption. space in out.
Create a buffered block cipher that uses Cipher Text Stealing
return the size of the output buffer required for an update an input of len bytes. with len bytes of input.
return the size of the output buffer required for an update plus a doFinal with an input of len bytes. with len bytes of input.
process a single byte, producing an output block if neccessary.
process an array of bytes, producing output if necessary.
Process the last block in the buffer. the output. initialised. case the exception will never get thrown).
Basic constructor. counter mode (must have a 64 bit block size).
return the algorithm name and mode. and the block size in bits
return the block size we are operating at (in bytes).
reset the feedback vector back to the IV and reset the underlying cipher.
array of bytes to type int
int to array of bytes
Basic constructor. feedback mode.
Basic constructor.
Initialise the padder.
Return the name of the algorithm the padder implements.
add the pad bytes to the passed in block, returning the number of bytes added.
return the number of pad bytes present in the block.
Create a buffered block cipher with the desired padding.
Create a buffered block cipher PKCS7 padding
initialise the cipher. encryption, if false for decryption. inappropriate.
return the minimum size of the output buffer required for an update plus a doFinal with an input of len bytes. with len bytes of input.
Process the last block in the buffer. If the buffer is currently full and padding needs to be added a call to doFinal will produce 2 * getBlockSize() bytes. the output or we are decrypting and the input is not block size aligned. initialised.
add the pad bytes to the passed in block, returning the number of bytes added. <p> Note: this assumes that the last block of plain text is always passed to it inside in. i.e. if inOff is zero, indicating the entire block is to be overwritten with padding the value of in should be the same as the last block of plain text. </p>
Base constructor.
return true if the passed in key is a DES-EDE weak key.
DES has 16 weak keys.  This method will check if the given DES key material is weak or semi-weak. Key material that is too short is regarded as weak. <p> Cryptography"</a> by Bruce Schneier for more information.
DES Keys use the LSB as the odd parity bit.  This can be used to check for corrupt keys.
Return the subgroup factor J.
Return the minimum length of the private value.
Return the private value length in bits - if set, zero otherwise
generate a signature for the given message using the key we were initialised with. For conventional DSA the message should be a SHA-1 hash of the message of interest.
return true if the value r and s represent a DSA signature for the passed in message for standard DSA the message should be a SHA-1 hash of the real message to be verified.
5.3 pg 28 generate a signature for the given message using the key we were initialised with. For conventional DSA the message should be a SHA-1 hash of the message of interest.
5.4 pg 29 return true if the value r and s represent a DSA signature for the passed in message (for standard DSA the message should be a SHA-1 hash of the real message to be verified).
initialise the signer for signing or verification.
update the internal digest with the byte b
update the internal digest with the byte array in
Generate a signature for the message we've been loaded with using the key we were initialised with.
return true if the internal state represents the signature described in the passed in array.
Create a private key parameter from a PKCS8 PrivateKeyInfo encoding.
Create a private key parameter from a PKCS8 PrivateKeyInfo encoding read from a stream.
Create a private key parameter from the passed in PKCS8 PrivateKeyInfo object.
Create a public key from a SubjectPublicKeyInfo encoding
Create a public key from a SubjectPublicKeyInfo encoding read from a stream
Create a public key from the passed in SubjectPublicKeyInfo
basic constructor.
return the public key parameters.
return the private key parameters.
constructor for subclasses
Create a buffered block cipher without padding.
return the cipher this object wraps.
return the blocksize for the underlying cipher.
return the size of the output buffer required for an update plus a doFinal with an input of 'length' bytes. with 'length' bytes of input.
Process the last block in the buffer. the output, or the input is not block size aligned and should be. initialised. aligned.
Reset the buffer and cipher. After resetting the object is in the same state as it was after the last init (if there was one).
generate a secret key.
base constructor.
create a CryptoException with the given message.
base constructor.
create a InvalidCipherTextException with the given message.
initialise the generator with a source of randomness and a strength (in bits).
return the random source associated with this generator.
return the bit strength for keys produced by this generator,
base constructor.
initialise the PBE generator. is to be applied for.
return the password byte array.
return the salt byte array.
return the iteration count.
converts a password to a byte array according to the scheme in PKCS5 (ascii, no padding)
converts a password to a byte array according to the scheme in PKCS5 (UTF-8, no padding)
converts a password to a byte array according to the scheme in PKCS12 (unicode, big endian, 2 zero pad bytes at the end).
basic constructor. one.
initialise the underlying cipher.
return the name of the algorithm we are wrapping.
encrypt/decrypt a single byte returning the result.
process a block of bytes from in putting the result into out.
reset the underlying cipher. This leaves it in the same state it was at after the last init (if there was one).
Returns a sorted array of middle terms of the reduction polynomial. of length 1 or 3. This array always has length 3.
BEGIN android-removed private DerivationFunction     kdf; END android-removed
Construct a new provider.  This should only be required when using runtime registration of the provider using the <code>Security.addProvider()</code> mechanism.
message digests
signature algorithms.
BEGIN android-removed private void addSignatureAlgorithm( END android-removed
Search the given Set of TrustAnchor's for one that is the issuer of the given X509 certificate. Uses the default provider for signature verification. <code>null</code> if not.
Search the given Set of TrustAnchor's for one that is the issuer of the given X509 certificate. Uses the specified provider for signature verification, or the default provider if null. <code>null</code> if not.
Returns the issuer of an attribute certificate or certificate.
Extract the value of the given extension, if it exists.
policy checking
Return a Collection of all certificates or attribute certificates found in the X509Store's that are matching the certSelect criteriums.
BEGIN android-removed protected static Collection findCertificates(X509AttributeCertStoreSelector certSelect, throws AnnotatedException END android-removed
Add the CRL issuers from the cRLIssuer field of the distribution point or from the certificate if not given to the issuer criterion of the <code>selector</code>. <p> The <code>issuerPrincipals</code> are a collection with a single <code>X500Principal</code> for <code>X509Certificate</code>s. For {@link X509AttributeCertificate}s the issuer may contain more than one <code>X500Principal</code>. contain only <code>X500Principal</code>s.
Fetches delta CRLs according to RFC 3280 section 5.2.4.
Fetches complete CRLs according to RFC 3280.
Return the next working key inheriting DSA parameters if necessary. <p> This methods inherits DSA parameters from the indexed certificate or previous certificates in the certificate chain to the returned <code>PublicKey</code>. The list is searched upwards, meaning the end certificate is at position 0 and previous certificates are following. </p> <p> If the indexed certificate does not contain a DSA key this method simply returns the public key. If the DSA key already contains DSA parameters the key is also only returned. </p>
Find the issuer certificates of a given certificate.
return the encoding format we produce in getEncoded().
Return a PKCS8 representation of the key. The sequence returned represents a full PrivateKeyInfo object.
BEGIN android-removed private GOST3410PublicKeyAlgParameters       gostParams; END android-removed
called for implicitCA
construct a private key from it's org.bouncycastle.crypto equivalent.
construct a private key from an RSAPrivateCrtKeySpec
construct a private key from another RSAPrivateCrtKey.
construct an RSA key from a private key info object.
construct an RSA key from a ASN.1 RSA private key object.
return the public exponent.
return the prime P.
return the prime Q.
return the prime exponent for P.
return the prime exponent for Q.
return the CRT coefficient.
return the modulus.
should never be called.
should never be called.
Return the PKCS#3 ASN.1 structure DHParameter. <p> <pre> DHParameter ::= SEQUENCE { </pre>
Return the X.509 ASN.1 structure DSAParameter. <p> <pre> DSAParameter ::= SEQUENCE { </pre>
Return the PKCS#1 ASN.1 structure RSAES-OAEP-params.
care - this constructor is actually used by outside organisations
BEGIN android-removed protected boolean elGamalFactory = false; END android-removed
create a public key from the given DER encoded input stream.
create a public key from the given public key info object.
create a private key from the given DER encoded input stream.
create a private key from the given public key info object.
this is not quite complete - we should follow up on the chain, a bit tricky if a certificate appears in more than one chain...
simply return the cert for the private key
Generates a certificate object and initializes it with the data read from the input stream inStream.
Returns a (possibly empty) collection view of the certificates read from the given input stream inStream.
Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream.
Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream. The inStream may contain a sequence of DER-encoded CRLs, or a PKCS#7 CRL set.  This is a PKCS#7 SignedData object, with the only signficant field being crls.  In particular the signature and the contents are ignored.
construct a key and iv (if necessary) suitable for use with a Cipher.
generate a PBE based key suitable for a MAC algorithm, the key size is chosen according the MAC size, or the hashing algorithm, whichever is greater.
Creates a CertPath of the specified type. This constructor is protected because most users should use a CertificateFactory to create CertPaths.
Returns an iteration of the encodings supported by this certification path, with the default encoding first. Attempts to modify the returned Iterator via its remove method result in an UnsupportedOperationException.
Returns the encoded form of this certification path, using the default encoding.
Returns the encoded form of this certification path, using the specified encoding. occurs or the encoding requested is not supported
Returns the list of certificates in this certification path. The List returned must be immutable and thread-safe.
Return a DERObject containing the encoded certificate.
Build and validate a CertPath using the given parameter.
END android-added
Return a Collection of all CRLs found in the X509Store's that are matching the crlSelect criteriums.
Returns the intersection of the permitted IP ranges in <code>permitted</code> with <code>ip</code>.
Returns the union of the excluded IP ranges in <code>excluded</code> with <code>ip</code>.
Calculates the union if two IP ranges.
Calculates the interesction if two IP ranges.
Concatenates the IP address with its subnet mask.
Splits the IP addresses and their subnet mask.
Based on the two IP addresses and their subnet masks the IP range is computed for each IP address - subnet mask pair and returned as the minimum IP address and the maximum address of the range.
Checks if the IP <code>ip</code> is included in the permitted set <code>permitted</code>.
Checks if the IP <code>ip</code> is included in the excluded set <code>excluded</code>.
Checks if the IP address <code>ip</code> is constrained by <code>constraint</code>.
The common part of <code>email1</code> and <code>email2</code> is added to the union <code>union</code>. If <code>email1</code> and <code>email2</code> have nothing in common they are added both.
The most restricting part from <code>email1</code> and <code>email2</code> is added to the intersection <code>intersect</code>.
Checks if the given GeneralName is in the permitted set.
Check if the given GeneralName is contained in the excluded set.
Updates the permitted set of these name constraints with the intersection with the given subtree.
Adds a subtree to the excluded set of these name constraints.
Returns the maximum IP address.
Returns the minimum IP address.
Compares IP address <code>ip1</code> with <code>ip2</code>. If ip1 is equal to ip2 0 is returned. If ip1 is bigger 1 is returned, -1 otherwise.
Returns the logical OR of the IP addresses <code>ip1</code> and <code>ip2</code>.
Stringifies an IPv4 or v6 address with subnet mask.
Constructs are reason mask with the reasons.
A reason mask with no reason.
Adds all reasons from the reasons mask to this mask.
Returns <code>true</code> if this reasons mask contains all possible reasons.
Intersects this mask with the given reasons mask.
Returns <code>true</code> if the passed reasons mask has new reasons.
Returns the reasons in this mask.
If the complete CRL includes an issuing distribution point (IDP) CRL extension check the following: <p/> (i) If the distribution point name is present in the IDP CRL extension and the distribution field is present in the DP, then verify that one of the names in the IDP matches one of the names in the DP. If the distribution point name is present in the IDP CRL extension and the distribution field is omitted from the DP, then verify that one of the names in the IDP matches one of the names in the cRLIssuer field of the DP. </p> <p/> (ii) If the onlyContainsUserCerts boolean is asserted in the IDP CRL extension, verify that the certificate does not include the basic constraints extension with the cA boolean asserted. </p> <p/> (iii) If the onlyContainsCACerts boolean is asserted in the IDP CRL extension, verify that the certificate includes the basic constraints extension with the cA boolean asserted. </p> <p/> (iv) Verify that the onlyContainsAttributeCerts boolean is not asserted. </p>
If the DP includes cRLIssuer, then verify that the issuer field in the complete CRL matches cRLIssuer in the DP and that the complete CRL contains an issuing distribution point extension with the indirectCRL boolean asserted. Otherwise, verify that the CRL issuer matches the certificate issuer.
Obtain and validate the certification path for the complete CRL issuer. If a key usage extension is present in the CRL issuer's certificate, verify that the cRLSign bit is set.
If use-deltas is set, verify the issuer and scope of the delta CRL.
Checks a distribution point for revocation information for the certificate <code>cert</code>.
Checks a certificate if it is revoked.
BEGIN android-changed added ShortBufferException to throws statement
END android-changed
return a more "meaningful" representation for the signature algorithm used in the certficate.
return the object identifier for the signature.
return the signature parameters, or null if there aren't any.
END android-changed
Constructor for CRLEntries of indirect CRLs. If <code>isIndirect</code> is <code>false</code> {@link #getCertificateIssuer()} will always return <code>null</code>, <code>previousCertificateIssuer</code> is ignored. If this <code>isIndirect</code> is specified and this CRLEntry has no certificate issuer CRL entry extension <code>previousCertificateIssuer</code> is returned by {@link #getCertificateIssuer()}.
Will return true if any extensions are present and marked as critical as we currently dont handle any extensions!
Cache the hashCode value - calculating it with the standard method.
Will return true if any extensions are present and marked as critical as we currently dont handle any extensions!
Returns a string representation of this CRL.
Checks whether the given certificate is on this CRL. false otherwise.
END android-changed
Return the digest algorithm using one of the standard JCA string representations rather the the algorithm identifier (if possible).
return the domain parameters for the curve
return the name of the curve the EC domain parameters belong to.
return the curve along which the base point lies.
return the base point we are using for these domain parameters.
return the order N of G
return the cofactor H to the order of G.
return the seed used to generate this curve (if available).
base constructor
return the private number D
base constructor
return the public point q
return a parameter spec representing the passed in named curve. The routine returns null if the curve is not present.
return an enumeration of the names of the available curves.
construct a PKCS10 certification request from a DER encoded byte stream.
create a PKCS10 certfication request using the BC provider.
create a PKCS10 certfication request using the named provider.
return the public key associated with the certification request - the public key is created using the BC provider.
verify the request using the BC provider.
verify the request using the passed in provider.
verify the request using the passed in public key and the provider..
return a DER encoded byte array representing this object
return the issuer of the given cert as an X509PrincipalObject.
return the subject of the given cert as an X509PrincipalObject.
return the issuer of the given CRL as an X509PrincipalObject.
Constructor from an encoded byte array.
Constructor from an X509Name object.
constructor from a table of attributes. <p> it's is assumed the table contains OID/String pairs.
constructor from a table of attributes and a vector giving the specific ordering required for encoding or conversion to a string. <p> it's is assumed the table contains OID/String pairs.
constructor from a vector of attribute values and a vector of OIDs.
takes an X509 dir name as a string of the format "C=AU,ST=Victoria", or some such, converting it into an ordered set of name attributes.
Takes an X509 dir name as a string of the format "C=AU,ST=Victoria", or some such, converting it into an ordered set of name attributes. If reverse is false the dir name will be encoded in the order of the (name, value) pairs presented, otherwise the encoding will start with the last (name, value) pair and work back.
Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or some such, converting it into an ordered set of name attributes. lookUp should provide a table of lookups, indexed by lowercase only strings and yielding a DERObjectIdentifier, other than that OID. and numeric oids will be processed automatically. <p> If reverse is true, create the encoded version of the sequence starting from the last element in the string.
"Shamir's Trick", originally due to E. G. Straus (Addition chains of vectors. American Mathematical Monthly, 71(7):806-808, Aug./Sept. 1964) <pre> Input: The points P, Q, scalar k = (km?, ... , k1, k0) and scalar l = (lm?, ... , l1, l0). Output: R = k * P + l * Q. 1: Z <- P + Q 2: R <- O 3: for i from m-1 down to 0 do 4:        R <- R + R        {point doubling} 5:        if (ki = 1) and (li = 0) then R <- R + P end if 6:        if (ki = 0) and (li = 1) then R <- R + Q end if 7:        if (ki = 1) and (li = 1) then R <- R + Z end if 8: end for 9: return R </pre>
Decode a point on this curve from its ASN.1 encoding. The different encodings are taken account of, including point compression for <code>F<sub>p</sub></code> (X9.62 s 4.2.1 pg 17).
Constructor for Trinomial Polynomial Basis (TPB). <code>F<sub>2<sup>m</sup></sub></code>. x<sup>k</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. for non-supersingular elliptic curves over <code>F<sub>2<sup>m</sup></sub></code>. for non-supersingular elliptic curves over <code>F<sub>2<sup>m</sup></sub></code>.
Constructor for Trinomial Polynomial Basis (TPB). <code>F<sub>2<sup>m</sup></sub></code>. x<sup>k</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. for non-supersingular elliptic curves over <code>F<sub>2<sup>m</sup></sub></code>. for non-supersingular elliptic curves over <code>F<sub>2<sup>m</sup></sub></code>. <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
Constructor for Pentanomial Polynomial Basis (PPB). <code>F<sub>2<sup>m</sup></sub></code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. for non-supersingular elliptic curves over <code>F<sub>2<sup>m</sup></sub></code>. for non-supersingular elliptic curves over <code>F<sub>2<sup>m</sup></sub></code>.
Constructor for Pentanomial Polynomial Basis (PPB). <code>F<sub>2<sup>m</sup></sub></code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. for non-supersingular elliptic curves over <code>F<sub>2<sup>m</sup></sub></code>. for non-supersingular elliptic curves over <code>F<sub>2<sup>m</sup></sub></code>. <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
Returns true if this is a Koblitz curve (ABC curve).
Returns the parameter <code>&mu;</code> of the elliptic curve. Koblitz curve.
<code>s<sub>1</sub></code> used for partial modular reduction for Koblitz curves.
Decompresses a compressed point P = (xp, yp) (X9.62 s 4.2.2).
Solves a quadratic equation <code>z<sup>2</sup> + z = beta</code>(X9.62 D.1.6) The other solution is <code>z + 1</code>.
Return true if curve uses a Trinomial basis.
return the field name for this field.
D.1.4 91 return a sqrt root - the routine verifies that the calculation returns the right value - if none exists it returns null.
Constructor for PPB. <code>F<sub>2<sup>m</sup></sub></code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>. x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>.
Constructor for TPB. <code>F<sub>2<sup>m</sup></sub></code>. x<sup>k</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>.
Checks, if the ECFieldElements <code>a</code> and <code>b</code> are elements of the same field <code>F<sub>2<sup>m</sup></sub></code> (having the same representation). are not elements of the same field <code>F<sub>2<sup>m</sup></sub></code> (having the same representation).
<code>F<sub>2<sup>m</sup></sub></code>, either of TPB (trinomial basis representation) or PPB (pentanomial basis representation).
x<sup>k</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>.<br> PPB: The integer <code>k1</code> where <code>x<sup>m</sup> + x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>.<br>
PPB: The integer <code>k2</code> where <code>x<sup>m</sup> + x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>.<br>
PPB: The integer <code>k3</code> where <code>x<sup>m</sup> + x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code> represents the reduction polynomial <code>f(z)</code>.<br>
Sets the <code>PreCompInfo</code>. Used by <code>ECMultiplier</code>s to save the precomputation for this <code>ECPoint</code> to store the precomputation result for use by subsequent multiplication. <code>ECMultiplier</code>.
Sets the default <code>ECMultiplier</code>, unless already set.
Multiplies this <code>ECPoint</code> by the given number.
Create a point which encodes with point compression.
Create a point that encodes with or without point compresion.
return the field element encoded with point compression. (S 4.3.6)
B.3 pg 62
B.3 pg 62
D.3.2 pg 102 (see Note:)
Check, if two <code>ECPoint</code>s can be added or subtracted. cannot be added.
Adds another <code>ECPoints.F2m</code> to <code>this</code> without checking if both points are on the same curve. Used by multiplication algorithms, because there all points are a multiple of the same point and hence the checks can be omitted. <code>this</code>.
Subtracts another <code>ECPoints.F2m</code> from <code>this</code> without checking if both points are on the same curve. Used by multiplication algorithms, because there all points are a multiple of the same point and hence the checks can be omitted. <code>this</code>.
Sets the appropriate <code>ECMultiplier</code>, unless already set.
D.3.2 pg 101
TODO note, redPol.length must be 3 for TPB and 5 for PPB
Returns a <code>SimpleBigDecimal</code> representing the same numerical value as <code>value</code>. created. created.
Constructor for <code>SimpleBigDecimal</code>. The value of the constructed <code>SimpleBigDecimal</code> equals <code>bigInt 2<sup>scale</sup></code>.
Computes the norm of an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code>. <code><b>Z</b>[&tau;]</code>.
Computes the norm of an element <code>&lambda;</code> of <code><b>R</b>[&tau;]</code>, where <code>&lambda; = u + v&tau;</code> and <code>u</code> and <code>u</code> are real numbers (elements of <code><b>R</b></code>). <code><b>R</b>[&tau;]</code>. <code>&lambda;</code> of <code><b>R</b>[&tau;]</code>.
Rounds an element <code>&lambda;</code> of <code><b>R</b>[&tau;]</code> to an element of <code><b>Z</b>[&tau;]</code>, such that their difference has minimal norm. <code>&lambda;</code> is given as <code>&lambda; = &lambda;<sub>0</sub> + &lambda;<sub>1</sub>&tau;</code>. equal 1 or -1. <code>lambda1</code> do not have same scale.
Approximate division by <code>n</code>. For an integer <code>k</code>, the value <code>&lambda; = s k / n</code> is computed to <code>c</code> bits of accuracy. <code>s<sub>1</sub></code>. <code><b>F</b><sub>m</sub></code>. <code>SimpleBigDecimal</code>. <code>c</code> bits of accuracy.
Computes the <code>&tau;</code>-adic NAF (non-adjacent form) of an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code>. <code><b>Z</b>[&tau;]</code>.
Applies the operation <code>&tau;()</code> to an <code>ECPoint.F2m</code>.
Returns the parameter <code>&mu;</code> of the elliptic curve. The curve must be a Koblitz curve, i.e. <code>a</code> equals <code>0</code> or <code>1</code> and <code>b</code> equals <code>1</code>. curve.
Calculates the Lucas Sequence elements <code>U<sub>k-1</sub></code> and <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code> and <code>V<sub>k</sub></code>. returned. <code>V<sub>k</sub></code>, otherwise <code>U<sub>k-1</sub></code> and <code>U<sub>k</sub></code>. and <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code> and <code>V<sub>k</sub></code>.
Computes the auxiliary value <code>t<sub>w</sub></code>. If the width is 4, then for <code>mu = 1</code>, <code>t<sub>w</sub> = 6</code> and for <code>mu = -1</code>, <code>t<sub>w</sub> = 10</code>
Computes the auxiliary values <code>s<sub>0</sub></code> and <code>s<sub>1</sub></code> used for partial modular reduction. <code>s<sub>0</sub></code> and <code>s<sub>1</sub></code>. Koblitz curve (Anomalous Binary Curve, ABC).
Partial modular reduction modulo <code>(&tau;<sup>m</sup> - 1)/(&tau; - 1)</code>. <code>s<sub>1</sub></code>. modular reduction.
Multiplies a {@link org.bouncycastle.math.ec.ECPoint.F2m ECPoint.F2m} by a <code>BigInteger</code> using the reduced <code>&tau;</code>-adic NAF (RTNAF) method.
Multiplies a {@link org.bouncycastle.math.ec.ECPoint.F2m ECPoint.F2m} by an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code> using the <code>&tau;</code>-adic NAF (TNAF) method. <code><b>Z</b>[&tau;]</code>.
Multiplies a {@link org.bouncycastle.math.ec.ECPoint.F2m ECPoint.F2m} by an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code> using the <code>&tau;</code>-adic NAF (TNAF) method, given the TNAF of <code>&lambda;</code>.
Computes the <code>[&tau;]</code>-adic window NAF of an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code>. <code><b>Z</b>[&tau;]</code> of which to compute the <code>[&tau;]</code>-adic NAF. <code>&lambda;</code>.
Does the precomputation for WTNAF multiplication.
Computes the Window NAF (non-adjacent Form) of an integer. defined as the minimal number <code>w</code>, such that for any <code>w</code> consecutive digits in the resulting representation, at most one is non-zero. <code>k = &sum;<sub>i=0</sub><sup>l-1</sup> k<sub>i</sub>2<sup>i</sup> </code>, where the <code>k<sub>i</sub></code> denote the elements of the returned <code>byte[]</code>.
Multiplies <code>this</code> by an integer <code>k</code> using the Window NAF method. multiplied by <code>k</code>.
Multiplies a {@link org.bouncycastle.math.ec.ECPoint.F2m ECPoint.F2m} by <code>k</code> using the reduced <code>&tau;</code>-adic NAF (RTNAF) method.
Multiplies a {@link org.bouncycastle.math.ec.ECPoint.F2m ECPoint.F2m} by an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code> using the <code>&tau;</code>-adic NAF (TNAF) method. <code><b>Z</b>[&tau;]</code> of which to compute the <code>[&tau;]</code>-adic NAF.
Multiplies a {@link org.bouncycastle.math.ec.ECPoint.F2m ECPoint.F2m} by an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code> using the window <code>&tau;</code>-adic NAF (TNAF) method, given the WTNAF of <code>&lambda;</code>.
Constructor for <code>WTauNafPreCompInfo</code> used for the WTNAF multiplication in <code> {@link org.bouncycastle.math.ec.multiplier.WTauNafMultiplier.multiply() WTauNafMultiplier.multiply()}</code>.
used for the WTNAF multiplication in <code> {@link org.bouncycastle.math.ec.multiplier.WTauNafMultiplier.multiply() WTauNafMultiplier.multiply()}</code>.
Constructor for an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code>. <code>&lambda;</code>.
Create a new PEMReader
Create a new PEMReader with a password finder
Create a new PEMReader with a password finder and differing providers for secret and public key operations.
Read a Key Pair
Reads in a X509Certificate.
Reads in a X509CRL.
Reads in a PKCS10 certification request.
Reads in a PKCS7 object. This returns a ContentInfo object suitable for use with the CMS API.
Base constructor.
decode the base 64 encoded input data. It is assumed the input data is valid.
decode the base 64 encoded String data writing it to the given output stream, whitespace characters will be ignored.
encode the input data producing a base 64 output stream.
decode the base 64 encoded byte data writing it to the given output stream, whitespace characters will be ignored.
encode the input data producing a Hex encoded byte array.
Hex encode the byte data writing it to the given output stream.
decode the Hex encoded input data. It is assumed the input data is valid.
decode the Hex encoded String data - whitespace will be ignored.
decode the Hex encoded String data writing it to the given output stream, whitespace characters will be ignored.
encode the input data producing a Hex output stream.
decode the Hex encoded byte data writing it to the given output stream, whitespace characters will be ignored.
Generic constructor for object without headers.
Generic constructor for object with headers.
Base constructor.
Return the number of bytes or characters required to contain the passed in object if it is PEM encoded.
A constant time equals comparison - does not terminate early if test will fail.
Return the passed in value as an unsigned byte array.
Return a random BigInteger not less than 'min' and not greater than 'max'
Validate the given IPv4 or IPv6 address.
Validate the given IPv4 or IPv6 address and netmask.
Validate the given IPv4 address.
Validate the given IPv6 address.
A locale independent version of toUpperCase.
A locale independent version of toLowerCase.
Constructs a holder for v2 attribute certificates with a hash value for some type of object. <p> <code>digestedObjectType</code> can be one of the following: <ul> <li>0 - publicKey - A hash of the public key of the holder must be passed. <li>1 - publicKeyCert - A hash of the public key certificate of the holder must be passed. <li>2 - otherObjectDigest - A hash of some other object type must be passed. <code>otherObjectTypeID</code> must not be empty. </ul> <p> This cannot be used if a v1 attribute certificate is used.
Returns the digest object type if an object digest info is used. <p> <ul> <li>0 - publicKey - A hash of the public key of the holder must be passed. <li>1 - publicKeyCert - A hash of the public key certificate of the holder must be passed. <li>2 - otherObjectDigest - A hash of some other object type must be passed. <code>otherObjectTypeID</code> must not be empty. </ul>
Returns the other object type ID if an object digest info is used.
Returns the hash if an object digest info is used.
Returns the digest algorithm ID if an object digest info is used.
Return any principal objects inside the attribute certificate holder entity names field.
Return the principals associated with the issuer attached to this holder
Return the serial number associated with the issuer attached to this holder.
Set the issuer directly with the ASN.1 structure.
Return any principal objects inside the attribute certificate issuer object.
Excluded certificates are not used for building a certification path. <p> The returned set is immutable.
Sets the excluded certificates which are not used for building a certification path. If the <code>Set</code> is <code>null</code> an empty set is assumed. <p> The given set is cloned to protect it against subsequent modifications.
Creates an instance of <code>PKIXBuilderParameters</code> with the specified <code>Set</code> of most-trusted CAs. Each element of the set is a {@link TrustAnchor TrustAnchor}. <p> Note that the <code>Set</code> is copied to protect against subsequent modifications.
Sets the maximum number of intermediate non-self-issued certificates in a certification path. The PKIX <code>CertPathBuilder</code> must not build paths longer then this length. <p> A value of 0 implies that the path can only contain a single certificate. A value of -1 does not limit the length. The default length is 5. <p> The basic constraints extension of a CA certificate overrides this value if smaller.
Returns the value of the maximum number of intermediate non-self-issued certificates in the certification path.
Can alse handle <code>ExtendedPKIXBuilderParameters</code> and <code>PKIXBuilderParameters</code>.
Makes a copy of this <code>PKIXParameters</code> object. Changes to the copy will not affect the original and vice versa.
Returns an instance of <code>ExtendedPKIXParameters</code> which can be safely casted to <code>ExtendedPKIXBuilderParameters</code>. <p> This method can be used to get a copy from other <code>PKIXBuilderParameters</code>, <code>PKIXParameters</code>, and <code>ExtendedPKIXParameters</code> instances.
Creates an instance of <code>PKIXParameters</code> with the specified <code>Set</code> of most-trusted CAs. Each element of the set is a {@link TrustAnchor TrustAnchor}. <p/> Note that the <code>Set</code> is copied to protect against subsequent modifications.
Returns an instance with the parameters of a given <code>PKIXParameters</code> object.
Method to support <code>clone()</code> under J2ME. <code>super.clone()</code> does not exist and fields are not copied.
Defaults to <code>false</code>.
Sets if delta CRLs should be used for checking the revocation status.
Sets the Java CertStore to this extended PKIX parameters.
Sets the Bouncy Castle Stores for finding CRLs, certificates, attribute certificates or cross certificates. <p> The <code>List</code> is cloned.
Adds a Bouncy Castle {@link Store} to find CRLs, certificates, attribute certificates or cross certificates. <p> This method should be used to add local stores, like collection based X.509 stores, if available. Local stores should be considered first, before trying to use additional (remote) locations, because they do not need possible additional network traffic. <p> If <code>store</code> is <code>null</code> it is ignored.
Adds an additional Bouncy Castle {@link Store} to find CRLs, certificates, attribute certificates or cross certificates. <p> You should not use this method. This method is used for adding additional X.509 stores, which are used to add (remote) locations, e.g. LDAP, found during X.509 object processing, e.g. in certificates or CRLs. This method is used in PKIX certification path processing. <p> If <code>store</code> is <code>null</code> it is ignored.
Returns an immutable <code>List</code> of additional Bouncy Castle <code>Store</code>s used for finding CRLs, certificates, attribute certificates or cross certificates.
Returns an immutable <code>List</code> of Bouncy Castle <code>Store</code>s used for finding CRLs, certificates, attribute certificates or cross certificates.
Returns if additional {@link X509Store}s for locations like LDAP found in certificates or CRLs should be used.
Sets if additional {@link X509Store}s for locations like LDAP found in certificates or CRLs should be used.
Returns the required constraints on the target certificate or attribute certificate. The constraints are returned as an instance of <code>Selector</code>. If <code>null</code>, no constraints are defined. <p> The target certificate in a PKIX path may be a certificate or an attribute certificate. <p> Note that the <code>Selector</code> returned is cloned to protect against subsequent modifications.
Sets the required constraints on the target certificate or attribute certificate. The constraints are specified as an instance of <code>Selector</code>. If <code>null</code>, no constraints are defined. <p> The target certificate in a PKIX path may be a certificate or an attribute certificate. <p> Note that the <code>Selector</code> specified is cloned to protect against subsequent modifications.
Sets the required constraints on the target certificate. The constraints are specified as an instance of <code>X509CertSelector</code>. If <code>null</code>, no constraints are defined. <p> This method wraps the given <code>X509CertSelector</code> into a <code>X509CertStoreSelector</code>. <p> Note that the <code>X509CertSelector</code> specified is cloned to protect against subsequent modifications.
Returns the trusted attribute certificate issuers. If attribute certificates is verified the trusted AC issuers must be set. <p> The returned <code>Set</code> consists of <code>TrustAnchor</code>s. <p> The returned <code>Set</code> is immutable. Never <code>null</code>
Sets the trusted attribute certificate issuers. If attribute certificates is verified the trusted AC issuers must be set. <p> The <code>trustedACIssuers</code> must be a <code>Set</code> of <code>TrustAnchor</code> <p> The given set is cloned.
Returns the neccessary attributes which must be contained in an attribute certificate. <p> The returned <code>Set</code> is immutable and contains <code>String</code>s with the OIDs.
Sets the neccessary which must be contained in an attribute certificate. <p> The <code>Set</code> must contain <code>String</code>s with the OIDs. <p> The set is cloned.
Returns the attribute certificates which are not allowed. <p> The returned <code>Set</code> is immutable and contains <code>String</code>s with the OIDs.
Sets the attribute certificates which are not allowed. <p> The <code>Set</code> must contain <code>String</code>s with the OIDs. <p> The set is cloned.
Returns the attribute certificate checker. The returned set contains {@link PKIXAttrCertChecker}s and is immutable.
Sets the attribute certificate checkers. <p> All elements in the <code>Set</code> must a {@link PKIXAttrCertChecker}. <p> The given set is cloned.
Create an X.509 Attribute with the type given by the passed in oid and the value represented by an ASN.1 Set containing value.
Create an X.59 Attribute with the type given by the passed in oid and the value represented by an ASN.1 Set containing the objects in value.
Returns an instance of this from a <code>X509CertSelector</code>.
Returns if the issuing distribution point criteria should be applied. Defaults to <code>false</code>. <p> You may also set the issuing distribution point criteria if not a missing issuing distribution point should be assumed.
Enables or disables the issuing distribution point check.
Sets the attribute certificate being checked. This is not a criterion. Rather, it is optional information that may help a {@link X509Store} find CRLs that would be relevant when checking revocation for the specified attribute certificate. If <code>null</code> is specified, then no such optional information is provided.
Returns the attribute certificate being checked.
Returns if this selector must match CRLs with the delta CRL indicator extension set. Defaults to <code>false</code>.
If this is set to <code>true</code> the CRL reported contains the delta CRL indicator CRL extension. <p> {@link #setCompleteCRLEnabled(boolean)} and {@link #setDeltaCRLIndicatorEnabled(boolean)} excluded each other.
Returns an instance of this from a <code>X509CRLSelector</code>.
If <code>true</code> only complete CRLs are returned. Defaults to <code>false</code>.
If set to <code>true</code> only complete CRLs are returned. <p> {@link #setCompleteCRLEnabled(boolean)} and {@link #setDeltaCRLIndicatorEnabled(boolean)} excluded each other.
Get the maximum base CRL number. Defaults to <code>null</code>.
Sets the maximum base CRL number. Setting to <code>null</code> disables this cheack. <p> This is only meaningful for delta CRLs. Complete CRLs must have a CRL number which is greater or equal than the base number of the corresponding CRL.
Returns the issuing distribution point. Defaults to <code>null</code>, which is a missing issuing distribution point extension. <p> The internal byte array is cloned before it is returned. <p> The criteria must be enable with {@link #setIssuingDistributionPointEnabled(boolean)}.
Sets the issuing distribution point. <p> The issuing distribution point extension is a CRL extension which identifies the scope and the distribution point of a CRL. The scope contains among others information about revocation reasons contained in the CRL. Delta CRLs and complete CRLs must have matching issuing distribution points. <p> The byte array is cloned to protect against subsequent modifications. <p> You must also enable or disable this criteria with {@link #setIssuingDistributionPointEnabled(boolean)}.
see if we can find an algorithm (or its alias and what it represents) in the property table for the given provider.
return an implementation for a given algorithm/provider. If the provider is null, we grab the first avalaible who has the required algorithm.
reset the generator
set the serial number for the certificate.
Set the issuer distinguished name - the issuer is the entity whose private key is used to sign the certificate.
Set the subject distinguished name. The subject describes the entity associated with the public key.
Set the signature algorithm. This can be either a name or an OID, names are treated as case insensitive.
generate an X509 certificate, based on the current issuer and subject using the default provider "BC".
generate an X509 certificate, based on the current issuer and subject using the default provider "BC" and the passed in source of randomness
generate an X509 certificate, based on the current issuer and subject, using the passed in provider for the signing, and the passed in source of randomness (if required).
generate an X509 certificate, based on the current issuer and subject using the default provider. <p> <b>Note:</b> this differs from the deprecated method in that the default provider is used - not "BC". </p>
generate an X509 certificate, based on the current issuer and subject using the default provider and the passed in source of randomness <p> <b>Note:</b> this differs from the deprecated method in that the default provider is used - not "BC". </p>
generate an X509 certificate, based on the current issuer and subject, using the passed in provider for the signing, and the passed in source of randomness (if required).
Return an iterator of the signature names supported by the generator.
Set the subject unique ID - note: it is very rare that it is correct to do this.
Set the issuer unique ID - note: it is very rare that it is correct to do this.
add a given extension field for the standard extensions tag (tag 3)
add a given extension field for the standard extensions tag (tag 3) The value parameter becomes the contents of the octet string associated with the extension.
add a given extension field for the standard extensions tag (tag 3) copying the extension value from another certificate.
generate an X509 certificate, based on the current issuer and subject using the default provider "BC", and the passed in source of randomness (if required).
generate an X509 certificate, based on the current issuer and subject, using the passed in provider for the signing.
generate an X509 certificate, based on the current issuer and subject, using the passed in provider for the signing and the supplied source of randomness, if required.
generate an X509 certificate, based on the current issuer and subject using the default provider, and the passed in source of randomness (if required). <p> <b>Note:</b> this differs from the deprecated method in that the default provider is used - not "BC". </p>
generate an X509 certificate, based on the current issuer and subject, using the passed in provider for the signing.
generate an X509 certificate, based on the current issuer and subject, using the passed in provider for the signing and the supplied source of randomness, if required.
Sax1 API impl
Creates a new instance of <code>SAXParser</code> using the currently configured factory parameters.
Defines that the specified feature is to enabled/disabled (as factory.
Returns whether the specified property will be enabled or disabled on reader instances constructed by this factory.
// // Internal methods
To support SAX1 interface, we'll need to use an adapter.
// // Additional convenience methods
Construct a new, empty AttributesImpl object.
Copy an existing Attributes object. <p>This constructor is especially useful inside a {@link org.xml.sax.ContentHandler#startElement startElement} event.</p>
Return the number of attributes in the list.
Return an attribute's Namespace URI.
Return an attribute's local name.
Return an attribute's qualified (prefixed) name.
Return an attribute's type by index.
Return an attribute's value by index.
Look up an attribute's index by Namespace name. <p>In many cases, it will be more efficient to look up the name once and use the index query methods rather than using the name query methods repeatedly.</p>
Look up an attribute's index by qualified (prefixed) name.
Look up an attribute's type by Namespace-qualified name.
Look up an attribute's type by qualified (prefixed) name.
Look up an attribute's value by Namespace-qualified name.
Look up an attribute's value by qualified (prefixed) name.
Clear the attribute list for reuse. <p>Note that little memory is freed by this call: the current array is kept so it can be reused.</p>
Copy an entire Attributes object. <p>It may be more efficient to reuse an existing object rather than constantly allocating new ones.</p>
Add an attribute to the end of the list. <p>For the sake of speed, this method does no checking to see if the attribute is already in the list: that is the responsibility of the application.</p>
Set an attribute in the list. <p>For the sake of speed, this method does no checking for name conflicts or well-formedness: such checks are the responsibility of the application.</p>
Remove an attribute from the list.
Set the Namespace URI of a specific attribute.
Set the local name of a specific attribute.
Set the qualified name of a specific attribute.
Set the type of a specific attribute.
Set the value of a specific attribute.
Ensure the internal array's capacity.
Report a bad array index in a manipulator.
Print the help message
Process one source onto an output stream.
Pick a content handler to generate the desired format.
Options processing
Return true if an option exists.
Compensate for bug in PushbackReader that allows pushing back EOF.
Locator implementation
Mark the current scan position as a "point of interest" - start of a tag, cdata, processing instruction etc.
Private clone of Boolean.valueOf that is guaranteed to return Boolean.TRUE or Boolean.FALSE
Sets up instance variables that haven't been set by setFeature
Return a Reader based on the contents of an InputSource Buffer both the InputStream and the Reader
Get an InputStream based on a publicid and a systemid
Expand entity references in attribute values selectively. Currently we expand a reference iff it is properly terminated with a semicolon.
Process numeric character references, deferring to the schema for named ones.
Push restartables on the stack if possible e is the next element to be started, if we know what it is
Pop the stack irrevocably
Pop the stack restartably
Get the prefix from a QName
Return true if we have a foreign name
Parsing the complete XML Document Type Definition is way too complex, but for many simple cases we can extract something useful from it. doctypedecl  ::= '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>' DeclSep     ::= PEReference | S intSubset   ::= (markupdecl | DeclSep) markupdecl  ::= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment ExternalID  ::= 'SYSTEM' S SystemLiteral | 'PUBLIC' S PubidLiteral S SystemLiteral
If the String is quoted, trim the quotes.
Split the supplied String into words or phrases seperated by spaces. Recognises quotes around a phrase and doesn't split it.
Rectify the stack, pushing and popping as needed so that the argument can be safely pushed
Return the argument as a valid XML name This no longer lowercases the result: we depend on Schema to canonicalize case.
ScanHandler implementation
SAX ContentHandler implementation
Default LexicalHandler implementation
Create a new XML writer. <p>Write to standard output.</p>
Create a new XML writer. <p>Write to the writer provided.</p>
Create a new XML writer. <p>Use the specified XML reader as the parent.</p>
Create a new XML writer. <p>Use the specified XML reader as the parent, and write to the specified writer.</p>
Internal initialization method. <p>All of the public constructors invoke this method.
Reset the writer. <p>This method is especially useful if the writer throws an exception before it is finished, and you want to reuse the writer for a new document.  It is usually a good idea to invoke {@link #flush flush} before resetting the writer, to make sure that no output is lost.</p> <p>This method is invoked automatically by the {@link #startDocument startDocument} method before writing a new document.</p> <p><strong>Note:</strong> this method will <em>not</em> clear the prefix or URI information in the writer or the selected output writer.</p>
Flush the output. <p>This method flushes the output stream.  It is especially useful when you need to make certain that the entire document has been written to output but do not want to close the output stream.</p> <p>This method is invoked automatically by the {@link #endDocument endDocument} method after writing a document.</p>
Set a new output destination for the document.
Specify a preferred prefix for a Namespace URI. <p>Note that this method does not actually force the Namespace to be declared; to do that, use the {@link #forceNSDecl(java.lang.String) forceNSDecl} method as well.</p>
Get the current or preferred prefix for a Namespace URI.
Force a Namespace to be declared on the root element. <p>By default, the XMLWriter will declare only the Namespaces needed for an element; as a result, a Namespace may be declared many places in a document if it is not used on the root element.</p> <p>This method forces a Namespace to be declared on the root element even if it is not used there, and reduces the number of xmlns attributes in the document.</p>
Force a Namespace declaration with a preferred prefix. <p>This is a convenience method that invokes {@link #setPrefix setPrefix} then {@link #forceNSDecl(java.lang.String) forceNSDecl}.</p>
Write the XML declaration at the beginning of the document. Pass the event on down the filter chain for further processing.
Write a newline at the end of the document. Pass the event on down the filter chain for further processing.
Write a start tag. Pass the event on down the filter chain for further processing.
Write an end tag. Pass the event on down the filter chain for further processing.
Write character data. Pass the event on down the filter chain for further processing.
Write ignorable whitespace. Pass the event on down the filter chain for further processing.
Write a processing instruction. Pass the event on down the filter chain for further processing.
Write an empty element. This method writes an empty element tag rather than a start tag followed by an end tag.  Both a {@link #startElement startElement} and an {@link #endElement endElement} event will be passed on down the filter chain.
Start a new element without a qname or attributes. <p>This method will provide a default empty attribute list and an empty string for the qualified name. It invokes {@link #startElement(String, String, String, Attributes)} directly.</p>
Start a new element without a qname, attributes or a Namespace URI. <p>This method will provide an empty string for the Namespace URI, and empty string for the qualified name, and a default empty attribute list. It invokes #startElement(String, String, String, Attributes)} directly.</p>
End an element without a qname. <p>This method will supply an empty string for the qName. It invokes {@link #endElement(String, String, String)} directly.</p>
End an element without a Namespace URI or qname. <p>This method will supply an empty string for the qName and an empty string for the Namespace URI. It invokes {@link #endElement(String, String, String)} directly.</p>
Add an empty element without a qname or attributes. <p>This method will supply an empty string for the qname and an empty attribute list.  It invokes {@link #emptyElement(String, String, String, Attributes)} directly.</p>
Add an empty element without a Namespace URI, qname or attributes. <p>This method will supply an empty string for the qname, and empty string for the Namespace URI, and an empty attribute list.  It invokes {@link #emptyElement(String, String, String, Attributes)} directly.</p>
Write an element with character data content. <p>This is a convenience method to write a complete element with character data content, including the start tag and end tag.</p> <p>This method invokes {@link #startElement(String, String, String, Attributes)}, followed by {@link #characters(String)}, followed by {@link #endElement(String, String, String)}.</p>
Write an element with character data content but no attributes. <p>This is a convenience method to write a complete element with character data content, including the start tag and end tag.  This method provides an empty string for the qname and an empty attribute list.</p> <p>This method invokes {@link #startElement(String, String, String, Attributes)}, followed by {@link #characters(String)}, followed by {@link #endElement(String, String, String)}.</p>
Write an element with character data content but no attributes or Namespace URI. <p>This is a convenience method to write a complete element with character data content, including the start tag and end tag.  The method provides an empty string for the Namespace URI, and empty string for the qualified name, and an empty attribute list.</p> <p>This method invokes {@link #startElement(String, String, String, Attributes)}, followed by {@link #characters(String)}, followed by {@link #endElement(String, String, String)}.</p>
Write a string of character data, with XML escaping. <p>This is a convenience method that takes an XML String, converts it to a character array, then invokes {@link #characters(char[], int, int)}.</p>
Force all Namespaces to be declared. This method is used on the root element to ensure that the predeclared Namespaces all appear.
Determine the prefix for an element or attribute name. TODO: this method probably needs some cleanup.
Write a raw character.
Write a raw string.
Write out an attribute list, escaping values. The names will have prefixes added to them.
Return true if the attribute is an HTML boolean from the above list.
Write an array of data characters with escaping.
Write out the list of Namespace declarations.
Write an element or attribute name.
Output properties
Returns the input if it is a JSON-permissible value; throws otherwise.
Creates a {@code JSONArray} with no values.
Creates a new {@code JSONArray} by copying all values from the given collection. Accept a raw type for API compatibility
Creates a new {@code JSONArray} with values from the next array in the tokener.
Creates a new {@code JSONArray} with values from the JSON string.
Returns the number of values in this array.
Appends {@code value} to the end of this array.
Sets the value at {@code index} to {@code value}, null padding this array to the required length if necessary. If a value already exists at {@code index}, it will be replaced.
Returns true if this array has no value at {@code index}, or if its value is the {@code null} reference or {@link JSONObject#NULL}.
Returns the value at {@code index}.
Returns the value at {@code index}, or null if the array has no value at {@code index}.
Returns the value at {@code index} if it exists and is a boolean or can be coerced to a boolean.
Returns the value at {@code index} if it exists and is a boolean or can be coerced to a boolean. Returns false otherwise.
Returns the value at {@code index} if it exists and is a boolean or can be coerced to a boolean. Returns {@code fallback} otherwise.
Returns the value at {@code index} if it exists and is a double or can be coerced to a double.
Returns the value at {@code index} if it exists and is a double or can be coerced to a double. Returns {@code NaN} otherwise.
Returns the value at {@code index} if it exists and is a double or can be coerced to a double. Returns {@code fallback} otherwise.
Returns the value at {@code index} if it exists and is an int or can be coerced to an int.
Returns the value at {@code index} if it exists and is an int or can be coerced to an int. Returns 0 otherwise.
Returns the value at {@code index} if it exists and is an int or can be coerced to an int. Returns {@code fallback} otherwise.
Returns the value at {@code index} if it exists and is a long or can be coerced to a long.
Returns the value at {@code index} if it exists and is a long or can be coerced to a long. Returns 0 otherwise.
Returns the value at {@code index} if it exists and is a long or can be coerced to a long. Returns {@code fallback} otherwise.
Returns the value at {@code index} if it exists, coercing it if necessary.
Returns the value at {@code index} if it exists, coercing it if necessary. Returns the empty string if no such value exists.
Returns the value at {@code index} if it exists, coercing it if necessary. Returns {@code fallback} if no such value exists.
Returns the value at {@code index} if it exists and is a {@code JSONArray}.
Returns the value at {@code index} if it exists and is a {@code JSONArray}. Returns null otherwise.
Returns the value at {@code index} if it exists and is a {@code JSONObject}.
Returns the value at {@code index} if it exists and is a {@code JSONObject}. Returns null otherwise.
Returns a new object whose values are the values in this array, and whose names are the values in {@code names}. Names and values are paired up by index from 0 through to the shorter array's length. Names that are not strings will be coerced to strings. This method returns null if either array is empty.
Returns a new string by alternating this array's values with {@code separator}. This array's string values are quoted and have their special characters escaped. For example, the array containing the strings '12" pizza', 'taco' and 'soda' joined on '+' returns this: <pre>"12\" pizza"+"taco"+"soda"</pre>
Encodes this array as a compact JSON string, such as: <pre>[94043,90210]</pre>
Encodes this array as a human readable JSON string for debugging, such as: <pre> ]</pre>
A sentinel value used to explicitly define a name with no value. Unlike {@code null}, names with this value: <ul> <li>show up in the {@link #names} array <li>show up in the {@link #keys} iterator <li>return {@code true} for {@link #has(String)} <li>do not throw on {@link #get(String)} <li>are included in the encoded JSON string. </ul> <p>This value violates the general contract of {@link Object#equals} by returning true when compared to {@code null}. Its {@link #toString} method returns "null".
Creates a {@code JSONObject} with no name/value mappings.
Creates a new {@code JSONObject} by copying all name/value mappings from the given map. (accept a raw type for API compatibility)
Creates a new {@code JSONObject} with name/value mappings from the next object in the tokener.
Creates a new {@code JSONObject} with name/value mappings from the JSON string.
Creates a new {@code JSONObject} by copying mappings for the listed names from the given object. Names that aren't present in {@code copyFrom} will be skipped.
Returns the number of name/value mappings in this object.
Maps {@code name} to {@code value}, clobbering any existing name/value mapping with the same name.
Maps {@code name} to {@code value}, clobbering any existing name/value mapping with the same name. If the value is {@code null}, any existing mapping for {@code name} is removed.
Equivalent to {@code put(name, value)} when both parameters are non-null; does nothing otherwise.
Appends {@code value} to the array already mapped to {@code name}. If this object has no mapping for {@code name}, this inserts a new mapping. If the mapping exists but its value is not an array, the existing and new values are inserted in order into a new array which is itself mapped to {@code name}. In aggregate, this allows values to be added to a mapping one at a time.
Removes the named mapping if it exists; does nothing otherwise.
Returns true if this object has no mapping for {@code name} or if it has a mapping whose value is {@link #NULL}.
Returns true if this object has a mapping for {@code name}. The mapping may be {@link #NULL}.
Returns the value mapped by {@code name}.
Returns the value mapped by {@code name}, or null if no such mapping exists.
Returns the value mapped by {@code name} if it exists and is a boolean or can be coerced to a boolean.
Returns the value mapped by {@code name} if it exists and is a boolean or can be coerced to a boolean. Returns false otherwise.
Returns the value mapped by {@code name} if it exists and is a boolean or can be coerced to a boolean. Returns {@code fallback} otherwise.
Returns the value mapped by {@code name} if it exists and is a double or can be coerced to a double.
Returns the value mapped by {@code name} if it exists and is a double or can be coerced to a double. Returns {@code NaN} otherwise.
Returns the value mapped by {@code name} if it exists and is a double or can be coerced to a double. Returns {@code fallback} otherwise.
Returns the value mapped by {@code name} if it exists and is an int or can be coerced to an int.
Returns the value mapped by {@code name} if it exists and is an int or can be coerced to an int. Returns 0 otherwise.
Returns the value mapped by {@code name} if it exists and is an int or can be coerced to an int. Returns {@code fallback} otherwise.
Returns the value mapped by {@code name} if it exists and is a long or can be coerced to a long.
Returns the value mapped by {@code name} if it exists and is a long or can be coerced to a long. Returns 0 otherwise.
Returns the value mapped by {@code name} if it exists and is a long or can be coerced to a long. Returns {@code fallback} otherwise.
Returns the value mapped by {@code name} if it exists, coercing it if necessary.
Returns the value mapped by {@code name} if it exists, coercing it if necessary. Returns the empty string if no such mapping exists.
Returns the value mapped by {@code name} if it exists, coercing it if necessary. Returns {@code fallback} if no such mapping exists.
Returns the value mapped by {@code name} if it exists and is a {@code JSONArray}.
Returns the value mapped by {@code name} if it exists and is a {@code JSONArray}. Returns null otherwise.
Returns the value mapped by {@code name} if it exists and is a {@code JSONObject}.
Returns the value mapped by {@code name} if it exists and is a {@code JSONObject}. Returns null otherwise.
Returns an array with the values corresponding to {@code names}. The array contains null for names that aren't mapped. This method returns null if {@code names} is either null or empty.
Returns an iterator of the {@code String} names in this object. The returned iterator supports {@link Iterator#remove() remove}, which will remove the corresponding mapping from this object. If this object is modified after the iterator is returned, the iterator's behavior is undefined. The order of the keys is undefined. Return a raw type for API compatibility
Returns an array containing the string names in this object. This method returns null if this object contains no mappings.
Encodes this object as a compact JSON string, such as: <pre>{"query":"Pizza","locations":[94043,90210]}</pre>
Encodes this object as a human readable JSON string for debugging, such as: <pre> }</pre>
Encodes the number as a JSON string.
Encodes {@code data} as a JSON string. This applies quotes and any necessary character escaping.
Begins encoding a new array. Each call to this method must be paired with a call to {@link #endArray}.
Begins encoding a new object. Each call to this method must be paired with a call to {@link #endObject}.
Encodes {@code value} to this stringer.
Encodes the key (property name) to this stringer.
Inserts any necessary separators and whitespace before a name. Also adjusts the stack to expect the key's value.
Returns the encoded JSON string. <p>If invoked with unterminated arrays or unclosed objects, this method's return value is undefined. <p><strong>Warning:</strong> although it contradicts the general contract of {@link Object#toString}, this method returns null if the stringer contains no data.
Returns the next value from the input.
Reads a null, boolean, numeric or unquoted string literal value. Numeric values will be returned as an Integer, Long, or Double, in that order of preference.
Returns the string up to but not including any of the given characters or a newline character. This does not consume the excluded character.
Reads a sequence of key/value pairs and the trailing closing brace '}' of an object. The opening brace '{' should have already been read.
Reads a sequence of values and the trailing closing brace ']' of an array. The opening brace '[' should have already been read. Note that "[]" yields an empty array, but "[,]" returns a two-element array equivalent to "[null,null]".
Returns an exception containing the given message plus the current position and the entire input string.
Returns the current position and the entire input string.
Returns true until the input has been exhausted.
Returns the next available character, or the null character '\0' if all input has been exhausted. The return value of this method is ambiguous for JSON strings that contain the character '\0'.
Returns the next available character if it equals {@code c}. Otherwise an exception is thrown.
Returns the next character that is not whitespace and does not belong to a comment. If the input is exhausted before such a character can be found, the null character '\0' is returned. The return value of this method is ambiguous for JSON strings that contain the character '\0'.
Returns the next {@code length} characters of the input. <p>The returned string shares its backing character array with this tokener's input string. If a reference to the returned string may be held indefinitely, you should use {@code new String(result)} to copy it first to avoid memory leaks.
Returns the {@link String#trim trimmed} string holding the characters up to but not including the first of: <ul> <li>any character in {@code excluded} <li>a newline character '\n' <li>a carriage return '\r' </ul> <p>The returned string shares its backing character array with this tokener's input string. If a reference to the returned string may be held indefinitely, you should use {@code new String(result)} to copy it first to avoid memory leaks.
Equivalent to {@code nextTo(String.valueOf(excluded))}.
Advances past all input up to and including the next occurrence of {@code thru}. If the remaining input doesn't contain {@code thru}, the input is exhausted.
Advances past all input up to but not including the next occurrence of {@code to}. If the remaining input doesn't contain {@code to}, the input is unchanged.
Unreads the most recent character of input. If no input characters have been read, the input is unchanged.
Returns the integer [0..15] value for the given hex character, or -1 for non-hex input.
in pulled elements. Most applications will only be interested in the effective namespaces of their elements, so these attributes aren't useful. But for structure preserving wrappers like DOM, it is necessary to keep the namespace data around.
Reads text until the specified delimiter is encountered. Consumes the text and the delimiter.
Returns true if an XML declaration was read.
Read the document's DTD. Although this parser is non-validating, the DTD must be parsed to capture entity values and default attribute values.
Reads an external ID of one of these two forms: SYSTEM "quoted system name" PUBLIC "quoted public id" "quoted system name" If the system name is not required, this also supports lone public IDs of this form: PUBLIC "quoted public id" Returns true if any ID was read.
Reads a quoted string, performing no entity escaping of the contents.
Read an element declaration. This contains a name and a content spec. <!ELEMENT foo EMPTY > <!ELEMENT foo (bar?,(baz|quux)) > <!ELEMENT foo (#PCDATA|bar)* >
Read an element content spec. This is a regular expression-like pattern of names or other content specs. The following operators are supported: sequence:    (a,b,c) choice:      (a|b|c) optional:    a? one or more: a+ any number:  a The special name '#PCDATA' is permitted but only if it is the first element of the first group: (#PCDATA|a|b) The top-level element must be either a choice, a sequence, or one of the special names EMPTY and ANY.
Reads an attribute list declaration such as the following: <!ATTLIST foo Each attribute has a name, type and default. Types are one of the built-in types (CDATA, ID, IDREF, IDREFS, ENTITY, ENTITIES, NMTOKEN, or NMTOKENS), an enumerated type "(list|of|options)" or NOTATION followed by an enumerated type. The default is either #REQUIRED, #IMPLIED, #FIXED, a quoted value, or #FIXED with a quoted value.
Read an entity declaration. The value of internal entities are inline: <!ENTITY foo "bar"> The values of external entities must be retrieved by URL or path: <!ENTITY foo SYSTEM "../file.png" NDATA png> Entities may be general or parameterized. Parameterized entities are marked by a percent sign. Such entities may only be used in the DTD: <!ENTITY % foo "bar">
Returns the type of the next token.
Sets name and attributes
Reads an entity reference from the buffer, resolves it, and writes the resolved entity to {@code out}. If the entity cannot be read or resolved, {@code out} will contain the partial entity reference.
Returns the current text or attribute value. This also has the side effect of setting isWhitespace to false if a non-whitespace character is encountered.
Returns true once {@code limit - position >= minimum}. If the data is exhausted before that many characters are available, this returns false.
Returns an element or attribute name. This is always non-empty for non-relaxed parsers.
public part starts here...
Returns the root element's name if it was declared in the DTD. This equals the first tag's name for valid documents.
Returns the document's system ID if it was declared. This is typically a
Returns the document's public ID if it was declared. This is typically a string like {@code -//W3C//DTD HTML 4.01//EN}.
utility methods to make XML parsing easier ...
Prepends the characters of {@code newBuffer} to be read before the current buffer.
Replaces the current exhausted buffer with the next buffer in the chain.
BEGIN android-added
returns "#document"
returns the root element of this document.
removes all children and attributes
Forwards creation request to parent if any, otherwise calls super.createElement.
Returns the number of attributes of this element.
Returns the root node, determined by ascending to the all parents un of the root element.
returns the (local) name of the element
returns the namespace of the element
returns the namespace for the given prefix
returns the number of declared namespaces, NOT including parent elements
Returns the parent node of this element
Builds the child elements from the given Parser. By overwriting parse, an element can take complete control over parsing its subtree.
Sets the given attribute; a value of null removes the attribute
Sets the given prefix; a namespace value of null removess the prefix
sets the name of the element
sets the namespace of the element. Please note: For no namespace, please use Xml.NO_NAMESPACE, null is not a legal value. Currently, null is converted to Xml.NO_NAMESPACE, but future versions may throw an exception.
Sets the Parent of this element. Automatically called from the add method.  Please use with care, you can simply create inconsitencies in the document tree structure using this method!
Writes this element and all children to the given XmlWriter.
convenience method for addChild (getChildCount (), child)
Returns the number of child objects
Removes the child object at the given index
Writes the children of this node to the given XmlWriter.
Construct a new, empty Attributes2Impl object.
Copy an existing Attributes or Attributes2 object. If the object implements Attributes2, values of the <em>specified</em> and <em>declared</em> flags for each attribute are copied. Otherwise the flag values are defaulted to assume no DTD was used, unless there is evidence to the contrary (such as attributes with type other than CDATA, which must have been <em>declared</em>). <p>This constructor is especially useful inside a {@link org.xml.sax.ContentHandler#startElement startElement} event.</p>
Returns the current value of the attribute's "declared" flag. javadoc mostly from interface
Returns the current value of an attribute's "specified" flag.
Copy an entire Attributes object.  The "specified" flags are assigned as true, and "declared" flags as false (except when an attribute's type is not CDATA), unless the object is an Attributes2 object. In that case those flag values are all copied.
Add an attribute to the end of the list, setting its "specified" flag to true.  To set that flag's value to false, use {@link #setSpecified}. <p>Unless the attribute <em>type</em> is CDATA, this attribute is marked as being declared in the DTD.  To set that flag's value to true for CDATA attributes, use {@link #setDeclared}.
javadoc entirely from superclass
Assign a value to the "declared" flag of a specific attribute. This is normally needed only for attributes of type CDATA, including attributes whose type is changed to or from CDATA.
Assign a value to the "specified" flag of a specific attribute. This is the only way this flag can be cleared, except clearing by initialization with the copy constructor.
SAX2 ext-1.0 LexicalHandler
SAX2 ext-1.0 DeclHandler
Tells the parser that if no external subset has been declared in the document text, none should be used.
Tells the parser to resolve the systemId against the baseURI and read the entity text from that resulting absolute URI. Note that because the older {@link DefaultHandler#resolveEntity DefaultHandler.resolveEntity()}, method is overridden to call this one, this method may sometimes be invoked with null <em>name</em> and <em>baseURI</em>, and with the <em>systemId</em> already absolutized. one).  This URI is defined by the XML specification to be the one This is never null when invoked by a SAX2 parser; only declared
Invokes {@link EntityResolver2#resolveEntity EntityResolver2.resolveEntity()} with null entity name and base URI. You only need to override that method to use this class. This is never null when invoked by a SAX2 parser; only declared
Copy an existing Locator or Locator2 object. If the object implements Locator2, values of the <em>encoding</em> and <em>version</em>strings are copied, otherwise they set to <em>null</em>.
Create an empty attribute list. <p>This constructor is most useful for parser writers, who will use it to create a single, reusable attribute list that can be reset with the clear method between elements.</p>
Construct a persistent copy of an existing attribute list. <p>This constructor is most useful for application writers, who will use it to create a persistent copy of an existing attribute list.</p>
Set the attribute list, discarding previous contents. <p>This method allows an application writer to reuse an attribute list easily.</p>
Add an attribute to an attribute list. <p>This method is provided for SAX parser writers, to allow them to build up an attribute list incrementally before delivering it to the application.</p>
Remove an attribute from the list. <p>SAX application writers can use this method to filter an attribute out of an AttributeList.  Note that invoking this method will change the length of the attribute list and some of the attribute's indices.</p> <p>If the requested attribute is not in the list, this is a no-op.</p>
Clear the attribute list. <p>SAX parser writers can use this method to reset the attribute list between DocumentHandler.startElement events.  Normally, it will make sense to reuse the same AttributeListImpl object rather than allocating a new one each time.</p>
Get the name of an attribute (by position).
Get the type of an attribute (by position).
Get the value of an attribute (by position).
Get the type of an attribute (by name).
Get the value of an attribute (by name).
Resolve an external entity. <p>Always return null, so that the parser will use the system identifier provided in the XML document.  This method implements the SAX default behaviour: application writers can override it in a subclass to do special translations such as catalog lookups or URI redirection.</p>
Receive notification of a notation declaration. <p>By default, do nothing.  Application writers may override this method in a subclass if they wish to keep track of the notations declared in a document.</p>
Receive notification of an unparsed entity declaration. <p>By default, do nothing.  Application writers may override this method in a subclass to keep track of the unparsed entities declared in a document.</p>
Receive a Locator object for document events. <p>By default, do nothing.  Application writers may override this method in a subclass if they wish to store the locator for use with other document events.</p>
Receive notification of the start of a Namespace mapping. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the start of each Namespace prefix scope (such as storing the prefix mapping).</p>
Receive notification of the end of a Namespace mapping. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the end of each prefix mapping.</p>
Receive notification of ignorable whitespace in element content. <p>By default, do nothing.  Application writers may override this method to take specific actions for each chunk of ignorable whitespace (such as adding data to a node or buffer, or printing it to a file).</p>
Receive notification of a processing instruction. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions for each processing instruction, such as setting status variables or invoking other methods.</p>
Receive notification of a skipped entity. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions for each processing instruction, such as setting status variables or invoking other methods.</p>
Receive notification of a parser warning. <p>The default implementation does nothing.  Application writers may override this method in a subclass to take specific actions for each warning, such as inserting the message in a log file or printing it to the console.</p>
Receive notification of a recoverable parser error. <p>The default implementation does nothing.  Application writers may override this method in a subclass to take specific actions for each error, such as inserting the message in a log file or printing it to the console.</p>
Report a fatal XML parsing error. <p>The default implementation throws a SAXParseException. Application writers may override this method in a subclass if they need to take specific actions for each fatal error (such as collecting all of the errors into a single report): in any case, the application must stop all regular processing when this method is invoked, since the document is no longer reliable, and the parser may no longer report parsing events.</p>
Zero-argument constructor. <p>This will not normally be useful, since the main purpose of this class is to make a snapshot of an existing Locator.</p>
Copy constructor. <p>Create a persistent copy of the current state of a locator. When the original locator changes, this copy will still keep the original values (and it can be used outside the scope of DocumentHandler methods).</p>
Return the saved public identifier.
Return the saved system identifier.
Return the saved line number (1-based).
Return the saved column number (1-based).
Set the public identifier for this locator.
Set the system identifier for this locator.
Set the line number for this locator (1-based).
Set the column number for this locator (1-based).
Create a new Namespace support object.
Reset this Namespace support object for reuse. <p>It is necessary to invoke this method before reusing the Namespace support object for a new session.  If namespace declaration URIs are to be supported, that flag must also be set to a non-default value. </p>
Start a new Namespace context. The new context will automatically inherit the declarations of its parent context, but it will also keep track of which declarations were made within this context. <p>Event callback code should start a new context once per element. This means being ready to call this in either of two places. For elements that don't include namespace declarations, the <em>ContentHandler.startElement()</em> callback is the right place. For elements with such a declaration, it'd done in the first <em>ContentHandler.startPrefixMapping()</em> callback. A boolean flag can be used to track whether a context has been started yet.  When either of those methods is called, it checks the flag to see if a new context needs to be started.  If so, it starts the context and sets the flag.  After <em>ContentHandler.startElement()</em> does that, it always clears the flag. <p>Normally, SAX drivers would push a new context at the beginning of each XML element.  Then they perform a first pass over the attributes to process all namespace declarations, making <em>ContentHandler.startPrefixMapping()</em> callbacks. Then a second pass is made, to determine the namespace-qualified names for all attributes and for the element name. Finally all the information for the <em>ContentHandler.startElement()</em> callback is available, so it can then be made. <p>The Namespace support object always starts with a base context already in force: in this context, only the "xml" prefix is declared.</p>
Revert to the previous Namespace context. <p>Normally, you should pop the context at the end of each XML element.  After popping the context, all Namespace prefix mappings that were previously in force are restored.</p> <p>You must not attempt to declare additional Namespace prefixes after popping a context, unless you push another context first.</p>
Declare a Namespace prefix.  All prefixes must be declared before they are referenced.  For example, a SAX driver (parser) would scan an element's attributes in two passes:  first for namespace declarations, then a second pass using {@link #processName processName()} to interpret prefixes against (potentially redefined) prefixes. <p>This method declares a prefix in the current Namespace context; the prefix will remain in force until this context is popped, unless it is shadowed in a descendant context.</p> <p>To declare the default element Namespace, use the empty string as the prefix.</p> <p>Note that you must <em>not</em> declare a prefix after you've pushed and popped another Namespace context, or treated the declarations phase as complete by processing a prefixed name.</p> <p>Note that there is an asymmetry in this library: {@link #getPrefix getPrefix} will not return the "" prefix, even if you have declared a default element namespace. To check for a default namespace, you have to look it up explicitly using {@link #getURI getURI}. This asymmetry exists to make it easier to look up prefixes for attribute names, where the default prefix is not allowed.</p>
Process a raw XML qualified name, after all declarations in the current context have been handled by {@link #declarePrefix declarePrefix()}. <p>This method processes a raw XML qualified name in the current context by removing the prefix and looking it up among the prefixes currently declared.  The return value will be the array supplied by the caller, filled in as follows:</p> <dl> <dt>parts[0]</dt> <dd>The Namespace URI, or an empty string if none is in use.</dd> <dt>parts[1]</dt> <dd>The local name (without prefix).</dd> <dt>parts[2]</dt> <dd>The original raw name.</dd> </dl> <p>All of the strings in the array will be internalized.  If the raw name has a prefix that has not been declared, then the return value will be null.</p> <p>Note that attribute names are processed differently than element names: an unprefixed element name will receive the default Namespace (if any), while an unprefixed attribute name will not.</p>
Look up a prefix and get the currently-mapped Namespace URI. <p>This method looks up the prefix in the current context. Use the empty string ("") for the default Namespace.</p>
Return an enumeration of all prefixes whose declarations are active in the current context. This includes declarations from parent contexts that have not been overridden. <p><strong>Note:</strong> if there is a default prefix, it will not be returned in this enumeration; check for the default prefix using the {@link #getURI getURI} with an argument of "".</p>
Return one of the prefixes mapped to a Namespace URI. <p>If more than one prefix is currently mapped to the same URI, this method will make an arbitrary selection; if you want all of the prefixes, use the {@link #getPrefixes} method instead.</p> <p><strong>Note:</strong> this will never return the empty (default) prefix; to check for a default prefix, use the {@link #getURI getURI} method with an argument of "".</p>
Return an enumeration of all prefixes for a given URI whose declarations are active in the current context. This includes declarations from parent contexts that have not been overridden. <p>This method returns prefixes mapped to a specific Namespace URI.  The xml: prefix will be included.  If you want only one prefix that's mapped to the Namespace URI, and you don't care which one you get, use the {@link #getPrefix getPrefix} method instead.</p> <p><strong>Note:</strong> the empty (default) prefix is <em>never</em> included in this enumeration; to check for the presence of a default Namespace, use the {@link #getURI getURI} method with an argument of "".</p>
Return an enumeration of all prefixes declared in this context. <p>The empty (default) prefix will be included in this enumeration; note that this behaviour differs from that of {@link #getPrefix} and {@link #getPrefixes}.</p>
Controls whether namespace declaration attributes are placed into the {@link #NSDECL NSDECL} namespace by {@link #processName processName()}.  This may only be changed before any contexts have been pushed.
Create the root-level Namespace context.
(Re)set the parent of this Namespace context. The context must either have been freshly constructed, or must have been cleared.
Makes associated state become collectible, invalidating this context. {@link #setParent} must be called before this context may be used again.
Declare a Namespace prefix for this context.
Process an XML qualified name in this context.
Look up the URI associated with a prefix in this context.
Look up one of the prefixes associated with a URI in this context. <p>Since many prefixes may be mapped to the same URI, the return value may be unreliable.</p>
Return an enumeration of prefixes declared in this context.
Return an enumeration of all prefixes currently in force. <p>The default prefix, if in force, is <em>not</em> returned, and will have to be checked for separately.</p>
Copy on write for the internal tables in this context. <p>This class is optimized for the normal case where most elements do not contain Namespace declarations.</p>
Creates a new instance of the specified class name Package private so this code is not exposed at the API level.
Figure out which ClassLoader to use.  For JDK 1.2 and later use the context ClassLoader.
Construct a new parser adapter. <p>Use the "org.xml.sax.parser" property to locate the embedded SAX1 driver.</p>
Construct a new parser adapter. <p>Note that the embedded parser cannot be changed once the adapter is created; to embed a different parser, allocate a new ParserAdapter.</p>
Internal setup method.
Set a feature flag for the parser. <p>The only features recognized are namespaces and namespace-prefixes.</p>
Check a parser feature flag. <p>The only features recognized are namespaces and namespace-prefixes.</p>
Set a parser property. <p>No properties are currently recognized.</p>
Get a parser property. <p>No properties are currently recognized.</p>
Set the entity resolver.
Return the current entity resolver.
Set the DTD handler.
Return the current DTD handler.
Set the content handler.
Return the current content handler.
Set the error handler.
Return the current error handler.
Parse an XML document.
Adapter implementation method; do not call. Adapt a SAX1 document locator event.
Adapter implementation method; do not call. Adapt a SAX1 start document event.
Adapter implementation method; do not call. Adapt a SAX1 end document event.
Adapter implementation method; do not call. Adapt a SAX1 startElement event. <p>If necessary, perform Namespace processing.</p>
Adapter implementation method; do not call. Adapt a SAX1 end element event.
Adapter implementation method; do not call. Adapt a SAX1 characters event.
Adapter implementation method; do not call. Adapt a SAX1 ignorable whitespace event.
Adapter implementation method; do not call. Adapt a SAX1 processing instruction event.
Initialize the parser before each run.
Process a qualified (prefixed) name. <p>If the name has an undeclared prefix, use only the qname and make an ErrorHandler.error callback in case the app is interested.</p>
Report a non-fatal error.
Construct an exception for the current context.
Throw an exception if we are parsing. <p>Use this method to detect illegal feature or property changes.</p>
Construct a new adapter.
Set the embedded AttributeList. <p>This method must be invoked before any of the others can be used.</p>
Return the length of the attribute list.
Return the Namespace URI of the specified attribute.
Return the local name of the specified attribute.
Return the qualified (prefixed) name of the specified attribute.
Return the type of the specified attribute.
Return the value of the specified attribute.
Look up an attribute index by Namespace name.
Look up an attribute index by qualified (prefixed) name.
Look up the type of an attribute by Namespace name.
Look up the type of an attribute by qualified (prefixed) name.
Look up the value of an attribute by Namespace name.
Look up the value of an attribute by qualified (prefixed) name.
Private null constructor.
Create a new SAX parser using the `org.xml.sax.parser' system property. <p>The named class must exist and must implement the {@link org.xml.sax.Parser Parser} interface.</p>
Create a new SAX parser object using the class name provided. <p>The named class must exist and must implement the {@link org.xml.sax.Parser Parser} interface.</p>
Construct an empty XML filter, with no parent. <p>This filter will have no parent: you must assign a parent before you start a parse or do any configuration with setFeature or setProperty, unless you use this as a pure event consumer rather than as an {@link XMLReader}.</p>
Construct an XML filter with the specified parent.
Set the parent reader. <p>This is the {@link org.xml.sax.XMLReader XMLReader} from which this filter will obtain its events and to which it will pass its configuration requests.  The parent may itself be another filter.</p> <p>If there is no parent reader set, any attempt to parse or to set or get a feature or property will fail.</p>
Get the parent reader.
Set the value of a feature. <p>This will always fail if the parent is null.</p>
Look up the value of a feature. <p>This will always fail if the parent is null.</p>
Set the value of a property. <p>This will always fail if the parent is null.</p>
Look up the value of a property.
Get the current entity resolver.
Set the DTD event handler.
Get the current DTD event handler.
Set the content event handler.
Get the content event handler.
Set the error event handler.
Get the current error event handler.
Parse a document.
Filter an external entity resolution.
Filter a notation declaration event.
Filter an unparsed entity declaration event.
Filter a new document locator event.
Filter a start document event.
Filter an end document event.
Filter a start Namespace prefix mapping event.
Filter an end Namespace prefix mapping event.
Filter a start element event.
Filter an end element event.
Filter a character data event.
Filter an ignorable whitespace event.
Filter a processing instruction event.
Filter a skipped entity event.
Filter a warning event.
Filter an error event.
Filter a fatal error event.
Set up before a parse. <p>Before every parse, check whether the parent is non-null, and re-register the filter for all of the events.</p>
Create a new adapter. <p>Use the "org.xml.sax.driver" property to locate the SAX2 driver to embed.</p>
Create a new adapter. <p>Create a new adapter, wrapped around a SAX2 XMLReader. The adapter will make the XMLReader act like a SAX1 Parser.</p>
Internal setup.
Set the locale for error reporting. <p>This is not supported in SAX2, and will always throw an exception.</p>
Register the entity resolver.
Register the DTD event handler.
Register the SAX1 document event handler. <p>Note that the SAX1 document handler has no Namespace support.</p>
Register the error event handler.
Parse the document. <p>This method will throw an exception if the embedded XMLReader does not support the
Set up the XML reader.
Set a document locator.
Start document event.
End document event.
Adapt a SAX2 start prefix mapping event.
Adapt a SAX2 end prefix mapping event.
Adapt a SAX2 start element event.
Adapt a SAX2 end element event.
Adapt a SAX2 characters event.
Adapt a SAX2 ignorable whitespace event.
Adapt a SAX2 processing instruction event.
Adapt a SAX2 skipped entity event.
Set the embedded Attributes object.
Return the number of attributes.
Return the qualified (prefixed) name of an attribute by position.
Return the type of an attribute by position.
Return the value of an attribute by position.
Return the type of an attribute by qualified (prefixed) name.
Return the value of an attribute by qualified (prefixed) name.
Private constructor. <p>This constructor prevents the class from being instantiated.</p>
Attempt to create an XMLReader from system defaults. In environments which can support it, the name of the XMLReader class is determined by trying each these options in order, and using the first one which succeeds:</p> <ul> <li>If the system property <code>org.xml.sax.driver</code> has a value, that is used as an XMLReader class name. </li> <li>The JAR "Services API" is used to look for a class name in the <em>META-INF/services/org.xml.sax.driver</em> file in jarfiles available to the runtime.</li> <li> SAX parser distributions are strongly encouraged to provide a default XMLReader class name that will take effect only when previous options (on this list) are not successful.</li> <li>Finally, if {@link ParserFactory#makeParser()} can return a system default SAX1 parser, that parser is wrapped in a {@link ParserAdapter}.  (This is a migration aid for SAX1 environments, where the <code>org.xml.sax.parser</code> system property will often be usable.) </li> </ul> <p> In environments such as small embedded systems, which can not support that flexibility, other mechanisms to determine the default may be used. </p> <p>Note that many Java environments allow system properties to be initialized on a command line.  This means that <em>in most cases</em> setting a good value for that property ensures that calls to this method will succeed, except when security policies intervene. This will also maximize application portability to older SAX environments, with less robust implementations of this method. </p>
Attempt to create an XML reader from a class name. <p>Given a class name, this method attempts to load and instantiate the class as an XML reader.</p> <p>Note that this method will not be usable in environments where the caller (perhaps an applet) is not permitted to load classes dynamically.</p>
Receive notification of the end of the document. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the beginning of a document (such as finalising a tree or closing an output file).</p>
Zero-argument default constructor.
Create a new input source with a system identifier. <p>Applications may use setPublicId to include a public identifier as well, or setEncoding to specify the character encoding, if known.</p> <p>If the system identifier is a URL, it must be fully resolved (it may not be a relative URL).</p>
Create a new input source with a byte stream. <p>Application writers should use setSystemId() to provide a base for resolving relative URIs, may use setPublicId to include a public identifier, and may use setEncoding to specify the object's character encoding.</p>
Create a new input source with a character stream. <p>Application writers should use setSystemId() to provide a base for resolving relative URIs, and may use setPublicId to include a public identifier.</p> <p>The character stream shall not include a byte order mark.</p>
Set the public identifier for this input source. <p>The public identifier is always optional: if the application writer includes one, it will be provided as part of the location information.</p>
Get the public identifier for this input source.
Set the system identifier for this input source. <p>The system identifier is optional if there is a byte stream or a character stream, but it is still useful to provide one, since the application can use it to resolve relative URIs and can include it in error messages and warnings (the parser will attempt to open a connection to the URI only if there is no byte stream or character stream specified).</p> <p>If the application knows the character encoding of the object pointed to by the system identifier, it can register the encoding using the setEncoding method.</p> <p>If the system identifier is a URL, it must be fully resolved (it may not be a relative URL).</p>
Get the system identifier for this input source. <p>The getEncoding method will return the character encoding of the object pointed to, or null if unknown.</p> <p>If the system ID is a URL, it will be fully resolved.</p>
Set the byte stream for this input source. <p>The SAX parser will ignore this if there is also a character stream specified, but it will use a byte stream in preference to opening a URI connection itself.</p> <p>If the application knows the character encoding of the byte stream, it should set it with the setEncoding method.</p>
Get the byte stream for this input source. <p>The getEncoding method will return the character encoding for this byte stream, or null if unknown.</p>
Set the character encoding, if known. <p>The encoding must be a string acceptable for an XML encoding declaration (see section 4.3.3 of the XML 1.0 recommendation).</p> <p>This method has no effect when the application provides a character stream.</p>
Get the character encoding for a byte stream or URI. This value will be ignored when the application provides a character stream.
Set the character stream for this input source. <p>If there is a character stream specified, the SAX parser will ignore any byte stream and will not attempt to open a URI connection to the system identifier.</p>
Get the character stream for this input source.
Create a new SAXException.
Create a new SAXException wrapping an existing exception. <p>The existing exception will be embedded in the new one, and its message will become the default message for the SAXException.</p>
Create a new SAXException from an existing exception. <p>The existing exception will be embedded in the new one, but the new exception will have its own message.</p>
Return a detail message for this exception. <p>If there is an embedded exception, and if the SAXException has no detail message of its own, this method will return the detail message from the embedded exception.</p>
Return the embedded exception, if any.
Default constructor.
Construct a new exception with the given message.
Construct a new exception with no message.
Construct a new exception with the given message.
Create a new SAXParseException from a message and a Locator. <p>This constructor is especially useful when an application is creating its own exception from within a {@link org.xml.sax.ContentHandler ContentHandler} callback.</p>
Wrap an existing exception in a SAXParseException. <p>This constructor is especially useful when an application is creating its own exception from within a {@link org.xml.sax.ContentHandler ContentHandler} callback, and needs to wrap an existing exception that is not a subclass of {@link org.xml.sax.SAXException SAXException}.</p>
Create a new SAXParseException. <p>This constructor is most useful for parser writers.</p> <p>All parameters except the message are as if they were provided by a {@link Locator}.  For example, if the system identifier is a URL (including relative filename), the caller must resolve it fully before creating the exception.</p>
Create a new SAXParseException with an embedded exception. <p>This constructor is most useful for parser writers who need to wrap an exception that is not a subclass of {@link org.xml.sax.SAXException SAXException}.</p> <p>All parameters except the message and exception are as if they were provided by a {@link Locator}.  For example, if the system identifier is a URL (including relative filename), the caller must resolve it fully before creating the exception.</p>
Internal initialization method.
Get the public identifier of the entity where the exception occurred.
Get the system identifier of the entity where the exception occurred. <p>If the system identifier is a URL, it will have been resolved fully.</p>
The line number of the end of the text where the exception occurred. <p>The first line is line 1.</p>
The column number of the end of the text where the exception occurred. <p>The first column in a line is position 1.</p>
--- XMLReader interface
Calls {@link ContentHandler#startElement(String, String, String, Attributes) startElement} on the <code>ContentHandler</code> with <code>this</code> driver object as the {@link Attributes} implementation. In default implementation {@link Attributes} object is valid only during this method call and may not be stored. Sub-classes can overwrite this method to cache attributes.
NOTE: code that prints this and detail is difficult in J2ME
<p><b>NOTE:</b> factory features are not used for XML Serializer.
Return the current value of the feature with given name. <p><b>NOTE:</b> factory features are not used for XML Serializer.
Specifies that the parser produced by this factory will provide support for XML namespaces. By default the value of this is set to false.
Indicates whether or not the factory is configured to produce parsers which are namespace aware (it simply set feature XmlPullParser.FEATURE_PROCESS_NAMESPACES to true or false).
Specifies that the parser produced by this factory will be validating (it simply set feature XmlPullParser.FEATURE_VALIDATION to true or false). By default the value of this is set to false.
Indicates whether or not the factory is configured to produce parsers which validate the XML content during parse. which validate the XML content during parse; false otherwise.
Creates a new instance of a XML Pull Parser using the currently configured factory features. requested configuration.
Creates a new instance of a XML Serializer. <p><b>NOTE:</b> factory features are not used for XML Serializer. requested configuration.
Create a new instance of a PullParserFactory that can be used to create XML pull parsers (see class description for more details).
Gets the unique instance of this class. This is only allowed in very limited situations.
Gets the raw byte offset from the start of an object's memory to the memory used to store the indicated instance field. instance field
Gets the offset from the start of an array object's memory to the memory used to store its initial (zeroeth) element.
Gets the size of each element of the given array class.
Parks the calling thread for the specified amount of time, unless the "permit" for the thread is already available (due to a previous call to {@link #unpark}. This method may also return spuriously (that is, without the thread being told to unpark and without the indicated amount of time elapsing). <p>See {@link java.util.concurrent.locks.LockSupport} for more in-depth information of the behavior of this method.</p> milliseconds-since-the-epoch (<code>true</code>) or relative nanoseconds-from-now (<code>false</code>)
Unparks the given object, which must be a {@link Thread}. <p>See {@link java.util.concurrent.locks.LockSupport} for more in-depth information of the behavior of this method.</p>
Make sure all the directories along this path exist
Delete a file
Process an image from source out to dest
Default copy constructor, and destructor are fine
Nothing to do in clean up
Nothing to do
findFiles implementation for the abstraction. PRECONDITIONS: No checking is done, so there MUST be an entry in mFiles with path matching basePath. POSTCONDITIONS: fileStore is filled with a copy of the data in mFiles corresponding to the basePath.
Names of asset files must meet the following criteria: - the filename length must be less than kMaxAssetFileName bytes long - all characters must be 7-bit printable ASCII - none of { '/' '\\' ':' } Pass in just the filename, not the full path.
Does this directory name fit the pattern of a locale dir ("en-rUS" or "default")? TODO: Should insist that the first two letters are lower case, and the second two are upper.
Set and get the file specification. Note this does NOT make a copy of argv.
Certain features may only be available on a specific SDK level or above. SDK levels that have a non-numeric identifier are assumed to be newer than any SDK level that has a number designated.
Show version info.  All the cool kids do it.
Open the file read only.  The call fails if the file doesn't exist. Returns NULL on failure.
Open the file read-write.  The file will be created if it doesn't already exist and "okayToCreate" is set. Returns NULL on failure.
Return a short string describing the compression method.
Return the percent reduction in size (0% == no compression).
Handle the "list" command, which can be a simple file dump or a verbose listing. The verbose listing closely matches the output of the Info-ZIP "unzip" command.
Handle the "dump" command, to extract select data from an archive.
Handle the "add" command, which wants to add files to a new or pre-existing archive.
Delete files from an existing archive.
Package up an asset directory and associated application files.
Do PNG Crunching PRECONDITIONS -S flag points to a source directory containing drawable* folders -C flag points to destination directory. The folder structure in the POSTCONDITIONS Destination directory will be updated to match the PNG files in the source directory.
Private function to check whether a file is a directory or not
Private function to check whether a file is a regular file or not
When running under Cygwin on Windows, this will convert slash-based paths into back-slash-based ones. Otherwise the ApptAssets file comparisons fail later as they use back-slash separators under Windows. This operates in-place on the path string.
Print usage info.
Dispatch the command.
Parse args.
The directory hierarchy looks like this: "outputDir" and "assetRoot" are existing directories. On success, "bundle->numPackages" will be the number of Zip packages we created.
Process a regular file, adding it to the archive if appropriate. If we're in "update" mode, and the file already exists in the archive, delete the existing entry before adding the new one.
Determine whether or not we want to try to compress this file based on the file extension.
Loops through the string paths and writes them to the file pointer Each file path is written on its own line with a terminating backslash.
Returns true if needle is one of the elements in the comma-separated list haystack, false otherwise.
Initialize a new ZipEntry structure from a FILE* positioned at a CentralDirectoryEntry. On exit, the file pointer will be at the start of the next CDE or at the EOCD.
Initialize a new entry.  Pass in the file name and an optional comment. Initializes the CDE and the LFH.
Initialize a new entry, starting with the ZipEntry from a different archive. Initializes the CDE and the LFH.
Insert pad bytes in the LFH by tweaking the "extra" field.  This will potentially confuse something that put "extra" data in here earlier, but I can't find an actual problem.
Set the fields in the LFH equal to the corresponding fields in the CDE. This does not touch the LFH "extra" field.
Set some information about a file after we add it.
See if the data in mCDE and mLFH match up.  This is mostly useful for debugging these classes, but it can be used to identify damaged archives. Returns "false" if they differ.
Convert the DOS date/time stamp into a UNIX time stamp.
Set the CDE/LFH timestamp from UNIX time.
Read a local file header. On entry, "fp" points to the signature at the start of the header. On exit, "fp" points to the start of data.
Write a local file header.
Dump the contents of a LocalFileHeader object.
Read the central dir entry that appears next in the file. On entry, "fp" should be positioned on the signature bytes for the entry.  On exit, "fp" will point at the signature word for the next entry or for the EOCD.
Write a central dir entry.
Dump the contents of a CentralDirEntry object.
Returns "true" if the data is compressed.
Return the absolute file offset of the start of the compressed or uncompressed data.
Some basic functions for raw data manipulation.  "LE" means Little Endian.
Set the offset of the local file header, relative to the start of the current file.
should live somewhere else?
Open a file and parse its guts.
Return the Nth entry in the archive.
Find an entry by name.
Empty the mEntries vector.
Find the central directory and read the contents. The fun thing about ZIP archives is that they may or may not be readable from start to end.  In some cases, notably for archives that were written to stdout, the only length information is in the central directory at the end of the file. Of course, the central directory can be followed by a variable-length comment field, so we have to scan through it backwards.  The comment is at most 64K, plus we have 18 bytes for the end-of-central-dir stuff itself, plus apparently sometimes people throw random junk on the end just for the fun of it. This is all a little wobbly.  If the wrong value ends up in the EOCD area, we're hosed.  This appears to be the way that everbody handles it though, so we're in pretty good company if this fails.
Add a new file to the archive. This requires creating and populating a ZipEntry structure, and copying the data into the file at the appropriate position.  The "appropriate position" is the current location of the central directory, which we casually overwrite (we can put it back later). If we were concerned about safety, we would want to make all changes in a temp file and then overwrite the original after everything was safely written.  Not really a concern for us.
Add an entry by copying it from another zip file.  If "padding" is nonzero, the specified number of bytes will be added to the "extra" field in the header. If "ppEntry" is non-NULL, a pointer to the new entry will be returned.
Copy all of the bytes in "src" to "dst". On exit, "srcFp" will be seeked to the end of the file, and "dstFp" will be seeked immediately past the data.
Copy all of the bytes in "src" to "dst". On exit, "dstFp" will be seeked immediately past the data.
Copy some of the bytes in "src" to "dst". If "pCRC32" is NULL, the CRC will not be computed. On exit, "srcFp" will be seeked to the end of the file, and "dstFp" will be seeked immediately past the data just written.
Compress all of the data in "srcFp" and write it to "dstFp". On exit, "srcFp" will be seeked to the end of the file, and "dstFp" will be seeked immediately past the compressed data.
Mark an entry as deleted. We will eventually need to crunch the file down, but if several files are being removed (perhaps as part of an "update" process) we can make things considerably faster by deferring the removal to "flush" time.
Flush any pending writes. In particular, this will crunch out deleted entries, and write the Central Directory and EOCD if we have stomped on them.
Crunch deleted files out of an archive by shifting the later files down. Because we're not using a temp file, we do the operation inside the current file.
Works like memmove(), but on pieces of a file.
Get the modification time from a file descriptor.
Get a copy of the Zip file descriptor. We don't allow this if the file was opened read-write because we tend to leave the file contents in an uncertain state between calls to flush().  The duplicated file descriptor should only be valid for reads.
Expand data.
free the memory when you're done
Read the end-of-central-dir fields. "buf" should be positioned at the EOCD signature, and should contain the entire EOCD area including the comment.
Write an end-of-central-directory section.
Dump the contents of an EndOfCentralDir object.
Add a file to the end of the archive.  Specify whether you want the library to try to store it compressed. If "storageName" is specified, the archive will use that instead of "fileName". If there is already an entry with the same name, the call fails. Existing entries with the same name must be removed first. If "ppEntry" is non-NULL, a pointer to the new entry will be returned.
Add a file that is already compressed with gzip. If "ppEntry" is non-NULL, a pointer to the new entry will be returned.
Add a file from an in-memory data buffer. If "ppEntry" is non-NULL, a pointer to the new entry will be returned.
android_get_control_socket - simple helper function to get the file descriptor of our init-managed Unix domain socket. `name' is the name of the socket, as given in init.rc. Returns -1 on error. This is inline and not in libcutils proper because we want to use this in third-party daemons with minimal modification.
return the frame size (number of bytes per sample).
convenience API for opening and closing a supported device
convenience API for opening and closing a supported device
convenience API for opening and closing a supported device
convenience API for opening and closing a supported device
convenience API for opening and closing a device
convenience API for opening and closing a device
Implement the methods that sp<ANativeWindowBuffer> expects so that it can be used to automatically refcount ANativeWindowBuffer's.
native_window_set_usage(..., usage) Sets the intended usage flags for the next buffers acquired with (*lockBuffer)() and on. By default (if this function is never called), a usage of is assumed. Calling this function will usually cause following buffers to be reallocated.
deprecated. Always returns 0. Don't call.
deprecated. Always returns 0. Don't call.
native_window_set_crop(..., crop) Sets which region of the next queued buffers needs to be considered. A buffer's crop region is scaled to match the surface's size. The specified crop region applies to all buffers queued after it is called. if 'crop' is NULL, subsequently queued buffers won't be cropped. An error is returned if for instance the crop region is invalid, out of the buffer's bound or if the window is invalid.
native_window_set_buffer_count(..., count) Sets the number of buffers associated with this native window.
native_window_set_buffers_geometry(..., int w, int h, int format) All buffers dequeued after this call will have the dimensions and format specified.  A successful call to this function has the same effect as calling native_window_set_buffers_size and native_window_set_buffers_format. XXX: This function is deprecated.  The native_window_set_buffers_dimensions and native_window_set_buffers_format functions should be used instead.
native_window_set_buffers_dimensions(..., int w, int h) All buffers dequeued after this call will have the dimensions specified. In particular, all buffers will have a fixed-size, independent form the native-window size. They will be scaled according to the scaling mode (see native_window_set_scaling_mode) upon window composition. If w and h are 0, the normal behavior is restored. That is, dequeued buffers following this call will be sized to match the window's size. Calling this function will reset the window crop to a NULL value, which disables cropping of the buffers.
native_window_set_buffers_format(..., int format) All buffers dequeued after this call will have the format specified. If the specified format is 0, the default buffer format will be used.
native_window_set_buffers_transform(..., int transform) All buffers queued after this call will be displayed transformed according to the transform parameter specified.
native_window_set_buffers_timestamp(..., int64_t timestamp) All buffers queued after this call will be associated with the timestamp parameter specified. If the timestamp is set to NATIVE_WINDOW_TIMESTAMP_AUTO (the default), timestamps will be generated automatically when queueBuffer is called. The timestamp is measured in nanoseconds, and is normally monotonically increasing. The timestamp should be unaffected by time-of-day adjustments, and for a camera should be strictly monotonic but for a media player may be reset when the position is set.
native_window_set_scaling_mode(..., int mode) All buffers queued after this call will be associated with the scaling mode specified.
native_window_api_connect(..., int api) connects an API to this window. only one API can be connected at a time. Returns -EINVAL if for some reason the window cannot be connected, which can happen if it's connected to some other API.
native_window_api_disconnect(..., int api) disconnect the API from this window. An error is returned if for instance the window wasn't connected in the first place.
Disambiguate between the incStrong in REF and NATIVE_TYPE
Low-level accessors.
Gets the number of bytes to add to step to the next SampleData object in a motion event message for a given number of pointers.
Adds the SampleData stride to the given pointer.
a valid rectangle has a non negative width and height
an empty rect has a zero width or height, or is invalid
rectangle's width
rectangle's height
the following 4 functions return the 4 corners of the rect as Point
Get the type of a file (usually regular or directory).
Finds the first marked bit in the set and clears it.  Returns the bit index. Result is undefined if all bits are unmarked.
Finds the first unmarked bit in the set and marks it.  Returns the bit index. Result is undefined if all bits are marked.
Finds the last marked bit in the set and clears it.  Returns the bit index. Result is undefined if all bits are unmarked.
Gets the index of the specified bit in the set, which is the number of marked bits that appear before the specified bit.
These macros are like the hton/ntoh byte swapping macros, except they allow you to swap to and from the "device" byte order.  The device byte order is the endianness of the target device -- for the ARM CPUs we use today, this is little endian. Note that the byte swapping functions have not been optimized much; performance is currently not an issue for them since the intent is to allow us to avoid byte swapping on the device.
Call this when mapping is no longer needed.
return #of elements in list
Return the first element or one past the last element.  The _Node* we're returning is converted to an "iterator" by a constructor in _ListIterator.
insert before the current node; returns iterator at new node
insert a range of elements before the current node
remove one entry; returns iterator at next node
remove a range of elements
remove all contents of the list
I want a _Node but don't need it to hold valid data.  More to the point, I don't want T's constructor to fire, since it might have side-effects or require arguments.  So, we do this slightly uncouth storage alloc.
! DEBUGGING ONLY: Enable tracking of object.
! DEBUGGING ONLY: Get current strong ref count.
Compare two configuration, returning CONFIG_* flags set for each value that is different.
Return true if 'this' can be considered a match for the parameters in 'settings'. Note this is asymetric.  A default piece of data will match every request but a request for the default should not match odd specifics (ie, request with no mcc should not match a particular mcc's data) settings is the requested settings
! editItemAt() MUST NOT change the order of this item
Return entry N. [should use operator[] here]
--------------------------------------------------------------------------- No user servicable parts below.
Create and run a new thread.
Create thread with lots of parameters
Get some sort of unique identifier for the current thread.
Return the #of entries in the Zip archive.
Utility function to convert ZIP's time format to a timespec struct.
Some basic functions for raw data manipulation.  "LE" means Little Endian.
Check to see if /proc/mounts contains any writeable filesystems backed by a block device. Return true if none found, else return false.
Remounting filesystems read-only is difficult when there are files opened for writing or pending deletes on the filesystem.  There is no way to force the remount with the mount(2) syscall.  The magic sysrq 'u' command does an emergency remount read-only on all writable filesystems that have a block device (i.e. not tmpfs filesystems) by calling emergency_remount(), which knows how to force the remount to read-only. Unfortunately, that is asynchronous, and just schedules the work and returns.  The best way to determine if it is done is to read /proc/mounts repeatedly until there are no more writable filesystems mounted on block devices.
Returns 0 if successful, < 0 otherwise..
ashmem_create_region - creates a new ashmem region and returns the file descriptor, or <0 on error `name' is an optional label to give the region (visible in /proc/pid/maps) `size' is the size of the region, in page-aligned bytes
Copies, if it fits within max_output_string bytes, into output_string a hash of the contents, size, permissions, uid, and gid of the file specified by path, using the specified algorithm.  Returns the length of the output string, or a negative number if the buffer is too short.
Allocates a string containing the names and hashes of all files recursively reached under the specified directory_path, using the specified algorithm. The string is returned as *output_string; the return value is the length of the string, or a negative number if there was a failure.
No-op stubs for functions defined in system/bionic/bionic/dlmalloc.c.
Hashes the given key.
Sets the non-blocking flag on a descriptor.
Closes a fd and logs a warning if the close fails.
Hashes pid_t keys.
Compares pid_t keys.
Gets the master address. Not thread safe.
Gets exclusive access to the peer for this thread.
Releases exclusive access to the peer.
Frees a simple, i.e. header-only, outgoing packet.
Prepare to read a new packet from the peer.
Sets up the buffer for the outgoing header.
Adds a packet to the end of the queue. Callers must have the mutex.
Takes the peer lock and enqueues the given packet.
Frees current packet and moves to the next one. Returns true if there is a next packet or false if the queue is empty.
Checks whether a peer died recently.
Cleans up connection information.
Called when the peer dies.
Buffers output sent to a peer. May be called multiple times until the entire buffer is filled. Returns true when the buffer is empty.
Writes packet bytes to peer.
Sends a socket to the peer.
Writes some outgoing data.
Sets up a peer proxy's fd before we try to select() it.
Prepare to read bytes from the peer.
Gets a peer proxy for the given ID. Creates a peer proxy if necessary. Sends a connection request to the master if desired. Returns NULL if an error occurs. Sets errno to EHOSTDOWN if the peer died or ENOMEM if memory couldn't be allocated.
Switches the master peer proxy into a state where it's waiting for a connection from the master.
Sets up fd callbacks.
Accepts a connection sent by the master proxy.
Frees an outgoing packet containing a connection.
Connects two known peers.
Informs a peer that the peer they're trying to connect to couldn't be found.
Handles a request to be connected to another peer.
The master told us this peer is dead.
Handles a packet header.
Buffers input sent by peer. May be called multiple times until the entire buffer is filled. Returns true when the buffer is full.
Reads input from a peer process.
Accepts a connection to the master peer.
Creates the local peer.
Frees a packet of bytes.
Sends a packet of bytes to a remote peer. Returns 0 on success. Returns -1 if an error occurs. Sets errno to ENOMEM if memory couldn't be allocated. Sets errno to EHOSTDOWN if the peer died recently. Sets errno to EINVAL if pid is the same as the local pid.
Frees shared bytes.
Sends a packet of bytes to a remote peer without copying the bytes. Calls free() with context after the bytes have been sent. Returns -1 if an error occurs. Sets errno to ENOMEM if memory couldn't be allocated. Sets errno to EHOSTDOWN if the peer died recently. Sets errno to EINVAL if pid is the same as the local pid.
Starts the master peer. The master peer differs from other peers in that it is responsible for connecting the other peers. You can only have one master peer. Goes into an I/O loop and does not return.
Starts a local peer. Goes into an I/O loop and does not return.
Starts the master peer I/O loop. Doesn't return.
A direct copy of dlmalloc_usable_size(), which isn't compiled in when ONLY_MSPACES is set. The mspace parameter isn't actually necessary, but we include it to be consistent with the rest of the mspace_*() functions.
Ensure that we have enough storage to write "size" bytes at the current offset.  We also have to take into account the extra '\0' that we maintain just past EOF. Returns 0 on success.
Write data to a memstream, expanding the buffer if necessary. If we previously seeked beyond EOF, zero-fill the gap. Returns the number of bytes written.
Seek within a memstream. Returns the new offset, or -1 on failure.
Close the memstream.  We free everything but the data buffer.
Prepare a memstream.
Simple regression test. To test on desktop Linux with valgrind, it's possible to make a simple change to open_memstream() to use fopencookie instead: cookie_io_functions_t iofuncs = fp = fopencookie(stream, "w", iofuncs); (Some tweaks to seek_memstream are also required, as that takes a pointer to an offset rather than an offset, and returns 0 or -1.)
Connect to the properties server. Returns the socket descriptor on success.
Perform one-time initialization.
Only call once per process.
Returns: 0 on success. -errno on failure.
returns NULL; if there isn't a full record in the buffer
Reads the next record from stream fd Records are prefixed by a 16-bit big endian length value Records may not be larger than maxRecordLen Doesn't guard against EINTR p_outRecord and p_outRecordLen may not be NULL Return 0 on success, -1 on fail Returns 0 with *p_outRecord set to NULL on end of stream Returns -1 / errno = EAGAIN if it needs to read again
Add tid to the scheduling group defined by the policy
Try to get the scheduler group. The data from /proc/<pid>/cgroup looks (something) like: 2:cpu:/bg_non_interactive 1:cpuacct: We return the part after the "/", which will be an empty string for the default cgroup.  If the string is longer than "bufLen", the string will be truncated.
Reads and ignores wake up data.
Adds an fd to the given set if the callback is non-null. Returns true if the fd was added.
Removes stale file descriptors and initializes file descriptor sets.
Invokes a callback if the callback is non-null and the fd is in the given set.
Notifies user if file descriptors are readable or writable, or if out-of-band data is present.
open listen() port on any interface
Documented in header file.
connect to peer named "name" on fd returns same fd or -1 on error. fd is not closed on error. that's your job. Used by AndroidSocketImpl
connect to peer named "name" returns fd or -1 on error
Connect to port on the loopback IP interface. type is SOCK_STREAM or SOCK_DGRAM. return is a file descriptor or -1 on error
open listen() port on loopback interface
Connect to port on the IP interface. type is SOCK_STREAM or SOCK_DGRAM. return is a file descriptor or -1 on error
Given a UTF-16 string, compute the length of the corresponding UTF-8 string in bytes.
Convert a Java-Style UTF-16 string + length to a JNI-Style UTF-8 string. This basically means: embedded \0's in the UTF-16 string are encoded as "0xc0 0x80" Make sure you allocate "utf8Str" with the result of strlen16to8() + 1, not just "len". Please note, a terminated \0 is always added, so your result will always be "strlen16to8() + 1" bytes long.
Convert a UTF-16 string to UTF-8.
out_len is an out parameter (which may not be null) containing the length of the UTF-16 string (which may contain embedded \0's)
Like "strlen", but for strings encoded with Java's modified UTF-8. The value returned is the number of UTF-16 characters required to represent this string.
Retrieve the next UTF-32 character from a UTF-8 string. Stops at inner \0's Returns UTF16_REPLACEMENT_CHAR if an invalid sequence is encountered Advances "*pUtf8Ptr" to the start of the next character.
out_len is an out parameter (which may not be null) containing the length of the UTF-16 string (which may contain embedded \0's)
length is the number of characters in the UTF-8 string. out_len is an out parameter (which may not be null) containing the length of the UTF-16 string (which may contain embedded \0's)
use djb hash unless we find it inadequate
Could get fancy here and deliver something such as "UTC+xxxx" or "UTC-xxxx" if offset is non-zero, but this is no time for a treasure hunt.
Do a binary search (this works whatever time_t's type is).
Like recv(), but checks that messages actually originate from the kernel.
If sendStdio is non-zero, the current process's stdio file descriptors will be sent and inherited by the spawned process.
Spawns a new dalvik instance via the Zygote process. The non-zygote arguments are passed to com.android.internal.os.RuntimeInit(). The first non-option argument should be a class name in the system class path. The arg list  may start with zygote params such as --set-uid. If sendStdio is non-zero, the current process's stdio file descriptors will be sent and inherited by the spawned process. The pid of the child process is returned, or -1 if an error was encountered. zygote_run_oneshot waits up to ZYGOTE_RETRY_COUNT ZYGOTE_RETRY_MILLIS for the zygote socket to be available.
Replaces all occurrances of newline with space.
Load the file defined by the variant and if successful return the dlopen handle and the hmi.
Open the map file and allocate a structure to manage it. We create a private mapping because we want to terminate the log tag strings with '\0'.
Close the map.
Look up an entry in the map. The entries are sorted by tag number, so we can do a binary search.
Determine whether "c" is a whitespace char.
Determine whether "c" is a valid tag char.
Determine whether "c" is a valid decimal digit.
Crunch through the file, parsing the contents and creating a tag index.
Run through all lines in the file, determining whether they're blank, comments, or possibly have a tag entry. This is a very "loose" scan.  We don't try to detect syntax errors here. The later pass is more careful, but the number of tags found there must match the number of tags found here. Returns the number of potential tag entries found.
Parse the tags out of the file.
Scan one tag line. "*pData" should be pointing to the first digit in the tag number.  On successful return, it will be pointing to the last character in the tag line (i.e. the character before the start of the next line). Returns 0 on success, nonzero on failure.
Compare two EventTags.
Sort the EventTag array so we can do fast lookups by tag index.  After the sort we do a quick check for duplicate tag indices. Returns 0 on success.
Dump the tag array for debugging.
Allocate an fd and associate a new LogState with it. The fd is available via the fakeFd field of the return value.
Translate an fd to a LogState.
Unregister the fake fd and free the memory it pointed to.
Configure logging based on ANDROID_LOG_TAGS environment variable.  We need to parse a string that looks like *:v jdwp:d dalvikvm:d dalvikvm-gc:i dalvikvmi:i The tag (or '*' for the global level) comes first, followed by a colon and a letter indicating the minimum priority level we're expected to log. This can be used to reveal or conceal logs with specific tags. We also want to check ANDROID_PRINTF_LOG to determine how the output will look.
Return a human-readable string for the priority level.  Always returns a valid string.
Some platforms like WIN32 do not have writev(). Make up something to replace it.
Write a filtered log message to stderr. Log format parsing taken from the long-dead utils/Log.cpp.
Receive a log message.  We happen to know that "vector" has three parts: priority (1 byte) tag (N bytes -- null-terminated ASCII string) message (N bytes -- null-terminated ASCII string)
Free up our state and close the fake descriptor.
Open a log output device and return a fake fd.
Like __android_log_bwrite, but takes the type as well.  Doesn't work for the general case where we're generating lists of stuff, but very handy if we just want to dump an integer into the log.
Note: also accepts 0-9 priorities returns ANDROID_LOG_UNKNOWN if the character is unrecognized
for debugging
returns 1 if this log line should be printed based on its priority and tag, and 0 if it should not
Returns FORMAT_OFF on invalid string
filterExpression: a single filter expression eg "AT:d" returns 0 on success and -1 on invalid expression Assumes single threaded execution
filterString: a comma/whitespace-separated set of filter expressions eg "AT:d *:i" returns 0 on success and -1 on invalid expression Assumes single threaded execution
Splits a wire-format buffer into an AndroidLogEntry entry allocated by caller. Pointers will point directly into buf Returns 0 on success and -1 on invalid wire format (entry will be in unspecified state)
Extract a 4-byte value from a byte stream.
Extract an 8-byte value from a byte stream.
Recursively convert binary log data to printable form. This needs to be recursive because you can have lists of lists. If we run out of room, we stop processing immediately.  It's important for us to check for space on every output element to avoid producing garbled output. Returns 0 on success, 1 on buffer full, -1 on failure.
Convert a binary log entry to ASCII form. For convenience we mimic the processLogBuffer API.  There is no pre-defined output length for the binary data, since we're free to format it however we choose, which means we can't really use a fixed-size buffer here.
Formats a log message into a buffer Uses defaultBuffer if it can, otherwise malloc()'s a new buffer If return value != defaultBuffer, caller must call free() Returns NULL on malloc error
Either print or do not print log line, based on filter Returns count bytes written
This implements the (main) framebuffer management. This class is used mostly by SurfaceFlinger, but also by command line GL application. In fact this is an implementation of ANativeWindow on top of the framebuffer. Currently it is pretty simple, it manages only two buffers (the front and back buffer).
only for debugging / logging
=========================================================================== Buffer and implementation of ANativeWindowBuffer ===========================================================================
--- InputEvent ---
--- KeyEvent ---
--- PointerCoords ---
--- PointerProperties ---
--- MotionEvent ---
Solves a linear least squares problem to obtain a N degree polynomial that fits the specified input data as nearly as possible. Returns true if a solution is found, false otherwise. The input consists of two vectors of data points X and Y with indices 0..m-1. The output is a vector B with indices 0..n-1 that describes a polynomial that fits the data, such the sum of abs(Y[i] - (B[0] + B[1] X[i] + B[2] X[i]^2 ... B[n] X[i]^n)) for all i between 0 and m-1 is minimized. That is to say, the function that generated the input data can be approximated by y(x) ~= B[0] + B[1] x + B[2] x^2 + ... + B[n] x^n. The coefficient of determination (R^2) is also returned to describe the goodness of fit of the model for the given data.  It is a value between 0 and 1, where 1 indicates perfect correspondence. This function first expands the X vector to a m by n matrix A such that A[i][0] = 1, A[i][1] = X[i], A[i][2] = X[i]^2, ..., A[i][n] = X[i]^n. Then it calculates the QR decomposition of A yielding an m by m orthonormal matrix Q and an m by n upper triangular matrix R.  Because R is upper triangular (lower part is all zeroes), we can simplify the decomposition into an m by n matrix Q1 and a n by n matrix R1 such that A = Q1 R1. Finally we solve the system of linear equations given by R1 B = (Qtranspose Y) to find B. For efficiency, we lay out A and Q column-wise in memory because we frequently operate on the column vectors.  Conversely, we lay out R row-wise.
--- InputDeviceInfo ---
--- InputChannel ---
--- InputPublisher ---
--- InputConsumer ---
--- KeyMap ---
--- Global functions ---
--- KeyCharacterMap ---
--- KeyCharacterMap::Key ---
--- KeyCharacterMap::Behavior ---
--- KeyCharacterMap::Parser ---
--- KeyLayoutMap::Parser ---
--- VirtualKeyMap::Parser ---
Create a new Asset from a file on disk.  There is a fair chance that the file doesn't actually exist. We can use "mode" to decide how we want to go about it.
Create a new Asset from a compressed file on disk.  There is a fair chance that the file doesn't actually exist. We currently support gzip files.  We might want to handle .bz2 someday.
Create a new Asset from part of an open file.
Create a new Asset from compressed data in an open file.
Create a new Asset from a memory mapping.
Create a new Asset from compressed data in a memory mapping.
Do generic seek() housekeeping.  Pass in the offset/whence values from the seek request, along with the current chunk offset and the chunk length. Returns the new chunk offset, or -1 if the seek is illegal.
Destructor.  Release resources.
Operate on a chunk of an uncompressed file. Zero-length chunks are allowed.
Create the chunk from the map.
Read a chunk of data.
Seek to a new position.
Close the asset.
Return a read-only pointer to a buffer. We can either read the whole thing in or map the relevant piece of the source file.  Ideally a map would be established at a higher level and we'd be using a different object, but we didn't, so we deal with it here.
Destructor.  Release resources.
Open a chunk of compressed data inside a file. This currently just sets up some values and returns.  On the first read, we expand the entire file into a buffer and return data from it.
Open a chunk of compressed data in a mapped region. Nothing is expanded until the first read call.
Read data from a chunk of compressed data. [For now, that's just copying data out of a buffer.]
Handle a seek request. If we're working in a streaming mode, this is going to be fairly expensive, because it requires plowing through a bunch of compressed data.
Get a pointer to a read-only buffer of data. The first time this is called, we expand the compressed data into a buffer.
Find a matching entry in a vector of FileInfo.  Because it's sorted, we can use a binary search. Assumes the vector is sorted in ascending order.
Transform string /a/b/c.apk to /data/resource-cache/a@b@c.apk@idmap
Set the current locale.  Use NULL to indicate no locale. Close and reopen Zip archives as appropriate, and reset cached information in the locale-specific sections of the tree.
Set the current vendor.  Use NULL to indicate no vendor. Close and reopen Zip archives as appropriate, and reset cached information in the vendor-specific sections of the tree.
Open an asset. The data could be; - In a file on disk (assetBase + fileName). - In a compressed file on disk (assetBase + fileName.gz). - In a Zip archive, uncompressed or compressed. It can be in a number of different directories and Zip archives. The search order is: - [appname] - "common" To find a particular file, we have to try up to eight paths with all three forms of data. We should probably reject requests for "illegal" filenames, e.g. those with illegal characters or "../" backward relative paths.
Open a non-asset file as if it were an asset. The "fileName" is the partial path starting from the application name.
Get the type of a file in the asset namespace. This currently only works for regular files.  All others (including directories) will return kFileTypeNonexistent.
Open a non-asset file as if it were an asset, searching for it in the specified app. Pass in a NULL values for "appName" if the common app directory should be used.
Open an asset, searching for it in the directory hierarchy for the specified app. Pass in a NULL values for "appName" if the common app directory should be used.
Open an asset, searching for it in the directory hierarchy for the specified locale and vendor. We also search in "app.jar". Pass in NULL values for "appName", "locale", and "vendor" if the defaults should be used.
Create a "source name" for a file from a Zip archive.
Create a path to a loose asset (asset-base/app/locale/vendor).
Create a path to a loose asset (asset-base/app/rootDir).
Return a pointer to one of our open Zip archives.  Returns NULL if no matching Zip file exists. Right now we have 2 possible Zip files (1 each in app/"common"). If caching is set to CACHE_OFF, to get the expected behavior we need to reopen the Zip file on every request.  That would be silly and expensive, so instead we just check the file modification date. Pass in NULL values for "appName", "locale", and "vendor" if the generics should be used.
Try to open an asset from a file on disk. If the file is compressed with gzip, we seek to the start of the deflated data and pass that in (just like we would for a Zip archive). For uncompressed data, we may already have an mmap()ed version sitting around.  If so, we want to hand that to the Asset instead. This returns NULL if the file doesn't exist, couldn't be opened, or claims to be a ".gz" but isn't.
Given an entry in a Zip archive, create a new Asset object. If the entry is uncompressed, we may want to create or share a slice of shared memory.
Open a directory in the asset namespace. An "asset directory" is simply the combination of all files in all locations, with ".gz" stripped for loose files.  With app, locale, and vendor defined, we have 8 directories and 2 Zip archives to scan. Pass in "" for the root dir.
Open a directory in the non-asset namespace. An "asset directory" is simply the combination of all files in all locations, with ".gz" stripped for loose files.  With app, locale, and vendor defined, we have 8 directories and 2 Zip archives to scan. Pass in "" for the root dir.
Scan the contents of the specified directory and merge them into the "pMergedInfo" vector, removing previous entries if we find "exclude" directives. Returns "false" if we found nothing to contribute.
Scan the contents of the specified directory, and stuff what we find into a newly-allocated vector. Files ending in ".gz" will have their extensions removed. We should probably think about skipping files with "illegal" names, e.g. illegal characters (/\:) or excessive length. Returns NULL if the specified directory doesn't exist.
Scan the contents out of the specified Zip archive, and merge what we find into "pMergedInfo".  If the Zip archive in question doesn't exist, we return immediately. Returns "false" if we found nothing to contribute.
Merge two vectors of FileInfo. The merged contents will be stuffed into *pMergedInfo. If an entry for a file exists in both "pMergedInfo" and "pContents", we use the newer "pContents" entry.
Load all files into the file name cache.  We want to do this across all combinations of { appname, locale, vendor }, performing a recursive directory traversal. This is not the most efficient data structure.  Also, gathering the information as we needed it (file-by-file or directory-by-directory) would be faster.  However, on the actual device, 99% of the files will live in Zip archives, so this list will be very small.  The trouble is that we have to check the "loose" files first, so it's important that we don't beat the filesystem silly looking for files that aren't there. Note on thread safety: this is the only function that causes updates to mCache, and anybody who tries to use it will call here if !mCacheValid, so we need to employ a mutex here.
Scan up to 8 versions of the specified directory.
Recursively scan this directory and all subdirs. This is similar to scanAndMergeDir, but we don't remove the .EXCLUDE files, and we prepend the extended partial path to the filenames.
Trash the cache.
Destructor.  Close any open archives.
Close a Zip file and reset the entry.
Retrieve the appropriate Zip file from the set.
Generate the partial pathname for the specified archive.  The caller gets to prepend the asset root directory. Returns something like "common/en-US-noogle.jar".
Compute the zip file's index. "appName", "locale", and "vendor" should be set to NULL to indicate the default directory.
=========================================================================== XobotOS additions ===========================================================================
Utility function, equivalent to stpcpy(): perform a strcpy, but instead of returning the initial dest, return a pointer to the trailing NUL.
Returns number of bytes written
Wire format to the backup manager service is chunked:  each chunk is prefixed by a 4-byte count of its size.  A chunk size of zero (four zero bytes) indicates EOD.
Return the stack frame name on the designated level
Dump a stack trace to the log
Return a string (possibly very long) containing the complete stack trace
Constructor.  Create an empty object.
Create a new mapping on an open file. Closing the file descriptor does not unmap the pages, so we don't claim ownership of the fd. Returns "false" on failure.
Provide guidance to the system.
XOBOTOS ADDITIONS
Static math methods involving linear transformations
--- WeakMessageHandler ---
Like strdup(), but uses C++ "new" operator instead of malloc.
Concatenate an argument vector.
Count the #of args in an argument vector.  Don't count the final NULL.
Get a file's type.
Get a file's modification date.
Round up to the next highest power of 2.
--- PropertyMap::Parser ---
Standard C isspace() is only required to look at the low byte of its input, so produces incorrect results for UTF-16 characters.  For safety's sake, assume that any high-byte UTF-16 code point is not whitespace.
range checked; guaranteed to NUL-terminate within the stated number of available slots NOTE: if this truncates the dst string due to running out of space, no attempt is made to avoid splitting surrogate pairs.
Followed by 'numAttr' bag_entry structures.
Normalize a string for output
Streaming access to compressed asset data in an open fd
Streaming access to compressed data held in an mmapped region of memory
Basic approach: 1. If we have undelivered uncompressed data, send it.  At this point 2. While we haven't sent enough data to satisfy the request:
seeking backwards requires uncompressing fom the beginning, so is very expensive.  seeking forwards only requires uncompressing from the current position to the destination.
An expanding array of strings.  Add, get, sort, delete.
Add a string.  A copy of the string is made.
Delete an entry.
Sort the array.
Pass this to the sort routine to do an ascending alphabetical sort.
Set entry N to specified string. [should use operator[] here]
Set the current time.  This only works when running as root.
native public static long uptimeMillis();
native public static long elapsedRealtime();
we use this trampoline when we need to set the priority with nice/setpriority.
Create and run a new thread.
Constructor.  Set up the WinCondition stuff.
Destructor.  Free Windows resources as well as our allocated storage.
Signal the condition variable, allowing one thread to continue.
Signal the condition variable, allowing all threads to continue. First we have to wake up all threads waiting on the semaphore, then we wait until all of the threads have actually been woken before releasing the internal mutex.  This ensures that all threads are woken.
This is our thread object!
Start the timer.
Stop the timer.
Get the duration in microseconds.
Subtract two timevals.  Returns the difference (ptv1-ptv2) in microseconds.
Add the specified amount of time to the timeval.
Return number of UTF-8 bytes required for the character. If the character is invalid, return size of 0.
Write out the source character to <dstP>.
Returns 1-4 based on the number of leading bits. 1111 -> 4 1110 -> 3 110x -> 2 10xx -> 1 0xxx -> 1
Convert a ZipEntryRO to a hash table index, verifying that it's in a valid range.
Open the specified file read-only.  We memory-map the entire thing and close the file before returning.
Parse the Zip archive, verifying its contents and initializing internal data structures.
Simple string hash function for non-null-terminated strings.
Add a new entry to the hash table.
Find a matching entry. Returns NULL if not found.
Find the Nth entry. This currently involves walking through the sparse hash table, counting non-empty entries.  If we need to speed this up we can either allocate a parallel lookup table or (perhaps better) provide an iterator interface.
Get the useful fields from the zip entry. Returns "false" if the offsets to the fields or the contents of the fields appear to be bogus.
Copy the entry's filename to the buffer.
Create a new FileMap object that spans the data in "entry".
Uncompress an entry, in its entirety, into the provided output buffer. This doesn't verify the data's CRC, which might be useful for uncompressed data.  The caller should be able to manage it.
Uncompress an entry, in its entirety, to an open file descriptor. This doesn't verify the data's CRC, but probably should.
Uncompress "deflate" data from one buffer to another.
Uncompress "deflate" data from one buffer to an open file descriptor.
Utility function that expands zip/gzip "deflate" compressed data into a buffer. "fd" is an open file positioned at the start of the "deflate" data "buf" must hold at least "uncompressedLen" bytes.
Utility function that expands zip/gzip "deflate" compressed data into a buffer. (This is a clone of the previous function, but it takes a FILE* instead of an fd.  We could pass fileno(fd) to the above, but we can run into trouble when "fp" has a different notion of what fd's file position is.) "fp" is an open file positioned at the start of the "deflate" data "buf" must hold at least "uncompressedLen" bytes.
Look at the contents of a gzip archive.  We want to know where the data starts, and how long it will be after it is uncompressed. We expect to find the CRC and length as the last 8 bytes on the file. This is a pretty reasonable thing to expect for locally-compressed files, but there's a small chance that some extra padding got thrown on (the man page talks about compressed data written to tape).  We don't currently deal with that here.  If "gzip -l" whines, we're going to fail too. On exit, "fp" is pointing at the start of the compressed data.
Character & encoding tests.
Regression test for SF bug #491986.
Regression test for SF bug #514281.
Regression test for SF bug #600479.
Regression test for SF bug #477667.
Regression test for SF bug #481609, #774028.
Regression test #1 for SF bug #653180.
Regression test #2 for SF bug #653180.
Regression test #3 for SF bug #653180.
Regression test #4 for SF bug #653180.
Regression test #5 for SF bug #653180.
Regression test for SF bug #478332.
XML declaration tests.
Test that no error is reported for unknown entities if we don't
Test that an error is reported for unknown entities if we don't
Test that an error is reported for unknown entities if we don't
Test that an error is reported for unknown entities if we have read
Test that no error is reported for unknown entities if we have read
Regression test for SF bug #483514.
See related SF bug #673791.
Regression test for SF bug #824420.
Regression test for SF bug #566334.
Regression test for SF bug #566334.
Regression test #1 for SF bug #673791.
Regression test #2 for SF bug #673791.
Regression test #3 for SF bug #673791.
Regression test #4 for SF bug #673791.
Regression test for SF bug #692964: two prefixes for one namespace.
Regression test for SF bug #695401: unbound prefix.
Regression test for SF bug #695401: unbound prefix.
Gives up ownership; the internal pointer becomes NULL.
Deletes the object it owns, and adopts (takes ownership of) the one passed in. Subclass must override: Base class does not delete the object.
Destructor deletes the object it owns.
Deletes the object it owns, and adopts (takes ownership of) the one passed in.
Destructor deletes the array it owns.
Deletes the array it owns, and adopts (takes ownership of) the one passed in.
Default constructor, the index starts with 0 as default.
Create a new ParsePosition with the given initial index.
Copy constructor
------------------------------------------------------------------------------ Inline Functions Definitions ... ------------------------------------------------------------------------------
Removes the first n string units.
Removes the last n string units.
Returns a substring of this StringPiece.
Global operator != for StringPiece
Less than operator. Performs only bitwise comparison. less than the characters in <code>text</code>, FALSE otherwise
Set bits in a bit rectangle in "vertical" bit organization. start<limit<=0x800
Override some bits and bytes to the result of contains(FFFD) for faster validity checking at runtime. No need to set 0 values where they were reset to 0 in the constructor and not modified by initBits(). (asciiBytes[] trail bytes, table7FF[] 0..7F, bmpBlockBits[] 0..7FF) Need to set 0 values for surrogates D800..DFFF.
------------------------------------------ Default constructor and destructor -------------------------------------------
Resets the iterator so that one can start again from the beginning.
the iteration is done.
while changing the source string, saving object creation.
Dumb recursive implementation of permutation. TODO: optimize
we have a segment, in NFD. Find all the strings that are canonically equivalent to it.
See if the decomposition of cp2 is at segment starting at segmentPos (with canonical rearrangment!) If so, take the remainder, and return the equivalents
Destructor deletes the memory it owns.
Deletes the array (if owned) and aliases another one, no transfer of ownership. If the arguments are illegal, then the current array is unchanged.
Deletes the memory block (if owned) and aliases another one, no transfer of ownership. If the arguments are illegal, then the current memory is unchanged.
Remove an item
Search for a library. Doesn't lock
Call the plugin with some params
Initialize a plugin fron an entrypoint and library - but don't load it.
### Get available
Internal constructor to allow construction of a locale object with NO side effects.   (Default constructor tries to get the default locale.)
This function initializes a Locale from a C locale ID
Set the locale's data based on a posix id.
ISO-639 doesn't distinguish between Persian and Dari.
duplicate for roundtripping
This LCID is really four different locales.
The "no" locale split into nb and nn.  By default in ICU, "no" is nb.
Declared as or_IN to get around compiler errors
Cyrillic based by default
ReorderingBuffer --------------------------------------------------------
Inserts c somewhere before the last character. Requires 0<cc<lastCC which implies reorderStart<limit.
Decompose a short piece of text which is likely to contain characters that fail the quick check loop and/or where the quick check loop's overhead is unlikely to be amortized. Called by the compose() and makeFCD() implementations.
Note: hasDecompBoundary() could be implemented as aliases to hasFCDBoundaryBefore() and hasFCDBoundaryAfter() at the cost of building the FCD trie for a decomposition normalizer.
Finds the recomposition result for a forward-combining "lead" character, specified with a pointer to its compositions list, and a backward-combining "trail" character. If the lead and trail characters combine, then this function returns the following "compositeAndFwd" value: Bits 21..1  composite character Bit      0  set if the composite is a forward-combining starter otherwise it returns -1. The compositions list has (trail, compositeAndFwd) pair entries, encoded as either pairs or triples of 16-bit units. The last entry has the high bit of its first unit set. The list is sorted by ascending trail characters (there are no duplicates). A linear search is used. See normalizer2impl.h for a more detailed description of the compositions list format.
Recomposes the buffer text starting at recomposeStartIndex (which is in NFD - decomposed and canonically ordered), and truncates the buffer contents. Note that recomposition never lengthens the text: Any character consists of either one or two code units; a composition may contain at most one more code unit than the original starter, while the combining mark that is removed has at least one code unit.
Does c have a composition boundary before it? True if its decomposition begins with a character that has ccc=0 && NFC_QC=Yes (isCompYesAndZeroCC()). As a shortcut, this is true if c itself has ccc=0 && NFC_QC=Yes (isCompYesAndZeroCC()) so we need not decompose.
CanonicalIterator data --------------------------------------------------
Decomposes c, which must be a Hangul syllable, into buffer and returns the length of the decomposition (2 or 3).
For Hangul composition, replacing the Leading consonant Jamo with the syllable.
UBool isCompYes(uint16_t norm16) const { UBool isCompYesOrMaybe(uint16_t norm16) const { UBool hasZeroCCFromDecompYes(uint16_t norm16) const {
A little faster and simpler than isDecompYesAndZeroCC() but does not include the MaybeYes which combine-forward and have ccc=0. (Standard Unicode 5.2 normalization does not have such characters.)
For use with isCompYes(). Perhaps the compiler can combine the two tests for MIN_YES_YES_WITH_CC. static uint8_t getCCFromYes(uint16_t norm16) {
Requires algorithmic-NoNo.
------------------------------------------------------------------------- Constructors and other boilerplate -------------------------------------------------------------------------
Generates a hash code for this iterator.
Return the current character in the normalized text.
Return the next character in the normalized text and advance the iteration position by one.  If the end of the text has already been reached, {@link #DONE} is returned.
Return the previous character in the normalized text and decrement the iteration position by one.  If the beginning of the text has already been reached, {@link #DONE} is returned.
Return the first character in the normalized text.  This resets the <tt>Normalizer's</tt> position to the beginning of the text.
Return the last character in the normalized text.  This resets the <tt>Normalizer's</tt> position to be just before the the input text corresponding to that normalized character.
Retrieve the current iteration position in the input text that is being normalized.  This method is useful in applications such as searching, where you need to be able to determine the position in the input text that corresponds to a given normalized output character. <p> <b>Note:</b> This method sets the position in the <em>input</em>, while {@link #next} and {@link #previous} iterate through characters in the <em>output</em>.  This means that there is not necessarily a one-to-one correspondence between characters returned by <tt>next</tt> and <tt>previous</tt> and the indices passed to and returned from <tt>setIndex</tt> and {@link #getIndex}.
Retrieve the index of the start of the input text.  This is the begin index of the <tt>CharacterIterator</tt> or the start (i.e. 0) of the <tt>String</tt> over which this <tt>Normalizer</tt> is iterating
Retrieve the index of the end of the input text.  This is the end index of the <tt>CharacterIterator</tt> or the length of the <tt>String</tt> over which this <tt>Normalizer</tt> is iterating
------------------------------------------------------------------------- Property access methods -------------------------------------------------------------------------
Set the input text over which this <tt>Normalizer</tt> will iterate. The iteration position is set to the beginning of the input text.
Set the input text over which this <tt>Normalizer</tt> will iterate. The iteration position is set to the beginning of the string.
Copies the text under iteration into the UnicodeString referred to by "result".
------------------------------------------------------------------------- Private utility methods -------------------------------------------------------------------------
Load the property names data.  Caller should check that data is not loaded BEFORE calling this function.  Returns TRUE if the load succeeds.
Inline function that expands to code that does a lazy load of the property names data.  If the data is already loaded, avoids an unnecessary function call.  If the data is not loaded, call _load() to load it, and return TRUE if the load succeeds.
#define DEBUG_TZNAME
This method compares the two files given to see if they are a match. It is currently use to compare two TZ files.
A helper function used by uprv_getPOSIXIDForDefaultLocale and uprv_getPOSIXIDForDefaultCodepage. Returns the posix locale id for LC_CTYPE and LC_MESSAGES. It doesn't support other locale categories.
Return just the POSIX id for the default locale, whatever happens to be in it. It gets the value from LC_MESSAGES and indirectly from LC_ALL and LANG.
Return just the POSIX id for the default codepage, whatever happens to be in it. It gets the value from LC_CTYPE and indirectly from LC_ALL and LANG.
Constructs a RuleBasedBreakIterator that uses the already-created tables object that is passed in as a parameter.
Same as above but does not adopt memory
------------------------------------------------------------------------------- Constructor   from a UDataMemory handle to precompiled break rules -------------------------------------------------------------------------------
------------------------------------------------------------------------------- Constructor       from a set of rules supplied as a string. -------------------------------------------------------------------------------
------------------------------------------------------------------------------- Default Constructor.      Create an empty shell that can be set up later. -------------------------------------------------------------------------------
------------------------------------------------------------------------------- Copy constructor.  Will produce a break iterator with the same behavior, -------------------------------------------------------------------------------
Set the iterator to analyze a new piece of text.  This function resets the current iteration position to the beginning of the text.
Set the iterator to analyze a new piece of text.  This function resets the current iteration position to the beginning of the text.
Sets the current iteration position to the beginning of the text.
Sets the current iteration position to the end of the text.
Advances the iterator either forward or backward the specified number of steps. Negative values move backward, and positive values move forward.  This is equivalent to repeatedly calling next() or previous(). (negative is backwards, and positive is forwards). the current one.
Advances the iterator to the next boundary position.
Advances the iterator backwards, to the last boundary preceding this one.
Sets the iterator to refer to the first boundary position following the specified position.
Sets the iterator to refer to the last boundary position before the specified position.
Returns true if the specfied position is a boundary position.  As a side effect, leaves the iterator pointing to the first boundary position at or after "offset".
Returns the current iteration position.
------------------------------------------------------------------------------- getRuleStatus()   Return the break rule tag associated with the current -------------------------------------------------------------------------------
------------------------------------------------------------------------------- getBinaryRules        Access to the compiled form of the rules, -------------------------------------------------------------------------------
------------------------------------------------------------------------------- BufferClone       TODO:  In my (Andy) opinion, this function should be deprecated. -------------------------------------------------------------------------------
------------------------------------------------------------------------------- checkDictionary       This function handles all processing of characters in -------------------------------------------------------------------------------
----------------------------------------------------------------------------- Operator ==    Consider two RBBIDataWrappers to be equal if they -----------------------------------------------------------------------------
------------------------------------------------------------------------- flattenVariables   Walk a parse tree, replacing any variable -------------------------------------------------------------------------
------------------------------------------------------------------------- flattenSets    Walk the parse tree, replacing any nodes of type setRef -------------------------------------------------------------------------
------------------------------------------------------------------------- findNodes()     Locate all the nodes of the specified type, starting -------------------------------------------------------------------------
------------------------------------------------------------------------------ doParseAction        Do some action during rule parsing. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ Error         Report a rule parse error. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ fixOpStack   The parse stack holds partially assembled chunks of the parse tree. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ findSetFor    given a UnicodeString, ------------------------------------------------------------------------------
------------------------------------------------------------------------------ stripRules    Return a rules string without unnecessary ------------------------------------------------------------------------------
------------------------------------------------------------------------------ nextCharLL    Low Level Next Char from rule input source. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ nextChar     for rules scanning.  At this level, we handle stripping ------------------------------------------------------------------------------
------------------------------------------------------------------------------ Parse RBBI rules.   The state machine for rules parsing is here. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ pushNewNode   create a new RBBINode of the specified type and push it ------------------------------------------------------------------------------
------------------------------------------------------------------------------ scanSet    Construct a UnicodeSet from the text at the current scan ------------------------------------------------------------------------------
------------------------------------------------------------------------ build          Build the list of non-overlapping character ranges ------------------------------------------------------------------------
----------------------------------------------------------------------------------- getTrieSize()    Return the size that will be required to serialize the Trie. -----------------------------------------------------------------------------------
----------------------------------------------------------------------------------- serializeTrie()   Put the serialized trie at the specified address. -----------------------------------------------------------------------------------
------------------------------------------------------------------------ addValToSets     Add a runtime-mapped input value to each uset from a ------------------------------------------------------------------------
------------------------------------------------------------------------ getFirstChar      Given a runtime RBBI character category, find ------------------------------------------------------------------------
------------------------------------------------------------------------------------- RangeDescriptor copy constructor -------------------------------------------------------------------------------------
------------------------------------------------------------------------------------- RangeDesriptor default constructor -------------------------------------------------------------------------------------
------------------------------------------------------------------------------------- RangeDesriptor Destructor -------------------------------------------------------------------------------------
RBBISymbolTable::lookup       This function from the abstract symbol table inteface
RBBISymbolTable::lookupMatcher   This function from the abstract symbol table
RBBISymbolTable::parseReference   This function from the abstract symbol table interface
RBBISymbolTable::lookupNode      Given a key (a variable name), return the
----------------------------------------------------------------------------- RBBITableBuilder::build  -  This is the main function for building the DFA state transtion -----------------------------------------------------------------------------
----------------------------------------------------------------------------- calcNullable.    Impossible to explain succinctly.  See Aho, section 3.9 -----------------------------------------------------------------------------
----------------------------------------------------------------------------- calcFirstPos.    Impossible to explain succinctly.  See Aho, section 3.9 -----------------------------------------------------------------------------
----------------------------------------------------------------------------- calcLastPos.    Impossible to explain succinctly.  See Aho, section 3.9 -----------------------------------------------------------------------------
----------------------------------------------------------------------------- calcFollowPos.    Impossible to explain succinctly.  See Aho, section 3.9 -----------------------------------------------------------------------------
----------------------------------------------------------------------------- calcChainedFollowPos.    Modify the previously calculated followPos sets -----------------------------------------------------------------------------
----------------------------------------------------------------------------- bofFixup.    Fixup for state tables that include {bof} beginning of input testing. -----------------------------------------------------------------------------
----------------------------------------------------------------------------- buildStateTable()    Determine the set of runtime DFA states and the -----------------------------------------------------------------------------
----------------------------------------------------------------------------- flagAcceptingStates    Identify accepting states. -----------------------------------------------------------------------------
----------------------------------------------------------------------------- sortedAdd  Add a value to a vector of sorted values (ints). -----------------------------------------------------------------------------
----------------------------------------------------------------------------- setAdd     Set operation on UVector -----------------------------------------------------------------------------
----------------------------------------------------------------------------- setEqual    Set operation on UVector. -----------------------------------------------------------------------------
----------------------------------------------------------------------------- getTableSize()    Calculate the size of the runtime form of this -----------------------------------------------------------------------------
----------------------------------------------------------------------------- exportTable()    export the state transition table in the format required -----------------------------------------------------------------------------
----------------------------------------------------------------------------- RBBIStateDescriptor     Methods.  This is a very struct-like class -----------------------------------------------------------------------------
Releases a reference to the shared resource.
Instantiation creates an initial reference, so don't call this unless you're creating a new pointer to this.  Management of that pointer will have to know how to deal with refcounts. Return true if the resource has not already been released.
Destructions removes a reference, so don't call this unless you're removing pointer to this somewhere.  Management of that pointer will have to know how to deal with refcounts.  Once the refcount drops to zero, the resource is released.  Return false if the resouce has been released.
Return TRUE if there is at least one reference to this and the resource has not been released.
redeclare because of overload resolution rules? no, causes ambiguities since both UnicodeString and Locale have constructors that take a const char need some compiler flag to remove warnings
UBool SimpleLocaleKeyFactory::isSupportedID(const UnicodeString& id, UErrorCode& /* status */) const
Not inline since it's recursive
Very expensive, but this should never be used.
Walk the set of peers at the same level, to build a horizontal node. Uses recursion.
compute the runs array ---------------------------------------------------
This is a stub DllMain function with icu specific process handling code.
---------------------------------------------------------------------- checkCommonData   Validate the format of a common data file. ----------------------------------------------------------------------
resets the internal states of a converter goal : have the same behaviour than a freshly created converter
Rules for ISCII to Unicode converter ISCII is stateful encoding. To convert ISCII bytes to Unicode, which has both precomposed and decomposed forms characters pre-context and post-context need to be considered. Post context i)  ATR : Attribute code is used to declare the font and script switching. ii) EXT : Extention code is used to declare switching to Sanskrit and for obscure, Pre context i)  Halant: if preceeded by a halant then it is a explicit halant ii) Nukta : iii) Danda: If Danda is preceeded by a Danda then convert to Double Danda
internal fn to intersect two sets of masks returns whether the mask has reduced to all zeros
internal fn to count how many 1's are there in a mask
internal function!
ucnv_cleanup - delete all storage held by the converter cache, except any
Takes an alias name gets an actual converter file name goes to disk and opens it. allocates the memory and returns a new UConverter object
Unload a non-algorithmic converter. It must be sharedData->referenceCounter != ~0 and this function must be called inside umtx_lock(&cnvCacheMutex).
available converters list ---------------------------------------------------
Deleter function for DataCacheElements.
Get the next path on the list.
---------------------------------------------------------------------- extendICUData   If the full set of ICU data was not loaded at ----------------------------------------------------------------------
Ascertain if the given code point is a label separator as defined by the IDNA RFC
Function called by addItemEndList or addItemBeginList when the first item is added to the list. This function properly sets the pointers for the first item added.
Gets the size of the shortest subtag in the given localeID.
Lookup 'key' in the array 'list'.  The array 'list' should contain a NULL entry, followed by more entries, and a second NULL entry. The 'list' param should be LANGUAGES, LANGUAGES_3, COUNTRIES, or COUNTRIES_3.
390 specific Library Loading. This is the only platform left that dynamically loads an ICU Data Library. All other platforms use .data files when dynamic loading is required, but this turn out to be awkward to support in 390 batch mode. The idea here is to hide the fact that 390 is using dll loading from the rest of ICU, and make it look like there is file loading happening.
------------------------------------------------------------------------------ computeDirPath   given a user-supplied path of an item to be opened, ------------------------------------------------------------------------------
umtx_ct   Allocate and initialize a new ICUMutex.
umtx_dt   Delete a ICUMutex.  Destroy the underlying OS Platform mutex.
synchronized compare and swap function, for use when OS or compiler built-in equivalents aren't available. This operation relies on the ICU global mutex for synchronization. There are two cases where this function can be entered when the global mutex is not yet initialized - at the end  u_cleanup(), and at the end of u_setMutexFunctions, both of which re-init the global mutex.  But neither function is thread-safe, so the lack of synchronization at these points doesn't matter.
Mutex Cleanup Function
implementation -----------------------------------------------------------
UnicodeFunctor API.  Cast 'this' to a UnicodeMatcher* pointer and return the pointer.
Default implementation of UnicodeMatcher::matches() for Unicode filters.  Matches a single code point at offset (either one or two 16-bit code units).
Modify the given UChar32 variable so that it is in range, by pinning values < UNICODESET_LOW to UNICODESET_LOW, and pinning values > UNICODESET_HIGH-1 to UNICODESET_HIGH-1. It modifies its argument in-place and also returns it.
---------------------------------------------------------------- UnicodeString in UVector support ----------------------------------------------------------------
Constructs an empty set.
Constructs a set containing the given range. If <code>end > start</code> then an empty set is created.
Constructs a set that is identical to the given UnicodeSet.
Copy-construct as thawed.
Destructs the set.
Assigns this object to be a copy of another.
Returns a copy of this object.  All UnicodeMatcher objects have to support cloning in order to allow classes using UnicodeMatchers, such as Transliterator, to implement cloning.
Compares the specified object with this set for equality.  Returns <tt>true</tt> if the two sets have the same size, and every member of the specified set is contained in this set (or equivalently, every member of this set is contained in the specified set).
Returns the hash code value for this set.
Returns the number of elements in this set (its cardinality), Note than the elements of a set may include both individual codepoints and strings.
Returns true if this set contains the given character.
Returns the smallest value i such that c < list[i].  Caller must ensure that c is a legal value or this method will enter an infinite loop.  This method performs a binary search. inclusive inclusive, such that c < list[i]
Returns true if this set contains every character of the given range.
Returns <tt>true</tt> if this set contains the given multicharacter string.
Returns true if this set contains all the characters and strings of the given set.
Returns true if this set contains all the characters of the given string.
Returns true if this set contains none of the characters of the given range.
Returns true if this set contains none of the characters and strings of the given set.
Returns true if this set contains none of the characters of the given string.
Returns <tt>true</tt> if this set contains any character whose low byte is the given value.  This is used by <tt>RuleBasedTransliterator</tt> for indexing.
Implementation of UnicodeMatcher::matches().  Always matches the longest possible multichar string.
Returns the longest match for s in text at the given position. If limit > start then match forward from start+1 to limit matching all characters except s.charAt(0).  If limit < start, go backward starting from start-1 matching all characters except s.charAt(s.length()-1).  This method assumes that the first character, text.charAt(start), matches s, so it does not check it. direction, text.charAt(start) is matched against s.charAt(0). In the reverse direction, it is matched against s.charAt(s.length()-1). the forward direction, or last-1 in the reverse direction, where last is the index of the last character to match. start|.  If all of s matches before reaching the limit, return s.length().  If there is a mismatch between s and text, return
Implement of UnicodeMatcher
Returns the index of the given character within this set, where the set is ordered by ascending code point.  If the character is not in this set, return -1.  The inverse of this method is <code>charAt()</code>.
Returns the character at the given index within this set, where the set is ordered by ascending code point.  If the index is out of range, return (UChar32)-1.  The inverse of this method is <code>indexOf()</code>.
Make this object represent the range <code>start - end</code>. If <code>end > start</code> then this object is set to an an empty range.
Adds the specified range to this set if it is not already present.  If this set already contains the specified range, the call leaves this set unchanged.  If <code>end > start</code> then an empty range is added, leaving the set unchanged. to this set. to this set.
Adds the specified character to this set if it is not already present.  If this set already contains the specified character, the call leaves this set unchanged.
Adds the specified multicharacter to this set if it is not already present.  If this set already contains the multicharacter, the call leaves this set unchanged. Thus "ch" => {"ch"} <br><b>Warning: you cannot add an empty string ("") to a UnicodeSet.</b>
Adds the given string, in order, to 'strings'.  The given string must have been checked by the caller to not be empty and to not already be in 'strings'.
otherwise returns -1.
Adds each of the characters in this string to the set. Thus "ch" => {"c", "h"} If this set already any particular character, it has no effect on that character.
Retains EACH of the characters in this string. Note: "ch" == {"c", "h"} If this set already any particular character, it has no effect on that character.
Complement EACH of the characters in this string. Note: "ch" == {"c", "h"} If this set already any particular character, it has no effect on that character.
Remove EACH of the characters in this string. Note: "ch" == {"c", "h"} If this set already any particular character, it has no effect on that character.
Makes a set from a multicharacter string. Thus "ch" => {"ch"} <br><b>Warning: you cannot add an empty string ("") to a UnicodeSet.</b>
Makes a set from each of the characters in the string. Thus "ch" => {"c", "h"}
Retain only the elements in this set that are contained in the specified range.  If <code>end > start</code> then an empty range is retained, leaving the set empty. to this set. to this set.
Removes the specified range from this set if it is present. The set will not contain the specified range once the call returns.  If <code>end > start</code> then an empty range is removed, leaving the set unchanged. from this set. from this set.
Removes the specified character from this set if it is present. The set will not contain the specified range once the call returns.
Removes the specified string from this set if it is present. The set will not contain the specified character once the call returns.
Complements the specified range in this set.  Any character in the range will be removed if it is in this set, or will be added if it is not in this set.  If <code>end > start</code> then an empty range is xor'ed, leaving the set unchanged. from this set. from this set.
This is equivalent to <code>complement(MIN_VALUE, MAX_VALUE)</code>.
Complement the specified string in this set. The set will not contain the specified string once the call returns. <br><b>Warning: you cannot add an empty string ("") to a UnicodeSet.</b>
Adds all of the elements in the specified set to this set if they're not already present.  This operation effectively modifies this set so that its value is the <i>union</i> of the two sets.  The behavior of this operation is unspecified if the specified collection is modified while the operation is in progress.
Retains only the elements in this set that are contained in the specified set.  In other words, removes from this set all of its elements that are not contained in the specified set.  This operation effectively modifies this set so that its value is the <i>intersection</i> of the two sets.
Removes from this set all of its elements that are contained in the specified set.  This operation effectively modifies this set so that its value is the <i>asymmetric set difference</i> of the two sets.
Complements in this set all elements contained in the specified set.  Any character in the other set will be removed if it is in this set, or will be added if it is not in this set.
Removes all of the elements from this set.  This set will be empty after this call returns.
Iteration method that returns the number of ranges contained in this set.
Iteration method that returns the first character in the specified range of this set.
Iteration method that returns the last character in the specified range of this set.
Reallocate this objects internal structures to take up the least possible space, without changing this object's value.
Allocate our strings vector and return TRUE if successful.
Swap list and buffer.
---------------------------------------------------------------- Implementation: Fundamental operators ----------------------------------------------------------------
polarity = 0, 3 is normal: x xor y polarity = 1, 2: x xor ~y == x === y
polarity = 0 is normal: x union y polarity = 2: x union ~y polarity = 1: ~x union y polarity = 3: ~x union ~y
polarity = 0 is normal: x intersect y polarity = 2: x intersect ~y == set-minus polarity = 1: ~x intersect y polarity = 3: ~x intersect ~y
Append the <code>toPattern()</code> representation of a string to the given <code>StringBuffer</code>.
Append the <code>toPattern()</code> representation of a character to the given <code>StringBuffer</code>.
Append a string representation of this set to result.  This will be a cleaned version of the string passed to applyPattern(), if there is one.  Otherwise it will be generated.
Returns a string representation of this set.  If the result of calling this function is passed to a UnicodeSet constructor, it will produce another set that is equal to this one.
Generate and append a string representation of this set to result. This does not use this.pat, the cleaned up copy of the string passed to applyPattern().
Release existing cached pattern
Set the new pattern to cache.
Call exactly once if the list is to be used.
Reduce all stored offsets by delta, used when the current position moves by delta. There must not be any offsets lower than delta. If there is an offset equal to delta, it is removed. delta=[1..maxLength]
Add an offset. The list must not contain it yet. offset=[1..maxLength]
Find the lowest stored offset from a non-empty list, remove it, and reduce all other offsets by this minimum. Returns [1..maxLength].
Construct for all variants of span(), or only for any one variant. Initialize as little as possible, for single use.
Copy constructor. Assumes which==ALL for a frozen set.
Algorithm for span(USET_SPAN_SIMPLE) Theoretical algorithm: - Iterate through the string, and at each code point boundary: + If the code point there is in the set, then remember to continue after it. + If a set string matches at the current position, then remember to continue after it. + Continue from the farthest match position and ignore all others. + If there is no match at the current position, Optimized implementation: (Same assumption and spanSet as above.) - Start with spanLength=spanSet.span(USET_SPAN_CONTAINED). - Loop: + Try to match each set string at the end of the spanLength. + If no set string matched after spanSet.span(), then return + If at least one set string matched, then continue the loop after the + If no more set string matched after a previous string match,
Algorithm for spanNot()==span(USET_SPAN_NOT_CONTAINED) Theoretical algorithm: - Iterate through the string, and at each code point boundary: + If the code point there is in the set, then return with the current position. + If a set string matches at the current position, then return with the current position. Optimized implementation: (Same assumption as for span() above.) Create and cache a spanNotSet which contains all of the single code points of the original set but none of its strings. For each set string add its initial code point to the spanNotSet. (Also add its final code point for spanNotBack().) - Loop: + Do spanLength=spanNotSet.span(USET_SPAN_NOT_CONTAINED). + If the current code point is in the original set, then + If any set string matches at the current position, then + If there is no match at the current position, neither for the code point there
Cleanup function for UnicodeSet
Constructs a set from the given pattern, optionally ignoring white space.  See the class description for the syntax of the pattern language.
Constructs a set from the given pattern, optionally ignoring white space.  See the class description for the syntax of the pattern language. Valid options are USET_IGNORE_SPACE and USET_CASE_INSENSITIVE.
Modifies this set to represent the set specified by the given pattern, optionally ignoring white space.  See the class description for the syntax of the pattern language. pattern are ignored.  Spaces are those characters for which <code>uprv_isRuleWhiteSpace()</code> is <code>true</code>. Characters preceded by '\\' are escaped, losing any special meaning they otherwise have.  Spaces may be included by escaping them. contains a syntax error.
Modifies this set to represent the set specified by the given pattern, optionally ignoring white space.  See the class description for the syntax of the pattern language. Valid options are USET_IGNORE_SPACE and USET_CASE_INSENSITIVE.
Return true if the given position, in the given pattern, appears to be the start of a UnicodeSet pattern.
Parse the pattern from the given RuleCharacterIterator.  The iterator is advanced over the parsed pattern. it will be advanced to the first character after the parsed pattern, or the end of the iteration if all characters are parsed. variables, or null if none. copied from the input pattern, as appropriate. IGNORE_SPACE, CASE.
---------------------------------------------------------------- Property set implementation ----------------------------------------------------------------
Generic filter-based scanning code for UCD property UnicodeSets.
Return true if the given position, in the given pattern, appears to be the start of a property set pattern.
Return true if the given iterator appears to point at a property pattern.  Regardless of the result, return with the iterator unchanged. it will be unchanged.
Parse the given property pattern at the given parse position.
Parse a property pattern. it will be advanced to the first character after the parsed pattern, or the end of the iteration if all characters are parsed. copied from the input pattern, as appropriate.
======================================== Factory methods ========================================
======================================== Miscellaneous operations ========================================
When converting from UTF-16 to UTF-8, the result will have at most 3 times as many bytes as the source has UChars. The "worst cases" are writing systems like Indic, Thai and CJK with 3:1 bytes:UChars.
turn a bogus string into an empty one
Replaceable API
Replaceable API NOTE: This is for the Replaceable class.  There is no rep.cpp, so we implement this function here.
Replaceable API
Default implementation of UMemory::new/delete using uprv_malloc() and uprv_free(). For testing, this is used together with a list of imported symbols to verify that ICU is not using the global ::new and ::delete operators. These operators can be implemented like this or any other appropriate way when customizing ICU for certain environments. Whenever ICU is customized in binary incompatible ways please be sure to use library name suffixes to distinguish such libraries from the standard build. Instead of just modifying these C++ new/delete operators, it is usually best to modify the uprv_malloc()/uprv_free()/uprv_realloc() functions in cmemory.c. Memory test on Windows/MSVC 6: The global operators new and delete look as follows: 04F 00000000 UNDEF  notype ()    External     | ??2@YAPAXI@Z (void * __cdecl operator new(unsigned int)) 03F 00000000 UNDEF  notype ()    External     | ??3@YAXPAX@Z (void __cdecl operator delete(void *)) These lines are from output generated by the MSVC 6 tool dumpbin with dumpbin /symbols *.obj ??2@YAPAXI@Z and ??3@YAXPAX@Z are the linker symbols in the .obj files and are imported from msvcrtd.dll (in a debug build). Make sure that with the UMemory operators new and delete defined these two symbols do not appear in the dumpbin /symbols output for the ICU libraries! If such a symbol appears in the output then look in the preceding lines in the output for which file and function calls the global new or delete operator, and replace with uprv_malloc/uprv_free.
Omit GCB values beyond what we need for hst. The code below checks for the array length.
INTERNAL: hashes an entry
INTERNAL: compares two entries
Internal function, gets parts of locale name according to the position of '_' character
Internal function
Internal function. Tries to find a resource in given Resource Bundle, as well as in its parents
Works just like ucnv_flushCache()
INTERNAL: Initializes the cache for resources
INTERNAL: sets the name (locale) of the resource bundle to given name
INTERNAL: Inits and opens an entry from a data DLL.
INTERNAL: CAUTION:  resbMutex must be locked when calling this function!
Functions to create and destroy resource bundles. INTERNAL:
API: closes a resource bundle and cleans up.
Functions to retrieve data from resource bundles.
this function returns a signed integer it performs sign extension
Try to have the compiler inline these
Create an iterator
Create an iterator. Convenience for when the contents are to be set later.
Returns the next element in the set. if so, if codepoint == IS_STRING, the value is a string in the string field else the value is a single code point in the codepoint field. <br>You are guaranteed that the codepoints are in sorted order, and the strings are in sorted order, and that all code points are returned before any strings are returned. <br>Note also that the codepointEnd is undefined after calling this method.
if so, if codepoint == IS_STRING, the value is a string in the string field else the value is a range of codepoints in the <codepoint, codepointEnd> fields. <br>Note that the codepoints are in sorted order, and the strings are in sorted order, and that all code points are returned before any strings are returned. <br>You are guaranteed that the ranges are in sorted order, and the strings are in sorted order, and that all ranges are returned before any strings are returned. <br>You are also guaranteed that ranges are disjoint and non-contiguous. <br>Note also that the codepointEnd is undefined after calling this method.
Resets to the start, to allow the iteration to start over again.
BEGIN android-changed
BEGIN android-changed
StringEnumeration implementation ----------------------------------------
UStringEnumeration implementation ---------------------------------------
iff a surrogate is part of a surrogate pair, leave >=d800
Convert one octal digit to a numeric value 0..7, or -1 on failure
Convert one hex digit to a numeric value 0..F, or -1 on failure
Append an escape-free segment of the text; used by u_unescape()
Pointer relocation function, a utility used by shallow clone. Adjust a pointer that refers to something within one UText (the source) to refer to the same relative offset within a another UText (the target)
Return true if the character is NOT printable ASCII.
Escape unprintable characters using \uxxxx notation for U+0000 to U+FFFF and \Uxxxxxxxx for U+10000 and above.  If the character is printable ASCII, then do nothing and return FALSE.  Otherwise, append the escaped notation and return TRUE.
Skip over a sequence of zero or more white space characters at pos. character at or after pos, or str.length(), if there is none. Otherwise leave pos unchanged. after pos, or str.length(), if there is none.
Parse a single non-whitespace character 'ch', optionally preceded by whitespace. offset of the first character to be parsed.  On output, pos[0] is the index after the last parsed character.  If the parse fails, pos[0] will be unchanged. whitespace characters.
Parse a pattern string within the given Replaceable and a parsing pattern.  Characters are matched literally and case-sensitively except for the following special characters: ~  zero or more uprv_isRuleWhiteSpace chars If end of pattern is reached with all matches along the way, pos is advanced to the first unparsed index and returned. Otherwise -1 is returned.
Append a character to a rule that is being built up.  To flush the quoteBuf to rule, make one final call with isLiteral == TRUE. If there is no final character, pass in (UChar32)-1 as c. quoted or escaped.  Usually this means it is a syntactic element such as > or $ should be escaped using \uxxxx or \Uxxxxxxxx.  These escapes will appear outside of quotes. substrings.  The caller should initially supply an empty buffer, and thereafter should not modify the buffer.  The buffer should be cleared out by, at the end, calling this method with a literal character.
Given a matcher reference, which may be null, append its pattern as a literal to the given rule.
Parse an integer at pos, either of the form \d+ or of the form 0x[0-9A-Fa-f]+ or 0[0-7]+, that is, in standard decimal, hex, or octal format. character to parse.  On output, the character after the last parsed character.
Parse a pattern string starting at offset pos.  Keywords are matched case-insensitively.  Spaces may be skipped and may be optional or required.  Integer values may be parsed, and if they are, they will be returned in the given array.  If successful, the offset of the next non-space character is returned.  On failure, -1 is returned. will match their uppercase equivalents as well.  A space character matches one or more required spaces.  A '~' character matches zero or more optional spaces.  A '#' character matches an integer and stores it in parsedInts, which the caller must ensure has enough capacity. must ensure that parsedInts.length is >= the number of '#' signs in 'pattern'. the parse failed
Parse a Unicode identifier from the given string at the given position.  Return the identifier, or an empty string if there is no identifier. first character to examine.  It must be less than str.length(), and it must not point to a whitespace character.  That is, must have pos < str.length() and !uprv_isRuleWhiteSpace(str.char32At(pos)).  On OUTPUT, the position after the last parsed character. no valid identifier at pos.
Parse an unsigned 31-bit integer at the given offset.  Use UCharacter.digit() to parse individual characters into digits. offset within text at which to start parsing; it should point to a valid digit.  On exit, pos[0] is the offset after the last parsed character.  If the parse failed, it will be unchanged on exit.  Must be >= 0 on entry. 36. Parse fails if there are no digits, that is, if pos[0] does not point to a valid digit on entry, or if the number to be parsed does not fit into a 31-bit unsigned integer.
Output a pointer value in hex.  Work with any size of pointer
IDNA class default implementations --------------------------------------
UTS46 implementation ----------------------------------------------------
We scan the whole label and check both for whether it contains RTL characters and whether it passes the BiDi Rule. In a BiDi domain name, all labels must pass the BiDi Rule, but we might find that a domain name is a BiDi domain name (has an RTL label) only after processing several earlier labels.
Assign this object to another (make this a copy of 'other'). Use the 'assign' function to assign each element.
This only does something sensible if this object has a non-null comparer
This only works if this object has a non-null comparer
Change the size of this vector as follows: If newSize is smaller, then truncate the array, possibly deleting held elements for i >= newSize.  If newSize is larger, grow the array, filling in new slots with NULL.
Fill in the given array with all elements of this vector.
Removes the element at the given index from this vector and transfer ownership of it to the caller.  After this call, the caller owns the result and must delete it and the vector entry at 'index' is removed, shifting all subsequent entries back by one index and shortening the size of the vector by one.  If the index is out of range or if there is no item at the given index then 0 is returned and the vector is unchanged.
Insert the given object into this vector at its sorted position as defined by 'compare'.  The current elements are assumed to be sorted already.
Insert the given integer into this vector at its sorted position as defined by 'compare'.  The current elements are assumed to be sorted already.
ASSUME elements[] IS CURRENTLY SORTED
Sort the vector, assuming it constains ints.
Sort with a user supplied comparator.
UVector inlines
UStack inlines
Assign this object to another (make this a copy of 'other').
UVector32 inlines
UVector64 inlines
UStack inlines
Initialize the message bundle so that message strings can be fetched by u_wmsg().
Format a message and print it's output to fp
Return the extended year on the Gregorian calendar as computed by <code>computeGregorianFields()</code>.
Return the month (0-based) on the Gregorian calendar as computed by <code>computeGregorianFields()</code>.
Return the day of year (1-based) on the Gregorian calendar as computed by <code>computeGregorianFields()</code>.
Return the day of month (1-based) on the Gregorian calendar as computed by <code>computeGregorianFields()</code>.
Get the primary order of a collation order.
Get the secondary order of a collation order.
Get the tertiary order of a collation order.
Returns array of argument types in the parsed pattern for use in C API.  Only for the use of umsg_vformat().  Not for public consumption.
inline method implementation ---------------------------------------------
Copy constructor.
Transliterator API.
Implements {@link Transliterator#handleTransliterate}.
Return the script code for a given name, or -1 if not found.
Registers standard transliterators with the system.  Called by Transliterator during initialization.  Scan all current targets and register those that are scripts T as Any-T/V.
Given 'value', add or subtract 'range' until 0 <= 'value' < range. The modulus operator.
Normalize an angle so that it's in the range 0 - 2pi. For positive angles this is just (angle % 2pi), but the Java mod operator doesn't work that way for negative numbers....
Normalize an angle into the range -PI - PI
Construct a new <code>CalendarAstronomer</code> object that is initialized to the current date and time.
Construct a new <code>CalendarAstronomer</code> object that is initialized to the specified date and time.
Construct a new <code>CalendarAstronomer</code> object with the given latitude and longitude.  The object's time is set to the current date and time. <p>
Set the current date and time of this <code>CalendarAstronomer</code> object.  All astronomical calculations are performed based on this time setting.
Set the current date and time of this <code>CalendarAstronomer</code> object.  All astronomical calculations are performed based on this time setting.
Get the current time of this <code>CalendarAstronomer</code> object, represented as the number of milliseconds since 1/1/1970 AD 0:00 GMT (Gregorian).
Get the current time of this <code>CalendarAstronomer</code> object, expressed as a "julian day number", which is the number of elapsed days since 1/1/4713 BC (Julian), 12:00 GMT.
Return this object's time expressed in julian centuries: the number of centuries after 1/1/1900 AD, 12:00 GMT
Returns the current Greenwich sidereal time, measured in hours
Returns the current local sidereal time, measured in hours
Converts local sidereal time to Universal Time.
Convert from ecliptic to equatorial coordinates.
Convert from ecliptic longitude to equatorial coordinates.
Find the "true anomaly" (longitude) of an object from its mean anomaly and the eccentricity of its orbit.  This uses an iterative solution to Kepler's equation.
The longitude of the sun at the time specified by this object. The longitude is measured in radians along the ecliptic from the "first point of Aries," the point at which the ecliptic crosses the earth's equatorial plane at the vernal equinox. <p> Currently, this method uses an approximation of the two-body Kepler's equation for the earth and the sun.  It does not take into account the perturbations caused by the other planets, the moon, etc.
TODO Make this public when the entire class is package-private.
The position of the sun at this object's current date and time, in equatorial coordinates.
Constant representing the summer solstice. For use with {@link #getSunTime getSunTime}. Note: In this case, "summer" refers to the northern hemisphere's seasons.
Constant representing the winter solstice. For use with {@link #getSunTime getSunTime}. Note: In this case, "winter" refers to the northern hemisphere's seasons.
The position of the moon at the time set on this object, in equatorial coordinates.
The "age" of the moon at the time specified in this object. This is really the angle between the current ecliptic longitudes of the sun and the moon, measured in radians.
Calculate the phase of the moon at the time set in this object. The returned phase is a <code>double</code> in the range <code>0 <= phase < 1</code>, interpreted as follows: <ul> <li>0.00: New moon <li>0.25: First quarter <li>0.50: Full moon <li>0.75: Last quarter </ul>
Constant representing a new moon. For use with {@link #getMoonTime getMoonTime}
Constant representing a full moon. For use with {@link #getMoonTime getMoonTime}
Find the next or previous time at which the Moon's ecliptic longitude will have the desired value. <p>
Find the next or previous time at which the moon will be in the desired phase. <p>
Returns the time (GMT) of sunrise or sunset on the local date to which this calendar is currently set.
------------------------------------------------------------------------- Interpolation methods for finding the time at which a given event occurs -------------------------------------------------------------------------
Return the obliquity of the ecliptic (the angle between the ecliptic and the earth's equator) at the current time.  This varies due to the precession of the earth's axis.
------------------------------------------------------------------------- Private data -------------------------------------------------------------------------
Debugging functions
=============== Calendar Cache ================
Constructs an Ecliptic coordinate object. <p>
Setter for Ecliptic Coordinate object
**** main flow of this code from Laura Werner's "Unicode Text Searching in Java" paper. TODO: * deal with trailing (and leading?) ignorables. * Adding BoyerMooreSearch object slowed it down. How can we speed it up?
Constructs a transliterator with the default delimiters '{' and '}'.
Copy constructor.
getBreakIterator     Lazily create the break iterator if it does
replaceableAsString   Hack to let break iterators work
convert a UCalendarDateFields into a string - for debugging
from CalendarTest::calToStr - but doesn't modify contents.
virtual UBool isSupportedID( const UnicodeString& id, UErrorCode& status) const { if(U_FAILURE(status)) { } char keyword[ULOC_FULLNAME_CAPACITY]; getCalendarKeyword(id, keyword, (int32_t)sizeof(keyword)); return isStandardSupportedKeyword(keyword, status);
Adjust the specified field so that it is within the allowable range for the date to which this calendar is set. For example, in a Gregorian calendar pinning the {@link #DAY_OF_MONTH DAY_OF_MONTH} field for a calendar set to April 31 would cause it to be set to April 30. <p> <b>Subclassing:</b> <br> This utility method is intended for use by subclasses that need to implement their own overrides of {@link #roll roll} and {@link #add add}. <p> <b>Note:</b> <code>pinField</code> is implemented in terms of {@link #getActualMinimum getActualMinimum} and {@link #getActualMaximum getActualMaximum}.  If either of those methods uses a slow, iterative algorithm for a particular field, it would be unwise to attempt to call <code>pinField</code> for that field.  If you really do need to do so, you should override this method to do something more efficient for that field. <p>
Compute the Gregorian calendar year, month, and day of month from the given Julian day.  These values are not stored in fields, but in member variables gregorianXxx.  Also compute the DAY_OF_WEEK and DOW_LOCAL fields.
Compute the Gregorian calendar year, month, and day of month from the Julian day.  These values are not stored in fields, but in member variables gregorianXxx.  They are used for time zone computations and by subclasses that are Gregorian derivatives.  Subclasses may call this method to perform a Gregorian calendar millis->fields computation.
Compute the fields WEEK_OF_YEAR, YEAR_WOY, WEEK_OF_MONTH, DAY_OF_WEEK_IN_MONTH, and DOW_LOCAL from EXTENDED_YEAR, YEAR, DAY_OF_WEEK, and DAY_OF_YEAR.  The latter fields are computed by the subclass based on the calendar system. <p>The YEAR_WOY field is computed simplistically.  It is equal to YEAR most of the time, but at the year boundary it may be adjusted to YEAR-1 or YEAR+1 to reflect the overlap of a week into an adjacent year.  In this case, a simple increment or decrement is performed on YEAR, even though this may yield an invalid YEAR value.  For instance, if the YEAR is part of a calendar system with an N-year cycle field CYCLE, then incrementing the YEAR may involve incrementing CYCLE and setting YEAR back to 0 or 1.  This is not handled by this code, and in fact cannot be simply handled without having subclasses define an entire parallel set of fields for fields larger than or equal to a year.  This additional complexity is not warranted, since the intention of the YEAR_WOY field is to support ISO 8601 notation, so it will typically be used with a proleptic Gregorian calendar, which has no field larger than a year.
Ensure that each field is within its valid range by calling {@link #validateField(int)} on each field that has been set.  This method should only be called if this calendar is not lenient.
Validate a single field of this calendar.  Subclasses should override this method to validate any calendar-specific fields. Generic fields can be handled by <code>Calendar.validateField()</code>.
Validate a single field of this calendar given its minimum and maximum allowed value.  If the field is out of range, throw a descriptive <code>IllegalArgumentException</code>.  Subclasses may use this method in their implementation of {@link #validateField(int)}.
Compute the milliseconds in the day from the fields.  This is a value from 0 to 23:59:59.999 inclusive, unless fields are out of range, in which case it can be an arbitrary value.  This value reflects local zone wall time.
This method can assume EXTENDED_YEAR has been set. or range.
Prepare this calendar for computing the actual minimum or maximum. This method modifies this calendar's fields; it is called on a temporary calendar. <p>Rationale: The semantics of getActualXxx() is to return the maximum or minimum value that the given field can take, taking into account other relevant fields.  In general these other fields are larger fields.  For example, when computing the actual maximum DATE, the current value of DATE itself is ignored, as is the value of any field smaller. <p>The time fields all have fixed minima and maxima, so we don't need to worry about them.  This also lets us set the MILLISECONDS_IN_DAY to zero to erase any effects the time fields might have when computing date fields. <p>DAY_OF_WEEK is adjusted specially for the WEEK_OF_MONTH and WEEK_OF_YEAR fields to ensure that they are computed correctly.
Deprecated function. This doesn't need to be inline.
Constructs a transliterator.
Copy constructor.
Implement abstract Calendar method to return the extended year defined by the current fields.  This will use either the ERA and YEAR field as the cycle and year-of-cycle, or the EXTENDED_YEAR field as the continuous year count, depending on which is newer.
Override Calendar method to return the number of days in the given extended year and month. <p>Note: This method also reads the IS_LEAP_MONTH field to determine whether or not the given month is a leap month.
Override Calendar to compute several fields specific to the Chinese calendar system.  These are: <ul><li>ERA <li>YEAR <li>MONTH <li>DAY_OF_MONTH <li>DAY_OF_YEAR <li>EXTENDED_YEAR</ul> The DAY_OF_WEEK and DOW_LOCAL fields are already set when this method is called.  The getGregorianXxx() methods return Gregorian calendar equivalents for the given Julian day. <p>Compute the ChineseCalendar-specific field IS_LEAP_MONTH.
Override Calendar to add IS_LEAP_MONTH to the field resolution table.
Return the Julian day number of day before the first day of the given month in the given extended year. <p>Note: This method reads the IS_LEAP_MONTH field to determine whether the given month is a leap month. by reading the IS_LEAP_MONTH field. day of the given month and year
Override Calendar to handle leap months properly.
Override Calendar to handle leap months properly.
Convert local days to UTC epoch milliseconds.
Convert UTC epoch milliseconds to local days.
Return the major solar term on or after December 15 of the given Gregorian year, that is, the winter solstice of the given year. Computations are relative to Asia/Shanghai time zone. winter solstice of the given year
Return the closest new moon to the given date, searching either forward or backward in time. date; otherwise, search for a new moon before it new moon after or before <code>days</code>
Return the nearest integer number of synodic months between two dates.
Return the major solar term on or before a given date.  This will be an integer from 1..12, with 1 corresponding to 330 degrees, 2 to 0 degrees, 3 to 30 degrees,..., and 12 to 300 degrees.
Return true if the given month lacks a major solar term. moon
Return true if there is a leap month on or after month newMoon1 and at or before month newMoon2. new moon new moon
Compute fields for the Chinese calendar system.  This method can either set all relevant fields, as required by <code>handleComputeFields()</code>, or it can just set the MONTH and IS_LEAP_MONTH fields, as required by <code>handleComputeMonthStart()</code>. <p>As a side effect, this method sets {@link #isLeapYear}. date to compute fields for DAY_OF_MONTH, and DAY_OF_YEAR fields.  In either case set the MONTH and IS_LEAP_MONTH fields.
Return the Chinese new year of the given Gregorian year. Chinese new year of the given year (this will be a new moon)
Adjust this calendar to be delta months before or after a given start position, pinning the day of month if necessary.  The start position is given as a local days number for the start of the month and a day-of-month.  Used by add() and roll(). start position (days after January 1, 1970 0:00 Asia/Shanghai) the start position
------------------------------------- Creates a ChoiceFormat instance based on the pattern.
------------------------------------- Creates a ChoiceFormat instance with the limit array and format strings for each limit.
------------------------------------- copy constructor
------------------------------------- Private constructor that creates a ChoiceFormat instance based on the pattern and populates UParseError
------------------------------------- calls the overloaded applyPattern method.
------------------------------------- Applies the pattern to this ChoiceFormat instance.
------------------------------------- Sets the limit and format arrays.
------------------------------------- Parses the text and return the Formattable object.
CollationElementIterator public constructor/destructor ------------------
CollationElementIterator public methods ---------------------------------
Get the ordering priority of the next character in the string.
Get the ordering priority of the previous collation element in the string.
Resets the cursor to the beginning of the string.
Sets the source to the new source string.
Sets the source to the new character iterator.
This is the "real" constructor for this class; it constructs an iterator over the source text using the specified collator
This is the "real" constructor for this class; it constructs an iterator over the source text using the specified collator
CollationElementIterator protected methods -----------------------------
Collator public methods -----------------------------------------------
implement deprecated, previously abstract method
this API  ignores registered collators, since it returns an array of indefinite lifetime
Default constructor. Constructor is different from the old default Collator constructor. The task for determing the default collation strength and normalization mode is left to the child class.
Constructor. Empty constructor, does not handle the arguments. This constructor is done for backward compatibility with 1.7 and 1.8. The task for handling the argument collation strength and normalization mode is left to the child class.
#define CACHE_CELISTS
Constructs a new compound transliterator given an array of transliterators.  The array of transliterators may be of any length, including zero or one, however, useful compound transliterators have at least two components. objects <code>Transliterator</code> objects in transliterators. <tt>filter.contains()</tt> returns <tt>false</tt> will not be altered by this transliterator.  If <tt>filter</tt> is <tt>null</tt> then no filtering is applied.
Splits an ID of the form "ID;ID;..." into a compound using each of the IDs. takes the inverse of each ID.
Private constructor for use of TransliteratorAlias
Private constructor for Transliterator from a vector of transliterators.  The caller is responsible for fixing up the ID.
Finish constructing a transliterator: only to be called by constructors.  Before calling init(), set trans and filter to NULL. adoptedSplitTransliterator should be inserted, if there is one, or -1 if there is none. before the entry at offset idSplitPoint in the id string.  May be NULL to insert no entry. entries by calling getID() of component entries.  Some constructors do not require this because they apply a facade ID anyway.
Finish constructing a transliterator: only to be called by constructors.  Before calling init(), set trans and filter to NULL. should NOT be empty.  The list should be in declared order.  That is, it should be in the FORWARD order; if direction is REVERSE then the list order will be reversed. entries by calling getID() of component entries.  Some constructors do not require this because they apply a facade ID anyway.
Return the IDs of the given list of transliterators, concatenated with ID_DELIM delimiting them.  Equivalent to the perlish expression join(ID_DELIM, map($_.getID(), transliterators).
Copy constructor.
Assignment operator.
Returns the number of transliterators in this chain.
Returns the transliterator at the given index in this chain.
Append c to buf, unless buf is empty or buf already ends in c.
Implement Transliterator framework
Override Transliterator framework
Sets the length of the longest context required by this transliterator. This is <em>preceding</em> context.
Matching function shared among the 2022 detectors JP, CN and KR Counts up the number of legal an unrecognized escape sequences in the sample of text, and computes a score based on the total number & the proportion that fit the encoding.
Binary search for value in table, which must have exactly 64 entries.
0- */    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 1- */    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 2- */    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 3- */    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 4- */    0x40, 0x40, 0x42, 0x42, 0x44, 0x45, 0x46, 0x47, 0x47, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 5- */    0x50, 0x49, 0x52, 0x53, 0x54, 0x55, 0x56, 0x56, 0x58, 0x58, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 6- */    0x60, 0x61, 0x62, 0x63, 0x63, 0x65, 0x65, 0x67, 0x67, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 7- */    0x69, 0x71, 0x71, 0x73, 0x74, 0x75, 0x76, 0x77, 0x77, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 8- */    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x80, 0x8B, 0x8B, 0x8D, 0x8D, 0x8F, 9- */    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9A, 0x9A, 0x9A, 0x9E, 0x9E, A- */    0x9E, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x9E, 0xAB, 0xAB, 0xAD, 0xAD, 0xAF, B- */    0xAF, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xB1, 0xBB, 0xBB, 0xBD, 0xBD, 0xBF, C- */    0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xBF, 0xCC, 0xBF, 0xCE, 0xCF, D- */    0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDA, 0xDC, 0xDC, 0xDC, 0xDF, E- */    0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, F- */    0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
------------------------------------- Initializes this with the decimal format symbols in the default locale.
------------------------------------- Initializes this with the decimal format symbols in the desired locale.
BEGIN android-added: we need a default constructor for performance. -------------------------------------
------------------------------------- copy constructor
------------------------------------------------------------------ decContextClearStatus -- clear bits in current status context is the context structure to be queried mask indicates the bits to be cleared (the status bit that returns context No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextDefault -- initialize a context structure context is the structure to be initialized kind selects the required set of default values, one of: returns a context structure with the appropriate initial values. ------------------------------------------------------------------
------------------------------------------------------------------ decContextGetRounding -- return current rounding mode context is the context structure to be queried returns the rounding mode No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextGetStatus -- return current status context is the context structure to be queried returns status No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextRestoreStatus -- restore bits in current status context is the context structure to be updated newstatus is the source for the bits to be restored mask indicates the bits to be restored (the status bit that returns context No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextSaveStatus -- save bits in current status context is the context structure to be queried mask indicates the bits to be saved (the status bits that returns the AND of the mask and the current status No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextSetRounding -- set current rounding mode context is the context structure to be updated newround is the value which will replace the current mode returns context No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextSetStatus -- set status and raise trap if appropriate context is the context structure to be updated status  is the DEC_ exception code returns the context structure Control may never return from this routine, if there is a signal handler and it takes a long jump. ------------------------------------------------------------------
------------------------------------------------------------------ decContextSetStatusFromString -- set status from a string + trap context is the context structure to be updated string is a string exactly equal to one that might be returned The status bit corresponding to the string is set, and a trap is raised if appropriate. returns the context structure, unless the string is equal to ------------------------------------------------------------------
------------------------------------------------------------------ decContextSetStatusFromStringQuiet -- set status from a string context is the context structure to be updated string is a string exactly equal to one that might be returned The status bit corresponding to the string is set; no trap is raised. returns the context structure, unless the string is equal to ------------------------------------------------------------------
------------------------------------------------------------------ decContextSetStatusQuiet -- set status without trap context is the context structure to be updated status  is the DEC_ exception code returns the context structure No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextStatusToString -- convert status flags to a string context is a context with valid status field returns a constant string describing the condition.  If multiple ------------------------------------------------------------------
------------------------------------------------------------------ decContextTestEndian -- test whether DECLITEND is set correctly quiet is 1 to suppress message; 0 otherwise returns 0 if DECLITEND is correct A message is displayed if the return value is not 0 and quiet==0. No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextTestSavedStatus -- test bits in saved status oldstatus is the status word to be tested mask indicates the bits to be tested (the oldstatus bits that returns 1 if any of the tested bits are 1, or 0 otherwise No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextTestStatus -- test bits in current status context is the context structure to be updated mask indicates the bits to be tested (the status bits that returns 1 if any of the tested bits are 1, or 0 otherwise No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decContextZeroStatus -- clear all status bits context is the context structure to be updated returns context No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------------------ Constructs a DecimalFormat instance in the default locale.
------------------------------------------------------------------------------ Constructs a DecimalFormat instance with the specified number format pattern in the default locale.
------------------------------------------------------------------------------ Constructs a DecimalFormat instance with the specified number format pattern and the number format symbols in the default locale.  The created instance owns the symbols.
------------------------------------------------------------------------------ Constructs a DecimalFormat instance with the specified number format pattern and the number format symbols in the default locale.  The created instance owns the clone of the symbols.
------------------------------------------------------------------------------ Constructs a DecimalFormat instance with the specified number format pattern, the number format symbols, and the number format style. The created instance owns the clone of the symbols.
----------------------------------------------------------------------------- Common DecimalFormat initialization.
------------------------------------------------------------------------------ Constructs a DecimalFormat instance with the specified number format pattern and the number format symbols in the desired locale.  The created instance owns the symbols.
------------------------------------------------------------------------------ copy constructor
------------------------------------------------------------------------------ assignment operator
Return true if a grouping separator belongs at the given position, based on whether grouping is in use and the values of the primary and secondary grouping interval. the current position.  Zero indicates the position after the rightmost integer digit. position.
Inserts the character fPad as needed to expand result to fFormatWidth.
Parses the given text as either a number or a currency amount. position within text to match; must have 0 <= pos.getIndex() < text.length(); on output, the position after the last matched character. If the parse fails, the position in unchanged upon output. otherwise a Number is parsed
Parse the given text into a number.  The text is parsed beginning at parsePosition, until an unparseable character is seen. return, the first unparsed character. whether the value was infinite and whether it was positive. currency parsing mode, or NULL for normal parsing. In generic currency parsing mode, any currency is parsed, not just the currency that this formatter is set to.
Starting at position, advance past a run of pad characters, if any. Return the index of the first character after position that is not a pad character.  Result is >= position.
Return the length matched by the given affix, or -1 if none. Runs of white space in the affix, match runs of white space in the input.  Pattern white space and input white space are determined differently; see code. currency parsing mode, or null for normal parsing. In generic currency parsing mode, any currency is parsed, not just the currency that this formatter is set to.
Return the length matched by the given affix, or -1 if none. Runs of white space in the affix, match runs of white space in the input.  Pattern white space and input white space are determined differently; see code.
Skip over a run of zero or more isRuleWhiteSpace() characters at pos in text.
Skip over a run of zero or more isUWhiteSpace() characters at pos in text.
Return the length matched by the given affix, or -1 if none. currency parsing mode, or null for normal parsing. In generic currency parsing mode, any currency is parsed, not just the currency that this formatter is set to.
Match a single character at text[pos] and return the index of the next character upon success.  Return -1 on failure.  If isRuleWhiteSpace(ch) then match a run of white space in text.
Match a string at text[pos] and return the index of the next character upon success.  Return -1 on failure.  Match a run of white space in str with a run of white space in text.
------------------------------------------------------------------------------ De-owning the current localized symbols and adopt the new symbols.
------------------------------------------------------------------------------ Setting the symbols is equlivalent to adopting a newly created localized symbols.
Update the currency object to match the symbols.  This method is used only when the caller has passed in a symbols object that may not be the default object for its locale.
------------------------------------------------------------------------------ Sets the positive prefix of the number pattern.
------------------------------------------------------------------------------ Gets the negative prefix  of the number pattern.
------------------------------------------------------------------------------ Sets the positive suffix of the number pattern.
------------------------------------------------------------------------------ Sets the negative suffix of the number pattern.
------------------------------------------------------------------------------ Sets the multiplier of the number pattern.
Get the rounding increment. is not in effect.
Set the rounding increment.  This method also controls whether rounding is enabled. Negative increments are equivalent to 0.0.
Get the rounding mode.
Set the rounding mode.  This has no effect unless the rounding increment is greater than zero.
Get the width to which the output of <code>format()</code> is padded.
Set the width to which the output of <code>format()</code> is padded. This method also controls whether padding is enabled. <code>format()</code>, or zero to disable padding.  A negative width is equivalent to 0.
Get the position at which padding will take place.  This is the location at which padding will be inserted if the result of <code>format()</code> is shorter than the format width. <code>kPadAfterPrefix</code>, <code>kPadBeforeSuffix</code>, or <code>kPadAfterSuffix</code>.
<strong><font face=helvetica color=red>NEW</font></strong> Set the position at which padding will take place.  This is the location at which padding will be inserted if the result of <code>format()</code> is shorter than the format width.  This has no effect unless padding is enabled. <code>kPadAfterPrefix</code>, <code>kPadBeforeSuffix</code>, or <code>kPadAfterSuffix</code>.
Return whether or not scientific notation is used.
Set whether or not scientific notation is used. notation
Return the minimum exponent digits that will be shown.
Set the minimum exponent digits that will be shown.  This has no effect unless scientific notation is in use. that will be shown.  Values less than 1 will be treated as 1.
Return whether the exponent sign is always shown. localized minus sign or the localized plus sign, false if only negative exponents are prefixed with the localized minus sign.
Set whether the exponent sign is always shown.  This has no effect unless scientific notation is in use. the localized minus sign or the localized plus sign, false if only negative exponents are prefixed with the localized minus sign.
------------------------------------------------------------------------------ Gets the grouping size of the number pattern.
------------------------------------------------------------------------------ Sets to always show the decimal separator.
------------------------------------------------------------------------------ Expand the affix pattern strings into the expanded affix strings.  If any affix pattern string is null, do not expand it.  This method should be called any time the symbols or the affix patterns change in order to keep the expanded affix strings up to date. This method also will be called before formatting if format currency plural names, since the plural name is not a static one, it is based on the currency plural count, the affix will be known only after the currency plural count is know. In which case, the parameter 'pluralCount' will be a non-null currency plural count. In all other cases, the 'pluralCount' is null, which means it is not needed.
Expand an affix pattern into an affix string.  All characters in the pattern are literal unless prefixed by kQuote.  The following characters after kQuote are recognized: PATTERN_PERCENT, PATTERN_PER_MILLE, PATTERN_MINUS, and kCurrencySign.  If kCurrencySign is doubled (kQuote + kCurrencySign + kCurrencySign), it is interpreted as an international currency sign. If CURRENCY_SIGN is tripled, it is interpreted as currency plural long names, such as "US Dollars". Any other character after a kQuote represents itself. kQuote must be followed by another character; kQuote may not occur by itself at the end of the pattern. This method is used in two distinct ways.  First, it is used to expand the stored affix patterns into actual affixes.  For this usage, doFormat must be false.  Second, it is used to expand the stored affix patterns given a specific number (doFormat == true), for those rare cases in which a currency format references a ChoiceFormat (e.g., en_IN display name for INR).  The number itself is taken from digitList. When used in the first way, this method has a side effect: It sets currencyChoice to a ChoiceFormat object, if the currency's display name in this locale is a ChoiceFormat pattern (very rare).  It only does this if currencyChoice is null to start with. Previous contents are deleted. currency symbol is encountered that expands to a ChoiceFormat, the currencyChoice member variable will be initialized if it is null.  If doFormat is true, then it is assumed that the currencyChoice has been created, and it will be used to format the value in digitList.
Append an affix to the given StringBuffer.
Appends an affix pattern to the given StringBuffer, quoting special characters as needed.  Uses the internal affix pattern, if that exists, or the literal affix, if the internal affix pattern is null.  The appended string will generate the same affix pattern (or literal affix) when passed to toPattern(). Ignored unless affixPattern is null.  If affixPattern is null, then expAffix is appended as a literal affix. pattern characters; otherwise, non-localized pattern chars are appended
Append an affix to the given StringBuffer, using quotes if there are special characters.  Single quotes themselves must be escaped in either case.
Sets the maximum number of digits allowed in the integer portion of a number. This override limits the integer digit count to 309.
Sets the minimum number of digits allowed in the integer portion of a number. This override limits the integer digit count to 309.
Sets the maximum number of digits allowed in the fraction portion of a number. This override limits the fraction digit count to 340.
Sets the minimum number of digits allowed in the fraction portion of a number. This override limits the fraction digit count to 340.
Deprecated variant with no UErrorCode parameter
------------------------------------------------------------------ from-int32 -- conversion from Int or uInt dn is the decNumber to receive the integer in or uin is the integer to be converted returns dn No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ to-int32 -- conversion to Int or uInt dn is the decNumber to convert set is the context for reporting errors returns the converted decNumber, or 0 if Invalid is set Invalid is set if the decNumber does not have exponent==0 or if it is a NaN, Infinite, or out-of-range. ------------------------------------------------------------------
------------------------------------------------------------------ to-scientific-string -- conversion to numeric string to-engineering-string -- conversion to numeric string decNumberToString(dn, string); decNumberToEngString(dn, string); dn is the decNumber to convert string is the string where the result will be laid out string must be at least dn->digits+14 characters long No error is possible, and no status can be set. ------------------------------------------------------------------
------------------------------------------------------------------ to-number -- conversion from numeric string decNumberFromString -- convert string to decNumber dn        -- the number structure to fill chars[]   -- the string to convert ('\0' terminated) set       -- the context used for processing any error, The length of the coefficient and the size of the exponent are checked by this routine, so the correct error (Underflow or Overflow) can be reported or rounding applied, as necessary. If bad syntax is detected, the result will be a quiet NaN. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberAbs -- absolute value operator This computes C = abs(A) res is C, the result.  C may be A rhs is A set is the context See also decNumberCopyAbs for a quiet bitwise version of this. C must have space for set->digits digits. ------------------------------------------------------------------ This has the same effect as decNumberPlus unless A is negative, in which case it has the same effect as decNumberMinus. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberAdd -- add two Numbers This computes C = A + B res is C, the result.  C may be A and/or B (e.g., X=X+X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------ This just calls the routine shared with Subtract
------------------------------------------------------------------ decNumberAnd -- AND two Numbers, digitwise This computes C = A & B res is C, the result.  C may be A and/or B (e.g., X=X&X) lhs is A rhs is B set is the context (used for result length and error report) C must have space for set->digits digits. Logical function restrictions apply (see above); a NaN is returned with Invalid_operation if a restriction is violated. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberCompare -- compare two Numbers This computes C = A ? B res is C, the result.  C may be A and/or B (e.g., X=X?X) lhs is A rhs is B set is the context C must have space for one digit (or NaN). ------------------------------------------------------------------
------------------------------------------------------------------ decNumberCompareSignal -- compare, signalling on all NaNs This computes C = A ? B res is C, the result.  C may be A and/or B (e.g., X=X?X) lhs is A rhs is B set is the context C must have space for one digit (or NaN). ------------------------------------------------------------------
------------------------------------------------------------------ decNumberCompareTotal -- compare two Numbers, using total ordering This computes C = A ? B, under total ordering res is C, the result.  C may be A and/or B (e.g., X=X?X) lhs is A rhs is B set is the context C must have space for one digit; the result will always be one of -1, 0, or 1. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberCompareTotalMag -- compare, total ordering of magnitudes This computes C = |A| ? |B|, under total ordering res is C, the result.  C may be A and/or B (e.g., X=X?X) lhs is A rhs is B set is the context C must have space for one digit; the result will always be one of -1, 0, or 1. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberDivide -- divide one number by another This computes C = A / B res is C, the result.  C may be A and/or B (e.g., X=X/X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberDivideInteger -- divide and return integer quotient This computes C = A # B, where # is the integer divide operator res is C, the result.  C may be A and/or B (e.g., X=X#X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberExp -- exponentiation This computes C = exp(A) res is C, the result.  C may be A rhs is A set is the context; note that rounding mode has no effect C must have space for set->digits digits. Mathematical function restrictions apply (see above); a NaN is returned with Invalid_operation if a restriction is violated. Finite results will always be full precision and Inexact, except when A is a zero or -Infinity (giving 1 or 0 respectively). An Inexact result is rounded using DEC_ROUND_HALF_EVEN; it will almost always be correctly rounded, but may be up to 1 ulp in error in rare cases. ------------------------------------------------------------------ This is a wrapper for decExpOp which can handle the slightly wider (double) range needed by Ln (which has to be able to calculate exp(-a) where a can be the tiniest number (Ntiny). ------------------------------------------------------------------
------------------------------------------------------------------ decNumberFMA -- fused multiply add This computes D = (A * B) + C with only one rounding res is D, the result.  D may be A or B or C (e.g., X=FMA(X,X,X)) lhs is A rhs is B fhs is C [far hand side] set is the context Mathematical function restrictions apply (see above); a NaN is returned with Invalid_operation if a restriction is violated. C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberInvert -- invert a Number, digitwise This computes C = ~A res is C, the result.  C may be A (e.g., X=~X) rhs is A set is the context (used for result length and error report) C must have space for set->digits digits. Logical function restrictions apply (see above); a NaN is returned with Invalid_operation if a restriction is violated. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberLn -- natural logarithm This computes C = ln(A) res is C, the result.  C may be A rhs is A set is the context; note that rounding mode has no effect C must have space for set->digits digits. Notable cases: A<0 -> Invalid A=0 -> -Infinity (Exact) A=+Infinity -> +Infinity (Exact) A=1 exactly -> 0 (Exact) Mathematical function restrictions apply (see above); a NaN is returned with Invalid_operation if a restriction is violated. An Inexact result is rounded using DEC_ROUND_HALF_EVEN; it will almost always be correctly rounded, but may be up to 1 ulp in error in rare cases. ------------------------------------------------------------------ This is a wrapper for decLnOp which can handle the slightly wider (+11) range needed by Ln, Log10, etc. (which may have to be able to calculate at p+e+2). ------------------------------------------------------------------
------------------------------------------------------------------ decNumberLogB - get adjusted exponent, by 754 rules This computes C = adjustedexponent(A) res is C, the result.  C may be A rhs is A set is the context, used only for digits and status C must have space for 10 digits (A might have 10**9 digits and an exponent of +999999999, or one digit and an exponent of -1999999999). This returns the adjusted exponent of A after (in theory) padding with zeros on the right to set->digits digits while keeping the same value.  The exponent is not limited by emin/emax. Notable cases: A<0 -> Use |A| A=0 -> -Infinity (Division by zero) A=Infinite -> +Infinity (Exact) A=1 exactly -> 0 (Exact) NaNs are propagated as usual ------------------------------------------------------------------
------------------------------------------------------------------ decNumberLog10 -- logarithm in base 10 This computes C = log10(A) res is C, the result.  C may be A rhs is A set is the context; note that rounding mode has no effect C must have space for set->digits digits. Notable cases: A<0 -> Invalid A=0 -> -Infinity (Exact) A=+Infinity -> +Infinity (Exact) A=10**n (if n is an integer) -> n (Exact) Mathematical function restrictions apply (see above); a NaN is returned with Invalid_operation if a restriction is violated. An Inexact result is rounded using DEC_ROUND_HALF_EVEN; it will almost always be correctly rounded, but may be up to 1 ulp in error in rare cases. ------------------------------------------------------------------ This calculates ln(A)/ln(10) using appropriate precision.  For ln(A) this is the max(p, rhs->digits + t) + 3, where p is the requested digits and t is the number of digits in the exponent (maximum 6).  For ln(10) it is p + 3; this is often handled by the fastpath in decLnOp.  The final division is done to the requested precision. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberMax -- compare two Numbers and return the maximum This computes C = A ? B, returning the maximum by 754 rules res is C, the result.  C may be A and/or B (e.g., X=X?X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberMaxMag -- compare and return the maximum by magnitude This computes C = A ? B, returning the maximum by 754 rules res is C, the result.  C may be A and/or B (e.g., X=X?X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberMin -- compare two Numbers and return the minimum This computes C = A ? B, returning the minimum by 754 rules res is C, the result.  C may be A and/or B (e.g., X=X?X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberMinMag -- compare and return the minimum by magnitude This computes C = A ? B, returning the minimum by 754 rules res is C, the result.  C may be A and/or B (e.g., X=X?X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberMinus -- prefix minus operator This computes C = 0 - A res is C, the result.  C may be A rhs is A set is the context See also decNumberCopyNegate for a quiet bitwise version of this. C must have space for set->digits digits. ------------------------------------------------------------------ Simply use AddOp for the subtract, which will do the necessary. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberNextMinus -- next towards -Infinity This computes C = A - infinitesimal, rounded towards -Infinity res is C, the result.  C may be A rhs is A set is the context This is a generalization of 754 NextDown. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberNextPlus -- next towards +Infinity This computes C = A + infinitesimal, rounded towards +Infinity res is C, the result.  C may be A rhs is A set is the context This is a generalization of 754 NextUp. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberNextToward -- next towards rhs This computes C = A +/- infinitesimal, rounded towards +/-Infinity in the direction of B, as per 754-1985 nextafter modified during revision but dropped from 754-2008. res is C, the result.  C may be A or B. lhs is A rhs is B set is the context This is a generalization of 754-1985 NextAfter. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberOr -- OR two Numbers, digitwise This computes C = A | B res is C, the result.  C may be A and/or B (e.g., X=X|X) lhs is A rhs is B set is the context (used for result length and error report) C must have space for set->digits digits. Logical function restrictions apply (see above); a NaN is returned with Invalid_operation if a restriction is violated. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberPlus -- prefix plus operator This computes C = 0 + A res is C, the result.  C may be A rhs is A set is the context See also decNumberCopy for a quiet bitwise version of this. C must have space for set->digits digits. ------------------------------------------------------------------ This simply uses AddOp; Add will take fast path after preparing A. Performance is a concern here, as this routine is often used to check operands and apply rounding and overflow/underflow testing. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberMultiply -- multiply two Numbers This computes C = A x B res is C, the result.  C may be A and/or B (e.g., X=X+X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberPower -- raise a number to a power This computes C = A ** B res is C, the result.  C may be A and/or B (e.g., X=X**X) lhs is A rhs is B set is the context C must have space for set->digits digits. Mathematical function restrictions apply (see above); a NaN is returned with Invalid_operation if a restriction is violated. However, if 1999999997<=B<=999999999 and B is an integer then the restrictions on A and the context are relaxed to the usual bounds, for compatibility with the earlier (integer power only) version of this function. When B is an integer, the result may be exact, even if rounded. The final result is rounded according to the context; it will almost always be correctly rounded, but may be up to 1 ulp in error in rare cases. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberQuantize -- force exponent to requested value This computes C = op(A, B), where op adjusts the coefficient of C (by rounding or shifting) such that the exponent (-scale) of C has exponent of B.  The numerical value of C will equal A, except for the effects of any rounding that occurred. res is C, the result.  C may be A or B lhs is A, the number to adjust rhs is B, the number with exponent to match set is the context C must have space for set->digits digits. Unless there is an error or the result is infinite, the exponent after the operation is guaranteed to be equal to that of B. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberReduce -- remove trailing zeros This computes C = 0 + A, and normalizes the result res is C, the result.  C may be A rhs is A set is the context C must have space for set->digits digits. ------------------------------------------------------------------ Previously known as Normalize
------------------------------------------------------------------ decNumberRescale -- force exponent to requested value This computes C = op(A, B), where op adjusts the coefficient of C (by rounding or shifting) such that the exponent (-scale) of C has the value B.  The numerical value of C will equal A, except for the effects of any rounding that occurred. res is C, the result.  C may be A or B lhs is A, the number to adjust rhs is B, the requested exponent set is the context C must have space for set->digits digits. Unless there is an error or the result is infinite, the exponent after the operation is guaranteed to be equal to B. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberRemainder -- divide and return remainder This computes C = A % B res is C, the result.  C may be A and/or B (e.g., X=X%X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberRemainderNear -- divide and return remainder from nearest This computes C = A % B, where % is the IEEE remainder operator res is C, the result.  C may be A and/or B (e.g., X=X%X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberRotate -- rotate the coefficient of a Number left/right This computes C = A rot B  (in base ten and rotating set->digits digits). res is C, the result.  C may be A and/or B (e.g., X=XrotX) lhs is A rhs is B, the number of digits to rotate (-ve to right) set is the context The digits of the coefficient of A are rotated to the left (if B is positive) or to the right (if B is negative) without adjusting the exponent or the sign of A.  If lhs->digits is less than set->digits the coefficient is padded with zeros on the left before the rotate.  Any leading zeros in the result are removed as usual. B must be an integer (q=0) and in the range -set->digits through +set->digits. C must have space for set->digits digits. NaNs are propagated as usual.  Infinities are unaffected (but B must be valid).  No status is set unless B is invalid or an operand is an sNaN. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberSameQuantum -- test for equal exponents res is the result number, which will contain either 0 or 1 lhs is a number to test rhs is the second (usually a pattern) No errors are possible and no context is needed. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberScaleB -- multiply by a power of 10 This computes C = A x 10**B where B is an integer (q=0) with maximum magnitude 2*(emax+digits) res is C, the result.  C may be A or B lhs is A, the number to adjust rhs is B, the requested power of ten to use set is the context C must have space for set->digits digits. The result may underflow or overflow. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberShift -- shift the coefficient of a Number left or right This computes C = A << B or C = A >> -B  (in base ten). res is C, the result.  C may be A and/or B (e.g., X=X<<X) lhs is A rhs is B, the number of digits to shift (-ve to right) set is the context The digits of the coefficient of A are shifted to the left (if B is positive) or to the right (if B is negative) without adjusting the exponent or the sign of A. B must be an integer (q=0) and in the range -set->digits through +set->digits. C must have space for set->digits digits. NaNs are propagated as usual.  Infinities are unaffected (but B must be valid).  No status is set unless B is invalid or an operand is an sNaN. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberSquareRoot -- square root operator This computes C = squareroot(A) res is C, the result.  C may be A rhs is A set is the context; note that rounding mode has no effect C must have space for set->digits digits. ------------------------------------------------------------------ This uses the following varying-precision algorithm in: Properly Rounded Variable Precision Square Root, T. E. Hull and A. Abrham, ACM Transactions on Mathematical Software, Vol 11 #3, pp229-237, ACM, September 1985. The square-root is calculated using Newton's method, after which a check is made to ensure the result is correctly rounded. % [Reformatted original Numerical Turing source code follows.] function sqrt(x : real) : real % sqrt(x) returns the properly rounded approximation to the square % root of x, in the precision of the calling environment, or it % fails if x < 0. % t e hull and a abrham, august, 1984 if x <= 0 then if x < 0 then else end if end if var f := setexp(x, 0)  % fraction part of x   [0.1 <= x < 1] var e := getexp(x)     % exponent part of x var approx : real if e mod 2 = 0  then approx := .259 + .819 * f   % approx to root of f else f := f/l0                   % adjustments e := e + 1                  %   for odd approx := .0819 + 2.59 * f  %   exponent end if var p:= 3 const maxp := currentprecision + 2 loop p := min(2*p - 2, maxp)     % p = 4,6,10, . . . , maxp precision p approx := .5 * (approx + f/approx) exit when p = maxp end loop % approx is now within 1 ulp of the properly rounded square root % of f; to ensure proper rounding, compare squares of (approx - % l/2 ulp) and (approx + l/2 ulp) with f. p := currentprecision begin precision p + 2 const approxsubhalf := approx - setexp(.5, -p) if mulru(approxsubhalf, approxsubhalf) > f then else end if end result setexp(approx, e div 2)  % fix exponent end sqrt ------------------------------------------------------------------
------------------------------------------------------------------ decNumberSubtract -- subtract two Numbers This computes C = A - B res is C, the result.  C may be A and/or B (e.g., X=X-X) lhs is A rhs is B set is the context C must have space for set->digits digits. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberToIntegralExact -- round-to-integral-value with InExact decNumberToIntegralValue -- round-to-integral-value res is the result rhs is input number set is the context res must have space for any value of rhs. This implements the IEEE special operators and therefore treats special values as valid.  For finite numbers it returns rescale(rhs, 0) if rhs->exponent is <0. Otherwise the result is rhs (so no error is possible, except for sNaN). The context is used for rounding mode and status after sNaN, but the digits setting is ignored.  The Exact version will signal Inexact if the result differs numerically from rhs; the other never signals Inexact. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberXor -- XOR two Numbers, digitwise This computes C = A ^ B res is C, the result.  C may be A and/or B (e.g., X=X^X) lhs is A rhs is B set is the context (used for result length and error report) C must have space for set->digits digits. Logical function restrictions apply (see above); a NaN is returned with Invalid_operation if a restriction is violated. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberClass -- return the decClass of a decNumber dn -- the decNumber to test set -- the context to use for Emin returns the decClass enum ------------------------------------------------------------------
------------------------------------------------------------------ decNumberClassToString -- convert decClass to a string eclass is a valid decClass returns a constant string describing the class (max 13+1 chars) ------------------------------------------------------------------
------------------------------------------------------------------ decNumberCopy -- copy a number dest is the target decNumber src  is the source decNumber returns dest (dest==src is allowed and is a no-op) All fields are updated as required.  This is a utility operation, so special values are unchanged and no error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberCopyAbs -- quiet absolute value operator This sets C = abs(A) res is C, the result.  C may be A rhs is A C must have space for set->digits digits. No exception or error can occur; this is a quiet bitwise operation. See also decNumberAbs for a checking version of this. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberCopyNegate -- quiet negate value operator This sets C = negate(A) res is C, the result.  C may be A rhs is A C must have space for set->digits digits. No exception or error can occur; this is a quiet bitwise operation. See also decNumberMinus for a checking version of this. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberCopySign -- quiet copy and set sign operator This sets C = A with the sign of B res is C, the result.  C may be A lhs is A rhs is B C must have space for set->digits digits. No exception or error can occur; this is a quiet bitwise operation. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberGetBCD -- get the coefficient in BCD8 dn is the source decNumber bcd is the uInt array that will receive dn->digits BCD bytes, returns bcd bcd must have at least dn->digits bytes.  No error is possible; if dn is a NaN or Infinite, digits must be 1 and the coefficient 0. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberSetBCD -- set (replace) the coefficient from BCD8 dn is the target decNumber bcd is the uInt array that will source n BCD bytes, most- n is the number of digits in the source BCD array (bcd) returns dn dn must have space for at least n digits.  No error is possible; if dn is a NaN, or Infinite, or is to become a zero, n must be 1 and bcd[0] zero. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberIsNormal -- test normality of a decNumber dn is the decNumber to test set is the context to use for Emin returns 1 if |dn| is finite and >=Nmin, 0 otherwise ------------------------------------------------------------------
------------------------------------------------------------------ decNumberIsSubnormal -- test subnormality of a decNumber dn is the decNumber to test set is the context to use for Emin returns 1 if |dn| is finite, non-zero, and <Nmin, 0 otherwise ------------------------------------------------------------------
------------------------------------------------------------------ decNumberTrim -- remove insignificant zeros dn is the number to trim returns dn All fields are updated as required.  This is a utility operation, so special values are unchanged and no error is possible.  The zeros are removed unconditionally. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberVersion -- return the name and version of this module No error is possible. ------------------------------------------------------------------
------------------------------------------------------------------ decNumberZero -- set a number to 0 dn is the number to set, with space for one digit returns dn No error is possible. ------------------------------------------------------------------ Memset is not used as it is much slower in some environments.
------------------------------------------------------------------ decToString -- lay out a number into a string dn     is the number to lay out string is where to lay out the number eng    is 1 if Engineering, 0 if Scientific string must be at least dn->digits+14 characters long No error is possible. Note that this routine can generate a -0 or 0.000.  These are never generated in subset to-number or arithmetic, but can occur in non-subset arithmetic (e.g., -1*0 or 1.234-1.234). ------------------------------------------------------------------ If DECCHECK is enabled the string "?" is returned if a number is invalid.
------------------------------------------------------------------ decAddOp -- add/subtract operation This computes C = A + B res is C, the result.  C may be A and/or B (e.g., X=X+X) lhs is A rhs is B set is the context negate is DECNEG if rhs should be negated, or 0 otherwise status accumulates status for the caller C must have space for set->digits digits. Inexact in status must be 0 for correct Exact zero sign in result ------------------------------------------------------------------ If possible, the coefficient is calculated directly into C. However, if: -- a digits+1 calculation is needed because the numbers are -- a carry to digits+1 digits looks possible -- C is the same as A or B, and the result would destructively then the result must be calculated into a temporary buffer.  In this case a local (stack) buffer is used if possible, and only if too long for that does malloc become the final resort. Misalignment is handled as follows: Apad: (AExp>BExp) Swap operands and proceed as for BExp>AExp. BPad: Apply the padding by a combination of shifting (whole Addition, especially x=x+1, is speed-critical. The static buffer is larger than might be expected to allow for calls from higher-level funtions (notable exp). ------------------------------------------------------------------
------------------------------------------------------------------ decDivideOp -- division operation This routine performs the calculations for all four division operators (divide, divideInteger, remainder, remainderNear). C=A op B res is C, the result.  C may be A and/or B (e.g., X=X/X) lhs is A rhs is B set is the context op  is DIVIDE, DIVIDEINT, REMAINDER, or REMNEAR respectively. status is the usual accumulator C must have space for set->digits digits. ------------------------------------------------------------------ The underlying algorithm of this routine is the same as in the 1981 S/370 implementation, that is, non-restoring long division with bi-unit (rather than bi-digit) estimation for each unit multiplier.  In this pseudocode overview, complications for the Remainder operators and division residues for exact rounding are omitted for clarity. ------------------------------------------------------------------ Two working buffers are needed during the division; one (digits+ 1) to accumulate the result, and the other (up to 2*digits+1) for long subtractions.  These are acc and var1 respectively. var1 is a copy of the lhs coefficient, var2 is the rhs coefficient. The static buffers may be larger than might be expected to allow for calls from higher-level funtions (notable exp). ------------------------------------------------------------------
------------------------------------------------------------------ decExpOp -- effect exponentiation This computes C = exp(A) res is C, the result.  C may be A rhs is A set is the context; note that rounding mode has no effect C must have space for set->digits digits. status is updated but not set. Restrictions: digits, emax, and -emin in the context must be less than 2*DEC_MAX_MATH (1999998), and the rhs must be within these bounds or a zero.  This is an internal routine, so these restrictions are contractual and not enforced. A finite result is rounded using DEC_ROUND_HALF_EVEN; it will almost always be correctly rounded, but may be up to 1 ulp in error in rare cases. Finite results will always be full precision and Inexact, except when A is a zero or -Infinity (giving 1 or 0 respectively). ------------------------------------------------------------------ This approach used here is similar to the algorithm described in Variable Precision Exponential Function, T. E. Hull and A. Abrham, ACM Transactions on Mathematical Software, Vol 12 #2, pp79-91, ACM, June 1986. with the main difference being that the iterations in the series evaluation are terminated dynamically (which does not require the extra variable-precision variables which are expensive in this context). The error analysis in Hull & Abrham's paper applies except for the round-off error accumulation during the series evaluation.  This code does not precalculate the number of iterations and so cannot use Horner's scheme.  Instead, the accumulation is done at double- precision, which ensures that the additions of the terms are exact and do not accumulate round-off (and any round-off errors in the terms themselves move 'to the right' faster than they can accumulate).  This code also extends the calculation by allowing, in the spirit of other decNumber operators, the input to be more precise than the result (the precision used is based on the more precise of the input or requested result). Implementation notes: 1. This is separated out as decExpOp so it can be called from 2. Normalizing x to be <=0.1 (instead of <=1) reduces loop 3. The restrictions (especially precision) could be raised with 4. The working precisions for the static buffers are twice the ------------------------------------------------------------------
------------------------------------- default constructor
------------------------------------- copy constructor
------------------------------------- Reduce - remove trailing zero digits.
------------------------------------- trim - remove trailing fraction zero digits.
------------------------------------- Resets the digit list; sets all the digits to zero.
------------------------------------- Appends the digit to the digit list if it's not out of scope. Ignores the digit, otherwise. This function is horribly inefficient to implement with decNumber because the digits are stored least significant first, which requires moving all existing digits down one to make space for the new one to be appended.
convert this number to an int32_t.   Round if there is a fractional part. Return zero if the number cannot be represented.
convert this number to an int64_t.   Truncate if there is a fractional part. Return zero if the number cannot be represented.
Return a string form of this number.
------------------------------------- there is no maximum -- generate all digits.
------------------------------------- Set the DigitList from a decimal number string. The incoming string _must_ be nul terminated, even though it is arriving as a StringPiece because that is what the decNumber library wants. We can get away with this for an internal function; it would not be acceptable for a public API.
Set the digit list to a representation of the given double value. This method supports both fixed-point and exponential notation.
ensureCapacity.   Grow the digit storage for the number if it's less than the requested
Round the representation to the given number of digits. Upon return, count will be less than or equal to maximumDigits.
Jitterbug 2974: MSVC has a bug whereby new X[0] behaves badly. Work around this.
Create a copy, in fZoneStrings, of the given zone strings array.  The member variables fZoneStringsRowCount and fZoneStringsColCount should be set already by the caller.
Copy all of the other's data to this.
This function aussumes the current itemIndex points to the quote literal. Please call isQuoteLiteral prior to this function.
Factory methods
Registers standard variants with the system.  Called by Transliterator during initialization.
Constructs an escape transliterator with the given ID and parameters.  See the class member documentation for details.
Copy constructor.
Return TRUE if *a == *b.
Return a clone of *a.
Return TRUE if *a is an instance of Measure.
Creates a new Formattable array and copies the values from the specified original.
Set 'ec' to 'err' only if 'ec' is not already set to a failing UErrorCode.
Common initialization code, shared by constructors. Put everything into a known state.
------------------------------------- default constructor. Creates a formattable object with a long value 0.
------------------------------------- Creates a formattable object with a Date instance.
------------------------------------- Creates a formattable object with a double value.
------------------------------------- Creates a formattable object with an int32_t value.
------------------------------------- Creates a formattable object with an int64_t value.
------------------------------------- Creates a formattable object with a decimal number value from a string.
------------------------------------- Creates a formattable object with a UnicodeString instance.
------------------------------------- Creates a formattable object with a UnicodeString* value. (adopting symantics)
------------------------------------- copy constructor
Formattable::getLong(UErrorCode* status) const
------------------------------------- Sets the value to a double value d.
------------------------------------- Sets the value to a long value l.
------------------------------------- Sets the value to an int64 value ll.
------------------------------------- Sets the value to a Date instance d.
------------------------------------- Sets the value to a string value stringToCopy.
------------------------------------- Sets the value to an array of Formattable objects.
------------------------------------- Adopts the stringToAdopt value.
------------------------------------- Adopts the array value and its count.
This is for debugging purposes only.  This will send a displayable form of the Formattable object to the output stream.
------------------------------------- Creates a formattable object with a char* string. This API is useless. The API that takes a UnicodeString is actually just as good. This is just a grandfathered API.
------------------------------------- default constructor
------------------------------------- copy constructor
------------------------------------- Parses the source string and create the corresponding result object.  Checks the parse position for errors.
Simple function for initializing a UParseError from a UnicodeString.
utility subclass FieldPositionOnlyHandler
utility subclass FieldPositionIteratorHandler
BEGIN android-added
END android-added
Construct a replacer that takes the output of the given replacer, passes it through the given transliterator, and emits the result as output.
Copy constructor.
Implement UnicodeFunctor
UnicodeFunctor API.  Cast 'this' to a UnicodeReplacer* pointer and return the pointer.
UnicodeReplacer API
UnicodeReplacer API
Implement UnicodeReplacer
UnicodeFunctor API
Compute the julian day number of the day BEFORE the first day of January 1, year 1 of the given calendar.  If julianDay == 0, it specifies (Jan. 1, 1) - 1, in whatever calendar we are using (Julian or Gregorian).
Return the minimum value that this field could have, given the current date. For the Gregorian calendar, this is the same as getMinimum() and getGreatestMinimum().
Return the maximum value that this field could have, given the current date. For example, with the date "Feb 3, 1997" and the DAY_OF_MONTH field, the actual maximum would be 28; for "Feb 3, 1996" it s 29.  Similarly for a Hebrew calendar, for some years the actual maximum for MONTH is 12, and for others 13.
CalendarData::CalendarData(const Locale& loc, UErrorCode& status) : fFillin(NULL), fBundle(NULL), fFallback(NULL) { initData(loc.getBaseName(), (char*) "???", status);
Constructs a default <code>HebrewCalendar</code> using the current time in the default time zone with the default locale.
Add a signed amount to a specified field, using this calendar's rules. For example, to add three days to the current date, you can call <code>add(Calendar.DATE, 3)</code>. <p> When adding to certain fields, the values of other fields may conflict and need to be changed.  For example, when adding one to the {@link #MONTH MONTH} field for the date "30 Av 5758", the {@link #DAY_OF_MONTH DAY_OF_MONTH} field must be adjusted so that the result is "29 Elul 5758" rather than the invalid "30 Elul 5758". <p> This method is able to add to all fields except for {@link #ERA ERA}, {@link #DST_OFFSET DST_OFFSET}, and {@link #ZONE_OFFSET ZONE_OFFSET}. <p> <b>Note:</b> You should always use {@link #roll roll} and add rather than attempting to perform arithmetic operations directly on the fields of a <tt>HebrewCalendar</tt>.  Since the {@link #MONTH MONTH} field behaves discontinuously in non-leap years, simple arithmetic can give invalid results. <p>
Rolls (up/down) a specified amount time on the given field.  For example, to roll the current date up by three days, you can call <code>roll(Calendar.DATE, 3)</code>.  If the field is rolled past its maximum allowable value, it will "wrap" back to its minimum and continue rolling. For example, calling <code>roll(Calendar.DATE, 10)</code> on a Hebrew calendar set to "25 Av 5758" will result in the date "5 Av 5758". <p> When rolling certain fields, the values of other fields may conflict and need to be changed.  For example, when rolling the {@link #MONTH MONTH} field upward by one for the date "30 Av 5758", the {@link #DAY_OF_MONTH DAY_OF_MONTH} field must be adjusted so that the result is "29 Elul 5758" rather than the invalid "30 Elul". <p> This method is able to roll all fields except for {@link #ERA ERA}, {@link #DST_OFFSET DST_OFFSET}, and {@link #ZONE_OFFSET ZONE_OFFSET}.  Subclasses may, of course, add support for additional fields in their overrides of <code>roll</code>. <p> <b>Note:</b> You should always use roll and {@link #add add} rather than attempting to perform arithmetic operations directly on the fields of a <tt>HebrewCalendar</tt>.  Since the {@link #MONTH MONTH} field behaves discontinuously in non-leap years, simple arithmetic can give invalid results. <p>
Finds the day # of the first day in the given Hebrew year. To do this, we want to calculate the time of the Tishri 1 new moon in that year. <p> The algorithm here is similar to ones described in a number of references, including: <ul> <li>"Calendrical Calculations", by Nachum Dershowitz & Edward Reingold, <li>Hebrew Calendar Science and Myths, <li>The Calendar FAQ, </ul>
Find the day of the week for a given day
Returns the the type of a given year. 0   "Deficient" year with 353 or 383 days 1   "Normal"    year with 354 or 384 days 2   "Complete"  year with 355 or 385 days
Determine whether a given Hebrew year is a leap year The rule here is that if (year % 19) == 0, 3, 6, 8, 11, 14, or 17. The formula below performs the same test, believe it or not.
Returns the length of the given month in the given year
Returns the number of days in the given Hebrew year
Subclasses may override this method to compute several fields specific to each calendar system.  These are: <ul><li>ERA <li>YEAR <li>MONTH <li>DAY_OF_MONTH <li>DAY_OF_YEAR <li>EXTENDED_YEAR</ul> Subclasses can refer to the DAY_OF_WEEK and DOW_LOCAL fields, which will be set when this method is called.  Subclasses can also call the getGregorianXxx() methods to obtain Gregorian calendar equivalents for the given Julian day. <p>In addition, subclasses should compute any subclass-specific fields, that is, fields from BASE_FIELD_COUNT to getFieldCount() - 1.
Return JD of start of given month/year.
Determine whether the given gregorian year is a Leap year
Return the length (in days) of the given month.
Return the number of days in the given Indian year
Returns the Julian Day corresponding to gregorian date
Returns the Gregorian Date corresponding to a given Julian Day
------------------------------------------------------------------------- Functions for converting from field values to milliseconds.... -------------------------------------------------------------------------
Return JD of start of given month/year of Indian Calendar
------------------------------------------------------------------------- Functions for converting from milliseconds to field values -------------------------------------------------------------------------
Override Calendar to compute several fields specific to the Indian calendar system.  These are: <ul><li>ERA <li>YEAR <li>MONTH <li>DAY_OF_MONTH <li>EXTENDED_YEAR</ul> The DAY_OF_WEEK and DOW_LOCAL fields are already set when this method is called. The getGregorianXxx() methods return Gregorian calendar equivalents for the given Julian day.
MungeInput - after getting a set of raw input data to be analyzed, preprocess
Determines whether this object uses the fixed-cycle Islamic civil calendar or an approximation of the religious, astronomical calendar.
Returns <code>true</code> if this object is using the fixed-cycle civil calendar, or <code>false</code> if using the religious, astronomical calendar.
Determine whether a year is a leap year in the Islamic civil calendar
Return the day # on which the given year starts.  Days are counted from the Hijri epoch, origin 0.
Return the day # on which the given month starts.  Days are counted from the Hijri epoch, origin 0.
Find the day number on which a particular month of the true/lunar Islamic calendar starts.
Return the "age" of the moon at the given time; this is the difference in ecliptic latitude between the moon and the sun.  This method simply calls CalendarAstronomer.moonAge, converts to degrees, and adjusts the result to be in the range [-180, 180].
Return the number of days in the given Islamic year
Return JD of start of given month/year
Override Calendar to compute several fields specific to the Islamic calendar system.  These are: <ul><li>ERA <li>YEAR <li>MONTH <li>DAY_OF_MONTH <li>DAY_OF_YEAR <li>EXTENDED_YEAR</ul> The DAY_OF_WEEK and DOW_LOCAL fields are already set when this method is called. The getGregorianXxx() methods return Gregorian calendar equivalents for the given Julian day.
Some platforms don't like to export constants, like old Palm OS and some z/OS configurations.
Concatenate a number of null-terminated strings to buffer, leaving a null-terminated string.  The last argument should be the null pointer. Return the length of the string in the buffer, not counting the trailing null.  Return -1 if there is an error (buffer is null, or buflen < 1).
Convert a string to an unsigned decimal, ignoring rule whitespace.
Convert an integer value to a string and append the result to the given UnicodeString.
------------------------------------- Creates a MessageFormat instance based on the pattern.
Allocate subformats[] to at least the given capacity and return TRUE if successful.  If not, leave subformats[] unchanged. If subformats is NULL, allocate it.  If it is not NULL, enlarge it if necessary to be at least as large as specified.
Allocate argTypes[] to at least the given capacity and return TRUE if successful.  If not, leave argTypes[] unchanged. If argTypes is NULL, allocate it.  If it is not NULL, enlarge it if necessary to be at least as large as specified.
------------------------------------- Sets the locale of this MessageFormat object to theLocale.
------------------------------------- Applies the new pattern and returns an error if the pattern is not correct.
------------------------------------- Adopts the new formats array and updates the array count. This MessageFormat instance owns the new formats.
------------------------------------- Sets the new formats array and updates the array count. This MessageFormat instance maks a copy of the new formats.
------------------------------------- Adopt a single format by format number. Do nothing if the format number is not less than the array count.
------------------------------------- Adopt a single format by format name. Do nothing if there is no match of formatName.
------------------------------------- Set a single format. Do nothing if the variable is not less than the array count.
------------------------------------- Set a single format by format name Do nothing if the variable is not less than the array count.
------------------------------------- Parses the source text and copy into the result buffer.
Reads the segments[] array (see applyPattern()) and parses the segments[1..3] into a Format* object.  Stores the format object in the subformats[] array.  Updates the argTypes[] array type information for the corresponding argument.
------------------------------------- Finds the string, s, in the string array, list.
------------------------------------- Checks the range of the source text to quote the special characters, { and ' and copy to target buffer.
Return the default number format.  Used to format a numeric argument when subformats[i].format is NULL.  Returns NULL on failure. Semantically const but may modify *this.
Return the default date format.  Used to format a date argument when subformats[i].format is NULL.  Returns NULL on failure. Semantically const but may modify *this.
Constructs a transliterator with the default delimiters '{' and '}'.
utility functions
This function parses the rule's rule descriptor (i.e., the base value and/or other tokens that precede the rule's rule text in the description) and sets the rule's base value, radix, and exponent according to the descriptor.  (If the description doesn't include a rule descriptor, then this function sets everything to default values and the rule set sets the rule's real base value). "description" with the descriptor and any trailing whitespace stripped off.  Otherwise; it's "descriptor" unchangd.
Searches the rule's rule text for the substitution tokens, creates the substitutions, and removes the substitution tokens from the rule's rule text.
Sets the rule's base value, and causes the radix and exponent to be recalculated.  This is used during construction when we don't know the rule's base value until after it's been constructed.  It should be used at any other time.
Returns a textual representation of the rule.  This won't necessarily be the same as the description that this rule was created with, but it will produce the same result.
Formats the number, and inserts the resulting text into toInsertInto. be inserted should be inserted
This function is used by parse() to match the text being parsed against a possible prefix string.  This function matches characters from the beginning of the string being parsed to characters from the prospective prefix.  If they match, pp is updated to the first character not matched, and the result is the unparsed part of the string.  If they don't match, the whole string is returned, and pp is left unchanged. to the first unmatched character (assuming the whole prefix matched), or is unchanged (if the whole prefix didn't match). if they didn't match, this is "text".
Set's the substitution's divisor.  Used by NFRule.setBaseValue(). A no-op for all substitutions except multiplier and modulus substitutions.
Returns a textual description of the substitution not be identical to the description it was created from, but it'll produce the same result.
Performs a mathematical operation on the number, formats it using either ruleSet or decimalFormat, and inserts the result into toInsertInto. rule text begins (this value is added to this substitution's position to determine exactly where to insert the new text)
A substitution that passes the value passed to it through unchanged. Represented by == in rule descriptions.
A substitution that divides the number being formatted by the its rule's divisor and formats the remainder.  Represented by "&gt;&gt;" in a regular rule.
If this is a &gt;&gt;&gt; substitution, use ruleToUse to fill in the substitution.  Otherwise, just use the superclass function. into
Constructs a FractionalPartSubstitution.  This object keeps a flag telling whether it should format by digits or not.  In addition, it marks the rule set it calls (if any) as a fraction rule set.
If in "by digits" mode, fills in the substitution one decimal digit at a time using the rule set containing this substitution. Otherwise, uses the superclass function. the substitution into toInsertInto
System registration hook.
Factory methods
Constructs a transliterator.
------------------------------------- default constructor
------------------------------------- copy constructor
------------------------------------- Parses the string and save the result object as well as the final parsed position.
------------------------------------- Parses the text and save the result object.  If the returned parse position is 0, that means the parsing failed, the status code needs to be set to failure.  Ignores the returned parse position, otherwise.
------------------------------------- Sets to only parse integers.
Return the set of ids that this factory supports (visible or otherwise).  This can be called often and might need to be cached if it is expensive to create.
------------------------------------- Sets to use the thousand/10 thousand grouping in the NumberFormat instance.
------------------------------------- Gets the maximum number of digits for the integral part for this NumberFormat instance.
------------------------------------- Sets the maximum number of digits for the integral part for this NumberFormat instance.
------------------------------------- Sets the minimum number of digits for the integral part for this NumberFormat instance.
------------------------------------- Sets the maximum number of digits for the fractional part for this NumberFormat instance.
------------------------------------- Sets the minimum number of digits for the fractional part for this NumberFormat instance.
Default Constructor.
Copy constructor.
Construct a GMT+0 zone with no transitions.  This is done when a constructor fails so the resultant object is well-behaved.
Construct from a resource bundle to lookup the rule that `res' may refer to, if there is one.
Copy constructor
Assignment operator
Returns true if the two TimeZone objects are equal.
TimeZone API.
TimeZone API.
TimeZone API.
TimeZone API.
TimeZone API.
TimeZone API.
len  length of month len2 length of month in a leap year st   days in year before start of month st2  days in year before month in leap year
Determine whether a year is a leap year in the Persian calendar
Return the number of days in the given Persian year
Override Calendar to compute several fields specific to the Persian calendar system.  These are: <ul><li>ERA <li>YEAR <li>MONTH <li>DAY_OF_MONTH <li>DAY_OF_YEAR <li>EXTENDED_YEAR</ul> The DAY_OF_WEEK and DOW_LOCAL fields are already set when this method is called. The getGregorianXxx() methods return Gregorian calendar equivalents for the given Julian day.
Implement UnicodeMatcher
Implement UnicodeMatcher
Implement UnicodeMatcher
Implement UnicodeFunctor
Constructs a new transliterator from the given rules. or direction is invalid.
Internal constructor.
Copy constructor.
The internal getOffset implementation
Implement SymbolTable API.
Implement SymbolTable API.
Implement SymbolTable API.  Parse out a symbol reference name.
Return true if the given character is a replacer standin or a plain character (non standin).
Parse one side of a rule, stopping at either the limit, the END_OF_RULE character, or an operator. if limit was reached, limit
Parse a section of one side of a rule, stopping at either the limit, the END_OF_RULE character, an operator, or a segment close character.  This method parses both a top-level rule half and a segment within such a rule half. It calls itself recursively to parse segments and nested segments. characters, either literal characters from the rule or standins for UnicodeMatcher objects including segments. this parse. pos on entry points right after it.  Accumulate everything up to the closing ')', put it in a segment matcher object, generate a standin for it, and add the standin to buf.  As a side effect, update the segments vector with a reference to the segment matcher.  This works recursively for nested segments.  If isSegment is false, just accumulate characters into buf. if limit was reached, limit
Remove context.
Return true if this half looks like valid output, that is, does not contain quantifiers or other special input-only elements.
Return true if this half looks like valid input, that is, does not contain functions or other special output-only elements.
Return the compound filter parsed by parse().  Caller owns result.
Parse the given string as a sequence of rules, separated by newline characters ('\n'), and cause this object to implement those rules.  Any previous rules are discarded.  Typically this method is called exactly once, during construction. rules
Set the variable range to [start, end] (inclusive).
Assert that the given character is NOT within the variable range. If it is, return FALSE.  This is neccesary to ensure that the variable range does not overlap characters used in a rule.
Set the maximum backup to 'backup', in response to a pragma statement.
Begin normalizing all rules using the given mode, in response to a pragma statement.
Return true if the given rule looks like a pragma. of the rule.
Parse a pragma.  This method assumes resemblesPragma() has already returned true. of the rule. or -1 on failure.
MAIN PARSER.  Parse the next rule in the given rule string, starting at pos.  Return the index after the last character parsed.  Do not parse characters at or after limit. Important:  The character at pos must be a non-whitespace character that is not the comment character. This method handles quoting, escaping, and whitespace removal.  It parses the end-of-rule character.  It recognizes context and cursor indicators.  Once it does a lexical breakdown of the rule at pos, it creates a rule object and adds it to our rule list.
Called by main parser upon syntax error.  Search the rule string for the probable end of the rule.  Of course, if the error is that the end of rule marker is missing, then the rule end will not be found. In any case the rule start will be correctly reported.
Parse a UnicodeSet out, store it, and return the stand-in character used to represent it.
Generate and return a stand-in for a new UnicodeFunctor.  Store the matcher (adopt it).
Return the standin for segment seg (1-based).
Set the object for segment seg (1-based).
Return the stand-in for the dot set.  It is allocated the first time and reused thereafter.
Append the value of the given variable name to the given UnicodeString.
Construct a new rule with the given input, output text, and other attributes.  A cursor position may be specified for the output text. post context none.  Must be <= input.length() if not -1. if none.  Must be <= input.length() if not -1, and must be >= anteContextPos. none.  If less than zero, then the cursor is placed after the <code>output</code>; that is, -1 is equivalent to <code>output.length()</code>.  If greater than <code>output.length()</code> then an exception is thrown. segments, or null if there are none.  The array itself is adopted, but the pointers within it are not. the context start context limit
Copy constructor.
Return the preceding context length.  This method is needed to support the <code>Transliterator</code> method <code>getMaximumContextLength()</code>.  Internally, this is implemented as the anteContextLength, optionally plus one if there is a start anchor.  The one character anchor gap is needed to make repeated incremental transliteration with anchors work.
Internal method.  Returns 8-bit index value for this rule. This is the low byte of the first character of the key, unless the first character of the key is a set.  If it's a set, or otherwise can match multiple keys, the index value is -1.
Internal method.  Returns true if this rule matches the given index value.  The index value is an 8-bit integer, 0..255, representing the low byte of the first character of the key. It matches this rule if it matches the first character of the key, or if the first character of the key is a set, and the set contains any character with a low byte equal to the index value.  If the rule contains only ante context, as in foo)>bar, then it will match any key.
Return true if this rule masks another rule.  If r1 masks r2 then r1 matches any input string that r2 matches.  If r1 masks r2 and r2 masks r1 then r1 == r2.  Examples: "a>x" masks "ab>y".  "a>x" masks "a[b]>y". "[c]a>x" masks "[dc]a>y".
Attempt a match and replacement at the given position.  Return the degree of match between this rule and the given text.  The degree of match may be mismatch, a partial match, or a full match.  A mismatch means at least one character of the text does not match the context or key.  A partial match means some context and key characters match, but the text is not long enough to match all of them.  A full match means all context and key characters match. If a full match is obtained, perform a replacement, update pos, and return U_MATCH.  Otherwise both text and pos are unchanged. be completed by additional text inserted at pos.limit. <code>U_PARTIAL_MATCH</code>, or <code>U_MATCH</code>.  If incremental is FALSE then U_PARTIAL_MATCH will not be returned.
Create a source string that represents this rule.  Append it to the given string.
Union the set of all characters that may be modified by this rule into the given set.
Union the set of all characters that may be emitted by this rule into the given set.
Append a hex string to the target
Replace nonprintable characters with unicode escapes
Fill the precontext and postcontext with the patterns of the rules that are masking one another.
Construct a new empty rule set.
Copy constructor.
Return the maximum context length.
Add a rule to this set.  Rules are added in order, and order is significant.  The last call to this method must be followed by a call to <code>freeze()</code> before the rule set is used. <p>If freeze() has already been called, calling addRule() unfreezes the rules, and freeze() must be called again.
Check this for masked rules and index it to optimize performance. The sequence of operations is: (1) add rules to a set using <code>addRule()</code>; (2) freeze the set using <code>freeze()</code>; (3) use the rule set.  If <code>addRule()</code> is called after calling this method, it invalidates this object, and this method must be called again. That is, <code>freeze()</code> may be called multiple times, although for optimal performance it shouldn't be.
Transliterate the given text with the given UTransPosition indices.  Return TRUE if the transliteration should continue or FALSE if it should halt (because of a U_PARTIAL_MATCH match). Note that FALSE is only ever returned if isIncremental is TRUE. at index.limit, and return FALSE if thre is a partial match. indicating that transliteration should stop until more text arrives.
Create rule strings that represents this rule set.
Return the set of all characters that may be modified (getTarget=false) or emitted (getTarget=true) by this set.
------------------------------------------------------------------------------ Compile regex pattern.   The state machine for rexexp pattern parsing is here. ------------------------------------------------------------------------------
compile, UText mode
------------------------------------------------------------------------------ doParseAction        Do some action during regex pattern parsing. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ literalChar           We've encountered a literal character from the pattern, ------------------------------------------------------------------------------
------------------------------------------------------------------------------ insertOp()             Insert a slot for a new opcode into the already ------------------------------------------------------------------------------
------------------------------------------------------------------------------ blockTopLoc()          Find or create a location in the compiled pattern ------------------------------------------------------------------------------
------------------------------------------------------------------------------ compileSet       Compile the pattern operations for a reference to a ------------------------------------------------------------------------------
------------------------------------------------------------------------------ compileInterval    Generate the code for a {min, max} style interval quantifier. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ matchStartType    Determine how a match can start. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ minMatchLength    Calculate the length of the shortest string that could ------------------------------------------------------------------------------
------------------------------------------------------------------------------ maxMatchLength    Calculate the length of the longest string that could ------------------------------------------------------------------------------
------------------------------------------------------------------------------ stripNOPs    Remove any NOP operations from the compiled pattern code. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ nextCharLL    Low Level Next Char from the regex pattern. ------------------------------------------------------------------------------
------------------------------------------------------------------------------ peekCharLL    Low Level Character Scanning, sneak a peek at the next ------------------------------------------------------------------------------
------------------------------------------------------------------------------ nextChar     for pattern scanning.  At this level, we handle stripping ------------------------------------------------------------------------------
------------------------------------------------------------------------------ scanProp   Construct a UnicodeSet from the text at the current scan ------------------------------------------------------------------------------
------------------------------------------------------------------------------ scanPosixProp   Construct a UnicodeSet from the text at the current scan ------------------------------------------------------------------------------
SetEval   Part of the evaluation of [set expressions].
----------------------------------------------------------------------------- Constructor and Destructor -----------------------------------------------------------------------------
init()   common initialization for use by all constructors.
init2()   Common initialization for use by RegexMatcher constructors, part 2.
appendTail, UText mode
-------------------------------------------------------------------------------- findUsingChunk() -- like find(), but with the advance knowledge that the --------------------------------------------------------------------------------
Return immutable shallow clone
Return deep (mutable) clone Technology Preview (as an API), but note that the UnicodeString API is implemented using this function.
-------------------------------------------------------------------------------- appendGroup() -- currently internal only, appends a group to a UText rather --------------------------------------------------------------------------------
-------------------------------------------------------------------------------- getInput() -- like inputText(), but makes a clone or copies into another UText --------------------------------------------------------------------------------
BEGIN android-added Removed this function after Android upgrad to ICU4.8. -------------------------------------------------------------------------------- --------------------------------------------------------------------------------
split, UText mode
-------------------------------------------------------------------------------- IncrementTime     This function is called once each TIMER_INITIAL_VALUE state --------------------------------------------------------------------------------
-------------------------------------------------------------------------------- ReportFindProgress     This function is called once for each advance in the target --------------------------------------------------------------------------------
-------------------------------------------------------------------------------- MatchAt      This is the actual matching engine. --------------------------------------------------------------------------------
-------------------------------------------------------------------------------- MatchChunkAt   This is the actual matching engine. Like MatchAt, but with the --------------------------------------------------------------------------------
Factory method
-------------------------------------------------------------------------- Copy Constructor        Note:  This is a rather inefficient implementation, --------------------------------------------------------------------------
-------------------------------------------------------------------------- zap            Delete everything owned by this RegexPattern. --------------------------------------------------------------------------
-------------------------------------------------------------------------- operator ==   (comparison)    Consider to patterns to be == if the --------------------------------------------------------------------------
--------------------------------------------------------------------- matcher(UnicodeString, err) ---------------------------------------------------------------------
matcher, UText mode
--------------------------------------------------------------------- matches        Convenience function to test for a match, starting ---------------------------------------------------------------------
matches, UText mode
public get and set methods ----------------------------------------
operator overloading ----------------------------------------------
public methods ----------------------------------------------------
protected constructors and destructors -----------------------------
protected methods ------------------------------------------------------
class SimpleTimeZone
Internal construction method.
Called by TimeZone::createDefault(), then clone() inside a Mutex - be careful.
Sets the daylight savings starting year, that is, the year this time zone began observing its specified daylight savings time rules.  The time zone is considered not to observe daylight savings time prior to that year; SimpleTimeZone doesn't support historical daylight-savings-time rules.
Sets the daylight savings starting rule. For example, in the U.S., Daylight Savings Time starts at the first Sunday in April, at 2 AM in standard time. Therefore, you can set the start rule by calling: setStartRule(TimeFields.APRIL, 1, TimeFields.SUNDAY, 2*60*60*1000); The dayOfWeekInMonth and dayOfWeek parameters together specify how to calculate the exact starting date.  Their exact meaning depend on their respective signs, allowing various types of rules to be constructed, as follows:<ul> <li>If both dayOfWeekInMonth and dayOfWeek are positive, they specify the <li>If dayOfWeek is positive and dayOfWeekInMonth is negative, they specify <li>If dayOfWeek is zero and dayOfWeekInMonth is positive, dayOfWeekInMonth <li>If dayOfWeek is zero and dayOfWeekInMonth is negative, dayOfWeekInMonth <li>If dayOfWeek is negative and dayOfWeekInMonth is positive, they specify the <li>If dayOfWeek and DayOfWeekInMonth are both negative, they specify the eg, 0 for January. day-of-week-in-month. Please see the member description for an example. the member description for an example. description for an example.
Sets the daylight savings ending rule. For example, in the U.S., Daylight Savings Time ends at the last (-1) Sunday in October, at 2 AM in standard time. Therefore, you can set the end rule by calling: setEndRule(TimeFields.OCTOBER, -1, TimeFields.SUNDAY, 2*60*60*1000); Various other types of rules can be specified by manipulating the dayOfWeek and dayOfWeekInMonth parameters.  For complete details, see the documentation for setStartRule(). eg, 0 for January. day-of-week-in-month. See setStartRule() for a complete explanation. for a complete explanation. description for an example.
Overrides TimeZone Queries if the given date is in Daylight Savings Time.
Not for public consumption; used by DateFormat
Not for public consumption; used by DateFormat.  This constructor never fails.  If the resource data is not available, it uses the the last resort symbols.
Initialize the fields we use to disambiguate ambiguous years. Separate so we can call it from readObject().
Define one-century window into which to disambiguate dates using two-digit years. Make public in JDK 1.2.
Return true if the given format character, occuring count times, represents a numeric field.
Private member function that converts the parsed date strings into timeFields. Returns -start (for ParsePosition) if failed. indicating matching failure, otherwise.
Parse an integer using fNumberFormat.  This method is semantically const, but actually may modify fNumberFormat.
Parse an integer using fNumberFormat up to maxDigits.
Create a collation key from a bit array.
Implement UnicodeMatcher
Remove any match info.  This must be called before performing a set of matches with this segment.
Union the set of all characters that may output by this object into the given set.
Construct a StringReplacer that sets the emits the given output text and sets the cursor to the given position. replace() method is called.  May contain stand-in characters that represent nested replacers. the replace() method stand-in characters to UnicodeReplacer objects
Construct a StringReplacer that sets the emits the given output text and does not modify the cursor. replace() method is called.  May contain stand-in characters that represent nested replacers. stand-in characters to UnicodeReplacer objects
Copy constructor.
Implement UnicodeFunctor
public constructors and destructors -----------------------------------
operator overloading ---------------------------------------------
public get and set methods ----------------------------------------
public methods ----------------------------------------------------
protected method -------------------------------------------------
Copy constructor, aliasing, not write-through
not aliasing, not write-through
RuleBasedCollator public destructor -----------------------------------
RuleBaseCollator public methods ---------------------------------------
aliasing, not write-through
aliasing, not write-through
Create a CollationElementIterator object that will iterate over the elements in a string, using the collation rules defined in this RuleBasedCollator
Return a string representation of this collator's rules. The string can later be passed to the constructor that takes a UnicodeString argument, which will construct a collator that's functionally identical to this one. You can also allow users to edit the string in order to change the collation data, or you can print it out for inspection, or whatever.
Compare two strings using this collator
Retrieve a collation key for the specified string. The key can be compared with other collation keys using a bitwise comparison (e.g. memcmp) to find the ordering of their respective source strings. This is handy when doing a sort, where each sort key must be compared many times. The basic algorithm here is to find all of the collation elements for each character in the source string, convert them to an ASCII representation, and put them into the collation key.  But it's trickier than that. Each collation element in a string has three components: primary ('A' vs 'B'), secondary ('u' vs '\u00FC'), and tertiary ('A' vs 'a'), and a primary difference at the end of a string takes precedence over a secondary or tertiary difference earlier in the string. To account for this, we put all of the primary orders at the beginning of the string, followed by the secondary and tertiary orders. Each set of orders is terminated by nulls so that a key for a string which is a initial substring of another key will compare less without any special case. Here's a hypothetical example, with the collation element represented as a three-digit number, one digit for primary, one for secondary, etc. String:              A     a     B    \u00C9 Collation Elements: 101   100   201  511 Collation Key:      1125<null>0001<null>1011<null> To make things even trickier, secondary differences (accent marks) are compared starting at the *end* of the string in languages with French secondary ordering. But when comparing the accent marks on a single base character, they are compared from the beginning. To handle this, we reverse all of the accents that belong to each base character, then we reverse the entire string of secondary orderings at the end.
Return the maximum length of any expansion sequences that end with the specified comparison order.
Create a hash code for this collation. Just hash the main rule table -- that should be good enough for almost any use.
return the locale of this collator
RuleBaseCollatorNew private constructor ----------------------------------
Given a pointer to an open "zoneinfo" resource, load up the Olson meta-data. Return TRUE if successful.
Load up the Olson meta-data. Return TRUE if successful.
Fetch a specific zone by name.  Replaces the getByKey call.
Given an ID, open the appropriate resource for the given time zone. Dereference aliases if necessary.
Initialize DEFAULT_ZONE from the system default time zone.  The caller should confirm that DEFAULT_ZONE is NULL before calling. Upon return, DEFAULT_ZONE will not be NULL, unless operator new() returns NULL. Must be called OUTSIDE mutex.
This is the default implementation for subclasses that do not override this method.  This implementation calls through to the 8-argument getOffset() method after suitable computations, and correctly adjusts GMT millis to local millis when necessary.
Copy constructor.
Constructs a transliterator.
Copy constructor.
Constructs a transliterator.
Copy constructor.
Return TRUE if the given UTransPosition is valid for text of the given length.
Default constructor. <tt>filter.contains()</tt> returns <tt>FALSE</tt> will not be altered by this transliterator.  If <tt>filter</tt> is <tt>null</tt> then no filtering is applied.
Copy constructor.
Transliterates a segment of a string.  <code>Transliterator</code> API. <= limit</code>. <= text.length()</code>.
Transliterates an entire string in place. Convenience method.
Transliterates the portion of the text buffer that can be transliterated unambiguosly after new text has been inserted, typically as a result of a keyboard event.  The new text in <code>insertion</code> will be inserted into <code>text</code> at <code>index.contextLimit</code>, advancing <code>index.contextLimit</code> by <code>insertion.length()</code>. Then the transliterator will try to transliterate characters of <code>text</code> between <code>index.start</code> and <code>index.contextLimit</code>.  Characters before <code>index.start</code> will not be changed. <p>Upon return, values in <code>index</code> will be updated. <code>index.contextStart</code> will be advanced to the first character that future calls to this method will read. <code>index.start</code> and <code>index.contextLimit</code> will be adjusted to delimit the range of text that future calls to this method may change. <p>Typical usage of this method begins with an initial call with <code>index.contextStart</code> and <code>index.contextLimit</code> set to indicate the portion of <code>text</code> to be transliterated, and <code>index.start == index.contextStart</code>. Thereafter, <code>index</code> can be used without modification in future calls, provided that all changes to <code>text</code> are made via this method. <p>This method assumes that future calls may be made that will insert new text into the buffer.  As a result, it only performs unambiguous transliterations.  After the last call to this method, there may be untransliterated text that is waiting for more input to resolve an ambiguity.  In order to perform these pending transliterations, clients should call {@link #finishKeyboardTransliteration} after the last call to this method has been made. <ul><li><code>index.contextStart</code>: the beginning index, inclusive; <code>0 <= index.contextStart <= index.contextLimit</code>. <li><code>index.contextLimit</code>: the ending index, exclusive; <code>index.contextStart <= index.contextLimit <= text.length()</code>. <code>insertion</code> is inserted at <code>index.contextLimit</code>. <li><code>index.start</code>: the next character to be considered for transliteration; <code>index.contextStart <= index.start <= index.contextLimit</code>.  Characters before <code>index.start</code> will not be changed by future calls to this method.</ul> transliterated into the translation buffer at <code>index.contextLimit</code>.  If <code>null</code> then no text is inserted. is invalid
Transliterates the portion of the text buffer that can be transliterated unambiguosly after a new character has been inserted, typically as a result of a keyboard event.  This is a convenience method; see {@link #transliterate(Replaceable, int[], String)} for details. untransliterated text #transliterate(Replaceable, int[], String)}. transliterated into the translation buffer at <code>index.contextLimit</code>.
Transliterates the portion of the text buffer that can be transliterated unambiguosly.  This is a convenience method; see {@link #transliterate(Replaceable, int[], String)} for details. untransliterated text #transliterate(Replaceable, int[], String)}.
Finishes any pending transliterations that were waiting for more characters.  Clients should call this method as the last call after a sequence of one or more calls to <code>transliterate()</code>. untransliterated text. #transliterate}
This internal method does keyboard transliteration.  If the 'insertion' is non-null then we append it to 'text' before proceeding.  This method calls through to the pure virtual framework method handleTransliterate() to do the actual work.
This method breaks up the input text into runs of unfiltered characters.  It passes each such run to <subclass>.handleTransliterate().  Subclasses that can handle the filter logic more efficiently themselves may override this method. All transliteration calls in this class go through this method.
Method for subclasses to use to set the maximum context length.
Returns a programmatic identifier for this transliterator. If this identifier is passed to <code>getInstance()</code>, it will return this object, if it has been registered.
Returns a name for this transliterator that is appropriate for display to the user in the default locale.  See {@link #getDisplayName(Locale)} for details.
Returns a name for this transliterator that is appropriate for display to the user in the given locale.  This name is taken from the locale resource data in the standard manner of the <code>java.text</code> package. <p>If no localized names exist in the system resource bundles, a name is synthesized using a localized <code>MessageFormat</code> pattern from the resource data.  The arguments to this pattern are an integer followed by one or two strings.  The integer is the number of strings, either 1 or 2. The strings are formed by splitting the ID for this transliterator at the first TARGET_SEP.  If there is no TARGET_SEP, then the entire ID forms the only string. localized.
Returns the filter used by this transliterator, or <tt>null</tt> if this transliterator uses no filter.  Caller musn't delete the result!
Returns the filter used by this transliterator, or <tt>NULL</tt> if this transliterator uses no filter.  The caller must eventually delete the result.  After this call, this transliterator's filter is set to <tt>NULL</tt>.
Changes the filter used by this transliterator.  If the filter is set to <tt>null</tt> then no filtering will occur. <p>Callers must take care if a transliterator is in use by multiple threads.  The filter should not be changed by one thread while another thread may be transliterating.
Returns this transliterator's inverse.  See the class documentation for details.  This implementation simply inverts the two entities in the ID and attempts to retrieve the resulting transliterator.  That is, if <code>getID()</code> returns "A-B", then this method will return the result of <code>getInstance("B-A")</code>, or <code>null</code> if that call fails. <p>This method does not take filtering into account.  The returned transliterator will have no filter. <p>Subclasses with knowledge of their inverse may wish to override this method. exact, of this transliterator, or <code>null</code> if no such transliterator is registered.
Create a transliterator from a basic ID.  This is an ID containing only the forward direction source, target, and variant. invalid.
For public consumption
To be called only by Transliterator subclasses that are called to register themselves by initializeRegistry().
To be called only by Transliterator subclasses that are called to register themselves by initializeRegistry().
Registers a instance <tt>obj</tt> of a subclass of <code>Transliterator</code> with the system.  This object must implement the <tt>clone()</tt> method.  When <tt>getInstance()</tt> is called with an ID string that is equal to <tt>obj.getID()</tt>, then <tt>obj.clone()</tt> is returned. <code>Transliterator</code> that defines <tt>clone()</tt>
Unregisters a transliterator or class.  This may be either a system transliterator or a user transliterator or class.
== OBSOLETE - remove in ICU 3.4 == Return the number of IDs currently registered with the system. To retrieve the actual IDs, call getAvailableID(i) with i from 0 to countAvailableIDs() - 1.
== OBSOLETE - remove in ICU 3.4 == Return the index-th available ID.  index must be between 0 and countAvailableIDs() - 1, inclusive.  If index is out of range, the result of getAvailableID(0) is returned.
Method for subclasses to use to obtain a character in the given string, with filtering. level.  This method will be removed Dec 31 2001.
If the registry is initialized, return TRUE.  If not, initialize it and return TRUE.  If the registry cannot be initialized, return FALSE (rare). IMPORTANT: Upon entry, registryMutex must be LOCKED.  The entire initialization is done with the lock held.  There is NO REASON to unlock, since no other thread that is waiting on the registryMutex cannot itself proceed until the registry is initialized.
Release all static memory held by transliterator.  This will necessarily invalidate any rule-based transliterators held by the user, because RBTs hold pointers to common data objects.
Protocol: for(const UnicodeString& s(spec.get());
Caller must call DEBUG_setup first.  Return index of given Entry, if it is in use (not deleted yet), or -1 if not found.
Track object creation
Track object deletion
Track object usage
---------------------------------------------------------------------- class TransliteratorRegistry: Basic public API ----------------------------------------------------------------------
---------------------------------------------------------------------- class TransliteratorRegistry::Enumeration ----------------------------------------------------------------------
Convenience method.  Calls 6-arg registerEntry().
Register an entry object (adopted) with the given ID, source, target, and variant strings.
Register a source-target/variant in the specDAG.  Variant may be empty, but source and target must not be.  If variant is empty then the special variant NO_VARIANT is stored in slot zero of the UVector of variants.
Remove a source-target/variant from the specDAG.
Attempt to find a source-target/variant in the dynamic registry store.  Return 0 on failure. Caller does NOT own returned object.
Attempt to find a source-target/variant in the static locale resource store.  Do not perform fallback.  Return 0 on failure. On success, create a new entry object, register it in the dynamic store, and return a pointer to it, but do not make it public -- just because someone requested something, we do not expand the available ID list (or spec DAG). Caller does NOT own returned object.
Attempt to find an entry in a single resource bundle.  This is a one-sided lookup.  findInStaticStore() performs up to two such lookups, one for the source, and one for the target. Do not perform fallback.  Return 0 on failure. On success, create a new Entry object, populate it, and return it. The caller owns the returned object.
Convenience method.  Calls 3-arg find().
Top-level find method.  Attempt to find a source-target/variant in either the dynamic or the static (locale resource) store.  Perform fallback. Lookup sequence for ss_SS_SSS-tt_TT_TTT/v: ss_SS_SSS-tt_TT_TTT/v -- in hashtable ss_SS_SSS-tt_TT_TTT/v -- in ss_SS_SSS (no fallback) Here * matches the first variant listed. Caller does NOT own returned object.  Return 0 on failure.
Given an Entry object, instantiate it.  Caller owns result.  Return 0 on failure. Return a non-empty aliasReturn value if the ID points to an alias. We cannot instantiate it ourselves because the alias may contain filters or compounds, which we do not understand.  Caller should make aliasReturn empty before calling. The entry object is assumed to reside in the dynamic store.  It may be modified.
Parse a global filter of the form "[f]" or "([f])", depending on 'withParens'. the first character to parse.  On output, the position after the last character parsed. withParens is 0, then parens are disallowed.  If it is 1, then parens are requires.  If it is -1, then parens are optional, and the return result will be set to 0 or 1. added to the canonID, either at the end, if dir is FORWARD, or at the start, if dir is REVERSE.  The pattern will be enclosed in parentheses if appropriate, and will be suffixed with an ID_DELIM character.  May be NULL. indicates a successful parse, regardless of whether the filter applies to the given direction.  The caller should discard it if withParens != (dir == REVERSE).
Parse a compound ID, consisting of an optional forward global filter, a separator, one or more single IDs delimited by separators, an an optional reverse global filter.  The separator is a semicolon.  The global filters are UnicodeSet patterns.  The reverse global filter must be enclosed in parentheses. consisting of canonical IDs for all elements, as returned by parseSingleID(), separated by semicolons.  Previous contents are discarded. objects representing the parsed IDs.  Previous contents are discarded. a newly created global filter for this ID in this direction, or NULL if there is none. id is consumed without syntax error.
Convert the elements of the 'list' vector, which are SingleID objects, into actual Transliterator objects.  In the course of this, some (or all) entries may be removed.  If all entries are removed, the NULL transliterator will be added. Delete entries with empty basicIDs; these are generated by elements like "(A)" in the forward direction, or "A()" in the reverse.  THIS MAY RESULT IN AN EMPTY VECTOR.  Convert SingleID entries to actual transliterators. of one or more Transliterators. there are empty items, like "(Lower)", with indices less than insertIndex.
Parse an ID into pieces.  Take IDs of the form T, T/V, S-T, S-T/V, or S/V-T.  If the source is missing, return a source of ANY. isSourcePresent.  If the source is not present, ANY will be given as the source, and isSourcePresent will be NULL.  Otherwise isSourcePresent will be non-NULL.  The target may be empty if the id is not well-formed.  The variant may be empty.
Given source, target, and variant strings, concatenate them into a full ID.  If the source is empty, then "Any" will be used for the source, so the ID will always be of the form s-t/v or s-t.
Register two targets as being inverses of one another.  For example, calling registerSpecialInverse("NFC", "NFD", TRUE) causes Transliterator to form the following inverse relationships: <pre>NFC => NFD Any-NFC => Any-NFD NFD => NFC Any-NFD => Any-NFC</pre> (Without the special inverse registration, the inverse of NFC would be NFC-Any.)  Note that NFD is shorthand for Any-NFD, but that the presence or absence of "Any-" is preserved. <p>The relationship is symmetrical; registering (a, b) is equivalent to registering (b, a). <p>The relevant IDs must still be registered separately as factories or classes. <p>Only the targets are specified.  Special inverses always have the form Any-Target1 <=> Any-Target2.  The target should have canonical casing (the casing desired to be produced when an inverse is formed) and should contain no whitespace or other extraneous characters. Any-target.getInverse() => Any-inverseTarget as well, that is, Any-inverseTarget.getInverse() => Any-target
Glue method to get around access problems in C++.  This would ideally be inline but we want to avoid a circular header dependency.
Initialize static memory.
Free static memory.
when adding to this list, look for all occurrences (in project) of CJK_C_BASE and CJK_C_LIMIT, etc. to check for code that needs changing!!!!
Set up to generate implicits. Maintenance Note:  this function may end up being called more than once, due
This function handles the special CEs like contractions, expansions, surrogates, Thai. It is called by both getPrevCE
This function tries to get the size of a sortkey. It will be invoked if the size of resulting buffer is 0 or if we run out of space while making a sortkey and want to return ASAP
This is a trick string compare function that goes in and uses sortkeys to compare It is used when compare gets in trouble and needs to bail out
Takes two CEs (lead and continuation) and compares them as CEs should be compared: primary vs. primary, secondary vs. secondary tertiary vs. tertiary
uprv_cnttab_open(CompactEIntArray *mapping, UErrorCode *status) {
Looks for the maximum length of all expansion sequences ending with the same collation element. The size required for maxexpansion and maxsize is returned if the arrays are too small.
Sets the maximum length of all jamo expansion sequences ending with the same collation element. The size required for maxexpansion and maxsize is returned if the arrays are too small.
1. to the UnsafeCP hash table, add all chars with combining class != 0 2. build combining marks table for all chars with combining class != 0
Note regarding surrogate handling: We are interested only in the single or leading surrogates in a contraction. If a surrogate is somewhere else in the contraction, it is going to be handled as a pair of code units, as it doesn't affect the performance AND handling surrogates specially would complicate code way too much.
void uprv_uca_getMaxExpansionJamo(CompactEIntArray       *mapping,
This is a debug function to print the contents of a trie. It is used in conjuction with the code around utrie_unserialize call
Test whether a character is potentially "unsafe" for use as a collation starting point.  Unsafe chars are those with combining class != 0 plus those that are the 2nd thru nth character in a contraction sequence. Function is in header file because it's used in both collation and string search, and needs to be inline for performance.
Collation Reordering
This doesn't need to be thread safe. It's for u_cleanup only.
Modify the given locale name by removing the rightmost _-delimited element.  If there is none, empty the string ("" == root). NOTE: The string "root" is not recognized; do not use it. root ("").
Comparason function used in quick sort.
Verify that fmt is a SimpleDateFormat. Invalid error if not.
Verify that fmt is a RelativeDateFormat. Invalid error if not.
Factory methods.  Ignore the context.
Constructor.  Takes the encoded spec array.
Copy constructor.
Constructs a transliterator.
Implements {@link Transliterator#handleTransliterate}. Ignore isIncremental since we don't need the context, and we work on codepoints.
---------------------------------------------------------------------------------------- validateRE    Do boilerplate style checks on API function parameters. ----------------------------------------------------------------------------------------
Move a character to an output buffer, with bounds checking on the index.
appendReplacement, the actual implementation.
constructors and destructor -------------------------------------------
set and get methods --------------------------------------------------
miscellanous methods --------------------------------------------------
If a direction switch is required, we'll count the number of ces till the beginning of the collation element iterator and iterate forwards that number of times. This is so that we get to the correct point within the string to continue the search in. Imagine when we are in the middle of the normalization buffer when the change in direction is request. arrrgghh.... After searching the offset within the collation element iterator will be shifted to the start of the match. If a match is not found, the offset would have been set to the end of the text string in the collation element iterator. Okay, here's my take on normalization buffer. The only time when there can be 2 matches within the same normalization is when the pattern is consists of all accents. But since the offset returned is from the text string, we should not confuse the caller by returning the second match within the same normalization buffer. If we do, the 2 results will have the same match offsets, and that'll be confusing. I'll return the next match that doesn't fall within the same normalization buffer. Note this does not affect the results of matches spanning the text and the normalization buffer. The position to start searching is taken from the collation element iterator. Callers of this API would have to set the offset in the collation element iterator before using this method.
TODO: add a reset or init function so that allocated
Get the CE with the specified index. Index must be in the range where n is the largest index to have been fetched by some previous call to this function. The CE value will be UCOL__PROCESSED_NULLORDER at end of input.
Get the CE with the specified index. Index must be in the range where n is the largest index to have been fetched by some previous call to this function. The CE value will be UCOL__PROCESSED_NULLORDER at end of input.
Find the next break boundary after startIndex. If the UStringSearch object has an external break iterator, use that. Otherwise use the internal character break iterator.
Returns TRUE if index is on a break boundary. If the UStringSearch has an external break iterator, test using that, otherwise test using the internal character break iterator.
internal use methods declared in usrchimp.h -----------------------------
A convenience wrapper around the public uspoof_getSkeleton that handles allocating a larger buffer than provided if the original is too small.
Convenience function for converting a UTF-8 input to a UChar * string, including
--------------------------------------------------------------------- buildConfusableData   Compile the source confusable data, as defined by
Comparison function for ordering strings in the string pool. Compare by length first, then, within a group of the same length, by code point order. Conforms to the type signature for a USortComparator in uvector.h
outputData     The confusable data has been compiled and stored in intermediate
addKeyEntry   Construction of the confusable Key and Mapping Values tables.
Copy Constructor, used by the user level clone() function.
Incoming parameter check on Status and the SpoofChecker object
-------------------------------------------------------------------------------------- confusableLookup()    This is the heart of the confusable skeleton generation ---------------------------------------------------------------------------------------
Given a locale (a language), add all the characters from all of the scripts used with that language to the allowedChars UnicodeSet
Convert a text format hex number.  Utility function used by builder code.  Static. Input: UChar *string text.  Output: a UChar32 Input has been pre-checked, and will have no non-hex chars. The number must fall in the code point range of 0..0x10ffff Static Function.
---------------------------------------------------------------------------------------------- class SpoofData Implementation ----------------------------------------------------------------------------------------------
SpoofData::getDefault() - return a wrapper around the spoof data that is
Spoof Data constructor for use from data builder. Initializes a new, empty data area that will be populated later.
reset() - initialize all fields.
---------------------------------------------------------------------------- ScriptSet implementation ----------------------------------------------------------------------------
----------------------------------------------------------------------------- NFKDBuffer Implementation. -----------------------------------------------------------------------------
Extract a regular expression match group into a char * string.
Build the Whole Script Confusable data
Simple fixed digit ASCII number to integer converter
Convert date/time to RFC2445 Date-Time form #1 DATE WITH LOCAL TIME
Convert date/time to RFC2445 Date-Time form #2 DATE WITH UTC TIME
Parse RFC2445 Date-Time form #1 DATE WITH LOCAL TIME and #2 DATE WITH UTC TIME
Convert RFC2445 utc-offset string to milliseconds
Convert milliseconds to RFC2445 utc-offset string
Create a default TZNAME from TZID
Parse individual RRULE On return - month    calculated by BYMONTH-1, or -1 when not found dow      day of week in BYDAY, or 0 when not found wim      day of week ordinal number in BYDAY, or 0 when not found dom      an array of day of month domCount number of availble days in dom (domCount is specifying the size of dom on input) until    time defined by UNTIL attribute or MIN_MILLIS if not available
Create a TimeZoneRule by the RDATE definition
Check if the DOW rule specified by month, weekInMonth and dayOfWeek is equivalent to the DateTimerule.
Convert the rule to its equivalent rule using WALL_TIME mode. This function returns NULL when the specified DateTimeRule is already using WALL_TIME mode.
Write the closing section of the VTIMEZONE definition block
Write a single start time
Write start times defined by a DOM rule using VTIMEZONE RRULE
Write start times defined by a DOW rule using VTIMEZONE RRULE
Write start times defined by a DOW_GEQ_DOM rule using VTIMEZONE RRULE
Called from writeZonePropsByDOW_GEQ_DOM
Write start times defined by a DOW_LEQ_DOM rule using VTIMEZONE RRULE
Write the final time zone rule using RRULE, with no UNTIL attribute
Write the opening section of zone properties
Writes the closing section of zone properties
Write the beggining part of RRULE line
Append the UNTIL attribute after RRULE line
TODO: Range-check timeStyle, dateStyle
TODO: Is just ignoring pos the right thing?
Turns a string of the form "3;2;0" into the grouping UINT needed for NUMBERFMT and CURRENCYFMT. If the string does not end in ";0" then the return value should be multiplied by 10. (e.g. "3" => 30, "3;2" => 320)
TODO: keep locale too?
TODO: cache Locale and NumberFormat? Could keep locale passed to constructor...
Cleanup callback func
ZoneStringFormatCache cleanup callback func
We defer actually building the TextTrieMap node structure until the first time a
buildTrie() - The Trie node structure is needed.  Create it from the data that was
Load only a single zone
Load only a single zone
---------------------------------------------------------------------------- ZoneStrings constructor adopts (and promptly copies and deletes)
ZSFStringPool::adopt()   Put a string into the hash, but do not copy the string data
freeze().   Close the hash table that maps to the pooled strings.
No value:   fValues == NULL               and  fHasValuesVector == FALSE One value:  fValues == value              and  fHasValuesVector == FALSE >=2 values: fValues == UVector of values  and  fHasValuesVector == TRUE
Returns an array of the parsed argument type given in the format string.
private function used for buffering input
Input: characters Output: characters, char indices, tags Returns: output character count
"glyphs", "indices" -> glyphs, indices
FIXME: should look at the format too... maybe have a sub-class for it?
Note: according to the OpenType Spec. v 1.4, the entries in the Feature List Table are sorted alphabetically by feature tag; however, there seem to be some fonts which have an unsorted list; that's why the binary search is #if 0'd out and replaced by a linear search. Also note: as of ICU 2.6, this method isn't called anyhow...
This is basically prevInternal except that it doesn't take a delta argument, and it doesn't filter out 0xFFFE glyphs.
apply 'mort' table
apply positional tables
Input: characters, tags Output: glyphs, char indices
Handles Al-Lakuna in Sinhala split vowels.
This implementation has support for only one subtable, so if the font has multiple subtables, only the first will be used.  If this turns out to be a problem in practice we should add it. This also supports only version 0 of the kern table header, only Apple supports the latter. This implementation isn't careful about the kern table flags, and might invoke kerning when it is not supposed to.  That too I'm leaving for a bug fix. TODO: support multiple subtables TODO: respect header flags
Process the glyph positions.  The positions array has two floats for each glyph, plus a trailing pair to mark the end of the last glyph.
Below we define how a character in the input string is either in the khmerCharClasses table (in which case we get its type back), a ZWJ or ZWNJ (two characters that may appear within the syllable, but are not in the table) we also get their type back, or an unknown object in which case we get _xx (CC_RESERVED) back
Given an input string of characters and a location in which to start looking calculate, using the state table, which one is the last character of the syllable that starts in the starting position.
This is the real reordering function as applied to the Khmer language
This is here to get it out of LEGlyphFilter.h. No particular reason to put it here, other than this is a good central location...
Copy the glyphs into caller's (32-bit) glyph array, OR in extraBits
Input: glyphs Output: positions
Input: characters, font? Output: glyphs, positions, char indices Returns: number of glyphs
FIXME: This might get called more than once, for various reasons. Is testing for pre-existing glyph and charIndices arrays good enough?
FIXME: do we want to initialize the positions to [0, 0]?
FIXME: do we want to initialize the aux data to NULL?
Move a glyph to a different position in the LEGlyphStorage ( used for Indic v2 processing )
Glue code for existing stable API
FIXME: add error checking?
This method does the byte swap required on little endian platforms to correctly access a (16-bit) word.
This method does the byte swapping required on little endian platforms to correctly access a (32-bit) long.
Input: characters, tags Output: glyphs, char indices
apply GPOS table, if any
Finds the high bit by binary searching through the bits in n.
Straight insertion sort from Knuth vol. III, pg. 81
Input: characters (0..max provided for context) Output: glyphs, char indices Returns: the glyph count NOTE: this assumes that ThaiShaping::compose will allocate the outChars array...
This is the same as LayoutEngline::adjustGlyphPositions() except that it doesn't call adjustMarkGlyphs
Below we define how a character in the input string is either in the tibetanCharClasses table (in which case we get its type back), or an unknown object in which case we get _xx (CC_RESERVED) back
This is the real reordering function as applied to the Tibetan language
How to deal with composite fonts: Don't store the client's FontRuns; we'll need to compute sub-font FontRuns using Doug's LEFontInstance method. Do that by intersecting the client's FontRuns with fScriptRuns. Use that to compute fFontRuns, and then intersect fFontRuns, fScriptRuns and fLevelRuns. Doing it in this order means we do a two-way intersection and a three-way intersection. An optimization would be to only do this if there's at least one composite font... Other notes: * Return the sub-fonts as the run fonts... could keep the mapping back to the client's FontRuns but that probably makes it more complicated of everyone... * Take the LineInfo and LineRun types from Paragraph and use them here, incorporate them into the API. * Might want to change the name of the StyleRun type, and make a new one that holds fonts, scripts and levels?
TODO - dummy implementation for right now...
Print each element in order:
Print each element in reverse order:
Print the first element
Print the last element
Print the element at a specified position
Creating and using text boundaries
Print each element in order:
Print each element in reverse order:
Print first element
Print last element
Print the element at a specified position
Creating and using text boundaries
Get a set of DateFormat symbols of a given type. lowestIndex is the index of the first symbol to fetch. (e.g. it will be one to fetch day names, since Sunday is day 1 *not* day 0.) firstIndex is the index of the symbol to place first in the output array. This is used when fetching day names in locales where the week doesn't start on Sunday.
Free the symbols allocated by get_symbols().
Print a ustring to the specified FILE* in the default codepage
Note: don't use 'k' or 'K' because we might be on EBCDIC
Creating and using text boundaries
processOptions()  Function to read the command line options.
ICU string comparison
Creates a collator
Main   --  process command line, read in and pre-process the test file,
Print a ustring to the specified FILE* in the default codepage
Creating and using text boundaries
If the ID supplied to TimeZone is not a valid system ID, TimeZone::createTimeZone() will return a GMT zone object.  In order to detect this error, we check the ID of the returned zone against the ID we requested.  If they don't match, we fail with an error.
If the ID supplied to TimeZone is not a valid system ID, TimeZone::createTimeZone() will return a GMT zone object.  In order to detect this error, we check the ID of the returned zone against the ID we requested.  If they don't match, we fail with an error.
If the ID supplied to TimeZone is not a valid system ID, TimeZone::createTimeZone() will return a GMT zone object.  In order to detect this error, we check the ID of the returned zone against the ID we requested.  If they don't match, we fail with an error.
If the ID supplied to TimeZone is not a valid system ID, TimeZone::createTimeZone() will return a GMT zone object.  In order to detect this error, we check the ID of the returned zone against the ID we requested.  If they don't match, we fail with an error.
If the ID supplied to TimeZone is not a valid system ID, TimeZone::createTimeZone() will return a GMT zone object.  In order to detect this error, we check the ID of the returned zone against the ID we requested.  If they don't match, we fail with an error.
Verify that a UErrorCode is successful; exit(1) if not
Append a hex string to the target
Replace nonprintable characters with unicode escapes
Print the given string to stdout
Finds the high bit by binary searching through the bits in value.
This is the really stupid version that doesn't look in any other font for the character... It would be better to also look in the "DEFAULT:" font. Another thing to do would be to look in all the fonts in some order, script code order being the most obvious...
Can't get units per EM without knowing which sub-font, so return a value that will make units == points
Can't get a scale factor without knowing the sub-font, so return 1.0.
Can't get a scale factor without knowing the sub-font, so return 1.0
Corporation and others.  All Rights Reserved.
Read the text from a file. The text must start with a Unicode Byte Order Mark (BOM) so that we know what order to read the bytes in.
int main(int argc, const char * const argv[]) {
Very simple example code - sticks a sortkey in the buffer Not much error checking
Very simple example code - sticks a sortkey in the buffer Not much error checking
Verify that a UErrorCode is successful; exit(1) if not
Append a hex string to the target
Replace nonprintable characters with unicode escapes
Print the given string to stdout
Sample code for the C++ API to NumberFormat.
Verify that a UErrorCode is successful; exit(1) if not
Append a hex string to the target
Replace nonprintable characters with unicode escapes
Print the given string to stdout using the UTF-8 converter
Create a display string for a formattable
processOptions()  Function to read the command line options.
Creates a collator
Creates a string search
Main   --  process command line, read in and pre-process the test file,
Remove accents from a character using Normalizer.
Implement Transliterator API
Print a UChar if possible, in seven characters.
21  - C, callback, with clone and debug
Test safe clone callback
main()   This one function is all of the application code.
------------------------------------------------------------------------------------------ main          for ugrep ------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------ doOptions          Run through the command line options, and set ------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------ nextLine           Advance the line index variables, starting at the ------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------ printMatch         Called when a matching line has been located. ------------------------------------------------------------------------------------------
sample code for Unicode strings in C ------------------------------------
sample code for case mappings with C APIs --------------------------------
sample code for case mappings with C++ APIs ------------------------------
this function makes a string with representation of a sortkey
Return an integer array containing all of the collation orders returned by calls to next on the specified iterator
currently not used with options
Tests the [variable top] tag in rule syntax. Since the default [alternate] tag has the value shifted, any codepoints before [variable top] should give a primary ce of 0.
Tests surrogate support. NOTE: This test used \\uD801\\uDC01 pair, which is now assigned to Desseret Therefore, another (unassigned) code point was used for this test.
next two function is modified from "i18n/ucol.cpp" to avoid include "ucol_imp.h"
end of  avoid include "ucol_imp.h"
We don't have default rules, at least not in the previous sense
Test RuleBasedCollator and getRules
---------------------------------------------------------------------------- Tests the UCollatorElements API.
j1865 reports that if a shorter buffer is passed to to get sort key, a buffer overrun happens in some cases. This test tries to check this.
Open a break iterator from char * rules.  Take care of conversion
TestBreakIteratorRules - Verify that a break iterator can be created from
TestsBreakIteratorStatusVals()   Test the ubrk_getRuleStatusVec() funciton
static void TestBreakIteratorUText(void);
regression tests ---------------------------------------------------------
arabic shaping -----------------------------------------------------------
helpers ------------------------------------------------------------------
return a string with characters according to the desired directional properties
------------------------------------------------------ Testing the getMillis, setMillis, setDate and setDateTime functions extensively
----------------------------------------------------------- Confirm the functioning of the calendar field related functions.
------------------------------------- Execute adding and rolling in Calendar extensively,
------------------------------------------------------ Testing the Limits for various Fields of Calendar
Test that the days of the week progress properly when add is called repeatedly for increments of 24 days.
Confirm that the offset between local time and GMT behaves as expected.
Test the converter alias API, specifically the fuzzy matching of alias names and the alias table integrity.  Make sure each converter has at least one alias (itself), and that its listed aliases map back to itself.  Check some hard-coded UTF-8 and ISO_2022 aliases to make sure they work.
Test safe clone callback
jitterbug 932: test chunking boundary conditions in See discussions on the icu mailing list in 2001-April with the subject "converter 'flush' question". Bug report and test code provided by Edward J. Batutis.
bug2: pre-flighting loop bug: simple overflow causes bug
bug3: when the characters expand going from source to target codepage
get some character that can be converted and convert it
Test illegal UTF-8 input.
Internal functions used
Get the default converter. Copy its name. Put it back.
Testing the DateFormat API
Testing udat_getSymbols() and udat_setSymbols() and udat_countSymbols()
Test DateFormat(Calendar) API
INTERNAL FUNCTIONS USED N.B.:  use idx instead of index to avoid 'shadow' warnings in strict mode.
Support for TestExtremeDates (below). Test a single date to see whether udat_format handles it properly.
Support for TestExtremeDates (below). Recursively test between 'small' and 'large', up to the depth limit specified by EXTREME_DATES_DEPTH.
For certain large dates, udat_format crashes on MacOS.  This test attempts to reproduce this problem by doing a recursive logarithmic binary search of a predefined interval (from 'small' to 'large'). The limit of the search is given by EXTREME_DATES_DEPTH, above. *The search has to be logarithmic, not linear.  A linear search of the range 0..10^30, for example, will find 0.5*10^30, then 0.25*10^30 and 0.75*10^30, etc.  A logarithmic search will find 10^15, then 10^7.5 and 10^22.5, etc.
Test the parsing of 2-digit years.
Verify that strings which contain incomplete specifications are parsed correctly.  In some instances, this means not being parsed at all, and returning an appropriate error.
Verify the behavior of patterns in which digits for different fields run together without intervening separators.
Verify the handling of Czech June and July, which have the unique attribute that one is a proper prefix substring of the other.
Test the handling of single quotes in patterns.
Verify the function of the [s|g]et2DigitYearStart() API.
SimpleDateFormat does not properly parse date strings without delimiters
INTERNAL FUNCTION USED
Internal functions used
FW Registration
Test Functions
This hash function is designed to collide a lot to test key equality resolution.  It only uses the first char.
Wrapper Functions
returns the path to icu/source/data
returns the path to icu/source/data/out
ctest_setICU_DATA  - if the ICU_DATA environment variable is not already
These tests do cleanup and reinitialize ICU in the course of their operation.
Call this once to get a consistent timezone. Use ctest_resetTimeZone to set it back to the original value.
Call this once get back the original timezone
-------------------------------------------------------------------- Time bomb - allows temporary behavior that expires at a given --------------------------------------------------------------------
Test for CollationElementIterator previous and next for the whole set of unicode characters.
Test for CollationElementIterator previous and next for the whole set of unicode characters with normalization on.
Test the incremental normalization
Test for CollationElementIterator.previous()
Test for getOffset() and setOffset()
Test for setText()
Test for getMaxExpansion()
Testing iterators with extremely small buffers
Sniplets of code from genuca
Getting codepoints from a string
Getting collation elements generated from a string
Getting the FractionalUCA.txt file stream
Testing the CEs returned by the iterator
Testing the discontigous contractions
Checking sort key validity for all levels
0*/ {0x30AB, 0x30FC, 0x3042, 0x0000}, 1*/ {0x30AB, 0x30FC, 0x30A2, 0x0000}, 2*/ {0x30AB, 0x30A4, 0x3042, 0x0000}, 3*/ {0x30AB, 0x30A4, 0x30A2, 0x0000}, 6*/ {0x30AD, 0x30FC, 0x3042, 0x0000}, /* Prolonged sound mark sorts BEFORE equivalent vowel (ICU 2.0) 7*/ {0x30AD, 0x30FC, 0x30A2, 0x0000}, /* Prolonged sound mark sorts BEFORE equivalent vowel (ICU 2.0) 4*/ {0x30AD, 0x30A4, 0x3042, 0x0000}, 5*/ {0x30AD, 0x30A4, 0x30A2, 0x0000},
Testing base letters
Testing plain, Daku-ten, Handaku-ten letters
Test Small, Large letters
Test Katakana, Hiragana letters
Test Choo-on kigoo
testing uloc(), uloc_getName(), uloc_getLanguage(), uloc_getVariant(), uloc_getCountry()
testing uloc_getISO3Language(), uloc_getISO3Country(),
Jitterbug 2439 -- markus 20030425 The lookup of display names must not fall back through the default locale because that yields useless results.
test for uloc_getAvialable()  and uloc_countAvilable()
test for u_getDataDirectory, u_setDataDirectory, uloc_getISO3Language
test for uloc_getISOLanguages, uloc_getISOCountries
Jitterbug 4115
Compare two locale IDs.  If they are equal, return 0.  If `string' starts with `prefix' plus an additional element, that is, string == prefix + '_' + x, then return 1.  Otherwise return a value < 0.
not used currently - does not test only prints
Takes two CEs (lead and continuation) and compares them as CEs should be compared: primary vs. primary, secondary vs. secondary tertiary vs. tertiary
Pinyin tonal order
superceded by TestBeforePinyin
superceded by the changes to the lv locale
this test tests the current limitations of the engine it always fail, so it is disabled by default
This is a test for prefix implementation, used by JIS X 4061 collation rules
This test uses data suplied by Masashiko Maedera to test the implementation JIS X 4061 collation order implementation
Contractions should have all their canonically equivalent strings included
This tests also fails
Test for CollationElementIterator previous and next for the whole set of unicode characters with normalization on.
Iterate through the given iterator, checking to see that all the strings in the expected array are present.
Test new API added for separate collation tree.
supercedes TestJ784
function used to create the test patterns for testing Message formatting
Platform dependent test to detect if this type will return NULL when interpreted as a pointer.
Test u_formatMessage() with various test patterns()
test u_formatMessage() with sample patterns
Test umsg_format() and umsg_parse() , format and parse sequence and round trip
Test u_formatMessageWithError() and u_parseMessageWithError() , format and parse sequence and round trip
Test u_formatMessage() and u_parseMessage() , format and parse sequence and round trip
Test message format with a Select option
test message format with a choice option
test u_parseMessage() with various test patterns
Test u_vformatMessage() with various test patterns.
test u_vparseMessage() with various test patterns
Regression test for ICU4C Jitterbug 904
Test Various format patterns
Test the handling of quotes
Test exponential pattern
Test the handling of the currency symbol in patterns.
Test localized currency patterns.
Test localized currency patterns for PREEURO variants.
Test currency "object" (we use this name to match the other C++ test name and the Jave name).  Actually, test ISO currency code support in the C API.
Test proper rounding by the format method.
Testing unum_getDoubleAttribute and  unum_setDoubleAttribute()
Test the functioning of the secondary grouping value.
Test proper handling of rounding modes.
The intltest/NormalizerConformanceTest tests a lot of strings that _are_ normalized, and some that are not. Here we pick some specific cases and test the C API.
copy src to dst with unicode-escapes for values < 0x20 and > 0x7e, null terminate if possible
test Parse int 64
test Number Format API
Test basic ucat.h API
Test to make sure that the U_USING_FALLBACK_ERROR and U_USING_DEFAULT_ERROR are set correctly
Return a random integer i where 0 <= i < n.
Array of our test objects
Test to make sure that the U_USING_FALLBACK_ERROR and U_USING_DEFAULT_ERROR are set correctly
This test will crash if this doesn't work. Results don't need testing.
==================================================== test u_toupper() and u_tolower() ====================================================
test isLetter(u_isapha()) and isDigit(u_isdigit())
Tests for isDefined(u_isdefined)(, isBaseForm(u_isbase()), isSpaceChar(u_isspace()), isWhiteSpace(), u_CharDigitValue()
Tests for isControl(u_iscntrl()) and isPrintable(u_isprint())
u_isJavaIDStart, u_isJavaIDPart, u_isIDStart(), u_isIDPart(), u_isIDIgnorable()
tests for several properties
internal functions ----
API coverage for ucase.c
API coverage for ubidi_props.c
test unpaired surrogates
test surrogate code points
test that string transformation functions permit NULL source pointer when source length==0
Tests  for u_strcat(),u_strcmp(), u_strlen(), u_strcpy(),u_strncat(),u_strncmp(),u_strncpy, u_uastrcpy(),u_austrcpy(), u_uastrncpy();
These tests do cleanup and reinitialize ICU in the course of their operation.
Test the new (ICU 4.6/2010) C API that was added for UTS #46. Just an API test: Functionality is tested via C++ intltest.
Note that this test already makes use of statics, so it's not really
test surrogate behaviour
test various error behaviours
test different convertToUnicode error behaviours
Regression test for utf8 converter
Walk through the available converters
Note that this test already makes use of statics, so it's not really
Test for Jitterbug 778
Callback for TestJitterbug6175, should only get called for empty segment errors
Regular Expression C API Tests
Based on TestRegexCAPI()
BEGIN android-added
Spoof Detction C API Tests
test_format.   Helper function for checking the results of a formatting
closes res but does not free resultsManually
Improve code coverage of UPropsVectors
This test checks to see if the isAcceptable function is being called correctly.
Test whether apps and ICU can each have their own root.res
Basic API test for uset.x
Verifies that the given set contains the characters and strings in inList, and does not contain those in outList.  Also verifies that 'set' is not NULL and that 'ec' succeeds. list of individual strings, in iteration order, followed by sorted list of strings, delimited by {}.  This means we do not test characters '{' or '}' and we do not test strings containing those characters either. inList. case it is ignored.
This only works for invariant BMP chars
Opening all static collators and break iterators
Start opening all static collators and break iterators
Closing all static collators and break iterators
End closing all static collators and break iterators
output UChar strings for printing.
Getting the collator
Getting the breakiterator
This test is for ticket 4038 due to incorrect backward searching when certain patterns have a length > 1
TestAPI   verify that the UText API is accessible from C programs.
Return a random int64_t where U_INT64_MIN <= ran <= U_INT64_MAX.
UReplaceableCallbacks callback
UReplaceableCallbacks callback
UReplaceableCallbacks callback
UReplaceableCallbacks callback
UReplaceableCallbacks callback
UReplaceableCallbacks callback
Test the UReplaceableCallback extractBetween support.  We use a transliterator known to rely on this call.
Collator Class Properties ctor, dtor, createInstance, compare, getStrength/setStrength getDecomposition/setDecomposition, getDisplayName
---------------------------------------------------------------------------- CollationKey -- Tests the CollationKey methods
---------------------------------------------------------------------------- Tests the CollatorElementIterator class. ctor, RuleBasedCollator::createCollationElementIterator(), operator==, operator!=
Test RuleBasedCollator ctor, dtor, operator==, operator!=, clone, copy, and getRules
using Collator::compare;
TODO: Move to a common place (IntlTest?) to avoid duplication with UnicodeTest (ucdtest.cpp).
Note: ubidi_setReorderingOptions(ubidi, UBIDI_OPTION_REMOVE_CONTROLS); does not work for custom BiDi class assignments and anyway also removes LRM/RLM/ZWJ/ZWNJ which is not desirable here. Therefore we just skip the indexes for BiDi controls while comparing with the expected ordering that has them omitted.
======= Utility functions =================
Make sure maximum for HOUR field is 11, not 12.
Check isLeapYear for BC years.
Prove that GregorianCalendar is proleptic (it used to cut off at 45 BC, and not have leap years before then).
GregorianCalendar::equals() ignores cutover date
Bug states that ArrayIndexOutOfBoundsException is thrown by GregorianCalendar::roll() when IllegalArgumentException should be.
GregorianCalendar handling of Dates Long.MIN_VALUE and Long.MAX_VALUE is confusing; unless the time zone has a raw offset of zero, one or the other of these will wrap.  We've modified the test given in the bug report to therefore only check the behavior of a calendar with a zero raw offset zone.
Maximum value for YEAR field wrong. {sfb} this is not directly applicable in C++, since all possible doubles are not representable by our Calendar. In Java, all longs are representable. We can determine limits programmatically Using DBL_MAX is a bit of a hack, since for large doubles Calendar gets squirrely and doesn't behave in any sort of linear fashion (ie years jump around, up/down, etc) for a small change in millis.
This is a bug in the validation code of GregorianCalendar::  As reported, the bug seems worse than it really is, due to a bug in the way the bug report test was written.  In reality the bug is restricted to the DAY_OF_YEAR field. - liu 6/29/98
Week of year is wrong at the start and end of the year.
Rolling and adding across the Gregorian cutover should work as expected. Jitterbug 81.
Test fieldDifference().
Test behavior of fieldDifference around leap years.  Also test a large field difference to check binary search.
Test ms_MY "Malay (Malaysia)" locale.  Bug 1543.
setFirstDayOfWeek and setMinimalDaysInFirstWeek may change the field <=> time mapping, since they affect the interpretation of the WEEK_OF_MONTH or WEEK_OF_YEAR fields.
Make sure that when adding a day, we actually wind up in a different day.  The DST adjustments we use to keep the hour constant across DST changes can backfire and change the day.
class CalendarTest
Test various API methods for API completeness.
This test confirms the correct behavior of add when incrementing through subsequent days.
Test the handling of the day of the week, checking for correctness and for correct minimum and maximum values.
Confirm that cloned Calendar objects do not inadvertently share substructures.
Confirm that the Gregorian cutoff value works as advertised.
Confirm the functioning of the field disambiguation algorithm.
Confirm that the offset between local time and GMT behaves as expected.
The operations of adding and setting should not exhibit pathological dependence on the order of operations.  This test checks for this.
Confirm that adding to various fields works.
Execute adding and rolling in GregorianCalendar extensively,
Test that setting of fields works.  In particular, make sure that all instances of GregorianCalendar don't share a static instance of the fields array.
Verify that the seconds of a Calendar can be zeroed out through the expected sequence of operations.
Verify that a specific sequence of adding and setting works as expected; it should not vary depending on when and whether the get method is called.
Verify that various fields on a known date are set correctly.
Verify that various fields on a known date are set correctly.  In this case, the start of the epoch (January 1 1970).
Test that the days of the week progress properly when add is called repeatedly for increments of 24 days.
Confirm that adding a YEAR and adding a YEAR_WOY work properly for the given Calendar at its current setting.
make sure the ctestfw utilities are in sync with the Calendar
List of interesting locales
Mimics Date.getYear() etc.
Tests for new API for utf-16 support
public default constructor, to get coverage of CharacterIterator()
useful stuff, mostly dummy but testing coverage and subclassability
test data interface -----------------------------------------------------
Compare ucnv_getUnicodeSet() with the set of characters that can be converted.
Splits a UnicodeString
====================================================================== Support methods ======================================================================
--------------------------------------------------------------------------- Test class boilerplate ---------------------------------------------------------------------------
This is an API test, not a unit test.  It doesn't test very many cases, and doesn't try to test the full functionality.  It just calls each function in the class and verifies that it works on a basic level.
This test checks various generic API methods in DecimalFormat to achieve 100% API coverage.
--------------------------------------------------------------------------- Test class boilerplate ---------------------------------------------------------------------------
Translate a Formattable::type enum value to a string, for error message formatting.
------------------------------------------------------------------------------- Read a text data file, convert it from UTF-8 to UChars, and return the data --------------------------------------------------------------------------------
Add better code coverage.
Test that the equals method works correctly.
This test checks various generic API methods in DateFormat to achieve 100% API coverage.
Test hiding of parse() and format() APIs in the Format hierarchy. We test the entire hierarchy, even though this test is located in the DateFormat API test.
Verify the function of the [s|g]et2DigitYearStart() API.
{sfb} not applicable in C++??
This bug really only works in Locale.US, since that's what the locale used for Date.toString() is.  Bug 4138203 reports that it fails on Korean NT; it would actually have failed on any non-US locale.  Now it should work on all locales.
CANNOT REPRODUCE According to the bug report, this test should throw a StringIndexOutOfBoundsException during the second parse.  However, this is not seen.
{sfb} what to do with this one ??
SimpleDateFormat won't parse "GMT"
SimpleDateFormat incorrect handling of 2 single quotes in format()
'z' at end of date format throws index exception in SimpleDateFormat CANNOT REPRODUCE THIS BUG ON 1.2FCS
DateFormat shouldn't parse year "-1" as a two-digit year (e.g., "-1" -> 1999).
j32 {JDK Bug 4210209 4209272} DateFormat cannot parse Feb 29 2000 when setLenient(false)
Return a field of the given date
Return a random uint32_t
Return a random double 0 <= x <= 1.0
Return a random value from -range..+range (closed).
class DateFormatTest
Test written by Wally Wedel and emailed to me.
Test operator==
Test the parsing of 2-digit years.
Verify that returned field position indices are correct.
General parse/format tests.  Add test cases as needed.
Verify that strings which contain incomplete specifications are parsed correctly.  In some instances, this means not being parsed at all, and returning an appropriate error.
Verify the behavior of patterns in which digits for different fields run together without intervening separators.
Verify the behavior of patterns in which digits for different fields run together without intervening separators.
Verify the handling of Czech June and July, which have the unique attribute that one is a proper prefix substring of the other.
Test the handling of 'D' in patterns.
Test the day of year pattern.
Test the handling of single quotes in patterns.
Verify the correct behavior when handling invalid input strings.
Verify the correct behavior when parsing an array of inputs against an array of patterns, with known results.  The results are encoded after the input strings in each row.
Test the parsing of two-digit years.
Test the formatting of time zones.
Test the formatting of time zones.
Test the formatting of dates in different locales.
Test DateFormat(Calendar) API
Test DateFormat's parsing of space characters.  See jitterbug 1916.
Test handling of "HHmmss" pattern.
Test handling of white space.
Test parsing.  Input is an array that starts with the following header: [0]   = pattern string to parse [i+2] with followed by test cases, each of which is 3 array elements: [i]   = pattern, or NULL to reuse prior pattern [i+1] = input string [i+2] = expected parse result (parsed with pattern [0]) If expect parse failure, then [i+2] should be NULL.
Test formatting and parsing.  Input is an array that starts with the following header: [0]   = pattern string to parse [i+2] with followed by test cases, each of which is 3 array elements: [i]   = pattern, or null to reuse prior pattern [i+1] = control string, either "fp", "pf", or "F". [i+2..] = data strings The number of data strings depends on the control string. Examples: 1. "y/M/d H:mm:ss.SS", "fp", "2004 03 10 16:36:31.567", "2004/3/10 16:36:31.56", "2004 03 10 16:36:31.560", 'f': Format date [i+2] (as parsed using pattern [0]) and expect string [i+3]. 'p': Parse string [i+3] and expect date [i+4]. 2. "y/M/d H:mm:ss.SSS", "F", "2004 03 10 16:36:31.567", "2004/3/10 16:36:31.567" 'F': Format date [i+2] and expect string [i+3], 3. "y/M/d H:mm:ss.SSSS", "pf", "2004/3/10 16:36:31.5679", "2004 03 10 16:36:31.567", "2004/3/10 16:36:31.5670", 'p': Parse string [i+2] and expect date [i+3]. 'f': Format date [i+3] and expect string [i+4].
Test formatting.  Input is an array that starts with the following header: [0]   = pattern string to parse [i+2] with followed by test cases, each of which is 3 array elements: [i]   = pattern, or null to reuse prior pattern [i+1] = data string a [i+2] = data string b Examples: Format date [i+1] and expect string [i+2]. "y/M/d H:mm:ss.SSSS", "2004/3/10 16:36:31.5679", "2004 03 10 16:36:31.567"
Relative Date Tests
Test DateFormat's parsing of default GMT variants.  See ticket#6135
Test case for localized GMT format parsing with no delimitters in offset format (Chinese locale)
Test various generic API methods of DateIntervalFormat for API coverage.
Test format
Test format using user defined DateIntervalInfo
Test various generic API methods of DateTimePatternGenerator for API coverage.
CAL FIELDS
set the specified fields on this calendar. Doesn't clear first. Returns any errors the caller
return true if the calendar matches in these fields
Fill-in fields from a specified string, such as "NAME1=VALUE1,NAME2=VALUE2", etc.
Fill-in fields from a specified string, such as "NAME1=VALUE1,NAME2=VALUE2", etc. the specified FieldsSet's value for NAME1 will be copied into this.
UObject boilerplate.
use these for now
misc coverage tests
this function is modified from RBBITest::ReadAndConvertFile()
Read a logical line. All lines ending in a backslash (\) and immediately followed by a newline character are joined with the next line in the source file forming logical lines from the physical lines.
Explain <xxxxx> tag to a native value Since <xxxxx> is always larger than the native value, the operation will replace the tag directly in the buffer, and, of course, will shift tail elements.
wrapper around the reference Punycode implementation
Test various API methods for API completeness.
Run a test of a quasi-Gregorian calendar.  This is a calendar that behaves like a Gregorian but has different year/era mappings. The int[] data array should have the format: { era, year, gregorianYear, month, dayOfMonth, ...  ... , -1 }
Verify that Gregorian works like Gregorian
Verify that BuddhistCalendar shifts years to Buddhist Era but otherwise behaves like GregorianCalendar.
Verify that TaiWanCalendar shifts years to Minguo Era but otherwise behaves like GregorianCalendar.
Verify that JapaneseCalendar shifts years to Japanese Eras but otherwise behaves like GregorianCalendar.
TaiwanFormat has been moved to testdata/format.txt
Verify the Persian Calendar.
Return a string display for this, without surrounding braces.
Originally coded this as operator+, but that makes the expression + char* ambiguous. - liu
useful when operator+ won't cooperate
IntlTest::setICU_DATA  - if the ICU_DATA environment variable is not already
call individual tests, to be overriden to call implementations
Adds given string to the log if we are in verbose mode.
Adds given string to the log if we are in verbose mode. Adds a new line to the given message.
Unconditionally adds given string to the log.
Unconditionally adds given string to the log. Adds a new line to the given message.
convenience functions that include sprintf formatting
convenience functions that include sprintf formatting
Print a usage message for this test class.
Returns the path to icu/source/test/testdata
returns the path to icu/source/data
This is a variant of cintltst/ccolltst.c:CharsToUChars(). It converts an invariant-character string into a UnicodeString, with unescaping \u sequences.
Returns a uniform random value x, with 0.0 <= x < 1.0.  Use with care: Does not return all possible values; returns one of 714,025 values, uniformly spaced.  However, the period is effectively infinite.  See: Numerical Recipes, section 7.1. to restart the sequence.
Convenience method using a global seed.
-------------------------------------------------------------------- Time bomb - allows temporary behavior that expires at a given --------------------------------------------------------------------
Test for CollationElementIterator previous and next for the whole set of unicode characters.
Test for CollationElementIterator.previous()
Test for getOffset() and setOffset()
Test for setText()
Test for getMaxExpansion()
Testing the assignment operator
Testing the constructors
Testing the strength order
Return a string containing all of the collation orders returned by calls to next on the specified iterator
Perform an exhaustive round-trip test on the English spellout rules
Perform an exhaustive round-trip test on the duration-formatting rules
Perform an exhaustive round-trip test on the Spanish spellout rules
Perform an exhaustive round-trip test on the French spellout rules
Perform an exhaustive round-trip test on the Swiss French spellout rules
Perform an exhaustive round-trip test on the Italian spellout rules
Perform an exhaustive round-trip test on the German spellout rules
Perform an exhaustive round-trip test on the Swedish spellout rules
Perform an exhaustive round-trip test on the Dutch spellout rules
Perform an exhaustive round-trip test on the Japanese spellout rules
Perform an exhaustive round-trip test on the Russian spellout rules
Perform an exhaustive round-trip test on the Portuguese spellout rules
testSkeleton.   Spot check a number of confusable skeleton substitutions from the
Run a single confusable skeleton transformation test case.
Append the hex form of a UChar32 to a UnicodeString. Used in formatting error messages. Match the formatting of numbers in confusables.txt Minimum of 4 digits, no leading zeroes for positions 5 and up.
testConfData - Check each data item from the Unicode confusables.txt file,
Exercise every LocalPointer and LocalPointerBase method.
Exercise every LocalArray method (but not LocalPointerBase).
Use LocalXyzPointer types that are not covered elsewhere in the intltest suite.
Try LocalXyzPointer types with NULL pointers.
0*/ {0x30AB, 0x30FC, 0x3042, 0x0000}, 1*/ {0x30AB, 0x30FC, 0x30A2, 0x0000}, 2*/ {0x30AB, 0x30A4, 0x3042, 0x0000}, 3*/ {0x30AB, 0x30A4, 0x30A2, 0x0000}, 6*/ {0x30AD, 0x30FC, 0x3042, 0x0000}, /* Prolonged sound mark sorts BEFORE equivalent vowel (ICU 2.0) 7*/ {0x30AD, 0x30FC, 0x30A2, 0x0000}, /* Prolonged sound mark sorts BEFORE equivalent vowel (ICU 2.0) 4*/ {0x30AD, 0x30A4, 0x3042, 0x0000}, 5*/ {0x30AD, 0x30A4, 0x30A2, 0x0000},
Testing base letters
Testing plain, Daku-ten, Handaku-ten letters
Test Small, Large letters
Test Katakana, Hiragana letters
Test Choo-on kigoo
Test various step-at-a-time transformation of hangul to jamo to latin and back.
Override TransliteratorTest
Jitterbug 2439 -- markus 20030425 The lookup of display names must not fall back through the default locale because that yields useless results.
This test isn't applicable anymore - getISO3Language is independent of the data directory
--------------------------------------------------- table of valid data ---------------------------------------------------
I could not reproduce this bug.  I'm pretty convinced it was fixed with the big locale-data reorg of 10/28/97.  The lookup logic for language and country display names was also changed at that time in that check-in.    --rtg 3/20/98
This would be better tested by the LocaleDataTest.  Will move it when I get the LocaleDataTest working again.
Confirm that Euro support works.  This test is pretty rudimentary; all it does is check that any locales with the EURO variant format a number using the Euro currency symbol. ASSUME: All locales encode the Euro character "\u20AC". If this is changed to use the single-character Euro symbol, this test must be updated.
toString() doesn't work with language_VARIANT.
Couldn't reproduce this bug -- probably was fixed earlier. ORIGINAL BUG REPORT: -- basically, hungarian for monday shouldn't have an \u00f4 (o circumflex)in it instead it should be an o with 2 inclined (right) lines over it.. You may wonder -- why do all this -- why not just add a line to LocaleData?  Well, I could see by inspection that the locale file had the right character in it, so I wanted to check the rest of the pipeline -- a very remote possibility, but I wanted to be sure.  The other possibility is that something is wrong with the font mapping subsystem, but we can't test that here.
Russian first day of week should be Monday. Confirmed.
java.util.Locale.getISO3Country() works wrong for non ISO-3166 codes. Should throw an exception for unknown locales
java.util.Locale.getISO3Language() works wrong for non ISO-3166 codes. Should throw an exception for unknown locales
Currency symbol in zh is wrong.  We will test this at the NumberFormat end to test the whole pipe.
Tests setBogus and isBogus APIs for Locale Jitterbug 1735
Compare two locale IDs.  If they are equal, return 0.  If `string' starts with `prefix' plus an additional element, that is, string == prefix + '_' + x, then return 1.  Otherwise return a value < 0.
Check the relationship between requested locales, and report problems. The caller specifies the expected relationships between requested and valid (expReqValid) and between valid and actual (expValidActual). Possible values are: "gt" strictly greater than, e.g., en_US > en "ge" greater or equal,      e.g., en >= en "eq" equal,                 e.g., en == en
Null exception when formatting pattern with MessageFormat with no parameters.
MessageFormat.toPattern has weird rounding behavior.
More robust message formats.
{sfb} not really applicable in C++?? (kind of silly)
{sfb} again, not really applicable in C++
ChoiceFormat.ctor(double[], String[]) allows unordered double array. This is not a bug, added javadoc to emphasize the use of limit array must be in ascending order.
{sfb} doesn't apply in C++
MessageFormat.applyPattern allows illegal patterns.
MessageFormat.parse has different behavior in case of null.
{sfb} doesn't apply in C++?
MessageFormat.applyPattern works wrong with illegal patterns.
ChoiceFormat is silent about the pattern usage in javadoc.
ChoiceFormat should accept \u221E as eq. to INF.
MessageFormat.parse fails with ChoiceFormat.
MessageFormat.parse fails for some patterns.
When using ChoiceFormat, MessageFormat is not good for I18n.
MessageFormat.parse incorrectly sets errorIndex.
MessageFormat handles single quotes in pattern wrong. This is actually a problem in ChoiceFormat; it doesn't understand single quotes.
Test the applyPattern and toPattern handling of single quotes by ChoiceFormat.  (This is in here because this was a bug reported against MessageFormat.)  The single quote is used to quote the pattern characters '|', '#', '<', and '\u2264'.  Two quotes in a row is a quote literal.
MessageFormat.equals(null) throws a NullPointerException.  The JLS states that it should return false.
This test does round-trip testing (format -> parse -> format -> parse -> etc.) of NumberFormat.
Return a random double 0 <= x < 1.0
Test the conformance of Normalizer to
Verify the conformance of the given line of the Unicode normalization (UTR 15) test suite file.  For each line, there are five columns, corresponding to field[0]..field[4]. The following invariants must be true for all conformant implementations c2 == NFC(c1) == NFC(c2) == NFC(c3) c3 == NFD(c1) == NFD(c2) == NFD(c3) c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5) c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)
Do a normalization using the iterative API in the given direction.
Split a string into pieces based on the given delimiter character.  Then, parse the resultant fields from hex into characters.  That is, "0040 0400;0C00;0899" -> new String[] { "\u0040\u0400", "\u0C00", "\u0899" }.  The output is assumed to be of the proper length already, and exactly output.length fields are parsed.  If there are too few an exception is thrown.  If there are too many the extras are ignored.
Specific tests for debugging.  These are generally failures taken from the conformance file, but culled out to make debugging easier.
Factory method
Test API (increase code coverage)
Test various patterns
Test exponential pattern
Test the handling of quotes
Test the handling of the currency symbol in patterns.
Test localized currency patterns.
Test the Currency object handling, new as of ICU 2.2.
Do rudimentary testing of parsing.
Test proper rounding by the format method.
Test the functioning of the secondary grouping value.
Test currencies whose display name is a ChoiceFormat.
Upgrade to alphaWorks
Upgrade to alphaWorks
Upgrade to alphaWorks
Upgrade to alphaWorks
Check that adoptDecimalFormatSymbols and setDecimalFormatSymbols behave the same, except for memory ownership semantics. (No version of this test on Java, since Java has only one method.)
Generic test for patterns that should be legal/illegal.
Return an integer representing the next token from this iterator.  The integer will be an index into the given list, or -1 if there are no more tokens, or -2 if the token is not on the list.
Parse a CurrencyAmount using the given NumberFormat, with the 'delim' character separating the number and the currency.
---------------------------------------------------------------------- Support methods ----------------------------------------------------------------------
Port of ICU4J rounding test.
Test using various numbering systems and numbering system keyword.
UnicodeString s; std::string ss; std::cout << s.toUTF8String(ss)
Just keep this here to make some of the compilers happy
Just use one of the format functions
Just use one of the parse functions
Convert Java-style strings with \u Unicode escapes into UnicodeString objects
NumberFormat.equals comparing with null should always return false. {sfb} kind of silly in C++, just checking for new success
NumberFormat.equals comparing two obj equal even the setGroupingUsed flag is different.
DecimalFormat.format() incorrectly uses maxFractionDigits setting.
DecimalFormatSymbols should be cloned in the ctor DecimalFormat. DecimalFormat(String, DecimalFormatSymbols).
DecimalFormat.format() incorrectly formats 0.0
DecimalFormat.format fails when groupingSize is set to 0. {sfb} how do I tell if this worked? --> FieldPosition doesn't change ??
NumberFormat.getCurrencyInstance is wrong.
DecimalFormat throws exception when parsing "0"
DecimalFormatSymbol.equals should always return false when comparing with null. {sfb} this is silly in C++
DecimalFormat does not round up correctly.
A space as a group separator for localized pattern causes wrong format.  WorkAround : use non-breaking space.
DecimalFormat.parse returns wrong value {sfb} slightly converted into a round-trip test, since in C++ there is no Double.toString()
null pointer thrown when accessing a deserialized DecimalFormat object. {sfb} doesn't apply in C++
DecimalFormat.applyPattern(String) allows illegal patterns
DecimalFormat.format() loses precision
DecimalFormat.format() loses precision
DecimalFormat.parse(String str, ParsePosition pp) loses precision
DecimalFormat.parse() fails when multiplier is not set to 1 {sfb} not sure what to do with this one
DecimalFormat: Negative format ignored.
NumberFormat.getCurrencyInstance() produces format that uses decimal separator instead of monetary decimal separator. Rewrote this test not to depend on the actual pattern.  Pattern should never contain the monetary separator!  Decimal separator in pattern is interpreted as monetary separator if currency symbol is seen!
Number format data rounding errors for locale FR
Data rounding errors for French (Canada) locale
Data rounding errors for German (Germany) locale
Data rounding errors for Italian locale number formats
Test rounding for nearest even.
Tests the setMaximumFractionDigits limit.
Tests illegal pattern exception. Fix comment : HShih A31 Part1 will not be fixed and javadoc needs to be updated. Part2 has been fixed.
Tests all different comments. Response to some comments : [1] DecimalFormat.parse API documentation is more than just one line. This is not a reproducable doc error in 116 source code. [2] See updated javadoc. [3] Fixed. [4] NumberFormat.parse(String, ParsePosition) : If parsing fails, a null object will be returned.  The unchanged parse position also reflects an error. NumberFormat.parse(String) : If parsing fails, an ParseException will be thrown. See updated javadoc for more details. [5] See updated javadoc. [6] See updated javadoc. [7] This is a correct behavior if the DateFormat object is linient. Otherwise, an IllegalArgumentException will be thrown when formatting "January 35".  See GregorianCalendar class javadoc for more details.
DecimalFormat.applyPattern doesn't set minimum integer digits
Tests ParsePosition.setErrorPosition() and ParsePosition.getErrorPosition().
API tests for API addition request A9.
API tests for API addition request A23. FieldPosition.getBeginIndex and FieldPosition.getEndIndex.
DecimalFormat.parse incorrectly works with a group separator.
DecimalFormat.format() incorrectly formats negative doubles.
DecimalFormat.parse returns 0 if string parameter is incorrect.
NumberFormat.parse doesn't return null
TODO: this test does not work because we need to use a 64 bit number and a a double only MAY only have 52 bits of precision. DecimalFormat.format(long n) fails if n * multiplier > MAX_LONG.
DecimalFormat.format incorrectly formats -0.0.
Locale data should use generic currency symbol 1) Make sure that all currency formats use the generic currency symbol. 2) Make sure we get the same results using the generic symbol or a
DecimalFormat.format() delivers wrong string.
DecimalFormat produces extra zeros when formatting numbers.
CANNOT REPRODUCE - This bug could not be reproduced.  It may be a duplicate of 4134034. JDK 1.1.6 Bug, did NOT occur in 1.1.5 Possibly related to bug 4125885. This class demonstrates a regression in version 1.1.6 of DecimalFormat class. 1.1.6 Results Value 1.2 Format #.00 Result '01.20' !!!wrong Value 1.2 Format 0.00 Result '001.20' !!!wrong Value 1.2 Format 00.00 Result '0001.20' !!!wrong Value 1.2 Format #0.0# Result '1.2' Value 1.2 Format #0.00 Result '001.20' !!!wrong 1.1.5 Results Value 1.2 Format #.00 Result '1.20' Value 1.2 Format 0.00 Result '1.20' Value 1.2 Format 00.00 Result '01.20' Value 1.2 Format #0.0# Result '1.2' Value 1.2 Format #0.00 Result '1.20'
Empty pattern produces double negative prefix.
BigDecimal numbers get their fractions truncated by NumberFormat. {sfb} not pertinent in C++ ??
DecimalFormat toPattern() doesn't quote special characters or handle single quotes.
DecimalFormat.applyPattern() sets minimum integer digits incorrectly. CANNOT REPRODUCE This bug is a duplicate of 4139344, which is a duplicate of 4134300
DecimalFormat formats -0.0 as +0.0 See also older related bug 4106658, 4106667
Test various generic API methods of PluralFormat for Basic usage.
Unit tests of PluralFormat class.
Test various generic API methods of PluralRules for API coverage.
Need to override ParsePosition.equals and FieldPosition.equals.
decode_digit(cp) returns the numeric value of a basic code point (for use in representing integers) in the range 0 to base-1, or base if cp is does not represent a value.
encode_digit(d,flag) returns the basic code point whose value (when used for representing integers) is d, which needs to be in the range 0 to base-1.  The lowercase form is used unless flag is nonzero, in which case the uppercase form is used.  The behavior is undefined if flag is nonzero and digit d has no uppercase form.
encode_basic(bcp,flag) forces a basic code point to lowercase if flag is zero, uppercase if flag is nonzero, and returns the resulting code point.  The code point is unchanged if it is caseless.  The behavior is undefined if bcp is not a basic code point.
Bias adaptation function
Main encode function
Main decode function
Bug 2190 Regression test.   Builder crash on rule consisting of only a
Try out the RuleBasedBreakIterator constructors that take RBBIDataHeader (these are protected so we access them via a local class RBBIWithProtectedFunctions). This is just a sanity check, not a thorough test (e.g. we don't check that the first delete actually frees rulesCopy).
--------------------------------------------- Internal subroutines ---------------------------------------------
--------------------------------------------- RBBIWithProtectedFunctions class functions ---------------------------------------------
checkResults.   Compare the actual and expected break positions, report any differences.
err   -  An error was found.  Report it, along with information about where the
----------------------------------------------------------------------------------- Test for status {tag} return value from break rules. -----------------------------------------------------------------------------------
---------------------------------------------------------------------------- generalIteratorTest      Given a break iterator and a set of test data, ----------------------------------------------------------------------------
testFirstAndNext.   Run the iterator forwards in the obvious first(), next()
TestLastAndPrevious.   Run the iterator backwards, starting with last().
Testing the BreakIterator::getDisplayName() function
Test End Behaviour
Test for problem reported by Ashok Matoria on 9 July 2007 'T' of "Two". Now, at this point if I do next() and
Test Japanese Line Break
------------------------------------------------------------------------------- TestDictRules   create a break iterator from source rules that includes a -------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------- Run tests from each of the boundary test data files distributed by the Unicode Consortium -------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------- Run tests from one of the boundary test data files distributed by the Unicode Consortium -------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------- checkUnicodeTestCase()   Run one test case from one of the Unicode Consortium --------------------------------------------------------------------------------------------
moveBack()   Find the "significant" code point preceding the index i.
Run a RBBI monkey test.  Common routine, for all break iterator types.
Bug 5532.  UTF-8 based UText fails in dictionary code.
TestDebug    -  A place-holder test for debugging purposes.
CollationElementIterator.reset() doesn't work
Collator -> rules -> Collator round-trip broken for expanding characters
Collator thinks "black-bird" == "black"
CollationElementIterator will not work correctly if the associated Collator object's mode is changed
Collator::IDENTICAL documented but not implemented
Full Decomposition mode not implemented
Collator::createInstance() causes an ArrayIndexOutofBoundsException for Korean
RuleBasedCollator.getRules does not return the exact pattern as input for expanding character sequences
MergeCollation::fixEntry broken for "& H < \u0131, \u0130, i, I"
Secondary/Tertiary comparison incorrect in French Secondary
Collator::compare() method broken if either string contains spaces
Unicode characters need to be recursively decomposed to get the correct result. For example, u1EB1 -> \u0103 + \u0300 -> a + \u0306 + \u0300.
French secondary collation checking at the end of compare iteration fails
Bad canonicalization of same-class combining characters
RuleBasedCollator::operator==(NULL) throws NullPointerException
RuleBasedCollator breaks on "< a < bb" rule
Combining characters in different classes not reordered properly.
string comparison errors in Scandinavian collators
CollationKey takes ignorable strings into account when it shouldn't
Mu/micro conflict Micro symbol and greek lowercase letter Mu should sort identically
Collator::compare not handling spaces properly
Collation not Unicode conformant with Hangul syllables
Collator::getCollationKey was hanging on certain character sequences
sort order of french words with multiple accents has errors
The sorting using java.text.CollationKey is not in the exact order
Collation with decomposition off doesn't work for Europe
Support for Swedish gone in 1.1.6 (Can't create Swedish collator)
getCollationKey throws exception for spanish text Cannot reproduce this bug on 1.2, however it DOES fail on 1.1.6
RuleBasedCollator doesn't use createCollationElementIterator internally
Ticket 7189 nextSortKeyPart incorrect for EO_S1 collation
--------------------------------------------------------------------------- Test class boilerplate ---------------------------------------------------------------------------
--------------------------------------------------------------------------- Error Checking / Reporting macros used in all of the tests. ---------------------------------------------------------------------------
Set a value into a UVector at position specified by a decimal number in a UnicodeString.   This is a utility function needed by the actual test function, which follows.
------------------------------------------------------------------------------- Read a text data file, convert it to UChars, and return the data --------------------------------------------------------------------------------
------------------------------------------------------------------------------- PerlTests  - Run Perl's regular expression tests -------------------------------------------------------------------------------
------------------------------------------------------------------------------- PerlTestsUTF8  Run Perl's regular expression tests on UTF-8-based UTexts -------------------------------------------------------------------------------
-------------------------------------------------------------- Bug6149   Verify limits to heap expansion for backtrack stack. ---------------------------------------------------------------
-------------------------------------------------------------- Bug7651   Regex pattern that exceeds default operator stack depth in matcher. ---------------------------------------------------------------
Return a random integer i where 0 <= i < n.
Return a random integer i where 0 <= i < n.
Test various generic API methods of SimpleDateFormat for API coverage.
Unit tests of SelectFormat class.
Test various generic API methods of SelectFormat for Basic API usage. This is to make sure the API test coverage is 100% .
public contructors and destructors --------------------------------------
public methods ----------------------------------------------------------
private methods ------------------------------------------------------
--------------------------------------------------------------------------- Test class boilerplate ---------------------------------------------------------------------------
searchTime()    A quick and dirty performance test for string search.
Syntax check for the correct namespace qualifier for the standard string class.
Test the ByteSink base class.
Iterate through the given iterator, checking to see that all the strings in the expected array are present.
tests have obvious memory leaks!
Test new closure API
Helper for TestPatterns()
Test applyPattern
test and ascertain func(func(func(src))) == func(src)
Return a random integer i where 0 <= i < n. A special function that gets random codepoints from planes 0,1,2 and 14
If the symbol CCP is defined, then the 'name' and 'encoding' constructor parameters are copied.  Otherwise they are aliased. #define CCP
Set buffer[index] to c, growing buffer if necessary. Return TRUE if successful.
Make sure that 'buffer' has at least 'mincapacity' bytes. Return TRUE upon success. Upon return, 'buffer' may change value. In any case, previous contents are preserved.
Read the external names list, and confirms that the collator gets the same results when comparing lines one to another using regular and iterative comparison.
Read the external dictionary file, which is already in proper sorted order, and confirm that the collator compares each line as preceding the following line.
Odd corner conditions taken from "How to Sort Thai Without Rewriting Sort",
------------------------------------------------------------------------ Internal utilities ------------------------------------------------------------------------
Set a UnicodeString corresponding to the given string.  Use UnicodeString and the default converter, unless we see the sequence "\\u", in which case we interpret the subsequent escape.
When the default locale is tr, make sure that the pattern can still be parsed.
--------------------------------- API Tests ---------------------------------
This test is a regression test for a fixed bug in the copy constructor. It is kept as a global function rather than as a method since the test depends on memory values. (At least before the bug was fixed, whether it showed up or not depended on memory contents, which is probably why it didn't show up in the regular test for the copy constructor.) For this reason, the test isn't changed even though it contains function calls whose results are not tested and had no problems. Actually, the test failed by *crashing*.
Verify that MessageFormat accomodates more than 10 arguments and more than 10 subformats.
test RBNF extensions to message format
Read the next token from 'this->line' and append it to 'token'. Tokens are separated by rule white space.  Tokens may also be delimited by double or single quotes.  The closing quote must match the opening quote.  If a '#' is encountered, the rest of the line is ignored, unless it is backslash-escaped or within quotes. of the line is reached or an error occurs
Internal Functions used
create a test for the given script transliterator.
Make sure every system transliterator can be instantiated. ALSO test that the result of toRules() for each rule is a valid rule.  Do this here so we don't have to have another test that instantiates everything as well.
Test inline set syntax and set variable syntax.
Create some inverses and confirm that they work.  We have to be careful how we do this, since the inverses will not be true inverses -- we can't throw any random string at the composition of the transliterators and expect the identity function.  F x F' != I.  However, if we are careful about the input, we will get the expected results.
Basic test of keyboard.
Basic test of keyboard with cursor.
Test keyboard transliteration with back-replacement.
Compose the Kana transliterator forward and reverse and try some strings that should come out unchanged.
Compose the hex transliterators forward and reverse.
Do some basic tests of filtering.
Test anchors
Test pattern quoting and escape mechanisms.
Regression test for bugs found in Greek transliteration.
Prefix, suffix support in hex transliterators
Parsers need better syntax error messages.
Test segments and segment references.
Test cursor positioning outside of the key
Test zero length and > 1 char length variable values.  Test use of variable refs in UnicodeSets.
Confirm that the contextStart, contextLimit, start, and limit behave correctly. J474.
Test the Hiragana-Katakana transliterator.
Test cloning / copy constructor of RBT.
Test inter-Indic transliterators.  These are composed. ICU4C Jitterbug 483.
Test filter syntax in IDs. (J918)
Test the case mapping transliterators.
Test the name mapping transliterators.
Test liberalized ID syntax.  1006c
test for Jitterbug 912
Test the normalization transliterator.
Test compound RBT rules.
Compound filter semantics were orginially not implemented correctly.  Originally, each component filter f(i) is replaced by f'(i) = f(i) && g, where g is the filter for the compound transliterator. From Mark: Suppose and I have a transliterator X. Internally X is "Greek-Latin; Latin-Cyrillic; Any-Lower". I use a filter [^A]. The compound should convert all greek characters (through latin) to cyrillic, then lowercase the result. The filter should say "don't touch 'A' in the original". But because an intermediate result happens to go through "A", the Greek Alpha gets hung up.
Test Source-Target/Variant.
Test inverse of Greek-Latin; Title()
Test NFD chaining with RBT
Inverse of "Null" should be "Null". (J21)
Check ID of inverse of alias. (J22)
Test IDs of inverses of compound transliterators. (J20)
Test undefined variable.
Test empty context.
Test compound filter ID syntax
Test new property set syntax
Test various failure points of the new 2.0 engine.
Test quantified segment behavior.  We want: ([abc])+ > x $1 x; applied to "cba" produces "xax"
====================================================================== Ram's tests ======================================================================
Test Gurmukhi-Devanagari Tippi and Bindi
Test instantiation from a locale.
Test title case handling of accent (should ignore accents)
Basic test of a locale resource based rule.
Make sure parse errors reference the right line.
Make sure sets on output are disallowed.
Test the use variable range pragma, making sure that use of variable range characters is detected and flagged as an error.
Test invalid post context error handling
Test ID form variants
Mark's toRules test.
Test Escape and Unescape transliterators.
Make sure display names of variants look reasonable.
Check to see that incremental gets at least part way through a reasonable string.
Test that user-registered transliterators can be used under function syntax.
Test the Any-X transliterators.
Test Any-X transliterators with sample letters from all scripts.
Test the source and target set API.  These are only implemented for RBT and CompoundTransliterator at this time.
Test handling of rule whitespace, for both RBT and UnicodeSet.
====================================================================== this method is in TestUScript.java ======================================================================
Test the Halfwidth-Fullwidth transliterator (ticket 6281).
Test Thai.  The text is the first paragraph of "What is Unicode" from the Unicode.org web site.
====================================================================== Support methods ======================================================================
void TransliteratorErrorTest::TestUniToHexErrors() {
used for collation result reporting, defined here for convenience (maybe moved later)
Produce a printable representation of a CollationKey
Return an integer array containing all of the collation orders returned by calls to next on the specified iterator
This test does round-trip testing (format -> parse -> format -> parse -> etc.) of DateFormat. par is ignored throughout this file
Return a random double from 0.01 to 1, inclusive
Test the API of DecimalFormatSymbols; primarily a simple get/set set.
-------------------------------------------------------------------- Time bomb - allows temporary behavior that expires at a given --------------------------------------------------------------------
Test getMonths.
Test the API of DateFormatSymbols; primarily a simple get/set set.
* Show exactly where the string's differences lie.
"Someone from {2} is receiving a #{0} error - {1}. Their telephone call is costing {3 number,currency}."
** The actual test function.
** The actual test function.
This test does round-trip testing (format -> parse -> format -> parse -> etc.) of NumberFormat.
NaN is weird- comparisons with NaN _always_ return false, with the exception of !=, which _always_ returns true
"code" coverage test for Jitterbug 4515 RFE: in C++, use U_INLINE=inline
Convert Java-style strings with \u Unicode escapes into UnicodeString objects
The Tibetan vowel sign AA, 0f71, was messed up prior to Unicode version 2.1.9.
Make sure characters in the CompositionExclusion.txt list do not get composed to.
Test for a problem that showed up just before ICU 1.6 release having to do with combining characters with an index of zero. Such characters do not participate in any canonical decompositions.  However, having an index of zero means that they all share one typeMask[] entry, that is, they all have to map to the same canonical class, which is not the case, in reality.
Run a few specific cases that are failing for Verisign.
------------------------------------------------------------------------ Internal utilities
Improve code coverage of Normalizer2
test APIs that are not otherwise used - improve test coverage
Test basic
Tests for Greek Language. This tests that requests for short unit names correctly fall back to long unit names for a locale where the locale data does not provide short unit names. As of CLDR 1.9, Greek is one such language.
class TimeZoneBoundaryTest
------------------------------------- Check that the given year/month/dom/hour maps to and from the given epochHours.  This verifies the functioning of the calendar and time zone in conjunction with one another, including the calendar time->fields and fields->time and the time zone getOffset method.
Test the behavior of SimpleTimeZone at the transition into and out of DST. Use a binary search to find boundaries.
Test the handling of the "new" rules; that is, rules other than nth Day of week.
This test is problematic. It makes assumptions about the behavior of specific zones. Since ICU's zone table is based on the Olson zones (the UNIX zones), and those change from time to time, this test can fail after a zone table update. If that happens, the selected zones need to be updated to have the behavior expected. That is, they should have DST, not have DST, and have DST -- other than that this test isn't picky. 12/3/99 aliu Test the behavior of SimpleTimeZone at the transition into and out of DST. Use a stepwise march to find boundaries.
Testing getOffset APIs around rule transition by local standard/wall time.
{sfb} will this work using a Calendar?
The expected behavior of TimeZone around the boundaries is: (Assume transition time of 2:00 AM)
CANNOT REPRODUDE Yet another _alleged_ bug in TimeZone::getOffset(), a method that never should have been made public.  It's simply too hard to use correctly. The original test code failed to do the following: (1) Call Calendar::setTime() before getting the fields! (2) Use the right millis (as usual) for getOffset(); they were passing When you fix these two problems, the test passes, as expected.
TimeZone::getAvailableIDs(int32_t) throws exception for certain values, due to a faulty constant in TimeZone::java.
SimpleTimeZone::hasSameRules() doesn't work for zones with no DST and different DST parameters.
SimpleTimeZOne constructors, setStartRule(), and setEndRule() don't check for out-of-range arguments.
getDisplayName doesn't work with unusual savings/offsets.
Make sure setStartRule and setEndRule set the DST savings to nonzero if it was zero.
Test to see if DateFormat understands zone equivalency groups.  It might seem that this should be a DateFormat test, but it's really a TimeZone test -- the changes to DateFormat are minor. We use two known, stable zones that shouldn't change much over time -- America/Vancouver and America/Los_Angeles.  However, they MAY change at some point -- if that happens, replace them with any two zones in an equivalency group where one zone has localized name data, and the other doesn't, in some locale.
test new API for JDK 1.2 8/31 putback
SimpleTimeZone allows invalid DOM values.
Compare SimpleTimeZone with equivalent RBTZ
Test equivalency between OlsonTimeZone and custom RBTZ representing the equivalent rules in a certain time range
Check if transitions returned by getNextTransition/getPreviousTransition are actual time transitions.
Check if an OlsonTimeZone and its equivalent RBTZ have the exact same transitions.
Write out time zone rules of OlsonTimeZone into VTIMEZONE format, create a new VTimeZone from the VTIMEZONE data, then compare transitions
Write out time zone rules of OlsonTimeZone after a cutover date into VTIMEZONE format, create a new VTimeZone from the VTIMEZONE data, then compare transitions
Write out simple time zone rules from an OlsonTimeZone at various time into VTIMEZONE format and create a new VTimeZone from the VTIMEZONE data, then make sure the raw offset and DST savings are same in these two time zones.
Write out time zone rules of OlsonTimeZone into VTIMEZONE format with RFC2445 header TZURL and LAST-MODIFIED, create a new VTimeZone from the VTIMEZONE data to see if the headers are preserved.
Extract simple rules from an OlsonTimeZone and make sure the rule format matches the expected format.
API coverage tests for TimeZoneRule
API coverage test for BasicTimeZone APIs in SimpleTimeZone
API coverage test for VTimeZone
Check if a time shift really happens on each transition returned by getNextTransition or getPreviousTransition in the specified time range
Compare all time transitions in 2 time zones in the specified time range in ascending order
Compare all time transitions in 2 time zones in the specified time range in descending order
Slightly modified version of BasicTimeZone::hasEquivalentTransitions. This version returns TRUE if transition time delta is within the given delta range.
Generic API testing for API coverage.
Test the setStartRule/setEndRule API calls.
Test the offset of the PRT timezone.
Regress a specific bug with a sequence of API calls.
Test the call which retrieves the available IDs.
NOTE: As of ICU 2.8, this test confirms that the "tz.alias" file, used to build ICU alias zones, is working.  It also looks at some genuine Olson compatibility IDs. [aliu] This test is problematic. It should really just confirm that the list of compatibility zone IDs exist and are somewhat meaningful (that is, they aren't all aliases of GMT). It goes a bit further -- it hard-codes expectations about zone behavior, when in fact zones are redefined quite frequently. ICU's build process means that it is easy to update ICU to contain the latest Olson zone data, but if a zone tested here changes, then this test will fail.  I have updated the test for 1999j data, but further updates will probably be required. Note that some of the concerts listed below no longer apply -- in particular, we do NOT overwrite real UNIX zones with 3-letter IDs. There are two points of overlap as of 1999j: MET and EET. These are both real UNIX zones, so we just use the official definition. This test has been updated to reflect this. 12/3/99 aliu Added tests for additional zones and aliases from the icuzones file. Markus Scherer 2006-nov-06 [srl - from java - 7/5/1998] Certain short zone IDs, used since 1.1.x, are incorrect. The worst of these is: "CAT" (Central African Time) should be GMT+2:00, but instead returns a zone at GMT-1:00. The zone at GMT-1:00 should be called EGT, CVT, EGST, or AZOST, depending on which zone is meant, but in no case is it CAT. Other wrong zone IDs: ECT (European Central Time) GMT+1:00: ECT is Ecuador Time, GMT-5:00. European Central time is abbreviated CEST. SST (Solomon Island Time) GMT+11:00. SST is actually Samoa Standard Time, GMT-11:00. Solomon Island time is SBT. NST (New Zealand Time) GMT+12:00. NST is the abbreviation for Newfoundland Standard Time, GMT-3:30. New Zealanders use NZST. AST (Alaska Standard Time) GMT-9:00. [This has already been noted in another bug.] It should be "AKST". AST is Atlantic Standard Time, GMT-4:00. PNT (Phoenix Time) GMT-7:00. PNT usually means Pitcairn Time, GMT-8:30. There is no standard abbreviation for Phoenix time, as distinct from MST with daylight savings. In addition to these problems, a number of zones are FAKE. That is, they don't match what people use in the real world. FAKE zones: EET (should be EEST) ART (should be EEST) MET (should be IRST) NET (should be AMST) PLT (should be PKT) BST (should be BDT) VST (should be ICT) CTT (should be CST) + ACT (should be CST) + AET (should be EST) + MIT (should be WST) + IET (should be EST) + PRT (should be AST) + CNT (should be NST) AGT (should be ARST) BET (should be EST) + + A zone with the correct name already exists and means something else. E.g., EST usually indicates the US Eastern zone, so it cannot be used for Brazil (BET).
Utility function for TestCustomParse
Utility function for TestCustomParse, generating time zone ID string for the give offset.
As part of the VM fix (see CCC approved RFE 4028006, bug 4044013), TimeZone.getTimeZone() has been modified to recognize generic IDs of the form GMT[+-]hh:mm, GMT[+-]hhmm, and GMT[+-]hh.  Test this behavior here.
Test the basic functionality of the getDisplayName() API. See also API change request A41. 4/21/98 - make smarter, so the test works if the ext resources are present or not.
Test country code support.  Jitterbug 776.
Test that a transition at the end of February is handled correctly.
UVector was improperly copying contents This code will crash this is still true
Test toPattern().
Make sure minimal representation is maintained.
Test the [:Latin:] syntax.
Test the [:Latin:] syntax.
Test that Posix style character classes [:digit:], etc. have the Unicode definitions from TR 18.
Test cloning of UnicodeSet.  For C++, we test the copy constructor.
Test the indexOf() and charAt() methods.
Test closure API.
(Non-SymbolTable API) Add the given variable and value to the table.  Variable should NOT contain leading '$'.
SymbolTable API
SymbolTable API
SymbolTable API
Check that ranges are monotonically increasing and non- overlapping.
Convert a bitmask to a UnicodeSet.
Convert a UnicodeSet to a bitmask.  Only the characters U+0000 to U+0020 are represented in the bitmask.
Return the representation of an inversion list based UnicodeSet as a pairs list.  Ranges are listed in ascending Unicode order. For example, the set [a-zA-M3] is represented as "33AMaz".
Basic consistency check for a few items. That the iterator works, and that we can create a pattern and get the same thing back
Do not mix with calls to nextString().
Implement span() with contains() for comparison.
Count spans on a string with the method according to type and set the span limits. The set may be the complement of the original. When using spanBack() and comparing with span(), use a span condition for the first spanBack() according to the expected number of spans. Sets typeName to an empty string if there is no such type. Returns -1 if the span option is filtered out.
Verify that we get the same results whether we look at text with contains(), span() or spanBack(), using unfrozen or frozen versions of the set, and using the set or its complement (switching the spanConditions accordingly). The latter verifies that set.span(spanCondition) == set.complement().span(!spanCondition). The expectLimits[] are either provided by the caller (with expectCount>=0) or returned to the caller (with an input expectCount<0).
Specifically test either UTF-16 or UTF-8.
Test both UTF-16 and UTF-8 versions of span() etc. on the same sets and text, unless either UTF is turned off in whichSpans. Testing UTF-16 and UTF-8 together requires that surrogate code points have the same contains(c) value as U+FFFD.
Verify that all implementations represent the same set.
Test with a particular, interesting string. Specify length and try NUL-termination.
Test select patterns and strings, and test USET_SPAN_SIMPLE.
Test the unescape() function.
compare the real function against the reference
Test if this compiler supports Return Value Optimization of unnamed temporary objects.
{ "", "B", "", 0 },
TestString()     Run a suite of UText tests on a string.
TestCMR   test Copy, Move and Replace operations.
TestCopyMove    run a single test case for utext_copy.
TestReplace   Test a single Replace operation.
TestAccess      Test the read only access functions on a UText, including cloning.
TestAccessNoClone()    Test the read only access functions on a UText.
ComparisonTest()    Check the string comparison functions. Based on UnicodeStringTest::TestCompare()
ErrorTest()    Check various error and edge cases.
Regression test for Ticket 5560 Clone fails to update chunkContentPointer in the cloned copy. This is only an issue for UText types that work in a local buffer, The test:
Test for Ticket 6847
--------------------------------------------------------------------------- Test class boilerplate ---------------------------------------------------------------------------
--------------------------------------------------------------------------- Test class boilerplate ---------------------------------------------------------------------------
Using memory copy method to append a C array to buffer,
str  [in]    null-terminated c-string
Return a null-terminate c-string. The buffer is owned by callee.
Give a random number with the consideration of weight. Every random number is associated with a weight. It identifies the chance to be selected, larger weight has more chance to be selected. ______________________   every slot has equal chance [____][_][___][______]   each item has different slots, hence different chance The algorithms to generate the number is illustrated by preceding figure. First, a slot is selected by rand(). Then we translate the slot to corresponding item.
copy 0, 1, or 2 character(s) to str
the buffer of "source" is owned by caller
Return a random int64_t where U_INT64_MIN <= ran <= U_INT64_MAX.
Return a random double where U_DOUBLE_MIN <= ran <= U_DOUBLE_MAX.
Return a random int32_t where U_INT32_MIN <= ran <= U_INT32_MAX.
returns the path to icu/source/data/out
ctest_setICU_DATA  - if the ICU_DATA environment variable is not already
Note: this assumes that context is a pointer to STANDARD_TEST_FILE. It would be cleaner to define an acutal context with a string pointer in it and set STANDARD_TEST_FILE after the call to initArgs()...
Returns the path to icu/source/test/testdata
From ticket:5923: Build a paragraph that contains a mixture of left to right and right to left text. Break it into multiple lines and make sure that the glyphToCharMap for run in each line is correct. Note: it might be a good idea to also check the glyphs and positions for each run, that we get the expected number of runs per line and that the line breaks are where we expect them to be. Really, it would be a good idea to make a whole test suite for pl_paragraph.
Finds the high bit by binary searching through the bits in value.
Returns the path to icu/source/test/testdata
From ticket:5923: Build a paragraph that contains a mixture of left to right and right to left text. Break it into multiple lines and make sure that the glyphToCharMap for run in each line is correct. Note: it might be a good idea to also check the glyphs and positions for each run, that we get the expected number of runs per line and that the line breaks are where we expect them to be. Really, it would be a good idea to make a whole test suite for ParagraphLayout.
returns the path to icu/source/data/out
ctest_setICU_DATA  - if the ICU_DATA environment variable is not already
We really want to inherit this method from the superclass, but some compilers issue a warning if we don't implement it...
This test may be different since c lib has a type PUNCT and it is printable. iswgraph is not used for testing since it is a subset of iswprint with the exception of returning true for white spaces. no match found in icu4c.
This test may be different since c lib has a type PUNCT and it is printable. iswgraph is not used for testing since it is a subset of iswprint with the exception of returning true for white spaces. no match found in icu4c.
This test may be different since c lib has a type PUNCT and it is printable. iswgraph is not used for testing since it is a subset of iswprint with the exception of returning true for white spaces. no match found in icu4c.
This test may be different since c lib has a type PUNCT and it is printable. iswgraph is not used for testing since it is a subset of iswprint with the exception of returning true for white spaces. no match found in icu4c.
--------------------------------------------------------------------------- ProcessOptions()    Function to read the command line options. ---------------------------------------------------------------------------
--------------------------------------------------------------------------------------- Comparison functions for use by qsort. ---------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------- Function for sorting the names (lines) into a random order. ---------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------- doKeyGen()     Key Generation Timing Test ---------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------- doQSort()    The quick sort timing test.  Uses the C library qsort function. ---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------- UnixConvert   -- Convert the lines of the file to the encoding for UNIX ----------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------- openRulesCollator  - Command line specified a rules file.  Read it in ----------------------------------------------------------------------------------------
pre-generated in CollPerfTest::prepareData(), need not to check error here
Print the given string to stdout (for debugging purposes)
Verify that a UErrorCode is successful; exit(1) if not
Create a display string for a formattable
Print the given string to stdout using the UTF-8 converter (for debugging purposes only)
Unescape the strings
Test NFC Performance
Test NFD Performance
Test FCD Performance
Test Win NFC Performance
Test Win NFD Performance
Test Quick Check Performance
Test isNormalized Performance
--------------------------------------------------------------------------- ProcessOptions()    Function to read the command line options. ---------------------------------------------------------------------------
---------------------------------------------------------------------------------------- UnixConvert   -- Convert the lines of the file to the encoding for UNIX ----------------------------------------------------------------------------------------
Map a key to an integer count. Map at most 1k=0x400 different keys with this data structure.
Invert the hash map: Fill an array of length countKeys() with the keys indexed by their mapped values.
Count spans of characters that are in the set, and spans of characters that are not in the set. If the very first character is in the set, then one additional not-span is counted.
virtual void call(UErrorCode* pErrorCode) { ... }
The main constructor: it calls compareWordBreaks and reports any differences
The no arg constructor
The destructor
returns the number of breaks in the spaces array that aren't found in the noSpaces array
Returns the number of breaks found in the noSpaces array that aren't in the spaces array
Returns the number of words found in the spaces array
This method does the acutal break comparison and reports the results. It uses a SpaceBreakIterator to iterate over the text with spaces, and a word instance of a Thai BreakIterator to iterate over the text without spaces.
Report a break that's in the text with spaces but not found in the text without spaces.
Report a break that's found in the text without spaces that isn't in the text with spaces.
Remove spaces from the input UChar array. We check explicitly for a Unicode code value of 0x0020 because Unicode::isSpaceChar returns true for CR, LF, etc.
Generate a text file with spaces in it from a file without.
The main routine. Read the command line arguments, read the text file, remove the spaces, do the comparison and report the final results
The main constructor. Clear all the counts and construct a default word instance of a BreakIterator.
The destructor. delete the underlying BreakIterator
Return the next break, counting words and spaces.
Returns the current space count
Returns the current word count
Factory functoin for StringThreadTest.
---------------------------------------------------------------------- parseCommandLine   Read through the command line, and save all ----------------------------------------------------------------------
Subclasses should override this method to return either positive or negative integer indicating the number of events in a single call to this object's call() method, if applicable e.g: Number of breaks / iterations for break iterator
Call call() n times in a tight loop and return the elapsed milliseconds.  If n is small and call() is fast the return result may be zero.  Small return values have limited meaningfulness, depending on the underlying CPU and OS.
strncmp that also makes sure there's a \0 at s2[0]
non recursive insert function
Log the time taken. May not output anything.
Run or list tests (according to mode) in a subtree.
=========== io functions ========
Log test structure, with indent
Log test structure (no ident)
Display program invocation arguments
init from table resource will put stuff in hashtable according to keys.
init from headers and resource with checking the whether the size of resource matches header size
Writes the hexadecimal of a null-terminated array of codepoints into a file
Writes the hexadecimal of a non-null-terminated array of codepoints into a file
Sets the iterator to the argument string and outputs the collation elements.
Serializes the contraction within the given argument rule
Prints the attribute values in the argument collator into the output stream
Prints the normalization mode in the argument collator into the output stream
Output the collation element belonging to the locale into a file
Sets the collator with the attribute values
Appends directory path with an ending seperator if necessary.
Output the collation element into a file
Parse for enum values. Note this only works for positive enum values.
Parser for attribute name value pair
Checks if the locale argument is a base language
Converts a UChar array into its string form "xxxx xxxx"
If it is a primary difference returns -1 or 1. If it is a secondary difference returns -2 or 2. If it is a tertiary difference returns -3 or 3. If equals returns 0.
Output serialized script elements
Checks if codepoint belongs to scripts
Checks if the set of codepoints belongs to the script
Gets the script elements and contractions belonging to the script Add by Richard
Gets the script elements and contractions belonging to the script
Marks tailored elements
Checks if the collation iterator has more than 1 collation element
Prints the footer for index.html
Serialize the codepoints from start to end into an html file. Arranging them into ascending collation order. void serializeScripts(UScriptCode script[], int scriptcount) Richard
Prints the header for the html
Prints the header for index.html
Prints the footer for index.html
Gets all scripts and serialize their codepoints into an html file.
Main   --  process command line, read in and pre-process the test file,
---------------------------------------------------------------------------- main      for genbrk ----------------------------------------------------------------------------
---------------------------------------------------------------------------- main      for gencfu ----------------------------------------------------------------------------
Read in a confusables source file
---------------------------------------------------------------------------- main      for genctd ----------------------------------------------------------------------------
Requires hasMapping() and well-formed mapping.
get an existing Norm unit
get or create a Norm unit; get or create the intermediate trie entries for it as well
Requires p->hasMapping().
Requires p->compositions!=NULL.
return a list of unique names, not including "", for this property elements, will be filled with indices into STRING_TABLE
are enumValues contiguous for count entries starting with this one? ***!!!*** we assume we are in an array and look at neighbors ***!!!
Given an index into the string pool, return an offset.  computeOffsets() must have been called already.  If allowNegative is true, allow negatives and preserve their sign.
Process a file
weiv (06/26/2002): adding the following: - preserving spaces in commands [...] - # comments until the end of line
Append UChar * after dissembling if c > 0xffff
'{' . (name resource)* '}'
'{' . resource [','] '}'
'{' . string [','] '}'
test for NULL
printf("Type guessed as %s\n", resourceNames[resType]);
not a colon
go from "/usr/local/include/curses.h" to "/usr/local/include"
go from "/usr/local/include/curses.h" to "curses"
Only called for UTF-16 v1 strings. For UTF-16 v2 strings, res_write() sees fWritten and exits early.
Closing Functions
Adding Functions
Misc Functions
write indentation for formatting
get ID for each element. ID is globally unique.
ICU is not endian portable, because ICU data generated on big endian machines can be ported to big endian machines but not to little endian machines and vice versa. The conversion is not portable across platforms with different endianess.
Parse the filename, and get its language information. If it fails to get the language information from the filename, use "en" as the default value for language
Print out a containing element, like: <trans-unit id = "blah" resname = "blah" restype = "x-id-alias" translate = "no"> <group id "calendar_gregorian" resname = "gregorian" restype = "x-icu-array">
Callback for deleting the value from the hashtable
Callback for hashing the entry
Callback for comparing two entries
Takes two CEs (lead and continuation) and compares them as CEs should be compared: primary vs. primary, secondary vs. secondary tertiary vs. tertiary
weiv can't count :)))))
Print the current platform
Debug Memory Plugin (see hpmufn.c)
Initialize the pkgDataFlags with the option file given.
Given the base libName and version numbers, generate the libary file names and store it in libFileNames. Depending on the configuration, the library name may either end with version number or shared object suffix.
Create the symbolic links for the final library file.
Archiving of the library file may be needed depending on the platform and options given. If archiving is not needed, copy over the library file name.
Using the compiler information from the configuration file set by -O option, generate the library file. command may be given to allow for a larger buffer for cmd.
Try calling icu-config directly to get the option file.
Count items . 0 if null
Prepend string to CharList
append string to CharList. *end or even end can be null if you don't know it.[slow] Str is adopted!
Delete list
Compares the mod time of both files returning a number indicating which one is later. -1 if error ocurs.
Extract the setting after the '=' and store it in flag excluding the newline character.
Get the position after the '=' character.
enumerate dependencies of a package item --------------------------------
Unicode TR 13 says any of the below chars is a new line char in a readline function in addition to CR+LF combination which needs to be handled seperately
UXMLParser constructor.   Mostly just initializes the ICU regexes that are
UXMLElement -------------------------------------------------------------
Could get fancy here and deliver something such as "UTC+xxxx" or "UTC-xxxx" if offset is non-zero, but this is no time for a treasure hunt.
Do a binary search (this works whatever time_t's type is).
The following is supplied for compatibility with previous versions of the CMUCS runtime library.
Given a calendar year, return the GMT epoch seconds for midnight GMT of January 1 of that year.  yearToSeconds(1970) == 0.
Given 1970 GMT epoch seconds, return the calendar year containing that time.  secondsToYear(0) == 1970.
A restricted equality, of just the raw and dst offset
Is this an alias to another zone?
Retrieve alias list
Read zic-coded 32-bit integer from file
Read zic-coded 64-bit integer from file
Read a boolean value
Read the zoneinfo file structure (see tzfile.h) into a ZoneInfo
Process a single zoneinfo file, adding the data to ZONEINFO
Read and discard the current line.
Return the time mode as an ICU SimpleTimeZone int from 0..2; see simpletz.h.
Return a "dowim" param suitable for SimpleTimeZone.
Return a "dow" param suitable for SimpleTimeZone.
Predicate used to find FinalRule objects that do not have both sub-parts set (indicating an error in the input file).
Predicate used to find FinalZone objects that do not map to a known rule (indicating an error in the input file).
Populate finalZones and finalRules from the given istream.
SEE olsontz.h FOR RESOURCE BUNDLE DATA LAYOUT
print the string list
Unary predicate for finding transitions after a given time
Remap transitions
Merge final zone data into this zone.
Merge the data from the given final zone into the core zone data by calling the ZoneInfo member function mergeFinalData.
Visitor function that merges the final zone data into the main zone data structures.  It calls mergeOne for each final zone and its list of aliases.
Print this rule in resource bundle format to os.  ID and enclosing braces handled elsewhere.
The main program
Write blanks over part of a string. Don't overwrite end-of-line characters.
Test whether the string in buf is a function definition. The string may contain and/or end with a newline. Return as follows: 0 - definitely not a function definition; 1 - definitely a function definition; 2 - definitely a function prototype (NOT USED); -1 - may be the beginning of a function definition, append another line and look again. The reason we don't attempt to convert function prototypes is that Ghostscript's declaration-generating macros look too much like prototypes, and confuse the algorithms.
Convert a recognized function definition or header to K&R syntax.
The main program.
The main program.
The main program.
The main program.
The main program.
this looks goofy, but gcc does a great job with this...
Convert 5/6/5 RGB (as 3 ints) to 8/8/8 Operation count: 8 <<, 0 &, 5 |
Convert 5/6/5 RGB (as a single 16-bit word) to 8/8/8 r4r3r2r1 r0r4r3r2 g5g4g3g2 g1g0g5g4 b4b3b2b1 b0b4b3b2   desired result Construct the 24-bit RGB word as: r4r3r2r1 r0------ -------- -------- -------- --------  (rgb << 8) & 0xf80000 Operation count: 5 <<, 6 &, 5 | (n.b. rgb >> 3 is used twice)
Utility to scan a DXT1 compressed texture to determine whether it contains a transparent pixel (color0 < color1, code == 3).  This may be useful if the application lacks information as to whether the true format is GL_COMPRESSED_RGB_S3TC_DXT1_EXT or GL_COMPRESSED_RGBA_S3TC_DXT1_EXT.
Decode a DXT-compressed texture into memory.  DXT textures consist of a series of 4x4 pixel blocks in left-to-right, top-down order. The number of blocks is given by ceil(width/4)*ceil(height/4). 'data' points to the texture data. 'width' and 'height' indicate the dimensions of the texture.  We assume width and height are >= 0 but do not require them to be powers of 2 or divisible by any factor. The output is written to 'surface' with each scanline separated by 'stride' 2- or 4-byte words. 'format' indicates the type of compression and must be one of the following: GL_COMPRESSED_RGB_S3TC_DXT1_EXT: GL_COMPRESSED_RGBA_S3TC_DXT1_EXT GL_COMPRESSED_RGBA_S3TC_DXT3_EXT GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
---------------------------------------------------------------------------- EGL 1.1 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- EGL 1.2 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- EGL_EGLEXT_VERSION 3 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- ANDROID extensions ----------------------------------------------------------------------------
b0, b1, b2 are signed 16-bit quanities that have been shifted right by 'shift' bits relative to normal S16.16 fixed point
If the active textures are EGLImage, they need to be locked before they can be used. FIXME: code below is far from being optimal
---------------------------------------------------------------------------- EGL 1.1 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- EGL 1.2 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- EGL_EGLEXT_VERSION 3 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- ANDROID extensions ----------------------------------------------------------------------------
"GL_OES_byte_coordinates "              // OK "GL_OES_fixed_point "                   // OK "GL_OES_single_precision "              // OK "GL_OES_read_format "                   // OK "GL_OES_compressed_paletted_texture "   // OK "GL_OES_draw_texture "                  // OK "GL_OES_matrix_get "                    // OK "GL_OES_query_matrix "                  // OK //        "GL_OES_point_size_array "              // TODO //        "GL_OES_point_sprite "                  // TODO "GL_OES_EGL_image "                     // OK #ifdef GL_OES_compressed_ETC1_RGB8_texture "GL_OES_compressed_ETC1_RGB8_texture "  // OK #endif "GL_ARB_texture_compression "           // OK "GL_ARB_texture_non_power_of_two "      // OK "GL_ANDROID_user_clip_plane "           // OK "GL_ANDROID_vertex_buffer_object "      // OK "GL_ANDROID_generate_mipmap "           // OK
We have a dedicated TLS slot in bionic
#undef LOGD #define LOGD(...)
#undef LOGD #define LOGD(...)
this mutex protects:
We have a dedicated TLS slot in bionic
---------------------------------------------------------------------------- EGL 1.1 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- EGL 1.2 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- EGL_EGLEXT_VERSION 3 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- EGL_EGLEXT_VERSION 5 ----------------------------------------------------------------------------
---------------------------------------------------------------------------- ANDROID extensions ----------------------------------------------------------------------------
---------------------------------------------------------------------------- NVIDIA extensions ----------------------------------------------------------------------------
Input is an ETC1 compressed version of the data. Output is a 4 x 4 square of 3-byte pixels in form R, G, B
Input is a 4 x 4 square of 3-byte pixels in form R, G, B inmask is a 16-bit mask where bit (1 << (x + y * 4)) tells whether the corresponding (x,y) pixel is valid or not. Invalid pixel color values are ignored when compressing. Output is an ETC1 compressed version of the data.
Return the size of the encoded image data (does not include size of PKM header).
Encode an entire image. pIn - pointer to the image data. Formatted such that the Red component of pOut - pointer to encoded data. Must be large enough to store entire encoded image.
Decode an entire image. pIn - pointer to encoded data. pOut - pointer to the image data. Will be written such that the Red component of
Format a PKM header
Check if a PKM header is correctly formatted.
Read the image width from a PKM header
Read the image height from a PKM header
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
FIXME: this function has pointers, it should be hand written
Unless required by applicable law or agreed to in writing, software WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
required int32 context_id = 1;
required .com.android.glesv2debugger.Message.Function function = 2 [default = NEG];
required .com.android.glesv2debugger.Message.Type type = 3;
required bool expect_response = 4;
optional int32 ret = 5;
optional int32 arg0 = 6;
optional int32 arg1 = 7;
optional int32 arg2 = 8;
optional int32 arg3 = 9;
optional int32 arg4 = 16;
optional int32 arg5 = 17;
optional int32 arg6 = 18;
optional int32 arg7 = 19;
optional int32 arg8 = 20;
optional bytes data = 10;
optional .com.android.glesv2debugger.Message.DataType data_type = 23;
optional int32 pixel_format = 24;
optional int32 pixel_type = 25;
optional int32 image_width = 26;
optional int32 image_height = 27;
optional float time = 11;
optional .com.android.glesv2debugger.Message.Prop prop = 21;
optional float clock = 22;
If the constructor and destructor are not enough for setting up and cleaning up each test, you can define the following methods:
Capped conversion from float to fixed.
Creates and returns a supershape object. Based on Paul Bourke's POV-Ray implementation.
Called from the app framework.
Called from the app framework.
Following gluLookAt implementation is adapted from the
Called from the app framework. The tick is current time in milliseconds, width and height are the image dimensions to be rendered.
The following set methods are not synchronized, so should only be called within the rendering thread context. Use GLSurfaceView.queueEvent for safe access.
Main Performs the following high-level sequence of operations: 1. Command-line parsing 2. Stop framework 3. Initialization 4. Create Hardware Composer description of reference and equivalence frames 5. Have Hardware Composer render the reference and equivalence frames 6. Delay for amount of time given by endDelay 7. Start framework
Main Performs the following high-level sequence of operations: 1. Command-line parsing 2. Form a list of command-line specified graphic formats.  If 3. Stop framework 4. Initialization 5. For each graphic format in the previously formed list perform 6. Start framework
Determine the maximum number of overlays that are all of the same format that the HWC will commit to.  If allowOverlap is true, then the rectangles are laid out on a diagonal starting from the upper left corner.  With each rectangle adjust one pixel to the right and one pixel down. When allowOverlap is false, the rectangles are tiled in column major order.  Note, column major ordering is used so that the initial rectangles are all on different horizontal scan rows.  It is common that hardware has limits on the number of objects it can handle on any single row.
Measures what transforms (i.e. flip horizontal, rotate 180) are supported by the specified format
Determines which types of blends (i.e. none, premult, coverage) are supported by the specified format
Determines the minimum width of any display frame of the given format that the HWC will commit to.
Display frame minimum height
Display frame maximum width
Display frame maximum height
Determine the minimum number of pixels that the HWC will ever commit to. Note, this might be different that dfMinWidth * dfMinHeight, in that this function adjusts both the width and height from the starting dimension.
Display frame maximum dimension
Source crop minimum width
Source crop minimum height
Source crop maximum width
Source crop maximum height
Source crop minimum dimension Discovers the source crop with the least number of pixels that the HWC will commit to.  Note, this may be different from scMinWidth * scMinHeight, in that this function searches for a combination of width and height.  While the other routines always keep one of the dimensions equal to the corresponding start dimension.
Source crop maximum dimension
Source crop horizontal scale Determines the maximum factor by which the source crop can be larger that the display frame.  The commit point is discovered through a binary search of rational numbers.  The numerator in each of the rational numbers contains the dimension for the source crop, while the denominator specifies the dimension for the display frame.  On each pass of the binary search the mid-point between the greatest point committed to (best) and the smallest point in which a commit has failed is calculated.  This mid-point is then passed to a function named double2Rational, which determines the closest rational numbers just below and above the mid-point.  By default the lower rational number is used for the scale factor on the next pass of the binary search.  The upper value is only used when best is already equal to the lower value.  This only occurs when the lower value has already been tried.
Source crop vertical scale Determines the maximum factor by which the source crop can be larger that the display frame.  The commit point is discovered through a binary search of rational numbers.  The numerator in each of the rational numbers contains the dimension for the source crop, while the denominator specifies the dimension for the display frame.  On each pass of the binary search the mid-point between the greatest point committed to (best) and the smallest point in which a commit has failed is calculated.  This mid-point is then passed to a function named double2Rational, which determines the closest rational numbers just below and above the mid-point.  By default the lower rational number is used for the scale factor on the next pass of the binary search.  The upper value is only used when best is already equal to the lower value.  This only occurs when the lower value has already been tried.
Rational member functions
Num Overlays Given a list of rectangles, determine how many HWC will commit to render
Main Performs the following high-level sequence of operations: 1. Parse command-line options 2. Stop framework 3. Initialization 4. Parse frame descriptions 5. Create HWC list from frame descriptions 6. Have HWC render the list description of the frames 7. Delay for amount of time given by endDelay 8. Start framework
Parse string description of rectangle and add it to list of rectangles to be rendered.
Main Performs the following high-level sequence of operations: 1. Command-line parsing 2. Initialization 3. For each pass:
Initialize Frames Creates an array of graphic buffers, within the global variable named frames.  The graphic buffers are contained within a vector of vectors.  All the graphic buffers in a particular row are of the same format and dimension.  Each graphic buffer is uniformly filled with a prandomly selected color.  It is likely that each buffer, even in the same row, will be filled with a unique color.
Initialize Display
Open Hardware Composer Device
Color fraction class to string conversion
Dimension class to string conversion
Dimension class to hwc_rect conversion
Hardware Composer rectangle to string conversion
Parse dimension of form [width, height]
Parse fractional color of form [0.##, 0.##, 0.##] Fractional values can be from 0.0 to 1.0 inclusive.  Note, integer values of 0.0 and 1.0, which are non-fractional, are considered valid. They are an exception, all other valid inputs are fractions.
Given the integer ID of a graphic format, return a pointer to a string that describes the format.
hwcTestCreateLayerList Dynamically creates layer list with numLayers worth of hwLayers entries.
hwcTestFreeLayerList Frees memory previous allocated via hwcTestCreateLayerList().
Display the settings of the layer list pointed to by list
Display List Prepare Modifiable Displays the portions of a list that are meant to be modified by a prepare call.
Display List Handles Displays the handles of all the graphic buffers in the list.
Returns a uint32_t that contains a format specific representation of a single pixel of the given color and alpha values.
Sets the pixel at the given x and y coordinates to the color and alpha value given by pixel.  The contents of pixel is format specific.  It's value should come from a call to hwcTestColor2Pixel().
Fill a given graphic buffer with a uniform color and alpha
Fill the given buffer with a horizontal blend of colors, with the left side color given by startColor and the right side color given by endColor.  The startColor and endColor values are specified in the format given by colorFormat, which might be different from the format of the graphic buffer.  When different, a color conversion is done when possible to the graphic format of the graphic buffer.  A color of black is produced for cases where the conversion is impossible (e.g. out of gamut values).
When possible, converts color specified as a full range value in the fromFormat, into an equivalent full range color in the toFormat. When conversion is impossible (e.g. out of gamut color) a color or black in the full range output format is produced.  The input color is given as a fractional color in the parameter named color. The produced color is written over the same parameter used to provide the input color. Each graphic format has 3 color components and each of these components has both a full and in gamut range.  This function uses a table that provides the full and in gamut ranges of each of the supported graphic formats.  The full range is given by members named c[123]Min to c[123]Max, while the in gamut range is given by members named c[123]Low to c[123]High.  In most cases the full and in gamut ranges are equivalent.  This occurs when the c[123]Min == c[123]Low and c[123]High == c[123]Max. The input and produced colors are both specified as a fractional amount of the full range.  The diagram below provides an overview of the conversion process.  The main steps are: 1. Produce black if the input color is out of gamut. 2. Convert the in gamut color into the fraction of the fromFromat 3. Convert from the fraction of the in gamut from format range to 4. Covert from the fraction of the in gamut to format to the
TODO: Use PrintGLString, CechckGlError, and PrintEGLConfiguration
Emit a function in several variants: if nativeDecl: public native <returntype> func(args); if !nativeDecl: if interfaceDecl:  public <returntype> func(args); if !interfaceDecl: public <returntype> func(args) { body }
void glGetProgramInfoLog ( GLuint shader, GLsizei maxLength, GLsizei* length, GLchar* infoLog )
void glGetShaderInfoLog ( GLuint shader, GLsizei maxLength, GLsizei* length, GLchar* infoLog )
const GLubyte * glGetString ( GLenum name )
const GLubyte * glGetString ( GLenum name )
It is important to stop the cpu clocks first, as this will cpu wait for the gpu to finish.
Ignores scale
Ignores scale
Ignores scale
having unknown values in our arrays can throw off the timing a lot, perhaps handling NaN values is a lot slower. Anyway, this guy is just meant to put reasonable values in our arrays.
Putting random generation of the matrix inside performTest() would help us avoid anomalous runs, but takes up 25% or more of the function time.
init the blitmask bench
having unknown values in our arrays can throw off the timing a lot, perhaps handling NaN values is a lot slower. Anyway, this guy is just meant to put reasonable values in our arrays.
returns true if c is whitespace, including null
overrides from SkEventSink
Create a bitmap image suitable for testing SkBitmap::scrollRect().
Stamp out 9 copies of origBitmap, scrolled in each direction (and not scrolled at all).
since PNG insists on unpremultiplying our alpha, we take no precision chances
Returns true if processing should continue, false to skip the remainder of this config for this GM. a factory to generate the context, always call readPixels() (logically a noop for rasters, if wasted time), and thus collapse the GPU special case and also let this be used for SkPicture testing.
Returns true if the test should continue, false if the test should halt.
Test: draw into a bitmap or pdf. Depending on flags, possibly compare to an expected image and possibly output a diff image if it fails to match.
test shader w/ transparency
test opaque shader
This guy needs to be exported to java, so don't make it virtual
Return the number >> 16. Asserts that this does not loose any significant high bits.
Add the specified 32 bit integer to the number
Add the specified Sk64 to the number
return (this + other >> 16) as a 32bit result
return (this + Sk64(hi, lo) >> 16) as a 32bit result
Return the byte size of the pixels, based on the height and rowBytes.
Return the shift-per-pixel for the specified config. If the config is
Use the standard HeapAllocator to create the pixelref that manages the
Call this to be sure that the bitmap is valid enough to be drawn (i.e.
Initialize the bitmap's pixels with the specified color+alpha, automatically converting into the correct format
Initialize the bitmap's pixels with the specified color, automatically converting into the correct format
called by subclasses during creation
Return the array of colors for reading and/or writing. This must be
Balancing call to lock16BitCache().
Initialize with bitmap, locking its colortable if present
Initialize with a colortable (may be null)
Locks the table and returns is colors (assuming ctable is not null) and
returns the address of the byte that contains the x coordinate
Override in your subclass. This is called with the device bounds of an
Optionally, override in your subclass to receive the glyph ID when
Initialize RBuffer with a data pointer, but no specified length.
Initialize RBuffer with a data point and length.
Read the specified number of bytes from the data pointer. If buffer is not
Helper for clipRegion(rgn, kReplace_Op). Sets the current clip to the
Draw the specified rectangle using the specified paint. The rectangle
Get the local clip bounds with an anti-aliased edge.
Return a SkColor value from 8 bit component values
Convert the argb color to its HSV components.
Convert HSV components to an ARGB color. The alpha component set to 0xFF.
Turn 0..255 into 0..256 by adding 1 at the half-way point. Used to turn a
The caller may want negative values, so keep all params signed (int) so we don't accidentally slip into unsigned math and lose the sign extension when we shift (in SkAlphaMul)
Returns (src * alpha + dst * (255 - alpha)) / 255 This is more accurate than SkAlphaBlend, but slightly slower
Expand the 16bit color into a 32bit value that can be scaled all at once
Compress an expanded value (from SkExpand_rgb_16) back down to a 16bit
Scale the 16bit color value by the 0..256 scale parameter.
Blend src and dst 16bit colors by the 0..256 scale parameter.
Pack the components into a SkPMColor, checking (in the debug version) that the components are 0..255, and are already premultiplied (i.e. alpha >= color)
Same as SkPackARGB32, but this version guarantees to not check that the values are premultiplied in the debug version.
Return c in expanded_rgb_16 format, but also scaled up by 32 (5 bits)
SrcOver the 32bit src color with the 16bit dst, returning a 16bit value
Convert a 16bit pixel to a 32bit pixel
similar to SkPixel16ToPixel32, but returns SkColor instead of SkPMColor
Expand the SkPMColor16 color into a 32bit value that can be scaled all at
Compress an expanded value (from SkExpand_4444) back down to a SkPMColor16.
cheap 2x2 dither
Assumes 16bit is in standard RGBA order.
Undo the operation of SkExpand_8888, turning the argument back into
Like SkExpand_8888, this transforms a pmcolor into the expanded 4444 format,
Like data(), returns a read-only ptr into the data, but in this case it is cast to uint8_t*, to make it easy to add an offset to it.
just for subclasses, to assign a custom pixelref
Swap the two bytes in the low 16bits of the parameters.
Vector version of SkEndianSwap16(), which swaps the
Reverse all 4 bytes in a 32bit value.
Vector version of SkEndianSwap16(), which swaps the
pins over/under flows to max/min int32 (slower than just a cast)
Returns the signed fraction of a SkFixed
This guy does not handle NaN or other obscurities, but is faster than
Call this with a pre-loaded array of Factories, in the same order as were created/written by the writer. SkPicture uses this.
Call this with an initially empty array, so the reader can cache each factory it sees by name. Used by the pipe code in conjunction with the writer's kInlineFactoryNames_Flag.
Convert a sign-bit int (i.e. float interpreted as int) into a 2s compliement
Convert a 2s compliment int to a sign-bit (i.e. int interpreted as float).
Helper to see a float as its bit pattern (w/o aliasing warnings)
Helper to see a bit pattern as a float (w/o aliasing warnings)
Return the float as a 2s compliment int. Just to be used to compare floats
Return the 2s compliment int as a float. This undos the result of
Return the float cast to an int.
Return the floor of the float as an int.
Return the float rounded to an int.
Return the ceiling of the float as an int.
If math.h had powf(float, float), I could remove this wrapper
Returns the address of the byte that holds the specified bit.
Returns the address of the specified byte.
Return the address of the specified 16bit mask. In the debug build, this asserts that the mask's format is kLCD16_Format, and that (x,y) are contained in the mask's fBounds.
Return the address of the specified 32bit mask. In the debug build, this asserts that the mask's format is kLCD32_Format, and that (x,y) are contained in the mask's fBounds.
If sign == -1, returns -n, else sign must be 0, and returns n.
Return x with the sign of y
Returns (value < 0 ? 0 : value) efficiently (i.e. no compares or branches)
Given an integer and a positive (max) integer, return the value
Given a positive value and a positive max, return the value
Returns the smallest power-of-2 that is >= the specified value. If value
Returns the log2 of the specified value, were that value to be rounded up
Returns true if value is a power of 2. Does not explicitly check for
Return a*b/255, truncating away any fractional bits. Only valid if both
Return a*b/255, rounding any fractional bits. Only valid if both
Return (a*b)/255, taking the ceiling of any fractional bits. Only valid if
Return a*b/((1 << shift) - 1), rounding any fractional bits.
Just the rounding step in SkDiv255Round: round(value / 255)
Returns a mask bitfield describing the types of transformations
Returns true if the matrix is identity.
Returns true if will map a rectangle to another rectangle. This can be
Returns true if the matrix contains perspective elements.
Apply this matrix to the array of points, overwriting it with the
Like mapPoints but with custom byte stride between the points. Stride should be a multiple of sizeof(SkScalar).
Like mapPoints but with custom byte stride between the points.
Apply this matrix to the array of vectors specified by src, and write
Apply this matrix to the rectangle, and write the transformed rectangle
Testing routine; the matrix's type cache should never need to be manually invalidated during normal use.
Returns true if we already know that the matrix is identity;
helpers for SkRefCnt
Helper for getFlags(), returning true if kAntiAlias_Flag bit is set
Helper for getFlags(), returning true if kDither_Flag bit is set
Helper for getFlags(), returning true if kLinearText_Flag bit is set
Helper for getFlags(), returning true if kSubpixelText_Flag bit is set
Helper for getFlags(), returning true if kUnderlineText_Flag bit is set
Helper for getFlags(), returns true if kStrikeThruText_Flag bit is set
Helper for getFlags(), returns true if kFakeBoldText_Flag bit is set
Helper for getFlags(), returns true if kDevKernText_Flag bit is set
Returns true if the current paint settings allow for fast computation of
Return the number of drawable units in the specified text buffer.
Return the width of the text. This will return the vertical measure if isVerticalText() is true, in which case the returned value should be treated has a height instead of a width.
Set the path's fill type. This is used to define how "inside" is
Toggle between inverse and normal filltypes. This reverse the return value of isInverseFillType()
Return the path's convexity, as stored in the path. If it is currently unknown, and the computeIfUnknown bool is true, then this will first call ComputeConvexity() and then return that (cached) value.
DEPRECATED: use getConvexity() Returns true if the path is flagged as being convex. This is not a confirmed by any analysis, it is just the value set earlier.
DEPRECATED: use setConvexity() Set the isConvex flag to true or false. Convex paths may draw faster if this flag is set, though setting this to true on a path that is in fact not convex can give undefined results when drawn. Paths default to isConvex == false
Return the number of points in the path
Returns the bounds of the path's points. If the path contains 0 or 1
Calling this will, if the internal cache of the bounds is out of date,
Set the beginning of the next contour to the point
Add a line from the last point to the specified point. If no moveTo()
Add a quadratic bezier from the last point, approaching control point
Add a cubic bezier from the last point, approaching control points p1
Append a line and arc to the current path. This is the same as the
Transform the points in this path by matrix
Set the last point on the path. If no points have been added, moveTo(p)
Copy a URI string to this pixelref, or clear the URI if the uri is null
Copy a URI string to this pixelref
Returns the dot product of a and b, treating them as 2D vectors
Returns the cross product of a and b, treating them as 2D vectors
Set the point's X and Y coordinates by automatically promoting (x,y) to
Set the point's X and Y coordinates by automatically promoting p's
counter-clockwise fan
counter-clockwise fan
Returns the euclidian distance between a and b
Returns the distance to the infinite line between two pts. Also optionally returns the side of the line that the pt falls on (looking along the line from a to b)
Returns the distance to the line segment between pts a and b.
Make this vector be orthogonal to vec. Looking down vec the new vector will point in direction indicated by side (which must be kLeft_Side or kRight_Side).
Return the next pseudo random number, as an unsigned value of
Return the next pseudo random unsigned number, mapped to lie within
Return the next pseudo random number as a signed 64bit value.
alias for set(l, t, r, b)
Make the largest representable rectangle
Make the largest representable rectangle, but inverted (e.g. fLeft will be max 32bit and right will be min 32bit).
Offset set the rectangle by adding dx to its left and right,
Inset the rectangle by (dx,dy). If dx is positive, then the sides are moved inwards,
Returns true if (x,y) is inside the rectangle and the rectangle is not
Returns true if the 4 specified sides of a rectangle are inside or equal to this rectangle.
Returns true if the specified rectangle r is inside or equal to this rectangle.
Return true if this rectangle contains the specified rectangle.
If r intersects this rectangle, return true and set this rectangle to that
If rectangles a and b intersect, return true and set this rectangle to
If rectangles a and b intersect, return true and set this rectangle to
If the rectangle specified by left,top,right,bottom intersects this rectangle,
Returns true if a and b are not empty, and they intersect
Update this rectangle to enclose itself and the specified rectangle.
Returns true iff all values in the rect are finite. If any are infinite or NaN (or SK_FixedNaN when SkScalar is fixed) then this returns false.
Initialize the rect with the 4 specified integers. The routine handles
alias for set(pts, count)
Make the largest representable rectangle, but inverted (e.g. fLeft will be max and right will be min).
Inset the rectangle by (dx,dy). If dx is positive, then the sides are
Return true if this rectangle is not empty, and the specified sides of a rectangle are not empty, and they intersect.
Return true if rectangles a and b are not empty and intersect.
Grow the rect to include the specified (x,y). After this call, the following will be true: fLeft <= x <= fRight && fTop <= y <= fBottom. This is close, but not quite the same contract as contains(), since contains() treats the left and top different from the right and bottom. contains(x,y) -> fLeft <= x < fRight && fTop <= y < fBottom. Also note that contains(x,y) always returns false if the rect is empty.
Returns true if (p.fX,p.fY) is inside the rectangle, and the rectangle is not empty. Contains treats the left and top differently from the right and bottom. The left and top coordinates of the rectangle are themselves considered to be inside, while the right and bottom are not. Thus for the rectangle {0, 0, 5, 10}, (0,0) is contained, but (0,10), (5,0) and (5,10) are not.
Returns true if (x,y) is inside the rectangle, and the rectangle is not empty. Contains treats the left and top differently from the right and bottom. The left and top coordinates of the rectangle are themselves considered to be inside, while the right and bottom are not. Thus for the rectangle {0, 0, 5, 10}, (0,0) is contained, but (0,10), (5,0) and (5,10) are not.
Return true if this rectangle contains r, and if both rectangles are not empty.
Set the dst rectangle by rounding this rectangle's coordinates to their nearest integer values using SkScalarRound.
Set the dst rectangle by rounding "out" this rectangle, choosing the SkScalarFloor of top and left, and the SkScalarCeil of right and bottom.
Expand this rectangle by rounding its coordinates "out", choosing the floor of top and left, and the ceil of right and bottom. If this rect is already on integer coordinates, then it will be unchanged.
Destruct, asserting that the reference count is 1.
Increment the reference count. Must be balanced by a call to unref().
Decrement the reference count. If the reference count is 1 before the
Check if the argument is non-null, and if so, call obj->ref()
Check if the argument is non-null, and if so, call obj->unref()
Return the hosted object (which may be null), transferring ownership. The reference count is not modified, and the internal ptr is set to NULL so unref() will not be called in our destructor. A subsequent call to detach() will do nothing and return null.
Replace this region with the specified region, and return true if the resulting region is non-empty.
Return true if this region is a single rectangle (not complex) and the specified rectangle is contained by this region. Returning false is not a guarantee that the rectangle is not contained by this region, but return true is a guarantee that the rectangle is contained by this region.
Return true if this region is a single rectangle (not complex) and the specified rectangle is contained by this region. Returning false is not a guarantee that the rectangle is not contained by this region, but return true is a guarantee that the rectangle is contained by this region.
Return true if this region is empty, or if the specified rectangle does not intersect the region. Returning false is not a guarantee that they intersect, but returning true is a guarantee that they do not.
Return true if this region, or rgn, is empty, or if their bounds do not intersect. Returning false is not a guarantee that they intersect, but returning true is a guarantee that they do not.
Set this region to the result of applying the Op to this region and the specified rectangle: this = (this op rect). Return true if the resulting region is non-empty.
Returns true if x is not NaN and not infinite
SkIntToScalar(n) returns its integer argument as an SkScalar If we're compiling in DEBUG mode, and can thus afford some extra runtime cycles, check to make sure that the parameter passed in has not already been converted to SkScalar.  (A double conversion like this is harmless for SK_SCALAR_IS_FLOAT, but for SK_SCALAR_IS_FIXED this causes trouble.) Note that we need all of these method signatures to properly handle the various types that we pass into SkIntToScalar() to date: int, size_t, U8CPU, etc., even though what we really mean is "anything but a float".
Returns the value pinned between 0 and max inclusive
Returns the value pinned between min and max inclusive
Returns -1 || 0 || 1 depending on the sign of value: -1 if x < 0 0 if x == 0 1 if x > 0
Scalar result version of above
<= is slower than < for floats, so we use < for our tolerance test
Linearly interpolate between A and B, based on t.
Compute the rowbytes for the specified width and mask-format.
remember our glyph offset/base
Assign an SkXRect from a SkIRect, by promoting the src rect's coordinates
Assign an SkXRect from a SkRect, by promoting the src rect's coordinates
Round the SkXRect coordinates, and store the result in the SkIRect.
Round the SkXRect coordinates out (i.e. use floor for left/top, and ceiling
Helper function that returns true if this shader's shadeSpan16() method can be called.
Helper to check the flags to know if it is legal to call shadeSpan16()
Returns true iff fWidth == 0 && fHeight == 0
Returns true if either widht or height are <= 0
Set the width and height to 0
If width or height is < 0, it is set to 0
Creates an empty array with no initial storage
Creates an empty array that will preallocate space for reserveCount elements.
Copies one array to another. The new array will be heap allocated.
Creates a SkTArray by copying contents of a standard C array. The new array will be heap allocated. Be careful not to use this constructor when you really want the (void*, int) version.
Adds 1 new default-constructed T value and returns in by reference. Note the reference only remains valid until the next call that adds or removes elements.
Version of above that uses a copy constructor to initialize the new item
Allocates n more default T values, and returns the address of the start of that new range. Note: this address is only valid until the next API call made on the array that might add or remove elements.
Version of above that uses a copy constructor to initialize all n items to the same T.
Version of above that uses a copy constructor to initialize the n items to separate T values.
Removes the last element. Not safe to call when count() == 0.
Removes the last n elements. Not safe to call when count() < n.
Pushes or pops from the back to resize. Pushes will be default initialized.
equivalent to operator[](count()-1-i)
Return a ptr to the array of data, to be freed with sk_free. This also
Allocate count number of T elements
Allocate count number of T elements
doesn't preserve contents
If the mutex has not been release, release it now.
If the mutex has not been release, release it now.
The label is not deep-copied, so its address must remain valid for the lifetime of this object
Return a pointer to a default-initialized instance of the class. If a previous instance had been initialzied (either from init() or set()) it will first be destroyed, so that a freshly initialized instance is always returned.
Copy src into this, and return a pointer to a copy of it. Note this will always return the same pointer, so if it is called on a lazy that has already been initialized, then this will copy over the previous contents.
Delete the current object, if any.  Then take ownership of the
Without deleting the current object, return it and forget about it.
bzero is safer than memset, but we can't rely on it, so... sk_bzero()
Returns true if the value can be represented with signed 16bits
Returns true if the value can be represented with unsigned 16bits
Faster than SkToBool for integral conditions. Returns 0 or 1
Returns signed 32 bit value pinned between min and max, inclusively
Use to cast a pointer to a different type, and maintaining strict-aliasing
Assign a new ptr allocated with sk_malloc (or null), and return the
Free the current buffer, and set the internal reference to NULL. Same
Reallocates the block to a new size. The ptr may or may not change.
Releases the block back to the heap
Transfer ownership of the current ptr to the caller, setting the
Creates initially empty storage. get() returns a ptr, but it is to a zero-byte allocation. Must call reset(size) to return an allocated block.
Allocate a block of the specified size. If size <= kSize, then the allocation will come from the stack, otherwise it will be dynamically allocated.
Free the allocated block (if any). If the block was small enought to have been allocated on the stack (size <= kSize) then this does nothing.
Return a new block of the requested size, freeing (as necessary) any previously allocated block. As with the constructor, if size <= kSize then the return block may be allocated locally, rather than from the heap.
index this table with alpha [0..255]
NOTE: label contents are not copied, just the ptr is
write count bytes (must be a multiple of 4)
Write size bytes from values. size must be a multiple of 4, though values need not be 4-byte aligned.
DEPRECATED: call AsMode(...)
allow subclasses to update this after we unflatten
Helper function to return the matrixref of the specified shape.
Helper method to append a shape, passing countShapes() for the index
must be public for Registrar :(
Call to rewind iter, first checking to see if iter is NULL
Pack 4 components (RGBA) into a GrColor int
Reads a rectangle of pixels from a render target.
Copy the src pixels [buffer, rowbytes, pixelconfig] into a render target at the specified rectangle.
Reads a rectangle of pixels from a texture.
Writes a rectangle of pixels to a texture.
The mask can be alpha-only or per channel. It is applied after the colorfilter
mask's sampler matrix is always applied to the positions (i.e. no explicit texture coordinates)
pre-concats sampler matrices for non-NULL textures and masks
sets paint to src-over, solid white, no texture, no mask
helpers for GrContext, GrTextContext
When a texture unrefs an owned rendertarget this func removes the back pointer. This could be done called from texture's destructor but would have to be done in derived class. By the time of texture base destructor it has already lost its pointer to the rt.
Default sampler state is set to clamp, use normal sampling mode, be unfiltered, and use identity matrix.
Sets the parameters for kRadial2_SampleMode. The texture matrix must be set so that the first point is at (0,0) and the second point lies on the x-axis. The second radius minus the first is 1 unit. The additional parameters to define the gradient are specified by this function.
Use to cast a ptr to a different type, and maintain strict-aliasing
restores previously saved value (if any) and saves value for passed T
Approximate number of bytes used by the texture
base class cons sets to NULL subclass cons can create and set
GrResource overrides
divide, rounding up
align up
amount of pad needed to align up
align down
Return true if n is a power of 2
Return the next power of 2 >= n.
Return the number of bytes-per-pixel for the specified mask format.
Returns true if the pixel config has 8bit r,g,b,a components in that byte
Returns true if the pixel config has 8bit b,g,r,a components in that byte
Takes a config and returns the equivalent config with the R and B order
Premultiplied alpha is the usual for skia. Therefore, configs that are ambiguous (alpha-only or color-only) are considered premultiplied.
Gets the number of points associated with a path command.
optional. This gets automatically called in the destructor (only once)
Decoding is synchronous, but for long decodes, a different thread can
calls SkImageDecoder::Factory(stream)
Returns a SkPDFGlyphSetMap which represents glyph usage of every font that shows on this device.
Add the name to the dictionary with the given key.
Convert an Android keycode to an SkKey.  This is an incomplete list, only including keys used by the sample app.
Create an imageref from the specified bitmap using the colorspace returned by CGColorSpaceCreateDeviceRGB()
Set the whether the repeat is mirrored.
Set the whether the repeat is mirrored.
Set the target ID for this event. 0 means none. Calling this will automatically clear the targetProc to null. When an event is dispatched from the event queue, it is either sent to the eventsink matching the targetID (if not 0), or the target proc is called (if not NULL).
Set the target ID for this event. NULL means none. Calling this will automatically clear the targetID to 0. When an event is dispatched from the event queue, it is either sent to the eventsink matching the targetID (if not 0), or the target proc is called (if not NULL).
Post to the event queue using the event's targetID or target-proc. The event must be dynamically allocated, as ownership is transferred to the event queue. It cannot be allocated on the stack or in a global.
Fill out buffer with the compressed format GL expects from a colortable
Return true if the bitmap cannot be supported in its current config as a
should return max of all contours, rather than the sum (to save temp RAM)
#define TRACE_TEXTURE_CREATE
counter-clockwise fan
call rewind only if this is non-null
must be in the same order as SkXfermode::Coeff in SkXfermode.h
create a triangle strip that strokes the specified triangle. There are 8
move this guy into SkGL, so we can call it from SkGLDevice
stolen from SkDraw.cpp - D1G_NoBounder_RectClip
public exposure of texture cache settings
#define TRACE_HASH_HITS #define TRACE_TEXTURE_CACHE_PURGE
registers GMs as Samples This can't be performed during static initialization because it could be run before GMRegistry has been fully built.
ensure that we don't accidentally screw up the bounds when the oval is fractional, and the impl computes the center and radii, and uses them to reconstruct the edges of the circle. see bug# 1504910
test drawing with strips of fading gradient above and below
Ensure that the max of the original and dithered value (for alpha) is always
SkActive holds array of interpolators
void SkActive::SkState::bumpSave() { if (fMode != SkApply::kMode_hold) if (fTransition == SkApply::kTransition_reverse) { } else if (fSave < fDuration)
differs from SkAnimator::decodeStream in that it does not reset error state
differs from SkAnimator::decodeURI in that it does not set URI base
void SkDisplayable::apply(SkAnimateMaker& , const SkMemberInfo* , SkASSERT(0);
SkDisplayable* SkAdd::resolveTarget(SkAnimateMaker& maker) { return use;
currently this only removes onLoad events
SkInclude::~SkInclude() { src.unref();
!!! optimize this by replacing function with a byte-sized lookup table
!!! replace with inline
Find Nth memberInfo
Find named memberinfo
note that entire expression is treated as if it were enclosed in parens an open paren is always the first thing in the op stack
fTrackArray.append() = array; }
check to see that there are no missing or duplicate entries
!!! things to do add separate processing loop to advance while suppressed or, include jump offset to skip suppressed code?
assert we're exactly width-wide, and then return the number of bytes used
modify row in place, trimming off (zeros) from the left and right sides. return the number of bytes that were completely eliminated from the left
assert that this row is exactly this width
can't validate before we're done, since trimming is part of the process of making us valid after the Builder. Since we build from top to bottom, its possible our fBounds.fBottom is bigger than our last scanline of data, so we trim fBounds.fBottom back up. TODO: check for duplicates in X and Y to further compress our data
only called by BuilderBlitter
We track this, in case the scan converter skipped some number of scanlines at the (relative to the bounds it was given). This allows the builder, during its finish, to trip its bounds down to the "real" top.
It can be expensive to build a local aaclip before applying the op, so we first see if we can restrict the bounds of new rect to our current bounds, or note that the new rect subsumes our current clip.
Returns true if the scanline contains only a single run, of alpha value 0.
Cut (at offset x in the buffer) a run into two shorter runs with matching alpha values. Used by the RectClipBlitter to trim a RLE encoding to match the clipping rectangle.
MipLevel    fLevel[fLevelCount]; Pixels[]
We explicitly use the same allocator for our pixels that SkMask does,
returns dirt in the top 16bits, but we don't care, since we only store the low 16bits.
returns true and set color if the bitmap can be drawn as a single color (for efficiency)
returns expanded * 5bits
turn an expanded 565 * 5bits into SkPMColor g:11 | r:10 | x:1 | b:10
returns answer in SkPMColor format
note: we could special-case on a matrix which is skewed in X but not Y. this would require a more general setup thatn SCALE does, but could use SCALE's inner loop that only looks at dx
returns 0...(n-1) given any x (positive or negative).
stores the same as SCALE, but is cheaper to compute. Also since there is no scale, we don't need/have a FILTER version
note: we could special-case on a matrix which is skewed in X but not Y. this would require a more general setup thatn SCALE does, but could use SCALE's inner loop that only looks at dx
note: we could special-case on a matrix which is skewed in X but not Y. this would require a more general setup thatn SCALE does, but could use SCALE's inner loop that only looks at dx
#define TEST_SRC_ALPHA
need DitherExpand888To4444(expand, dither)
these guys are not virtual, just a helpers
return 1 or 0 from a bool
returning null means the caller will call SkBlitter::Choose() and have wrapped the source bitmap inside a shader
Helpers for computing fast bounds for quickReject tests
can only be called after calling updateMC()
can't draw it if its empty, or its too big for a fixed-point width or height
this is not virtual, so it must call a virtual method so that subclasses will see its action
current impl ignores edgetype, and relies on
These are the virtual drawing methods
this one is non-virtual, so it can be called safely by other canvas apis
These methods are NOT virtual, and therefore must call back into virtual methods, rather than actually drawing themselves.
data[] follows
returns [0..count] for the number of steps (<= count) for which x0 <= edge given each step is followed by x0 += dx
Returns true if this Rec can be intersected in place with a new clip
call SkRefCnt's constructor explicitly, to avoid warning
We call setContext on our two worker shaders. However, we
Trapezoid accessors return non-null for any complete trapezoids.
Eliminate a trapezoid.
Remove this Vertex from the { prev, next } linked list.
Remove zero-height trapezoids.
Enhance the polygon with trapezoids.
Triangulate an unimonotone chain.
Split the polygon into sets of unimonotone chains, and eventually call TriangulateMonotone() to convert them into triangles.
assumes fPtr was allocated via sk_malloc
assumes context is a SkData
aa versions
square procs (strokeWidth > 0 but matrix is square-scale (sx == sy)
If this guy returns true, then chooseProc() must return a valid proc
For the purposes of drawing bitmaps, if a matrix is "almost" translate
TODO: change the prototype to take fixed, and update the callers
called from a curve subclass
f(1/3) = (8a + 12b + 6c + d) / 27
src[] must be monotonic in Y. This routine copies src into dst, and sorts
Modify pts[] in place so that it is clipped in Y to the clip rect
srcPts[] must be monotonic in X and Y
Given 4 cubic points (either Xs or Ys), and a target X or Y, compute the
Modify pts[] in place so that it is clipped in Y to the clip rect
srcPts[] must be monotonic in X and Y
Given a Y value, return a subset of the proc table for that value.
Given a subtable returned by SkGetBilinearFilterPtrProcYTable(), return the proc for the
the ARM compiler generates an extra BIC, so I use the dirty version instead
returns the low 24-bits, so we need to OR in the magic_bit afterwards
same as (int)float
same as (int)floor(float)
same as (int)floor(float + 0.5)
same as (int)ceil(float)
From Numerical Recipes in C.
Trim A/B/C down so that they are all <= 32bits
Quad'(t) = At + B, where
Returns 0 for 1 quad, and 1 for two quads, either way the answer is
Returns 0 for 1 quad, and 1 for two quads, either way the answer is
F(t)    = a (1 - t) ^ 2 + 2 b t (1 - t) + c t ^ 2 F'(t)   = 2 (b - a) + 2 (a - 2b + c) t F''(t)  = 2 (a - 2b + c) A = 2 (b - a) B = 2 (a - 2b + c) Maximum curvature for a quadratic means solving Fx' Fx'' + Fy' Fy'' = 0 t = - (Ax Bx + Ay By) / (Bx ^ 2 + By ^ 2)
CUBICS // CUBICS // CUBICS // CUBICS // CUBICS // CUBICS // CUBICS // CUBICS
return At^2 + Bt + C
Cubic'(t) = At^2 + Bt + C, where
Given 4 points on a cubic bezier, chop it into 1, 2, 3 beziers such that
Solve coeff(t) == 0, returning the number of roots that
Looking for F' dot F'' == 0
Looking for F' dot F'' == 0
Find t value for quadratic [a, b, c] = d.
given a quad-curve and a point (x,y), chop the quad at that point and return
This guy calls the visitor from within the mutext lock, so the visitor
Return the vertical metrics for this strike.
Detach a strike from the global cache matching the specified descriptor.
flags are of the form param; or param=value;
return X coordinate of intersection with horizontal line at Y
return Y coordinate of intersection with vertical line at X
returns true if outer contains inner, even if inner is empty. note: outer.contains(inner) always returns false if inner is empty.
return value between the two limits, where the limits are either ascending or descending.
returns the product if it is positive and fits in 31 bits. Otherwise this
We explicitly use this allocator for SkBimap pixels, so that we can
We explicitly use this allocator for SkBimap pixels, so that we can
mod(float numer, float denom) seems to always return the sign
this guy perhaps can go away, if we have a fract/high-precision way to scale matrices
we declar a,b,c,d to all be doubles, because we want to perform double-precision muls and subtract, even though the original values are from the matrix, which are floats.
Taken from Rob Johnson's original sample code in QuickDraw GX
xyIndex is 0 for fAdvanceX or 1 for fAdvanceY
SkFontHost can override this choice in FilterRec()
if linear-text is on, then we force hinting to be off (since that's sort of the point of linear-text.
return true if the paint is just a single color (i.e. not a shader). If its a shader, then we can't compute a const luminance for it :(
returns 0..kLuminance_Max
Return the scalar with only limited fractional precision. Used to consolidate matrices that vary only slightly when we create our key into the font cache, since the font scaler typically returns the same looking resuts for tiny changes in the matrix.
ignoreGamma tells us that the caller just wants metrics that are unaffected by gamma correction, so we jam the luminance field to 0 (most common value for black text) in hopes that we get a cache hit easier. A better solution would be for the fontcache lookup to know to ignore the luminance field entirely, but not sure how to do that and keep it fast.
To save space/time, we analyze the paint, and write a truncated version of
Move these to their own file soon.
Path.bounds is defined to be the bounds of all the control points. If we called bounds.join(r) we would skip r if r was empty, which breaks our promise. Hence we have a custom joiner that doesn't look at emptiness
returns true if we should proceed
ignore the initial moveto, and stop when the 1st contour ends
ignore the last point of the 1st contour
marked as a friend in SkPath.h
Move to the next contour in the path. Return true if one exists, or false if
clipparams are packed in 5 bits doAA:1 | regionOp:4
We "normalize" x,y to be .14 values (so we can square them and stay 32bits.
If we somehow returned the fact that we had to flip the pts in Y, we could
return true if x is nearly integral (within 1/16) since that is the highest precision our aa code can have.
Our default implementation of the virtual method just scan converts
Pass in a scanline, beginning with the Left value of the pair (i.e. not the Y beginning)
returns true if runs are just a rect
Given count RunTypes in a complex region, return the worst case number of
Given a number of intervals, what is the worst case representation of that
Given the counts of RunTypes in two regions, return the worst-case number
fillout edge[] from rects[], sorted. Return the head, and set the tail
Return the next context, creating it if its not already created, but return
This loops through all available fallback contexts (if needed) until it
This guy takes a float-rect, but with the key improvement that it has
We repeat the clipping logic of AntiFillXRect because the float rect might
calls blitRect() if the rectangle is non-empty
1 - (1 - a)*(1 - b)
Must be explicitly defined on subclasses.
May not be called on BaseSuperBlitter because it blits out of order.
Returns non-zero if (value << shift) overflows a short, which would mean
we don't just draw 4 lines, 'cause that can leave a gap in the bottom-right and double-hit the top-left. TODO: handle huge coordinates on rect (before calling SkScalarToFixed)
return true if we're done with this edge
we do not expect to get called with these entrypoints
clipRect may be null, even though we always have a clip. This indicates that the path is contained in the clip, and so we can ignore it during the blit clipRect (if no null) has already been shifted up
if we had a asAColor method, that would be more efficient...
return non-zero if the path is too big, and should be shrunk to avoid
Strings are stored as: length[4-bytes] + string_data + '\0' + pad_to_mul_4
idea for higher precision blends in xfer procs (and slightly faster) see DstATop as a probable caller
kClear_Mode,    //!< [0, 0]
kSrc_Mode,      //!< [Sa, Sc]
kDst_Mode,      //!< [Da, Dc]
kSrcOver_Mode,  //!< [Sa + Da - Sa*Da, Sc + (1 - Sa)*Dc]
kDstOver_Mode,  //!< [Sa + Da - Sa*Da, Dc + (1 - Da)*Sc]
kSrcIn_Mode,    //!< [Sa * Da, Sc * Da]
kDstIn_Mode,    //!< [Sa * Da, Sa * Dc]
kSrcOut_Mode,   //!< [Sa * (1 - Da), Sc * (1 - Da)]
kDstOut_Mode,   //!< [Da * (1 - Sa), Dc * (1 - Sa)]
kSrcATop_Mode,  //!< [Da, Sc * Da + (1 - Sa) * Dc]
kDstATop_Mode,  //!< [Sa, Sa * Dc + Sc * (1 - Da)]
kXor_Mode   [Sa + Da - 2 * Sa * Da, Sc * (1 - Da) + (1 - Sa) * Dc]
returns 255 * sqrt(n/255)
Clamp //Repeat //Mirror //None Clamp */ XTM_N,  XTM_T,   XTM_Y,   XTM_N, Repeat*/ XTM_T,  XTM_T,   XTM_Y,   XTM_N, Mirror*/ XTM_X,  XTM_X,   XTM_XY,  XTM_X, None  */ XTM_N,  XTM_N,   XTM_Y,   XTM_N,
returns 0..31
returns 0..15
returns 0..255
The sum buffer is an array of u32 to hold the accumulated sum of all of the
This is the path for apply_kernel() to be taken when the kernel is wider than the source image.
The sections are: On some operating systems, the center section is unrolled for additional speedup.
This is the path for apply_kernel_interp() to be taken when the kernel is wider than the source image.
The sections are: On some operating systems, the center section is unrolled for additional speedup.
src is [20] but some compilers won't accept __restrict__ on anything but an raw pointer or reference
Can't use a two-argument function with side effects like this in a constructor's initializer's argument list because the order of evaluations in that context is undefined (and backwards on linux/gcc).
We take the original colors, not our premultiplied PMColors, since we can
2x2 dither a fixed-point color component (8.16) down to 8, matching the semantics of how we 2x2 dither 32->16
For dithering with premultiply, we want to ceiling the alpha component, to ensure that it is always >= any color component.
Because our caller might rebuild the same (logically the same) gradient over and over, we'd like to return exactly the same "bitmap" if possible, allowing the client to utilize a cache of our bitmap (e.g. with a GPU). To do that, we maintain a private cache of built-bitmaps, based on our colors and positions. Note: we don't try to flatten the fMapper, so if one is present, we skip the cache for now.
Return true if fx, fx+dx, fx+2*dx, ... is always in range
Return true if (fx * fy) is always inside the unit circle SkPin32 is expensive, but so are all the SkFixedMul in this test, so it shouldn't be run if count is small.
On Linux, this is faster with SkPMColor[] params than SkPMColor* SK_RESTRICT
Two-point radial gradients are specified by two circles, each with a center
Our table stores precomputed values for atan: [0...1] -> [0..PI/4]
unsigned div_64(int numer, int denom);
Given x,y in the first quadrant, return 0..63 for the angle [0..90]
Even with kEntirePaint_Bits, we always ensure that the master paint's text-encoding is respected, since that controls how we interpret the text/length parameters of a draw[Pos]Text call.
Should we add this to canvas?
Routines for flattening
we always return an opaque color, 'cause I don't know what to do with the alpha-component and still return a valid premultiplied color.
This uses deprecated functions, should rewrite using dlopen, dlsym, dlclose
We use OSMesaGetProcAddress for every gl function to avoid accidentally using non-Mesa gl functions.
returns +1 or -1, depending on the sign of x returns +1 if x is zero
We convert cubics to quadratics (for now).
Takes 178th time of logf on Z600 / VC2010
we subdivide the quads to avoid huge overfill if it returns -1 then should be drawn as lines
Generates the lines and quads to be rendered. Lines are always recorded in device space. We will do a device space bloat to account for the 1pixel thickness. Quads are recorded in device space unless m contains perspective, then in they are in src space. We do this because we will subdivide large quads to reduce over-fill. This subdivision has to be performed before applying the perspective matrix.
Create an allocator
Adds an item and returns pointer to it.
removes all added items
count of items
access last item, only call if count() != 0
Adds an item and returns it.
Gets the size of the preallocated buffers.
returns true if this is a "special" texture because of gpu NPOT limitations
we should never have more than one stencil buffer with same combo of (width,height,samplecount)
This should be subsumed by a future version of GrDrawState It does not reset stage textures/samplers or per-vertex-edge-aa state since they aren't used unless the vertex layout references them. It also doesn't set the render target.
create a triangle strip that strokes the specified triangle. There are 8
Returns true if the rects edges are integer-aligned.
Helpers for drawPath
Sets the color to be used for the next draw to be (r,g,b,a) = (alpha, alpha, alpha, alpha).
Add a color filter that can be represented by a color and a mode. Applied after color-computing texture stages.
Sets the texture used at the next drawing call advantage to settings a NULL texture if doing non-textured drawing
Retrieves the currently set texture.
Returns the current sampler for a stage.
Sets the sampler. This will be removed soon in favor of direct access.
Writable pointer to a stage's sampler.
Preconcats the matrix of all samplers in the mask with the same matrix.
A common pattern is to compute a color with the initial stages and then modulate that color by a coverage value in later stage(s) (AA, mask- filters, glyph mask, etc). Color-filters, xfermodes, etc should be computed based on the pre-coverage-modulated color. The division of stages between color-computing and coverage-computing is specified by this method. Initially this is kNumStages (all stages are color-computing).
Gets the index of the first coverage-computing stage.
Sets the blending function coeffecients. The blend function will be: where D is the existing destination color, S is the incoming source color, and D' is the new destination color that will be written. sat() is the saturation function.
Retrieves the inverse of the current view matrix. If the current view matrix is invertible, return true, and if matrix is non-null, copy the inverse into it. If the current view matrix is non-invertible, return false and ignore the matrix parameter.
Sets the stencil settings to use for the next draw. Changing the clip has the side-effect of possibly zeroing out the client settable stencil bits. So multipass algorithms using stencil should not change the clip between passes.
Shortcut to disable stencil testing and ops.
Determines the interpretation per-vertex edge data when the kEdge_VertexLayoutBit is set (see GrDrawTarget). When per-vertex edges are not specified the value of this setting has no effect.
Sets the edge data required for edge antialiasing.
Enable render state settings.
Disable render state settings.
Controls whether clockwise, counterclockwise, or both faces are drawn.
Gets whether the target is drawing clockwise, counterclockwise, or both faces.
mask of all tex coord indices for one stage
mask of all bits relevant to one stage
mask of all bits relevant to one texture coordinate index
Functions for computing offsets of various components from the layout bitfield. Order of vertex components: Position Tex Coord 0 ... Tex Coord GrDrawState::kMaxTexCoords-1 Color Coverage
Some blend modes allow folding a partial coverage value into the color's alpha channel, while others will blend incorrectly.
Shortcut for drawState()->preConcatSamplerMatrices() on all enabled stages
Generates a bit indicating that a texture stage uses texture coordinates
Generates a bit indicating that a texture stage uses the position as its texture coordinate.
Helper for drawRect when the caller doesn't need separate src rects or matrices.
Gets a pointer to a GrPoint of a vertex's position or texture coordinate.
Gets a pointer to a GrColor inside a vertex within a vertex array.
given a vertex layout and a draw state, will a stage be used?
accessor for derived classes
same function used for all glGen*(GLsize i, GLuint*) functions
deleting a bound buffer has the side effect of binding 0
used for both the program and shader info logs
used for both the program and shader params
Queries on the null GL just don't do anything at all. We could potentially make the timers work.
we used to use this to query stuff about externally created textures, now we just require clients to tell us everything about the texture.
sometimes we have a GrIRect from the client that we want to simultaneously make relative to GL's viewport and convert from top-down to bottom-up.
assigns modulation of two vars to an output var vars can be vec4s or floats (or one of each) result is always vec4 if either var is "" then assign to the other var if both are "" then assign all ones
assigns addition of two vars to an output var vars can be vec4s or floats (or one of each) result is always vec4 if either var is "" then assign to the other var if both are "" then assign all zeros
given two blend coeffecients determine whether the src and/or dst computation can be omitted.
Create a blend_coeff * value string to be used in shader code. Sets empty string if result is trivially zero.
Adds a line to the fragment shader code which modifies the color by the specified color filter.
Adds a var that is computed in the VS and read in FS. If there is a GS it will just pass it through.
version of above that adds a stage number to the the var name (for uniqueness)
returns true if the color output was explicitly declared or not.
Provide an opaque ProgramDesc
override of GrRenderTarget
Defaults to a float with no precision specifier
Sets as a non-array.
Set all var options
Write a declaration of this variable to out.
these functions
determines how many elements at the head of the clip can be skipped and whether the initial clear should be to the inside- or outside-the-clip value, and what op should be used to draw the first element that isn't skipped.
The GrContext sets itself as the owner of this Gpu object
readPixels with some configs may be slow. Given a desired config this function returns a fast-path config. The returned config must have the same components, component sizes, and not require conversion between pre- and unpremultiplied alpha. The caller is free to ignore the result and call readPixels with the original config.
Same as above but applies to writeTexturePixels
Returns a timestamp based on the number of times the context was reset. This timestamp can be used to lazily detect when cached 3D context state is dirty.
good to set a break-point here to know when createTexture fails
On ES the internalFormat and format must match for TexImage and we use
GrRandoms nextU() values have patterns in the low bits So using nextU() % array_count might never take some values.
min is inclusive, max is exclusive
rect fan is counter-clockwise
Retrieves the maximum number of quads that could be rendered from the index buffer (using kTriangles_PrimitiveType).
Matrix transformation procs
For complex clips Gr uses the stencil buffer. The path renderer must be able to render paths into the stencil buffer. However, the path renderer itself may require the stencil buffer to resolve the path fill rule. This function queries whether the path render needs its own stencil pass. If this returns false then drawPath() should not modify the the target's stencil settings but use those already set on target. The target is passed as a param in case the answer depends upon draw state. The view matrix and render target set on the draw target may change before setPath/drawPath is called and so shouldn't be considered.
Draws the path to the stencil buffer. Assume the writable stencil bits are already initialized to zero. Fill will always be either kWinding_PathFill or kEvenOdd_PathFill. Only called if requiresStencilPass returns true for the same combo of target, path, and fill. Never called with an inverse fill. The default implementation assumes the path filling algorithm doesn't require a separate stencil pass and so crashes. Only called between setPath / clearPath.
Returns value [0...1) as a float
Returns value [min...max) as a float
Destroying a resource may potentially trigger the unlock of additional resources which in turn will trigger a nested purge. We block the nested purge using the fPurging variable. However, the initial purge will keep looping until either all resources in the cache are unlocked or we've met the budget. There is an assertion in createAndLock to check against a resource's destructor inserting new resources into the cache. If these new resources were unlocked before purgeAsNeeded completed it could potentially make purgeAsNeeded loop infinitely.
called to note the last clip drawn to this buffer.
called to determine if we have to render the clip into SB.
index may be [0..count], so that you can insert at the end (like append)
Calls GrFree() on each element. Assumes each is NULL or was allocated with GrMalloc().
Calls delete on each element. Assumes each is NULL or was allocated with new.
Calls GrSafeUnref() on each element. Assumes each is NULL or is a subclass of GrRefCnt.
growAt will increment fCount, reallocate fArray (as needed), and slide the contents of fArray to make a hole for new data at index.
If we aren't inheriting these as #defines from elsewhere, clang demands they be declared before we #include the template that relies on them.
call this ever each draw call, to ensure that the context reflects our state, and not the state from some other canvas/device
Apply a Gaussian blur to srcTexture by sigmaX and sigmaY, within the given rect. temp1 and temp2 are used for allocation of intermediate textures. If temp2 is non-NULL, srcTexture will be untouched, and the return value will be either temp1 or temp2. If temp2 is NULL, srcTexture will be overwritten with intermediate results, and the return value will either be temp1 or srcTexture.
This is called by drawBitmap(), which has to handle images that may be too large to be represented by a single texture. internalDrawBitmap assumes that the specified bitmap will fit in a texture and that non-texture portion of the GrPaint has already been setup.
Fill out buffer with the compressed format Ganesh expects from a colortable
we should just return const SkPath* (NULL means false)
#define TRACE_FDSTREAM
override from BmpDecoderCallback
#define GIF_STAMP       "GIF"    /* First chars in file - GIF stamp. #define GIF_STAMP_LEN   (sizeof(GIF_STAMP) - 1)
return NULL on failure
return -1 if not found (i.e. we're completely opaque)
function to place the pixel, determined by the bitCount
Check if the memory cap property is set.
If we need to better match the request, we might examine the image and
This guy exists just to aid in debugging, as it allows debuggers to just set a break-point in one place to see all error exists.
call only if color_type is PALETTE. Returns true if the ctable has alpha
return the minimum legal bitdepth (by png standards) for this many colortable entries. SkBitmap always stores in 8bits per pixel, but for colorcount <= 16, we can use fewer bits per in png
Pack palette[] with the corresponding colors, and if hasAlpha is true, also
global imagerefpool wrappers
return true if area of 'target' is completely covers area of 'covered'
All x86_64 machines have SSE2, so don't even bother checking.
If we replace a sampleproc, then we null-out the associated shaderproc,
ARM asm version of S32A_Blend_BlitRow32
Platform impl of Platform_procs with no overrides
SSE2 version of S32_Blend_BlitRow32() portable version is in core/SkBlitRow_D32.cpp
SSE2 version of Color32() portable version is in core/SkBlitRow_D32.cpp
Utility functions
Stolen from measure_text in SkDraw.cpp and then tweaked.
This function initializes iter to be an interator on the "stack" argument and then skips over the leading entries as specified in prefix.  It requires and asserts that "prefix" will be a prefix to "stack."
TODO(vandebo): Take advantage of SkClipStack::getSaveCount(), the PDF graphic state stack, and the fact that we can know all the clips used on the page to optimize this.
Add the resources, starting at firstIndex to the catalog, removing any dupes. A hash table would be really nice here.
File-Local Functions
The sections of a PFA file are implicitly defined.  The body starts after the line containing "eexec," and the trailer starts with 512 literal 0's followed by "cleartomark" (plus arbitrary white space). This function assumes that src is NUL terminated, but the NUL termination is not included in size.
scale from em-units to base-1000, returning as a SkScalar
Generate <bfchar> and <bfrange> table according to PDF spec 1.4 and Adobe Technote 5014. The function is not static so we can test it in unit tests. Current implementation guarantees bfchar and bfrange entries do not overlap. Current implementation does not attempt aggresive optimizations against following case because the specification is not clear. 4 beginbfchar          1 beginbfchar <0003> <0013>          <0020> <0014> <0005> <0015>    to    endbfchar <0007> <0017>          1 beginbfrange <0020> <0014>          <0003> <0007> <0013> endbfchar              endbfrange Adobe Technote 5014 said: "Code mappings (unlike codespace ranges) may overlap, but succeeding maps superceded preceding maps." In case of searching text in PDF, bfrange will have higher precedence so typing char id 0x0014 in search box will get glyph id 0x0004 first.  However, the spec does not mention how will this kind of conflict being resolved. For the worst case (having 65536 continuous unicode and we use every other one of them), the possible savings by aggressive optimization is 416KB pre-compressed and does not provide enough motivation for implementation.
class SkPDFGlyphSetMap
Font subset design: It would be nice to be able to subset fonts (particularly type 3 fonts), but it's a lot of work and not a priority. Resources are canonicalized and uniqueified by pointer so there has to be some additional state indicating which subset of the font is used.  It must be maintained at the page granularity and then combined at the document granularity. a) change SkPDFFont to fill in its state on demand, kind of like SkPDFGraphicState.  b) maintain a per font glyph usage class in each page/pdf device. c) in the document, retrieve the per font glyph usage from each page and combine it and ask for a resource with that subset.
class SkPDFType0Font
class SkPDFCIDFont
class SkPDFType1Font
class SkPDFType3Font
populateDict and operator== have to stay in sync with each other.
We're only interested in some fields of the SkPaint, so we have a custom operator== function.
Assumes t + startOffset is on the stack and does a linear interpolation on t
Map a value of t on the stack into [0, 1) for Repeat or Mirror tile mode.
The math here is all based on the description in Two_Point_Radial_Gradient,
return 0 for NULL (or unflattenable obj), or index-base-1
Handler for arbitrary text. This is used to parse the text inside each name or file tag. The resulting strings are put into the fNames or fFileNames arrays.
Handler for the start of a tag. The only tags we expect are family, nameset, fileset, name, and file.
Handler for the end of tags. We only care about family, nameset, fileset, name, and file.
This function parses the given filename and stores the results in the given families array.
Loads data on font families from various expected configuration files. The resulting data is returned in the given fontFamilies array.
Returns the matching typeface, or NULL. If a typeface is found, its refcnt
Remove reference to this face from its family. If the resulting family
maybe we should make FamilyRec be doubly-linked
Load info from a configuration file that populates the system/fallback font structures
Called once (ensured by the sentinel check at the beginning of our body).
----------------------------------------------------------------------------- Normally we only return exactly the font asked for. In last-resort cases, the request is for one of the basic font names "Sans", "Serif" or "Monospace". This function tells you whether a given request is for such a fallback. -----------------------------------------------------------------------------
----------------------------------------------------------------------------- Find a matching font where @type (one of FC_*) is equal to @value. For a The variable arguments are a list of triples, just like the first three arguments, and must be NULL terminated. For example, FontMatchString(FC_FILE, FcTypeString, "/usr/share/fonts/myfont.ttf", -----------------------------------------------------------------------------
----------------------------------------------------------------------------- Check to see if the filename has already been assigned a fileid and, if so, use it. Otherwise, assign one. Return the resulting fileid. -----------------------------------------------------------------------------
#define TRACE_FONT_NAME(code)   code
This global const reference completely identifies the face
Will return 0 on failure
Work around for old versions of freetype.
returns false if there is any non-90-rotation or skew
We call this before each use of the fFace, since we may be sharing
Export this so that other parts of our FonttHost port can make use of our
Remove reference to this face from its family. If the resulting family
maybe we should make FamilyRec be doubly-linked
man, we need to consider caching this, since it is just dependent on fFontID, and not on any of the other settings like matrix or flags
inline versions of these rect helpers
Potentially this should be made (1) public (2) optimized when width is small. Also might want 16 and 32 bit version
see Source/WebKit/chromium/base/mac/mac_util.mm DarwinMajorVersionInternal for original source
This function is visible on the outside. It first searches the cache, and if not found, returns a new entry (after adding it to the cache).
There are two versions of this table, the short and the long. The version used is specified in the Font Header ('head') table in the indexToLocFormat field. The choice of long or short offsets is dependent on the maximum possible offset distance. 'loca' short version: The actual local offset divided by 2 is stored. 'loca' long version: The actual local offset is stored. The result is a offset into a table of 2 byte (16 bit) entries.
Lion has a bug in CTFontGetBoundingRectsForGlyphs which returns a bad value in theBounds.origin.x for fonts whose numOfLogHorMetrics is less than its glyph count. This workaround reads the glyph bounds from the font directly. The table is computed only if the font is a TrueType font, if the glyph value is >= fAdjustStart. (called only if fAdjustStart < fGlyphCount). TODO: A future optimization will compute fAdjustBad once per CGFont, and compute fAdjustBadMatrix once per font context.
Construct Glyph to Unicode table. Unicode code points that require conjugate pairs in utf16 are not supported.
Returns the matching typeface, or NULL. If a typeface is found, its refcnt
Remove reference to this face from its family. If the resulting family
maybe we should make FamilyRec be doubly-linked
Called once (ensured by the sentinel check at the beginning of our body).
Return the number of tables, or if this is a TTC (collection), return the
If it returns true, then fCount and fDir are properly initialized.
returns false if there is any non-90-rotation or skew
This guy is public. It first searches the cache, and if a match is not found, it creates a new face.
This guy is public
Construct Glyph to Unicode table. Unicode code points that require conjugate pairs in utf16 are not supported. TODO(arthurhsu): Add support for conjugate pairs. It looks like that may require parsing the TTF cmap table (platform 4, encoding 12) directly instead of calling GetFontUnicodeRange().
This will invert the gamma applied by GDI, so we can sort-of get linear values. Needed when we draw non-black, non-white text, and don't know how to bias it.
gdi's bitmap is upside-down, so we reverse dst walking in Y whenever we copy it into skia's buffer
Is this GDI color neither black nor white? If so, we have to keep this image as is, rather than smashing it down to a BW mask. returns int instead of bool, since we don't want/have to pay to convert the zero/non-zero value into a bool
Return the closest matching typeface given either an existing family
HB_Fixed is a 26.6 fixed point format.
Encode bitmaps via CGImageDestination. We setup a DataConsumer which writes
ashmem likes lengths on page boundaries
void SkSVGElement::setIsNotDef() { fIsNotDef = isNotDef();
returns kIllegal_FontDesign if not found
Attaching view to fGLContext requires that the view to be part of a window, and that the NSWindow instance must have a CoreGraphics counterpart (or it must NOT be deferred or should have been on screen at least once)
FUNCTION: MyRegisterClass() PURPOSE: Registers the window class. COMMENTS:
FUNCTION: InitInstance(HINSTANCE, int, LPTSTR) PURPOSE: Saves instance handle and creates main window COMMENTS:
FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM) PURPOSE:  Processes messages for the main window. WM_COMMAND    - process the application menu WM_PAINT    - Paint the main window WM_DESTROY    - post a quit message and return
Message handler for about box.
ISequentialStream Interface
IStream Interface
ISequentialStream Interface
IStream Interface
This needs some improvement. D3D doesn't have the same notion of attach/detach as GL. However, just allowing GDI to write to the window after creating the D3D device seems to work. We need to handle resizing. On XP and earlier Reset() will trash all our textures so we would need to inform the SkGpu/caches or just recreate them. On Vista+ we could use an IDirect3DDevice9Ex and call ResetEx() to resize without trashing everything. Currently we do nothing and the D3D9 image gets stretched/compressed when resized.
Each value[] run is formated as:
We always perform the calculation in doubles, to avoid prematurely losing
returns true if suffix is empty, or if str ends with suffix
!!! move to char utilities static int count_separators(const char* str, const char* sep) { char c; int separators = 0; while ((c = *str++) != '\0') { } goHome: return separators;
Register a name/id pair with the system. If the name already exists,
Return the id that matches the specified name (from a previous call to
Remove all name/id pairs from the system. This is call internally
see SkProgressBarView.cpp #include "SkWidgetViews.cpp"
Measure the main-dimension for all the children. If a child is marked flex in that direction
returns +1 or -1, depending on the sign of x returns +1 if z is zero
if true, then ignore the touch-move, 'cause its probably just jitter
Even if the subclass overrides onInflate, they should always be
int errno;
aaclip.setRegion should create idential masks to the region
copyTo() should preserve isOpaque when it makes sense
Utility function to read the value of a given pixel in bm. All values converted to uint32_t for simplification of comparisons.
Utility function to set value of any pixel in bm. bm.getConfig() specifies what format 'val' must be converted to, but at present uint32_t can handle all formats.
Utility to return string containing name of each format, to simplify diagnostic output.
A function to verify that two bitmaps contain the same pixel values at all coordinates indicated by coords. Simplifies verification of copied bitmaps.
Writes unique pixel values at locations specified by coords.
Make sure our blits always map src==0 to a noop, and src==FF to full opaque
Make sure our blits are invariant with the width of the blit (i.e. that special case for 8 at a time have the same results as narrower blits)
Path Draw Procs Beware that paths themselves my draw differently depending on the clip.
Assumes that the ref draw was completely inside ref canvas --
Lines which is not clipped by boundary based clipping, but skipped after tessellation, should be cleared by the blitter.
Tests that isFinite() will reject any rect with +/-inf values as one of its coordinates.
returns true if a == b as resulting from (int)x. Since it is undefined
found and fixed for webkit: mishandling when we hit recursion limit on mostly degenerate cubic flatness test
max + 0.5 min has error [0.0, 0.12] max + 0.375 min has error [-.03, 0.07] 0.96043387 max + 0.397824735 min has error [-.06, +.05] For determining the maximum possible number of points to use in drawing a quadratic, we want to err on the high side.
just ensure this can run w/o any SkASSERTS firing in the debug build we used to assert due to differences in how we determine a degenerate vector but that was fixed with the introduction of SkPoint::CanNormalize
Simple isRect test is inline TestPath, below. test_isRect provides more extensive testing.
Tests that SkPoint::length() and SkPoint::Length() both return approximately expectedLength for this (x,y).
Tests SkPoint::Normalize() for this (x,y)
checks the bitmap contains correct pixels after the readPixels if the bitmap was prefilled with pixels it checks that these weren't overwritten in the area outside the readPixels.
our std SkAlpha255To256
faster hack +1
slower "correct"
helpers for tests
Star test
Star with hole test
Plus test
Zipper test
assumes any premu/.unpremul has been applied
really __gl_dictListNewDict
really __gl_dictListDeleteDict
really __gl_dictListInsertBefore
really __gl_dictListDelete
really __gl_dictListSearch
Define versions of EdgeSign, EdgeEval with s and t transposed.
MakeEdge creates a new pair of half-edges which form their own loop. No vertex or face structures are allocated, but these must be assigned before the current edge operation is completed.
Splice( a, b ) is best described by the Guibas/Stolfi paper or the CS348a notes (see mesh.h).  Basically it modifies the mesh so that a->Onext and b->Onext are exchanged.  This can have various effects depending on whether a and b belong to different face or vertex rings. For more explanation see __gl_meshSplice() below.
MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the origin of all edges in the vertex loop to which eOrig belongs. "vNext" gives a place to insert the new vertex in the global vertex list.  We insert the new vertex *before* vNext so that algorithms which walk the vertex list will not see the newly created vertices.
MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left face of all edges in the face loop to which eOrig belongs.  "fNext" gives a place to insert the new face in the global face list.  We insert the new face *before* fNext so that algorithms which walk the face list will not see the newly created faces.
KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym), and removes from the global edge list.
KillVertex( vDel ) destroys a vertex and removes it from the global vertex list.  It updates the vertex loop to point to a given new vertex.
KillFace( fDel ) destroys a face and removes it from the global face list.  It updates the face loop to point to a given new face.
__gl_meshMakeEdge creates one edge, two vertices, and a loop (face). The loop consists of the two new half-edges.
__gl_meshSplice( eOrg, eDst ) is the basic operation for changing the mesh connectivity and topology.  It changes the mesh so that eOrg->Onext <- OLD( eDst->Onext ) eDst->Onext <- OLD( eOrg->Onext ) where OLD(...) means the value before the meshSplice operation. This can have two effects on the vertex structure: - if eOrg->Org != eDst->Org, the two vertices are merged together - if eOrg->Org == eDst->Org, the origin is split into two vertices In both cases, eDst->Org is changed and eOrg->Org is untouched. Similarly (and independently) for the face structure, - if eOrg->Lface == eDst->Lface, one loop is split into two - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one In both cases, eDst->Lface is changed and eOrg->Lface is unaffected. Some special cases: If eDst == eOrg, the operation has no effect. If eDst == eOrg->Lnext, the new face will have a single edge. If eDst == eOrg->Lprev, the old face will have a single edge. If eDst == eOrg->Onext, the new vertex will have a single edge. If eDst == eOrg->Oprev, the old vertex will have a single edge.
__gl_meshDelete( eDel ) removes the edge eDel.  There are several cases: if (eDel->Lface != eDel->Rface), we join two loops into one; the loop eDel->Lface is deleted.  Otherwise, we are splitting one loop into two; the newly created loop will contain eDel->Dst.  If the deletion of eDel would create isolated vertices, those are deleted as well. This function could be implemented as two calls to __gl_meshSplice plus a few calls to memFree, but this would allocate and delete unnecessary vertices and faces.
__gl_meshAddEdgeVertex( eOrg ) creates a new edge eNew such that eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex. eOrg and eNew will have the same left face.
__gl_meshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew, such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org. eOrg and eNew will have the same left face.
__gl_meshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst to eDst->Org, and returns the corresponding half-edge eNew. If eOrg->Lface == eDst->Lface, this splits one loop into two, and the newly created loop is eNew->Lface.  Otherwise, two disjoint loops are merged into one, and the loop eDst->Lface is destroyed. If (eOrg == eDst), the new face will have only two edges. If (eOrg->Lnext == eDst), the old face is reduced to a single edge. If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.
__gl_meshZapFace( fZap ) destroys a face and removes it from the global face list.  All edges of fZap will have a NULL pointer as their left face.  Any edges which also have a NULL pointer as their right face are deleted entirely (along with any isolated vertices this produces). An entire mesh can be deleted by zapping its faces, one at a time, in any order.  Zapped faces cannot be used in further mesh operations!
__gl_meshNewMesh() creates a new mesh with no edges, no vertices, and no loops (what we usually call a "face").
__gl_meshUnion( mesh1, mesh2 ) forms the union of all structures in both meshes, and returns the new mesh (the old meshes are destroyed).
__gl_meshDeleteMesh( mesh ) will free all storage for any valid mesh.
__gl_meshDeleteMesh( mesh ) will free all storage for any valid mesh.
__gl_meshCheckMesh( mesh ) checks a mesh for self-consistency.
Determine the polygon normal and project vertices onto the plane of the polygon.
really __gl_pqHeapNewPriorityQ
really __gl_pqHeapDeletePriorityQ
really __gl_pqHeapInit
really __gl_pqHeapInsert returns LONG_MAX iff out of memory
really __gl_pqHeapExtractMin
really __gl_pqHeapDelete
really __gl_pqSortNewPriorityQ
really __gl_pqSortDeletePriorityQ
really __gl_pqSortInit
really __gl_pqSortInsert returns LONG_MAX iff out of memory
really __gl_pqSortExtractMin
really __gl_pqSortMinimum
really __gl_pqSortIsEmpty
really __gl_pqSortDelete
__gl_renderMesh( tess, mesh ) takes a mesh and breaks it into triangle fans, strips, and separate triangles.  A substantial effort is made to use as few rendering primitives as possible (ie. to make the fans and strips as large as possible). The rendering output is provided as callbacks (see the api).
__gl_renderBoundary( tess, mesh ) takes a mesh, and outputs one contour for each face marked "inside".  The rendering output is provided as callbacks (see the api).
__gl_renderCache( tess ) takes a single contour and tries to render it as a triangle fan.  This handles convex polygons, as well as some non-convex polygons if we get lucky. Returns TRUE if the polygon was successfully rendered.  The rendering output is provided as callbacks (see the api).
__gl_meshTessellateMonoRegion( face ) tessellates a monotone region (what else would it do??)  The region must consist of a single loop of half-edges (see mesh.h) oriented CCW.  "Monotone" in this case means that any vertical line intersects the interior of the region in a single interval. Tessellation consists of adding interior edges (actually pairs of half-edges), to split the region into non-overlapping triangles. The basic idea is explained in Preparata and Shamos (which I don''t have handy right now), although their implementation is more complicated than this one.  The are two edge chains, an upper chain and a lower chain.  We process all vertices from both chains in order, from right to left. The algorithm ensures that the following invariant holds after each vertex is processed: the untessellated region consists of two chains, where one chain (say the upper) is a single edge, and the other chain is concave.  The left vertex of the single edge is always to the left of all vertices in the concave chain. Each step consists of adding the rightmost unprocessed vertex to one of the two chains, and forming a fan of triangles from the rightmost of two chain endpoints.  Determining whether we can add each triangle to the fan is a simple orientation test.  By making the fan as large as possible, we restore the invariant (check it yourself).
__gl_meshTessellateInterior( mesh ) tessellates each region of the mesh which is marked "inside" the polygon.  Each such region must be monotone.
__gl_meshDiscardExterior( mesh ) zaps (ie. sets to NULL) all faces which are not marked "inside" the polygon.  Since further mesh operations on NULL faces are not allowed, the main purpose is to clean up the mesh so that exterior loops are not represented in the data structure.
__gl_meshSetWindingNumber( mesh, value, keepOnlyBoundary ) resets the winding numbers on all edges so that regions marked "inside" the polygon have a winding number of "value", and regions outside have a winding number of 0. If keepOnlyBoundary is TRUE, it also deletes all edges which do not separate an interior region from an exterior one.
#### stil missing: identify invalid character combinations
GDEF API
GPOS API
The next three functions return a null-terminated list
apply one lookup to the input string object
Auxiliary functions
GSUB API
The next three functions return a null-terminated list
apply one lookup to the input string object
returns error if one happened, otherwise returns HB_Err_Not_Covered if no feature were applied, or HB_Err_Ok otherwise.
Hebrew shaping. In the non opentype case we try to use the
syllables are of the form:
Below we define how a character in the input string is either in the khmerCharClasses table (in which case we get its type back), a ZWJ or ZWNJ (two characters that may appear within the syllable, but are not in the table) we also get their type back, or an unknown object in which case we get _xx (CC_RESERVED) back
Given an input string of characters and a location in which to start looking calculate, using the state table, which one is the last character of the syllable that starts in the starting position.
Given an input string of characters and a location in which to start looking calculate, using the state table, which one is the last character of the syllable that starts in the starting position.
Visual order before shaping should be: This means that we can keep the logical order apart from having to move the pre vowel, medial ra and kinzi
-------------------------------------------------------------------------------------------------------------------------------------------- Basic processing --------------------------------------------------------------------------------------------------------------------------------------------
set the glyph attributes heuristically. Assumes a 1 to 1 relationship between chars and glyphs and no reordering. also computes logClusters heuristically
Comparison routine for qsort;  sorts by fFractionDifference from largest to smallest.
Comparison routine for qsort;  sorts by max(fAverageMismatch{RGB}) from largest to smallest.
Comparison routine for qsort;  sorts by max(fMaxMismatch{RGB}) from largest to smallest.
from gm - thanks to PNG, we need to force all pixels 100% opaque
from gm
from gm
Returns white on every pixel so that differences jump out at you; makes it easy to spot areas of difference that are in the least-significant bits.
based on gm
Given a image filename, returns the name of the file containing the associated difference image.
Convert a chromium/WebKit LayoutTest "foo-expected.png" to "foo-actual.png"
Convert a chromium/WebKit LayoutTest "foo-expected.png" to "foo.png"
Creates difference images, returns the number that have a 0 metric.
Make layout more consistent by scaling image to 240 height, 360 width, or natural size, whichever is smallest.
SkEvent handlers
can return NULL
can return NULL
Finds the method in the given <code>type</code> that is overrideen by the specified <code>method<code> . Returns <code>null</code> if no such method exits.
Finds a method in the hierarchy of <code>type</code> that is overridden by </code>binding</code>. Returns <code>null</code> if no such method exists. First the super class is examined and than the implemented interfaces.
Finds the method that is defines the given method. The returned method might not be visible.
Checks if the two bindings are equals. Also works across binding environments.
Checks if the two arrays of bindings have the same length and their elements are equal. Uses <code>Bindings.equals(IBinding, IBinding)</code> to compare.
Resolves a service interface to its default implementation using the db4o namespace convention:
write a block of text without checking columns.
Only use this for comparisons.
Unfolds java multi array creation shortcut "new String[2][3][2]" into explicitly array creation "new string[][][] { new string[][] { new string[2], new string[2], new string[2] }, new string[][] { new string[2], new string[2], new string[2] } }"
protected CSReferenceExpression createTypeReference(ITypeBinding typeBinding) { return new CSReferenceExpression(mappedTypeName(typeBinding)); }
The constructor.
Returns the shared instance.
Returns the string from the plugin's resource bundle, or 'key' if not found.
Returns the plugin's resource bundle,
Returns an image descriptor for the image file at the given plug-in relative path
Starts an interactive shell with root permissions. Does nothing if already running.
Closes all resources related to the shell.
Executes a single command, waits for its termination and returns the result
Executes a single command via the bundled BusyBox executable
This method is hooked by XposedBridge to return the current version
Helper methods
State management
Helper methods
White/black listing
Helper methods
The following methods are used as fallback, when: - there is no context (Java threads) - the content provider cannot be queried (PackageManagerService)
Helper methods
Helper methods
Reload the settings from file if they have changed.
Helper methods
Helper methods
Entry point from android_util_Binder.cpp's onTransact
Helper methods
NfcManager.getDefaultAdapter calls NfcAdapter.getNfcAdapter
public Process start() libcore/luni/src/main/java/java/lang/ProcessBuilder.java
package*/ final static class InternalHandler extends Handler {
insert sql
replace sql
delete sql
update sql
create new instance
add AND condition
add OR condition
package*/ final class CursorUtils {
private operations with out transaction
exec sql
build query
invoke via Loader
invoke via UriRequest#<init>()
decode image file for ImageLoader package
load from Network or DiskCache, invoke in any thread. package
load from Network or DiskCache, invoke in any thread. package
load from Network or DiskCache, invoke in ui thread. package
load from Network or DiskCache
Decodes byte array to bitmap
Decodes file to bitmap
Encodes bitmap into byte array
int i=0;
Copy constructor
That reminds you of Queen, huh? ;-)
get a stream from web
Creates a new asynchronous task. This constructor must be invoked on the UI thread.
Returns <tt>true</tt> if this task was cancelled after it completed normally. If you are calling {@link #cancel(boolean)} on the task, the value returned by this method should be checked periodically from {@link #doInBackground(Object[])} to end the task as soon as possible.
<p>Attempts to cancel execution of this task.  This attempt will fail if the task has already completed, already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when <tt>cancel</tt> is called, this task should never run. If the task has already started, then the <tt>mayInterruptIfRunning</tt> parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.</p> <p/> <p>Calling this method will result in {@link #onCancelled(Object)} being invoked on the UI thread after {@link #doInBackground(Object[])} returns. Calling this method guarantees that {@link #onPostExecute(Object)} is never invoked. After invoking this method, you should check the value returned by {@link #isCancelled()} periodically from {@link #doInBackground(Object[])} to finish the task as early as possible.</p>
Executes the task with the specified parameters. The task returns itself (this) so that the caller can keep a reference to it. <p/> <p>Note: this function schedules the task on a queue for a single background thread or pool of threads depending on the platform version.  When first introduced, AsyncTasks were executed serially on a single background thread. Starting with {@link android.os.Build.VERSION_CODES#DONUT}, this was changed to a pool of threads allowing multiple tasks to operate in parallel.  After {@link android.os.Build.VERSION_CODES#HONEYCOMB}, it is planned to change this back to a single thread to avoid common application errors caused by parallel execution.  If you truly want parallel execution, you can use the {@link #executeOnExecutor} version of this method with {@link #THREAD_POOL_EXECUTOR}; however, see commentary there for warnings on its use. <p/> <p>This method must be invoked on the UI thread.
Executes the task with the specified parameters. The task returns itself (this) so that the caller can keep a reference to it. <p/> <p>This method is typically used with {@link #THREAD_POOL_EXECUTOR} to allow multiple tasks to run in parallel on a pool of threads managed by AsyncTask, however you can also use your own {@link Executor} for custom behavior. <p/> <p><em>Warning:</em> Allowing multiple tasks to run in parallel from a thread pool is generally <em>not</em> what one wants, because the order of their operation is not defined.  For example, if these tasks are used to modify any state in common (such as writing a file due to a button click), there are no guarantees on the order of the modifications. Without careful work it is possible in rare cases for the newer version of the data to be over-written by an older one, leading to obscure data loss and stability issues.  Such changes are best executed in serial; to guarantee such work is serialized regardless of platform version you can use this function with {@link #SERIAL_EXECUTOR}. <p/> <p>This method must be invoked on the UI thread.
This method can be invoked from {@link #doInBackground} to publish updates on the UI thread while the background computation is still running. Each call to this method will trigger the execution of {@link #onProgressUpdate} on the UI thread. <p/> {@link #onProgressUpdate} will note be called if the task has been canceled.
get file name from path, not include suffix <pre> </pre>
get file name from path, include suffix <pre> </pre>
get folder name from path <pre> </pre>
get suffix of file from path <pre> </pre>
Creates the directory named by the trailing filename of this file, including the complete directory path required to create this directory. <br/> <br/> <ul> <strong>Attentions:</strong> <li>makeDirs("C:\\Users\\Trinea") can only create users folder</li> <li>makeFolder("C:\\Users\\Trinea\\") can create Trinea folder</li> </ul>
delete file or directory <ul> <li>if path is null or empty, return true</li> <li>if path not exist, return true</li> <li>if path exist, delete recursion. return true</li> <ul>
get size of list <pre> getSize(null)   =   0; getSize({})     =   0; getSize({1})    =   1; </pre>
is null or its size is 0 <pre> isEmpty(null)   =   true; isEmpty({})     =   true; isEmpty({1})    =   false; </pre>
compare two list <pre> isEquals(null, null) = true; isEquals(new ArrayList&lt;String&gt;(), null) = false; isEquals(null, new ArrayList&lt;String&gt;()) = false; isEquals(new ArrayList&lt;String&gt;(), new ArrayList&lt;String&gt;()) = true; </pre>
join list to string, separator is "," <pre> join(null)      =   ""; join({})        =   ""; join({a,b})     =   "a,b"; </pre>
join list to string <pre> join(null, '#')     =   ""; join({}, '#')       =   ""; join({a,b,c}, ' ')  =   "abc"; join({a,b,c}, '#')  =   "a#b#c"; </pre>
join list to string. if separator is null, use {@link #DEFAULT_JOIN_SEPARATOR} <pre> join(null, "#")     =   ""; join({}, "#$")      =   ""; join({a,b,c}, null) =   "a,b,c"; join({a,b,c}, "")   =   "abc"; join({a,b,c}, "#")  =   "a#b#c"; join({a,b,c}, "#$") =   "a#$b#$c"; </pre>
add distinct entry to list
add all distinct entry to list1 from list2
remove duplicate entries in list
add not null entry to list
invert list
set debug
get string preferences
get int preferences
get long preferences
get float preferences
get boolean preferences
clear the preferences
Check if the device's camera has a Flashlight.
Opens the requested camera with {@link Camera#open(int)}, if one exists.
Call updatePrefs() after setting this. If the device is in silent mode, it will not beep.
Call updatePrefs() after setting this.
<p>Split a query string into a list of name-value pairs.</p> <p>This is an alternative to the {@link Uri#getQueryParameterNames()} and {@link Uri#getQueryParameters(String)}, which are quirky and not suitable for exist-only Uri parameters.</p> <p>This method ignores multiple parameters with the same name and returns the first one only. This is technically incorrect, but should be acceptable due to the method of processing Hints: no multiple values for a hint.</p>
Trigger activity, resetting the timer.
Start the activity timer.
Cancel the activity timer.
Set the Activity class to use. It can be any activity, but should handle the intent extras as used here.
Set a prompt to display on the capture screen, instead of using the default.
By default, the orientation is locked. Set to false to not lock.
Use the specified camera ID.
Set to false to disable beep on scan.
Set to true to enable saving the barcode image and sending its path in the result Intent.
Set the desired barcode formats to scan.
Initiates a scan for all known barcode types with the default camera.
Create an scan intent with the specified options.
Initiates a scan, only for a certain set of barcode types, given as strings corresponding to their names in ZXing's {@code BarcodeFormat} class like "UPC_A". You can supply constants like {@link #PRODUCT_CODE_TYPES} for example.
Start auto-focus. The first focus will happen now, then repeated every two seconds.
Stop auto-focus.
This only has an effect if the camera is not opened yet.
Actual preview size in current rotation. null if not determined yet.
Must be called from camera thread.
Configure the camera parameters, including preview size. The camera must be opened before calling this. Must be called from camera thread.
Must be called from camera thread.
Asks the camera hardware to begin drawing preview frames to the screen. Must be called from camera thread.
Tells the camera to stop drawing preview frames. Must be called from camera thread.
Closes the camera driver if still in use. Must be called from camera thread.
Actual preview size in *natural camera* orientation. null if not determined yet.
Actual preview size in *current display* rotation. null if not determined yet.
A single preview frame will be returned to the supplied callback. The thread on which this called is undefined, so a Handler should be used to post the result to the correct thread.
Allows third party apps to specify the camera ID, rather than determine it automatically based on available cameras and their orientation.
Default to false. Inverted means dark & light colors are inverted.
Default to false.
Default to false.
Default to false. If enabled, metering is performed to determine focus area.
Default to true.
Default to false.
Default to false.
Call from main thread. Enqueues a task on the camera thread.
Call from camera thread.
Call from camera thread
Call from main thread.
Choose the best preview size, based on our display size. We prefer: 1. no scaling 2. least downscaling 3. least upscaling We do not care much about aspect ratio, since we just crop away extra pixels. We only choose the size to minimize scaling. In the future we may consider choosing the biggest possible preview size, to maximize the resolution we have for decoding. We need more testing to see whether or not that is feasible.
Scale from so that to.fitsIn(size). Tries to scale by powers of two, or by 3/2. Aspect ratio is preserved. These scaling factors will theoretically result in fast scaling with minimal quality loss. TODO: confirm whether or not this is the case in practice.
Scale the preview to cover the viewfinder, then center it. Aspect ratio is preserved.
identifying finder patterns or the corners of the barcode. The exact meaning is specific to the type of barcode that was decoded.
{@code null}. This contains optional metadata about what was detected about the barcode, like orientation.
Set the DecoderFactory to use. Use this to specify the formats to decode. Call this from UI thread only.
Decode a single barcode, then stop decoding. The callback will only be called on the UI thread.
Continuously decode barcodes. The same barcode may be returned multiple times per second. The callback will only be called on the UI thread.
Stop decoding, but do not stop the preview.
Add a listener to be notified of changes to the preview state, as well as camera errors.
Call this on the main thread, while the preview is running.
The framing rectangle, relative to this view. Use to draw the rectangle. Will never be null while the preview is active.
The framing rect, relative to the camera preview resolution. Will never be null while the preview is active.
Set the CameraSettings. Use this to select a different camera, change exposure and torch settings, and some other options. This has no effect if the camera is already open.
Start the camera preview and decoding. Typically this should be called from the Activity's onResume() method. Call from UI thread only.
Pause scanning and the camera preview. Typically this should be called from the Activity's onPause() method. Call from UI thread only.
Set an exact size for the framing rectangle. It will be centered in the view.
The the fraction of the width/height of view to be used as a margin for the framing rect. This is ignored if framingRectSize is specified.
Considered active if between resume() and pause().
Called when the preview is started. Override this to start decoding work.
Get the current CameraInstance. This may be null, and may change when pausing / resuming the preview. While the preview is active, getCameraInstance() will never be null.
The preview typically starts being active a while after calling resume(), and stops when calling pause().
Calculate framing rectangle, relative to the preview frame. Note that the SurfaceView may be larger than the container. Override this for more control over the framing rect calculations.
Perform initialization, according to preferences set in the intent.
Lock display to current orientation.
Start decoding.
Call from Activity#onResume().
Call from Activity#onPause().
Call from Activity#onDestroy().
Call from Activity#onSaveInstanceState().
Create a intent to return as the Activity result.
Save the barcode image to a temporary file stored in the application's cache, and return its path. Only does so if returnBarcodeImagePath is enabled.
Initialize the view with the xml configuration based on styleable attributes.
Initialize with no custom attributes setted.
Convenience method to initialize camera id, decode formats and prompt message from an intent.
Turn on the device's flashlight.
Turn off the device's flashlight.
Create a new Decoder with the specified Reader. It is recommended to use an instance of MultiFormatReader in most cases.
Given an image source, attempt to decode the barcode. Must not raise an exception.
Given an image source, convert to a binary bitmap. Override this to use a custom binarizer.
Decode a binary bitmap.
Call immediately after decode(), from the same thread. The result is undefined while decode() is running.
Start decoding. This must be called from the UI thread.
Stop decoding. This must be called from the UI thread.
Swap width and height.
Scale by n / d.
Checks if both dimensions of the other size are at least as large as this size.
Set the crop rectangle.
Return the source bitmap (cropped; in display orientation).
Rotate an image by 90 degrees CW.
Rotate an image by 180 degrees.
Rotate an image by 90 degrees CCW.
Draw a bitmap with the result points highlighted instead of the live scanning display.
Only call from the UI thread.
Currently there is no way to distinguish between a query which had no results and a book which is not searchable - both return zero results.
Available fields: page_id, page_number, snippet_text
Opens the requested camera with {@link Camera#open(int)}, if one exists. or {@link #NO_REQUESTED_CAMERA} means "no preference", in which case a rear-facing camera is returned if possible or else any camera
Convenience method for {@link com.google.zxing.client.android.CaptureActivity}
A single preview frame will be returned to the handler supplied. The data will arrive as byte[] in the message.obj field, with width and height encoded as message.arg1 and message.arg2, respectively.
Allows third party apps to specify the camera ID, rather than determine it automatically based on available cameras and their orientation.
Allows third party apps to specify the scanning rectangle dimensions, rather than determine them automatically based on screen resolution.
Always off.
It would be nice if the string encoding lived in the core ZXing library, but we use platform specific code like PhoneNumberUtils, so it can't.
Handles send intents from multitude of Android applications
Handles send intents from the Contacts app, retrieving a contact as a VCARD.
<p>Builds a text representation of the scanning history. Each scan is encoded on one line, terminated by a line break (\r\n). The values in each line are comma-separated, and double-quoted. Double-quotes within values are escaped with a sequence of two double-quotes. The fields output are:</p> <ol> <li>Raw text</li> <li>Display text</li> <li>Format (e.g. QR_CODE)</li> <li>Unix timestamp (milliseconds since the epoch)</li> <li>Formatted version of timestamp</li> <li>Supplemental info (e.g. price info for a product barcode)</li> </ol>
This takes all the work out of figuring out which buttons/actions should be in which positions, based on which fields are present in this barcode.
Sends an intent to create a new calendar event by prepopulating the Add Event UI. Older versions of the system have a bug where the event title will not be filled out.
Some barcode contents are considered secure, and should not be saved to history, copied to the clipboard, or otherwise persisted.
Create a possibly styled string for the contents of the current barcode.
A convenience method to get the parsed type. Should not be overridden.
Do a geo search using the address as the query.
Uses the mobile-specific version of Product Search, which is formatted for small screens.
Like {@link #launchIntent(Intent)} but will tell you if it is not handle-able via {@link ActivityNotFoundException}.
Like {@link #rawLaunchIntent(Intent)} but will show a user dialog if nothing is available to handle.
Takes a contact Uri and does the necessary database lookups to retrieve that person's info, then sends an Encode intent to render it as a QR Code.
Update the network: either create a new network or modify an existing network
Adding a WEP network
Adding a WPA or WPA2 network
Adding an open, unsecured network
Encloses the incoming string inside double quotes, if it isn't already quoted. as well.
an allowed length
A valid barcode has been found, so give an indication of success and show the results.
Superimpose a line for 1D or dots for 2D to highlight the key features of the barcode.
Put up our own UI for how to handle the decoded contents.
Briefly show the contents of the barcode, then handle the result outside Barcode Scanner.
Decode the data within the viewfinder rectangle, and time how long it took. For efficiency, reuse the same reader objects from one decode to the next.
Downloads the entire resource instead of part.
(e.g. "co.uk" for the United Kingdom)
The same as above, but specifically for Google Product Search.
The same as above, but specifically for Google Book Search.
Does a given URL point to Google Book Search, regardless of domain.
{@link #startActivityForResult(Intent, int)} will be called on the {@link Fragment} instead of an {@link Activity}
Initiates a scan for all known barcode types with the default camera. if a prompt was needed, or null otherwise.
Initiates a scan for all known barcode types with the specified camera. if a prompt was needed, or null otherwise.
Initiates a scan, using the default camera, only for a certain set of barcode types, given as strings corresponding to their names in ZXing's {@code BarcodeFormat} class like "UPC_A". You can supply constants like {@link #PRODUCT_CODE_TYPES} for example. if a prompt was needed, or null otherwise.
Initiates a scan, using the specified camera, only for a certain set of barcode types, given as strings corresponding to their names in ZXing's {@code BarcodeFormat} class like "UPC_A". You can supply constants like {@link #PRODUCT_CODE_TYPES} for example. if a prompt was needed, or null otherwise
Defaults to type "TEXT_TYPE". if a prompt was needed, or null otherwise
Calculates the average time but throws out the maximum as an outlier first.
This method is used for testing the high-level encoder
Gets the string encoded in the aztec code bits
gets the table corresponding to the char passed
Gets the character (or string) corresponding to the passed code in the given table
<p>Performs RS error correction on an array of bits.</p>
Gets the array of bits from an Aztec Code matrix
Reads a code of given length and at given index in an array of bits
Detects an Aztec Code in an image.
Extracts the number of data layers and data blocks from the layer around the bull's eye.
Corrects the parameter bits using Reed-Solomon algorithm.
Finds the corners of a bull-eye centered on the passed point. This returns the centers of the diagonal points just outside the bull's eye Returns [topRight, bottomRight, bottomLeft, topLeft]
Finds a candidate center point of an Aztec code from an image
Gets the Aztec code corners from the bull's eye corners and the parameters.
Creates a BitMatrix by sampling the provided image. topLeft, topRight, bottomRight, and bottomLeft are the centers of the squares on the diagonal just outside the bull's eye.
Samples a line.
Gets the color of a segment
Gets the coordinate of the first point with a different color in the given direction
Expand the square represented by the corner points by pushing out equally in all directions
Encodes the given binary content as an Aztec symbol
We update a set of states for a new character by updating each state for the new character, merging the results, and then removing the non-optimal states.
Return a set of states that represent the possible ways of updating this state for the next character.  The resulting set of states are added to the "result" list.
Create a new state representing this state with a latch to a (not necessary different) mode, and then a code.
Create a new state representing this state, with a temporary shift to a different mode to output a single value.
Create a new state representing this state, but an additional character output in Binary Shift mode.
Create the state identical to this one, but we are no longer in Binary Shift mode.
Returns true if "this" state is better (or equal) to be in than "that" state under all possible circumstances.
In Japanese, the name is written in kanji, which can have multiple readings. Therefore a hint is often provided, called furigana, which spells the name phonetically.
there is no guaranteed or standard format.
there is no guaranteed or standard format.
there is no guaranteed or standard format.
Parses a string as a date. RFC 2445 allows the start and end fields to be of type DATE (e.g. 20081021) or DATE-TIME (e.g. 20081021T123000 for local time, or 20081021T123000Z for UTC).
This implements only the most basic checking for an email address's validity -- that it contains an '@' and contains no characters disallowed by RFC 2822. This is an overly lenient definition of validity. We want to generally be lenient here since this class is only intended to encapsulate what's in a barcode, not "judge" it.
mislead the user about its true nature. At the moment this looks for the presence of user/password syntax in the host/authority portion of a URI which may be used in attempts to make the URI's host appear to be other than it is. Example: to connect to yourbank.com at first glance.
Transforms a string that represents a URI into something more proper, by adding or canonicalizing the protocol.
Formats name fields of the form "Public;John;Q.;Reverend;III" into a form like "Reverend John Q. Public III".
Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut differ slightly from {@link Math#round(float)} in that half rounds down for negative values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.
<p>Detects a rectangular region of black and white -- mostly black -- with a region of mostly white, in an image.</p> last points are opposed on the diagonal, as are the second and third. The first point will be the topmost point and the last, the bottommost. The second point will be leftmost and the third, the rightmost
Attempts to locate a corner of the barcode by scanning up, down, left or right from a center point which should be within the barcode. left or right, 0 the barcode
Computes the start and end of a region of pixels, either horizontally or vertically, that could be part of a Data Matrix barcode. where we are scanning. If scanning vertically it's the column, the fixed horizontal location barcode region (e.g. only white was found)
<p> Detects a candidate barcode-like rectangular region within an image. It starts around the center of the image, increases the size of the candidate region until it finds a white rectangular region. </p>
recenters the points of a constant distance towards the center
Determines whether a segment contains a black point
Create a representation of GF(size) using the given primitive polynomial. the bits of an int, where the least-significant bit represents the constant coefficient (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))). In most cases it should be 1, but for QR code it is 0.
Implements both addition and subtraction -- they are the same in GF(size).
to perform computations from most significant (highest-power term) coefficient to least significant or if leading coefficient is 0 and this is not a constant polynomial (that is, it is not the monomial "0")
<p>Decodes given set of received codewords, which include both data and error-correction codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place, in the input.</p>
For testing only
Sets bit i.
Flips bit i.
at or beyond this given index
Sets a block of 32 bits, starting at bit i. corresponds to bit i, the next-least-significant to i+1, and so on.
Sets a range of bits.
Clears all bits (sets to false).
Efficient method to check if a range of bits is set, or not set.
Appends the least-significant bits, from value, in order from most-significant to least-significant. For example, appending 6 bits from 0x000001E will append the bits 0, 1, 1, 1, 1, 0 in that order.
of the internal representation, which is exposed by {@link #getBitArray()}
Reverses all bits in the array.
A helper to construct a square matrix.
<p>Gets the requested bit, where true means black.</p>
<p>Sets the given bit to true.</p>
<p>Flips the given bit.</p>
Exclusive-or (XOR): Flip the bit in this {@code BitMatrix} if the corresponding mask bit is set.
<p>Sets a square region of the bit matrix to true.</p>
A fast method to retrieve one row of data from the matrix as a BitArray.
Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees
This is useful in detecting the enclosing rectangle of a 'pure' barcode.
This is useful in detecting a corner of a 'pure' barcode.
Bits are read within a byte from most-significant to least-significant bit.
but unsupported
Sets the implementation of GridSampler used by the library. One global instance is stored, which may sound problematic. But, the implementation provided ought to be appropriate for the entire platform, and all uses of this library in the whole lifetime of the JVM. For instance, an Android activity can swap in an implementation that takes advantage of native platform libraries.
Samples an image for a rectangular matrix of bits of the given dimension. The sampling transformation is determined by the coordinates of 4 points, in the original and transformed image space. defined by the "from" parameters by the given points is invalid or results in sampling outside the image boundaries
For each block in the image, calculate the average black point using a 5x5 grid of the blocks around it. Also handles the corner cases (fractional blocks are computed based on the last pixels in the row/column which are also used in the previous block).
Applies a single threshold to a block of pixels.
Calculates a single black point for each block of pixels and saves it away. See the following thread for a discussion of this algorithm:
{@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform default encoding if none of these can possibly be correct
<p>Creates the version object based on the dimension of the original bit matrix from the datamatrix code.</p> <p>See ISO 16022:2006 Table 7 - ECC 200 symbol attributes</p> Data Matrix dimensions.
<p>Reads the bits in the {@link BitMatrix} representing the mapping matrix (No alignment patterns) in the correct order in order to reconstitute the codewords bytes contained within the Data Matrix Code.</p>
<p>Reads a bit of the mapping matrix accounting for boundary wrapping.</p>
<p>Reads the 8 bits of the standard Utah-shaped pattern.</p> <p>See ISO 16022:2006, 5.8.1 Figure 6</p>
<p>Reads the 8 bits of the special corner condition 1.</p> <p>See ISO 16022:2006, Figure F.3</p>
<p>Reads the 8 bits of the special corner condition 2.</p> <p>See ISO 16022:2006, Figure F.4</p>
<p>Reads the 8 bits of the special corner condition 3.</p> <p>See ISO 16022:2006, Figure F.5</p>
<p>Reads the 8 bits of the special corner condition 4.</p> <p>See ISO 16022:2006, Figure F.6</p>
<p>Extracts the data region from a {@link BitMatrix} that contains alignment patterns.</p>
<p>When Data Matrix Codes use multiple data blocks, they actually interleave the bytes of each of them. That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This method will separate the data into original blocks.</p>
See ISO 16022:2006, 5.2.3 and Annex C, Table C.2
See ISO 16022:2006, 5.2.5 and Annex C, Table C.1
See ISO 16022:2006, 5.2.6 and Annex C, Table C.2
See ISO 16022:2006, 5.2.7
See ISO 16022:2006, 5.2.8 and Annex C Table C.3
See ISO 16022:2006, 5.2.9 and Annex B, B.2
See ISO 16022:2006, Annex B, B.2
<p>Convenience method that can decode a Data Matrix Code represented as a 2D array of booleans. "true" is taken to mean a black module.</p>
<p>Decodes a Data Matrix Code represented as a {@link BitMatrix}. A 1 or "true" is taken to mean a black module.</p>
<p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to correct the errors in-place using Reed-Solomon error correction.</p>
<p>Deduces version information from Data Matrix dimensions.</p>
See ISO 16022:2006 5.5.1 Table 7
<p>Detects a Data Matrix Code in an image.</p>
Calculates the position of the white top right module using the output of the rectangle detector for a rectangular matrix
Calculates the position of the white top right module using the output of the rectangle detector for a square matrix
Increments the Integer associated with a key by one.
Counts the number of black/white transitions between two points, using something like Bresenham's algorithm.
Handle "end of data" situations
Main constructor
Places the 8 bits of a utah-shaped symbol character in ECC200.
Creates the ECC200 error correction for an encoded message.
Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).
Determines the number of consecutive characters that are encodable using numeric compaction.
Overrides the symbol info set used by this class. Used for testing purposes.
This method detects a code in a "pure" image -- that is, pure monochrome image which contains only an unrotated, unskewed, image of a code, with some white border around it. This is a specialized method that works exceptionally fast in this special case.
Encode the given symbol info to a bit matrix.
Convert the ByteMatrix to BitMatrix.
<p>Creates a finder that will search the image for three finder patterns.</p>
the second one is the encodation method, and the other two are for the variable length
Not private for testing
Try to construct a valid rows sequence Recursion is used to implement backtracking
Whether the pairs form a valid find pattern seqience, either complete or a prefix
Remove all the rows that contains only specified pairs
Returns true when one of the rows already contains all the pairs
Only used for unit testing
Not private for unit testing
not private for testing
Records the size of all runs of white and black pixels, starting with white. This is just like recordPattern, except it records all the counters, and uses our builtin "counters" member for storage.
Assumes that counters[position] is a bar.
Creates a reader that assumes all encoded data is data, and does not treat the final character as a check digit. It will not decoded "extended Code 39" sequences.
Creates a reader that can be configured to check the last character as a check digit. It will not decoded "extended Code 39" sequences. data, and verify that the checksum passes.
Creates a reader that can be configured to check the last character as a check digit, or optionally attempt to decode "extended Code 39" sequences that are used to encode the full ASCII character set. data, and verify that the checksum passes. text.
For efficiency, returns -1 on failure. Not throwing here saved as many as 700 exceptions per image when using some of our blackbox images.
Based on pattern of odd-even ('L' and 'G') patterns used to encoded the explicitly-encoded digits in a barcode, determines the implicitly encoded first digit and adds it to the result string. encode digits
Identify where the start of the middle / payload section starts.
The start & end patterns must be pre/post fixed by a quiet zone. This zone must be at least 10 times the width of a narrow line.  Scan back until we either get to the start of the barcode or match the necessary number of quiet zone pixels. Note: Its assumed the row is reversed when using this method to find quiet zone after the end pattern.
Skip all whitespace until we get to the first black line.
Identify where the end of the middle / payload section ends.
Attempts to decode a sequence of ITF black/white lines into single digit.
We're going to examine rows from the middle outward, searching alternately above and below the middle, and farther out each time. rowStep is the number of rows between each successive attempt above and below the middle. So we'd scan row middle, then middle - rowStep, then middle + rowStep, then middle - (2 * rowStep), etc. rowStep is bigger as the image is taller, but is always at least 1. We've somewhat arbitrarily decided that moving up and down by about 1/16 of the image is pretty good; we try more of the image if "trying harder".
Records the size of successive runs of white and black pixels in a row, starting at a given point. The values are recorded in the given array, and the number of runs recorded is equal to the size of the array. If the row starts on a white pixel at the given start point, then the first count recorded is the run of white pixels starting from that point; likewise it is the count of a run of black pixels if the row begin on a black pixels at that point. of pixels
Determines how closely a set of observed counts of runs of black/white values matches a given target pattern. This is reported as the ratio of the total variance from the expected pattern proportions across all pattern elements, to the length of the pattern.
Transform a UPC-A code into the equivalent EAN-13 code, and add a check digit if it is not already present.
one {@link ResultMetadataType} to appropriate value, or {@code null} if not known
<p>Like {@link #decodeRow(int, BitArray, java.util.Map)}, but allows caller to inform method about where the UPC/EAN start pattern is found. This allows this to be computed once and reused across many implementations.</p>
Computes the UPC/EAN checksum on a string of digits, and reports whether the checksum is correct or not.
pixel counts, otherwise, it is interpreted as black/white/black/... searched for as a pattern
Attempts to decode a single UPC/EAN-encoded digit. for the digits 0-9 are used, and this indicates the encodings for 0 to 9 that should be used
Expands a UPC-E value back into its full, equivalent UPC-A code value.
Add an occurrence of a value
Determines the maximum occurrence of a set value and returns all values which were set with this occurrence.
Text Compaction mode (see 5.4.1.5) permits all printable ASCII characters to be encoded, i.e. values 32 - 126 inclusive in accordance with ISO/IEC 646 (IRV), as well as selected control characters.
The Text Compaction mode includes all the printable ASCII characters (i.e. values from 32 to 126) and three ASCII control characters: HT or tab (ASCII value 9), LF or line feed (ASCII value 10), and CR or carriage return (ASCII value 13). The Text Compaction mode also includes various latch and shift characters which are used exclusively within the mode. The Text Compaction mode encodes up to 2 characters per codeword. The compaction rules for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode switches are defined in 5.4.2.3.
Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded. This includes all ASCII characters value 0 to 127 inclusive and provides for international character set support.
Numeric Compaction mode (see 5.4.4) permits efficient encoding of numeric data strings.
Convert a list of Numeric Compacted codewords from Base 900 to Base 10.
TODO ensure that no detected codewords with unknown row number are left we should be able to estimate the row height and use it as a hint for the row number we should also fill the rows top to bottom and bottom to top will be counted several times. It just serves as an indicator to see when we can stop adjusting row numbers
TODO implement properly TODO maybe we should add missing codewords to store the correct row number to make finding row numbers for other columns easier use row height count to make detection of invalid row numbers more reliable
TODO maybe we should add missing codewords to store the correct row number to make finding row numbers for other columns easier use row height count to make detection of invalid row numbers more reliable
TODO don't pass in minCodewordWidth and maxCodewordWidth, pass in barcode columns for start and stop pattern columns. That way width can be deducted from the pattern column. This approach also allows to detect more details about the barcode, e.g. if a bar type (white or black) is wider than it should be. This can happen if the scanner used a bad blackpoint.
This method deals with the fact, that the decoding process doesn't always yield a single most likely value. The current error correction implementation doesn't deal with erasures very well, so it's better to provide a value for these ambiguous codewords instead of treating it as an erasure. The problem is that we don't know which of the ambiguous values to choose. We try decode using the first value, and if that fails, we use another of the ambiguous values and try to decode again. This usually only happens on very hard to read and decode barcodes, so decoding the normal barcodes is not affected by this. be the same length as the ambiguousIndexes array
<p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to correct the errors in-place.</p>
Verify that all is OK with the codeword array.
<p>Detects a PDF417 Code in an image. Only checks 0 and 180 degree rotations.</p> be found and returned
Detects PDF417 codes in an image. Only checks 0 degree rotation be found and returned
Locate the vertices and the codewords area of a black blob using the Start and Stop patterns as locators.
Determines how closely a set of observed counts of runs of black/white values matches a given target pattern. This is reported as the ratio of the total variance from the expected pattern proportions across all pattern elements, to the length of the pattern.
Creates a Barcode row of the width
Sets a specific location in the bar
This function scales the row
Calculates the necessary number of rows as described in annex Q of ISO/IEC 15438:2001(E).
Calculates the number of pad codewords as described in 4.9.2 of ISO/IEC 15438:2001(E).
Determine optimal nr of columns and rows for the specified number of codewords.
Sets max/min row/col values
Determines the number of error correction codewords for a specified error correction level.
Returns the recommended minimum error correction level as described in annex E of ISO/IEC 15438:2001(E).
Generates the error correction codewords according to 4.10 in ISO/IEC 15438:2001(E).
Performs high-level encoding of a PDF417 message using the algorithm described in annex P of ISO/IEC 15438:2001(E). If byte compaction has been selected, then only byte compaction is used. or {@code null} for default / not applicable
Encode parts of the message using Text Compaction as described in ISO/IEC 15438:2001(E), chapter 4.4.2.
Encode parts of the message using Byte Compaction as described in ISO/IEC 15438:2001(E), chapter 4.4.3. The Unicode characters will be converted to binary using the cp437 codepage.
Determines the number of consecutive characters that are encodable using text compaction.
Determines the number of consecutive characters that are encodable using binary compaction.
Takes encoder, accounts for width/height, and retrieves bit matrix
This takes an array holding the values of the PDF 417
Takes and rotates the it 90 degrees
<p>Reads format information from one of its two locations within the QR Code.</p> the valid encoding of format information
<p>Reads version information from one of its two locations within the QR Code.</p> the valid encoding of version information
<p>Reads the bits in the {@link BitMatrix} representing the finder pattern in the correct order in order to reconstruct the codewords bytes contained within the QR Code.</p>
Revert the mask removal done while reading the code words. The bit matrix should revert to its original state.
Prepare the parser for a mirrored operation. This flag has effect only on the {@link #readFormatInformation()} and the {@link #readVersion()}. Before proceeding with {@link #readCodewords()} the {@link #mirror()} method should be called.
Mirror the bit matrix in order to attempt a second reading.
<p>When QR Codes use multiple data blocks, they are actually interleaved. That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This method will separate the data into original blocks.</p>
<p>Implementations of this method reverse the data masking process applied to a QR Code and make its bits ready to read.</p>
data mask patterns a QR Code may use
See specification GBT 18284-2000
<p>Convenience method that can decode a QR Code represented as a 2D array of booleans. "true" is taken to mean a black module.</p>
<p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or "true" is taken to mean a black module.</p>
to establish best match if doesn't seem to match any known pattern
Apply the result points' order correction due to mirroring.
<p>Deduces version information purely from QR Code dimensions.</p>
See ISO 18004:2006 Annex E
See ISO 18004:2006 6.5.1 Table 9
<p>Determines if this alignment pattern "about equals" an alignment pattern at the stated position and size -- meaning, it is at nearly the same center with nearly the same size.</p>
Combines this object's current estimate of a finder pattern position and module size with a new estimate. It returns a new {@code FinderPattern} containing an average of the two.
<p>Creates a finder that will look in a portion of the whole image.</p>
<p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since it's pretty performance-critical and so is written to be fast foremost.</p>
Given a count of black/white/black pixels just seen and an end position, figures the location of the center of this black/white/black run.
<p>After a horizontal scan finds a potential alignment pattern, this method "cross-checks" by scanning down vertically through the center of the possible alignment pattern to see if the same proportion is detected.</p> observed in any reading state, based on the results of the horizontal scan
<p>This is called when a horizontal scan finds a possible alignment pattern. It will cross check with a vertical scan, and if successful, will see if this pattern had been found on a previous horizontal scan. If so, we consider it confirmed and conclude we have found the alignment pattern.</p>
<p>Detects a QR Code in an image.</p>
<p>Computes the dimension (number of modules on a size) of the QR Code based on the position of the finder patterns and estimated module size.</p>
<p>Computes an average estimated module size based on estimated derived from the positions of the three finder patterns.</p>
<p>Estimates module size based on two finder patterns -- it uses {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the width of each, measuring along the axis between their centers.</p>
See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of a finder pattern by looking for a black-white-black run from the center in the direction of another point (another finder pattern center), and in the opposite direction too.
<p>This method traces a line from a point in the image, in the direction towards another point. It begins in a black region, and keeps going until it finds white, then black, then white again. It reports the distance from the start to this point.</p> <p>This is used when figuring out how wide a finder pattern is, when the finder pattern may be skewed or rotated.</p>
<p>Attempts to locate an alignment pattern in a limited region of the image, which is guessed to contain it. This method uses {@link AlignmentPattern}.</p>
<p>Determines if this finder pattern "about equals" a finder pattern at the stated position and size -- meaning, it is at nearly the same center with nearly the same size.</p>
Combines this object's current estimate of a finder pattern position and module size with a new estimate. It returns a new {@code FinderPattern} containing a weighted average based on count.
<p>Creates a finder that will search the image for three finder patterns.</p>
Given a count of black/white/black/white/black pixels just seen and an end position, figures the location of the center of this run.
After a vertical and horizontal scan finds a potential finder pattern, this method "cross-cross-cross-checks" by scanning down diagonally through the center of the possible finder pattern to see if the same proportion is detected. observed in any reading state, based on the results of the horizontal scan
<p>After a horizontal scan finds a potential finder pattern, this method "cross-checks" by scanning down vertically through the center of the possible finder pattern to see if the same proportion is detected.</p> observed in any reading state, based on the results of the horizontal scan
<p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical, except it reads horizontally instead of vertically. This is used to cross-cross check a vertical cross check and locate the real center of the alignment pattern.</p>
<p>This is called when a horizontal scan finds a possible alignment pattern. It will cross check with a vertical scan, and if successful, will, ah, cross-cross-check with another horizontal scan. This is needed primarily to locate the real horizontal center of the pattern in cases of extreme skew. And then we cross-cross-cross check with another diagonal scan.</p> <p>If that succeeds the finder pattern location is added to a list that tracks the number of times each location has been nearly-matched as a finder pattern. Each additional find is more evidence that the location is in fact a finder pattern center
The mask penalty calculation is complicated.  See Table 21 of JISX0510:2004 (p.45) for details. Basically it applies four rules and summate all penalties.
or configuration
-1 if there is no corresponding code in the table.
Choose the best mode by examining the content. Note that 'encoding' is used as a hint; if it is Shift_JIS, and the input is only double-byte Kanji, then we return {@link Mode#KANJI}.
Terminate bits as described in 8.4.8 and 8.4.9 of JISX0510:2004 (p.24).
Get number of data bytes and number of error correction bytes for block id "blockID". Store the result in "numDataBytesInBlock", and "numECBytesInBlock". See table 12 in 8.5.1 of JISX0510:2004 (p.30)
Interleave "bits" with corresponding error correction bytes. On success, store the result in "result". The interleave rule is complicated. See 8.6 of JISX0510:2004 (p.37) for details.
Append mode info. On success, store the result in "bits".
Append length info. On success, store the result in "bits".
Append "bytes" in "mode" mode (encoding) into "bits". On success, store the result in "bits".
Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and give penalty to them. Example: 00000 or 11111.
Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.
Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4 starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we find patterns like 000010111010000, we give penalty once.
Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.
Return the mask bit for "getMaskPattern" at "x" and "y". See 8.8 of JISX0510:2004 for mask pattern conditions.
Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both vertical and horizontal orders respectively.
Set all cells to -1.  -1 means that the cell is empty (not set yet). JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding with the ByteMatrix initialized all to zero.
Build 2D matrix of QR Code from "dataBits" with "ecLevel", "version" and "getMaskPattern". On success, store the result in "matrix" and return true.
Embed basic patterns. On success, modify the matrix and return true. The basic patterns are: - Position detection patterns - Timing patterns - Dark dot at the left bottom corner - Position adjustment patterns, if need be
Embed type information. On success, modify the matrix.
Embed version information if need be. On success, modify the matrix and return true. See 8.10 of JISX0510:2004 (p.47) for how to embed version information.
Embed "dataBits" using "getMaskPattern". On success, modify the matrix and return true. For debugging purposes, it skips masking process if "getMaskPattern" is -1. See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.
Return the position of the most significant bit set (to one) in the "value". The most significant bit is position 32. If there is no bit set, return 0. Examples: - findMSBSet(0) => 0 - findMSBSet(1) => 1 - findMSBSet(255) => 8
Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for "value" using polynomial "poly". The BCH code is used for encoding type information and version information. Example: Calculation of version information of 7. f(x) is created from 7. - 7 = 000111 in 6 bits - f(x) = x^2 + x^1 + x^0 g(x) is given by the standard (p. 67) - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1 Multiply f(x) by x^(18 - 6) - f'(x) = f(x) * x^(18 - 6) - f'(x) = x^14 + x^13 + x^12 Calculate the remainder of f'(x) / g(x) g(x) )x^14 + x^13 + x^12 The remainder is x^11 + x^10 + x^7 + x^4 + x^2 Encode it in binary: 110010010100 The return value is 0xc94 (1100 1001 0100) Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit operations. We don't care if cofficients are positive or negative.
Make bit vector of type information. On success, store the result in "bits" and return true. Encode error correction level and mask pattern. See 8.9 of JISX0510:2004 (p.45) for details.
Make bit vector of version information. On success, store the result in "bits" and return true. See 8.10 of JISX0510:2004 (p.45) for details.
Check if "value" is empty.
Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)
Note that we cannot unify the function with embedPositionDetectionPattern() despite they are almost identical, since we cannot write a function that takes 2D arrays in different sizes in C/C++. We should live with the fact.
Embed position detection patterns and surrounding vertical/horizontal separators.
Embed position adjustment patterns if need be.
Check if "mask_pattern" is valid.
Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).
Converts one row of luminance data to 1 bit data. May actually do the conversion, or return cached data. Callers should assume this method is expensive and call it as seldom as possible. This method is intended for decoding 1D barcodes and may choose to apply sharpening. For callers which only examine one row of pixels at a time, the same BitArray should be reused and passed in with each call for performance. However it is legal to keep more than one row at a time if needed.
Converts one row of luminance data to 1 bit data. May actually do the conversion, or return cached data. Callers should assume this method is expensive and call it as seldom as possible. This method is intended for decoding 1D barcodes and may choose to apply sharpening.
Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or may not apply sharpening. Therefore, a row from this matrix may not be identical to one fetched using getBlackRow(), so don't mix and match between them.
Returns a new object with rotated image data by 90 degrees counterclockwise. Only callable if {@link #isRotateSupported()} is true.
Returns a new object with rotated image data by 45 degrees counterclockwise. Only callable if {@link #isRotateSupported()} is true.
white and vice versa, and each value becomes (255-value).
Decode an image using the state set up by calling setHints() previously. Continuous scan clients will get a <b>large</b> speed increase by using this instead of decode().
This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls to decodeWithState(image) can reuse the same set of readers without reallocating memory. This is important for performance in continuous scan clients.
Orders an array of three ResultPoints in an order [A,B,C] such that AB is less than AC and BC is less than AC, and the angle between BC and BA is less than 180 degrees.
Returns the z component of the cross product between vectors BC and BA.
Test that we can tolerate errors in the parameter locator bits
Zooms a bit matrix so that each bit is factor x factor
Returns a list of the four rotations of the BitMatrix.
Rotates a square BitMatrix to the right by 90 degrees
Returns the transpose of a bit matrix, which is equivalent to rotating the matrix to the right, and then flipping it left-to-right
Helper routines
Given the string contents for the barcode, check that it matches our expectations
Adds a new test for the current directory of images.
Use the multiformat reader to evaluate all decoders in the system.
Make sure ZXing does NOT find a barcode in the image.
Utility for printing out a string in given encoding as a Java statement, since it's better to write that into the Java source file rather than risk character encoding issues in the source file itself.
The last entries are fake entries to test special conditions with C40 encoding
Convert a string of char codewords into a different string which lists each character using its decimal value.
Constructs a BitArray from a String like the one returned from BitArray.toString()
In case the golden images are not monochromatic, convert the RGB values to greyscale.
Writes out a single PNG which is three times the width of the input image, containing from left to right: the original image, the row sampling monochrome version, and the 2D sampling monochrome version.
Creates a default config with on color {@link #BLACK} and off color {@link #WHITE}, generating normal black-on-white barcodes.
Renders a {@link BitMatrix} as an image, where "false" bits are rendered as white, and "true" bits are rendered as black. Uses default configuration.
As {@link #toBufferedImage(BitMatrix)}, but allows customization of the output.
Writes a {@link BitMatrix} to a file with default configuration.
As {@link #writeToFile(BitMatrix, String, File)}, but allows customization of the output.
Writes a {@link BitMatrix} to a stream with default configuration.
As {@link #writeToStream(BitMatrix, String, OutputStream)}, but allows customization of the output.
