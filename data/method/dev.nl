Set the cache name(s) that this resolver should use.
Set a name/attribute map, consisting of method names (e.g. "myMethod") and CacheOperation instances (or Strings to be converted to CacheOperation instances).
Add an attribute for a cacheable method. <p>Method names can be exact matches, or of the pattern "xxx*", "*xxx" or "*xxx*" for matching multiple methods.
Create a new {@link SimpleKey} instance.
Generate a key based on the specified parameters.
Initialize the static configuration of caches. <p>Triggered on startup through {@link #afterPropertiesSet()}; can also be called to re-initialize at runtime.
Check for a registered cache of the given name. In contrast to {@link #getCache(String)}, this method does not trigger the lazy creation of missing caches via {@link #getMissingCache(String)}.
Update the exposed {@link #cacheNames} set with the given name. <p>This will always be called within a full {@link #cacheMap} lock and effectively behaves like a {@code CopyOnWriteArraySet} with preserved order but exposed as an unmodifiable reference.
Decorate the given Cache object if necessary. or simply the passed-in Cache object by default
Return a missing cache with the specified {@code name} or {@code null} if such cache does not exist or could not be created on the fly. <p>Some caches may be created at runtime if the native provider supports it. If a lookup by name does not yield any result, a subclass gets a chance to register such a cache at runtime. The returned cache will be automatically added to this instance. created
Create an {@code AbstractValueAdaptingCache} with the given setting.
Return whether {@code null} values are allowed in this cache.
Convert the given value from the internal store to a user value returned from the get method (adapting {@code null}).
Convert the given user value, as passed into the put method, to a value in the internal store (adapting {@code null}).
Wrap the given store value with a {@link SimpleValueWrapper}, also going through {@link #fromStoreValue} conversion. Useful for {@link #get(Object)} and {@link #putIfAbsent(Object, Object)} implementations.
Construct a CompositeCacheManager from the given delegate CacheManagers.
Specify the CacheManagers to delegate to.
Indicate whether a {@link NoOpCacheManager} should be added at the end of the delegate list. In this case, any {@code getCache} requests not handled by the configured CacheManagers will be automatically handled by the {@link NoOpCacheManager} (and hence never return {@code null}).
Specify the collection of Cache instances to use for this CacheManager.
Create a new SimpleValueWrapper instance for exposing the given value.
Create a new ContextBeanFactoryReference for the given context.
Create the BeanFactory instance, given an array of class path resource Strings which should be combined. This is split out as a separate method so that subclasses can override the actual BeanFactory implementation class. <p>Delegates to {@code createApplicationContext} by default, wrapping the result in a ContextBeanFactoryReference. (for example, a ContextBeanFactoryReference wrapping an ApplicationContext)
Create the ApplicationContext instance, given an array of class path resource Strings which should be combined
Returns an instance which uses the default "classpath*:beanRefContext.xml", as the name of the definition file(s). All resources returned by the current thread's context class loader's {@code getResources} method with this name will be combined to create a definition, which is just a BeanFactory.
Returns an instance which uses the the specified selector, as the name of the definition file(s). In the case of a name with a Spring "classpath*:" prefix, or with no prefix, which is treated the same, the current thread's context class loader's {@code getResources} method will be called with this value to get all resources having that name. These resources will then be combined to form a definition. In the case where the name uses a Spring "classpath:" prefix, or a standard URL prefix, then only one resource file will be loaded as the definition. combined to form the definition for the BeanFactoryLocator instance. Any such files must form a valid ApplicationContext definition.
Constructor which uses the the specified name as the resource name of the definition file(s). (either a URL or a "classpath:" / "classpath*:" pseudo URL)
Return an instance object implementing BeanFactoryLocator. This will normally be a singleton instance of the specific ContextSingletonBeanFactoryLocator class, using the default resource selector.
Return an instance object implementing BeanFactoryLocator. This will normally be a singleton instance of the specific ContextSingletonBeanFactoryLocator class, using the specified resource selector. which instance to return.
The name of the {@link AdviceMode} attribute for the annotation specified by the generic type {@code A}. The default is {@value #DEFAULT_ADVICE_MODE_ATTRIBUTE_NAME}, but subclasses may override in order to customize.
Create a new {@code AnnotatedBeanDefinitionReader} for the given registry. If the registry is {@link EnvironmentCapable}, e.g. is an {@code ApplicationContext}, the {@link Environment} will be inherited, otherwise a new {@link StandardEnvironment} will be created and used. in the form of a {@code BeanDefinitionRegistry}
Create a new {@code AnnotatedBeanDefinitionReader} for the given registry and using the given {@link Environment}. in the form of a {@code BeanDefinitionRegistry} profiles.
Return the BeanDefinitionRegistry that this scanner operates on.
Set the Environment to use when evaluating whether {@link Conditional @Conditional}-annotated component classes should be registered. <p>The default is a {@link StandardEnvironment}.
Set the BeanNameGenerator to use for detected bean classes. <p>The default is a {@link AnnotationBeanNameGenerator}.
Set the ScopeMetadataResolver to use for detected bean classes. <p>The default is an {@link AnnotationScopeMetadataResolver}.
Get the Environment from the given registry if possible, otherwise return a new StandardEnvironment.
Derive a bean name from one of the annotations on the class.
Check whether the given annotation is a stereotype that is allowed to suggest a component name through its annotation {@code value()}.
Derive a default bean name from the given bean definition. <p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}.
Derive a default bean name from the given bean definition. <p>The default implementation simply builds a decapitalized version of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao". <p>Note that inner classes will thus have names of the form "outerClassName.InnerClassName", which because of the period in the name may be an issue if you are autowiring by name.
Create a new AnnotationConfigApplicationContext that needs to be populated through {@link #register} calls and then manually {@linkplain #refresh refreshed}.
Create a new AnnotationConfigApplicationContext with the given DefaultListableBeanFactory.
Create a new AnnotationConfigApplicationContext, deriving bean definitions from the given annotated classes and automatically refreshing the context. e.g. {@link Configuration @Configuration} classes
Create a new AnnotationConfigApplicationContext, scanning for bean definitions in the given packages and automatically refreshing the context.
Provide a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader} and/or {@link ClassPathBeanDefinitionScanner}, if any. <p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}. <p>Any call to this method must occur prior to calls to {@link #register(Class...)} and/or {@link #scan(String...)}.
Set the {@link ScopeMetadataResolver} to use for detected bean classes. <p>The default is an {@link AnnotationScopeMetadataResolver}. <p>Any call to this method must occur prior to calls to {@link #register(Class...)} and/or {@link #scan(String...)}.
Register one or more annotated classes to be processed. <p>Note that {@link #refresh()} must be called in order for the context to fully process the new classes. e.g. {@link Configuration @Configuration} classes
Perform a scan within the specified base packages. <p>Note that {@link #refresh()} must be called in order for the context to fully process the new classes.
Register all relevant annotation post processors in the given registry.
Register all relevant annotation post processors in the given registry. that this registration was triggered from. May be {@code null}. that have actually been registered by this call
Construct a new {@code AnnotationScopeMetadataResolver}.
Construct a new {@code AnnotationScopeMetadataResolver} using the supplied default {@link ScopedProxyMode}.
Set the type of annotation that is checked for by this {@code AnnotationScopeMetadataResolver}.
Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory. of a {@code BeanDefinitionRegistry}
Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory. <p>If the passed-in bean factory does not only implement the {@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader} interface, it will be used as default {@code ResourceLoader} as well. This will usually be the case for {@link org.springframework.context.ApplicationContext} implementations. <p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader} will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}. <p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its environment will be used by this reader.  Otherwise, the reader will initialize and use a {@link org.springframework.core.env.StandardEnvironment}. All {@code ApplicationContext} implementations are {@code EnvironmentCapable}, while normal {@code BeanFactory} implementations are not. of a {@code BeanDefinitionRegistry} {@link org.springframework.stereotype.Component @Component}, {@link org.springframework.stereotype.Repository @Repository}, {@link org.springframework.stereotype.Service @Service}, and {@link org.springframework.stereotype.Controller @Controller} stereotype annotations
Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and using the given {@link Environment} when evaluating bean definition profile metadata. <p>If the passed-in bean factory does not only implement the {@code BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it will be used as default {@code ResourceLoader} as well. This will usually be the case for {@link org.springframework.context.ApplicationContext} implementations. <p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader} will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}. of a {@code BeanDefinitionRegistry} {@link org.springframework.stereotype.Component @Component}, {@link org.springframework.stereotype.Repository @Repository}, {@link org.springframework.stereotype.Service @Service}, and {@link org.springframework.stereotype.Controller @Controller} stereotype annotations definition profile metadata
Set the defaults to use for detected beans.
Return the defaults to use for detected beans (never {@code null}).
Set the name-matching patterns for determining autowire candidates.
Set the BeanNameGenerator to use for detected bean classes. <p>Default is a {@link AnnotationBeanNameGenerator}.
Set the ScopeMetadataResolver to use for detected bean classes. Note that this will override any custom "scopedProxyMode" setting. <p>The default is an {@link AnnotationScopeMetadataResolver}.
Specify the proxy behavior for non-singleton scoped beans. Note that this will override any custom "scopeMetadataResolver" setting. <p>The default is {@link ScopedProxyMode#NO}.
Specify whether to register annotation config post-processors. <p>The default is to register the post-processors. Turn this off to be able to ignore the annotations or to process them differently.
Perform a scan within the specified base packages.
Perform a scan within the specified base packages, returning the registered bean definitions. <p>This method does <i>not</i> register an annotation config processor but rather leaves this up to the caller.
Apply further settings to the given bean definition, beyond the contents retrieved from scanning the component class.
Register the specified bean with the given registry. <p>Can be overridden in subclasses, e.g. to adapt the registration process or to register further bean definitions for each scanned bean.
Check the given candidate's bean name, determining whether the corresponding bean definition needs to be registered or conflicts with an existing definition. {@code false} if it should be skipped because there is an existing, compatible bean definition for the specified name bean definition has been found for the specified name
Determine whether the given new bean definition is compatible with the given existing bean definition. <p>The default implementation considers them as compatible when the existing bean definition comes from the same source or from a non-scanning source. explicitly defined one or a previously generated one from scanning new definition to be skipped in favor of the existing definition
Create a ClassPathScanningCandidateComponentProvider with a {@link StandardEnvironment}. {@link Component @Component}, {@link Repository @Repository}, {@link Service @Service}, and {@link Controller @Controller} stereotype annotations
Create a ClassPathScanningCandidateComponentProvider with the given {@link Environment}. {@link Component @Component}, {@link Repository @Repository}, {@link Service @Service}, and {@link Controller @Controller} stereotype annotations
Return the ResourceLoader that this component provider uses.
Set the {@link MetadataReaderFactory} to use. <p>Default is a {@link CachingMetadataReaderFactory} for the specified {@linkplain #setResourceLoader resource loader}. <p>Call this setter method <i>after</i> {@link #setResourceLoader} in order for the given MetadataReaderFactory to override the default factory.
Return the MetadataReaderFactory used by this component provider.
Set the Environment to use when resolving placeholders and evaluating {@link Conditional @Conditional}-annotated component classes. <p>The default is a {@link StandardEnvironment}.
Returns the {@link BeanDefinitionRegistry} used by this scanner, if any.
Set the resource pattern to use when scanning the classpath. This value will be appended to each base package name.
Add an include type filter to the <i>end</i> of the inclusion list.
Add an exclude type filter to the <i>front</i> of the exclusion list.
Reset the configured type filters. the {@link Component @Component}, {@link Repository @Repository}, {@link Service @Service}, and {@link Controller @Controller} stereotype annotations
Scan the class path for candidate components.
Resolve the specified base package into a pattern specification for the package search path. <p>The default implementation resolves placeholders against system properties, and converts a "."-based package path to a "/"-based resource path.
Determine whether the given class does not match any exclude filter and does match at least one include filter.
Determine whether the given class is a candidate component based on any {@code @Conditional} annotations.
Determine whether the given bean definition qualifies as candidate. <p>The default implementation checks whether the class is concrete (i.e. not abstract and not an interface). Can be overridden in subclasses.
Clear the underlying metadata cache, removing all cached class metadata.
Create a new CommonAnnotationBeanPostProcessor, with the init and destroy annotation types set to {@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy}, respectively.
Ignore the given resource type when resolving {@code @Resource} annotations. <p>By default, the {@code javax.xml.ws.WebServiceContext} interface will be ignored, since it will be resolved by the JAX-WS runtime.
Set whether to allow a fallback to a type match if no explicit name has been specified. The default name (i.e. the field name or bean property name) will still be checked first; if a bean of that name exists, it will be taken. However, if no bean of that name exists, a by-type resolution of the dependency will be attempted if this flag is "true". <p>Default is "true". Switch this flag to "false" in order to enforce a by-name lookup in all cases, throwing an exception in case of no name match.
Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource injection, <b>even for {@code name} attributes and default names</b>. <p>Default is "false": Resource names are used for Spring bean lookups in the containing BeanFactory; only {@code mappedName} attributes point directly into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups in any case, even for {@code name} attributes and default names.
Specify the factory for objects to be injected into {@code @Resource} {@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods, <b>for {@code mappedName} attributes that point directly into JNDI</b>. This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order to enforce JNDI lookups even for {@code name} attributes and default names. <p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory} for JNDI lookup behavior equivalent to standard Java EE 5 resource injection.
Specify the factory for objects to be injected into {@code @Resource} {@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods, <b>for {@code name} attributes and default names</b>. <p>The default is the BeanFactory that this post-processor is defined in, if any, looking up resource names as Spring bean names. Specify the resource factory explicitly for programmatic usage of this post-processor. <p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory} leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection, even for {@code name} attributes and default names. This is the same behavior that the "alwaysUseJndiLookup" flag enables.
Obtain a lazily resolving resource proxy for the given name and type, delegating to {@link #getResource} on demand once a method call comes in.
Obtain the resource object for the given name and type.
Obtain a resource object for the given name and type through autowiring based on the given factory.
Return the resource name for the lookup.
Return the desired type for the lookup.
Build a DependencyDescriptor for the underlying field/method.
The {@link BeanNameGenerator} class to be used for naming detected components within the Spring container. <p>The default value of the {@link BeanNameGenerator} interface itself indicates that the scanner used to process this {@code @ComponentScan} annotation should use its inherited bean name generator, e.g. the default {@link AnnotationBeanNameGenerator} or any custom instance supplied to the application context at bootstrap time.
Specify whether scanned beans should be registered for lazy initialization. <p>Default is {@code false}; switch this to {@code true} when desired.
The type of filter to use. <p>Default is {@link FilterType#ANNOTATION}.
Invoke {@link ResourceLoaderAware}, {@link BeanClassLoaderAware} and {@link BeanFactoryAware} contracts if implemented by the given {@code filter}.
Create a new {@link ConditionEvaluator} instance.
Determine if an item should be skipped based on {@code @Conditional} annotations. The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a {@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})
Determine if an item should be skipped based on {@code @Conditional} annotations.
Create a new {@link ConfigurationClass} with the given name.
Create a new {@link ConfigurationClass} representing a class that was imported using the {@link Import} annotation or automatically processed as a nested configuration class (if importedBy is not {@code null}).
Create a new {@link ConfigurationClass} representing a class that was imported using the {@link Import} annotation or automatically processed as a nested configuration class (if imported is {@code true}).
Return whether this configuration class was registered via @{@link Import} or automatically registered due to being nested within another configuration class.
Merge the imported-by declarations from the given configuration class into this one.
Return the configuration classes that imported this class, or an empty Set if this configuration was not imported.
Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used to populate the given {@link BeanDefinitionRegistry}.
Read {@code configurationModel}, registering bean definitions with the registry based on its contents.
Read a particular {@link ConfigurationClass}, registering bean definitions for the class itself and all of its {@link Bean} methods.
Register the {@link Configuration} class itself as a bean definition.
Read the given {@link BeanMethod}, registering bean definitions with the BeanDefinitionRegistry based on its contents.
Loads the specified class and generates a CGLIB subclass of it equipped with container-aware callbacks capable of respecting scoping and other bean semantics.
Creates a new CGLIB {@link Enhancer} instance.
Uses enhancer to generate a subclass of superclass, ensuring that callbacks are registered for the new subclass.
Check the BeanFactory to see whether the bean named <var>beanName</var> already exists. Accounts for the fact that the requested bean may be "in creation", i.e.: we're in the middle of servicing the initial request for this bean. From an enhanced factory method's perspective, this means that the bean does not actually yet exist, and that it is now our job to create it for the first time by executing the logic in the corresponding factory method. <p>Said another way, this check repurposes {@link ConfigurableBeanFactory#isCurrentlyInCreation(String)} to determine whether the container is calling this method or the user is calling this method.
Check whether the given method corresponds to the container's currently invoked factory method. Compares method name and parameter types only in order to work around a potential problem with covariant return types (currently only known to happen on Groovy classes).
Create a subclass proxy that intercepts calls to getObject(), delegating to the current BeanFactory instead of creating a new instance. These proxies are created only when calling a FactoryBean from within a Bean method, allowing for proper scoping semantics even when working against the FactoryBean instance directly. If a FactoryBean instance is fetched through the container via &-dereferencing, it will not be proxied. This too is aligned with the way XML configuration works.
Create a new {@link ConfigurationClassParser} instance that will be used to populate the set of configuration classes.
Apply processing and build a complete {@link ConfigurationClass} by reading the annotations, members and methods from the source class. This method can be called multiple times as relevant sources are discovered.
Register member (nested) classes that happen to be configuration classes themselves.
Process the given <code>@PropertySource</code> annotation metadata.
Returns {@code @Import} class, considering all meta-annotations.
Recursively collect all declared {@code @Import} values. Unlike most meta-annotations it is valid to have several {@code @Import}s declared with different values; the usual process of returning values from the first meta-annotation on a class is not sufficient. <p>For example, it is common for a {@code @Configuration} class to declare direct {@code @Import}s in addition to meta-imports originating from an {@code @Enable} annotation.
Invoke {@link ResourceLoaderAware}, {@link BeanClassLoaderAware} and {@link BeanFactoryAware} contracts if implemented by the given {@code bean}.
Validate each {@link ConfigurationClass} object.
Factory method to obtain a {@link SourceClass} from a {@link ConfigurationClass}.
Factory method to obtain a {@link SourceClass} from a {@link Class}.
Factory method to obtain {@link SourceClass}s from class names.
Factory method to obtain a {@link SourceClass} from a class name.
using fully qualified class names as default bean names
Set the {@link SourceExtractor} to use for generated bean definitions that correspond to {@link Bean} factory methods.
Set the {@link ProblemReporter} to use. <p>Used to register any problems detected with {@link Configuration} or {@link Bean} declarations. For instance, an @Bean method marked as {@code final} is illegal and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.
Set the {@link MetadataReaderFactory} to use. <p>Default is a {@link CachingMetadataReaderFactory} for the specified {@linkplain #setBeanClassLoader bean class loader}.
Set the {@link BeanNameGenerator} to be used when triggering component scanning from {@link Configuration} classes and when registering {@link Import}'ed configuration classes. The default is a standard {@link AnnotationBeanNameGenerator} for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner}) and a variant thereof for imported configuration classes (using unique fully-qualified class names instead of standard component overriding). <p>Note that this strategy does <em>not</em> apply to {@link Bean} methods. <p>This setter is typically only appropriate when configuring the post-processor as a standalone bean definition in XML, e.g. not using the dedicated {@code AnnotationConfig*} application contexts or the {@code <context:annotation-config>} element. Any bean name generator specified against the application context will take precedence over any value set here.
Build and validate a configuration model based on the registry of {@link Configuration} classes.
Post-processes a BeanFactory in search of Configuration class BeanDefinitions; any candidates are then enhanced by a {@link ConfigurationClassEnhancer}. Candidate status is determined by BeanDefinition attribute metadata.
Check whether the given bean definition is a candidate for a configuration class (or a nested component class declared within a configuration/component class, to be auto-registered as well), and mark it accordingly.
Check the given metadata for a configuration class candidate (or nested component class declared within a configuration/component class). reflection-detected bean definition; {@code false} otherwise
Check the given metadata for a full configuration class candidate (i.e. a class annotated with {@code @Configuration}). configuration class, including cross-method call interception
Check the given metadata for a lite configuration class candidate (e.g. a class annotated with {@code @Component} or just having {@code @Import} declarations or {@code @Bean methods}). configuration class, just registering it and scanning it for {@code @Bean} methods
Determine whether the given bean definition indicates a full {@code @Configuration} class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.
Determine whether the given bean definition indicates a lite {@code @Configuration} class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.
Determine the order for the given configuration class bean definition, as set by {@link #checkConfigurationClassCandidate}. or {@link Ordered#LOWEST_PRECEDENCE} if none declared
Whether AspectJ weaving should be enabled.
Register an extended JSR-330 scope annotation, mapping it onto a specific Spring scope by name.
Resolve the given annotation type into a named Spring scope. <p>The default implementation simply checks against registered scopes. Can be overridden for custom mapping rules, e.g. naming conventions.
Create a new ScannedGenericBeanDefinition for the class that the given MetadataReader describes.
Set the name of the scope.
Get the name of the scope.
Set the proxy-mode to be applied to the scoped instance.
Get the proxy-mode to be applied to the scoped instance.
Return a Collection containing all ApplicationListeners.
Return a Collection of ApplicationListeners matching the given event type. Non-matching listeners get excluded early. non-matching listeners early, based on cached matching information.
Actually retrieve the application listeners for the given event and source type.
Filter a listener early through checking its generically declared event type before trying to instantiate it. <p>If this method returns {@code true} for a given listener as a first pass, the listener instance will get retrieved and fully evaluated through a {@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards. for the given event type
Determine whether the given listener supports the given event. <p>The default implementation detects the {@link SmartApplicationListener} and {@link GenericApplicationListener} interfaces. In case of a standard {@link ApplicationListener}, a {@link GenericApplicationListenerAdapter} will be used to introspect the generically declared type of the target listener. for the given event type
Create a new ContextStartedEvent. (must not be {@code null})
Get the {@code ApplicationContext} that the event was raised for.
Initialize this instance.
Process the specified {@link ApplicationEvent}, checking if the condition match and handling non-null result, if any.
Resolve the method arguments to use for the specified {@link ApplicationEvent}. <p>These arguments will be used to invoke the method handled by this instance. Can return {@code null} to indicate that no suitable arguments could be resolved and therefore the method should not be invoked at all for the specified event.
Invoke the event listener method with the given argument values.
Return the target bean instance to use.
Return the condition to use. <p>Matches the {@code condition} attribute of the {@link EventListener} annotation or any matching attribute on a composed annotation that is meta-annotated with {@code @EventListener}.
Add additional details such as the bean type and method signature to the given error message.
Assert that the target bean class is an instance of the class where the given method is declared. In some cases the actual bean instance at event- processing time may be a JDK dynamic proxy (lazy initialization, prototype beans, and others). Event listener beans that require proxying should prefer class-based proxy mechanisms.
Creates a new ContextClosedEvent. (must not be {@code null})
Create a new ContextRefreshedEvent. or refreshed (must not be {@code null})
Create a new ContextStartedEvent. (must not be {@code null})
Create a new ContextStoppedEvent. (must not be {@code null})
Create the suitable {@link EvaluationContext} for the specified event handling on the specified method.
Specify if the condition defined by the specified expression matches.
Return the {@link EventListenerFactory} instances to use to handle {@link EventListener} annotated methods.
Set the application event class to publish. <p>The event class <b>must</b> have a constructor with a single {@code Object} argument for the event source. The interceptor will pass in the invoked object. {@code null} or if it is not an {@code ApplicationEvent} subclass or if it does not expose a constructor that takes a single {@code Object} argument
Create a new SimpleApplicationEventMulticaster for the given BeanFactory.
Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor}) to invoke each listener with. <p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor}, executing all listeners synchronously in the calling thread. <p>Consider specifying an asynchronous task executor here to not block the caller until all listeners have been executed. However, note that asynchronous execution will not participate in the caller's thread context (class loader, transaction association) unless the TaskExecutor explicitly supports this.
Return the current task executor for this multicaster.
Set the {@link ErrorHandler} to invoke in case an exception is thrown from a listener. <p>Default is none, with a listener exception stopping the current multicast and getting propagated to the publisher of the current event. If a {@linkplain #setTaskExecutor task executor} is specified, each individual listener exception will get propagated to the executor but won't necessarily stop execution of other listeners. <p>Consider setting an {@link ErrorHandler} implementation that catches and logs exceptions (a la {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER}) or an implementation that logs exceptions while nevertheless propagating them (e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER}).
Return the current error handler for this multicaster.
Create a SourceFilteringListener for the given event source. only processing events from this source from the specified source
Create a SourceFilteringListener for the given event source, expecting subclasses to override the {@link #onApplicationEventInternal} method (instead of specifying a delegate listener). only processing events from this source
Actually process the event, after having filtered according to the desired event source already. <p>The default implementation invokes the specified delegate, if any.
Create a new instance with the specified {@link AnnotatedElement} and optional target {@link Class}.
Create a new instance with the specified {@link SpelExpressionParser}.
Create a new instance with a default {@link SpelExpressionParser}.
Return the {@link SpelExpressionParser} to use.
Return the {@link Expression} for the specified SpEL value <p>Parse the expression if it hasn't been already.
Load the param information only when needed.
Create a new {@code StandardBeanExpressionResolver} with default settings.
Create a new {@code StandardBeanExpressionResolver} with the given bean class loader, using it as the basis for expression compilation.
Set the prefix that an expression string starts with. The default is "#{".
Set the suffix that an expression string ends with. The default is "}".
Specify the EL parser to use for expression parsing. <p>Default is a {@link org.springframework.expression.spel.standard.SpelExpressionParser}, compatible with standard Unified EL style expression syntax.
Reset the LocaleContext for the current thread.
Associate the given LocaleContext with the current thread, <i>not</i> exposing it as inheritable for child threads. <p>The given LocaleContext may be a {@link TimeZoneAwareLocaleContext}, containing a locale with associated time zone information. or {@code null} to reset the thread-bound context
Associate the given LocaleContext with the current thread. <p>The given LocaleContext may be a {@link TimeZoneAwareLocaleContext}, containing a locale with associated time zone information. or {@code null} to reset the thread-bound context for child threads (using an {@link InheritableThreadLocal})
Return the LocaleContext associated with the current thread, if any.
Associate the given Locale with the current thread, preserving any TimeZone that may have been set already. <p>Will implicitly create a LocaleContext for the given Locale, <i>not</i> exposing it as inheritable for child threads. the locale part of thread-bound context
Associate the given Locale with the current thread, preserving any TimeZone that may have been set already. <p>Will implicitly create a LocaleContext for the given Locale. the locale part of thread-bound context for child threads (using an {@link InheritableThreadLocal})
Return the Locale associated with the current thread, if any, or the system default Locale else. This is effectively a replacement for {@link java.util.Locale#getDefault()}, able to optionally respect a user-level Locale setting. <p>Note: This method has a fallback to the system default Locale. If you'd like to check for the raw LocaleContext content (which may indicate no specific locale through {@code null}, use {@link #getLocaleContext()} and call {@link LocaleContext#getLocale()} specific Locale has been associated with the current thread
Associate the given TimeZone with the current thread, preserving any Locale that may have been set already. <p>Will implicitly create a LocaleContext for the given Locale, <i>not</i> exposing it as inheritable for child threads. the time zone part of the thread-bound context
Associate the given TimeZone with the current thread, preserving any Locale that may have been set already. <p>Will implicitly create a LocaleContext for the given Locale. the time zone part of the thread-bound context for child threads (using an {@link InheritableThreadLocal})
Return the TimeZone associated with the current thread, if any, or the system default TimeZone else. This is effectively a replacement for {@link java.util.TimeZone#getDefault()}, able to optionally respect a user-level TimeZone setting. <p>Note: This method has a fallback to the system default Locale. If you'd like to check for the raw LocaleContext content (which may indicate no specific time zone through {@code null}, use {@link #getLocaleContext()} and call {@link TimeZoneAwareLocaleContext#getTimeZone()} after downcasting to {@link TimeZoneAwareLocaleContext}. specific TimeZone has been associated with the current thread
Create a new SimpleLocaleContext that exposes the specified Locale. Every {@link #getLocale()} call will return this Locale.
Create a new SimpleTimeZoneAwareLocaleContext that exposes the specified Locale and TimeZone. Every {@link #getLocale()} call will return the given Locale, and every {@link #getTimeZone()} call will return the given TimeZone.
Create a new AbstractApplicationContext with no parent.
Create a new AbstractApplicationContext with the given parent context.
Set a friendly name for this context. Typically done during initialization of concrete context implementations. <p>Default is the object id of the context instance.
Publish the given event to all listeners. or a payload object to be turned into a {@link PayloadApplicationEvent})
Return the internal ApplicationEventMulticaster used by the context.
Return the internal LifecycleProcessor used by the context.
Return the ResourcePatternResolver to use for resolving location patterns into Resource instances. Default is a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}, supporting Ant-style location patterns. <p>Can be overridden in subclasses, for extended resolution strategies, for example in a web environment. <p><b>Do not call this when needing to resolve a location pattern.</b> Call the context's {@code getResources} method instead, which will delegate to the ResourcePatternResolver.
Return the list of BeanFactoryPostProcessors that will get applied to the internal BeanFactory.
Return the list of statically specified ApplicationListeners.
Create and return a new {@link StandardEnvironment}. <p>Subclasses may override this method in order to supply a custom {@link ConfigurableEnvironment} implementation.
Prepare this context for refreshing, setting its startup date and active flag as well as performing any initialization of property sources.
<p>Replace any stub property sources with actual instances.
Tell the subclass to refresh the internal bean factory.
Configure the factory's standard context characteristics, such as the context's ClassLoader and post-processors.
Instantiate and invoke all registered BeanFactoryPostProcessor beans, respecting explicit order if given. <p>Must be called before singleton instantiation.
Instantiate and invoke all registered BeanPostProcessor beans, respecting explicit order if given. <p>Must be called before any instantiation of application beans.
Initialize the MessageSource. Use parent's if none defined in this context.
Initialize the ApplicationEventMulticaster. Uses SimpleApplicationEventMulticaster if none defined in the context.
Initialize the LifecycleProcessor. Uses DefaultLifecycleProcessor if none defined in the context.
Template method which can be overridden to add context-specific refresh work. Called on initialization of special beans, before instantiation of singletons. <p>This implementation is empty.
Add beans that implement ApplicationListener as listeners. Doesn't affect other listeners, which can be added without being beans.
Finish the initialization of this context's bean factory, initializing all remaining singleton beans.
Finish the refresh of this context, invoking the LifecycleProcessor's onRefresh() method and publishing the {@link org.springframework.context.event.ContextRefreshedEvent}.
Cancel this context's refresh attempt, resetting the {@code active} flag after an exception got thrown.
Reset Spring's common core caches, in particular the {@link ReflectionUtils}, {@link ResolvableType} and {@link CachedIntrospectionResults} caches.
Actually performs context closing: publishes a ContextClosedEvent and destroys the singletons in the bean factory of this application context. <p>Called by both {@code close()} and a JVM shutdown hook, if any.
Template method for destroying all beans that this context manages. The default implementation destroy all cached singletons in this context, invoking {@code DisposableBean.destroy()} and/or the specified "destroy-method". <p>Can be overridden to add context-specific bean destruction steps right before or right after standard singleton destruction, while the context's BeanFactory is still active.
Template method which can be overridden to add context-specific shutdown work. The default implementation is empty. <p>Called at the end of {@link #doClose}'s shutdown procedure, after this context's BeanFactory has been closed. If custom shutdown logic needs to execute while the BeanFactory is still active, override the {@link #destroyBeans()} method instead.
Assert that this context's BeanFactory is currently active, throwing an {@link IllegalStateException} if it isn't. <p>Invoked by all {@link BeanFactory} delegation methods that depend on an active context, i.e. in particular all bean accessor methods. <p>The default implementation checks the {@link #isActive() 'active'} status of this context overall. May be overridden for more specific checks, or for a no-op if {@link #getBeanFactory()} itself throws an exception in such a case.
Return the internal bean factory of the parent context if it implements ConfigurableApplicationContext; else, return the parent context itself.
Return the internal MessageSource used by the context.
Return the internal message source of the parent context if it is an AbstractApplicationContext too; else, return the parent context itself.
Subclasses must implement this method to perform the actual configuration load. The method is invoked by {@link #refresh()} before any other initialization work. <p>A subclass will either create a new bean factory and hold a reference to it, or return a single BeanFactory instance that it holds. In the latter case, it will usually throw an IllegalStateException if refreshing the context more than once. attempts are not supported
Specify locale-independent common messages, with the message code as key and the full message String (may contain argument placeholders) as value. <p>May also link to an externally defined Properties object, e.g. defined through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.
Return a Properties object defining locale-independent common messages, if any.
Set whether to use the message code as default message instead of throwing a NoSuchMessageException. Useful for development and debugging. Default is "false". <p>Note: In case of a MessageSourceResolvable with multiple codes (like a FieldError) and a MessageSource that has a parent MessageSource, do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>: Else, you'll get the first code returned as message by the parent, without attempts to check further codes. <p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent, AbstractMessageSource and AbstractApplicationContext contain special checks to delegate to the internal {@link #getMessageInternal} method if available. In general, it is recommended to just use "useCodeAsDefaultMessage" during development and not rely on it in production in the first place, though.
Return whether to use the message code as default message instead of throwing a NoSuchMessageException. Useful for development and debugging. Default is "false". <p>Alternatively, consider overriding the {@link #getDefaultMessage} method to return a custom fallback message for an unresolvable code.
Resolve the given code and arguments as message in the given Locale, returning {@code null} if not found. Does <i>not</i> fall back to the code as default message. Invoked by {@code getMessage} methods. within the message
Try to retrieve the given message from the parent MessageSource, if any. within the message
Return a fallback default message for the given code, if any. <p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated, or return no fallback else. In case of no fallback, the caller will usually receive a NoSuchMessageException from {@code getMessage}. and that we didn't receive an explicit default message for
Subclasses can override this method to resolve a message without arguments in an optimized fashion, i.e. to resolve without involving a MessageFormat. <p>The default implementation <i>does</i> use MessageFormat, through delegating to the {@link #resolveCode} method. Subclasses are encouraged to replace this with optimized resolution. <p>Unfortunately, {@code java.text.MessageFormat} is not implemented in an efficient fashion. In particular, it does not detect that a message pattern doesn't contain argument placeholders in the first place. Therefore, it is advisable to circumvent MessageFormat for messages without arguments. (subclasses are encouraged to support internationalization)
Create a new AbstractRefreshableApplicationContext with the given parent context.
Set whether it should be allowed to override bean definitions by registering a different definition with the same name, automatically replacing the former. If not, an exception will be thrown. Default is "true".
Set whether to allow circular references between beans - and automatically try to resolve them. <p>Default is "true". Turn this off to throw an exception when encountering a circular reference, disallowing them completely.
Determine whether this context currently holds a bean factory, i.e. has been refreshed at least once and not been closed yet.
Create an internal bean factory for this context. Called for each {@link #refresh()} attempt. <p>The default implementation creates a {@link org.springframework.beans.factory.support.DefaultListableBeanFactory} with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this context's parent as parent bean factory. Can be overridden in subclasses, for example to customize DefaultListableBeanFactory's settings.
Customize the internal bean factory used by this context. Called for each {@link #refresh()} attempt. <p>The default implementation applies this context's {@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"} and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings, if specified. Can be overridden in subclasses to customize any of {@link DefaultListableBeanFactory}'s settings.
Create a new AbstractRefreshableConfigApplicationContext with the given parent context.
Set the config locations for this application context in init-param style, i.e. with distinct locations separated by commas, semicolons or whitespace. <p>If not set, the implementation may use a default as appropriate.
Set the config locations for this application context. <p>If not set, the implementation may use a default as appropriate.
Return an array of resource locations, referring to the XML bean definition files that this context should be built with. Can also include location patterns, which will get resolved via a ResourcePatternResolver. <p>The default implementation returns {@code null}. Subclasses can override this to provide a set of resource locations to load bean definitions from.
Return the default config locations to use, for the case where no explicit config locations have been specified. <p>The default implementation returns {@code null}, requiring explicit config locations.
Resolve the given path, replacing placeholders with corresponding environment property values if necessary. Applied to config locations.
Set a single basename, following the basic ResourceBundle convention of not specifying file extension or language codes. The resource location format is up to the specific {@code MessageSource} implementation. <p>Regular and XMl properties files are supported: e.g. "messages" will find a "messages.properties", "messages_en.properties" etc arrangement as well as "messages.xml", "messages_en.xml" etc.
Set an array of basenames, each following the basic ResourceBundle convention of not specifying file extension or language codes. The resource location format is up to the specific {@code MessageSource} implementation. <p>Regular and XMl properties files are supported: e.g. "messages" will find a "messages.properties", "messages_en.properties" etc arrangement as well as "messages.xml", "messages_en.xml" etc. <p>The associated resource bundles will be checked sequentially when resolving a message code. Note that message definitions in a <i>previous</i> resource bundle will override ones in a later bundle, due to the sequential lookup. <p>Note: In contrast to {@link #addBasenames}, this replaces existing entries with the given names and can therefore also be used to reset the configuration.
Add the specified basenames to the existing basename configuration. <p>Note: If a given basename already exists, the position of its entry will remain as in the original set. New entries will be added at the end of the list, to be searched after existing basenames.
Return this {@code MessageSource}'s basename set, containing entries in the order of registration. <p>Calling code may introspect this set as well as add or remove entries.
Set the default charset to use for parsing properties files. Used if no file-specific charset is specified for a file. <p>Default is none, using the {@code java.util.Properties} default encoding: ISO-8859-1. <p>Only applies to classic properties files, not to XML files.
Return the default charset to use for parsing properties files, if any.
Set whether to fall back to the system Locale if no files for a specific Locale have been found. Default is "true"; if this is turned off, the only fallback will be the default file (e.g. "messages.properties" for basename "messages"). <p>Falling back to the system Locale is the default behavior of {@code java.util.ResourceBundle}. However, this is often not desirable in an application server environment, where the system Locale is not relevant to the application at all: set this flag to "false" in such a scenario.
Return whether to fall back to the system Locale if no files for a specific Locale have been found.
Set the number of seconds to cache loaded properties files. <ul> <li>Default is "-1", indicating to cache forever (just like {@code java.util.ResourceBundle}). <li>A positive number will cache loaded properties files for the given number of seconds. This is essentially the interval between refresh checks. Note that a refresh attempt will first check the last-modified timestamp of the file before actually reloading it; so if files don't change, this interval can be set rather low, as refresh attempts will not actually reload. <li>A value of "0" will check the last-modified timestamp of the file on every message access. <b>Do not use this in a production environment!</b> </ul> <p><b>Note that depending on your ClassLoader, expiration might not work reliably since the ClassLoader may hold on to a cached version of the bundle file.</b> Prefer {@link ReloadableResourceBundleMessageSource} over {@link ResourceBundleMessageSource} in such a scenario, in combination with a non-classpath location.
Set the number of milliseconds to cache loaded properties files. Note that it is common to set seconds instead: {@link #setCacheSeconds}. <ul> <li>Default is "-1", indicating to cache forever (just like {@code java.util.ResourceBundle}). <li>A positive number will cache loaded properties files for the given number of milliseconds. This is essentially the interval between refresh checks. Note that a refresh attempt will first check the last-modified timestamp of the file before actually reloading it; so if files don't change, this interval can be set rather low, as refresh attempts will not actually reload. <li>A value of "0" will check the last-modified timestamp of the file on every message access. <b>Do not use this in a production environment!</b> </ul>
Return the number of milliseconds to cache loaded properties files.
Create a new AbstractXmlApplicationContext with the given parent context.
Set whether to use XML validation. Default is {@code true}.
Initialize the bean definition reader used for loading the bean definitions of this context. Default implementation is empty. <p>Can be overridden in subclasses, e.g. for turning off XML validation or using a different XmlBeanDefinitionParser implementation.
Load the bean definitions with the given XmlBeanDefinitionReader. <p>The lifecycle of the bean factory is handled by the {@link #refreshBeanFactory} method; hence this method is just supposed to load and/or register bean definitions.
Return an array of Resource objects, referring to the XML bean definition files that this context should be built with. <p>The default implementation returns {@code null}. Subclasses can override this to provide pre-built Resource objects rather than location Strings.
Create a new ApplicationContextAwareProcessor for the given context.
Determine whether this application object needs to run in an ApplicationContext. <p>Default is "false". Can be overridden to enforce running in a context (i.e. to throw IllegalStateException on accessors if outside a context).
Determine the context class that any context passed to {@code setApplicationContext} must be an instance of. Can be overridden in subclasses.
Subclasses can override this for custom initialization behavior. Gets called by {@code setApplicationContext} after setting the context instance. <p>Note: Does </i>not</i> get called on reinitialization of the context but rather just on first initialization of this object's context reference. <p>The default implementation calls the overloaded {@link #initApplicationContext()} method without ApplicationContext reference.
Return the ApplicationContext that this object is associated with.
Return a MessageSourceAccessor for the application context used by this object, for easy message access.
Create a new ClassPathXmlApplicationContext for bean-style configuration.
Create a new ClassPathXmlApplicationContext, loading the definitions from the given XML file and automatically refreshing the context.
Create a new ClassPathXmlApplicationContext, loading the definitions from the given XML files and automatically refreshing the context.
Create a new ClassPathXmlApplicationContext with the given parent, loading the definitions from the given XML files and automatically refreshing the context.
Create a new ClassPathXmlApplicationContext, loading the definitions from the given XML files. loading all bean definitions and creating all singletons. Alternatively, call refresh manually after further configuring the context.
Create a new ClassPathXmlApplicationContext with the given parent, loading the definitions from the given XML files. loading all bean definitions and creating all singletons. Alternatively, call refresh manually after further configuring the context.
Create a new ClassPathXmlApplicationContext, loading the definitions from the given XML file and automatically refreshing the context. <p>This is a convenience method to load class path resources relative to a given Class. For full flexibility, consider using a GenericApplicationContext with an XmlBeanDefinitionReader and a ClassPathResource argument.
Configure the set of custom converter objects that should be added: implementing {@link org.springframework.core.convert.converter.Converter}, {@link org.springframework.core.convert.converter.ConverterFactory}, or {@link org.springframework.core.convert.converter.GenericConverter}.
Create the ConversionService instance returned by this factory bean. <p>Creates a simple {@link GenericConversionService} instance by default. Subclasses may override to customize the ConversionService instance that gets created.
Specify the maximum time allotted in milliseconds for the shutdown of any phase (group of SmartLifecycle beans with the same 'phase' value). The default value is 30 seconds.
internal helpers
Start the specified bean as part of the given set of Lifecycle beans, making sure that any beans that it depends on are started first.
Stop the specified bean as part of the given set of Lifecycle beans, making sure that any beans that depends on it are stopped first.
Retrieve all applicable Lifecycle beans: all singletons that have already been created, as well as all SmartLifecycle beans (even if they are marked as lazy-init).
Determine the lifecycle phase of the given bean. <p>The default implementation checks for the {@link Phased} interface. Can be overridden to apply other/further policies.
Create a new DefaultMessageSourceResolvable.
Copy constructor: Create a new instance from another resolvable.
Return the default code of this resolvable, that is, the last one in the codes array.
Build a default String representation for this MessageSourceResolvable: including codes, arguments, and default message.
Resolve the given embedded value through this instance's {@link StringValueResolver}.
Create a new FileSystemXmlApplicationContext for bean-style configuration.
Create a new FileSystemXmlApplicationContext, loading the definitions from the given XML file and automatically refreshing the context.
Create a new FileSystemXmlApplicationContext, loading the definitions from the given XML files and automatically refreshing the context.
Create a new FileSystemXmlApplicationContext with the given parent, loading the definitions from the given XML files and automatically refreshing the context.
Create a new FileSystemXmlApplicationContext, loading the definitions from the given XML files. loading all bean definitions and creating all singletons. Alternatively, call refresh manually after further configuring the context.
Create a new FileSystemXmlApplicationContext with the given parent, loading the definitions from the given XML files. loading all bean definitions and creating all singletons. Alternatively, call refresh manually after further configuring the context.
Create a new GenericApplicationContext.
Create a new GenericApplicationContext with the given DefaultListableBeanFactory.
Create a new GenericApplicationContext with the given parent.
Set a ResourceLoader to use for this context. If set, the context will delegate all {@code getResource} calls to the given ResourceLoader. If not set, default resource loading will apply. <p>The main reason to specify a custom ResourceLoader is to resolve resource paths (without URL prefix) in a specific fashion. The default behavior is to resolve such paths as class path locations. To resolve resource paths as file system locations, specify a FileSystemResourceLoader here. <p>You can also pass in a full ResourcePatternResolver, which will be autodetected by the context and used for {@code getResources} calls as well. Else, default resource pattern matching will apply.
Return the underlying bean factory of this context, available for registering bean definitions. <p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the bean factory and its contained beans with application context semantics (autodetecting BeanFactoryPostProcessors, etc).
Create a new GenericGroovyApplicationContext, loading bean definitions from the given resources and automatically refreshing the context.
Create a new GenericGroovyApplicationContext, loading bean definitions from the given resource locations and automatically refreshing the context.
Create a new GenericGroovyApplicationContext, loading bean definitions from the given resource locations and automatically refreshing the context. loading each specified resource name
Exposes the underlying {@link GroovyBeanDefinitionReader} for convenient access to the {@code loadBeanDefinition} methods on it as well as the ability to specify an inline Groovy bean definition closure.
Load bean definitions from the given Groovy scripts or XML files. <p>Note that ".xml" files will be parsed as XML content; all other kinds of resources will be parsed as Groovy scripts.
Load bean definitions from the given Groovy scripts or XML files. <p>Note that ".xml" files will be parsed as XML content; all other kinds of resources will be parsed as Groovy scripts. loading each specified resource name
Implementation of the GroovyObject interface
Create a new GenericXmlApplicationContext, loading bean definitions from the given resources and automatically refreshing the context.
Create a new GenericXmlApplicationContext, loading bean definitions from the given resource locations and automatically refreshing the context.
Create a new GenericXmlApplicationContext, loading bean definitions from the given resource locations and automatically refreshing the context. loading each specified resource name
Exposes the underlying {@link XmlBeanDefinitionReader} for additional configuration facilities and {@code loadBeanDefinition} variations.
Load bean definitions from the given XML resources.
Load bean definitions from the given XML resources. loading each specified resource name
Find all applicable ApplicationContexts for the current application. <p>Called if no specific ApplicationContext has been set for this LiveBeansView.
Actually generate a JSON snapshot of the beans in the given ApplicationContexts. <p>This implementation doesn't use any JSON parsing libraries in order to avoid third-party library dependencies. It produces an array of context description objects, each containing a context and parent attribute as well as a beans attribute with nested bean description objects. Each bean object contains a bean, scope, type and resource attribute, as well as a dependencies attribute with a nested array of bean names that the present bean depends on.
Determine whether the specified bean is eligible for inclusion in the LiveBeansView JSON snapshot.
Determine a resource description for the given bean definition and apply basic JSON escaping (backslashes, double quotes) to it.
Create a new MessageSourceAccessor, using LocaleContextHolder's locale as default locale.
Create a new MessageSourceAccessor, using the given default locale.
Return the default locale to use if no explicit locale has been given. <p>The default implementation returns the default locale passed into the corresponding constructor, or LocaleContextHolder's locale as fallback. Can be overridden in subclasses.
Retrieve the message for the given code and the default Locale.
Retrieve the message for the given code and the given Locale.
Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance) in the default Locale.
Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance) in the given Locale.
Create a new MessageSourceResourceBundle for the given MessageSource and Locale.
Set whether to always apply the MessageFormat rules, parsing even messages without arguments. <p>Default is "false": Messages without arguments are by default returned as-is, without parsing them through MessageFormat. Set this to "true" to enforce MessageFormat for all messages, expecting all message texts to be written with MessageFormat escaping. <p>For example, MessageFormat expects a single quote to be escaped as "''". If your message texts are all written with such escaping, even when not defining argument placeholders, you need to set this flag to "true". Else, only message texts with actual arguments are supposed to be written with MessageFormat escaping.
Return whether to always apply the MessageFormat rules, parsing even messages without arguments.
Render the given default message String. The default message is passed in as specified by the caller and can be rendered into a fully formatted default message shown to the user. <p>The default implementation passes the String to {@code formatMessage}, resolving any argument placeholders found in them. Subclasses may override this method to plug in custom processing of default messages. the message, or {@code null} if none.
Format the given message String, using cached MessageFormats. By default invoked for passed-in default messages, to resolve any argument placeholders found in them. the message, or {@code null} if none
Create a MessageFormat for the given message and Locale.
Template method for resolving argument objects. <p>The default implementation simply returns the given argument array as-is. Can be overridden in subclasses in order to resolve special argument types.
Invoke the given BeanDefinitionRegistryPostProcessor beans.
Invoke the given BeanFactoryPostProcessor beans.
Register the given BeanPostProcessor beans.
Customize the set of {@link PropertySources} to be used by this configurer. Setting this property indicates that environment property sources and local properties should be ignored.
Visit each bean definition in the given bean factory and attempt to replace ${...} property placeholders with values from the given properties.
Returns the property sources that were actually applied during {@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}.
Set per-file charsets to use for parsing properties files. <p>Only applies to classic properties files, not to XML files. names as values. Filenames have to match the basename syntax, with optional locale-specific components: e.g. "WEB-INF/messages" or "WEB-INF/messages_en".
Specify whether to allow for concurrent refresh behavior, i.e. one thread locked in a refresh attempt for a specific cached properties file whereas other threads keep returning the old properties for the time being, until the refresh attempt has completed. <p>Default is "true": this behavior is new as of Spring Framework 4.1, minimizing contention between threads. If you prefer the old behavior, i.e. to fully block on refresh, switch this flag to "false".
Set the PropertiesPersister to use for parsing properties files. <p>The default is a DefaultPropertiesPersister.
Get a PropertiesHolder that contains the actually visible properties for a Locale, after merging all specified resource bundles. Either fetches the holder from the cache or freshly loads it. <p>Only used when caching resource bundle contents forever, i.e. with cacheSeconds < 0. Therefore, merged properties are always cached forever.
Calculate all filenames for the given bundle basename and Locale. Will calculate filenames for the given Locale, the system Locale (if applicable), and the default file.
Calculate the filenames for the given bundle basename and Locale, appending language code, country code, and variant code. E.g.: basename "messages", Locale "de_AT_oo" -> "messages_de_AT_OO", "messages_de_AT", "messages_de". <p>Follows the rules defined by {@link java.util.Locale#toString()}.
Get a PropertiesHolder for the given filename, either from the cache or freshly loaded.
Refresh the PropertiesHolder for the given bundle filename. The holder can be {@code null} if not cached before, or a timed-out cache entry (potentially getting re-validated against the current last-modified timestamp).
Load the properties from the given resource.
Template method for creating a plain new {@link Properties} instance. The default implementation simply calls {@link Properties#Properties()}. <p>Allows for returning a custom {@link Properties} extension in subclasses. Overriding methods should just instantiate a custom {@link Properties} subclass, with no further initialization or population to be performed at that point.
Clear the resource bundle cache. Subsequent resolve calls will lead to reloading of the properties files.
Clear the resource bundle caches of this MessageSource and all its ancestors.
Set the ClassLoader to load resource bundles with. <p>Default is the containing BeanFactory's {@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader}, or the default ClassLoader determined by {@link org.springframework.util.ClassUtils#getDefaultClassLoader()} if not running within a BeanFactory.
Return the ClassLoader to load resource bundles with. <p>Default is the containing BeanFactory's bean ClassLoader.
Return a ResourceBundle for the given basename and code, fetching already generated MessageFormats from the cache. found for the given basename and Locale
Obtain the resource bundle for the given basename and Locale.
Load a property-based resource bundle from the given reader. <p>The default implementation returns a {@link PropertyResourceBundle}.
Return a MessageFormat for the given bundle and code, fetching already generated MessageFormats from the cache. defined for the given code
Efficiently retrieve the String value for the specified key, or return {@code null} if not found. <p>As of 4.2, the default implementation checks {@code containsKey} before it attempts to call {@code getString} (which would require catching {@code MissingResourceException} for key not found). <p>Can be overridden in subclasses.
Create a new StaticApplicationContext.
Create a new StaticApplicationContext with the given parent.
Return the internal StaticMessageSource used by this context. Can be used to register messages on it.
Register a singleton bean with the underlying bean factory. <p>For more advanced needs, register with the underlying BeanFactory directly.
Register a prototype bean with the underlying bean factory. <p>For more advanced needs, register with the underlying BeanFactory directly.
Associate the given message with the given code.
Associate the given message values with the given keys as codes. as keys and message texts as values
This method never fails, allowing to try other possible ways to use an server-agnostic weaver. This non-failure logic is required since determining a load-time weaver based on the ClassLoader name alone may legitimately fail due to other mismatches. Specific case in point: the use of WebLogicLoadTimeWeaver works for WLS 10 but fails due to the lack of a specific method (addInstanceClassPreProcessor) for any earlier versions even though the ClassLoader name is the same.
Create a new {@code LoadTimeWeaverAwareProcessor} for the given {@link LoadTimeWeaver}. <p>If the given {@code loadTimeWeaver} is {@code null}, then a {@code LoadTimeWeaver} will be auto-retrieved from the containing {@link BeanFactory}, expecting a bean named {@link ConfigurableApplicationContext#LOAD_TIME_WEAVER_BEAN_NAME "loadTimeWeaver"}.
Create a new {@code LoadTimeWeaverAwareProcessor}. <p>The {@code LoadTimeWeaver} will be auto-retrieved from the given {@link BeanFactory}, expecting a bean named {@link ConfigurableApplicationContext#LOAD_TIME_WEAVER_BEAN_NAME "loadTimeWeaver"}.
Create a new {@code ApplicationContextException} with the specified detail message and no root cause.
Create a new {@code ApplicationContextException} with the specified detail message and the given root cause.
Create a new ApplicationEvent.
Create a new exception.
Create a new PayloadApplicationEvent.
Return the payload of the event.
Set a home interface that this invoker will narrow to before performing the parameterless SLSB {@code create()} call that returns the actual SLSB proxy. <p>Default is none, which will work on all J2EE servers that are not based on CORBA. A plain {@code javax.ejb.EJBHome} interface is known to be sufficient to make a WebSphere 5.0 Remote SLSB work. On other servers, the specific home interface for the target SLSB might be necessary.
Set whether to refresh the EJB home on connect failure. Default is "false". <p>Can be turned on to allow for hot restart of the EJB server. If a cached EJB home throws an RMI exception that indicates a remote connect failure, a fresh home will be fetched and the invocation will be retried.
Determine whether the given RMI exception indicates a connect failure. <p>The default implementation delegates to RmiClientInterceptorUtils.
Refresh the EJB home object and retry the given invocation. Called by invoke on connect failure.
Perform the given invocation on the current EJB home. Template method to be implemented by subclasses.
Remove the given EJB instance. To be invoked by concrete remote SLSB invoker subclasses.
Set whether to look up the EJB home object on startup. Default is "true". <p>Can be turned off to allow for late start of the EJB server. In this case, the EJB home object will be fetched on first access.
Set whether to cache the EJB home object once it has been located. Default is "true". <p>Can be turned off to allow for hot restart of the EJB server. In this case, the EJB home object will be fetched for each invocation.
Set whether to expose the JNDI environment context for all access to the target EJB, i.e. for all method invocations on the exposed object reference. <p>Default is "false", i.e. to only expose the JNDI context for object lookup. Switch this flag to "true" in order to expose the JNDI environment (including the authorization context) for each EJB invocation, as needed by WebLogic for EJBs with authorization requirements.
Refresh the cached home object, if applicable. Also caches the create method on the home object.
Determine the create method of the given EJB home object.
Return the EJB home object to use. Called for each invocation. <p>Default implementation returns the home created on initialization, if any; else, it invokes lookup to get a new proxy for each invocation. <p>Can be overridden in subclasses, for example to cache a home object for a given amount of time before recreating it, or to test the home object whether it is still alive.
Return whether the cached EJB home object is potentially subject to on-demand refreshing. Default is "false".
Perform the given invocation on the current EJB home, within the thread context being prepared accordingly. Template method to be implemented by subclasses.
Constructor for EjbAccessException.
Return an EJB instance to delegate the call to. Default implementation delegates to newSessionBeanInstance.
Release the given EJB instance. Default implementation delegates to removeSessionBeanInstance.
Return a new instance of the stateless session bean. Can be overridden to change the algorithm.
Remove the given EJB instance.
Set the business interface of the EJB we're proxying. This will normally be a super-interface of the EJB local component interface. Using a business methods interface is a best practice when implementing EJBs.
Return the business interface of the EJB we're proxying.
Set whether to cache the actual session bean object. <p>Off by default for standard EJB compliance. Turn this flag on to optimize session bean access for servers that are known to allow for caching the actual session bean object.
Return an EJB component instance to delegate the call to. <p>The default implementation delegates to {@link #newSessionBeanInstance}.
Release the given EJB instance. <p>The default implementation delegates to {@link #removeSessionBeanInstance}.
Set the business interface of the EJB we're proxying. This will normally be a super-interface of the EJB remote component interface. Using a business methods interface is a best practice when implementing EJBs. <p>You can also specify a matching non-RMI business interface, i.e. an interface that mirrors the EJB business methods but does not declare RemoteExceptions. In this case, RemoteExceptions thrown by the EJB stub will automatically get converted to Spring's generic RemoteAccessException.
Actually autowire the target bean after construction/passivation.
Determine the BeanFactory for autowiring the given target bean.
Determine the BeanFactoryReference for the given target bean. <p>The default implementation delegates to {@link #getBeanFactoryLocator} and {@link #getBeanFactoryLocatorKey}.
Determine the BeanFactoryLocator to obtain the BeanFactoryReference from. <p>The default implementation exposes Spring's default {@link ContextSingletonBeanFactoryLocator}.
Determine the BeanFactoryLocator key to use. This typically indicates the bean name of the ApplicationContext definition in <strong>classpath*:beanRefContext.xml</strong> resource files. <p>The default is {@code null}, indicating the single ApplicationContext defined in the locator. This must be overridden if more than one shared ApplicationContext definition is available. referring to the single ApplicationContext defined in the locator)
Actually release the BeanFactoryReference for the given target bean.
The style pattern to use to format the field. <p>Defaults to 'SS' for short date time. Set this attribute when you wish to format your field in accordance with a common style other than the default style.
The style pattern to use to format the field. <p>Defaults to {@link Style#DEFAULT} for general-purpose number formatting for most annotated types, except for money types which default to currency formatting. Set this attribute when you wish to format your field in accordance with a common style other than the default style.
Create a new {@code DateTimeFormatterFactory} instance.
Set the pattern to use to format date values.
Set the ISO format used to format date values.
Set the two characters to use to format date values, in Joda-Time style. <p>The first character is used for the date style; the second is for the time style. Supported characters are: <ul> <li>'S' = Small</li> <li>'M' = Medium</li> <li>'L' = Long</li> <li>'F' = Full</li> <li>'-' = Omitted</li> </ul>
Set the {@code TimeZone} to normalize the date values into, if any.
Create a new {@code DateTimeFormatter} using this factory. <p>If no specific pattern or style has been defined, {@link DateTimeFormat#mediumDateTime() medium date time format} will be used.
Create a new {@code DateTimeFormatter} using this factory. <p>If no specific pattern or style has been defined, the supplied {@code fallbackFormatter} will be used. factory properties have been set (can be {@code null}).
Create a new DateTimeParser.
Factory method used to create a {@link DateTimeFormatter}.
Set the user's chronology (calendar system).
Return the user's chronology (calendar system), if any.
Set the user's time zone. <p>Alternatively, set a {@link TimeZoneAwareLocaleContext} on {@link LocaleContextHolder}. This context class will fall back to checking the locale context if no setting has been provided here.
Return the user's time zone, if any.
Get the DateTimeFormatter with the this context's settings applied to the base {@code formatter}. formatting rules, generally context-independent
Reset the JodaTimeContext for the current thread.
Associate the given JodaTimeContext with the current thread. or {@code null} to reset the thread-bound context
Return the JodaTimeContext associated with the current thread, if any.
Obtain a DateTimeFormatter with user-specific settings applied to the given base Formatter. (generally user independent)
Set whether standard ISO formatting should be applied to all date/time types. Default is "false" (no). <p>If set to "true", the "dateStyle", "timeStyle" and "dateTimeStyle" properties are effectively ignored.
Set the default format style of Joda {@link LocalDate} objects. Default is {@link DateTimeFormat#shortDate()}.
Set the default format style of Joda {@link LocalTime} objects. Default is {@link DateTimeFormat#shortTime()}.
Set the default format style of Joda {@link LocalDateTime} and {@link DateTime} objects, as well as JDK {@link Date} and {@link Calendar} objects. Default is {@link DateTimeFormat#shortDateTime()}.
Set the formatter that will be used for objects representing date values. <p>This formatter will be used for the {@link LocalDate} type. When specified the {@link #setDateStyle(String) dateStyle} and {@link #setUseIsoFormat(boolean) useIsoFormat} properties will be ignored.
Set the formatter that will be used for objects representing time values. <p>This formatter will be used for the {@link LocalTime} type. When specified the {@link #setTimeStyle(String) timeStyle} and {@link #setUseIsoFormat(boolean) useIsoFormat} properties will be ignored.
Set the formatter that will be used for objects representing date and time values. <p>This formatter will be used for {@link LocalDateTime}, {@link ReadableInstant}, {@link Date} and {@link Calendar} types. When specified the {@link #setDateTimeStyle(String) dateTimeStyle} and {@link #setUseIsoFormat(boolean) useIsoFormat} properties will be ignored.
Create a new DateTimeParser.
Create a new DateTimeParser.
Create a new DateTimeParser.
Create a new ReadableInstantPrinter.
Create a new ReadableInstantPrinter.
Create a new ReadableInstantPrinter.
Reset the DateTimeContext for the current thread.
Associate the given DateTimeContext with the current thread. or {@code null} to reset the thread-bound context
Return the DateTimeContext associated with the current thread, if any.
Install the converters into the converter registry.
Set the style to use for date types.
Set the style to use for time types.
Set the style to use for date and time types.
Set the two characters to use to format date values, in Joda-Time style. <p>The first character is used for the date style; the second is for the time style. Supported characters are: <ul> <li>'S' = Small</li> <li>'M' = Medium</li> <li>'L' = Long</li> <li>'F' = Full</li> <li>'-' = Omitted</li> </ul> <p>This method mimics the styles supported by Joda-Time. Note that JSR-310 natively favors {@link java.time.format.FormatStyle} as used for {@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}.
Create a new {@code DateTimeFormatter} using this factory. <p>If no specific pattern or style has been defined, {@link FormatStyle#MEDIUM medium date time format} will be used.
Set the default format style of {@link java.time.LocalDate} objects. Default is {@link java.time.format.FormatStyle#SHORT}.
Set the default format style of {@link java.time.LocalTime} objects. Default is {@link java.time.format.FormatStyle#SHORT}.
Set the default format style of {@link java.time.LocalDateTime} objects. Default is {@link java.time.format.FormatStyle#SHORT}.
Set the formatter that will be used for objects representing date values. <p>This formatter will be used for the {@link LocalDate} type. When specified, the {@link #setDateStyle dateStyle} and {@link #setUseIsoFormat useIsoFormat} properties will be ignored.
Set the formatter that will be used for objects representing time values. <p>This formatter will be used for the {@link LocalTime} and {@link OffsetTime} types. When specified, the {@link #setTimeStyle timeStyle} and {@link #setUseIsoFormat useIsoFormat} properties will be ignored.
Set the formatter that will be used for objects representing date and time values. <p>This formatter will be used for {@link LocalDateTime}, {@link ZonedDateTime} and {@link OffsetDateTime} types. When specified, the {@link #setDateTimeStyle dateTimeStyle} and {@link #setUseIsoFormat useIsoFormat} properties will be ignored.
Create a new TemporalAccessorParser for the given TemporalAccessor type. (LocalDate, LocalTime, LocalDateTime, ZonedDateTime, OffsetDateTime, OffsetTime)
Create a new TemporalAccessorPrinter.
Create a new DateFormatter for the given date pattern.
Set the pattern to use to format date values. <p>If not specified, DateFormat's default style will be used.
Set the ISO format used for this date.
Set the style to use to format date values. <p>If not specified, DateFormat's default style will be used.
Set the two character to use to format date values. The first character used for the date style, the second is for the time style. Supported characters are <ul> <li>'S' = Small</li> <li>'M' = Medium</li> <li>'L' = Long</li> <li>'F' = Full</li> <li>'-' = Omitted</li> <ul> This method mimics the styles supported by Joda-Time.
Set the TimeZone to normalize the date values into, if any.
Specify whether or not parsing is to be lenient. Default is false. <p>With lenient parsing, the parser may allow inputs that do not precisely match the format. With strict parsing, inputs must match the format exactly.
Set the date formatter to register. If not specified no formatter is registered. This method can be used if global formatter configuration is required.
Add date converters to the specified registry.
Create a new MonetaryAmountFormatter for the given format name. provider at runtime
Specify the format name, to be resolved by the JSR-354 provider at runtime. <p>Default is none, obtaining a {@link MonetaryAmountFormat} based on the current locale.
Obtain a MonetaryAmountFormat for the given locale. <p>The default implementation simply calls {@link javax.money.format.MonetaryFormats#getAmountFormat} with either the configured format name or the given locale.
Specify the desired number of fraction digits. Default is 2.
Specify the rounding mode to use for decimal parsing. Default is {@link java.math.RoundingMode#UNNECESSARY}.
Specify the currency, if known.
Sets the pattern to use to format number values. If not specified, the default DecimalFormat pattern is used.
Create a new NumberFormatter with the specified pattern.
Create a new NumberStyleFormatter with the specified pattern.
Create a new {@code DefaultFormattingConversionService} with the set of {@linkplain DefaultConversionService#addDefaultConverters default converters} and {@linkplain #addDefaultFormatters default formatters}.
Create a new {@code DefaultFormattingConversionService} with the set of {@linkplain DefaultConversionService#addDefaultConverters default converters} and, based on the value of {@code registerDefaultFormatters}, the set of {@linkplain #addDefaultFormatters default formatters}.
Create a new {@code DefaultFormattingConversionService} with the set of {@linkplain DefaultConversionService#addDefaultConverters default converters} and, based on the value of {@code registerDefaultFormatters}, the set of {@linkplain #addDefaultFormatters default formatters} prior to calling {@link #addDefaultFormatters}.
Add formatters appropriate for most environments: including number formatters, JSR-354 Money & Currency formatters, JSR-310 Date-Time and/or Joda-Time formatters, depending on the presence of the corresponding API on the classpath.
Determine the {@link Formatter}-declared field type. (never {@code null}) cannot be inferred
Configure the set of custom converter objects that should be added. {@link org.springframework.core.convert.converter.Converter}, {@link org.springframework.core.convert.converter.ConverterFactory}, {@link org.springframework.core.convert.converter.GenericConverter}
Configure the set of custom formatter objects that should be added.
<p>Configure the set of FormatterRegistrars to invoke to register Converters and Formatters in addition to those added declaratively via {@link #setConverters(Set)} and {@link #setFormatters(Set)}. <p>FormatterRegistrars are useful when registering multiple related converters and formatters for a formatting category, such as Date formatting. All types related needed to support the formatting category can be registered from one place. <p>FormatterRegistrars can also be used to register Formatters indexed under a specific field type different from its own &lt;T&gt;, or when registering a Formatter from a Printer/Parser pair.
Indicate whether default formatters should be registered or not. <p>By default, built-in formatters are registered. This flag can be used to turn that off and rely on explicitly registered formatters only.
Create a new instance of the {@link JBossLoadTimeWeaver} class using the default {@link ClassLoader class loader}.
Create a new instance of the {@link JBossLoadTimeWeaver} class using the supplied {@link ClassLoader}. (must not be {@code null})
Creates a new {@link WebLogicClassPreProcessorAdapter}. (must not be {@code null})
Creates a new instance of the {@link WebLogicLoadTimeWeaver} class using the default {@link ClassLoader class loader}.
Creates a new instance of the {@link WebLogicLoadTimeWeaver} class using the supplied {@link ClassLoader}. weaving (must not be {@code null})
Create a new {@link WebSphereClassPreDefinePlugin}. (must not be {@code null})
Create a new instance of the {@link WebSphereLoadTimeWeaver} class using the default {@link ClassLoader class loader}.
Create a new instance of the {@link WebSphereLoadTimeWeaver} class using the supplied {@link ClassLoader}. (must not be {@code null})
Create a new InstrumentationLoadTimeWeaver for the default ClassLoader.
Create a new InstrumentationLoadTimeWeaver for the given ClassLoader.
Remove all registered transformers, in inverse order of registration.
Check whether an Instrumentation instance is available for the current VM.
Obtain the Instrumentation instance for the current VM, if available.
Create a new ReflectiveLoadTimeWeaver for the current context class loader, <i>which needs to support the required weaving methods</i>.
Create a new SimpleLoadTimeWeaver for the given class loader. weaving (<i>must</i> support the required weaving methods). does not support the required weaving methods
Create a new ResourceOverridingShadowingClassLoader, decorating the given ClassLoader.
Return the resource (if any) at the new path on an attempt to locate a resource at the old path.
Ensure that a resource with the given path is not found. it exists in the parent ClassLoader
Copy all overrides from the given ClassLoader.
Create a new ShadowingClassLoader, decorating the given ClassLoader.
Add the given ClassFileTransformer to the list of transformers that this ClassLoader will apply.
Copy all ClassFileTransformers from the given ClassLoader to the list of transformers that this ClassLoader will apply.
Determine whether the given class should be excluded from shadowing.
Determine whether the specified class is eligible for shadowing by this class loader.
Create a new SimpleInstrumentableClassLoader for the given ClassLoader.
Add a {@link ClassFileTransformer} to be applied by this ClassLoader.
Create a new {@code SimpleLoadTimeWeaver} for the current context {@code ClassLoader}.
Create a new {@code SimpleLoadTimeWeaver} for the given {@code ClassLoader}. instrumentable {@code ClassLoader} on top of
Create a new SimpleThrowawayClassLoader for the given ClassLoader.
Create a new WeavingTransformer for the given class loader.
Add a class file transformer to be applied by this weaver.
Apply transformation on a given class byte definition. The method will always return a non-null byte array (if no transformation has taken place the array content will be identical to the original one).
Connects to the remote {@code MBeanServer} using the configured {@code JMXServiceURL}: to the specified JMX service, or to a local MBeanServer if no service URL specified.
Closes any {@code JMXConnector} that may be managed by this interceptor.
Create a new {@code InvalidInvocationException} with the supplied error message.
Create a new {@code InvocationFailureException} with the supplied error message.
Create a new {@code InvocationFailureException} with the specified error message and root cause.
Set the {@code MBeanServerConnection} used to connect to the MBean which all invocations are routed to.
Set the service URL of the remote {@code MBeanServer}.
Specify the environment for the JMX connector.
Allow Map access to the environment to be set for the connector, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "environment[myKey]". This is particularly useful for adding or overriding entries in child bean definitions.
Set the agent id of the {@code MBeanServer} to locate. <p>Default is none. If specified, this will result in an attempt being made to locate the attendant MBeanServer, unless the {@link #setServiceUrl "serviceUrl"} property has been set. <p>Specifying the empty String indicates the platform MBeanServer.
Set whether or not the proxy should connect to the {@code MBeanServer} at creation time ("true") or the first time it is invoked ("false"). Default is "true".
Set whether to refresh the MBeanServer connection on connect failure. Default is "false". <p>Can be turned on to allow for hot restart of the JMX server, automatically reconnecting and retrying in case of an IOException.
Set the {@code ObjectName} of the MBean which calls are routed to, as {@code ObjectName} instance or as {@code String}.
Set whether to use strict casing for attributes. Enabled by default. <p>When using strict casing, a JavaBean property with a getter such as {@code getFoo()} translates to an attribute called {@code Foo}. With strict casing disabled, {@code getFoo()} would translate to just {@code foo}.
Set the management interface of the target MBean, exposing bean property setters and getters for MBean attributes and conventional Java methods for MBean operations.
Return the management interface of the target MBean, or {@code null} if none specified.
Ensures that an {@code MBeanServerConnection} is configured and attempts to detect a local connection if one is not supplied.
Loads the management interface info for the configured MBean into the caches. This information is used by the proxy when determining whether an invocation matches a valid operation or attribute on the management interface of the managed resource.
Return whether this client interceptor has already been prepared, i.e. has already looked up the server and cached all metadata.
Refresh the connection and retry the MBean invocation if possible. <p>If not configured to refresh on connect failure, this method simply rethrows the original exception. if it failed as well
Route the invocation to the configured managed resource. Correctly routes JavaBean property access to {@code MBeanServerConnection.get/setAttribute} and method invocation to {@code MBeanServerConnection.invoke}.
Routes a method invocation (not a property get/set) to the corresponding operation on the managed resource.
Convert the given result object (from attribute access or operation invocation) to the specified target class for returning from the proxy method. is necessary
Create a new instance of {@code MethodCacheKey} with the supplied method name and parameter list.
Create a new {@code MBeanConnectFailureException} with the specified error message and root cause.
Create a new {@code MBeanInfoRetrievalException} with the specified error message.
Create a new {@code MBeanInfoRetrievalException} with the specified error message and root cause.
Set the interface that the generated proxy will implement. <p>This will usually be a management interface that matches the target MBean, exposing bean property setters and getters for MBean attributes and conventional Java methods for MBean operations.
Registers the specified {@code NotificationListener}. <p>Ensures that an {@code MBeanServerConnection} is configured and attempts to detect a local connection if one is not supplied.
Specify the default domain to be used for generating ObjectNames when no source-level metadata has been specified. <p>The default is to use the domain specified in the bean name (if the bean name follows the JMX ObjectName syntax); else, the package name of the managed bean class.
Return the actual bean class of the given bean instance. This is the class exposed to description-style JMX properties. <p>Default implementation returns the target class for an AOP proxy, and the plain bean class else.
Return the class or interface to expose for the given bean. This is the class that will be searched for attributes and operations (for example, checked for annotations).
Return the class or interface to expose for the given bean class. This is the class that will be searched for attributes and operations
Get the class name of the MBean resource. <p>Default implementation returns a simple description for the MBean based on the class name. of the {@code MBeanExporter}
Get the description of the MBean resource. <p>Default implementation returns a simple description for the MBean based on the class name. of the {@code MBeanExporter}
Called after the {@code ModelMBeanInfo} instance has been constructed but before it is passed to the {@code MBeanExporter}. <p>Subclasses can implement this method to add additional descriptors to the MBean metadata. Default implementation is empty. of the {@code MBeanExporter}
Get the constructor metadata for the MBean resource. Subclasses should implement this method to return the appropriate metadata for all constructors that should be exposed in the management interface for the managed resource. <p>Default implementation returns an empty array of {@code ModelMBeanConstructorInfo}. of the {@code MBeanExporter}
Get the notification metadata for the MBean resource. Subclasses should implement this method to return the appropriate metadata for all notifications that should be exposed in the management interface for the managed resource. <p>Default implementation returns an empty array of {@code ModelMBeanNotificationInfo}. of the {@code MBeanExporter}
Set the default for the JMX field "currencyTimeLimit". The default will usually indicate to never cache attribute values. <p>Default is none, not explicitly setting that field, as recommended by the JMX 1.2 specification. This should result in "never cache" behavior, always reading attribute values freshly (which corresponds to a "currencyTimeLimit" of {@code -1} in JMX 1.2). <p>However, some JMX implementations (that do not follow the JMX 1.2 spec in that respect) might require an explicit value to be set here to get "never cache" behavior: for example, JBoss 3.2.x. <p>Note that the "currencyTimeLimit" value can also be specified on a managed attribute or operation. The default value will apply if not overridden with a "currencyTimeLimit" value {@code >= 0} there: a metadata "currencyTimeLimit" value of {@code -1} indicates to use the default; a value of {@code 0} indicates to "always cache" and will be translated to {@code Integer.MAX_VALUE}; a positive value indicates the number of cache seconds.
Return default value for the JMX field "currencyTimeLimit", if any.
Return whether strict casing for attributes is enabled.
Set whether to expose the JMX descriptor field "class" for managed operations. Default is "false", letting the JMX implementation determine the actual class through reflection. <p>Set this property to {@code true} for JMX implementations that require the "class" field to be specified, for example WebLogic's. In that case, Spring will expose the target class name there, in case of a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic proxy, the <b>first</b> interface implemented by the proxy will be specified. <p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic proxy through JMX, in particular with this property turned to {@code true}: the specified interface list should start with your management interface in this case, with all other interfaces following. In general, consider exposing your target bean directly or a CGLIB proxy for it instead.
Return whether to expose the JMX descriptor field "class" for managed operations.
Set the ParameterNameDiscoverer to use for resolving method parameter names if needed (e.g. for parameter names of MBean operation methods). <p>Default is a {@link DefaultParameterNameDiscoverer}.
Return the ParameterNameDiscoverer to use for resolving method parameter names if needed (may be {@code null} in order to skip parameter detection).
Creates an instance of {@code ModelMBeanOperationInfo} for the given method. Populates the parameter info for the operation. not used by the default implementation but possibly by subclasses of the {@code MBeanExporter}
Return the class to be used for the JMX descriptor field "class". Only applied when the "exposeClassDescriptor" property is "true". <p>The default implementation returns the first implemented interface for a JDK proxy, and the target class else.
Get the description for a particular attribute. <p>The default implementation returns a description for the operation that is the name of corresponding {@code Method}. of the {@code MBeanExporter}
Get the description for a particular operation. <p>The default implementation returns a description for the operation that is the name of corresponding {@code Method}. of the {@code MBeanExporter}
Create parameter info for the given method. <p>The default implementation returns an empty array of {@code MBeanParameterInfo}. of the {@code MBeanExporter}
Allows subclasses to add extra fields to the {@code Descriptor} for a particular attribute. <p>The default implementation sets the {@code currencyTimeLimit} field to the specified "defaultCurrencyTimeLimit", if any (by default none). of the {@code MBeanExporter}
Allows subclasses to add extra fields to the {@code Descriptor} for a particular operation. <p>The default implementation sets the {@code currencyTimeLimit} field to the specified "defaultCurrencyTimeLimit", if any (by default none). of the {@code MBeanExporter}
Set the {@code currencyTimeLimit} field to the specified "defaultCurrencyTimeLimit", if any (by default none).
Apply the given JMX "currencyTimeLimit" value to the given descriptor. <p>The default implementation sets a value {@code >0} as-is (as number of cache seconds), turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache") and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of a value {@code <0}. This follows the recommendation in the JMX 1.2 specification.
Set the array of interfaces to use for creating the management info. These interfaces will be used for a bean if no entry corresponding to that bean is found in the {@code interfaceMappings} property. Each entry <strong>MUST</strong> be an interface.
Set the mappings of bean keys to a comma-separated list of interface names. <p>The property key should match the bean key and the property value should match the list of interface names. When searching for interfaces for a bean, Spring will check these mappings first.
Resolve the given interface mappings, turning class names into Class objects.
Resolve the given class names into Class objects.
Check to see if the {@code Method} is both public and declared in one of the configured interfaces. configured interfaces and is public, otherwise {@code false}.
Checks to see if the given method is declared in a managed interface for the given bean.
Create a new {@code MetadataMBeanInfoAssembler} for the given {@code JmxAttributeSource}.
Set the {@code JmxAttributeSource} implementation to use for reading the metadata from the bean class.
Checks to see if the given Method has the {@code ManagedAttribute} attribute.
Checks to see if the given Method has the {@code ManagedMetric} attribute.
Checks to see if the given Method has the {@code ManagedOperation} attribute.
Determines which of two {@code int} values should be used as the value for an attribute descriptor. In general, only the getter or the setter will be have a non-negative value so we use that value. In the event that both values are non-negative, we use the greater of the two. This method can be used to resolve any {@code int} valued descriptor where there are two possible values.
Locates the value of a descriptor based on values attached to both the getter and setter methods. If both have values supplied then the value attached to the getter is preferred.
Locates the value of a descriptor based on values attached to both the getter and setter methods. If both have values supplied then the value attached to the getter is preferred. The supplied default value is used to check to see if the value associated with the getter has changed from the default.
Set the array of method names to be <b>ignored</b> when creating the management info. <p>These method names will be used for a bean if no entry corresponding to that bean is found in the {@code ignoredMethodsMappings} property.
Set the mappings of bean keys to a comma-separated list of method names. <p>These method names are <b>ignored</b> when creating the management interface. <p>The property key must match the bean key and the property value must match the list of method names. When searching for method names to ignore for a bean, Spring will check these mappings first.
Determine whether the given method is supposed to be included, that is, not configured as to be ignored. of the {@code MBeanExporter}
Set the array of method names to use for creating the management info. These method names will be used for a bean if no entry corresponding to that bean is found in the {@code methodMappings} property.
Set the mappings of bean keys to a comma-separated list of method names. The property key should match the bean key and the property value should match the list of method names. When searching for method names for a bean, Spring will check these mappings first.
Set a description for this attribute.
Return a description for this attribute.
Set a currency time limit for this attribute.
Return a currency time limit for this attribute.
Create a new {@code InvalidMetadataException} with the supplied error message.
Convert the supplied {@link ManagedNotification} into the corresponding {@link javax.management.modelmbean.ModelMBeanNotificationInfo}.
Set the default value of this attribute.
Return the default value of this attribute.
The category of this metric (ex. throughput, performance, utilization).
The category of this metric (ex. throughput, performance, utilization).
A display name for this metric.
A display name for this metric.
A description of how this metric's values change over time.
A description of how this metric's values change over time.
The persist period for this metric.
The persist period for this metric.
The persist policy for this metric.
The persist policy for this metric.
The expected unit of measurement values.
The expected unit of measurement values.
Set a single notification type, or a list of notification types as comma-delimited String.
Set a list of notification types.
Return the list of notification types.
Set the name of this notification.
Return the name of this notification.
Set a description for this notification.
Return a description for this notification.
Set the index of this parameter in the operation signature.
Return the index of this parameter in the operation signature.
Set the name of this parameter in the operation signature.
Return the name of this parameter in the operation signature.
Set a description for this parameter.
Return a description for this parameter.
Set the JMX ObjectName of this managed resource.
Return the JMX ObjectName of this managed resource.
Set local properties, containing object name mappings, e.g. via the "props" tag in XML bean definitions. These can be considered defaults, to be overridden by properties loaded from files.
Set a location of a properties file to be loaded, containing object name mappings.
Set location of properties files to be loaded, containing object name mappings.
Create a new {@code MetadataNamingStrategy} for the given {@code JmxAttributeSource}.
Set the implementation of the {@code JmxAttributeSource} interface to use when reading the source-level metadata.
Create a new instance of the {@link ModelMBeanNotificationPublisher} class that will publish all {@link javax.management.Notification Notifications} to the supplied {@link ModelMBean}.
From the {@link Notification javadoc}: <p><i>"It is strongly recommended that notification senders use the object name rather than a reference to the MBean object as the source."</i> {@link javax.management.Notification#getSource()} might need massaging
Create a new instance of the {@link UnableToSendNotificationException} class with the specified error message.
Create a new instance of the {@link UnableToSendNotificationException} with the specified error message and root cause.
Supply a {@code Map} of beans to be registered with the JMX {@code MBeanServer}. <p>The String keys are the basis for the creation of JMX object names. By default, a JMX {@code ObjectName} will be created straight from the given key. This can be customized through specifying a custom {@code NamingStrategy}. <p>Both bean instances and bean names are allowed as values. Bean instances are typically linked in through bean references. Bean names will be resolved as beans in the current factory, respecting lazy-init markers (that is, not triggering initialization of such beans). as values
Set whether to autodetect MBeans in the bean factory that this exporter runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler} if available. <p>This feature is turned off by default. Explicitly specify {@code true} here to enable autodetection.
Set the autodetection mode to use. one of the {@code AUTODETECT_} constants
Set the autodetection mode to use by name. to one of the {@code AUTODETECT_} constants or is {@code null}
Specify whether to allow eager initialization of candidate beans when autodetecting MBeans in the Spring application context. <p>Default is "false", respecting lazy-init flags on bean definitions. Switch this to "true" in order to search lazy-init beans as well, including FactoryBean-produced objects that haven't been initialized yet.
Set the implementation of the {@code MBeanInfoAssembler} interface to use for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}. <p>The passed-in assembler can optionally implement the {@code AutodetectCapableMBeanInfoAssembler} interface, which enables it to participate in the exporter's MBean autodetection process.
Set the implementation of the {@code ObjectNamingStrategy} interface to use for this exporter. Default is a {@code KeyNamingStrategy}.
Indicates whether Spring should ensure that {@link ObjectName ObjectNames} generated by the configured {@link ObjectNamingStrategy} for runtime-registered MBeans ({@link #registerManagedResource}) should get modified: to ensure uniqueness for every instance of a managed {@code Class}. <p>The default value is {@code true}.
Indicates whether or not the managed resource should be exposed on the {@link Thread#getContextClassLoader() thread context ClassLoader} before allowing any invocations on the MBean to occur. <p>The default value is {@code true}, exposing a {@link SpringModelMBean} which performs thread context ClassLoader management. Switch this flag off to expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.
Set the list of names for beans that should be excluded from autodetection.
Add the name of bean that should be excluded from autodetection.
Set the {@code MBeanExporterListener}s that should be notified of MBean registration and unregistration events.
Set the {@link NotificationListenerBean NotificationListenerBeans} containing the {@link javax.management.NotificationListener NotificationListeners} that will be registered with the {@link MBeanServer}.
Set the {@link NotificationListener NotificationListeners} to register with the {@link javax.management.MBeanServer}. <P>The key of each entry in the {@code Map} is a {@link String} representation of the {@link javax.management.ObjectName} or the bean name of the MBean the listener should be registered for. Specifying an asterisk ({@code *}) for a key will cause the listener to be associated with all MBeans registered by this class at startup time. <p>The value of each entry is the {@link javax.management.NotificationListener} to register. For more advanced options such as registering {@link javax.management.NotificationFilter NotificationFilters} and handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.
Registers the defined beans with the {@link MBeanServer}. <p>Each bean is exposed to the {@code MBeanServer} via a {@code ModelMBean}. The actual implemetation of the {@code ModelMBean} interface used depends on the implementation of the {@code ModelMBeanProvider} interface that is configured. By default the {@code RequiredModelMBean} class that is supplied with all JMX implementations is used. <p>The management interface produced for each bean is dependent on the {@code MBeanInfoAssembler} implementation being used. The {@code ObjectName} given to each bean is dependent on the implementation of the {@code ObjectNamingStrategy} interface being used.
Return whether the specified bean definition should be considered as lazy-init.
Registers an individual bean with the {@link #setServer MBeanServer}. <p>This method is responsible for deciding <strong>how</strong> a bean should be exposed to the {@code MBeanServer}. Specifically, if the supplied {@code mapValue} is the name of a bean that is configured for lazy initialization, then a proxy to the resource is registered with the {@code MBeanServer} so that the the lazy load behavior is honored. If the bean is already an MBean then it will be registered directly with the {@code MBeanServer} without any intervention. For all other beans or bean names, the resource itself is registered with the {@code MBeanServer} directly. may be either the {@code String} name of a bean, or the bean itself
Replaces any bean names used as keys in the {@code NotificationListener} mappings with their corresponding {@code ObjectName} values. with the {@code MBeanServer}
Registers an existing MBean or an MBean adapter for a plain bean with the {@code MBeanServer}. with the {@code MBeanServer}
Registers beans that are configured for lazy initialization with the {@code MBeanServer} indirectly through a proxy. with the {@code MBeanServer}
Retrieve the {@code ObjectName} for a bean. <p>If the bean implements the {@code SelfNaming} interface, then the {@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}. Otherwise, the configured {@code ObjectNamingStrategy} is used. if the retrieved {@code ObjectName} is malformed
Determine whether the given bean class qualifies as an MBean as-is. <p>The default implementation delegates to {@link JmxUtils#isMBean}, which checks for {@link javax.management.DynamicMBean} classes as well as classes with corresponding "*MBean" interface (Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans).
Creates an MBean that is configured with the appropriate management interface for the supplied managed resource.
Create an instance of a class that implements {@code ModelMBean}. <p>This method is called to obtain a {@code ModelMBean} instance to use when registering a bean. This method is called once per bean during the registration phase and must return a new instance of {@code ModelMBean}
Gets the {@code ModelMBeanInfo} for the bean with the supplied key and of the supplied type.
Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}. Gives the assembler the opportunity to add additional beans from the {@code BeanFactory} to the list of beans to be exposed via JMX. <p>This implementation prevents a bean from being added to the list automatically if it has already been added manually, and it prevents certain internal classes from being registered automatically.
Attempts to detect any beans defined in the {@code ApplicationContext} that are valid MBeans and registers them automatically with the {@code MBeanServer}.
Performs the actual autodetection process, delegating to an {@code AutodetectCallback} instance to vote on the inclusion of a given bean. whether to include a bean or not
Indicates whether or not a particular bean name is present in the excluded beans list.
Return whether the specified bean definition should be considered as abstract.
If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of {@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.
Register the configured {@link NotificationListener NotificationListeners} with the {@link MBeanServer}.
Unregister the configured {@link NotificationListener NotificationListeners} from the {@link MBeanServer}.
Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the registration of the MBean identified by the supplied {@link ObjectName}.
Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the unregistration of the MBean identified by the supplied {@link ObjectName}.
Create a new {@code MBeanExportException} with the specified error message.
Create a new {@code MBeanExportException} with the specified error message and root cause.
Create a new instance of the {@link NotificationListenerBean} class.
Construct a new SpringModelMBean instance with an empty {@link ModelMBeanInfo}.
Construct a new SpringModelMBean instance with the given {@link ModelMBeanInfo}.
Create a new {@code UnableToRegisterMBeanException} with the specified error message.
Create a new {@code UnableToRegisterMBeanException} with the specified error message and root cause.
Set the service URL for the {@code JMXConnectorServer}.
Set the environment properties used to construct the {@code JMXConnectorServer} as {@code java.util.Properties} (String key/value pairs).
Set the environment properties used to construct the {@code JMXConnector} as a {@code Map} of String keys and arbitrary Object values.
Set an MBeanServerForwarder to be applied to the {@code JMXConnectorServer}.
Set the {@code ObjectName} used to register the {@code JMXConnectorServer} itself with the {@code MBeanServer}, as {@code ObjectName} instance or as {@code String}.
Set whether the {@code JMXConnectorServer} should be started in a separate thread.
Set whether any threads started for the {@code JMXConnectorServer} should be started as daemon threads.
Attempt to find a locally running {@code MBeanServer}. Fails if no {@code MBeanServer} can be found. Logs a warning if more than one {@code MBeanServer} found, returning the first one from the list. if no {@code MBeanServer} could be found
Attempt to find a locally running {@code MBeanServer}. Fails if no {@code MBeanServer} can be found. Logs a warning if more than one {@code MBeanServer} found, returning the first one from the list. If this parameter is {@code null}, all registered MBeanServers are considered. If the empty String is given, the platform MBeanServer will be returned. if no {@code MBeanServer} could be found
Convert an array of {@code MBeanParameterInfo} into an array of {@code Class} instances corresponding to the parameters.
Create a {@code String[]} representing the argument signature of a method. Each element in the array is the fully qualified class name of the corresponding argument in the methods signature.
Return the JMX attribute name to use for the given JavaBeans property. <p>When using strict casing, a JavaBean property with a getter method such as {@code getFoo()} translates to an attribute called {@code Foo}. With strict casing disabled, {@code getFoo()} would translate to just {@code foo}.
Append an additional key/value pair to an existing {@link ObjectName} with the key being the static value {@code identity} and the value being the identity hash code of the managed resource being exposed on the supplied {@link ObjectName}. This can be used to provide a unique {@link ObjectName} for each distinct instance of a particular bean or class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of managed resources based on the template value supplied by a {@link org.springframework.jmx.export.naming.ObjectNamingStrategy}.
Return the class or interface to expose for the given bean. This is the class that will be searched for attributes and operations (for example, checked for annotations). <p>This implementation returns the superclass for a CGLIB proxy and the class of the given bean else (for a JDK proxy or a plain bean class).
Return the class or interface to expose for the given bean class. This is the class that will be searched for attributes and operations (for example, checked for annotations). <p>This implementation returns the superclass for a CGLIB proxy and the class of the given bean else (for a JDK proxy or a plain bean class).
Determine whether the given bean class qualifies as an MBean as-is. <p>This implementation checks for {@link javax.management.DynamicMBean} classes as well as classes with corresponding "*MBean" interface (Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans).
Return the Standard MBean interface for the given class, if any (that is, an interface whose name matches the class name of the given class but with suffix "MBean").
Return the Java 6 MXBean interface exists for the given class, if any (that is, an interface whose name ends with "MXBean" and/or carries an appropriate MXBean annotation).
Specify the {@code MBeanServer} instance with which all beans should be registered. The {@code MBeanExporter} will attempt to locate an existing {@code MBeanServer} if none is supplied.
Return the {@code MBeanServer} that the beans will be registered with.
The policy to use when attempting to register an MBean under an {@link javax.management.ObjectName} that already exists.
Actually register the MBean with the server. The behavior when encountering an existing MBean can be configured using the {@link #setRegistrationBehavior(int)} and {@link #setRegistrationBehaviorName(String)} methods.
Unregisters all beans that have been registered by an instance of this class.
Actually unregister the specified MBean from the server.
Return the {@link ObjectName ObjectNames} of all registered beans.
Called when an MBean is registered under the given {@link ObjectName}. Allows subclasses to perform additional processing when an MBean is registered. <p>The default implementation delegates to {@link #onRegister(ObjectName)}.
Set the environment properties used to construct the {@code JMXConnector} as {@code java.util.Properties} (String key/value pairs).
Set whether to connect to the server on startup. Default is "true". <p>Can be turned off to allow for late start of the JMX server. In this case, the JMX connector will be fetched on first access.
Connects to the remote {@code MBeanServer} using the configured service URL and environment properties.
Creates lazy proxies for the {@code JMXConnector} and {@code MBeanServerConnection}
Set whether or not the {@code MBeanServerFactoryBean} should attempt to locate a running {@code MBeanServer} before creating one. <p>Default is {@code false}.
Set the agent id of the {@code MBeanServer} to locate. <p>Default is none. If specified, this will result in an automatic attempt being made to locate the attendant MBeanServer, and (importantly) if said MBeanServer cannot be located no attempt will be made to create a new MBeanServer (and an MBeanServerNotFoundException will be thrown at resolution time). <p>Specifying the empty String indicates the platform MBeanServer.
Set the default domain to be used by the {@code MBeanServer}, to be passed to {@code MBeanServerFactory.createMBeanServer()} or {@code MBeanServerFactory.findMBeanServer()}. <p>Default is none.
Set whether to register the {@code MBeanServer} with the {@code MBeanServerFactory}, making it available through {@code MBeanServerFactory.findMBeanServer()}.
Attempt to locate an existing {@code MBeanServer}. Called if {@code locateExistingServerIfPossible} is set to {@code true}. <p>The default implementation attempts to find an {@code MBeanServer} using a standard lookup. Subclasses may override to add additional location logic. If this parameter is {@code null}, all registered MBeanServers are considered. if no {@code MBeanServer} could be found
Create a new {@code MBeanServer} instance and register it with the {@code MBeanServerFactory}, if desired. with the {@code MBeanServerFactory}
Set the {@link javax.management.NotificationListener}.
Get the {@link javax.management.NotificationListener}.
Set the {@link javax.management.NotificationFilter} associated with the encapsulated {@link #getNotificationFilter() NotificationFilter}. <p>May be {@code null}.
Return the {@link javax.management.NotificationFilter} associated with the encapsulated {@link #getNotificationFilter() NotificationFilter}. <p>May be {@code null}.
Set the (arbitrary) object that will be 'handed back' as-is by an {@link javax.management.NotificationBroadcaster} when notifying any {@link javax.management.NotificationListener}.
Return the (arbitrary) object that will be 'handed back' as-is by an {@link javax.management.NotificationBroadcaster} when notifying any {@link javax.management.NotificationListener}.
Set the {@link javax.management.ObjectName}-style name of the single MBean that the encapsulated {@link #getNotificationFilter() NotificationFilter} will be registered with to listen for {@link javax.management.Notification Notifications}. Can be specified as {@code ObjectName} instance or as {@code String}.
Set an array of {@link javax.management.ObjectName}-style names of the MBeans that the encapsulated {@link #getNotificationFilter() NotificationFilter} will be registered with to listen for {@link javax.management.Notification Notifications}. Can be specified as {@code ObjectName} instances or as {@code String}s.
Return the list of {@link javax.management.ObjectName} String representations for which the encapsulated {@link #getNotificationFilter() NotificationFilter} will be registered as a listener for {@link javax.management.Notification Notifications}.
Retrieve the {@code ObjectName} instance corresponding to the supplied name. {@code String} format
Retrieve the {@code ObjectName} instance corresponding to the supplied name.
Retrieve an {@code ObjectName} instance for the specified domain and a single property with the supplied key and value.
Retrieve an {@code ObjectName} instance with the specified domain name and the supplied key/name properties.
Constructor for JmxException.
Create a new {@code MBeanServerNotFoundException} with the supplied error message.
Create a new {@code MBeanServerNotFoundException} with the specified error message and root cause.
Add the name of a shareable JNDI resource, which this factory is allowed to cache once obtained. (typically within the "java:comp/env/" namespace)
Set a list of names of shareable JNDI resources, which this factory is allowed to cache once obtained. (typically within the "java:comp/env/" namespace)
Set the JNDI template to use for JNDI lookups. <p>You can also specify JNDI environment settings via "jndiEnvironment".
Return the JNDI template to use for JNDI lookups.
Set the JNDI environment to use for JNDI lookups. <p>Creates a JndiTemplate with the given environment settings.
Return the JNDI environment to use for JNDI lookups.
Configure a {@code JndiLocatorDelegate} with its "resourceRef" property set to {@code true}, meaning that all names will be prefixed with "java:comp/env/".
Check whether a default JNDI environment, as in a J2EE environment, is available on this JVM. {@code false} if not
Set whether the lookup occurs in a J2EE container, i.e. if the prefix "java:comp/env/" needs to be added if the JNDI name doesn't already contain it. Default is "false". <p>Note: Will only get applied if no other scheme (e.g. "java:") is given.
Return whether the lookup occurs in a J2EE container.
Perform an actual JNDI lookup for the given name via the JndiTemplate. <p>If the name doesn't begin with "java:comp/env/", this prefix is added if "resourceRef" is set to "true".
Convert the given JNDI name into the actual JNDI name to use. <p>The default implementation applies the "java:comp/env/" prefix if "resourceRef" is "true" and no other scheme (e.g. "java:") is given.
Construct a new JndiLookupFailureException, wrapping the given JNDI NamingException.
Specify the proxy interface to use for the JNDI object. <p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false. Needs to be specified because the actual JNDI object type is not known in advance in case of a lazy lookup.
Specify multiple proxy interfaces to use for the JNDI object. <p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false. Note that proxy interfaces will be autodetected from a specified "expectedType", if necessary.
Set whether to look up the JNDI object on startup. Default is "true". <p>Can be turned off to allow for late availability of the JNDI object. In this case, the JNDI object will be fetched on first access. <p>For a lazy lookup, a proxy interface needs to be specified.
Set whether to cache the JNDI object once it has been located. Default is "true". <p>Can be turned off to allow for hot redeployment of JNDI objects. In this case, the JNDI object will be fetched for each invocation. <p>For hot redeployment, a proxy interface needs to be specified.
Set whether to expose the JNDI environment context for all access to the target object, i.e. for all method invocations on the exposed object reference. <p>Default is "false", i.e. to only expose the JNDI context for object lookup. Switch this flag to "true" in order to expose the JNDI environment (including the authorization context) for each method invocation, as needed by WebLogic for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory) with authorization requirements.
Specify a default object to fall back to if the JNDI lookup fails. Default is none. <p>This can be an arbitrary bean reference or literal value. It is typically used for literal values in scenarios where the JNDI environment might define specific config settings but those are not required to be present. <p>Note: This is only supported for lookup on startup. If specified together with {@link #setExpectedType}, the specified value needs to be either of that type or convertible to it.
Lookup variant that that returns the specified "defaultObject" (if any) in case of lookup failure.
Specify the JNDI name to look up. If it doesn't begin with "java:comp/env/" this prefix is added automatically if "resourceRef" is set to "true".
Return the JNDI name to look up.
Specify the type that the located JNDI object is supposed to be assignable to, if any.
Return the type that the located JNDI object is supposed to be assignable to, if any.
Perform the actual JNDI lookup for this locator's target resource. located JNDI object is not assigable to the expected type
Set whether to look up the JNDI object on startup. Default is "true". <p>Can be turned off to allow for late availability of the JNDI object. In this case, the JNDI object will be fetched on first access.
Set whether to cache the JNDI object once it has been located. Default is "true". <p>Can be turned off to allow for hot redeployment of JNDI objects. In this case, the JNDI object will be fetched for each invocation.
Create a new {@code JndiPropertySource} with the given name and a {@link JndiLocatorDelegate} configured to prefix any names with "java:comp/env/".
Create a new {@code JndiPropertySource} with the given name and the given {@code JndiLocatorDelegate}.
Create a new JndiTemplate instance, using the given environment.
Set the environment for the JNDI InitialContext.
Return the environment for the JNDI InitialContext, if any.
Execute the given JNDI context callback implementation.
Obtain a JNDI context corresponding to this template's configuration. Called by {@link #execute}; may also be called directly. <p>The default implementation delegates to {@link #createInitialContext()}.
Release a JNDI context as obtained from {@link #getContext()}.
Create a new JNDI initial context. Invoked by {@link #getContext}. <p>The default implementation use this template's environment settings. Can be subclassed for custom contexts, e.g. for testing.
Look up the object with the given name in the current JNDI context. JNDI implementations returns null, a NamingException gets thrown) name bound to JNDI
Bind the given object to the current JNDI context, using the given name.
Rebind the given object to the current JNDI context, using the given name. Overwrites any existing binding.
Remove the binding for the given name from the current JNDI context.
Construct a new TypeMismatchNamingException, building an explanation text from the given arguments.
Construct a new TypeMismatchNamingException.
Return the required type for the lookup, if available.
Return the actual type that the lookup returned, if available.
Create a new CodebaseAwareObjectInputStream for the given InputStream and codebase. (can consist of multiple URLs, separated by spaces)
Create a new CodebaseAwareObjectInputStream for the given InputStream and codebase. (may be {@code null} to indicate RMI's default ClassLoader) (can consist of multiple URLs, separated by spaces)
Create a new CodebaseAwareObjectInputStream for the given InputStream and codebase. (may be {@code null} to indicate RMI's default ClassLoader) (may be deactivated as a security measure)
Set the interface of the service to access. The interface must be suitable for the particular service and remoting tool. <p>Typically required to be able to create a suitable service proxy, but can also be optional if the lookup returns a typed stub.
Return the interface of the service to access.
Set the RemoteInvocationFactory to use for this accessor. Default is a {@link DefaultRemoteInvocationFactory}. <p>A custom invocation factory can add further context information to the invocation, for example user credentials.
Return the RemoteInvocationFactory used by this accessor.
Set whether to look up the RMI stub on startup. Default is "true". <p>Can be turned off to allow for late start of the RMI server. In this case, the RMI stub will be fetched on first access.
Set whether to cache the RMI stub once it has been located. Default is "true". <p>Can be turned off to allow for hot restart of the RMI server. In this case, the RMI stub will be fetched for each invocation.
Set whether to refresh the RMI stub on connect failure. Default is "false". <p>Can be turned on to allow for hot restart of the RMI server. If a cached RMI stub throws an RMI exception that indicates a remote connect failure, a fresh proxy will be fetched and the invocation will be retried.
Set whether to expose the JNDI environment context for all access to the target RMI stub, i.e. for all method invocations on the exposed object reference. <p>Default is "false", i.e. to only expose the JNDI context for object lookup. Switch this flag to "true" in order to expose the JNDI environment (including the authorization context) for each RMI invocation, as needed by WebLogic for RMI stubs with authorization requirements.
Fetches the RMI stub on startup, if necessary.
Create the RMI stub, typically by looking it up. <p>Called on interceptor initialization if "cacheStub" is "true"; else called for each invocation by {@link #getStub()}. <p>The default implementation retrieves the service from the JNDI environment. This can be overridden in subclasses.
Return the RMI stub to use. Called for each invocation. <p>The default implementation returns the stub created on initialization, if any. Else, it invokes {@link #lookupStub} to get a new stub for each invocation. This can be overridden in subclasses, for example in order to cache a stub for a given amount of time before recreating it, or to test the stub whether it is still alive.
Determine whether the given RMI exception indicates a connect failure. <p>The default implementation delegates to {@link RmiClientInterceptorUtils#isConnectFailure}.
Determine whether the given CORBA exception indicates a connect failure. <p>The default implementation checks for CORBA's {@link org.omg.CORBA.OBJECT_NOT_EXIST} exception.
Refresh the stub and retry the remote invocation if necessary. <p>If not configured to refresh on connect failure, this method simply rethrows the original exception.
Refresh the RMI stub and retry the given invocation. Called by invoke on connect failure.
Perform the given invocation on the given RMI stub.
Apply the given AOP method invocation to the given {@link RmiInvocationHandler}. <p>The default implementation delegates to {@link #createRemoteInvocation}.
Create a new RemoteInvocation object for the given AOP method invocation. <p>The default implementation delegates to the configured {@link #setRemoteInvocationFactory RemoteInvocationFactory}. This can be overridden in subclasses in order to provide custom RemoteInvocation subclasses, containing additional invocation parameters (e.g. user credentials). <p>Note that it is preferable to build a custom RemoteInvocationFactory as a reusable strategy, instead of overriding this method.
Convert the given RMI RemoteException that happened during remote access to Spring's RemoteAccessException if the method signature does not declare RemoteException. Else, return the original RemoteException.
Convert the given CORBA SystemException that happened during remote access to Spring's RemoteAccessException if the method signature does not declare RemoteException. Else, return the SystemException wrapped in a RemoteException.
Set the JNDI template to use for JNDI lookups. You can also specify JNDI environment settings via "jndiEnvironment".
Set the JNDI environment to use for JNDI lookups. Creates a JndiTemplate with the given environment settings.
Set the JNDI name of the exported RMI service.
Initialize this service exporter, binding the specified service to JNDI.
Rebind the specified service to JNDI, for recovering in case of the target registry having been restarted.
Specify the content type to use for sending remote invocation responses. <p>Default is "application/x-java-serialized-object".
Return the content type to use for sending remote invocation responses.
Set whether to accept deserialization of proxy classes. <p>Default is "true". May be deactivated as a security measure.
Return whether to accept deserialization of proxy classes.
Initialize this service exporter.
Create an ObjectInputStream for the given InputStream. <p>The default implementation creates a Spring {@link CodebaseAwareObjectInputStream}.
Perform the actual reading of an invocation result object from the given ObjectInputStream. <p>The default implementation simply calls {@link java.io.ObjectInputStream#readObject()}. Can be overridden for deserialization of a custom wrapper object rather than the plain invocation, for example an encryption-aware holder. being found in the local ClassLoader
Create an ObjectOutputStream for the given OutputStream. <p>The default implementation creates a plain {@link java.io.ObjectOutputStream}.
Perform the actual writing of the given invocation result object to the given ObjectOutputStream. <p>The default implementation simply calls {@link java.io.ObjectOutputStream#writeObject}. Can be overridden for serialization of a custom wrapper object rather than the plain invocation, for example an encryption-aware holder.
Determine the object to export: either the service object itself or a RmiInvocationWrapper in case of a non-RMI service object.
Set a custom RMI client socket factory to use for accessing the RMI registry.
Fetches RMI stub on startup, if necessary.
Create the RMI stub, typically by looking it up. <p>Called on interceptor initialization if "cacheStub" is "true"; else called for each invocation by {@link #getStub()}. <p>The default implementation looks up the service URL via {@code java.rmi.Naming}. This can be overridden in subclasses.
Refresh the stub and retry the remote invocation if necessary. <p>If not configured to refresh on connect failure, this method simply rethrows the original exception. if it failed as well
Perform a raw method invocation on the given RMI stub, letting reflection exceptions through as-is.
Wrap the given arbitrary exception that happened during remote access in either a RemoteException or a Spring RemoteAccessException (if the method signature does not support RemoteException). <p>Only call this for remote access exceptions, not for exceptions thrown by the target service itself! RemoteAccessException or RemoteException RemoteException
Convert the given RemoteException that happened during remote access to Spring's RemoteAccessException if the method signature does not support RemoteException. Else, return the original RemoteException.
Convert the given RemoteException that happened during remote access to Spring's RemoteAccessException if the method signature does not support RemoteException. Else, return the original RemoteException. a connect failure
Determine whether the given RMI exception indicates a connect failure. <p>Treats RMI's ConnectException, ConnectIOException, UnknownHostException, NoSuchObjectException and StubNotFoundException as connect failure.
Check whether the given RMI exception root cause indicates a CORBA connection failure. <p>This is relevant on the IBM JVM, in particular for WebSphere EJB clients. <p>See the for details.
Create a new RmiInvocationWrapper for the given object
Set the host of the registry for the exported RMI service, <p>Default is localhost.
Return the host of the registry for the exported RMI service.
Set the port of the registry for the exported RMI service, <p>Default is {@code Registry.REGISTRY_PORT} (1099).
Return the port of the registry for the exported RMI service.
Set a custom RMI client socket factory to use for the RMI registry. <p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory}, it will automatically be registered as server socket factory too.
Set a custom RMI server socket factory to use for the RMI registry. <p>Only needs to be specified when the client socket factory does not implement {@code java.rmi.server.RMIServerSocketFactory} already.
Set whether to always create the registry in-process, not attempting to locate an existing registry at the specified port. <p>Default is "false". Switch this flag to "true" in order to avoid the overhead of locating an existing registry when you always intend to create a new registry in any case.
Locate or create the RMI registry. no implicit creation of a RMI registry will happen)
Locate or create the RMI registry.
Test the given RMI registry, calling some operation on it to check whether it is still active. <p>Default implementation calls {@code Registry.list()}.
Set the name of the exported RMI service,
Set the port that the exported RMI service will use. <p>Default is 0 (anonymous port).
Set a custom RMI client socket factory to use for exporting the service. <p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory}, it will automatically be registered as server socket factory too.
Set a custom RMI server socket factory to use for exporting the service. <p>Only needs to be specified when the client socket factory does not implement {@code java.rmi.server.RMIServerSocketFactory} already.
Specify the RMI registry to register the exported service with. Typically used in combination with RmiRegistryFactoryBean. <p>Alternatively, you can specify all registry properties locally. This exporter will then try to locate the specified registry, automatically creating a new local one if appropriate. <p>Default is a local registry at the default port (1099), created on the fly if necessary.
Set the host of the registry for the exported RMI service, <p>Default is localhost.
Set the port of the registry for the exported RMI service, <p>Default is {@code Registry.REGISTRY_PORT} (1099).
Set a custom RMI client socket factory to use for the RMI registry. <p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory}, it will automatically be registered as server socket factory too.
Set a custom RMI server socket factory to use for the RMI registry. <p>Only needs to be specified when the client socket factory does not implement {@code java.rmi.server.RMIServerSocketFactory} already.
Set whether to always create the registry in-process, not attempting to locate an existing registry at the specified port. <p>Default is "false". Switch this flag to "true" in order to avoid the overhead of locating an existing registry when you always intend to create a new registry in any case.
Set whether to replace an existing binding in the RMI registry, that is, whether to simply override an existing binding with the specified service in case of a naming conflict in the registry. <p>Default is "true", assuming that an existing binding for this exporter's service name is an accidental leftover from a previous execution. Switch this to "false" to make the exporter fail in such a scenario, indicating that there was already an RMI object bound.
Initialize this service exporter, registering the service as RMI object. <p>Creates an RMI registry on the specified port if none exists.
Locate or create the RMI registry for this exporter. no implicit creation of a RMI registry will happen)
Locate or create the RMI registry for this exporter.
Unexport the registered RMI object, logging any exception that arises.
Constructor for SoapFaultException.
Set the interface of the service to access. The interface must be suitable for the particular service and remoting strategy. <p>Typically required to be able to create a suitable service proxy, but can also be optional if the lookup returns a typed proxy.
Set the service to export. Typically populated via a bean reference.
Return the service to export.
Set the interface of the service to export. The interface must be suitable for the particular service and remoting strategy.
Return the interface of the service to export.
Set whether to register a RemoteInvocationTraceInterceptor for exported services. Only applied when a subclass uses {@code getProxyForService} for creating the proxy to expose. <p>Default is "true". RemoteInvocationTraceInterceptor's most important value is that it logs exception stacktraces on the server, before propagating an exception to the client. Note that RemoteInvocationTraceInterceptor will <i>not</i> be registered by default if the "interceptors" property has been specified.
Set additional interceptors (or advisors) to be applied before the remote endpoint, e.g. a PerformanceMonitorInterceptor. <p>You may specify any AOP Alliance MethodInterceptors or other Spring AOP Advices, as well as Spring AOP Advisors.
Check whether the service reference has been set.
Check whether a service reference has been set, and whether it matches the specified service.
Get a proxy for the given service object, implementing the specified service interface. <p>Used to export a proxy that does not expose any internals but just a specific interface intended for remote access. Furthermore, a {@link RemoteInvocationTraceInterceptor} will be registered (by default).
Return a short name for this exporter. Used for tracing of remote invocations. <p>Default is the unqualified class name (without package). Can be overridden in subclasses.
Create a new RemoteInvocation for the given AOP method invocation.
Create a new RemoteInvocation for the given parameters.
Set the name of the target method. <p>This setter is intended for JavaBean-style deserialization.
Return the name of the target method.
Set the parameter types of the target method. <p>This setter is intended for JavaBean-style deserialization.
Return the parameter types of the target method.
Set the arguments for the target method call. <p>This setter is intended for JavaBean-style deserialization.
Return the arguments for the target method call.
Add an additional invocation attribute. Useful to add additional invocation context without having to subclass RemoteInvocation. <p>Attribute keys have to be unique, and no overriding of existing attributes is allowed. <p>The implementation avoids to unnecessarily create the attributes Map, to minimize serialization size.
Retrieve the attribute for the given key, if any. <p>The implementation avoids to unnecessarily create the attributes Map, to minimize serialization size.
Set the attributes Map. Only here for special purposes: Preferably, use {@link #addAttribute} and {@link #getAttribute}.
Return the attributes Map. Mainly here for debugging purposes: Preferably, use {@link #addAttribute} and {@link #getAttribute}.
Perform this invocation on the given target object. Typically called when a RemoteInvocation is received on the server.
Recreate the invocation result contained in the given RemoteInvocationResult object. <p>The default implementation calls the default {@code recreate()} method. This can be overridden in subclass to provide custom recreation, potentially processing the returned result object.
Set the RemoteInvocationExecutor to use for this exporter. Default is a DefaultRemoteInvocationExecutor. <p>A custom invocation executor can extract further context information from the invocation, for example user credentials.
Return the RemoteInvocationExecutor used by this exporter.
Apply the given remote invocation to the given target object. The default implementation delegates to the RemoteInvocationExecutor. <p>Can be overridden in subclasses for custom invocation behavior, possibly for applying additional invocation parameters from a custom RemoteInvocation subclass. Note that it is preferable to use a custom RemoteInvocationExecutor which is a reusable strategy.
Apply the given remote invocation to the given target object, wrapping the invocation result in a serializable RemoteInvocationResult object. The default implementation creates a plain RemoteInvocationResult. <p>Can be overridden in subclasses for custom invocation behavior, for example to return additional context information. Note that this is not covered by the RemoteInvocationExecutor strategy!
Create a new RemoteInvocationResult for the given result value. of the target method
Create a new RemoteInvocationResult for the given exception. of the target method
Set the result value returned by a successful invocation of the target method, if any. <p>This setter is intended for JavaBean-style deserialization. Use {@link #RemoteInvocationResult(Object)} otherwise.
Return the result value returned by a successful invocation of the target method, if any.
Set the exception thrown by an unsuccessful invocation of the target method, if any. <p>This setter is intended for JavaBean-style deserialization. Use {@link #RemoteInvocationResult(Throwable)} otherwise.
Return the exception thrown by an unsuccessful invocation of the target method, if any.
Return whether this invocation result holds an exception. If this returns {@code false}, the result value applies (even if it is {@code null}).
Return whether this invocation result holds an InvocationTargetException, thrown by an invocation of the target method itself.
Recreate the invocation result, either returning the result value in case of a successful invocation of the target method, or rethrowing the exception thrown by the target method.
Create a new RemoteInvocationTraceInterceptor.
Create a new RemoteInvocationTraceInterceptor. (to be used as context information in log messages)
Fill the current client-side stack trace into the given exception. <p>The given exception is typically thrown on the server and serialized as-is, with the client wanting it to contain the client-side portion of the stack trace as well. What we can do here is to update the {@code StackTraceElement} array with the current client-side stack trace, provided that we run on JDK 1.4+.
Return the ClassLoader that this accessor operates in, to be used for deserializing and for generating proxies.
Reset the original thread context ClassLoader if necessary. or {@code null} if not overridden (and hence nothing to reset)
Specify the HTTP server's port. Default is 8080.
Specify the HTTP server's hostname to bind to. Default is localhost; can be overridden with a specific network address to bind to.
Specify the HTTP server's TCP backlog. Default is -1, indicating the system's default value.
Specify the number of seconds to wait until HTTP exchanges have completed when shutting down the HTTP server. Default is 0.
Set the JDK concurrent executor to use for dispatching incoming requests.
Register {@link com.sun.net.httpserver.HttpHandler HttpHandlers} for specific context paths. objects as values
Register common {@link com.sun.net.httpserver.Filter Filters} to be applied to all locally registered {@link #setContexts contexts}.
Register a common {@link com.sun.net.httpserver.Authenticator} to be applied to all locally registered {@link #setContexts contexts}.
Set the URL of this remote accessor's target service. The URL must be compatible with the rules of the particular remoting provider.
Return the URL of this remote accessor's target service.
Constructor for RemoteAccessException.
Constructor for RemoteAccessException. remoting API such as RMI)
Constructor for RemoteConnectFailureException.
Constructor for RemoteInvocationFailureException.
Constructor for RemoteLookupFailureException.
Constructor for RemoteProxyFailureException.
Constructor for RemoteTimeoutException.
Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor and a simple {@link AsyncUncaughtExceptionHandler}. executor has been qualified at the method level using {@link Async#value()}; as of 4.2.6, a local executor for this interceptor will be built otherwise
Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor. executor has been qualified at the method level using {@link Async#value()}; as of 4.2.6, a local executor for this interceptor will be built otherwise handle exceptions thrown by asynchronous method executions with {@code void} return type
Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.
Specify the default task executor to use for asynchronous methods.
Set the 'async' annotation type. <p>The default async annotation type is the {@link Async} annotation, as well as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present). <p>This setter property exists so that developers can provide their own (non-Spring-specific) annotation type to indicate that a method is to be executed asynchronously.
Calculate a pointcut for the given async annotation types, if any.
Set the 'async' annotation type to be detected at either class or method level. By default, both the {@link Async} annotation and the EJB 3.1 {@code javax.ejb.Asynchronous} annotation will be detected. <p>This setter property exists so that developers can provide their own (non-Spring-specific) annotation type to indicate that a method (or all methods of a given class) should be invoked asynchronously.
Set the {@link Executor} to use when invoking methods asynchronously. <p>If not specified, default executor resolution will apply: searching for a unique {@link TaskExecutor} bean in the context, or for an {@link Executor} bean named "taskExecutor" otherwise. If neither of the two is resolvable, a local default executor will be created within the interceptor.
Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught exceptions thrown by asynchronous method executions.
Create a new AsyncResult holder.
Create a new async result which exposes the given value from {@link Future#get()}.
Create a new async result which exposes the given exception as an {@link ExecutionException} from {@link Future#get()}. or a cause to be wrapped in an {@link ExecutionException})
Set the {@link org.springframework.scheduling.TaskScheduler} that will invoke the scheduled methods, or a {@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a TaskScheduler. <p>If not specified, default scheduler resolution will apply: searching for a unique {@link TaskScheduler} bean in the context, or for a {@link TaskScheduler} bean named "taskScheduler" otherwise; the same lookup will also be performed for a {@link ScheduledExecutorService} bean. If neither of the two is resolvable, a local single-threaded default scheduler will be created within the registrar.
Create a new ConcurrentTaskExecutor, using a single thread executor as default.
Create a new ConcurrentTaskExecutor, using the given {@link java.util.concurrent.Executor}. <p>Autodetects a JSR-236 {@link javax.enterprise.concurrent.ManagedExecutorService} in order to expose {@link javax.enterprise.concurrent.ManagedTask} adapters for it.
Specify the {@link java.util.concurrent.Executor} to delegate to. <p>Autodetects a JSR-236 {@link javax.enterprise.concurrent.ManagedExecutorService} in order to expose {@link javax.enterprise.concurrent.ManagedTask} adapters for it.
Return the {@link java.util.concurrent.Executor} that this adapter delegates to.
Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable} about to be executed. <p>Note that such a decorator is not necessarily being applied to the user-supplied {@code Runnable}/{@code Callable} but rather to the actual execution callback (which may be a wrapper around the user-supplied task). <p>The primary use case is to set some execution context around the task's invocation, or to provide some monitoring/statistics for task execution.
Create a new ConcurrentTaskScheduler, using a single thread executor as default.
Create a new ConcurrentTaskScheduler, using the given {@link java.util.concurrent.ScheduledExecutorService} as shared delegate. <p>Autodetects a JSR-236 {@link javax.enterprise.concurrent.ManagedScheduledExecutorService} in order to use it for trigger-based scheduling if possible, instead of Spring's local trigger management. to delegate to for {@link org.springframework.scheduling.SchedulingTaskExecutor} as well as {@link TaskScheduler} invocations
Create a new ConcurrentTaskScheduler, using the given {@link java.util.concurrent.Executor} and {@link java.util.concurrent.ScheduledExecutorService} as delegates. <p>Autodetects a JSR-236 {@link javax.enterprise.concurrent.ManagedScheduledExecutorService} in order to use it for trigger-based scheduling if possible, instead of Spring's local trigger management. for {@link org.springframework.scheduling.SchedulingTaskExecutor} invocations to delegate to for {@link TaskScheduler} invocations
Specify the {@link java.util.concurrent.ScheduledExecutorService} to delegate to. <p>Autodetects a JSR-236 {@link javax.enterprise.concurrent.ManagedScheduledExecutorService} in order to use it for trigger-based scheduling if possible, instead of Spring's local trigger management. <p>Note: This will only apply to {@link TaskScheduler} invocations. If you want the given executor to apply to {@link org.springframework.scheduling.SchedulingTaskExecutor} invocations as well, pass the same executor reference to {@link #setConcurrentExecutor}.
Provide an {@link ErrorHandler} strategy.
Create a new CustomizableThreadFactory with default thread name prefix.
Create a new CustomizableThreadFactory with the given thread name prefix.
Set the JNDI template to use for JNDI lookups.
Set the JNDI environment to use for JNDI lookups.
Set whether the lookup occurs in a J2EE container, i.e. if the prefix "java:comp/env/" needs to be added if the JNDI name doesn't already contain it. PersistenceAnnotationBeanPostProcessor's default is "true".
Specify a JNDI name of the {@link java.util.concurrent.ThreadFactory} to delegate to, replacing the default JNDI name "java:comp/DefaultManagedThreadFactory". <p>This can either be a fully qualified JNDI name, or the JNDI name relative to the current environment naming context if "resourceRef" is set to "true".
Specify a JNDI name of the {@link java.util.concurrent.Executor} to delegate to, replacing the default JNDI name "java:comp/DefaultManagedExecutorService". <p>This can either be a fully qualified JNDI name, or the JNDI name relative to the current environment naming context if "resourceRef" is set to "true".
Specify a JNDI name of the {@link java.util.concurrent.Executor} to delegate to, replacing the default JNDI name "java:comp/DefaultManagedScheduledExecutorService". <p>This can either be a fully qualified JNDI name, or the JNDI name relative to the current environment naming context if "resourceRef" is set to "true".
Set the ThreadFactory to use for the ExecutorService's thread pool. Default is the underlying ExecutorService's default thread factory. <p>In a Java EE 7 or other managed environment with JSR-236 support, consider specifying a JNDI-located ManagedThreadFactory: by default, to be found at "java:comp/DefaultManagedThreadFactory". Use the "jee:jndi-lookup" namespace element in XML or the programmatic {@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup. Alternatively, consider using Spring's {@link DefaultManagedAwareThreadFactory} with its fallback to local threads in case of no managed thread factory found.
Set the RejectedExecutionHandler to use for the ExecutorService. Default is the ExecutorService's default abort policy.
Set whether to wait for scheduled tasks to complete on shutdown, not interrupting running tasks and executing all tasks in the queue. <p>Default is "false", shutting down immediately through interrupting ongoing tasks and clearing the queue. Switch this flag to "true" if you prefer fully completed tasks at the expense of a longer shutdown phase. <p>Note that Spring's container shutdown continues while ongoing tasks are being completed. If you want this executor to block and wait for the termination of tasks before the rest of the container continues to shut down - e.g. in order to keep up other resources that your tasks may need -, set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property instead of or in addition to this property.
Set the maximum number of seconds that this executor is supposed to block on shutdown in order to wait for remaining tasks to complete their execution before the rest of the container continues to shut down. This is particularly useful if your remaining tasks are likely to need access to other resources that are also managed by the container. <p>By default, this executor won't wait for the termination of tasks at all. It will either shut down immediately, interrupting ongoing tasks and clearing the remaining task queue - or, if the {@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"} flag has been set to {@code true}, it will continue to fully execute all ongoing tasks as well as all remaining tasks in the queue, in parallel to the rest of the container shutting down. <p>In either case, if you specify an await-termination period using this property, this executor will wait for the given time (max) for the termination of tasks. As a rule of thumb, specify a significantly higher timeout here if you set "waitForTasksToCompleteOnShutdown" to {@code true} at the same time, since all remaining tasks in the queue will still get executed - in contrast to the default shutdown behavior where it's just about waiting for currently executing tasks that aren't reacting to thread interruption.
Set up the ExecutorService.
Perform a shutdown on the underlying ExecutorService.
Wait for the executor to terminate, according to the value of the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.
Set whether to expose JDK 8's 'common' {@link ForkJoinPool}. <p>Default is "false", creating a local {@link ForkJoinPool} instance based on the {@link #setParallelism "parallelism"}, {@link #setThreadFactory "threadFactory"}, {@link #setUncaughtExceptionHandler "uncaughtExceptionHandler"} and {@link #setAsyncMode "asyncMode"} properties on this FactoryBean. <p><b>NOTE:</b> Setting this flag to "true" effectively ignores all other properties on this FactoryBean, reusing the shared common JDK {@link ForkJoinPool} instead. This is a fine choice on JDK 8 but does remove the application's ability to customize ForkJoinPool behavior, in particular the use of custom threads.
Specify the parallelism level. Default is {@link Runtime#availableProcessors()}.
Set the factory for creating new ForkJoinWorkerThreads. Default is {@link ForkJoinPool#defaultForkJoinWorkerThreadFactory}.
Set the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks. Default is none.
Specify whether to establish a local first-in-first-out scheduling mode for forked tasks that are never joined. This mode (asyncMode = {@code true}) may be more appropriate than the default locally stack-based mode in applications in which worker threads only process event-style asynchronous tasks. Default is {@code false}.
Set the maximum number of seconds that this ForkJoinPool is supposed to block on shutdown in order to wait for remaining tasks to complete their execution before the rest of the container continues to shut down. This is particularly useful if your remaining tasks are likely to need access to other resources that are also managed by the container. <p>By default, this ForkJoinPool won't wait for the termination of tasks at all. It will continue to fully execute all ongoing tasks as well as all remaining tasks in the queue, in parallel to the rest of the container shutting down. In contrast, if you specify an await-termination period using this property, this executor will wait for the given time (max) for the termination of tasks. <p>Note that this feature works for the {@link #setCommonPool "commonPool"} mode as well. The underlying ForkJoinPool won't actually terminate in that case but will wait for all tasks to terminate.
Set the ScheduledExecutorService's pool size. Default is 1.
Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings, it will be registered via one of ScheduledExecutorService's schedule methods.
Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+). <p>Default is {@code false}. If set to {@code true}, the target executor will be switched into remove-on-cancel mode (if possible, with a soft fallback otherwise).
Specify whether to continue the execution of a scheduled task after it threw an exception. <p>Default is "false", matching the native behavior of a {@link java.util.concurrent.ScheduledExecutorService}. Switch this flag to "true" for exception-proof execution of each task, continuing scheduled execution as in the case of successful execution.
Specify whether this FactoryBean should expose an unconfigurable decorator for the created executor. <p>Default is "false", exposing the raw executor as bean reference. Switch this flag to "true" to strictly prevent clients from modifying the executor's configuration.
Create a new {@link ScheduledExecutorService} instance. <p>The default implementation creates a {@link ScheduledThreadPoolExecutor}. Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances.
Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks} on the given {@link ScheduledExecutorService}.
Determine the actual Runnable to schedule for the given task. <p>Wraps the task's Runnable in a {@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable} that will catch and log the Exception. If necessary, it will suppress the Exception according to the {@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"} flag.
Create a new ScheduledExecutorTask, with default one-time execution without delay.
Create a new ScheduledExecutorTask, with default one-time execution with the given delay.
Create a new ScheduledExecutorTask.
Set the Runnable to schedule as executor task.
Return the Runnable to schedule as executor task.
Set the delay before starting the task for the first time, in milliseconds. Default is 0, immediately starting the task after successful scheduling.
Return the delay before starting the job for the first time.
Set the period between repeated task executions, in milliseconds. <p>Default is -1, leading to one-time execution. In case of a positive value, the task will be executed repeatedly, with the given interval inbetween executions. <p>Note that the semantics of the period value vary between fixed-rate and fixed-delay execution. <p><b>Note:</b> A period of 0 (for example as fixed delay) is <i>not</i> supported, simply because {@code java.util.concurrent.ScheduledExecutorService} itself does not support it. Hence a value of 0 will be treated as one-time execution; however, that value should never be specified explicitly in the first place!
Return the period between repeated task executions.
Is this task only ever going to execute once?
Specify the time unit for the delay and period values. Default is milliseconds ({@code TimeUnit.MILLISECONDS}).
Return the time unit for the delay and period values.
Set whether to schedule as fixed-rate execution, rather than fixed-delay execution. Default is "false", that is, fixed delay. <p>See ScheduledExecutorService javadoc for details on those execution modes.
Return whether to schedule as fixed-rate execution.
Set the ThreadPoolExecutor's core pool size. Default is 1.
Set the ThreadPoolExecutor's maximum pool size. Default is {@code Integer.MAX_VALUE}.
Set the ThreadPoolExecutor's keep-alive seconds. Default is 60.
Specify whether to allow core threads to time out. This enables dynamic growing and shrinking even in combination with a non-zero queue (since the max pool size will only grow once the queue is full). <p>Default is "false".
Set the capacity for the ThreadPoolExecutor's BlockingQueue. Default is {@code Integer.MAX_VALUE}. <p>Any positive value will lead to a LinkedBlockingQueue instance; any other value will lead to a SynchronousQueue instance.
Create a new instance of {@link ThreadPoolExecutor} or a subclass thereof. <p>The default implementation creates a standard {@link ThreadPoolExecutor}. Can be overridden to provide custom {@link ThreadPoolExecutor} subclasses.
Create the BlockingQueue to use for the ThreadPoolExecutor. <p>A LinkedBlockingQueue instance will be created for a positive capacity value; a SynchronousQueue else.
Set the ThreadPoolExecutor's core pool size. Default is 1. <p><b>This setting can be modified at runtime, for example through JMX.</b>
Return the ThreadPoolExecutor's core pool size.
Set the ThreadPoolExecutor's maximum pool size. Default is {@code Integer.MAX_VALUE}. <p><b>This setting can be modified at runtime, for example through JMX.</b>
Return the ThreadPoolExecutor's maximum pool size.
Set the ThreadPoolExecutor's keep-alive seconds. Default is 60. <p><b>This setting can be modified at runtime, for example through JMX.</b>
Return the ThreadPoolExecutor's keep-alive seconds.
Return the underlying ThreadPoolExecutor for native access.
Return the current pool size.
Return the number of currently active threads.
Set the ScheduledExecutorService's pool size. Default is 1. <p><b>This setting can be modified at runtime, for example through JMX.</b>
Set a custom {@link ErrorHandler} strategy.
Return the underlying ScheduledExecutorService for native access.
Return the underlying ScheduledThreadPoolExecutor, if available. or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor
Return the current pool size. <p>Requires an underlying {@link ScheduledThreadPoolExecutor}.
Return the number of currently active threads. <p>Requires an underlying {@link ScheduledThreadPoolExecutor}.
Create a new {@code CronTask}.
Create a new {@code IntervalTask}.
Create a new {@code IntervalTask} with no initial delay.
Set the {@link TaskScheduler} to register scheduled tasks with.
Set the {@link TaskScheduler} to register scheduled tasks with, or a {@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a {@code TaskScheduler}.
Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).
Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects (typically custom implementations of the {@link Trigger} interface).
Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used by {@code <task:*>} namespace parsing.
Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects.
Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions.
Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by {@code <task:*>} namespace parsing.
Get the cron tasks as an unmodifiable list of {@link CronTask} objects.
Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values.
Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used by {@code <task:*>} namespace parsing.
Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects.
Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values.
Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used by {@code <task:*>} namespace parsing.
Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects.
Add a Runnable task to be triggered per the given {@link Trigger}.
Add a {@code TriggerTask}.
Add a Runnable task to be triggered per the given cron expression
Add a {@link CronTask}.
Add a {@code Runnable} task to be triggered at the given fixed-rate interval.
Add a fixed-rate {@link IntervalTask}.
Add a Runnable task to be triggered with the given fixed delay.
Add a fixed-delay {@link IntervalTask}.
Return whether this {@code ScheduledTaskRegistrar} has any tasks registered.
Schedule all registered tasks against the underlying {@linkplain #setTaskScheduler(TaskScheduler) task scheduler}.
Create a new {@code Task}.
Create a new {@link TriggerTask}.
Build a {@link CronTrigger} from the pattern provided in the default time zone. expression conventions
Build a {@link CronTrigger} from the pattern provided in the given time zone. expression conventions
Return the cron pattern that this trigger has been built with.
Create a new DelegatingErrorHandlingRunnable.
Build a message for an invocation failure exception.
Create a trigger with the given period in milliseconds.
Create a trigger with the given period and time unit. The time unit will apply not only to the period but also to any 'initialDelay' value, if configured on this Trigger later via {@link #setInitialDelay(long)}.
Specify the delay for the initial execution. It will be evaluated in terms of this trigger's {@link TimeUnit}. If no time unit was explicitly provided upon instantiation, the default is milliseconds.
Specify whether the periodic interval should be measured between the scheduled start times rather than between actual completion times. The latter, "fixed delay" behavior, is the default.
Create a SimpleTriggerContext with the given time values.
Update this holder's state with the latest time values.
Decorate the task for error handling. If the provided {@link ErrorHandler} is not {@code null}, it will be used. Otherwise, repeating tasks will have errors suppressed by default whereas one-shot tasks will have errors propagated by default since those errors may be expected through the returned {@link Future}. In both cases, the errors will be logged.
Return the default {@link ErrorHandler} implementation based on the boolean value indicating whether the task will be repeating or not. For repeating tasks it will suppress errors, but for one-time tasks it will propagate. In both cases, the error will be logged.
Constructor for SchedulingException.
Constructor for SchedulingException. scheduling API such as Quartz)
Construct a new BshScriptEvaluator.
Create a new BshScriptFactory for the given script source. <p>With this {@code BshScriptFactory} variant, the script needs to declare a full class or return an actual instance of the scripted object. Interpreted by the post-processor that actually creates the script.
Create a new BshScriptFactory for the given script source. <p>The script may either be a simple script that needs a corresponding proxy generated (implementing the specified interfaces), or declare a full class or return an actual instance of the scripted object (in which case the specified interfaces, if any, need to be implemented by that class/instance). Interpreted by the post-processor that actually creates the script. is supposed to implement (may be {@code null})
Create a new BeanShell-scripted object from the given script source. <p>With this {@code createBshObject} variant, the script needs to declare a full class or return an actual instance of the scripted object.
Create a new BeanShell-scripted object from the given script source, using the default ClassLoader. <p>The script may either be a simple script that needs a corresponding proxy generated (implementing the specified interfaces), or declare a full class or return an actual instance of the scripted object (in which case the specified interfaces, if any, need to be implemented by that class/instance). supposed to implement (may be {@code null} or empty if the script itself declares a full class or returns an actual instance of the scripted object)
Create a new BeanShell-scripted object from the given script source. <p>The script may either be a simple script that needs a corresponding proxy generated (implementing the specified interfaces), or declare a full class or return an actual instance of the scripted object (in which case the specified interfaces, if any, need to be implemented by that class/instance). supposed to implement (may be {@code null} or empty if the script itself declares a full class or returns an actual instance of the scripted object)
Evaluate the specified BeanShell script based on the given script source, returning the Class defined by the script. <p>The script may either declare a full class or return an actual instance of the scripted object (in which case the Class of the object will be returned). In any other case, the returned Class will be {@code null}.
Evaluate the specified BeanShell script based on the given script source, keeping a returned script Class or script Object as-is. <p>The script may either be a simple script that needs a corresponding proxy generated (implementing the specified interfaces), or declare a full class or return an actual instance of the scripted object (in which case the specified interfaces, if any, need to be implemented by that class/instance). supposed to implement (may be {@code null} or empty if the script itself declares a full class or returns an actual instance of the scripted object)
Register a {@link ScriptFactoryPostProcessor} bean definition in the supplied {@link BeanDefinitionRegistry} if the {@link ScriptFactoryPostProcessor} hasn't already been registered.
Create a new instance of this parser, creating bean definitions for the supplied {@link org.springframework.scripting.ScriptFactory} class.
Resolves the script source from either the '{@code script-source}' attribute or the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and returns {@code null} if neither or both of these values are specified.
Construct a new GroovyScriptEvaluator.
Create a new GroovyScriptFactory for the given script source. <p>We don't need to specify script interfaces here, since a Groovy script defines its Java interfaces itself. Interpreted by the post-processor that actually creates the script.
Create a new GroovyScriptFactory for the given script source, specifying a strategy interface that can create a custom MetaClass to supply missing methods and otherwise change the behavior of the object. <p>We don't need to specify script interfaces here, since a Groovy script defines its Java interfaces itself. Interpreted by the post-processor that actually creates the script. (may be {@code null})
Return the GroovyClassLoader used by this script factory.
Instantiate the given Groovy script class and run it if necessary. or the result of running the script instance)
Create a new JRubyScriptFactory for the given script source. Interpreted by the post-processor that actually creates the script. is supposed to implement
Create a new JRuby-scripted object from the given script source, using the default {@link ClassLoader}.
Create a new JRuby-scripted object from the given script source.
Given the root {@link Node} in a JRuby AST will locate the name of the class defined by that AST.
Find the first {@link ClassNode} under the supplied {@link Node}.
Create a new {@code JRubyException}, wrapping the given JRuby {@code RaiseException}.
Create a new RefreshableScriptTargetSource. whether a refresh is required
Create a new ResourceScriptSource for the given resource.
Return the {@link org.springframework.core.io.Resource} to load the script from.
Set the encoding used for reading the script resource. <p>The default value for regular Resources is "UTF-8". A {@code null} value implies the platform default.
Retrieve the current last-modified timestamp of the underlying resource.
Set the delay between refresh checks, in milliseconds. Default is -1, indicating no refresh checks at all. <p>Note that an actual refresh will only happen when the {@link org.springframework.scripting.ScriptSource} indicates that it has been modified.
Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces.
Prepare the script beans in the internal BeanFactory that this post-processor uses. Each original bean definition will be split into a ScriptFactory definition and a scripted object definition.
Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}. If the {@link BeanDefinition} has a {@link org.springframework.core.AttributeAccessor metadata attribute} under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number} type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay} value is used.
Create a ScriptFactory bean definition based on the given script definition, extracting only the definition data that is relevant for the ScriptFactory (that is, only bean class and constructor arguments).
Obtain a ScriptSource for the given bean, lazily creating it if not cached already.
Convert the given script source locator to a ScriptSource instance. <p>By default, supported locators are Spring resource locations (such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh") and inline scripts ("inline:myScriptText...").
Create a config interface for the given bean definition, defining setter methods for the defined property values as well as an init method and a destroy method (if defined). <p>This implementation creates the interface via CGLIB's InterfaceMaker, determining the property types from the given interfaces (as far as possible). config interface for getters corresponding to the setters we're supposed to generate)
Create a composite interface Class for the given interfaces, implementing the given interfaces in one single Class. <p>The default implementation builds a JDK proxy class for the given interfaces.
Create a bean definition for the scripted object, based on the given script definition, extracting the definition data that is relevant for the scripted object (that is, everything but bean class and constructor arguments).
Create a refreshable proxy for the given AOP TargetSource. indicate proxying of all interfaces implemented by the target class)
Construct a new script eval exception with the specified original exception.
Construct a new {@code StandardScriptEvaluator} for the given class loader.
Construct a new {@code StandardScriptEvaluator} for the given JSR-223 {@link ScriptEngineManager} to obtain script engines from.
Set the name of the language meant for evaluating the scripts (e.g. "Groovy"). <p>This is effectively an alias for {@link #setEngineName "engineName"}, potentially (but not yet) providing common abbreviations for certain languages beyond what the JSR-223 script engine factory exposes.
Set the name of the script engine for evaluating the scripts (e.g. "Groovy"), as exposed by the JSR-223 script engine factory.
Set the globally scoped bindings on the underlying script engine manager, shared by all scripts, as an alternative to script argument bindings.
Obtain the JSR-223 ScriptEngine to use for the given script.
Create a new StandardScriptFactory for the given script source. Interpreted by the post-processor that actually creates the script.
Create a new StandardScriptFactory for the given script source. Interpreted by the post-processor that actually creates the script. is supposed to implement
Create a new StandardScriptFactory for the given script source. (explicitly given instead of inferred from the script source) Interpreted by the post-processor that actually creates the script.
Create a new StandardScriptFactory for the given script source. (explicitly given instead of inferred from the script source) Interpreted by the post-processor that actually creates the script. is supposed to implement
Retrieve a {@link ScriptEngine} from the given {@link ScriptEngineManager} by name, delegating to {@link ScriptEngineManager#getEngineByName} but throwing a descriptive exception if not found or if initialization failed.
Create a new StaticScriptSource for the given script.
Create a new StaticScriptSource for the given script. (may be {@code null})
Set a fresh script String, overriding the previous script.
Constructor for ScriptCompilationException.
Return the source for the offending script.
Set the prefix that gets applied to the ResourceBundle basenames, i.e. the theme names. E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme". <p>Note that ResourceBundle names are effectively classpath locations: As a consequence, the JDK's standard ResourceBundle treats dots as package separators. This means that "test.theme" is effectively equivalent to "test/theme", just like it is for programmatic {@code java.util.ResourceBundle} usage.
Set the default charset to use for parsing resource bundle files. <p>{@link ResourceBundleMessageSource}'s default is the {@code java.util.ResourceBundle} default encoding: ISO-8859-1.
Set whether to fall back to the system Locale if no files for a specific Locale have been found. <p>{@link ResourceBundleMessageSource}'s default is "true".
Create a MessageSource for the given basename, to be used as MessageSource for the corresponding theme. <p>Default implementation creates a ResourceBundleMessageSource. for the given basename. A subclass could create a specifically configured ReloadableResourceBundleMessageSource, for example.
Initialize the MessageSource of the given theme with the one from the corresponding parent of this ThemeSource.
Create a SimpleTheme.
Initialize the ThemeSource for the given application context, autodetecting a bean with the name "themeSource". If no such bean is found, a default (empty) ThemeSource will be used.
Construct a new {@code ModelMap} containing the supplied attribute under the supplied name.
Construct a new {@code ModelMap} containing the supplied attribute. Uses attribute name generation to generate the key for the supplied model object.
Add the supplied attribute under the supplied name.
Add the supplied attribute to this {@code Map} using a {@link org.springframework.core.Conventions#getVariableName generated name}. <p><emphasis>Note: Empty {@link Collection Collections} are not added to the model when using this method because we cannot correctly determine the true convention name. View code should check for {@code null} rather than for empty collections as is already done by JSTL tags.</emphasis>
Copy all attributes in the supplied {@code Collection} into this {@code Map}, using attribute name generation for each element.
Copy all attributes in the supplied {@code Map} into this {@code Map}.
Copy all attributes in the supplied {@code Map} into this {@code Map}, with existing objects of the same name taking precedence (i.e. not getting replaced).
Does this model contain an attribute of the given name?
Set the JSR-303 Validator to delegate to for validating beans. <p>Default is the default ValidatorFactory's default Validator.
Set the JSR-303 ValidatorFactory to delegate to for validating beans, using its default Validator. <p>Default is the default ValidatorFactory's default Validator.
Choose whether to perform validation after bean initialization (i.e. after init methods) instead of before (which is the default). <p>Default is "false" (before initialization). Switch this to "true" (after initialization) if you would like to give init methods a chance to populate constrained fields before they get validated.
Perform validation of the given bean.
Set the ValidatorFactory to obtain the target Validator from. <p>Default is {@link javax.validation.Validation#buildDefaultValidatorFactory()}.
Specify a custom MessageInterpolator to use for this Validator.
Specify a custom TraversableResolver to use for this Validator.
Create a new LocaleContextMessageInterpolator, wrapping the given target interpolator.
Specify a custom MessageInterpolator to use for this ValidatorFactory and its exposed default Validator.
Specify a custom Spring MessageSource for resolving validation messages, instead of relying on JSR-303's default "ValidationMessages.properties" bundle in the classpath. This may refer to a Spring context's shared "messageSource" bean, or to some special MessageSource setup for validation purposes only. <p><b>NOTE:</b> This feature requires Hibernate Validator 4.3 or higher on the classpath. You may nevertheless use a different validation provider but Hibernate Validator's {@link ResourceBundleMessageInterpolator} class must be accessible during configuration. <p>Specify either this property or {@link #setMessageInterpolator "messageInterpolator"}, not both. If you would like to build a custom MessageInterpolator, consider deriving from Hibernate Validator's {@link ResourceBundleMessageInterpolator} and passing in a Spring-based {@code ResourceBundleLocator} when constructing your interpolator.
Specify a custom TraversableResolver to use for this ValidatorFactory and its exposed default Validator.
Specify a custom ConstraintValidatorFactory to use for this ValidatorFactory. <p>Default is a {@link SpringConstraintValidatorFactory}, delegating to the containing ApplicationContext for creating autowired ConstraintValidator instances.
Set the ParameterNameDiscoverer to use for resolving method and constructor parameter names if needed for message interpolation. <p>Default is a {@link org.springframework.core.DefaultParameterNameDiscoverer}.
Specify resource locations to load XML constraint mapping files from, if any.
Specify bean validation properties to be passed to the validation provider. <p>Can be populated with a String "value" (parsed via PropertiesEditor) or a "props" element in XML bean definitions.
Specify bean validation properties to be passed to the validation provider as a Map. <p>Can be populated with a "map" or "props" element in XML bean definitions.
Allow Map access to the bean validation properties to be passed to the validation provider, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "validationPropertyMap[myKey]".
Build a MessageSourceResourceBundleLocator for the given MessageSource.
Create a new MethodValidationInterceptor using a default JSR-303 validator underneath.
Create a new MethodValidationInterceptor using the given JSR-303 ValidatorFactory.
Create a new MethodValidationInterceptor using the given JSR-303 Validator.
Determine the validation groups to validate against for the given method invocation. <p>Default are the validation groups as specified in the {@link Validated} annotation on the containing target class of the method.
Set the 'validated' annotation type. The default validated annotation type is the {@link Validated} annotation. <p>This setter property exists so that developers can provide their own (non-Spring-specific) annotation type to indicate that a class is supposed to be validated in the sense of applying method validation.
Set the JSR-303 Validator to delegate to for validating methods. <p>Default is the default ValidatorFactory's default Validator.
Set the JSR-303 ValidatorFactory to delegate to for validating methods, using its default Validator. <p>Default is the default ValidatorFactory's default Validator.
Create AOP advice for method validation purposes, to be applied with a pointcut for the specified 'validated' annotation. a {@link MethodValidationInterceptor} or subclass thereof)
Create a new SpringConstraintValidatorFactory for the given BeanFactory.
Bean Validation 1.1 releaseInstance method
Create a new SpringValidatorAdapter for the given JSR-303 Validator.
Process the given JSR-303 ConstraintViolations, adding corresponding errors to the provided Spring {@link Errors} object.
Determine a field for the given constraint violation. <p>The default implementation returns the stringified property path.
Determine a Spring-reported error code for the given constraint descriptor. <p>The default implementation returns the simple class name of the descriptor's annotation type. Note that the configured {@link org.springframework.validation.MessageCodesResolver} will automatically generate error code variations which include the object name and the field name.
Return FieldError arguments for a validation error on the given field. Invoked for each violated constraint. <p>The default implementation returns a first argument indicating the field name (of type DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes). Afterwards, it adds all actual constraint annotation attributes (i.e. excluding "message", "groups" and "payload") in alphabetical order of their attribute names. <p>Can be overridden to e.g. add further attributes from the constraint descriptor.
Extract the rejected value behind the given constraint violation, for exposure through the Spring errors representation. which contains the current field's value
Create a new AbstractBindingResult instance.
Set the strategy to use for resolving errors into message codes. Default is DefaultMessageCodesResolver.
Return the strategy to use for resolving errors into message codes.
Format the given value for the specified field. <p>The default implementation simply returns the field value as-is. other than from a binding error, or an actual field value)
Actually set the nested path. Delegated to by setNestedPath and pushNestedPath.
Transform the given field into its full path, regarding the nested path of this instance.
Determine the canonical field name for the given field. <p>The default implementation simply returns the field name as-is.
Check whether the given FieldError matches the given field.
Create a new AbstractPropertyBindingResult instance.
Retrieve the custom PropertyEditor for the given field, if any.
Creates a new instance of the {@link BeanPropertyBindingResult} class.
Create a new {@link BeanWrapper} for the underlying target object.
Create a new BindException instance for a BindingResult.
Create a new BindException instance for a target bean.
Return the BindingResult that this BindException wraps. Will typically be a BeanPropertyBindingResult.
Find the BindingResult for the given name in the given model.
Find a required BindingResult for the given name in the given model.
Create a new DataBinder instance, with default object name. if the binder is just used to convert a plain parameter value)
Create a new DataBinder instance. if the binder is just used to convert a plain parameter value)
Return the wrapped target object.
Return the name of the bound object.
Set whether this binder should attempt to "auto-grow" a nested path that contains a null value. <p>If "true", a null path location will be populated with a default object value and traversed instead of resulting in an exception. This flag also enables auto-growth of collection elements when accessing an out-of-bounds index. <p>Default is "true" on a standard DataBinder. Note that since Spring 4.1 this feature is supported for bean property access (DataBinder's default mode) and field access.
Return whether "auto-growing" of nested paths has been activated.
Specify the limit for array and collection auto-growing. <p>Default is 256, preventing OutOfMemoryErrors in case of large indexes. Raise this limit if your auto-growing needs are unusually high.
Return the current limit for array and collection auto-growing.
Initialize standard JavaBean property access for this DataBinder. <p>This is the default; an explicit call just leads to eager initialization.
Create the {@link AbstractPropertyBindingResult} instance using standard JavaBean property access.
Initialize direct field access for this DataBinder, as alternative to the default bean property access.
Create the {@link AbstractPropertyBindingResult} instance using direct field access.
Return the internal BindingResult held by this DataBinder, as an AbstractPropertyBindingResult.
Return the underlying PropertyAccessor of this binder's BindingResult.
Return this binder's underlying SimpleTypeConverter.
Return the underlying TypeConverter of this binder's BindingResult.
Return the underlying TypeConverter of this binder's BindingResult.
This allows for convenient access to the binding results after a bind operation. or as Errors instance (Errors is a super-interface of BindingResult)
Set whether to ignore unknown fields, that is, whether to ignore bind parameters that do not have corresponding fields in the target object. <p>Default is "true". Turn this off to enforce that all bind parameters must have a matching field in the target object. <p>Note that this setting only applies to <i>binding</i> operations on this DataBinder, not to <i>retrieving</i> values via its {@link #getBindingResult() BindingResult}.
Return whether to ignore unknown fields when binding.
Set whether to ignore invalid fields, that is, whether to ignore bind parameters that have corresponding fields in the target object which are not accessible (for example because of null values in the nested path). <p>Default is "false". Turn this on to ignore bind parameters for nested objects in non-existing parts of the target object graph. <p>Note that this setting only applies to <i>binding</i> operations on this DataBinder, not to <i>retrieving</i> values via its {@link #getBindingResult() BindingResult}.
Return whether to ignore invalid fields when binding.
Register fields that should be allowed for binding. Default is all fields. Restrict this for example to avoid unwanted modifications by malicious users when binding HTTP request parameters. <p>Supports "xxx*", "*xxx" and "*xxx*" patterns. More sophisticated matching can be implemented by overriding the {@code isAllowed} method. <p>Alternatively, specify a list of <i>disallowed</i> fields.
Return the fields that should be allowed for binding.
Register fields that should <i>not</i> be allowed for binding. Default is none. Mark fields as disallowed for example to avoid unwanted modifications by malicious users when binding HTTP request parameters. <p>Supports "xxx*", "*xxx" and "*xxx*" patterns. More sophisticated matching can be implemented by overriding the {@code isAllowed} method. <p>Alternatively, specify a list of <i>allowed</i> fields.
Return the fields that should <i>not</i> be allowed for binding.
Register fields that are required for each binding process. <p>If one of the specified fields is not contained in the list of incoming property values, a corresponding "missing field" error will be created, with error code "required" (by the default binding error processor).
Return the fields that are required for each binding process.
Set whether to extract the old field value when applying a property editor to a new value for a field. <p>Default is "true", exposing previous field values to custom editors. Turn this to "false" to avoid side effects caused by getters.
Set the strategy to use for resolving errors into message codes. Applies the given strategy to the underlying errors holder. <p>Default is a DefaultMessageCodesResolver.
Set the strategy to use for processing binding errors, that is, required field errors and {@code PropertyAccessException}s. <p>Default is a DefaultBindingErrorProcessor.
Return the strategy for processing binding errors.
Set the Validator to apply after each binding step.
Add Validators to apply after each binding step.
Replace the Validators to apply after each binding step.
Return the primary Validator to apply after each binding step, if any.
Return the Validators to apply after data binding.
Add a custom formatter, applying it to all fields matching the {@link Formatter}-declared type. <p>Registers a corresponding {@link PropertyEditor} adapter underneath the covers.
Add a custom formatter for the field type specified in {@link Formatter} class, applying it to the specified fields only, if any, or otherwise to all fields. <p>Registers a corresponding {@link PropertyEditor} adapter underneath the covers.
Add a custom formatter, applying it to the specified field types only, if any, or otherwise to all fields matching the {@link Formatter}-declared type. <p>Registers a corresponding {@link PropertyEditor} adapter underneath the covers. field type if field types are explicitly specified as parameters) derived from the given {@link Formatter} implementation class
Bind the given property values to this binder's target. <p>This call can create field errors, representing basic binding errors like a required field (code "required"), or type mismatch between value and bean property (code "typeMismatch"). <p>Note that the given PropertyValues should be a throwaway instance: For efficiency, it will be modified to just contain allowed fields if it implements the MutablePropertyValues interface; else, an internal mutable copy will be created for this purpose. Pass in a copy of the PropertyValues if you want your original instance to stay unmodified in any case.
Actual implementation of the binding process, working with the passed-in MutablePropertyValues instance. as MutablePropertyValues instance
Check the given property values against the allowed fields, removing values for fields that are not allowed.
Return if the given field is allowed for binding. Invoked for each passed-in property value. <p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches, as well as direct equality, in the specified lists of allowed fields and disallowed fields. A field matching a disallowed pattern will not be accepted even if it also happens to match a pattern in the allowed list. <p>Can be overridden in subclasses.
Check the given property values against the required fields, generating missing field errors where appropriate.
Apply given property values to the target object. <p>Default implementation applies all of the supplied property values as bean property values. By default, unknown fields will be ignored.
Invoke the specified Validators, if any.
Invoke the specified Validators, if any, with the given validation hints. <p>Note: Validation hints may get ignored by the actual target Validator.
Close this DataBinder, which may result in throwing a BindException if it encountered any errors.
Return FieldError arguments for a binding error on the given field. Invoked for each missing required field and each type mismatch. <p>The default implementation returns a single argument indicating the field name (of type DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes).
Specify a prefix to be applied to any code built by this resolver. <p>Default is none. Specify, for example, "validation." to get error codes like "validation.typeMismatch.name".
Specify the format for message codes built by this resolver. <p>The default is {@link Format#PREFIX_ERROR_CODE}.
Return the prefix to be applied to any code built by this resolver. <p>Returns an empty String in case of no prefix.
Add both keyed and non-keyed entries for the supplied {@code field} to the supplied field list.
Post-process the given message code, built by this resolver. <p>The default implementation applies the specified prefix, if any.
Concatenate the given elements, delimiting each with {@link DefaultMessageCodesResolver#CODE_SEPARATOR}, skipping zero-length or null elements altogether.
Create a new DirectFieldBindingResult instance.
Create a new DirectFieldAccessor for the underlying target object.
Create a new FieldError instance.
Create a new FieldError instance. (like a type mismatch); else, it is a validation failure
Return the affected field of the object.
Return the rejected field value.
Return whether this error represents a binding failure (like a type mismatch); otherwise it is a validation failure.
Create a new MapBindingResult instance.
Create a new instance of the ObjectError class.
Return the name of the affected object.
Invoke the given {@link Validator} for the supplied object and {@link Errors} instance. {@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support} the validation of the supplied object's type
Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and {@link Errors} instance. {@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support} the validation of the supplied object's type
Reject the given field with the given error code if the value is empty. <p>An 'empty' value in this context means either {@code null} or the empty string "". <p>The object whose field is being validated does not need to be passed in because the {@link Errors} instance can resolve field values by itself (it will usually hold an internal reference to the target object).
Reject the given field with the given error code and default message if the value is empty. <p>An 'empty' value in this context means either {@code null} or the empty string "". <p>The object whose field is being validated does not need to be passed in because the {@link Errors} instance can resolve field values by itself (it will usually hold an internal reference to the target object).
Reject the given field with the given error codea nd error arguments if the value is empty. <p>An 'empty' value in this context means either {@code null} or the empty string "". <p>The object whose field is being validated does not need to be passed in because the {@link Errors} instance can resolve field values by itself (it will usually hold an internal reference to the target object). (can be {@code null})
Reject the given field with the given error code, error arguments and default message if the value is empty. <p>An 'empty' value in this context means either {@code null} or the empty string "". <p>The object whose field is being validated does not need to be passed in because the {@link Errors} instance can resolve field values by itself (it will usually hold an internal reference to the target object). (can be {@code null})
Reject the given field with the given error code if the value is empty or just contains whitespace. <p>An 'empty' value in this context means either {@code null}, the empty string "", or consisting wholly of whitespace. <p>The object whose field is being validated does not need to be passed in because the {@link Errors} instance can resolve field values by itself (it will usually hold an internal reference to the target object).
Reject the given field with the given error code and default message if the value is empty or just contains whitespace. <p>An 'empty' value in this context means either {@code null}, the empty string "", or consisting wholly of whitespace. <p>The object whose field is being validated does not need to be passed in because the {@link Errors} instance can resolve field values by itself (it will usually hold an internal reference to the target object).
Reject the given field with the given error code and error arguments if the value is empty or just contains whitespace. <p>An 'empty' value in this context means either {@code null}, the empty string "", or consisting wholly of whitespace. <p>The object whose field is being validated does not need to be passed in because the {@link Errors} instance can resolve field values by itself (it will usually hold an internal reference to the target object). (can be {@code null})
Reject the given field with the given error code, error arguments and default message if the value is empty or just contains whitespace. <p>An 'empty' value in this context means either {@code null}, the empty string "", or consisting wholly of whitespace. <p>The object whose field is being validated does not need to be passed in because the {@link Errors} instance can resolve field values by itself (it will usually hold an internal reference to the target object). (can be {@code null})
Change the return number to a higher number to make this test useful.
Returns a new {@link ClassPathXmlApplicationContext} for the file ending in <var>fileSuffix</var>.
Returns the relatively qualified name for <var>fileSuffix</var>. e.g. for a fileSuffix='foo.xml', this method will return 'AspectJAutoProxyCreatorTests-foo.xml'
"advice" methods
Return a bean factory with attributes and EnterpriseServices configured.
Also has counting before advice.
Is a target always required?
Throw an exception if there is an Invocation.
Check that gets and releases match
Uses its own bean factory XML for clarity be a prototype
Init method
Init method
Init method
Overloaded form of replaceMe.
Another overloaded form of replaceMe, not getting replaced. Must not cause errors when the other replaceMe methods get replaced.
Create a {@link SimpleCacheManager} with the specified cache(s).
Assert the following key is not held within the specified cache(s).
Assert the following key has a matching value within the specified cache(s).
Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for each of the given {@link Configuration} <var>configClasses</var>, and then post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}. When complete, the factory is ready to service requests for any {@link Bean} methods declared by <var>configClasses</var>.
No @Autowired - implicit wiring
to be ignored
Register an event for the specified listener.
Return the events that the specified listener has received. The list of events is ordered according to their reception order.
Assert that the listener identified by the specified id has not received any event.
Assert that the specified listener has not received any event.
Assert that the listener identified by the specified id has received the specified events, in that specific order.
Assert that the specified listener has received the specified events, in that specific order.
Assert the number of events received by this instance. Checks that unexpected events have not been received. If an event is handled by several listeners, each instance will be registered.
Must register a TestListener. Must register standard beans. Parent must register rod with name Roderick and father with name Albert.
Start the specified {@link MBeanExporter}.
@@org.springframework.jmx.export.metadata.ManagedAttribute(description="The Nick
@@org.springframework.jmx.export.metadata.ManagedAttribute(description="The Is
Create a new {@code MockEnvironment} with a single {@link MockPropertySource}.
Set a property on the underlying {@link MockPropertySource} for this environment.
Convenient synonym for {@link #setProperty} that returns the current instance. Useful for method chaining and fluent-style use.
utility methods
utility methods
Construct a new JndiTemplate that will always return the given object, but honour only requests for the given name.
Add the given object to the list of JNDI objects that this template will expose.
Create a new naming context.
Create a new naming context with the given naming root.
Create a new naming context with the given naming root, the given name/object map, and the JNDI environment entries.
Checks if a SimpleNamingContextBuilder is active. or {@code null} if none
If no SimpleNamingContextBuilder is already configuring JNDI, create and activate one. Otherwise take the existing activate SimpleNamingContextBuilder, clear it and return it. <p>This is mainly intended for test suites that want to reinitialize JNDI bindings from scratch repeatedly. to control JNDI bindings
Register the context builder by registering it with the JNDI NamingManager. Note that once this has been done, {@code new InitialContext()} will always return a context from this factory. Use the {@code emptyActivatedContextBuilder()} static method to get an empty context (for example, in test methods). registered with the JNDI NamingManager
Temporarily deactivate this context builder. It will remain registered with the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory (if configured) instead of exposing its own bound objects. <p>Call {@code activate()} again in order to expose this context builder's own bound objects again. Such activate/deactivate sequences can be applied any number of times (e.g. within a larger integration test suite running in the same VM).
Clear all bindings in this context builder, while keeping it active.
Bind the given object under the given name, for all naming contexts that this context builder will generate.
Resets MBeanServerFactory and ManagementFactory to a known consistent state. This involves releasing all currently registered MBeanServers and resetting the platformMBeanServer to null.
Create a {@link CaffeineCache} instance with the specified name and the given internal {@link com.github.benmanes.caffeine.cache.Cache} to use.
Create a {@link CaffeineCache} instance with the specified name and the given internal {@link com.github.benmanes.caffeine.cache.Cache} to use. values for this cache
Construct a static CaffeineCacheManager, managing caches for the specified cache names only.
Set the Caffeine to use for building each individual {@link CaffeineCache} instance.
Set the {@link CaffeineSpec} to use for building each individual {@link CaffeineCache} instance.
Set the Caffeine cache specification String to use for building each individual {@link CaffeineCache} instance. The given value needs to comply with Caffeine's {@link CaffeineSpec} (see its javadoc).
Set the Caffeine CacheLoader to use for building each individual {@link CaffeineCache} instance, turning it into a LoadingCache.
Specify whether to accept and convert {@code null} values for all caches in this cache manager. <p>Default is "true", despite Caffeine itself not supporting {@code null} values. An internal holder object will be used to store user-level {@code null}s.
Create a new CaffeineCache instance for the specified cache name.
Create a native Caffeine Cache instance for the specified cache name.
Create the known caches again with the current state of this manager.
Create an {@link EhCacheCache} instance.
Create a new EhCacheCacheManager for the given backing EhCache CacheManager.
Set the backing EhCache {@link net.sf.ehcache.CacheManager}.
Return the backing EhCache {@link net.sf.ehcache.CacheManager}.
Set a CacheManager from which to retrieve a named Cache instance. By default, {@code CacheManager.getInstance()} will be called. <p>Note that in particular for persistent caches, it is advisable to properly handle the shutdown of the CacheManager: Set up a separate EhCacheManagerFactoryBean and pass a reference to this bean property. <p>A separate EhCacheManagerFactoryBean is also necessary for loading EhCache configuration from a non-default config location.
Set a name for which to retrieve or create a cache instance. Default is the bean name of this EhCacheFactoryBean.
Set whether to use a blocking cache that lets read attempts block until the requested element is created. <p>If you intend to build a self-populating blocking cache, consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}.
Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory} to use for a self-populating cache. If such a factory is specified, the cache will be decorated with EhCache's {@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}. <p>The specified factory can be of type {@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory}, which will lead to the use of an {@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}. <p>Note: Any such self-populating cache is automatically a blocking cache.
Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader} for this cache, if any.
Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners} to registered with this cache.
Set whether to enable EhCache statistics on this cache. <p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off. This setter therefore has no effect in such a scenario.
Set whether to enable EhCache's sampled statistics on this cache. <p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off. This setter therefore has no effect in such a scenario.
Set whether this cache should be marked as disabled.
Create a raw Cache object based on the configuration of this FactoryBean.
Decorate the given Cache, if necessary.
Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml". <p>Default is "ehcache.xml" in the root of the class path, or if not found, "ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization).
Set the name of the EhCache CacheManager (if a specific name is desired).
Set whether an existing EhCache CacheManager of the same name will be accepted for this EhCacheManagerFactoryBean setup. Default is "false". <p>Typically used in combination with {@link #setCacheManagerName "cacheManagerName"} but will simply work with the default CacheManager name if none specified. All references to the same CacheManager name (or the same default) in the same ClassLoader space will share the specified CacheManager then. #see #setShared
Set whether the EhCache CacheManager should be shared (as a singleton at the ClassLoader level) or independent (typically local within the application). Default is "false", creating an independent local instance. <p><b>NOTE:</b> This feature allows for sharing this EhCacheManagerFactoryBean's CacheManager with any code calling <code>CacheManager.create()</code> in the same ClassLoader space, with no need to agree on a specific CacheManager name. However, it only supports a single EhCacheManagerFactoryBean involved which will control the lifecycle of the underlying CacheManager (in particular, its shutdown). <p>This flag overrides {@link #setAcceptExisting "acceptExisting"} if both are set, since it indicates the 'stronger' mode of sharing.
Build an EhCache {@link CacheManager} from the default configuration. <p>The CacheManager will be configured from "ehcache.xml" in the root of the class path (that is, default EhCache initialization - as defined in the EhCache docs - will apply). If no configuration file can be found, a fail-safe fallback configuration will be used.
Build an EhCache {@link CacheManager} from the given configuration resource.
Parse EhCache configuration from the given resource, for further use with custom {@link CacheManager} creation.
Create a {@link GuavaCache} instance with the specified name and the given internal {@link com.google.common.cache.Cache} to use.
Create a {@link GuavaCache} instance with the specified name and the given internal {@link com.google.common.cache.Cache} to use. values for this cache
Construct a static GuavaCacheManager, managing caches for the specified cache names only.
Set the Guava CacheBuilder to use for building each individual {@link GuavaCache} instance.
Set the Guava CacheBuilderSpec to use for building each individual {@link GuavaCache} instance.
Set the Guava cache specification String to use for building each individual {@link GuavaCache} instance. The given value needs to comply with Guava's {@link CacheBuilderSpec} (see its javadoc).
Set the Guava CacheLoader to use for building each individual {@link GuavaCache} instance, turning it into a LoadingCache.
Specify whether to accept and convert {@code null} values for all caches in this cache manager. <p>Default is "true", despite Guava itself not supporting {@code null} values. An internal holder object will be used to store user-level {@code null}s.
Create a new GuavaCache instance for the specified cache name.
Create a native Guava Cache instance for the specified cache name.
Convert the collection of caches in a single expected element. <p>Throw an {@link IllegalStateException} if the collection holds more than one element
Create a new instance.
Return the {@link KeyGenerator} to use to compute cache keys.
Return the {@link CacheInvocationParameter} for the parameters that are to be used to compute the key. <p>Per the spec, if some method parameters are annotated with {@link javax.cache.annotation.CacheKey}, only those parameters should be part of the key. If none are annotated, all parameters except the parameter annotated with {@link javax.cache.annotation.CacheValue} should be part of the key. <p>The method arguments must match the signature of the related method invocation used to compute the key
Create a new instance.
Generate a key for the specified invocation.
Create a {@link CacheKeyInvocationContext} based on the specified invocation.
Generate a default cache name for the specified {@link Method}.
Set the {@link org.springframework.aop.ClassFilter} to use for this pointcut. Default is {@link org.springframework.aop.ClassFilter#TRUE}.
Specify if the cache should be updated before invoking the method. By default, the cache is updated after the method invocation.
Return the {@link CacheInvocationParameter} for the parameter holding the value to cache. <p>The method arguments must match the signature of the related method invocation
Specify if the cache should be cleared before invoking the method. By default, the cache is cleared after the method invocation.
Specify if the cache entry should be remove before invoking the method. By default, the cache entry is removed after the method invocation.
Create a new instance with the JSR-107 cache resolver to invoke.
Return the underlying {@link javax.cache.annotation.CacheResolver} that this instance is using.
Check for a cached exception. If the exception is found, throw it directly.
Rewrite the call stack of the specified {@code exception} so that it matches the current call stack up-to (included) the specified method invocation. <p>Clone the specified exception. If the exception is not {@code serializable}, the original exception is returned. If no common ancestor can be found, returns the original exception. <p>Used to make sure that a cached exception has a valid invocation context. call stack up to (included) the common ancestor specified by the {@code className} and {@code methodName} arguments, followed by stack trace elements of the specified {@code exception} after the common ancestor.
Specify if the method should always be invoked regardless of a cache hit. By default, the method is only invoked in case of a cache miss.
Return the {@link CacheResolver} instance to use to resolve the cache to use for matching exceptions thrown by this operation.
Return the name of the cache to cache exceptions, or {@code null} if caching exceptions should be disabled.
Set the default {@link CacheManager} to use to lookup cache by name. Only mandatory if the {@linkplain CacheResolver cache resolvers} have not been set.
Return the specified cache manager to use, if any.
Set the {@link CacheResolver} to resolve regular caches. If none is set, a default implementation using the specified cache manager will be used.
Return the specified cache resolver to use, if any.
Set the {@link CacheResolver} to resolve exception caches. If none is set, a default implementation using the specified cache manager will be used.
Return the specified exception cache resolver to use, if any.
Set the default {@link KeyGenerator}. If none is set, a {@link SimpleKeyGenerator} honoring the JSR-107 {@link javax.cache.annotation.CacheKey} and {@link javax.cache.annotation.CacheValue} will be used.
Return the specified key generator to use, if any.
Execute the underlying operation (typically in case of cache miss) and return the result of the invocation. If an exception occurs it will be wrapped in a {@code ThrowableWrapper}: the exception can be handled or modified but it <em>must</em> be wrapped in a {@code ThrowableWrapper} as well.
Create an instance with the given {@link KeyGenerator} so that {@link javax.cache.annotation.CacheKey} and {@link javax.cache.annotation.CacheValue} are handled according to the spec.
Create an instance used to wrap the specified {@link javax.cache.annotation.CacheKeyGenerator}.
Return the target key generator to use in the form of either a {@link KeyGenerator} or a {@link CacheKeyGenerator}.
Create an {@link org.springframework.cache.jcache.JCacheCache} instance.
Create a new JCacheCacheManager for the given backing JCache.
Set the backing JCache {@link javax.cache.CacheManager}.
Return the backing JCache {@link javax.cache.CacheManager}.
Specify whether to accept and convert {@code null} values for all caches in this cache manager. <p>Default is "true", despite JSR-107 itself not supporting {@code null} values. An internal holder object will be used to store user-level {@code null}s.
Specify the URI for the desired CacheManager. Default is {@code null} (i.e. JCache's default).
Specify properties for the to-be-created CacheManager. Default is {@code null} (i.e. no special properties to apply).
Set whether this CacheManager should expose transaction-aware Cache objects. <p>Default is "false". Set this to "true" to synchronize cache put/evict operations with ongoing Spring-managed transactions, performing the actual cache put/evict operation only in the after-commit phase of a successful transaction.
Return whether this CacheManager has been configured to be transaction-aware.
Create a new TransactionAwareCache for the given target Cache.
Create a new TransactionAwareCacheManagerProxy for the given target CacheManager.
Set the target CacheManager to proxy.
Specify the {@code Resource} from which mappings are loaded. <p>Needs to follow the {@code mime.types} file format, as specified by the Java Activation Framework, containing lines such as:<br> {@code text/html  html htm HTML HTM}
Specify additional MIME type mappings as lines that follow the {@code mime.types} file format, as specified by the Java Activation Framework, for example:<br> {@code text/html  html htm HTML HTM}
Return the delegate FileTypeMap, compiled from the mappings in the mapping file and the entries in the {@code mappings} property.
Compile a {@link FileTypeMap} from the mappings in the given mapping file and the given mapping entries. <p>The default implementation creates an Activation Framework {@link MimetypesFileTypeMap}, passing in an InputStream from the mapping resource (if any) and registering the mapping lines programmatically.
Create a new instance of the {@code JavaMailSenderImpl} class. <p>Initializes the {@link #setDefaultFileTypeMap "defaultFileTypeMap"} property with a default {@link ConfigurableMimeFileTypeMap}.
Set JavaMail properties for the {@code Session}. <p>A new {@code Session} will be created with those properties. Use either this method or {@link #setSession}, but not both. <p>Non-default properties in this instance will override given JavaMail properties.
Allow Map access to the JavaMail properties of this sender, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "javaMailProperties[mail.smtp.auth]".
Set the JavaMail {@code Session}, possibly pulled from JNDI. <p>Default is a new {@code Session} without defaults, that is completely configured via this instance's properties. <p>If using a pre-configured {@code Session}, non-default properties in this instance will override the settings in the {@code Session}.
Return the JavaMail {@code Session}, lazily initializing it if hasn't been specified explicitly.
Set the mail protocol. Default is "smtp".
Return the mail protocol.
Set the mail server host, typically an SMTP host. <p>Default is the default host of the underlying JavaMail Session.
Return the mail server host.
Set the mail server port. <p>Default is {@link #DEFAULT_PORT}, letting JavaMail use the default SMTP port (25).
Return the mail server port.
Set the username for the account at the mail host, if any. <p>Note that the underlying JavaMail {@code Session} has to be configured with the property {@code "mail.smtp.auth"} set to {@code true}, else the specified username will not be sent to the mail server by the JavaMail runtime. If you are not explicitly passing in a {@code Session} to use, simply specify this setting via {@link #setJavaMailProperties}.
Return the username for the account at the mail host.
Set the password for the account at the mail host, if any. <p>Note that the underlying JavaMail {@code Session} has to be configured with the property {@code "mail.smtp.auth"} set to {@code true}, else the specified password will not be sent to the mail server by the JavaMail runtime. If you are not explicitly passing in a {@code Session} to use, simply specify this setting via {@link #setJavaMailProperties}.
Return the password for the account at the mail host.
Set the default encoding to use for {@link MimeMessage MimeMessages} <p>Such an encoding will be auto-detected by {@link MimeMessageHelper}.
Return the default encoding for {@link MimeMessage MimeMessages}, or {@code null} if none.
Set the default Java Activation {@link FileTypeMap} to use for <p>A {@code FileTypeMap} specified here will be autodetected by {@link MimeMessageHelper}, avoiding the need to specify the {@code FileTypeMap} for each {@code MimeMessageHelper} instance. <p>For example, you can specify a custom instance of Spring's {@link ConfigurableMimeFileTypeMap} here. If not explicitly specified, a default {@code ConfigurableMimeFileTypeMap} will be used, containing an extended set of MIME type mappings (as defined by the {@code mime.types} file contained in the Spring jar).
Return the default Java Activation {@link FileTypeMap} for {@link MimeMessage MimeMessages}, or {@code null} if none.
Validate that this instance can connect to the server that it is configured for. Throws a {@link MessagingException} if the connection attempt failed.
Actually send the given array of MimeMessages via JavaMail. that the MimeMessages have been created from (with same array length and indices as the "mimeMessages" array), if any in case of authentication failure in case of failure when sending a message
Obtain and connect a Transport from the underlying JavaMail Session, passing in the specified host, port, username, and password.
Obtain a Transport object from the given JavaMail Session, using the configured protocol. <p>Can be overridden in subclasses, e.g. to return a mock Transport object.
Create a new MimeMailMessage based on the given MimeMessageHelper.
Create a new MimeMailMessage based on the given JavaMail MimeMessage.
Return the MimeMessageHelper that this MimeMailMessage is based on.
Return the JavaMail MimeMessage that this MimeMailMessage is based on.
Create a new MimeMessageHelper for the given MimeMessage, assuming a simple text message (no multipart content, i.e. no alternative texts and no inline elements or attachments). <p>The character encoding for the message will be taken from the passed-in MimeMessage object, if carried there. Else, JavaMail's default encoding will be used.
Create a new MimeMessageHelper for the given MimeMessage, assuming a simple text message (no multipart content, i.e. no alternative texts and no inline elements or attachments).
Create a new MimeMessageHelper for the given MimeMessage, in multipart mode (supporting alternative texts, inline elements and attachments) if requested. <p>Consider using the MimeMessageHelper constructor that takes a multipartMode argument to choose a specific multipart mode other than MULTIPART_MODE_MIXED_RELATED. <p>The character encoding for the message will be taken from the passed-in MimeMessage object, if carried there. Else, JavaMail's default encoding will be used. supports alternative texts, inline elements and attachments (corresponds to MULTIPART_MODE_MIXED_RELATED)
Create a new MimeMessageHelper for the given MimeMessage, in multipart mode (supporting alternative texts, inline elements and attachments) if requested. <p>Consider using the MimeMessageHelper constructor that takes a multipartMode argument to choose a specific multipart mode other than MULTIPART_MODE_MIXED_RELATED. supports alternative texts, inline elements and attachments (corresponds to MULTIPART_MODE_MIXED_RELATED)
Create a new MimeMessageHelper for the given MimeMessage, in multipart mode (supporting alternative texts, inline elements and attachments) if requested. <p>The character encoding for the message will be taken from the passed-in MimeMessage object, if carried there. Else, JavaMail's default encoding will be used. (MIXED, RELATED, MIXED_RELATED, or NO)
Create a new MimeMessageHelper for the given MimeMessage, in multipart mode (supporting alternative texts, inline elements and attachments) if requested. (MIXED, RELATED, MIXED_RELATED, or NO)
Return the underlying MimeMessage object.
Determine the MimeMultipart objects to use, which will be used to store attachments on the one hand and text(s) and inline elements on the other hand. <p>Texts and inline elements can either be stored in the root element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element rather than the root element directly (MULTIPART_MODE_MIXED_RELATED). <p>By default, the root MimeMultipart element will be of type "mixed" (MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED). The main multipart element will either be added as nested element of type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED). object to (MIXED, RELATED, MIXED_RELATED, or NO)
Set the given MimeMultipart objects for use by this MimeMessageHelper. or {@code null} to indicate no multipart at all will be added to (can be the same as the root multipart object, or an element nested underneath the root multipart element)
Return whether this helper is in multipart mode, i.e. whether it holds a multipart message.
Throw an IllegalStateException if this helper is not in multipart mode.
Return the root MIME "multipart/mixed" object, if any. Can be used to manually add attachments. <p>This will be the direct content of the MimeMessage, in case of a multipart mail.
Return the underlying MIME "multipart/related" object, if any. Can be used to manually add body parts, inline elements, etc. <p>This will be nested within the root MimeMultipart, in case of a multipart mail.
Determine the default encoding for the given MimeMessage. or {@code null} if none found
Return the specific character encoding used for this message, if any.
Determine the default Java Activation FileTypeMap for the given MimeMessage. or a default ConfigurableMimeFileTypeMap if none found for the message
Set the Java Activation Framework {@code FileTypeMap} to use for determining the content type of inline content and attachments that get added to the message. <p>Default is the {@code FileTypeMap} that the underlying MimeMessage carries, if any, or the Activation Framework's default {@code FileTypeMap} instance else.
Return the {@code FileTypeMap} used by this MimeMessageHelper.
Set whether to validate all addresses which get passed to this helper. Default is "false". <p>Note that this is by default just available for JavaMail >= 1.3. You can override the default {@code validateAddress method} for validation on older JavaMail versions (or for custom validation).
Return whether this helper will validate all addresses passed to it.
Validate the given mail address. Called by all of MimeMessageHelper's address setters and adders. <p>Default implementation invokes {@code InternetAddress.validate()}, provided that address validation is activated for the helper instance. <p>Note that this method will just work on JavaMail >= 1.3. You can override it for validation on older JavaMail versions or for custom validation.
Validate all given mail addresses. Default implementation simply delegates to validateAddress for each address.
Set the priority ("X-Priority" header) of the message. typically between 1 (highest) and 5 (lowest)
Set the sent-date of the message.
Set the subject of the message, using the correct encoding.
Set the given text directly as content in non-multipart mode or as default body part in multipart mode. Always applies the default content type "text/plain". <p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}; else, mail readers might not be able to resolve inline references correctly.
Set the given text directly as content in non-multipart mode or as default body part in multipart mode. The "html" flag determines the content type to apply. <p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}; else, mail readers might not be able to resolve inline references correctly. HTML mail, using default content type ("text/plain") else
Set the given plain text and HTML text as alternatives, offering both options to the email client. Requires multipart mode. <p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}; else, mail readers might not be able to resolve inline references correctly.
Add an inline element to the MimeMessage, taking the content from a {@code javax.activation.DataSource}. <p>Note that the InputStream returned by the DataSource implementation needs to be a <i>fresh one on each call</i>, as JavaMail will invoke {@code getInputStream()} multiple times. <p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}; else, mail readers might not be able to resolve inline references correctly. in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt;myId&gt;". Can be referenced in HTML source via src="cid:myId" expressions. the content from, determining the InputStream and the content type
Add an inline element to the MimeMessage, taking the content from a {@code java.io.File}. <p>The content type will be determined by the name of the given content file. Do not use this for temporary files with arbitrary filenames (possibly ending in ".tmp" or the like)! <p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}; else, mail readers might not be able to resolve inline references correctly. in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt;myId&gt;". Can be referenced in HTML source via src="cid:myId" expressions.
Add an inline element to the MimeMessage, taking the content from a {@code org.springframework.core.io.Resource}. <p>The content type will be determined by the name of the given content file. Do not use this for temporary files with arbitrary filenames (possibly ending in ".tmp" or the like)! <p>Note that the InputStream returned by the Resource implementation needs to be a <i>fresh one on each call</i>, as JavaMail will invoke {@code getInputStream()} multiple times. <p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}; else, mail readers might not be able to resolve inline references correctly. in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt;myId&gt;". Can be referenced in HTML source via src="cid:myId" expressions.
Add an inline element to the MimeMessage, taking the content from an {@code org.springframework.core.InputStreamResource}, and specifying the content type explicitly. <p>You can determine the content type for any given filename via a Java Activation Framework's FileTypeMap, for example the one held by this helper. <p>Note that the InputStream returned by the InputStreamSource implementation needs to be a <i>fresh one on each call</i>, as JavaMail will invoke {@code getInputStream()} multiple times. <p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}; else, mail readers might not be able to resolve inline references correctly. in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt;myId&gt;". Can be referenced in HTML source via src="cid:myId" expressions.
Add an attachment to the MimeMessage, taking the content from a {@code javax.activation.DataSource}. <p>Note that the InputStream returned by the DataSource implementation needs to be a <i>fresh one on each call</i>, as JavaMail will invoke {@code getInputStream()} multiple times. appear in the mail (the content type will be determined by this) the content from, determining the InputStream and the content type
Add an attachment to the MimeMessage, taking the content from a {@code java.io.File}. <p>The content type will be determined by the name of the given content file. Do not use this for temporary files with arbitrary filenames (possibly ending in ".tmp" or the like)! appear in the mail
Add an attachment to the MimeMessage, taking the content from an {@code org.springframework.core.io.InputStreamResource}. <p>The content type will be determined by the given filename for the attachment. Thus, any content source will be fine, including temporary files with arbitrary filenames. <p>Note that the InputStream returned by the InputStreamSource implementation needs to be a <i>fresh one on each call</i>, as JavaMail will invoke {@code getInputStream()} multiple times. appear in the mail (all of Spring's Resource implementations can be passed in here)
Add an attachment to the MimeMessage, taking the content from an {@code org.springframework.core.io.InputStreamResource}. <p>Note that the InputStream returned by the InputStreamSource implementation needs to be a <i>fresh one on each call</i>, as JavaMail will invoke {@code getInputStream()} multiple times. appear in the mail (all of Spring's Resource implementations can be passed in here)
Create an Activation Framework DataSource for the given InputStreamSource.
Create a new SmartMimeMessage.
Return the default encoding of this message, or {@code null} if none.
Return the default FileTypeMap of this message, or {@code null} if none.
Constructor for MailAuthenticationException.
Constructor for MailException.
Constructor for MailParseException.
Constructor for MailPreparationException.
Constructor for MailSendException.
Constructor for registration of failed messages, with the messages that failed as keys, and the thrown exceptions as values. <p>The messages should be the same that were originally passed to the invoked send method. exceptions as values
Return a Map with the failed messages as keys, and the thrown exceptions as values. <p>Note that a general mail server connection failure will not result in failed messages being returned here: A message will only be contained here if actually sending it was attempted but failed. <p>The messages will be the same that were originally passed to the invoked send method, that is, SimpleMailMessages in case of using the generic MailSender interface. <p>In case of sending MimeMessage instances via JavaMailSender, the messages will be of type MimeMessage. <p><b>NOTE:</b> This Map will not be available after serialization. Use {@link #getMessageExceptions()} in such a scenario, which will be available after serialization as well.
Return an array with thrown message exceptions. <p>Note that a general mail server connection failure will not result in failed messages being returned here: A message will only be contained here if actually sending it was attempted but failed. or an empty array if no failed messages
Copy constructor for creating a new {@code SimpleMailMessage} from the state of an existing {@code SimpleMailMessage} instance.
Copy the contents of this message to the given target message.
Create a new DelegatingTimerListener.
Create a new DelegatingWork. (may be a SchedulingAwareRunnable for extended support)
Return the wrapped Runnable implementation.
Create a new ScheduledTimerListener, with default one-time execution without delay.
Create a new ScheduledTimerListener, with default one-time execution with the given delay.
Create a new ScheduledTimerListener.
Set the Runnable to schedule as TimerListener.
Set the TimerListener to schedule.
Return the TimerListener to schedule.
Set the delay before starting the task for the first time, in milliseconds. Default is 0, immediately starting the task after successful scheduling. <p>If the "firstTime" property is specified, this property will be ignored. Specify one or the other, not both.
Set the period between repeated task executions, in milliseconds. <p>Default is -1, leading to one-time execution. In case of zero or a positive value, the task will be executed repeatedly, with the given interval inbetween executions. <p>Note that the semantics of the period value vary between fixed-rate and fixed-delay execution. <p><b>Note:</b> A period of 0 (for example as fixed delay) <i>is</i> supported, because the CommonJ specification defines this as a legal value. Hence a value of 0 will result in immediate re-execution after a job has finished (not in one-time execution like with {@code java.util.Timer}).
Set whether to schedule as fixed-rate execution, rather than fixed-delay execution. Default is "false", i.e. fixed delay. <p>See TimerManager javadoc for details on those execution modes.
Specify the CommonJ TimerManager to delegate to. <p>Note that the given TimerManager's lifecycle will be managed by this FactoryBean. <p>Alternatively (and typically), you can specify the JNDI name of the target TimerManager.
Set the JNDI name of the CommonJ TimerManager. <p>This can either be a fully qualified JNDI name, or the JNDI name relative to the current environment naming context if "resourceRef" is set to "true".
Specify whether the TimerManager obtained by this FactoryBean is a shared instance ("true") or an independent instance ("false"). The lifecycle of the former is supposed to be managed by the application server, while the lifecycle of the latter is up to the application. <p>Default is "false", i.e. managing an independent TimerManager instance. This is what the CommonJ specification suggests that application servers are supposed to offer via JNDI lookups, typically declared as a {@code resource-ref} of type {@code commonj.timers.TimerManager} in {@code web.xml}, with {@code res-sharing-scope} set to 'Unshareable'. <p>Switch this flag to "true" if you are obtaining a shared TimerManager, typically through specifying the JNDI location of a TimerManager that has been explicitly declared as 'Shareable'. Note that WebLogic's cluster-aware Job Scheduler is a shared TimerManager too. <p>The sole difference between this FactoryBean being in shared or non-shared mode is that it will only attempt to suspend / resume / stop the underlying TimerManager in case of an independent (non-shared) instance. This only affects the {@link org.springframework.context.Lifecycle} support as well as application context shutdown.
Register a list of ScheduledTimerListener objects with the TimerManager that this FactoryBean creates. Depending on each ScheduledTimerListener's settings, it will be registered via one of TimerManager's schedule methods.
Specify the CommonJ WorkManager to delegate to. <p>Alternatively, you can also specify the JNDI name of the target WorkManager.
Set the JNDI name of the CommonJ WorkManager. <p>This can either be a fully qualified JNDI name, or the JNDI name relative to the current environment naming context if "resourceRef" is set to "true".
Specify a CommonJ WorkListener to apply, if any. <p>This shared WorkListener instance will be passed on to the WorkManager by all {@link #execute} calls on this TaskExecutor.
Create an instance of the specified job class. <p>Can be overridden to post-process the job instance. and other info relating to the trigger firing can be obtained
Adapt the given job object to the Quartz Job interface. <p>The default implementation supports straight Quartz Jobs as well as Runnables, which get wrapped in a DelegatingJob.
Specify the trigger's name.
Specify the trigger's group.
Set the JobDetail that this trigger should be associated with.
Set the trigger's JobDataMap.
Return the trigger's JobDataMap.
Register objects in the JobDataMap via a given Map. <p>These objects will be available to this Trigger only, in contrast to objects in the JobDetail's data map. (for example Spring-managed beans)
Set a specific start time for the trigger. <p>Note that a dynamically computed {@link #setStartDelay} specification overrides a static timestamp set here.
Set the start delay in milliseconds. <p>The start delay is added to the current system time (when the bean starts) to control the start time of the trigger.
Specify the cron expression for this trigger.
Specify the time zone for this trigger's cron expression.
Associate a specific calendar with this cron trigger.
Specify the priority of this trigger.
Specify a misfire instruction for this trigger.
Set the misfire instruction via the name of the corresponding constant in the {@link org.quartz.CronTrigger} class. Default is {@code MISFIRE_INSTRUCTION_SMART_POLICY}.
Associate a textual description with this trigger.
Create a new DelegatingJob.
Specify the job's name.
Specify the job's group.
Specify the job's implementation class.
Set the job's JobDataMap.
Return the job's JobDataMap.
Register objects in the JobDataMap via a given Map. <p>These objects will be available to this Job only, in contrast to objects in the SchedulerContext. <p>Note: When using persistent Jobs whose JobDetail will be kept in the database, do not put Spring-managed beans or an ApplicationContext reference into the JobDataMap but rather into the SchedulerContext. (for example Spring-managed beans)
Specify the job's durability, i.e. whether it should remain stored in the job store even if no triggers point to it anymore.
Set the recovery flag for this job, i.e. whether or not the job should get re-executed if a 'recovery' or 'fail-over' situation is encountered.
Set a textual description for this job.
Set the key of an ApplicationContext reference to expose in the JobDataMap, for example "applicationContext". Default is none. Only applicable when running in a Spring ApplicationContext. <p>In case of a QuartzJobBean, the reference will be applied to the Job instance as bean property. An "applicationContext" attribute will correspond to a "setApplicationContext" method in that scenario. <p>Note that BeanFactory callback interfaces like ApplicationContextAware are not automatically applied to Quartz Job instances, because Quartz itself is responsible for the lifecycle of its Jobs. <p><b>Note: When using persistent job stores where JobDetail contents will be kept in the database, do not put an ApplicationContext reference into the JobDataMap but rather into the SchedulerContext.</b>
Constructor for JobMethodInvocationFailedException.
Set the name of the job. <p>Default is the bean name of this FactoryBean.
Set the group of the job. <p>Default is the default group of the Scheduler.
Specify whether or not multiple jobs should be run in a concurrent fashion. The behavior when one does not want concurrent jobs to be executed is realized through adding the {@code @PersistJobDataAfterExecution} and {@code @DisallowConcurrentExecution} markers. More information on stateful versus stateless jobs can be found <p>The default setting is to run jobs concurrently.
Set the name of the target bean in the Spring BeanFactory. <p>This is an alternative to specifying {@link #setTargetObject "targetObject"}, allowing for non-singleton beans to be invoked. Note that specified "targetObject" and {@link #setTargetClass "targetClass"} values will override the corresponding effect of this "targetBeanName" setting (i.e. statically pre-define the bean type or even the bean object).
Set the MethodInvoker to use.
Create a new ResourceLoaderClassLoadHelper for the given ResourceLoader.
Set whether any jobs defined on this SchedulerFactoryBean should overwrite existing job definitions. Default is "false", to not overwrite already registered jobs that have been read in from a persistent job store.
Set the location of a Quartz job definition XML file that follows the "job_scheduling_data_1_5" XSD or better. Can be specified to automatically register jobs that are defined in such a file, possibly in addition to jobs defined directly on this SchedulerFactoryBean.
Set the locations of Quartz job definition XML files that follow the "job_scheduling_data_1_5" XSD or better. Can be specified to automatically register jobs that are defined in such files, possibly in addition to jobs defined directly on this SchedulerFactoryBean.
Register a list of JobDetail objects with the Scheduler that this FactoryBean creates, to be referenced by Triggers. <p>This is not necessary when a Trigger determines the JobDetail itself: In this case, the JobDetail will be implicitly registered in combination with the Trigger.
Register a list of Quartz Calendar objects with the Scheduler that this FactoryBean creates, to be referenced by Triggers. objects as values
Register a list of Trigger objects with the Scheduler that this FactoryBean creates. <p>If the Trigger determines the corresponding JobDetail itself, the job will be automatically registered with the Scheduler. Else, the respective JobDetail needs to be registered via the "jobDetails" property of this FactoryBean.
Specify Quartz SchedulerListeners to be registered with the Scheduler.
Specify global Quartz JobListeners to be registered with the Scheduler. Such JobListeners will apply to all Jobs in the Scheduler.
Specify global Quartz TriggerListeners to be registered with the Scheduler. Such TriggerListeners will apply to all Triggers in the Scheduler.
Set the transaction manager to be used for registering jobs and triggers that are defined by this SchedulerFactoryBean. Default is none; setting this only makes sense when specifying a DataSource for the Scheduler.
Register jobs and triggers (within a transaction, if possible).
Add the given job to the Scheduler, if it doesn't already exist. Overwrites the job in any case if "overwriteExistingJobs" is set. {@code false} if it already existed before
Add the given trigger to the Scheduler, if it doesn't already exist. Overwrites the trigger in any case if "overwriteExistingJobs" is set. {@code false} if it already existed before
Register all specified listeners with the Scheduler.
Specify the Quartz {@link Scheduler} to operate on via its scheduler name in the Spring application context or also in the Quartz {@link org.quartz.impl.SchedulerRepository}. <p>Schedulers can be registered in the repository through custom bootstrapping, e.g. via the {@link org.quartz.impl.StdSchedulerFactory} or {@link org.quartz.impl.DirectSchedulerFactory} factory classes. However, in general, it's preferable to use Spring's {@link SchedulerFactoryBean} which includes the job/trigger/listener capabilities of this accessor as well. <p>If not specified, this accessor will try to retrieve a default {@link Scheduler} bean from the containing application context.
Specify the Quartz {@link Scheduler} instance to operate on. <p>If not specified, this accessor will try to retrieve a default {@link Scheduler} bean from the containing application context.
Return the ResourceLoader for the currently configured Quartz Scheduler, to be used by ResourceLoaderClassLoadHelper. <p>This instance will be set before initialization of the corresponding Scheduler, and reset immediately afterwards. It is thus only available during configuration.
Return the TaskExecutor for the currently configured Quartz Scheduler, to be used by LocalTaskExecutorThreadPool. <p>This instance will be set before initialization of the corresponding Scheduler, and reset immediately afterwards. It is thus only available during configuration.
Return the DataSource for the currently configured Quartz Scheduler, to be used by LocalDataSourceJobStore. <p>This instance will be set before initialization of the corresponding Scheduler, and reset immediately afterwards. It is thus only available during configuration.
Return the non-transactional DataSource for the currently configured Quartz Scheduler, to be used by LocalDataSourceJobStore. <p>This instance will be set before initialization of the corresponding Scheduler, and reset immediately afterwards. It is thus only available during configuration.
Set the Quartz SchedulerFactory implementation to use. <p>Default is {@link StdSchedulerFactory}, reading in the standard {@code quartz.properties} from {@code quartz.jar}. To use custom Quartz properties, specify the "configLocation" or "quartzProperties" bean property on this FactoryBean.
Set the name of the Scheduler to create via the SchedulerFactory. <p>If not specified, the bean name will be used as default scheduler name.
Set the location of the Quartz properties config file, for example as classpath resource "classpath:quartz.properties". <p>Note: Can be omitted when all necessary properties are specified locally via this bean, or when relying on Quartz' default configuration.
Set Quartz properties, like "org.quartz.threadPool.class". <p>Can be used to override values in a Quartz properties config file, or to specify all necessary properties locally.
Set the Spring TaskExecutor to use as Quartz backend. Exposed as thread pool through the Quartz SPI. <p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ WorkManager as Quartz backend, to avoid Quartz's manual thread creation. <p>By default, a Quartz SimpleThreadPool will be used, configured through the corresponding Quartz properties.
Set the default DataSource to be used by the Scheduler. If set, this will override corresponding settings in Quartz properties. <p>Note: If this is set, the Quartz settings should not define a job store "dataSource" to avoid meaningless double configuration. <p>A Spring-specific subclass of Quartz' JobStoreCMT will be used. It is therefore strongly recommended to perform all operations on the Scheduler within Spring-managed (or plain JTA) transactions. Else, database locking will not properly work and might even break (e.g. if trying to obtain a lock on Oracle without a transaction). <p>Supports both transactional and non-transactional DataSource access. With a non-XA DataSource and local Spring transactions, a single DataSource argument is sufficient. In case of an XA DataSource and global JTA transactions, SchedulerFactoryBean's "nonTransactionalDataSource" property should be set, passing in a non-XA DataSource that will not participate in global transactions.
Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>. <p>This is only necessary if the default DataSource is an XA DataSource that will always participate in transactions: A non-XA version of that DataSource should be specified as "nonTransactionalDataSource" in such a scenario. <p>This is not relevant with a local DataSource instance and Spring transactions. Specifying a single default DataSource as "dataSource" is sufficient there.
Register objects in the Scheduler context via a given Map. These objects will be available to any Job that runs in this Scheduler. <p>Note: When using persistent Jobs whose JobDetail will be kept in the database, do not put Spring-managed beans or an ApplicationContext reference into the JobDataMap but rather into the SchedulerContext. values (for example Spring-managed beans)
Set the key of an ApplicationContext reference to expose in the SchedulerContext, for example "applicationContext". Default is none. Only applicable when running in a Spring ApplicationContext. <p>Note: When using persistent Jobs whose JobDetail will be kept in the database, do not put an ApplicationContext reference into the JobDataMap but rather into the SchedulerContext. <p>In case of a QuartzJobBean, the reference will be applied to the Job instance as bean property. An "applicationContext" attribute will correspond to a "setApplicationContext" method in that scenario. <p>Note that BeanFactory callback interfaces like ApplicationContextAware are not automatically applied to Quartz Job instances, because Quartz itself is responsible for the lifecycle of its Jobs.
Set the Quartz JobFactory to use for this Scheduler. <p>Default is Spring's {@link AdaptableJobFactory}, which supports {@link java.lang.Runnable} objects as well as standard Quartz {@link org.quartz.Job} instances. Note that this default only applies to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting a custom JobFactory is not supported by Quartz). <p>Specify an instance of Spring's {@link SpringBeanJobFactory} here (typically as an inner bean definition) to automatically populate a job's bean properties from the specified job data map and scheduler context.
Set whether to automatically start the scheduler after initialization. <p>Default is "true"; set this to "false" to allow for manual startup.
Specify the phase in which this scheduler should be started and stopped. The startup order proceeds from lowest to highest, and the shutdown order is the reverse of that. By default this value is Integer.MAX_VALUE meaning that this scheduler starts as late as possible and stops as soon as possible.
Set the number of seconds to wait after initialization before starting the scheduler asynchronously. Default is 0, meaning immediate synchronous startup on initialization of this bean. <p>Setting this to 10 or 20 seconds makes sense if no jobs should be run before the entire application has started up.
Set whether to expose the Spring-managed {@link Scheduler} instance in the Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed Scheduler is usually exclusively intended for access within the Spring context. <p>Switch this flag to "true" in order to expose the Scheduler globally. This is not recommended unless you have an existing Spring application that relies on this behavior. Note that such global exposure was the accidental default in earlier Spring versions; this has been fixed as of Spring 2.5.6.
Set whether to wait for running jobs to complete on shutdown. <p>Default is "false". Switch this to "true" if you prefer fully completed jobs at the expense of a longer shutdown phase.
Load and/or apply Quartz properties to the given SchedulerFactory.
Create the Scheduler instance for the given factory and scheduler name. Called by {@link #afterPropertiesSet}. <p>The default implementation invokes SchedulerFactory's {@code getScheduler} method. Can be overridden for custom Scheduler creation.
Expose the specified context attributes and/or the current ApplicationContext in the Quartz SchedulerContext.
Start the Quartz Scheduler, respecting the "startupDelay" setting. the Scheduler asynchronously
Set whether to wait for running jobs to complete on shutdown. Default is "false".
Specify the interval between execution times of this trigger.
Specify the number of times this trigger is supposed to fire. <p>Default is to repeat indefinitely.
Set the misfire instruction via the name of the corresponding constant in the {@link org.quartz.SimpleTrigger} class. Default is {@code MISFIRE_INSTRUCTION_SMART_POLICY}.
Specify the unknown properties (not found in the bean) that should be ignored. <p>Default is {@code null}, indicating that all unknown properties should be ignored. Specify an empty array to throw an exception in case of any unknown properties, or a list of property names that should be ignored if there is no corresponding property found on the particular job class (all other unknown properties will still trigger an exception).
Return whether the given job object is eligible for having its bean properties populated. <p>The default implementation ignores {@link QuartzJobBean} instances, which will inject bean properties themselves.
Set the location of the FreeMarker config file. Alternatively, you can specify all setting locally.
Set properties that contain well-known FreeMarker keys which will be passed to FreeMarker's {@code Configuration.setSettings} method.
Set a Map that contains well-known FreeMarker objects which will be passed to FreeMarker's {@code Configuration.setAllSharedVariables()} method.
Set the default encoding for the FreeMarker configuration. If not specified, FreeMarker will use the platform file encoding. <p>Used for template rendering unless there is an explicit encoding specified for the rendering process (for example, on Spring's FreeMarkerView).
Set a List of {@code TemplateLoader}s that will be used to search for templates. For example, one or more custom loaders such as database loaders could be configured and injected here. <p>The {@link TemplateLoader TemplateLoaders} specified here will be registered <i>before</i> the default template loaders that this factory registers (such as loaders for specified "templateLoaderPaths" or any loaders registered in {@link #postProcessTemplateLoaders}).
Set a List of {@code TemplateLoader}s that will be used to search for templates. For example, one or more custom loaders such as database loaders can be configured. <p>The {@link TemplateLoader TemplateLoaders} specified here will be registered <i>after</i> the default template loaders that this factory registers (such as loaders for specified "templateLoaderPaths" or any loaders registered in {@link #postProcessTemplateLoaders}).
Set the Freemarker template loader path via a Spring resource location. See the "templateLoaderPaths" property for details on path handling.
Set multiple Freemarker template loader paths via Spring resource locations. <p>When populated via a String, standard URLs like "file:" and "classpath:" pseudo URLs are supported, as understood by ResourceEditor. Allows for relative paths when running in an ApplicationContext. <p>Will define a path for the default FreeMarker template loader. If a specified resource cannot be resolved to a {@code java.io.File}, a generic SpringTemplateLoader will be used, without modification detection. <p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path as file system resource in any case, turn off the "preferFileSystemAccess" flag. See the latter's javadoc for details. <p>If you wish to specify your own list of TemplateLoaders, do not set this property and instead use {@code setTemplateLoaders(List templateLoaders)}
Set the Spring ResourceLoader to use for loading FreeMarker template files. The default is DefaultResourceLoader. Will get overridden by the ApplicationContext if running in a context.
Return the Spring ResourceLoader to use for loading FreeMarker template files.
Set whether to prefer file system access for template loading. File system access enables hot detection of template changes. <p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve the specified "templateLoaderPath" as file system resource (which will work for expanded class path resources and ServletContext resources too). <p>Default is "true". Turn this off to always load via SpringTemplateLoader (i.e. as stream, without hot detection of template changes), which might be necessary if some of your templates reside in an expanded classes directory while others reside in jar files.
Return whether to prefer file system access for template loading.
Prepare the FreeMarker Configuration and return it.
Return a new Configuration object. Subclasses can override this for custom initialization (e.g. specifying a FreeMarker compatibility level which is a new feature in FreeMarker 2.3.21), or for using a mock object for testing. <p>Called by {@code createConfiguration()}.
Determine a FreeMarker TemplateLoader for the given path. <p>Default implementation creates either a FileTemplateLoader or a SpringTemplateLoader.
Return a TemplateLoader based on the given TemplateLoader list. If more than one TemplateLoader has been registered, a FreeMarker MultiTemplateLoader needs to be created.
Process the specified FreeMarker template with the given model and write the result to the given Writer. <p>When using this method to prepare a text for a mail to be sent with Spring's mail support, consider wrapping IO/TemplateException in MailPreparationException. as keys and model objects as values
Create a new SpringTemplateLoader.
Convert the given report data value to a {@code JRDataSource}. <p>In the default implementation, a {@code JRDataSource}, {@code java.util.Collection} or object array is detected. The latter are converted to {@code JRBeanCollectionDataSource} or {@code JRBeanArrayDataSource}, respectively.
Render the supplied {@code JasperPrint} instance using the supplied {@code JRAbstractExporter} instance and write the results to the supplied {@code Writer}. <p>Make sure that the {@code JRAbstractExporter} implementation you supply is capable of writing to a {@code Writer}.
Render the supplied {@code JasperPrint} instance using the supplied {@code JRAbstractExporter} instance and write the results to the supplied {@code OutputStream}. <p>Make sure that the {@code JRAbstractExporter} implementation you supply is capable of writing to a {@code OutputStream}.
Render a report in CSV format using the supplied report data. Writes the results to the supplied {@code Writer}. (converted accordingly), representing the report data to read fields from
Render a report in HTML format using the supplied report data. Writes the results to the supplied {@code Writer}. (converted accordingly), representing the report data to read fields from
Render a report in PDF format using the supplied report data. Writes the results to the supplied {@code OutputStream}. (converted accordingly), representing the report data to read fields from
Render a report in XLS format using the supplied report data. Writes the results to the supplied {@code OutputStream}. (converted accordingly), representing the report data to read fields from
Set the location of the Velocity config file. Alternatively, you can specify all properties locally.
Set Velocity properties, like "file.resource.loader.path". Can be used to override values in a Velocity config file, or to specify all necessary properties locally. <p>Note that the Velocity resource loader path also be set to any Spring resource location via the "resourceLoaderPath" property. Setting it here is just necessary when using a non-file-based resource loader.
Set Velocity properties as Map, to allow for non-String values like "ds.resource.loader.instance".
Set the Velocity resource loader path via a Spring resource location. Accepts multiple locations in Velocity's comma-separated path style. <p>When populated via a String, standard URLs like "file:" and "classpath:" pseudo URLs are supported, as understood by ResourceLoader. Allows for relative paths when running in an ApplicationContext. <p>Will define a path for the default Velocity resource loader with the name "file". If the specified resource cannot be resolved to a {@code java.io.File}, a generic SpringResourceLoader will be used under the name "spring", without modification detection. <p>Note that resource caching will be enabled in any case. With the file resource loader, the last-modified timestamp will be checked on access to detect changes. With SpringResourceLoader, the resource will be cached forever (for example for class path resources). <p>To specify a modification check interval for files, use Velocity's standard "file.resource.loader.modificationCheckInterval" property. By default, the file timestamp is checked on every access (which is surprisingly fast). Of course, this just applies when loading resources from the file system. <p>To enforce the use of SpringResourceLoader, i.e. to not resolve a path as file system resource in any case, turn off the "preferFileSystemAccess" flag. See the latter's javadoc for details.
Set the Spring ResourceLoader to use for loading Velocity template files. The default is DefaultResourceLoader. Will get overridden by the ApplicationContext if running in a context.
Return the Spring ResourceLoader to use for loading Velocity template files.
Set whether to prefer file system access for template loading. File system access enables hot detection of template changes. <p>If this is enabled, VelocityEngineFactory will try to resolve the specified "resourceLoaderPath" as file system resource (which will work for expanded class path resources and ServletContext resources too). <p>Default is "true". Turn this off to always load via SpringResourceLoader (i.e. as stream, without hot detection of template changes), which might be necessary if some of your templates reside in an expanded classes directory while others reside in jar files.
Set whether Velocity should log via Commons Logging, i.e. whether Velocity's log system should be set to {@link CommonsLogLogChute}. Default is "true".
Prepare the VelocityEngine instance and return it.
Return a new VelocityEngine. Subclasses can override this for custom initialization, or for using a mock object for testing. <p>Called by {@code createVelocityEngine()}.
Initialize a Velocity resource loader for the given VelocityEngine: either a standard Velocity FileResourceLoader or a SpringResourceLoader. <p>Called by {@code createVelocityEngine()}.
Initialize a SpringResourceLoader for the given VelocityEngine. <p>Called by {@code initVelocityResourceLoader}.
To be implemented by subclasses that want to to perform custom post-processing of the VelocityEngine after this FactoryBean performed its default configuration (but before VelocityEngine.init). <p>Called by {@code createVelocityEngine()}.
Merge the specified Velocity template with the given model and write the result to the given Writer.
Merge the specified Velocity template with the given model into a String. <p>When using this method to prepare a text for a mail to be sent with Spring's mail support, consider wrapping VelocityException in MailPreparationException.
The only purpose of this method is to invoke a particular method on the service so that the call stack is different.
SPRING PATCH: PREFER THREAD CONTEXT CLASSLOADER FOR APPLICATION CLASSES
Returns true if the owner of the field or method designated by this handle is an interface.
Appends the descriptor corresponding to this Java type to the given string builder.
Appends the descriptor of the given class to the given string builder.
Construct a new {@code AbstractAliasAwareAnnotationAttributeExtractor}. of the supplied type; may be {@code null} if unknown
Build an adapted {@link AnnotatedElement} for the given annotations, typically for use with other methods on {@link AnnotatedElementUtils}.
Get the fully qualified class names of all meta-annotation types <em>present</em> on the annotation (of the specified {@code annotationType}) on the supplied {@link AnnotatedElement}. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. or {@code null} if not found
Get the fully qualified class names of all meta-annotation types <em>present</em> on the annotation (of the specified {@code annotationName}) on the supplied {@link AnnotatedElement}. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. type on which to find meta-annotations or {@code null} if not found
Determine if the supplied {@link AnnotatedElement} is annotated with a <em>composed annotation</em> that is meta-annotated with an annotation of the specified {@code annotationType}. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}.
Determine if the supplied {@link AnnotatedElement} is annotated with a <em>composed annotation</em> that is meta-annotated with an annotation of the specified {@code annotationName}. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. meta-annotation type to find
Determine if an annotation of the specified {@code annotationType} is <em>present</em> on the supplied {@link AnnotatedElement} or within the annotation hierarchy <em>above</em> the specified element. <p>If this method returns {@code true}, then {@link #getMergedAnnotationAttributes} will return a non-null value. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}.
Determine if an annotation of the specified {@code annotationName} is <em>present</em> on the supplied {@link AnnotatedElement} or within the annotation hierarchy <em>above</em> the specified element. <p>If this method returns {@code true}, then {@link #getMergedAnnotationAttributes} will return a non-null value. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}.
Get the first annotation of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element} and merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within the annotation hierarchy. <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, String)}.
Get the first annotation of the specified {@code annotationName} within the annotation hierarchy <em>above</em> the supplied {@code element} and merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within the annotation hierarchy. <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)}, supplying {@code false} for {@code classValuesAsString} and {@code nestedAnnotationsAsMap}.
Get the first annotation of the specified {@code annotationName} within the annotation hierarchy <em>above</em> the supplied {@code element} and merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy. <p>Attributes from lower levels in the annotation hierarchy override attributes of the same name from higher levels, and {@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within the annotation hierarchy. <p>In contrast to {@link #getAllAnnotationAttributes}, the search algorithm used by this method will stop searching the annotation hierarchy once the first annotation of the specified {@code annotationName} has been found. As a consequence, additional annotations of the specified {@code annotationName} will be ignored. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. preserve them as Class references into {@code AnnotationAttributes} maps or to preserve them as Annotation instances
Get the first annotation of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element}, merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy, and synthesize the result back into an annotation of the specified {@code annotationType}. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within the annotation hierarchy. <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, Class)} and {@link AnnotationUtils#synthesizeAnnotation(Map, Class, AnnotatedElement)}.
Get <strong>all</strong> annotations of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element}; and for each annotation found, merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy and synthesize the results back into an annotation of the specified {@code annotationType}. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within annotation hierarchies. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. set if none were found
Get all <em>repeatable annotations</em> of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element}; and for each annotation found, merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy and synthesize the results back into an annotation of the specified {@code annotationType}. <p>The container type that holds the repeatable annotations will be looked up via {@link java.lang.annotation.Repeatable}. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within annotation hierarchies. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. set if none were found is {@code null}, or if the container type cannot be resolved
Get all <em>repeatable annotations</em> of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element}; and for each annotation found, merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy and synthesize the results back into an annotation of the specified {@code annotationType}. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within annotation hierarchies. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. may be {@code null} if the container type should be looked up via {@link java.lang.annotation.Repeatable} set if none were found is {@code null}, or if the container type cannot be resolved is not a valid container annotation for the supplied {@code annotationType}
Get the annotation attributes of <strong>all</strong> annotations of the specified {@code annotationName} in the annotation hierarchy above the supplied {@link AnnotatedElement} and store the results in a {@link MultiValueMap}. <p>Note: in contrast to {@link #getMergedAnnotationAttributes(AnnotatedElement, String)}, this method does <em>not</em> support attribute overrides. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. attributes from all annotations found, or {@code null} if not found
Get the annotation attributes of <strong>all</strong> annotations of the specified {@code annotationName} in the annotation hierarchy above the supplied {@link AnnotatedElement} and store the results in a {@link MultiValueMap}. <p>Note: in contrast to {@link #getMergedAnnotationAttributes(AnnotatedElement, String)}, this method does <em>not</em> support attribute overrides. <p>This method follows <em>get semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. preserve them as Class references {@code AnnotationAttributes} maps or to preserve them as Annotation instances attributes from all annotations found, or {@code null} if not found
Determine if an annotation of the specified {@code annotationType} is <em>available</em> on the supplied {@link AnnotatedElement} or within the annotation hierarchy <em>above</em> the specified element. <p>If this method returns {@code true}, then {@link #findMergedAnnotationAttributes} will return a non-null value. <p>This method follows <em>find semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}.
Find the first annotation of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element} and merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy. <p>Attributes from lower levels in the annotation hierarchy override attributes of the same name from higher levels, and {@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within the annotation hierarchy. <p>In contrast to {@link #getAllAnnotationAttributes}, the search algorithm used by this method will stop searching the annotation hierarchy once the first annotation of the specified {@code annotationType} has been found. As a consequence, additional annotations of the specified {@code annotationType} will be ignored. <p>This method follows <em>find semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. Strings or to preserve them as Class references instances into {@code AnnotationAttributes} maps or to preserve them as Annotation instances not found
Find the first annotation of the specified {@code annotationName} within the annotation hierarchy <em>above</em> the supplied {@code element} and merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy. <p>Attributes from lower levels in the annotation hierarchy override attributes of the same name from higher levels, and {@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within the annotation hierarchy. <p>In contrast to {@link #getAllAnnotationAttributes}, the search algorithm used by this method will stop searching the annotation hierarchy once the first annotation of the specified {@code annotationName} has been found. As a consequence, additional annotations of the specified {@code annotationName} will be ignored. <p>This method follows <em>find semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. preserve them as Class references {@code AnnotationAttributes} maps or to preserve them as Annotation instances
Find the first annotation of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element}, merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy, and synthesize the result back into an annotation of the specified {@code annotationType}. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within the annotation hierarchy. <p>This method follows <em>find semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}.
Find <strong>all</strong> annotations of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element}; and for each annotation found, merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy and synthesize the results back into an annotation of the specified {@code annotationType}. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within annotation hierarchies. <p>This method follows <em>find semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. set if none were found
Find all <em>repeatable annotations</em> of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element}; and for each annotation found, merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy and synthesize the results back into an annotation of the specified {@code annotationType}. <p>The container type that holds the repeatable annotations will be looked up via {@link java.lang.annotation.Repeatable}. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within annotation hierarchies. <p>This method follows <em>find semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. set if none were found is {@code null}, or if the container type cannot be resolved
Find all <em>repeatable annotations</em> of the specified {@code annotationType} within the annotation hierarchy <em>above</em> the supplied {@code element}; and for each annotation found, merge that annotation's attributes with <em>matching</em> attributes from annotations in lower levels of the annotation hierarchy and synthesize the results back into an annotation of the specified {@code annotationType}. <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a single annotation and within annotation hierarchies. <p>This method follows <em>find semantics</em> as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. may be {@code null} if the container type should be looked up via {@link java.lang.annotation.Repeatable} set if none were found is {@code null}, or if the container type cannot be resolved is not a valid container annotation for the supplied {@code annotationType}
Search for annotations of the specified {@code annotationName} or {@code annotationType} on the specified {@code element}, following <em>get semantics</em>. type to find (as an alternative to {@code annotationType})
Search for annotations of the specified {@code annotationName} or {@code annotationType} on the specified {@code element}, following <em>get semantics</em>. type to find (as an alternative to {@code annotationType}) annotations, or {@code null} if the annotation is not repeatable
Perform the search algorithm for the {@link #searchWithGetSemantics} method, avoiding endless recursion by tracking which annotated elements have already been <em>visited</em>. <p>The {@code metaDepth} parameter is explained in the {@link Processor#process process()} method of the {@link Processor} API. type to find (as an alternative to {@code annotationType}) annotations, or {@code null} if the annotation is not repeatable
This method is invoked by {@link #searchWithGetSemantics(AnnotatedElement, Class, String, Processor, Set, int)} to perform the actual search within the supplied list of annotations. <p>This method should be invoked first with locally declared annotations and then subsequently with inherited annotations, thereby allowing local annotations to take precedence over inherited annotations. <p>The {@code metaDepth} parameter is explained in the {@link Processor#process process()} method of the {@link Processor} API. annotations, used for contextual logging; may be {@code null} if unknown type to find (as an alternative to {@code annotationType}) annotations, or {@code null} if the annotation is not repeatable
Search for annotations of the specified {@code annotationName} or {@code annotationType} on the specified {@code element}, following <em>find semantics</em>. type to find (as an alternative to {@code annotationType})
Search for annotations of the specified {@code annotationName} or {@code annotationType} on the specified {@code element}, following <em>find semantics</em>. type to find (as an alternative to {@code annotationType}) annotations, or {@code null} if the annotation is not repeatable
Perform the search algorithm for the {@link #searchWithFindSemantics} method, avoiding endless recursion by tracking which annotated elements have already been <em>visited</em>. <p>The {@code metaDepth} parameter is explained in the {@link Processor#process process()} method of the {@link Processor} API. type to find (as an alternative to {@code annotationType}) annotations, or {@code null} if the annotation is not repeatable
Resolve the container type for the supplied repeatable {@code annotationType}. <p>Delegates to {@link AnnotationUtils#resolveContainerAnnotationType(Class)}.
Validate that the supplied {@code containerType} is a proper container annotation for the supplied repeatable {@code annotationType} (i.e., that it declares a {@code value} attribute that holds an array of the {@code annotationType}). is not a valid container annotation for the supplied {@code annotationType}
Create a new, empty {@link AnnotationAttributes} instance.
Create a new, empty {@link AnnotationAttributes} instance for the specified {@code annotationType}. {@code AnnotationAttributes} instance; never {@code null}
Create a new, empty {@link AnnotationAttributes} instance with the given initial capacity to optimize performance.
Create a new {@link AnnotationAttributes} instance, wrapping the provided map and all its <em>key-value</em> pairs. pairs
Get the type of annotation represented by this {@code AnnotationAttributes} instance.
Get the value stored under the specified {@code attributeName} as a string. {@code null} or empty if it is not of the expected type
Get the value stored under the specified {@code attributeName} as a string, taking into account alias semantics defined via {@link AliasFor @AliasFor}. <p>If there is no value stored under the specified {@code attributeName} but the attribute has an alias declared via {@code @AliasFor}, the value of the alias will be returned. {@code null} or empty {@code AnnotationAttributes} instance; never {@code null} this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement}); or {@code null} if unknown not exist or are not of type {@code String} alias are both present with different non-empty values
Get the value stored under the specified {@code attributeName} as an array of strings. <p>If the value stored under the specified {@code attributeName} is a string, it will be wrapped in a single-element array before returning it. {@code null} or empty if it is not of the expected type
Get the value stored under the specified {@code attributeName} as an array of strings, taking into account alias semantics defined via {@link AliasFor @AliasFor}. <p>If there is no value stored under the specified {@code attributeName} but the attribute has an alias declared via {@code @AliasFor}, the value of the alias will be returned. {@code null} or empty {@code AnnotationAttributes} instance; never {@code null} this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement}); or {@code null} if unknown not exist or are not of type {@code String[]} alias are both present with different non-empty values
Get the value stored under the specified {@code attributeName} as a boolean. {@code null} or empty if it is not of the expected type
Get the value stored under the specified {@code attributeName} as an array of classes. <p>If the value stored under the specified {@code attributeName} is a class, it will be wrapped in a single-element array before returning it. {@code null} or empty if it is not of the expected type
Get the value stored under the specified {@code attributeName} as an array of classes, taking into account alias semantics defined via {@link AliasFor @AliasFor}. <p>If there is no value stored under the specified {@code attributeName} but the attribute has an alias declared via {@code @AliasFor}, the value of the alias will be returned. {@code null} or empty {@code AnnotationAttributes} instance; never {@code null} this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement}); or {@code null} if unknown not exist or are not of type {@code Class[]} alias are both present with different non-empty values
Get the {@link AnnotationAttributes} stored under the specified {@code attributeName}. <p>Note: if you expect an actual annotation, invoke {@link #getAnnotation(String, Class)} instead. {@code null} or empty if it is not of the expected type
Get the annotation of type {@code annotationType} stored under the specified {@code attributeName}. {@code null} or empty if it is not of the expected type
Get the array of {@link AnnotationAttributes} stored under the specified {@code attributeName}. <p>If the value stored under the specified {@code attributeName} is an instance of {@code AnnotationAttributes}, it will be wrapped in a single-element array before returning it. <p>Note: if you expect an actual array of annotations, invoke {@link #getAnnotationArray(String, Class)} instead. {@code null} or empty if it is not of the expected type
Get the value stored under the specified {@code attributeName} as an object of the {@code expectedType}, taking into account alias semantics defined via {@link AliasFor @AliasFor}. <p>If there is no value stored under the specified {@code attributeName} but the attribute has an alias declared via {@code @AliasFor}, the value of the alias will be returned. {@code null} or empty {@code AnnotationAttributes} instance; never {@code null} this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement}); or {@code null} if unknown not exist or are not of the {@code expectedType} alias are both present with different non-empty values
Return an {@link AnnotationAttributes} instance based on the given map. <p>If the map is already an {@code AnnotationAttributes} instance, it will be cast and returned immediately without creating a new instance. to the {@link #AnnotationAttributes(Map)} constructor.
This implementation checks for {@link Order @Order} or {@link javax.annotation.Priority @Priority} on various kinds of elements, in addition to the {@link org.springframework.core.Ordered} check in the superclass.
This implementation retrieves an @{@link javax.annotation.Priority} value, allowing for additional semantics over the regular @{@link Order} annotation: typically, selecting one object over another in case of multiple matches but only one object to be returned.
Sort the given List with a default AnnotationAwareOrderComparator. <p>Optimized to skip sorting for lists with size 0 or 1, in order to avoid unnecessary array extraction.
Sort the given array with a default AnnotationAwareOrderComparator. <p>Optimized to skip sorting for lists with size 0 or 1, in order to avoid unnecessary array extraction.
Sort the given array or List with a default AnnotationAwareOrderComparator, if necessary. Simply skips sorting when given any other value. <p>Optimized to skip sorting for lists with size 0 or 1, in order to avoid unnecessary array extraction.
Construct a new {@code AnnotationConfigurationException} with the supplied message.
Construct a new {@code AnnotationConfigurationException} with the supplied message and cause.
Get a single {@link Annotation} of {@code annotationType} from the supplied {@link AnnotatedElement}, where the annotation is either <em>present</em> or <em>meta-present</em> on the {@code AnnotatedElement}. <p>Note that this method supports only a single level of meta-annotations. For support for arbitrary levels of meta-annotations, use {@link #findAnnotation(AnnotatedElement, Class)} instead.
Get a single {@link Annotation} of {@code annotationType} from the supplied {@link Method}, where the annotation is either <em>present</em> or <em>meta-present</em> on the method. <p>Correctly handles bridge {@link Method Methods} generated by the compiler. <p>Note that this method supports only a single level of meta-annotations. For support for arbitrary levels of meta-annotations, use {@link #findAnnotation(Method, Class)} instead.
Get all {@link Annotation Annotations} that are <em>present</em> on the supplied {@link AnnotatedElement}. <p>Meta-annotations will <em>not</em> be searched. resolvable (e.g. because nested Class values in annotation attributes failed to resolve at runtime)
Get all {@link Annotation Annotations} that are <em>present</em> on the supplied {@link Method}. <p>Correctly handles bridge {@link Method Methods} generated by the compiler. <p>Meta-annotations will <em>not</em> be searched. resolvable (e.g. because nested Class values in annotation attributes failed to resolve at runtime)
Get the <em>repeatable</em> {@linkplain Annotation annotations} of {@code annotationType} from the supplied {@link AnnotatedElement}, where such annotations are either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em> on the element. <p>This method mimics the functionality of Java 8's {@link java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)} with support for automatic detection of a <em>container annotation</em> declared via @{@link java.lang.annotation.Repeatable} (when running on Java 8 or higher) and with additional support for meta-annotations. <p>Handles both single annotations and annotations nested within a <em>container annotation</em>. <p>Correctly handles <em>bridge methods</em> generated by the compiler if the supplied element is a {@link Method}. <p>Meta-annotations will be searched if the annotation is not <em>present</em> on the supplied element.
Get the <em>repeatable</em> {@linkplain Annotation annotations} of {@code annotationType} from the supplied {@link AnnotatedElement}, where such annotations are either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em> on the element. <p>This method mimics the functionality of Java 8's {@link java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)} with additional support for meta-annotations. <p>Handles both single annotations and annotations nested within a <em>container annotation</em>. <p>Correctly handles <em>bridge methods</em> generated by the compiler if the supplied element is a {@link Method}. <p>Meta-annotations will be searched if the annotation is not <em>present</em> on the supplied element. the annotations; may be {@code null} if a container is not supported or if it should be looked up via @{@link java.lang.annotation.Repeatable} when running on Java 8 or higher
Get the declared <em>repeatable</em> {@linkplain Annotation annotations} of {@code annotationType} from the supplied {@link AnnotatedElement}, where such annotations are either <em>directly present</em>, <em>indirectly present</em>, or <em>meta-present</em> on the element. <p>This method mimics the functionality of Java 8's {@link java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType(Class)} with support for automatic detection of a <em>container annotation</em> declared via @{@link java.lang.annotation.Repeatable} (when running on Java 8 or higher) and with additional support for meta-annotations. <p>Handles both single annotations and annotations nested within a <em>container annotation</em>. <p>Correctly handles <em>bridge methods</em> generated by the compiler if the supplied element is a {@link Method}. <p>Meta-annotations will be searched if the annotation is not <em>present</em> on the supplied element.
Get the declared <em>repeatable</em> {@linkplain Annotation annotations} of {@code annotationType} from the supplied {@link AnnotatedElement}, where such annotations are either <em>directly present</em>, <em>indirectly present</em>, or <em>meta-present</em> on the element. <p>This method mimics the functionality of Java 8's {@link java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType(Class)} with additional support for meta-annotations. <p>Handles both single annotations and annotations nested within a <em>container annotation</em>. <p>Correctly handles <em>bridge methods</em> generated by the compiler if the supplied element is a {@link Method}. <p>Meta-annotations will be searched if the annotation is not <em>present</em> on the supplied element. the annotations; may be {@code null} if a container is not supported or if it should be looked up via @{@link java.lang.annotation.Repeatable} when running on Java 8 or higher
Perform the actual work for {@link #getRepeatableAnnotations(AnnotatedElement, Class, Class)} and {@link #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class)}. <p>Correctly handles <em>bridge methods</em> generated by the compiler if the supplied element is a {@link Method}. <p>Meta-annotations will be searched if the annotation is not <em>present</em> on the supplied element. the annotations; may be {@code null} if a container is not supported or if it should be looked up via @{@link java.lang.annotation.Repeatable} when running on Java 8 or higher directly or indirectly present) should be considered
Find a single {@link Annotation} of {@code annotationType} on the supplied {@link AnnotatedElement}. <p>Meta-annotations will be searched if the annotation is not <em>directly present</em> on the supplied element. <p><strong>Warning</strong>: this method operates generically on annotated elements. In other words, this method does not execute specialized search algorithms for classes or methods. If you require the more specific semantics of {@link #findAnnotation(Class, Class)} or {@link #findAnnotation(Method, Class)}, invoke one of those methods instead.
Find a single {@link Annotation} of {@code annotationType} on the supplied {@link Class}, traversing its interfaces, annotations, and superclasses if the annotation is not <em>directly present</em> on the given class itself. <p>This method explicitly handles class-level annotations which are not declared as {@link java.lang.annotation.Inherited inherited} <em>as well as meta-annotations and annotations on interfaces</em>. <p>The algorithm operates as follows: <ol> <li>Search for the annotation on the given class and return it if found. <li>Recursively search through all annotations that the given class declares. <li>Recursively search through all interfaces that the given class declares. <li>Recursively search through the superclass hierarchy of the given class. </ol> <p>Note: in this context, the term <em>recursively</em> means that the search process continues by returning to step #1 with the current interface, annotation, or superclass as the class to look for annotations on.
Find the first {@link Class} in the inheritance hierarchy of the specified {@code clazz} (including the specified {@code clazz} itself) on which an annotation of the specified {@code annotationType} is <em>directly present</em>. <p>If the supplied {@code clazz} is an interface, only the interface itself will be checked; the inheritance hierarchy for interfaces will not be traversed. <p>Meta-annotations will <em>not</em> be searched. <p>The standard {@link Class} API does not provide a mechanism for determining which class in an inheritance hierarchy actually declares an {@link Annotation}, so we need to handle this explicitly. declares an annotation of the specified {@code annotationType}, or {@code null} if not found
Find the first {@link Class} in the inheritance hierarchy of the specified {@code clazz} (including the specified {@code clazz} itself) on which at least one of the specified {@code annotationTypes} is <em>directly present</em>. <p>If the supplied {@code clazz} is an interface, only the interface itself will be checked; the inheritance hierarchy for interfaces will not be traversed. <p>Meta-annotations will <em>not</em> be searched. <p>The standard {@link Class} API does not provide a mechanism for determining which class in an inheritance hierarchy actually declares one of several candidate {@linkplain Annotation annotations}, so we need to handle this explicitly. declares an annotation of at least one of the specified {@code annotationTypes}, or {@code null} if not found
Determine whether an annotation of the specified {@code annotationType} is declared locally (i.e., <em>directly present</em>) on the supplied {@code clazz}. <p>The supplied {@link Class} may represent any type. <p>Meta-annotations will <em>not</em> be searched. <p>Note: This method does <strong>not</strong> determine if the annotation is {@linkplain java.lang.annotation.Inherited inherited}. For greater clarity regarding inherited annotations, consider using {@link #isAnnotationInherited(Class, Class)} instead. is <em>directly present</em>
Determine whether an annotation of the specified {@code annotationType} is <em>present</em> on the supplied {@code clazz} and is {@linkplain java.lang.annotation.Inherited inherited} (i.e., not <em>directly present</em>). <p>Meta-annotations will <em>not</em> be searched. <p>If the supplied {@code clazz} is an interface, only the interface itself will be checked. In accordance with standard meta-annotation semantics in Java, the inheritance hierarchy for interfaces will not be traversed. See the {@linkplain java.lang.annotation.Inherited Javadoc} for the {@code @Inherited} meta-annotation for further details regarding annotation inheritance. is <em>present</em> and <em>inherited</em>
Determine if an annotation of type {@code metaAnnotationType} is <em>meta-present</em> on the supplied {@code annotationType}.
Determine if the supplied {@link Annotation} is defined in the core JDK {@code java.lang.annotation} package.
Determine if the {@link Annotation} with the supplied name is defined in the core JDK {@code java.lang.annotation} package.
Retrieve the given annotation's attributes as a {@link Map}, preserving all attribute types. <p>Equivalent to calling {@link #getAnnotationAttributes(Annotation, boolean, boolean)} with the {@code classValuesAsString} and {@code nestedAnnotationsAsMap} parameters set to {@code false}. <p>Note: This method actually returns an {@link AnnotationAttributes} instance. However, the {@code Map} signature has been preserved for binary compatibility. corresponding attribute values as values (never {@code null})
Retrieve the given annotation's attributes as a {@link Map}. <p>Equivalent to calling {@link #getAnnotationAttributes(Annotation, boolean, boolean)} with the {@code nestedAnnotationsAsMap} parameter set to {@code false}. <p>Note: This method actually returns an {@link AnnotationAttributes} instance. However, the {@code Map} signature has been preserved for binary compatibility. compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as Class references corresponding attribute values as values (never {@code null})
Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map. <p>This method provides fully recursive annotation reading capabilities on par with the reflection-based {@link org.springframework.core.type.StandardAnnotationMetadata}. compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as Class references {@link AnnotationAttributes} maps (for compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as {@code Annotation} instances and corresponding attribute values as values (never {@code null})
Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map. <p>Equivalent to calling {@link #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)} with the {@code classValuesAsString} and {@code nestedAnnotationsAsMap} parameters set to {@code false}. may be {@code null} if unknown and corresponding attribute values as values (never {@code null})
Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map. <p>This method provides fully recursive annotation reading capabilities on par with the reflection-based {@link org.springframework.core.type.StandardAnnotationMetadata}. may be {@code null} if unknown compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as Class references {@link AnnotationAttributes} maps (for compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as {@code Annotation} instances and corresponding attribute values as values (never {@code null})
Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map. <p>This method provides fully recursive annotation reading capabilities on par with the reflection-based {@link org.springframework.core.type.StandardAnnotationMetadata}. <p><strong>NOTE</strong>: This variant of {@code getAnnotationAttributes()} is only intended for use within the framework. The following special rules apply: <ol> <li>Default values will be replaced with default value placeholders.</li> <li>The resulting, merged annotation attributes should eventually be {@linkplain #postProcessAnnotationAttributes post-processed} in order to ensure that placeholders have been replaced by actual default values and in order to enforce {@code @AliasFor} semantics.</li> </ol> may be {@code null} if unknown compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as Class references {@link AnnotationAttributes} maps (for compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as {@code Annotation} instances and corresponding attribute values as values (never {@code null})
Adapt the given value according to the given class and nested annotation settings. <p>Nested annotations will be {@linkplain #synthesizeAnnotation(Annotation, AnnotatedElement) synthesized}. logging; may be {@code null} if unknown compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as Class references {@link AnnotationAttributes} maps (for compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as {@code Annotation} instances
Post-process the supplied {@link AnnotationAttributes}. <p>Specifically, this method enforces <em>attribute alias</em> semantics for annotation attributes that are annotated with {@link AliasFor @AliasFor} and replaces default value placeholders with their original default values. annotation hierarchy from which the supplied attributes were created; may be {@code null} if unknown compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as Class references {@link AnnotationAttributes} maps (for compatibility with {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as {@code Annotation} instances
Retrieve the <em>value</em> of the {@code value} attribute of a single-element Annotation, given an annotation instance.
Retrieve the <em>value</em> of a named attribute, given an annotation instance.
Retrieve the <em>default value</em> of the {@code value} attribute of a single-element Annotation, given an annotation instance.
Retrieve the <em>default value</em> of a named attribute, given an annotation instance.
Retrieve the <em>default value</em> of the {@code value} attribute of a single-element Annotation, given the {@link Class annotation type}.
Retrieve the <em>default value</em> of a named attribute, given the {@link Class annotation type}.
<em>Synthesize</em> an annotation from the supplied {@code annotation} by wrapping it in a dynamic proxy that transparently enforces <em>attribute alias</em> semantics for annotation attributes that are annotated with {@link AliasFor @AliasFor}. <em>synthesizable</em>; {@code null} if the supplied annotation is {@code null}; otherwise, the supplied annotation unmodified {@code @AliasFor} is detected
<em>Synthesize</em> an annotation from its default attributes values. <p>This method simply delegates to {@link #synthesizeAnnotation(Map, Class, AnnotatedElement)}, supplying an empty map for the source attribute values and {@code null} for the {@link AnnotatedElement}. {@code @AliasFor} is detected
<em>Synthesize</em> an array of annotations from the supplied array of {@code annotations} by creating a new array of the same size and type and populating it with {@linkplain #synthesizeAnnotation(Annotation) synthesized} versions of the annotations from the input array. array of annotations; may be {@code null} if unknown the supplied array is {@code null} {@code @AliasFor} is detected
Get a map of all attribute aliases declared via {@code @AliasFor} in the supplied annotation type. <p>The map is keyed by attribute name with each value representing a list of names of aliased attributes. <p>For <em>explicit</em> alias pairs such as x and y (i.e., where x is an {@code @AliasFor("y")} and y is an {@code @AliasFor("x")}, there will be two entries in the map: {@code x -> (y)} and {@code y -> (x)}. <p>For <em>implicit</em> aliases (i.e., attributes that are declared as attribute overrides for the same attribute in the same meta-annotation), there will be n entries in the map. For example, if x, y, and z are implicit aliases, the map will contain the following entries: {@code x -> (y, z)}, {@code y -> (x, z)}, {@code z -> (x, y)}. <p>An empty return value implies that the annotation does not declare any attribute aliases.
Check whether we can expose our {@link SynthesizedAnnotation} marker for the given annotation type.
Get the names of the aliased attributes configured via {@link AliasFor @AliasFor} for the supplied annotation {@code attribute}. potentially <em>empty</em>) {@code null} or not from an annotation {@code @AliasFor} is detected
Get the name of the overridden attribute configured via {@link AliasFor @AliasFor} for the supplied annotation {@code attribute}. never {@code null} overridden attribute is allowed to be declared found or not applicable for the specified meta-annotation type {@code null} or not from an annotation, or if the supplied meta-annotation type is {@code null} or {@link Annotation} {@code @AliasFor} is detected
Get all methods declared in the supplied {@code annotationType} that match Java's requirements for annotation <em>attributes</em>. <p>All methods in the returned list will be {@linkplain ReflectionUtils#makeAccessible(Method) made accessible}. never {@code null} type (never {@code null}, though potentially <em>empty</em>)
Get the annotation with the supplied {@code annotationName} on the supplied {@code element}. type to find
Determine if the supplied {@code method} is an annotation attribute method.
Determine if the supplied method is an "annotationType" method.
<p>If the supplied throwable is an {@link AnnotationConfigurationException}, it will be cast to an {@code AnnotationConfigurationException} and thrown, allowing it to propagate to the caller. <p>Otherwise, this method does nothing.
Handle the supplied annotation introspection exception. <p>If the supplied exception is an {@link AnnotationConfigurationException}, it will simply be thrown, allowing it to propagate to the caller, and nothing will be logged. <p>Otherwise, this method logs an introspection failure (in particular {@code TypeNotPresentExceptions}) before moving on, assuming nested Class values were not resolvable within annotation attributes and thereby effectively pretending there were no annotations on the specified element.
Create an {@code AliasDescriptor} <em>from</em> the declaration of {@code @AliasFor} on the supplied annotation attribute and validate the configuration of {@code @AliasFor}. {@code @AliasFor} is not annotated with {@code @AliasFor}
Validate this descriptor against the supplied descriptor. <p>This method only validates the configuration of default values for the two descriptors, since other aspects of the descriptors are validated when they are created.
Determine if this descriptor represents an explicit override for an attribute in the supplied {@code metaAnnotationType}.
Determine if this descriptor and the supplied descriptor both effectively represent aliases for the same attribute in the same target annotation, either explicitly or implicitly. <p>This method searches the attribute override hierarchy, beginning with this descriptor, in order to detect implicit and transitively implicit aliases. effectively alias the same annotation attribute
Get the name of the aliased attribute configured via the supplied {@link AliasFor @AliasFor} annotation on the supplied {@code attribute}, or the original attribute if no aliased one specified (indicating that the reference goes to a same-named attribute on a meta-annotation). <p>This method returns the value of either the {@code attribute} or {@code value} attribute of {@code @AliasFor}, ensuring that only one of the attributes has been declared while simultaneously ensuring that at least one of the attributes has been declared. the aliased attribute name {@code @AliasFor} is detected
Construct a new {@code DefaultAnnotationAttributeExtractor}. annotation; may be {@code null} if unknown
Construct a new {@code MapAnnotationAttributeExtractor}. <p>The supplied map must contain a key-value pair for every attribute defined in the supplied {@code annotationType} that is not aliased or does not have a default value. of the supplied type; may be {@code null} if unknown
Return the order on the specified {@code type}. <p>Take care of {@link Order @Order} and {@code @javax.annotation.Priority}.
Return the order on the specified {@code type}, or the specified default value if none can be found. <p>Take care of {@link Order @Order} and {@code @javax.annotation.Priority}.
Return the value of the {@code javax.annotation.Priority} annotation declared on the specified type, or {@code null} if none.
Construct a new {@code SynthesizedAnnotationInvocationHandler} for the supplied {@link AnnotationAttributeExtractor}.
Clone the provided array, ensuring that original component type is retained.
See {@link Annotation#equals(Object)} for a definition of the required algorithm.
See {@link Annotation#hashCode()} for a definition of the required algorithm.
WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods in Spring's {@link ObjectUtils} because those hash code generation algorithms do not comply with the requirements specified in {@link Annotation#hashCode()}.
See {@link Annotation#toString()} for guidelines on the recommended format.
Create a new {@code SynthesizingMethodParameter} for the given method, with nesting level 1. return type; 0 for the first method parameter; 1 for the second method parameter, etc.
Create a new {@code SynthesizingMethodParameter} for the given method. return type; 0 for the first method parameter; 1 for the second method parameter, etc. (typically 1; e.g. in case of a List of Lists, 1 would indicate the nested List, whereas 2 would indicate the element of the nested List)
Create a new {@code SynthesizingMethodParameter} for the given constructor, with nesting level 1.
Create a new {@code SynthesizingMethodParameter} for the given constructor. (typically 1; e.g. in case of a List of Lists, 1 would indicate the nested List, whereas 2 would indicate the element of the nested List)
Copy constructor, resulting in an independent {@code SynthesizingMethodParameter} based on the same metadata and cache state that the original object was in.
Add converters appropriate for most environments. e.g. being a {@link ConfigurableConversionService})
Add collection converters. e.g. being a {@link ConfigurableConversionService})
Return whether conversion between the sourceType and targetType can be bypassed. <p>More precisely, this method will return true if objects of sourceType can be converted to the targetType by returning the source object unchanged. (may be {@code null} if source is {@code null})
Convenience operation for converting a source object to the specified targetType, where the targetType is a descriptor that provides additional conversion context. Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and encapsulates the construction of the sourceType descriptor using {@link TypeDescriptor#forObject(Object)}. or sourceType is {@code null} but source is not {@code null}
Template method to convert a {@code null} source. <p>The default implementation returns {@code null} or the Java 8 {@link java.util.Optional#empty()} instance if the target type is {@code java.util.Optional}. Subclasses may override this to return custom {@code null} objects for specific target types.
Hook method to lookup the converter for a given sourceType/targetType pair. First queries this ConversionService's converter cache. On a cache miss, then performs an exhaustive search for a matching converter. If no converter matches, returns the default converter. or {@code null} if no suitable converter was found
Return the default converter if no converter is found for the given sourceType/targetType pair. <p>Returns a NO_OP Converter if the sourceType is assignable to the targetType. Returns {@code null} otherwise, indicating no suitable converter could be found.
Internal helpers
Validate that a {@link Collection} of the elements held within the stream can be converted to the specified {@code targetType}.
Validate that the specified {@code sourceType} can be converted to a {@link Collection} of the type of the stream elements.
Return the source type that was requested to convert from.
Return the target type that was requested to convert to.
Create a new type descriptor from a {@link ResolvableType}. This protected constructor is used internally and may also be used by subclasses that support non-Java languages with extended type systems.
Variation of {@link #getType()} that accounts for a primitive type by returning its object wrapper type. <p>This is useful for conversion service implementations that wish to normalize to object-based types and not work with primitive types directly.
The type of the backing class, method parameter, field, or property described by this TypeDescriptor. <p>Returns primitive types as-is. <p>See {@link #getObjectType()} for a variation of this operation that resolves primitive types to their corresponding Object types if necessary.
Return the underlying {@link ResolvableType}.
Return the underlying source of the descriptor. Will return a {@link Field}, {@link MethodParameter} or {@link Type} depending on how the {@link TypeDescriptor} was constructed. This method is primarily to provide access to additional type information or meta-data that alternative JVM languages may provide.
Narrows this {@link TypeDescriptor} by setting its type to the class of the provided value. <p>If the value is {@code null}, no narrowing is performed and this TypeDescriptor is returned unchanged. <p>Designed to be called by binding frameworks when they read property, field, or method return values. Allows such frameworks to narrow a TypeDescriptor built from a declared property, field, or method return value type. For example, a field declared as {@code java.lang.Object} would be narrowed to {@code java.util.HashMap} if it was set to a {@code java.util.HashMap} value. The narrowed TypeDescriptor can then be used to convert the HashMap to some other type. Annotation and nested type context is preserved by the narrowed copy. class of the provided value)
Determine if this type descriptor has the specified annotation. <p>As of Spring Framework 4.2, this method supports arbitrary levels of meta-annotations.
Returns true if an object of this type descriptor can be assigned to the location described by the given type descriptor. <p>For example, {@code valueOf(String.class).isAssignableTo(valueOf(CharSequence.class))} returns {@code true} because a String value can be assigned to a CharSequence variable. On the other hand, {@code valueOf(Number.class).isAssignableTo(valueOf(Integer.class))} returns {@code false} because, while all Integers are Numbers, not all Numbers are Integers. <p>For arrays, collections, and maps, element and key/value types are checked if declared. For example, a List&lt;String&gt; field value is assignable to a Collection&lt;CharSequence&gt; field, but List&lt;Number&gt; is not assignable to List&lt;Integer&gt;. type descriptor
If this type is an array, returns the array's component type. If this type is a {@code Stream}, returns the stream's component type. If this type is a {@link Collection} and it is parameterized, returns the Collection's element type. If the Collection is not parameterized, returns {@code null} indicating the element type is not declared. Collection but its element type is not parameterized
If this type is a {@link Collection} or an array, creates a element TypeDescriptor from the provided collection or array element. <p>Narrows the {@link #getElementTypeDescriptor() elementType} property to the class of the provided collection or array element. For example, if this describes a {@code java.util.List&lt;java.lang.Number&lt;} and the element argument is an {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer}. If this describes a {@code java.util.List&lt;?&gt;} and the element argument is an {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer} as well. <p>Annotation and nested type context will be preserved in the narrowed TypeDescriptor that is returned. or array type
If this type is a {@link Map} and its key type is parameterized, returns the map's key type. If the Map's key type is not parameterized, returns {@code null} indicating the key type is not declared. but its key type is not parameterized
If this type is a {@link Map}, creates a mapKey {@link TypeDescriptor} from the provided map key. <p>Narrows the {@link #getMapKeyTypeDescriptor() mapKeyType} property to the class of the provided map key. For example, if this describes a {@code java.util.Map&lt;java.lang.Number, java.lang.String&lt;} and the key argument is a {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer}. If this describes a {@code java.util.Map&lt;?, ?&gt;} and the key argument is a {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer} as well. <p>Annotation and nested type context will be preserved in the narrowed TypeDescriptor that is returned.
If this type is a {@link Map} and its value type is parameterized, returns the map's value type. <p>If the Map's value type is not parameterized, returns {@code null} indicating the value type is not declared. but its value type is not parameterized
If this type is a {@link Map}, creates a mapValue {@link TypeDescriptor} from the provided map value. <p>Narrows the {@link #getMapValueTypeDescriptor() mapValueType} property to the class of the provided map value. For example, if this describes a {@code java.util.Map&lt;java.lang.String, java.lang.Number&lt;} and the value argument is a {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer}. If this describes a {@code java.util.Map&lt;?, ?&gt;} and the value argument is a {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer} as well. <p>Annotation and nested type context will be preserved in the narrowed TypeDescriptor that is returned.
Create a new type descriptor from a {@link java.util.Map} type. <p>Useful for converting to typed Maps. <p>For example, a Map&lt;String, String&gt; could be converted to a Map&lt;Id, EmailAddress&gt; by converting to a targetType built with this method: The method call to construct such a TypeDescriptor would look something like: <pre class="code"> map(Map.class, TypeDescriptor.valueOf(Id.class), TypeDescriptor.valueOf(EmailAddress.class)); </pre>
Create a new type descriptor as an array of the specified type. <p>For example to create a {@code Map<String,String>[]} use: <pre class="code"> TypeDescriptor.array(TypeDescriptor.map(Map.class, TypeDescriptor.value(String.class), TypeDescriptor.value(String.class))); </pre>
Creates a type descriptor for a nested type declared within the method parameter. <p>For example, if the methodParameter is a {@code List<String>} and the nesting level is 1, the nested type descriptor will be String.class. <p>If the methodParameter is a {@code List<List<String>>} and the nesting level is 2, the nested type descriptor will also be a String.class. <p>If the methodParameter is a {@code Map<Integer, String>} and the nesting level is 1, the nested type descriptor will be String, derived from the map value. <p>If the methodParameter is a {@code List<Map<Integer, String>>} and the nesting level is 2, the nested type descriptor will be String, derived from the map value. <p>Returns {@code null} if a nested type cannot be obtained because it was not declared. For example, if the method parameter is a {@code List<?>}, the nested type descriptor returned will be {@code null}. map key/value declaration within the method parameter or {@code null} if it could not be obtained {@link MethodParameter} argument is not 1, or if the types up to the specified nesting level are not of collection, array, or map types
Creates a type descriptor for a nested type declared within the field. <p>For example, if the field is a {@code List<String>} and the nesting level is 1, the nested type descriptor will be {@code String.class}. <p>If the field is a {@code List<List<String>>} and the nesting level is 2, the nested type descriptor will also be a {@code String.class}. <p>If the field is a {@code Map<Integer, String>} and the nesting level is 1, the nested type descriptor will be String, derived from the map value. <p>If the field is a {@code List<Map<Integer, String>>} and the nesting level is 2, the nested type descriptor will be String, derived from the map value. <p>Returns {@code null} if a nested type cannot be obtained because it was not declared. For example, if the field is a {@code List<?>}, the nested type descriptor returned will be {@code null}. map key/value declaration within the field or {@code null} if it could not be obtained level are not of collection, array, or map types
Create a new type descriptor for an object. <p>Use this factory method to introspect a source object before asking the conversion system to convert it to some another type. <p>If the provided object is {@code null}, returns {@code null}, else calls {@link #valueOf(Class)} to build a TypeDescriptor from the object's class.
Create a new {@code Environment} instance, calling back to {@link #customizePropertySources(MutablePropertySources)} during construction to allow subclasses to contribute or manipulate {@link PropertySource} instances as appropriate.
Return the set of reserved default profile names. This implementation returns {@value #RESERVED_DEFAULT_PROFILE_NAME}. Subclasses may override in order to customize the set of reserved names.
Return the set of active profiles as explicitly set through {@link #setActiveProfiles} or if the current set of active profiles is empty, check for the presence of the {@value #ACTIVE_PROFILES_PROPERTY_NAME} property and assign its value to the set of active profiles.
Return the set of default profiles explicitly set via {@link #setDefaultProfiles(String...)} or if the current set of default profiles consists only of {@linkplain #getReservedDefaultProfiles() reserved default profiles}, then check for the presence of the {@value #DEFAULT_PROFILES_PROPERTY_NAME} property and assign its value (if any) to the set of default profiles.
Return whether the given profile is active, or if active profiles are empty whether the profile should be active by default.
Validate the given profile, called internally prior to adding to the set of active or default profiles. <p>Subclasses may override to impose further restrictions on profile syntax. begins with the profile NOT operator (!).
Determine whether to suppress {@link System#getenv()}/{@link System#getenv(String)} access for the purposes of {@link #getSystemEnvironment()}. <p>If this method returns {@code true}, an empty dummy Map will be used instead of the regular system environment Map, never even trying to call {@code getenv} and therefore avoiding security manager warnings (if any). <p>The default implementation checks for the "spring.getenv.ignore" system property, returning {@code true} if its value equals "true" in any case.
Resolve placeholders within the given string, deferring to the value of {@link #setIgnoreUnresolvableNestedPlaceholders} to determine whether any unresolvable placeholders should raise an exception or be ignored. <p>Invoked from {@link #getProperty} and its variants, implicitly resolving nested placeholders. In contrast, {@link #resolvePlaceholders} and {@link #resolveRequiredPlaceholders} do <emphasis>not</emphasis> delegate to this method but rather perform their own handling of unresolvable placeholders, as specified by each of those methods.
Add an option argument for the given option name and add the given value to the list of values associated with this option (of which there may be zero or more). The given value may be {@code null}, indicating that the option was specified without an associated value (e.g. "--foo" vs. "--foo=bar").
Return the set of all option arguments present on the command line.
Return whether the option with the given name was present on the command line.
Return the list of values associated with the given option. {@code null} signifies that the option was not present; empty list signifies that no values were associated with this option.
Add the given value to the list of non-option arguments.
Return the list of non-option arguments specified on the command line.
Create a new {@code CommandLinePropertySource} having the default name {@value #COMMAND_LINE_PROPERTY_SOURCE_NAME} and backed by the given source object.
Create a new {@link CommandLinePropertySource} having the given name and backed by the given source object.
Specify the name of the special "non-option arguments" property. The default is {@value #DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME}.
Create a new {@code CompositePropertySource}.
Add the given {@link PropertySource} to the end of the chain.
Add the given {@link PropertySource} to the start of the chain.
Return all property sources that this composite source holds.
Create a new {@code JOptCommandLinePropertySource} having the default name and backed by the given {@code OptionSet}.
Create a new {@code JOptCommandLinePropertySource} having the given name and backed by the given {@code OptionSet}.
Return the set of properties marked as required but not present upon validation.
Create a new {@link MutablePropertySources} object.
Create a new {@code MutablePropertySources} from the given propertySources object, preserving the original order of contained {@code PropertySource} objects.
Create a new {@link MutablePropertySources} object and inherit the given logger, usually from an enclosing {@link Environment}.
Add the given property source object with highest precedence.
Add the given property source object with lowest precedence.
Add the given property source object with precedence immediately higher than the named relative property source.
Add the given property source object with precedence immediately lower than the named relative property source.
Return the precedence of the given property source, {@code -1} if not found.
Remove and return the property source with the given name, {@code null} if not found.
Replace the property source with the given name with the given property source object.
Return the number of {@link PropertySource} objects contained.
Ensure that the given property source is not being added relative to itself.
Remove the given property source if it is present.
Add the given property source at a particular index in the list.
Assert that the named property source is present and return its index. to find
Create a new {@code PropertySource} with the given name and source object.
Return the name of this {@code PropertySource}
Return the underlying source object for this {@code PropertySource}.
Return whether this {@code PropertySource} contains the given name. <p>This implementation simply checks for a {@code null} return value from {@link #getProperty(String)}. Subclasses may wish to implement a more efficient algorithm if possible.
Return a {@code PropertySource} implementation intended for collection comparison purposes only. <p>Primarily for internal use, but given a collection of {@code PropertySource} objects, may be used as follows: <pre class="code"> {@code List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>(); sources.add(new MapPropertySource("sourceA", mapA)); sources.add(new MapPropertySource("sourceB", mapB)); assert sources.contains(PropertySource.named("sourceA")); assert sources.contains(PropertySource.named("sourceB")); assert !sources.contains(PropertySource.named("sourceC")); }</pre> The returned {@code PropertySource} will throw {@code UnsupportedOperationException} if any methods other than {@code equals(Object)}, {@code hashCode()}, and {@code toString()} are called.
Create a new resolver against the given property sources.
Parse the given {@code String} array based on the rules described {@linkplain SimpleCommandLineArgsParser above}, returning a fully-populated {@link CommandLineArgs} object.
Create a new {@code SimpleCommandLinePropertySource} having the default name and backed by the given {@code String[]} of command line arguments.
Create a new {@code SimpleCommandLinePropertySource} having the given name and backed by the given {@code String[]} of command line arguments.
Create a new {@code SystemEnvironmentPropertySource} with the given name and delegating to the given {@code MapPropertySource}.
Check to see if this property source contains a property with the given name, or any underscore / uppercase variation thereof. Return the resolved name if one is found or otherwise the original name. Never returns {@code null}.
Create a new {@code EncodedResource} for the given {@code Resource}, not specifying an explicit encoding or {@code Charset}.
Create a new {@code EncodedResource} for the given {@code Resource}, using the specified {@code encoding}.
Create a new {@code EncodedResource} for the given {@code Resource}, using the specified {@code Charset}.
Return the {@code Resource} held by this {@code EncodedResource}.
Return the encoding to use for reading from the {@linkplain #getResource() resource}, or {@code null} if none specified.
Return the {@code Charset} to use for reading from the {@linkplain #getResource() resource}, or {@code null} if none specified.
Determine whether a {@link Reader} is required as opposed to an {@link InputStream}, i.e. whether an {@linkplain #getEncoding() encoding} or a {@link #getCharset() Charset} has been specified.
Open a {@code java.io.Reader} for the specified resource, using the specified {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding} (if any).
Create a new LocalizedResourceHelper with a DefaultResourceLoader.
Create a new LocalizedResourceHelper with the given ResourceLoader.
Set the separator to use inbetween file name parts. Default is an underscore ("_").
Find the most specific localized resource for the given name, extension and locale: <p>The file will be searched with locations in the following order, similar to {@code java.util.ResourceBundle}'s search order: <ul> <li>[name]_[language]_[country]_[variant][extension] <li>[name]_[language]_[country][extension] <li>[name]_[language][extension] <li>[name][extension] </ul> <p>If none of the specific files can be found, a resource descriptor for the default location will be returned.
Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader. <p>ClassLoader access will happen via the thread context class loader.
Create a new PathMatchingResourcePatternResolver. <p>ClassLoader access will happen via the thread context class loader. actual resources with
Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader. or {@code null} for using the thread context class loader at the time of actual resource access
Return the ResourceLoader that this pattern resolver works with.
Set the PathMatcher implementation to use for this resource pattern resolver. Default is AntPathMatcher.
Return the PathMatcher that this resource pattern resolver uses.
Find all class location resources with the given location via the ClassLoader. Delegates to {@link #doFindAllClassPathResources(String)}.
Find all class location resources with the given path via the ClassLoader. Called by {@link #findAllClassPathResources(String)}.
Convert the given URL as returned from the ClassLoader into a {@link Resource}. <p>The default implementation simply creates a {@link UrlResource} instance.
Search all {@link URLClassLoader} URLs for jar file references and add them to the given set of resources in the form of pointers to the root of the jar file content.
Determine jar file references from the "java.class.path." manifest property and add them to the given set of resources in the form of pointers to the root of the jar file content.
Find all resources that match the given location pattern via the Ant-style PathMatcher. Supports resources in jar files and zip files and in the file system.
Determine the root directory for the given location. <p>Used for determining the starting point for file matching, resolving the root directory location to a {@code java.io.File} and passing it into {@code retrieveMatchingFiles}, with the remainder of the location as pattern. <p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml", for example.
Resolve the specified resource for path matching. <p>The default implementation detects an Equinox OSGi "bundleresource:" / "bundleentry:" URL and resolves it into a standard jar file URL that can be traversed using Spring's standard jar file traversal algorithm.
Return whether the given resource handle indicates a jar resource that the {@code doFindPathMatchingJarResources} method can handle. <p>The default implementation checks against the URL protocols "jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server and IBM WebSphere, respectively, but can be treated like jar files). (usually the root directory to start path matching from)
Find all resources in jar files that match the given location pattern via the Ant-style PathMatcher.
Resolve the given jar file URL into a JarFile object.
Find all resources in the file system that match the given location pattern via the Ant-style PathMatcher.
Find all resources in the file system that match the given location pattern via the Ant-style PathMatcher.
Retrieve files that match the given path pattern, checking the given directory and its subdirectories. relative to the root directory
Recursively retrieve files that match the given pattern, adding them to the given result list. with prepended root directory path
Set local properties, e.g. via the "props" tag in XML bean definitions. These can be considered defaults, to be overridden by properties loaded from files.
Set local properties, e.g. via the "props" tag in XML bean definitions, allowing for merging multiple properties sets into one.
Set a location of a properties file to be loaded. <p>Can point to a classic properties file or to an XML file that follows JDK 1.5's properties XML format.
Set locations of properties files to be loaded. <p>Can point to classic properties files or to XML files that follow JDK 1.5's properties XML format. <p>Note: Properties defined in later files will override properties defined earlier files, in case of overlapping keys. Hence, make sure that the most specific files are the last ones in the given list of locations.
Set whether local properties override properties from files. <p>Default is "false": Properties from files override local defaults. Can be switched to "true" to let local properties override defaults from files.
Set if failure to find the property resource should be ignored. <p>"true" is appropriate if the properties file is completely optional. Default is "false".
Set the encoding to use for parsing properties files. <p>Default is none, using the {@code java.util.Properties} default encoding. <p>Only applies to classic properties files, not to XML files.
Return a merged Properties instance containing both the loaded properties and properties set on this FactoryBean.
Load properties into the given instance.
Load properties from the given EncodedResource, potentially defining a specific encoding for the properties file.
Fill the given properties from the given EncodedResource, potentially defining a specific encoding for the properties file.
Actually load properties from the given EncodedResource into the given Properties instance.
Load properties from the given resource (in ISO-8859-1 encoding).
Fill the given properties from the given resource (in ISO-8859-1 encoding).
Load all properties from the specified class path resource (in ISO-8859-1 encoding), using the default class loader. <p>Merges properties if more than one resource of the same name found in the class path.
Load all properties from the specified class path resource (in ISO-8859-1 encoding), using the given class loader. <p>Merges properties if more than one resource of the same name found in the class path. (or {@code null} to use the default class loader)
Create a new ResourceArrayPropertyEditor with a default {@link PathMatchingResourcePatternResolver} and {@link StandardEnvironment}.
Create a new ResourceArrayPropertyEditor with the given {@link ResourcePatternResolver} and {@link PropertyResolver} (typically an {@link Environment}).
Create a new ResourceArrayPropertyEditor with the given {@link ResourcePatternResolver} and {@link PropertyResolver} (typically an {@link Environment}). if no corresponding system property could be found
Resolve the given path, replacing placeholders with corresponding system property values if necessary.
Return whether the given resource location is a URL: either a special "classpath" or "classpath*" pseudo URL or a standard URL.
Return a default ResourcePatternResolver for the given ResourceLoader. <p>This might be the ResourceLoader itself, if it implements the ResourcePatternResolver extension, or a PathMatchingResourcePatternResolver built on the given ResourceLoader. (may be {@code null} to indicate a default ResourceLoader)
Create a PropertySource having the given name based on Properties loaded from the given encoded resource.
Create a PropertySource based on Properties loaded from the given resource. The name of the PropertySource will be generated based on the {@link Resource#getDescription() description} of the given resource.
Create a PropertySource having the given name based on Properties loaded from the given resource location and using the given class loader to load the resource (assuming it is prefixed with {@code classpath:}).
Create a PropertySource based on Properties loaded from the given resource location and use the given class loader to load the resource, assuming it is prefixed with {@code classpath:}. The name of the PropertySource will be generated based on the {@link Resource#getDescription() description} of the resource.
Create a PropertySource having the given name based on Properties loaded from the given resource location. The default thread context class loader will be used to load the resource (assuming the location string is prefixed with {@code classpath:}.
Create a PropertySource based on Properties loaded from the given resource location. The name of the PropertySource will be generated based on the {@link Resource#getDescription() description} of the resource.
Return a potentially adapted variant of this {@link ResourcePropertySource}, overriding the previously given (or derived) name with the specified name.
Return a potentially adapted variant of this {@link ResourcePropertySource}, overriding the previously given name (if any) with the original resource name (equivalent to the name generated by the name-less constructor variants).
Return the description for the given Resource; if the description is empty, return the class name of the resource plus its identity hash code.
Load and instantiate the factory implementations of the given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader. <p>The returned factories are sorted in accordance with the {@link AnnotationAwareOrderComparator}. <p>If a custom instantiation strategy is required, use {@link #loadFactoryNames} to obtain all registered factory names. be loaded or if an error occurs while instantiating any factory
Load the fully qualified class names of factory implementations of the given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader. {@code null} to use the default
Create a new ClassRelativeResourceLoader for the given class.
Create a new DefaultResourceLoader. <p>ClassLoader access will happen using the thread context class loader at the time of this ResourceLoader's initialization.
Create a new DefaultResourceLoader. for using the thread context class loader at the time of actual resource access
Specify the ClassLoader to load class path resources with, or {@code null} for using the thread context class loader at the time of actual resource access. <p>The default is that ClassLoader access will happen using the thread context class loader at the time of this ResourceLoader's initialization.
Register the given resolver with this resource loader, allowing for additional protocols to be handled. <p>Any such resolver will be invoked ahead of this loader's standard resolution rules. It may therefore also override any default rules.
Return the collection of currently registered protocol resolvers, allowing for introspection as well as modification.
Return a Resource handle for the resource at the given path. <p>The default implementation supports class path locations. This should be appropriate for standalone implementations but can be overridden, e.g. for implementations targeted at a Servlet container.
Create a new PathResource from a Path handle. <p>Note: Unlike {@link FileSystemResource}, when building relative resources via {@link #createRelative}, the relative path will be built <i>underneath</i> the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!
Create a new instance of the {@link ResourceEditor} class using a {@link DefaultResourceLoader} and {@link StandardEnvironment}.
Create a new instance of the {@link ResourceEditor} class using the given {@link ResourceLoader} and {@link PropertyResolver}.
Create a new instance of the {@link ResourceEditor} class using the given {@link ResourceLoader}. if no corresponding property could be found in the given {@code propertyResolver}
Resolve the given path, replacing placeholders with corresponding property values from the {@code environment} if necessary.
Create a new {@code UrlResource} based on the given URI object.
Create a new {@code UrlResource} based on the given URL object.
Create a new {@code UrlResource} based on a URL path. <p>Note: The given path needs to be pre-encoded if necessary.
Create a new {@code UrlResource} based on a URI specification. <p>The given parts will automatically get encoded if necessary. also known as "scheme" also known as "scheme-specific part"
Create a new {@code UrlResource} based on a URI specification. <p>The given parts will automatically get encoded if necessary. also known as "scheme" also known as "scheme-specific part" as following after a "#" separator)
protected methods used by the support sub-package
Create a {@code DeserializingConverter} with default {@link java.io.ObjectInputStream} configuration, using the "latest user-defined ClassLoader".
Create a {@code DeserializingConverter} for using an {@link java.io.ObjectInputStream} with the given {@code ClassLoader}.
Create a {@code DeserializingConverter} that delegates to the provided {@link Deserializer}.
Create a {@code SerializationDelegate} with a default serializer/deserializer for the given {@code ClassLoader}.
Create a {@code SerializationDelegate} with the given serializer/deserializer.
Construct a {@code SerializationException} with the specified detail message.
Construct a {@code SerializationException} with the specified detail message and nested exception.
Create a default {@code SerializingConverter} that uses standard Java serialization.
Create a {@code SerializingConverter} that delegates to the provided {@link Serializer}.
Create a {@code DefaultDeserializer} with default {@link ObjectInputStream} configuration, using the "latest user-defined ClassLoader".
Create a {@code DefaultDeserializer} for using an {@link ObjectInputStream} with the given {@code ClassLoader}.
Create a new DefaultToStringStyler.
Return the ValueStyler used by this ToStringStyler.
Style the specified value according to default conventions.
Create a ToStringCreator for the given object.
Create a ToStringCreator for the given object, using the provided style.
Append a byte field value.
Append a short field value.
Append a integer field value.
Append a long field value.
Append a float field value.
Append a double field value.
Append a boolean field value.
Append a field value.
Append the provided value.
Create a new ConcurrentExecutorAdapter for the given Spring TaskExecutor.
Create a new ExecutorServiceAdapter, using the given target executor.
Create a new TaskExecutorAdapter, using the given JDK concurrent executor.
Actually execute the given {@code Runnable} (which may be a user-supplied task or a wrapper around a user-supplied task) with the given executor.
Create a new SimpleAsyncTaskExecutor with default thread name prefix.
Create a new SimpleAsyncTaskExecutor with the given thread name prefix.
Create a new SimpleAsyncTaskExecutor with the given external thread factory.
Specify an external factory to use for creating new Threads, instead of relying on the local properties of this executor. <p>You may specify an inner ThreadFactory bean or also a ThreadFactory reference obtained from JNDI (on a Java EE 6 server) or some other lookup mechanism.
Return the external factory to use for creating new Threads, if any.
Set the maximum number of parallel accesses allowed. -1 indicates no concurrency limit at all. <p>In principle, this limit can be changed at runtime, although it is generally designed as a config time setting. NOTE: Do not switch between -1 and any concrete limit at runtime, as this will lead to inconsistent concurrency counts: A limit of -1 effectively turns off concurrency counting completely.
Return the maximum number of parallel accesses allowed.
Return whether this throttle is currently active.
Template method for the actual execution of a task. <p>The default implementation creates a new Thread and starts it.
Create a new {@code TaskRejectedException} with the specified detail message and no root cause.
Create a new {@code TaskRejectedException} with the specified detail message and the given root cause. API such as the {@code java.util.concurrent} package)
Create a new {@code TaskTimeoutException} with the specified detail message and no root cause.
Create a new {@code TaskTimeoutException} with the specified detail message and the given root cause. API such as the {@code java.util.concurrent} package)
Retrieve the merged attributes of the annotation of the given type, if any, from the supplied {@code attributesMap}. <p>Annotation attribute values appearing <em>lower</em> in the annotation hierarchy (i.e., closer to the declaring class) will override those defined <em>higher</em> in the annotation hierarchy. annotation type name keyed by annotation type name type to look for matching annotation is present in the {@code attributesMap}
Create a new CachingMetadataReaderFactory for the default class loader.
Create a new CachingMetadataReaderFactory for the given resource loader. (also determines the ClassLoader to use)
Create a new CachingMetadataReaderFactory for the given class loader.
Specify the maximum number of entries for the MetadataReader cache. Default is 256.
Return the maximum number of entries for the MetadataReader cache.
Clear the entire MetadataReader cache, removing all cached class metadata.
Create a new SimpleMetadataReaderFactory for the default class loader.
Create a new SimpleMetadataReaderFactory for the given resource loader. (also determines the ClassLoader to use)
Create a new SimpleMetadataReaderFactory for the given class loader.
Return the ResourceLoader that this MetadataReaderFactory has been constructed with.
Override this to match self characteristics alone. Typically, the implementation will use a visitor to extract information to perform matching.
Override this to match on type name.
Override this to match on super type name.
Override this to match on interface type name.
Create a new AnnotationTypeFilter for the given annotation type. This filter will also match meta-annotations. To disable the meta-annotation matching, use the constructor that accepts a '{@code considerMetaAnnotations}' argument. The filter will not match interfaces.
Create a new AnnotationTypeFilter for the given annotation type. The filter will not match interfaces.
Create a new {@link AnnotationTypeFilter} for the given annotation type.
Create a new AssignableTypeFilter for the given type.
Create a new {@code StandardAnnotationMetadata} wrapper for the given Class.
Create a new {@link StandardAnnotationMetadata} wrapper for the given Class, providing the option to return any nested annotations or annotation arrays in the form of {@link org.springframework.core.annotation.AnnotationAttributes} instead of actual {@link Annotation} instances. {@link org.springframework.core.annotation.AnnotationAttributes} for compatibility with ASM-based {@link AnnotationMetadata} implementations
Create a new StandardClassMetadata wrapper for the given Class.
Return the underlying Class.
Create a new StandardMethodMetadata wrapper for the given Method.
Create a new StandardMethodMetadata wrapper for the given Method, providing the option to return any nested annotations or annotation arrays in the form of {@link org.springframework.core.annotation.AnnotationAttributes} instead of actual {@link java.lang.annotation.Annotation} instances. {@link org.springframework.core.annotation.AnnotationAttributes} for compatibility with ASM-based {@link AnnotationMetadata} implementations
Return the underlying Method.
Copy the attributes from the supplied AttributeAccessor to this accessor.
Returns {@code true} if the {@link Type} signature of both the supplied {@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method} are equal after resolving all types against the declaringType, otherwise returns {@code false}.
Determine whether the given collection type is an <em>approximable</em> type, i.e. a type that {@link #createApproximateCollection} can approximate.
Create the most appropriate collection for the given collection type. <p>Delegates to {@link #createCollection(Class, Class, int)} with a {@code null} element type. is {@code null} or of type {@link EnumSet}
Determine whether the given map type is an <em>approximable</em> type, i.e. a type that {@link #createApproximateMap} can approximate.
Create the most appropriate map for the given map type. <p>Delegates to {@link #createMap(Class, Class, int)} with a {@code null} key type. {@code null} or of type {@link EnumMap}
Create a new ConfigurableObjectInputStream for the given InputStream and ClassLoader.
Create a new ConfigurableObjectInputStream for the given InputStream and ClassLoader. (may be deactivated as a security measure)
Resolve the given class name against a fallback class loader. <p>The default implementation simply rethrows the original exception, since there is no fallback available.
Return the fallback ClassLoader to use when no ClassLoader was specified and ObjectInputStream's own default ClassLoader failed. <p>The default implementation simply returns {@code null}.
Thrown when an invalid constant name is requested.
Thrown when an invalid constant value is looked up.
Create a new Constants converter class wrapping the given class. <p>All <b>public</b> static final variables will be exposed, whatever their type.
Return the name of the analyzed class.
Return the number of constants exposed.
Exposes the field cache to subclasses: a Map from String field name to object value.
Return a constant value cast to a Number. or if the type wasn't compatible with Number
Return a constant value as a String. Works even if it's not a string (invokes {@code toString()}).
Parse the given String (upper or lower case accepted) and return the appropriate value if it's the name of a constant field in the class that we're analysing.
Return all names of the given group of constants. <p>Note that this method assumes that constants are named in accordance with the standard Java convention for constant values (i.e. all uppercase). The supplied {@code namePrefix} will be uppercased (in a locale-insensitive fashion) prior to the main logic of this method kicking in.
Return all names of the group of constants for the given bean property name.
Return all names of the given group of constants. <p>Note that this method assumes that constants are named in accordance with the standard Java convention for constant values (i.e. all uppercase). The supplied {@code nameSuffix} will be uppercased (in a locale-insensitive fashion) prior to the main logic of this method kicking in.
Return all values of the given group of constants. <p>Note that this method assumes that constants are named in accordance with the standard Java convention for constant values (i.e. all uppercase). The supplied {@code namePrefix} will be uppercased (in a locale-insensitive fashion) prior to the main logic of this method kicking in.
Return all values of the group of constants for the given bean property name.
Return all values of the given group of constants. <p>Note that this method assumes that constants are named in accordance with the standard Java convention for constant values (i.e. all uppercase). The supplied {@code nameSuffix} will be uppercased (in a locale-insensitive fashion) prior to the main logic of this method kicking in.
Look up the given value within the given group of constants. <p>Will return the first match.
Look up the given value within the group of constants for the given bean property name. Will return the first match.
Look up the given value within the given group of constants. <p>Will return the first match.
Convert the given bean property name to a constant name prefix. <p>Uses a common naming idiom: turning all lower case characters to upper case, and prepending upper case characters with an underscore. <p>Example: "imageSize" -> "IMAGE_SIZE"<br> Example: "imagesize" -> "IMAGESIZE".<br> Example: "ImageSize" -> "_IMAGE_SIZE".<br> Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"
Return an appropriate {@link ControlFlow} instance.
Determine the conventional variable name for the supplied {@code Object} based on its concrete type. The convention used is to return the uncapitalized short name of the {@code Class}, according to JavaBeans property naming rules: So, {@code com.myapp.Product} becomes {@code product}; {@code com.myapp.MyProduct} becomes {@code myProduct}; {@code com.myapp.UKProduct} becomes {@code UKProduct}. <p>For arrays, we use the pluralized version of the array component type. For {@code Collection}s we attempt to 'peek ahead' in the {@code Collection} to determine the component type and return the pluralized version of that component type.
Determine the conventional variable name for the supplied parameter, taking the generic collection type (if any) into account.
Determine the conventional variable name for the return type of the supplied method, taking the generic collection type (if any) into account.
Determine the conventional variable name for the return type of the supplied method, taking the generic collection type (if any) into account, falling back to the given return value if the method declaration is not specific enough (i.e. in case of the return type being declared as {@code Object} or as untyped collection).
Convert {@code String}s in attribute name format (lowercase, hyphens separating words) into property name format (camel-cased). For example, {@code transaction-manager} is converted into {@code transactionManager}.
Return an attribute name qualified by the supplied enclosing {@link Class}. For example, the attribute name '{@code foo}' qualified by {@link Class} '{@code com.myapp.SomeClass}' would be '{@code com.myapp.SomeClass.foo}'
Determines the class to use for naming a variable that contains the given value. <p>Will return the class of the given value, except when encountering a JDK proxy, in which case it will determine the 'primary' interface implemented by that proxy.
Pluralize the given name.
Retrieves the {@code Class} of an element in the {@code Collection}. The exact element for which the {@code Class} is retreived will depend on the concrete {@code Collection} implementation.
Create a new DecoratingClassLoader using the given parent ClassLoader for delegation.
Add a package name to exclude from decoration (e.g. overriding). <p>Any class whose fully-qualified name starts with the name registered here will be handled by the parent ClassLoader in the usual fashion.
Add a class name to exclude from decoration (e.g. overriding). <p>Any class name registered here will be handled by the parent ClassLoader in the usual fashion.
Determine whether the specified class is excluded from decoration by this class loader. <p>The default implementation checks against excluded packages and classes.
Create a new ExceptionDepthComparator for the given exception.
Create a new ExceptionDepthComparator for the given exception type.
Obtain the closest match from the given exception types for the given target exception.
Determine the target type for the generic return type of the given <em>generic method</em>, where formal type variables are declared on the given method itself. <p>For example, given a factory method with the following signature, if {@code resolveReturnTypeForGenericMethod()} is invoked with the reflected method for {@code creatProxy()} and an {@code Object[]} array containing {@code MyService.class}, {@code resolveReturnTypeForGenericMethod()} will infer that the target return type is {@code MyService}. <pre class="code">{@code public static <T> T createProxy(Class<T> clazz)}</pre> <h4>Possible Return Values</h4> <ul> <li>the target return type, if it can be inferred</li> <li>the {@linkplain Method#getReturnType() standard return type}, if the given {@code method} does not declare any {@linkplain Method#getTypeParameters() formal type variables}</li> <li>the {@linkplain Method#getReturnType() standard return type}, if the target return type cannot be inferred (e.g., due to type erasure)</li> <li>{@code null}, if the length of the given arguments array is shorter than the length of the {@linkplain Method#getGenericParameterTypes() formal argument list} for the given method</li> </ul> invoked (never {@code null}) (may be {@code null})
version String should look like "1.4.2_10"
Return the full Java version string, as returned by {@code System.getProperty("java.version")}.
Get the major version code. This means we can do things like {@code if (getMajorJavaVersion() >= JAVA_17)}.
Inspects the target class. Exceptions will be logged and a maker map returned to indicate the lack of debug information.
Select methods on the given target type based on the lookup of associated metadata. <p>Callers define methods of interest through the {@link MetadataLookup} parameter, allowing to collect the associated metadata into the result map. returning non-null metadata to be associated with a given method if there is a match, or {@code null} for no match or an empty map in case of no match
Select methods on the given target type based on a filter. <p>Callers define methods of interest through the {@link ReflectionUtils.MethodFilter} parameter. recognize handler methods of interest
Select an invocable method on the target type: either the given method itself if actually exposed on the target type, or otherwise a corresponding method on one of the target type's interfaces or on the target type itself. <p>Matches on user-declared interfaces will be preferred since they are likely to contain relevant metadata that corresponds to the method on the target class. (typically an interface-based JDK proxy) target type (typically due to a proxy mismatch)
Create a new {@code MethodParameter} for the given method, with nesting level 1. return type; 0 for the first method parameter; 1 for the second method parameter, etc.
Create a new {@code MethodParameter} for the given method. return type; 0 for the first method parameter; 1 for the second method parameter, etc. (typically 1; e.g. in case of a List of Lists, 1 would indicate the nested List, whereas 2 would indicate the element of the nested List)
Return the wrapped member.
Return the wrapped annotated element. <p>Note: This method exposes the annotations declared on the method/constructor itself (i.e. at the method/constructor level, not at the parameter level).
Return a variant of this {@code MethodParameter} which points to the same parameter but one nesting level deeper. This is effectively the same as {@link #increaseNestingLevel()}, just with an independent {@code MethodParameter} object (e.g. in case of the original being cached).
Return whether this method parameter is declared as optional in the form of Java 8's {@link java.util.Optional}.
Return a variant of this {@code MethodParameter} which points to the same parameter but one nesting level deeper in case of a {@link java.util.Optional} declaration.
Set a containing class to resolve the parameter type against.
Return the nested type of the method/constructor parameter.
Return the nested generic type of the method/constructor parameter.
Return whether the method/constructor is annotated with the given type.
Return {@code true} if the parameter has at least one annotation, {@code false} if it has none.
Return whether the parameter is declared with the given annotation type.
A template method to post-process a given annotation instance before returning it to the caller. <p>The default implementation simply returns the given annotation as-is.
A template method to post-process a given annotation array before returning it to the caller. <p>The default implementation simply returns the given annotation array as-is.
Create a new NamedInheritableThreadLocal with the given name.
Create a new NamedThreadLocal with the given name.
Build an adapted order comparator with the given source provider.
Determine the order value for the given object. <p>The default implementation checks against the given {@link OrderSourceProvider} using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call.
Determine the order value for the given object. <p>The default implementation checks against the {@link Ordered} interface through delegating to {@link #findOrder}. Can be overridden in subclasses.
Find an order value indicated by the given object. <p>The default implementation checks against the {@link Ordered} interface. Can be overridden in subclasses.
Determine a priority value for the given object, if any. <p>The default implementation always returns {@code null}. Subclasses may override this to give specific kinds of values a 'priority' characteristic, in addition to their 'order' semantics. A priority indicates that it may be used for selecting one object over another, in addition to serving for ordering purposes in a list/array.
Sort the given List with a default OrderComparator. <p>Optimized to skip sorting for lists with size 0 or 1, in order to avoid unnecessary array extraction.
Sort the given array with a default OrderComparator. <p>Optimized to skip sorting for lists with size 0 or 1, in order to avoid unnecessary array extraction.
Sort the given array or List with a default OrderComparator, if necessary. Simply skips sorting when given any other value. <p>Optimized to skip sorting for lists with size 0 or 1, in order to avoid unnecessary array extraction.
Create a new OverridingClassLoader for the given ClassLoader.
Determine whether the specified class is eligible for overriding by this class loader.
Load the specified class for overriding purposes in this ClassLoader. <p>The default implementation delegates to {@link #findLoadedClass}, {@link #loadBytesForClass} and {@link #defineClass}.
Load the defining bytes for the given class, to be turned into a Class object through a {@link #defineClass} call. <p>The default implementation delegates to {@link #openStreamForClass} and {@link #transformIfNecessary}. or {@code null} if no class defined for that name
Open an InputStream for the specified class. <p>The default implementation loads a standard class file through the parent ClassLoader's {@code getResourceAsStream} method.
Transformation hook to be implemented by subclasses. <p>The default implementation simply returns the given bytes as-is. same as the input bytes if the transformation produced no changes)
Add a further ParameterNameDiscoverer to the list of discoverers that this PrioritizedParameterNameDiscoverer checks.
Private constructor used to create a new {@link ResolvableType} for cache key purposes, with no upfront resolution.
Private constructor used to create a new {@link ResolvableType} for cache value purposes, with upfront resolution and a pre-calculated hash.
Private constructor used to create a new {@link ResolvableType} for uncached purposes, with upfront resolution but lazily calculated hash.
Private constructor used to create a new {@link ResolvableType} on a {@link Class} basis. Avoids all {@code instanceof} checks in order to create a straight {@link Class} wrapper.
Return the underling Java {@link Type} being managed. With the exception of the {@link #NONE} constant, this method will never return {@code null}.
Return the underlying Java {@link Class} being managed, if available; otherwise {@code null}.
Return the underlying source of the resolvable type. Will return a {@link Field}, {@link MethodParameter} or {@link Type} depending on how the {@link ResolvableType} was constructed. With the exception of the {@link #NONE} constant, this method will never return {@code null}. This method is primarily to provide access to additional type information or meta-data that alternative JVM languages may provide.
Determine whether the given object is an instance of this {@code ResolvableType}.
Determine whether this {@code ResolvableType} is assignable from the specified other type.
Determine whether this {@code ResolvableType} is assignable from the specified other type. <p>Attempts to follow the same rules as the Java compiler, considering whether both the {@link #resolve() resolved} {@code Class} is {@link Class#isAssignableFrom(Class) assignable from} the given type as well as whether all {@link #getGenerics() generics} are assignable. {@code ResolvableType}; {@code false} otherwise
Return {@code true} if this type resolves to a Class that represents an array.
Return the ResolvableType representing the component type of the array or {@link #NONE} if this type does not represent an array.
Convenience method to return this type as a resolvable {@link Collection} type. Returns {@link #NONE} if this type does not implement or extend {@link Collection}.
Convenience method to return this type as a resolvable {@link Map} type. Returns {@link #NONE} if this type does not implement or extend {@link Map}.
Return this type as a {@link ResolvableType} of the specified class. Searches {@link #getSuperType() supertype} and {@link #getInterfaces() interface} hierarchies to find a match, returning {@link #NONE} if this type does not implement or extend the specified class. type, or {@link #NONE} if not resolvable as that type
Return a {@link ResolvableType} representing the direct supertype of this type. If no supertype is available this method returns {@link #NONE}.
Return a {@link ResolvableType} array representing the direct interfaces implemented by this type. If this type does not implement any interfaces an empty array is returned.
Return {@code true} if this type contains generic parameters.
Return {@code true} if this type contains unresolvable generics only, that is, no substitute for any of its declared type variables.
Determine whether the underlying type has any unresolvable generics: either through an unresolvable type variable on the type itself or through implementing a generic interface in a raw fashion, i.e. without substituting that interface's type variables. The result will be {@code true} only in those two scenarios.
Determine whether the underlying type is a type variable that cannot be resolved through the associated variable resolver.
Determine whether the underlying type represents a wildcard without specific bounds (i.e., equal to {@code ? extends Object}).
Return a {@link ResolvableType} for the specified nesting level. See {@link #getNested(int, Map)} for details.
Return a {@link ResolvableType} for the specified nesting level. The nesting level refers to the specific generic parameter that should be returned. A nesting level of 1 indicates this type; 2 indicates the first nested generic; 3 the second; and so on. For example, given {@code List<Set<Integer>>} level 1 refers to the {@code List}, level 2 the {@code Set}, and level 3 the {@code Integer}. <p>The {@code typeIndexesPerLevel} map can be used to reference a specific generic for the given level. For example, an index of 0 would refer to a {@code Map} key; whereas, 1 would refer to the value. If the map does not contain a value for a specific level the last generic will be used (e.g. a {@code Map} value). <p>Nesting levels may also apply to array types; for example given {@code String[]}, a nesting level of 2 refers to {@code String}. <p>If a type does not {@link #hasGenerics() contain} generics the {@link #getSuperType() supertype} hierarchy will be considered. type, 2 for the first nested generic, 3 for the second and so on level (may be {@code null})
Return a {@link ResolvableType} representing the generic parameter for the given indexes. Indexes are zero based; for example given the type {@code Map<Integer, List<String>>}, {@code getGeneric(0)} will access the {@code Integer}. Nested generics can be accessed by specifying multiple indexes; for example {@code getGeneric(1, 0)} will access the {@code String} from the nested {@code List}. For convenience, if no indexes are specified the first generic is returned. <p>If no generic is available at the specified indexes {@link #NONE} is returned. return the first generic)
Return an array of {@link ResolvableType}s representing the generic parameters of this type. If no generics are available an empty array is returned. If you need to access a specific generic consider using the {@link #getGeneric(int...)} method as it allows access to nested generics and protects against {@code IndexOutOfBoundsExceptions}. (never {@code null})
Convenience method that will {@link #getGenerics() get} and {@link #resolve() resolve} generic parameters. will never be {@code null}, but it may contain {@code null} elements})
Convenience method that will {@link #getGenerics() get} and {@link #resolve() resolve} generic parameters, using the specified {@code fallback} if any type cannot be resolved. {@code null}, but it may contain {@code null} elements})
Convenience method that will {@link #getGeneric(int...) get} and {@link #resolve() resolve} a specific generic parameters. (may be omitted to return the first generic)
Resolve this type to a {@link java.lang.Class}, returning {@code null} if the type cannot be resolved. This method will consider bounds of {@link TypeVariable}s and {@link WildcardType}s if direct resolution fails; however, bounds of {@code Object.class} will be ignored.
Resolve this type to a {@link java.lang.Class}, returning the specified {@code fallback} if the type cannot be resolved. This method will consider bounds of {@link TypeVariable}s and {@link WildcardType}s if direct resolution fails; however, bounds of {@code Object.class} will be ignored.
Resolve this type by a single level, returning the resolved value or {@link #NONE}. <p>Note: The returned {@link ResolvableType} should only be used as an intermediary as it cannot be serialized.
Adapts this {@link ResolvableType} to a {@link VariableResolver}.
Custom serialization support for {@link #NONE}.
Return a {@link ResolvableType} for the specified {@link Class}, using the full generic type information for assignability checks. For example: {@code ResolvableType.forClass(MyArrayList.class)}. equivalent to {@code Object.class} for typical use cases here}
Return a {@link ResolvableType} for the specified {@link Class}, doing assignability checks against the raw class only (analogous to {@link Class#isAssignableFrom}, which this serves as a wrapper for. For example: {@code ResolvableType.forClass(MyArrayList.class)}. equivalent to {@code Object.class} for typical use cases here}
Return a {@link ResolvableType} for the specified {@link Class} with a given implementation. For example: {@code ResolvableType.forClass(List.class, MyArrayList.class)}. implementation class
Return a {@link ResolvableType} for the specified {@link Class} with pre-declared generics.
Return a {@link ResolvableType} for the specified instance. The instance does not convey generic information but if it implements {@link ResolvableTypeProvider} a more precise {@link ResolvableType} can be used than the simple one based on the {@link #forClass(Class) Class instance}.
Return a {@link ResolvableType} for the specified {@link Field}.
Return a {@link ResolvableType} for the specified {@link Field} with a given implementation. <p>Use this variant when the class that declares the field includes generic parameter variables that are satisfied by the implementation class.
Return a {@link ResolvableType} for the specified {@link Field} with a given implementation. <p>Use this variant when the class that declares the field includes generic parameter variables that are satisfied by the implementation type.
Return a {@link ResolvableType} for the specified {@link Field} with the given nesting level. generic type; etc)
Return a {@link ResolvableType} for the specified {@link Field} with a given implementation and the given nesting level. <p>Use this variant when the class that declares the field includes generic parameter variables that are satisfied by the implementation class. generic type; etc)
Return a {@link ResolvableType} for the specified {@link Constructor} parameter.
Return a {@link ResolvableType} for the specified {@link Constructor} parameter with a given implementation. Use this variant when the class that declares the constructor includes generic parameter variables that are satisfied by the implementation class.
Return a {@link ResolvableType} for the specified {@link Method} return type.
Return a {@link ResolvableType} for the specified {@link Method} return type. Use this variant when the class that declares the method includes generic parameter variables that are satisfied by the implementation class.
Return a {@link ResolvableType} for the specified {@link Method} parameter.
Return a {@link ResolvableType} for the specified {@link Method} parameter with a given implementation. Use this variant when the class that declares the method includes generic parameter variables that are satisfied by the implementation class.
Return a {@link ResolvableType} for the specified {@link MethodParameter}.
Return a {@link ResolvableType} for the specified {@link MethodParameter} with a given implementation type. Use this variant when the class that declares the method includes generic parameter variables that are satisfied by the implementation type.
Return a {@link ResolvableType} for the specified {@link MethodParameter}, overriding the target type to resolve with a specific given type.
Resolve the top-level parameter type of the given {@code MethodParameter}.
Return a {@link ResolvableType} as a array of the specified {@code componentType}.
Return a {@link ResolvableType} for the specified {@link Type}. Note: The resulting {@link ResolvableType} may not be {@link Serializable}.
Return a {@link ResolvableType} for the specified {@link Type} backed by the given owner type. Note: The resulting {@link ResolvableType} may not be {@link Serializable}.
Return a {@link ResolvableType} for the specified {@link Type} backed by a given {@link VariableResolver}.
Clear the internal {@code ResolvableType} cache.
Internal constructor to create a new {@link WildcardBounds} instance.
Return {@code true} if this bounds is the same kind as the specified bounds.
Return {@code true} if this bounds is assignable to all the specified types.
Return the underlying bounds.
Get a {@link WildcardBounds} instance for the specified type, returning {@code null} if the specified type cannot be resolved to a {@link WildcardType}.
Return a {@link Serializable} variant of {@link Field#getGenericType()}.
Return a {@link Serializable} variant of {@link MethodParameter#getGenericParameterType()}.
Return a {@link Serializable} {@link Type} backed by a {@link TypeProvider} .
Return whether alias overriding is allowed. Default is {@code true}.
Determine whether the given name has the given alias registered.
Transitively retrieve all aliases for the given name.
Resolve all alias target names and aliases registered in this factory, applying the given StringValueResolver to them. <p>The value resolver may for example resolve placeholders in target bean names and even in alias names.
Check whether the given name points back to the given alias as an alias in the other direction already, catching a circular reference upfront and throwing a corresponding IllegalStateException.
Determine the raw name, resolving aliases to canonical names.
Programmatically set a local property, overriding an entry in the {@code spring.properties} file (if any).
Retrieve the property value for the given key, checking local Spring properties first and falling back to JVM-level system properties.
Programmatically set a local flag to "true", overriding an entry in the {@code spring.properties} file (if any).
Retrieve the flag for the given property key. {@code} false otherwise
Return the full version string of the present Spring codebase, or {@code null} if it cannot be determined.
Create a new {@code SpringObjenesis} instance with the standard instantiator strategy.
Create a new {@code SpringObjenesis} instance with the given standard instantiator strategy.
Return whether this Objenesis instance is worth trying for instance creation, i.e. whether it hasn't been used yet or is known to work. <p>If the configured Objenesis instantiator strategy has been identified to not work on the current JVM at all or if the "spring.objenesis.ignore" property has been set to "true", this method returns {@code false}.
Create a new instance of the given class via Objenesis. (typically {@code true} but can be set to {@code false} e.g. for reloadable classes)
Create an instance with the supplied settings.
The initial interval in milliseconds.
Return the initial interval in milliseconds.
The value to multiply the current interval by for each retry attempt.
Return the value to multiply the current interval by for each retry attempt.
The maximum back off time.
Return the maximum back off time.
The maximum elapsed time in milliseconds after which a call to {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.
Return the maximum elapsed time in milliseconds after which a call to {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.
Create an instance.
Set the interval between two attempts in milliseconds.
Return the interval between two attempts in milliseconds.
Set the maximum number of attempts in milliseconds.
Return the maximum number of attempts in milliseconds.
Constructs a new {@code FutureAdapter} with the given adaptee.
Returns the adaptee.
Adapts the given adaptee's result into T.
Construct a new {@code ListenableFutureAdapter} with the given adaptee.
Add the given callback to this registry.
Add the given failure callback to this registry.
Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all added callbacks with the given result.
Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all added callbacks with the given {@code Throwable}.
Create a new {@code ListenableFutureTask} that will, upon running, execute the given {@link Callable}.
Create a {@code ListenableFutureTask} that will, upon running, execute the given {@link Runnable}, and arrange that {@link #get()} will return the given result on successful completion.
Set the value of this future. This method will return {@code true} if the value was set successfully, or {@code false} if the future has already been set or cancelled.
Set the exception of this future. This method will return {@code true} if the exception was set successfully, or {@code false} if the future has already been set or cancelled.
Convert a namespace URI and DOM or SAX qualified name to a {@code QName}. The qualified name can have the form {@code prefix:localname} or {@code localName}.
Convert a {@code QName} to a qualified name, as used by DOM and SAX. The returned string has a format of {@code prefix:localName} if the prefix is set, or just {@code localName} if not.
Template method that parses the StAX reader passed at construction-time.
End the prefix mapping for the given prefix.
Creates a new instance of the {@code DomContentHandler} with the given node.
Retrieves all child elements of the given DOM element that match any of the given element names. Only looks at the direct child level of the given element; do not go into further depth (in contrast to the DOM API's {@code getElementsByTagName} method).
Retrieves all child elements of the given DOM element that match the given element name. Only look at the direct child level of the given element; do not go into further depth (in contrast to the DOM API's {@code getElementsByTagName} method).
Utility method that returns the first child element identified by its name.
Utility method that returns the first child element value identified by its name.
Retrieves all child elements of the given DOM element
Extracts the text value from the given DOM element, ignoring XML comments. <p>Appends all CharacterData nodes and EntityReference nodes into a single String value, excluding Comment nodes. Only exposes actual user-specified text, no default values of any kind.
Namespace-aware equals comparison. Returns {@code true} if either {@link Node#getLocalName} or {@link Node#getNodeName} equals {@code desiredName}, otherwise returns {@code false}.
Returns a SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s.
Matches the given node's name and local name against the given desired name.
Matches the given node's name and local name against the given desired names.
Set the bindings for this namespace context. The supplied map must consist of string key value pairs.
Bind the given namespace as default namespace.
Bind the given prefix to the given namespace.
Remove the given prefix from this context.
Remove all declared prefixes.
Return all declared prefixes.
Create a new SimpleSaxErrorHandler for the given Commons Logging logger instance.
Create a new SimpleTransformErrorListener for the given Commons Logging logger instance.
Construct a new instance of the {@code StaxEventContentHandler} that writes to the given {@code XMLEventWriter}. A default {@code XMLEventFactory} will be created.
Construct a new instance of the {@code StaxEventContentHandler} that uses the given event factory to create events and writes to the given {@code XMLEventConsumer}.
Constructs a new instance of the {@code StaxEventXmlReader} that reads from the given {@code XMLEventReader}. The supplied event reader must be in {@code XMLStreamConstants.START_DOCUMENT} or {@code XMLStreamConstants.START_ELEMENT} state.
Construct a new instance of the {@code StaxResult} with the specified {@code XMLStreamWriter}.
Construct a new instance of the {@code StaxResult} with the specified {@code XMLEventWriter}.
Return the {@code XMLEventWriter} used by this {@code StaxResult}. If this {@code StaxResult} was created with an {@code XMLStreamWriter}, the result will be {@code null}.
Return the {@code XMLStreamWriter} used by this {@code StaxResult}. If this {@code StaxResult} was created with an {@code XMLEventConsumer}, the result will be {@code null}.
Construct a new instance of the {@code StaxSource} with the specified {@code XMLStreamReader}. The supplied stream reader must be in {@code XMLStreamConstants.START_DOCUMENT} or {@code XMLStreamConstants.START_ELEMENT} state.
Construct a new instance of the {@code StaxSource} with the specified {@code XMLEventReader}. The supplied event reader must be in {@code XMLStreamConstants.START_DOCUMENT} or {@code XMLStreamConstants.START_ELEMENT} state.
Return the {@code XMLEventReader} used by this {@code StaxSource}. If this {@code StaxSource} was created with an {@code XMLStreamReader}, the result will be {@code null}.
Return the {@code XMLStreamReader} used by this {@code StaxSource}. If this {@code StaxSource} was created with an {@code XMLEventReader}, the result will be {@code null}.
Construct a new instance of the {@code StaxStreamXmlReader} that reads from the given {@code XMLStreamReader}. The supplied stream reader must be in {@code XMLStreamConstants.START_DOCUMENT} or {@code XMLStreamConstants.START_ELEMENT} state.
Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLStreamReader}.
Create a JAXP 1.4 a {@link StAXSource} for the given {@link XMLEventReader}.
Create a custom, non-JAXP 1.4 StAX {@link Source} for the given {@link XMLStreamReader}.
Create a custom, non-JAXP 1.4 StAX {@link Source} for the given {@link XMLEventReader}.
Indicate whether the given {@link Source} is a JAXP 1.4 StAX Source or custom StAX Source. custom StAX Source; {@code false} otherwise
Return the {@link XMLStreamReader} for the given StAX Source. or custom StAX Source
Return the {@link XMLEventReader} for the given StAX Source. or custom StAX Source
Create a JAXP 1.4 {@link StAXResult} for the given {@link XMLStreamWriter}.
Create a JAXP 1.4 {@link StAXResult} for the given {@link XMLEventWriter}.
Create a custom, non-JAXP 1.4 StAX {@link Result} for the given {@link XMLStreamWriter}.
Create a custom, non-JAXP 1.4 StAX {@link Result} for the given {@link XMLEventWriter}.
Indicate whether the given {@link Result} is a JAXP 1.4 StAX Result or custom StAX Result. custom StAX Result; {@code false} otherwise
Return the {@link XMLStreamWriter} for the given StAX Result. or custom StAX Result
Return the {@link XMLEventWriter} for the given StAX Result. or custom StAX Result
Create a SAX {@link ContentHandler} that writes to the given StAX {@link XMLStreamWriter}.
Create a SAX {@link ContentHandler} that writes events to the given StAX {@link XMLEventWriter}.
Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLStreamReader}.
Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLEventReader}.
Return a {@link XMLStreamReader} that reads from a {@link XMLEventReader}. Useful because the StAX {@code XMLInputFactory} allows one to create an event reader from a stream reader, but not vice-versa.
Return a {@link XMLStreamWriter} that writes to a {@link XMLEventWriter}.
Enable indenting for the supplied {@link javax.xml.transform.Transformer}. <p>If the underlying XSLT engine is Xalan, then the special output key {@code indent-amount} will be also be set to a value of {@link #DEFAULT_INDENT_AMOUNT} characters.
Disable indenting for the supplied {@link javax.xml.transform.Transformer}.
Detect the validation mode for the XML document in the supplied {@link InputStream}. Note that the supplied {@link InputStream} is closed by this method before returning.
Does the content contain the the DTD DOCTYPE declaration?
Does the supplied content contain an XML opening tag. If the parse state is currently in an XML comment then this method always returns false. It is expected that all comment tokens will have consumed for the supplied content before passing the remainder to this method.
Consumes all the leading comment data in the given String and returns the remaining content, which may be empty since the supplied content might be all comment data. For our purposes it is only important to strip leading comment content on a line since the first piece of non comment content will be either the DOCTYPE declaration or the root element of the document.
Consume the next comment token, update the "inComment" flag and return the remaining content.
Try to consume the {@link #START_COMMENT} token.
Try to consume the supplied token against the supplied content and update the in comment parse state to the supplied value. Returns the index into the content which is after the token or -1 if the token is not found.
Create a new instance with the {@link #DEFAULT_PATH_SEPARATOR}.
A convenient, alternative constructor to use with a custom path separator.
Set the path separator to use for pattern parsing. <p>Default is "/", as in Ant.
Specify whether to perform pattern matching in a case-sensitive fashion. <p>Default is {@code true}. Switch this to {@code false} for case-insensitive matching.
Specify whether to trim tokenized paths and patterns. <p>Default is {@code true}.
Specify whether to cache parsed pattern metadata for patterns passed into this matcher's {@link #match} method. A value of {@code true} activates an unlimited pattern cache; a value of {@code false} turns the pattern cache off completely. <p>Default is for the cache to be on, but with the variant to automatically turn it off when encountering too many patterns to cache at runtime (the threshold is 65536), assuming that arbitrary permutations of patterns are coming in, with little chance for encountering a recurring pattern.
Actually match the given {@code path} against the given {@code pattern}. as far as the given base path goes is sufficient)
Tokenize the given path pattern into parts, based on this matcher's settings. <p>Performs caching based on {@link #setCachePatterns}, delegating to {@link #tokenizePath(String)} for the actual tokenization algorithm.
Tokenize the given path String into parts, based on this matcher's settings.
Test whether or not a string matches against a pattern.
Build or retrieve an {@link AntPathStringMatcher} for the given pattern. <p>The default implementation checks this AntPathMatcher's internal cache (see {@link #setCachePatterns}), creating a new AntPathStringMatcher instance if no cached copy is found. <p>When encountering too many patterns to cache at runtime (the threshold is 65536), it turns the default cache off, assuming that arbitrary permutations of patterns are coming in, with little chance for encountering a recurring pattern. <p>This method may be overridden to implement a custom cache strategy.
Main entry point.
Returns the length of the given pattern, where template variables are considered to be 1 long.
Assert that the provided object is an instance of the provided class. <pre class="code">Assert.instanceOf(Foo.class, foo);</pre> the function itself, and which may be used to provide context. It should normally end in ":" or "." so that the generated message looks OK when appended to it.
Assert that {@code superType.isAssignableFrom(subType)} is {@code true}. <pre class="code">Assert.isAssignable(Number.class, myClass);</pre> the function itself, and which may be used to provide context. It should normally end in ":" or "." so that the generated message looks OK when appended to it.
Creates a new {@code AutoPopulatingList} that is backed by a standard {@link ArrayList} and adds new instances of the supplied {@link Class element Class} to the backing {@link List} on demand.
Creates a new {@code AutoPopulatingList} that is backed by the supplied {@link List} and adds new instances of the supplied {@link Class element Class} to the backing {@link List} on demand.
Creates a new {@code AutoPopulatingList} that is backed by a standard {@link ArrayList} and creates new elements on demand using the supplied {@link ElementFactory}.
Creates a new {@code AutoPopulatingList} that is backed by the supplied {@link List} and creates new elements on demand using the supplied {@link ElementFactory}.
Create the element for the supplied index. (any exception thrown by a target constructor should be propagated as-is)
JDK 8's java.util.Base64 class present?
Apache Commons Codec present on the classpath?
Assert that Byte64 encoding between byte arrays is actually supported.
Base64-encode the given byte array. supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime
Base64-decode the given byte array. supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime
Base64-encode the given byte array using the RFC 4648 "URL and Filename Safe Alphabet". supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime
Base64-decode the given byte array using the RFC 4648 "URL and Filename Safe Alphabet". supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime
Base64-encode the given byte array to a String using the RFC 4648 "URL and Filename Safe Alphabet". (or {@code null} if the input was {@code null}) supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime
Base64-decode the given byte array from an UTF-8 String using the RFC 4648 "URL and Filename Safe Alphabet". supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime
Return the short string name of a Java class in uncapitalized JavaBeans property format. Strips the outer class name in case of an inner class.
Given a method, which may come from an interface, and a target class used in the current reflective invocation, find the corresponding target method if there is one. E.g. the method may be {@code IFoo.bar()} and the target class may be {@code DefaultFoo}. In this case, the method may be {@code DefaultFoo.bar()}. This enables attributes on that method to be found. <p><b>NOTE:</b> In contrast to {@link org.springframework.aop.support.AopUtils#getMostSpecificMethod}, this method does <i>not</i> resolve Java 5 bridge methods automatically. Call {@link org.springframework.core.BridgeMethodResolver#findBridgedMethod} if bridge method resolution is desirable (e.g. for obtaining metadata from the original method definition). <p><b>NOTE:</b> Since Spring 3.1.1, if Java security settings disallow reflective access (e.g. calls to {@code Class#getDeclaredMethods} etc, this implementation will fall back to returning the originally provided method. May be {@code null} or may not even implement the method. {@code targetClass} doesn't implement it or is {@code null}
Determine whether the given method is declared by the user or at least pointing to a user-declared method. <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the {@code GroovyObject} interface (for interface methods; on an implementation class, implementations of the {@code GroovyObject} methods will be marked as synthetic anyway). Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered as user-level methods since they are eventually pointing to a user-declared generic method.
Return {@code true} if the supplied Collection is {@code null} or empty. Otherwise, return {@code false}.
Return {@code true} if the supplied Map is {@code null} or empty. Otherwise, return {@code false}.
Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}.
Create a new CommonsLogWriter for the given Commons Logging logger.
Add given iterator to this composite.
Set the maximum number of concurrent access attempts allowed. -1 indicates unbounded concurrency. <p>In principle, this limit can be changed at runtime, although it is generally designed as a config time setting. <p>NOTE: Do not switch between -1 and any concrete limit at runtime, as this will lead to inconsistent concurrency counts: A limit of -1 effectively turns off concurrency counting completely.
Return the maximum number of concurrent access attempts allowed.
To be invoked before the main execution logic of concrete subclasses. <p>This implementation applies the concurrency throttle.
To be invoked after the main execution logic of concrete subclasses.
Create a new CustomizableThreadCreator with default thread name prefix.
Create a new CustomizableThreadCreator with the given thread name prefix.
Specify the prefix to use for the names of newly created threads. Default is "SimpleAsyncTaskExecutor-".
Return the thread name prefix to use for the names of newly created threads.
Set the priority of the threads that this factory creates. Default is 5.
Return the priority of the threads that this factory creates.
Set whether this factory is supposed to create daemon threads, just executing as long as the application itself is running. <p>Default is "false": Concrete factories usually support explicit cancelling. Hence, if the application shuts down, Runnables will by default finish their execution. <p>Specify "true" for eager shutdown of threads which still actively execute a {@link Runnable} at the time that the application itself shuts down.
Return whether this factory should create daemon threads.
Specify the name of the thread group that threads should be created in.
Specify the thread group that threads should be created in.
Return the thread group that threads should be created in (or {@code null} for the default group).
Template method for the creation of a new {@link Thread}. <p>The default implementation creates a new Thread for the given {@link Runnable}, applying an appropriate thread name.
Return the thread name to use for a newly created {@link Thread}. <p>The default implementation returns the specified thread name prefix with an increasing thread count appended: e.g. "SimpleAsyncTaskExecutor-0".
Build the default thread name prefix for this factory.
Calculate the MD5 digest of the given bytes.
Calculate the MD5 digest of the given InputStream.
Return a hexadecimal string representation of the MD5 digest of the given bytes.
Return a hexadecimal string representation of the MD5 digest of the given inputStream.
Append a hexadecimal string representation of the MD5 digest of the given bytes to the given {@link StringBuilder}.
Append a hexadecimal string representation of the MD5 digest of the given inputStream to the given {@link StringBuilder}.
Create a new {@link MessageDigest} with the given algorithm. Necessary because {@code MessageDigest} is not thread-safe.
Create a new <code>FastByteArrayOutputStream</code> with the default initial capacity of 256 bytes.
Create a new <code>FastByteArrayOutputStream</code> with the specified initial capacity.
Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.
Convert the stream's data to a byte array and return the byte array. <p>Also replaces the internal structures with the byte array to conserve memory: if the byte array is being made anyways, mind as well as use it. This approach also means that if this method is called twice without any writes in between, the second call is a no-op. <p>This method is "unsafe" as it returns the internal buffer. Callers should not modify the returned buffer.
Creates a newly allocated byte array. <p>Its size is the current size of this output stream and the valid contents of the buffer have been copied into it.</p>
Reset the contents of this <code>FastByteArrayOutputStream</code>. <p>All currently accumulated output in the output stream is discarded. The output stream can be used again.
Get an {@link InputStream} to retrieve the data in this OutputStream. <p>Note that if any methods are called on the OutputStream (including, but not limited to, any of the write methods, {@link #reset()}, {@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the {@link java.io.InputStream}'s behavior is undefined.
Write the buffers content to the given OutputStream.
Resize the internal buffer size to a specified capacity. the actual size of the content stored in the buffer already
Create a new buffer and store it in the LinkedList <p>Adds a new buffer that can store at least {@code minCapacity} bytes.
Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).
Create a new <code>FastByteArrayOutputStreamInputStream</code> backed by the given <code>FastByteArrayOutputStream</code>.
Update the message digest with the remaining bytes in this stream.
Update the message digest with the next len bytes in this stream. Avoids creating new byte arrays and use internal buffers for performance.
Delete the supplied {@link File} - for directories, recursively delete any nested directories or files as well. otherwise {@code false}
Recursively copy the contents of the {@code src} file/directory to the {@code dest} file/directory.
Actually copy the contents of the {@code src} file/directory to the {@code dest} file/directory.
Create a new instance based on includes/excludes collections. <p>A particular element will match if it "matches" the one of the element in the includes list and  does not match one of the element in the excludes list. <p>Subclasses may redefine what matching means. By default, an element match with another if it is equals according to {@link Object#equals(Object)} <p>If both collections are empty, {@code matchIfEmpty} defines if an element matches or not. collections are empty
Determine if the specified {code instance} matches this filter.
Determine if the specified {@code instance} is equal to the specified {@code candidate}.
Determine if the specified {@code instance} matches one of the candidates. <p>If the candidates collection is {@code null}, returns {@code false}.
Create a new InvalidContentTypeException for the given content type.
Return the offending content type.
Copy constructor: Create a new LinkedMultiValueMap with the same mappings as the specified Map. Note that this will be a shallow copy; its value-holding List entries will get reused and therefore cannot get modified independently.
Create a deep copy of this Map.
Initialize log4j from the given file location, with no config file refreshing. Assumes an XML file in case of a ".xml" file extension, and a properties file otherwise. (e.g. "classpath:myLog4j.properties"), an absolute file URL (e.g. "file:C:/log4j.properties), or a plain absolute path in the file system (e.g. "C:/log4j.properties")
Initialize log4j from the given location, with the given refresh interval for the config file. Assumes an XML file in case of a ".xml" file extension, and a properties file otherwise. <p>Log4j's watchdog thread will asynchronously check whether the timestamp of the config file has changed, using the given interval between checks. A refresh interval of 1000 milliseconds (one second), which allows to do on-demand log level changes with immediate effect, is not unfeasible. <p><b>WARNING:</b> Log4j's watchdog thread does not terminate until VM shutdown; in particular, it does not terminate on LogManager shutdown. Therefore, it is recommended to <i>not</i> use config file refreshing in a production J2EE environment; the watchdog thread would not stop on application shutdown there. (e.g. "classpath:myLog4j.properties"), an absolute file URL (e.g. "file:C:/log4j.properties), or a plain absolute path in the file system (e.g. "C:/log4j.properties")
Shut down log4j, properly releasing all file locks. <p>This isn't strictly necessary, but recommended for shutting down log4j in a scenario where the host VM stays alive (for example, when shutting down an application in a J2EE environment).
Set the specified system property to the current working directory. <p>This can be used e.g. for test environments, for applications that leverage Log4jWebConfigurer's "webAppRootKey" support in a web environment. (for example: "demo.root", used as "${demo.root}/WEB-INF/demo.log")
Set the target class on which to call the target method. Only necessary when the target method is static; else, a target object needs to be specified anyway.
Return the target class on which to call the target method.
Set the target object on which to call the target method. Only necessary when the target method is not static; else, a target class is sufficient.
Return the target object on which to call the target method.
Set the name of the method to be invoked. Refers to either a static method or a non-static method, depending on a target object being set.
Return the name of the method to be invoked.
Set a fully qualified static method name to invoke, e.g. "example.MyExampleClass.myExampleMethod". Convenient alternative to specifying targetClass and targetMethod.
Set arguments for the method invocation. If this property is not set, or the Object array is of length 0, a method with no arguments is assumed.
Return the arguments for the method invocation.
Prepare the specified method. The method can be invoked any number of times afterwards.
Resolve the given class name into a Class. <p>The default implementations uses {@code ClassUtils.forName}, using the thread context class loader.
Find a matching method with the specified name for the specified arguments.
Return the prepared Method object that will be invoked. <p>Can for example be used to determine the return type.
Return whether this invoker has been prepared already, i.e. whether it allows access to {@link #getPreparedMethod()} already.
Invoke the specified method. <p>The invoker needs to have been prepared before. or {@code null} if the method has a void return type
Algorithm that judges the match between the declared parameter types of a candidate method and a specific list of arguments that this method is supposed to be invoked with. <p>Determines a weight that represents the class hierarchy difference between types and arguments. A direct match, i.e. type Integer -> arg of class Integer, does not increase the result - all direct matches means weight 0. A match between type Object and arg of class Integer would increase the weight by 2, due to the superclass 2 steps up in the hierarchy (i.e. Object) being the last one that still matches the required type Object. Type Number and class Integer would increase the weight by 1 accordingly, due to the superclass 1 step up the hierarchy (i.e. Number) still matching the required type Number. Therefore, with an arg of type Integer, a constructor (Integer) would be preferred to a constructor (Number) which would in turn be preferred to a constructor (Object). All argument weights get accumulated. <p>Note: This is the algorithm used by MethodInvoker itself and also the algorithm used for constructor and factory method selection in Spring's bean container (in case of lenient constructor resolution which is the default for regular bean definitions).
Create a new {@code MimeType} for the given primary type. <p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42;"</code>, and the parameters are empty.
Create a new {@code MimeType} for the given primary type and subtype. <p>The parameters are empty.
Create a new {@code MimeType} for the given type, subtype, and character set.
Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType}, and allows to set the specified character set.
Copy-constructor that copies the type and subtype of the given {@code MimeType}, and allows for different parameter.
Create a new {@code MimeType} for the given type, subtype, and parameters.
Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2.
Indicates whether the {@linkplain #getType() type} is the wildcard character <code>&#42;</code> or not.
Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character <code>&#42;</code> or the wildcard character followed by a suffix (e.g. <code>&#42;+xml</code>).
Indicates whether this media type is concrete, i.e. whether neither the type nor the subtype is a wildcard character <code>&#42;</code>.
Indicate whether this {@code MediaType} includes the given media type. <p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml} includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric. {@code false} otherwise
Indicate whether this {@code MediaType} is compatible with the given media type. <p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa. In effect, this method is similar to {@link #includes}, except that it <b>is</b> symmetric. {@code false} otherwise
Determine if the parameters in this {@code MimeType} and the supplied {@code MimeType} are equal, performing case-insensitive comparisons for {@link Charset}s.
Parse the given String value into a {@code MimeType} object, with this method name following the 'valueOf' naming convention (as supported by {@link org.springframework.core.convert.ConversionService}.
Parse the given String into a single {@code MimeType}.
Parse the given, comma-separated string into a list of {@code MimeType} objects.
Return a string representation of the given list of {@code MimeType} objects.
Sorts the given list of {@code MimeType} objects by specificity. <p>Given two mime types: <ol> <li>if either mime type has a {@linkplain MimeType#isWildcardType() wildcard type}, then the mime type without the wildcard is ordered before the other.</li> <li>if the two mime types have different {@linkplain MimeType#getType() types}, then they are considered equal and remain their current order.</li> <li>if either mime type has a {@linkplain MimeType#isWildcardSubtype() wildcard subtype} , then the mime type without the wildcard is sorted before the other.</li> <li>if the two mime types have different {@linkplain MimeType#getSubtype() subtypes}, then they are considered equal and remain their current order.</li> <li>if the two mime types have a different amount of {@linkplain MimeType#getParameter(String) parameters}, then the mime type with the most parameters is ordered before the other.</li> </ol> <p>For example: <blockquote>audio/basic &lt; audio/* &lt; *&#047;*</blockquote> <blockquote>audio/basic;level=1 &lt; audio/basic</blockquote> <blockquote>audio/basic == text/html</blockquote> <blockquote>audio/basic == audio/wave</blockquote> and Content, section 5.3.2</a>
Generate a random MIME boundary as bytes, often used in multipart mime types.
Generate a random MIME boundary as String, often used in multipart mime types.
Check for a {@code BigInteger}/{@code BigDecimal} long overflow before returning the given number as a long value.
Raise an <em>overflow</em> exception for the given number and target class.
Parse the given {@code text} into a {@link Number} instance of the given target class, using the supplied {@link NumberFormat}. <p>Trims the input {@code String} before attempting to parse the number. {@code null}, this method falls back to {@link #parseNumber(String, Class)}) (i.e. not a standard Number subclass as included in the JDK)
Determine whether the given {@code value} String indicates a hex number, i.e. needs to be passed into {@code Integer.decode} instead of {@code Integer.valueOf}, etc.
Decode a {@link java.math.BigInteger} from the supplied {@link String} value. <p>Supports decimal, hex, and octal notation.
Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix. Unresolvable placeholders are ignored.
Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix. and the associated default value, if any be ignored ({@code true}) or cause an exception ({@code false})
Replaces all placeholders of format {@code ${name}} with the corresponding property from the supplied {@link Properties}.
Replaces all placeholders of format {@code ${name}} with the value returned from the supplied {@link PlaceholderResolver}.
Rethrow the given {@link Throwable exception}, which is presumably the <em>target exception</em> of an {@link InvocationTargetException}. Should only be called if no checked exception is expected to be thrown by the target method. <p>Rethrows the underlying exception cast to an {@link RuntimeException} or {@link Error} if appropriate; otherwise, throws an {@link IllegalStateException}.
Rethrow the given {@link Throwable exception}, which is presumably the <em>target exception</em> of an {@link InvocationTargetException}. Should only be called if no checked exception is expected to be thrown by the target method. <p>Rethrows the underlying exception cast to an {@link Exception} or {@link Error} if appropriate; otherwise, throws an {@link IllegalStateException}.
Determine whether the given method explicitly declares the given exception or one of its superclasses, which means that an exception of that type can be propagated as-is within a reflective invocation. {@code false} if it needs to be wrapped
Determine whether the given method is a CGLIB 'renamed' method, following the pattern "CGLIB$methodName$0".
Perform the given callback operation on all matching methods of the given class, as locally declared or equivalent thereof (such as default methods on Java 8 based interfaces that the given class implements).
Get all declared methods on the leaf class and all superclasses. Leaf class methods are included first.
Get the unique set of declared methods on the leaf class and all superclasses. Leaf class methods are included first and while traversing the superclass hierarchy any methods found with signatures matching a method already included are filtered out.
This variant retrieves {@link Class#getDeclaredMethods()} from a local cache in order to avoid the JVM's SecurityManager check and defensive array copying. In addition, it also includes Java 8 default methods from locally implemented interfaces, since those are effectively to be treated just like declared methods.
Invoke the given callback on all fields in the target class, going up the class hierarchy to get all declared fields.
This variant retrieves {@link Class#getDeclaredFields()} from a local cache in order to avoid the JVM's SecurityManager check and defensive array copying.
Clear the internal method/field cache.
Create a new <code>ResizableByteArrayOutputStream</code> with the default initial capacity of 256 bytes.
Create a new <code>ResizableByteArrayOutputStream</code> with the specified initial capacity.
Grow the internal buffer size.
Return the current size of this stream's internal buffer.
Determine whether the given URL points to a resource in a jar file, that is, has protocol "jar", "zip", "vfszip" or "wsjar".
Determine whether the given URL points to a jar file itself, that is, has protocol "file" and ends with the ".jar" extension.
Extract the URL for the outermost archive from the given jar/war URL (which may point to a resource in a jar file or to a jar file itself). <p>In the case of a jar file nested within a war file, this will return a URL to the war file since that is the one resolvable in the file system.
Serialize the given object to a byte array.
Deserialize the byte array into an object.
Although {@code SocketUtils} consists solely of static utility methods, this constructor is intentionally {@code public}. <h4>Rationale</h4> <p>Static methods from this class may be invoked from within XML configuration files using the Spring Expression Language (SpEL) and the following syntax. <pre><code>&lt;bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt;</code></pre> If this constructor were {@code private}, you would be required to supply the fully qualified class name to SpEL's {@code T()} function for each usage. Thus, the fact that this constructor is {@code public} allows you to reduce boilerplate configuration with SpEL as can be seen in the following example. <pre><code>&lt;bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt; &lt;bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt; &lt;bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt;</code></pre>
Find an available TCP port randomly selected from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}].
Find an available TCP port randomly selected from the range [{@code minPort}, {@value #PORT_RANGE_MAX}].
Find an available TCP port randomly selected from the range [{@code minPort}, {@code maxPort}].
Find the requested number of available TCP ports, each randomly selected from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}].
Find the requested number of available TCP ports, each randomly selected from the range [{@code minPort}, {@code maxPort}].
Find an available UDP port randomly selected from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}].
Find an available UDP port randomly selected from the range [{@code minPort}, {@value #PORT_RANGE_MAX}].
Find an available UDP port randomly selected from the range [{@code minPort}, {@code maxPort}].
Find the requested number of available UDP ports, each randomly selected from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}].
Find the requested number of available UDP ports, each randomly selected from the range [{@code minPort}, {@code maxPort}].
Find a pseudo-random port number within the range [{@code minPort}, {@code maxPort}].
Find an available port for this {@code SocketType}, randomly selected from the range [{@code minPort}, {@code maxPort}].
Find the requested number of available ports for this {@code SocketType}, each randomly selected from the range [{@code minPort}, {@code maxPort}].
Construct a new stop watch with the given id. Does not start any task. Handy when we have output from multiple stop watches and need to distinguish between them.
Return the id of this stop watch, as specified on construction.
Determine whether the TaskInfo array is built over time. Set this to "false" when using a StopWatch for millions of intervals, or the task info structure will consume excessive memory. Default is "true".
Stop the current task. The results are undefined if timing methods are called without invoking at least one pair {@code #start()} / {@code #stop()} methods.
Return the name of the currently running task, if any.
Return the time taken by the last task.
Return the name of the last task.
Return the last task as a TaskInfo object.
Return the total time in milliseconds for all tasks.
Return the total time in seconds for all tasks.
Return the number of tasks timed.
Return an array of the data for tasks performed.
Return the time in milliseconds this task took.
Return the time in seconds this task took.
Return an efficient empty {@link InputStream}.
Return a variant of the given {@link InputStream} where calling {@link InputStream#close() close()} has no effect.
Return a variant of the given {@link OutputStream} where calling {@link OutputStream#close() close()} has no effect.
Check whether the given {@code String} is empty. <p>This method accepts any Object as an argument, comparing it to {@code null} and the empty String. As a consequence, this method will never return {@code true} for a non-null non-String object. <p>The Object signature is useful for general attribute handling code that commonly deals with Strings but generally has to iterate over Objects since attributes may e.g. be primitive value objects as well.
Check that the given {@code CharSequence} is neither {@code null} nor of length 0. <p>Note: this method returns {@code true} for a {@code CharSequence} that purely consists of whitespace. <p><pre class="code"> StringUtils.hasLength(null) = false StringUtils.hasLength("") = false StringUtils.hasLength(" ") = true StringUtils.hasLength("Hello") = true </pre>
Check that the given {@code String} is neither {@code null} nor of length 0. <p>Note: this method returns {@code true} for a {@code String} that purely consists of whitespace.
Check whether the given {@code CharSequence} contains actual <em>text</em>. <p>More specifically, this method returns {@code true} if the {@code CharSequence} is not {@code null}, its length is greater than 0, and it contains at least one non-whitespace character. <p><pre class="code"> StringUtils.hasText(null) = false StringUtils.hasText("") = false StringUtils.hasText(" ") = false StringUtils.hasText("12345") = true StringUtils.hasText(" 12345 ") = true </pre> its length is greater than 0, and it does not contain whitespace only
Check whether the given {@code String} contains actual <em>text</em>. <p>More specifically, this method returns {@code true} if the {@code String} is not {@code null}, its length is greater than 0, and it contains at least one non-whitespace character. length is greater than 0, and it does not contain whitespace only
Check whether the given {@code CharSequence} contains any whitespace characters. contains at least 1 whitespace character
Check whether the given {@code String} contains any whitespace characters. contains at least 1 whitespace character
Trim leading and trailing whitespace from the given {@code String}.
Trim <i>all</i> whitespace from the given {@code String}: leading, trailing, and in between characters.
Trim leading whitespace from the given {@code String}.
Trim trailing whitespace from the given {@code String}.
Trim all occurrences of the supplied leading character from the given {@code String}.
Trim all occurrences of the supplied trailing character from the given {@code String}.
Test if the given {@code String} starts with the specified prefix, ignoring upper/lower case.
Test if the given {@code String} ends with the specified suffix, ignoring upper/lower case.
Count the occurrences of the substring {@code sub} in string {@code str}.
Delete any character in a given {@code String}. E.g. "az\n" will delete 'a's, 'z's and new lines.
Quote the given {@code String} with single quotes. or {@code null} if the input was {@code null}
Turn the given Object into a {@code String} with single quotes if it is a {@code String}; keeping the Object as-is else. or the input object as-is if not a {@code String}
Capitalize a {@code String}, changing the first letter to upper case as per {@link Character#toUpperCase(char)}. No other letters are changed. string is {@code null}
Uncapitalize a {@code String}, changing the first letter to lower case as per {@link Character#toLowerCase(char)}. No other letters are changed. string is {@code null}
Extract the filename from the given Java resource path, e.g. {@code "mypath/myfile.txt" -> "myfile.txt"}.
Extract the filename extension from the given Java resource path, e.g. "mypath/myfile.txt" -> "txt".
Strip the filename extension from the given Java resource path, e.g. "mypath/myfile.txt" -> "mypath/myfile". or {@code null} if none
Apply the given relative path to the given Java resource path, assuming standard Java folder separation (i.e. "/" separators). (relative to the full file path above)
Parse the given {@code timeZoneString} value into a {@link TimeZone}. but throwing {@link IllegalArgumentException} in case of an invalid time zone specification
Append the given {@code String} to the given {@code String} array, returning a new array consisting of the input array contents plus the given {@code String}.
Concatenate the given {@code String} arrays into one, with overlapping array elements included twice. <p>The order of elements in the original arrays is preserved.
Merge the given {@code String} arrays into one, with overlapping array elements only included once. <p>The order of elements in the original arrays is preserved (with the exception of overlapping elements, which are only included on their first occurrence).
Turn given source {@code String} array into sorted array.
Copy the given {@code Collection} into a {@code String} array. <p>The {@code Collection} must contain {@code String} elements only. {@code Collection} was {@code null})
Copy the given Enumeration into a {@code String} array. The Enumeration must contain {@code String} elements only. Enumeration was {@code null})
Trim the elements of the given {@code String} array, calling {@code String.trim()} on each of them.
Remove duplicate strings from the given array. <p>As of 4.2, it preserves the original order, as it uses a {@link LinkedHashSet}.
Split a {@code String} at the first occurrence of the delimiter. Does not include the delimiter in the result. index 1 being after the delimiter (neither element includes the delimiter); or {@code null} if the delimiter wasn't found in the given input {@code String}
Take an array of strings and split each element based on the given delimiter. A {@code Properties} instance is then generated, with the left of the delimiter providing the key, and the right of the delimiter providing the value. <p>Will trim both the key and value before adding them to the {@code Properties} instance. or {@code null} if the array to process was {@code null} or empty
Take an array of strings and split each element based on the given delimiter. A {@code Properties} instance is then generated, with the left of the delimiter providing the key, and the right of the delimiter providing the value. <p>Will trim both the key and value before adding them to the {@code Properties} instance. prior to attempting the split operation (typically the quotation mark symbol), or {@code null} if no removal should occur or {@code null} if the array to process was {@code null} or empty
Tokenize the given {@code String} into a {@code String} array via a {@link StringTokenizer}. <p>Trims tokens and omits empty tokens. <p>The given {@code delimiters} string can consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; for multi-character delimiters, consider using {@link #delimitedListToStringArray}. (each of the characters is individually considered as a delimiter)
Tokenize the given {@code String} into a {@code String} array via a {@link StringTokenizer}. <p>The given {@code delimiters} string can consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; for multi-character delimiters, consider using {@link #delimitedListToStringArray}. (each of the characters is individually considered as a delimiter) (only applies to tokens that are empty after trimming; StringTokenizer will not consider subsequent delimiters as token in the first place). was {@code null})
Take a {@code String} that is a delimited list and convert it into a {@code String} array. <p>A single {@code delimiter} may consist of more than one character, but it will still be considered as a single delimiter string, rather than as bunch of potential delimiter characters, in contrast to {@link #tokenizeToStringArray}. rather than a bunch individual delimiter characters)
Take a {@code String} that is a delimited list and convert it into a {@code String} array. <p>A single {@code delimiter} may consist of more than one character, but it will still be considered as a single delimiter string, rather than as bunch of potential delimiter characters, in contrast to {@link #tokenizeToStringArray}. rather than a bunch individual delimiter characters) line breaks: e.g. "\r\n\f" will delete all new lines and line feeds in a {@code String}
Convert a comma delimited list (e.g., a row from a CSV file) into an array of strings.
Convert a comma delimited list (e.g., a row from a CSV file) into a set. <p>Note that this will suppress duplicates, and as of 4.2, the elements in the returned set will preserve the original order in a {@link LinkedHashSet}.
Convert a {@link Collection} to a delimited {@code String} (e.g. CSV). <p>Useful for {@code toString()} implementations.
Convert a {@code Collection} into a delimited {@code String} (e.g. CSV). <p>Useful for {@code toString()} implementations.
Convert a {@code Collection} into a delimited {@code String} (e.g., CSV). <p>Useful for {@code toString()} implementations.
Convert a {@code String} array into a delimited {@code String} (e.g. CSV). <p>Useful for {@code toString()} implementations.
Convert a {@code String} array into a comma delimited {@code String} (i.e., CSV). <p>Useful for {@code toString()} implementations.
Resolve {@code ${...}} placeholders in the given text, replacing them with corresponding system property values.
Resolve {@code ${...}} placeholders in the given text, replacing them with corresponding system property values. Unresolvable placeholders with no default value are ignored and passed through unchanged if the flag is set to {@code true}. and the "ignoreUnresolvablePlaceholders" flag is {@code false}
Update the message digest with the rest of the bytes in this stream. <p>Using this method is more optimized since it avoids creating new byte arrays for each call.
Update the message digest with the next len bytes in this stream. <p>Using this method is more optimized since it avoids creating new byte arrays for each call.
Start to monitor given handle object for becoming weakly reachable. When the handle isn't used anymore, the given listener will be called.
Add entry to internal map of tracked entries. Internal monitoring thread is started if not already running.
Remove entry from internal map of tracked entries.
Check whether to keep the monitoring thread alive, i.e. whether there are still entries being tracked.
The following "varargs" suppression is necessary for javac from OpenJDK (1.8.0_60-b27); however, Eclipse warns that it's unnecessary. See the following Eclipse issues for details.
Bridge/bridged method setup code copied from {@link org.springframework.core.BridgeMethodResolverTests#testWithGenericParameter()}.
Create a new {@code MockPropertySource} named {@value #MOCK_PROPERTIES_PROPERTY_SOURCE_NAME} that will maintain its own internal {@link Properties} instance.
Create a new {@code MockPropertySource} with the given name that will maintain its own internal {@link Properties} instance.
Create a new {@code MockPropertySource} named {@value #MOCK_PROPERTIES_PROPERTY_SOURCE_NAME} and backed by the given {@link Properties} object.
Create a new {@code MockPropertySource} with the given name and backed by the given {@link Properties} object
Set the given property on the underlying {@link Properties} object.
Assume that a particular {@link TestGroup} has been specified.
Assume that a particular {@link TestGroup} has been specified before executing the supplied {@link Executable}. <p>If the assumption fails, the executable will not be executed, but no {@link AssumptionViolatedException} will be thrown.
Assume that the specified log is not set to Trace or Debug.
Assume that we can load fonts. issue.
Determines if the specified version is the same as or greater than this version.
Returns the current running JDK version. If the current version cannot be determined {@link #JAVA_16} will be returned.
Verify the same invocations have been applied to two mocks. This is generally not the preferred way test with mockito and should be avoided if possible.
Parse the specified comma separated string of groups.
Loads a {@link ClassPathResource} qualified by the simple name of clazz, and relative to the package for clazz. <p>Example: given a clazz 'com.foo.BarTests' and a resourceSuffix of 'context.xml', this method will return a ClassPathResource representing com/foo/BarTests-context.xml <p>Intended for use loading context configuration XML files within JUnit tests.
Time a multi-threaded access to a cache.
should handle Salesman (only interface)
should handle Shopper (beats Greetable since it is a class)
should handle Customer (exact match)
should handle Regular (exact) and VIP (closest match)
Attempt to convert a typed value to an int using the supplied type converter.
Attempt to convert a typed value to a boolean using the supplied type converter.
Attempt to convert a typed value to a double using the supplied type converter.
Attempt to convert a typed value to a long using the supplied type converter.
Attempt to convert a typed value to a char using the supplied type converter.
Attempt to convert a typed value to a short using the supplied type converter.
Attempt to convert a typed value to a float using the supplied type converter.
Attempt to convert a typed value to a byte using the supplied type converter.
Default ParserContext instance for non-template expressions.
Helper that parses given expression string using the configured parser. The expression string can contain any number of expressions all contained in "${...}" markers. For instance: "foo${expr0}bar${expr1}". The static pieces of text will also be returned as Expressions that just return that static piece of text. As a result, evaluating all returned expressions and concatenating the results produces the complete evaluated string. Unwrapping is only done of the outermost delimiters found, so the string 'hello ${foo${abc}}' would break into the pieces 'hello ' and 'foo${abc}'. This means that expression languages that used ${..} as part of their functionality are supported without any problem. The parsing is aware of the structure of an embedded expression. It assumes that parentheses '(', square brackets '[' and curly brackets '}' must be in pairs within the expression unless they are within a string literal and a string literal starts and terminates with a single quote '.
Return true if the specified suffix can be found at the supplied position in the supplied expression string.
Copes with nesting, for example '${...${...}}' where the correct end for the first ${ is the final }.
Create a new TemplateParserContext with the default "#{" prefix and "}" suffix.
Create a new TemplateParserContext for the given prefix and suffix.
Determines the set of property resolvers that should be used to try and access a property on the specified target type. The resolvers are considered to be in an ordered list, however in the returned list any that are exact matches for the input target type (as opposed to 'general' resolvers that could work for any type) are placed at the start of the list. In addition, there are specific resolvers that exactly name the class in question and resolvers that name a specific class but it is a supertype of the class we have. These are put at the end of the specific resolvers set and will be tried after exactly matching accessors but before generic accessors.
Create a constructor reference. The first argument is the type, the rest are the parameters to the constructor call
Create a new ordinary object and return it.
Go through the list of registered constructor resolvers and see if any can find a constructor that takes the specified set of arguments.
Create an array and return it.
Produce a nice string for a given method name with specified arguments.
Produce a nice string for a given class object. For example, a string array will have the formatted name "java.lang.String[]".
Execute a function represented as a java.lang.reflect.Method.
Compute the arguments to the function, they are the children of this expression node.
If all the components of the list are constants, or lists that themselves contain constants, then a constant list can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage created.
Return whether this list is a constant value.
If all the components of the list are constants, or lists/maps that themselves contain constants, then a constant list can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage created.
Process the string form of a number, using the specified base if supplied and return an appropriate literal to hold it. Any suffix to indicate a long will be taken into account (either 'l' or 'L' is supported).
Decode the AccessException, throwing a lightweight evaluation exception or, if the cause was a RuntimeException, throw the RuntimeException directly.
Numeric comparison operators share very similar generated code, only differing in two comparison instructions.
Returns an object that indicates whether the input descriptors are compatible. A declared descriptor is what could statically be determined (e.g. from looking at the return value of a property accessor method) whilst an actual descriptor is the type of an actual object that was returned, which may differ. For generic types with unbound type variables the declared descriptor discovered may be 'Object' but from the actual descriptor it is possible to observe that the objects are really numeric values (e.g. ints).
Convert operand value to string using registered converter or using {@code toString} method.
Walk through a possible tree of nodes that combine strings and append them all to the same (on stack) StringBuilder.
Attempt to read the named property from the current context object.
Determines the set of property resolvers that should be used to try and access a property on the specified target type. The resolvers are considered to be in an ordered list, however in the returned list any that are exact matches for the input target type (as opposed to 'general' resolvers that could work for any type) are placed at the start of the list. In addition, there are specific resolvers that exactly name the class in question and resolvers that name a specific class but it is a supertype of the class we have. These are put at the end of the specific resolvers set and will be tried after exactly matching accessors but before generic accessors.
Check whether a node can be compiled to bytecode. The reasoning in each node may be different but will typically involve checking whether the exit type descriptor of the node is known and any relevant child nodes are compilable.
Generate the bytecode for this node into the supplied visitor. Context info about the current expression being compiled is available in the codeflow object. For example it will include information about the type of the object currently on the stack.
Ask an argument to generate its bytecode and then follow it up with any boxing/unboxing/checkcasting to ensure it matches the expected parameter descriptor.
Create a parser with some configured behavior.
logicalOrExpression : logicalAndExpression (OR^ logicalAndExpression)*;
logicalAndExpression : relationalExpression (AND^ relationalExpression)*;
relationalExpression : sumExpression (relationalOperator^ sumExpression)?;
sumExpression: productExpression ( (PLUS^ | MINUS^) productExpression)*;
productExpression: powerExpr ((STAR^ | DIV^| MOD^) powerExpr)* ;
powerExpr  : unaryExpression (POWER^ unaryExpression)? (INC || DEC) ;
unaryExpression: (PLUS^ | MINUS^ | BANG^ | INC^ | DEC^) unaryExpression | primaryExpression ;
primaryExpression : startNode (node)? -> ^(EXPRESSION startNode (node)?);
node : ((DOT dottedNode) | (SAFE_NAVI dottedNode) | nonDottedNode)+;
nonDottedNode: indexer;
dottedNode : ((methodOrProperty | functionOrVar
functionOrVar : (POUND ID LPAREN) => function | var function : POUND id=ID methodArgs -> ^(FUNCTIONREF[$id] methodArgs); var : POUND id=ID -> ^(VARIABLEREF[$id]);
methodArgs : LPAREN! (argument (COMMA! argument)* (COMMA!)?)? RPAREN!;
Used for consuming arguments for either a method or a constructor call
startNode : parenExpr | literal
parse: @beanname @'bean.name' quoted if dotted
projection: PROJECT^ expression RCURLY!;
list = LCURLY (element (COMMA element)*) RCURLY map  = LCURLY (key ':' value (COMMA key ':' value)*) RCURLY
Eat an identifier, possibly qualified (meaning that it is dotted). TODO AndyC Could create complete identifiers (a.b.c) here rather than a sequence of them? (a, b, c)
This is complicated due to the support for dollars in identifiers.  Dollars are normally separate tokens but there we want to combine a series of identifiers and dollars into a single identifier
constructor :	('new' qualifiedId LPAREN) => 'new' qualifiedId ctorArgs -> ^(CONSTRUCTOR qualifiedId ctorArgs)
literal : INTEGER_LITERAL | boolLiteral | STRING_LITERAL | HEXADECIMAL_INTEGER_LITERAL | REAL_LITERAL | DQ_STRING_LITERAL | NULL_LITERAL
parenExpr : LPAREN! expression RPAREN!;
relationalOperator : EQUAL | NOT_EQUAL | LESS_THAN | LESS_THAN_OR_EQUAL | GREATER_THAN | GREATER_THAN_OR_EQUAL | INSTANCEOF | BETWEEN | MATCHES
Compress the start and end of a token into a single int.
Attempt compilation of the supplied expression. A check is made to see if it is compilable before compilation proceeds. The check involves visiting all the nodes in the expression Ast and ensuring enough state is known about them that bytecode can be generated for them. if compilation is not possible
Factory method for compiler instances. The returned SpelCompiler will attach a class loader as the child of the given class loader and this child will be used to load compiled expressions.
Request that an attempt is made to compile the specified expression. It may fail if components of the expression are not suitable for compilation or the data types involved are not suitable for compilation. Used for testing.
Request to revert to the interpreter for expression evaluation.
Construct an expression, only used by the parser.
Set the evaluation context that will be used if none is specified on an evaluation call.
Return the default evaluation context that will be used if none is supplied on an evaluation call.
Compile the expression if it has been evaluated more than the threshold number of times to trigger compilation.
Perform expression compilation. This will only succeed once exit descriptors for all nodes have been determined. If the compilation fails and has failed more than 100 times the expression is no longer considered suitable for compilation.
Cause an expression to revert to being interpreted if it has been using a compiled form. It also resets the compilation attempt failure count (an expression is normally no longer considered compilable if it cannot be compiled after 100 attempts).
Return the Abstract Syntax Tree for the expression.
Produce a string representation of the Abstract Syntax Tree for the expression. This should ideally look like the input expression, but properly formatted since any unnecessary whitespace will have been discarded during the parse of the expression.
Create a parser with default settings.
Create a parser with the specified configuration.
Constructor for use when there is no particular data for the token (e.g. TRUE or '+')
STRING_LITERAL: '\''! (APOS|~'\'')* '\''!;
DQ_STRING_LITERAL: '"'! (~'"')* '"'!;
REAL_LITERAL : ('.' (DECIMAL_DIGIT)+ (EXPONENT_PART)? (REAL_TYPE_SUFFIX)?) | ((DECIMAL_DIGIT)+ '.' (DECIMAL_DIGIT)+ (EXPONENT_PART)? (REAL_TYPE_SUFFIX)?) | ((DECIMAL_DIGIT)+ (EXPONENT_PART) (REAL_TYPE_SUFFIX)?) | ((DECIMAL_DIGIT)+ (REAL_TYPE_SUFFIX)); fragment INTEGER_TYPE_SUFFIX : ( 'L' | 'l' ); fragment HEX_DIGIT : '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F'|'a'|'b'|'c'|'d'|'e'|'f'; fragment EXPONENT_PART : 'e' (SIGN)* (DECIMAL_DIGIT)+ | 'E' (SIGN) (DECIMAL_DIGIT)+ ; fragment SIGN : '+' | '-' ; fragment REAL_TYPE_SUFFIX : 'F' | 'f' | 'D' | 'd'; INTEGER_LITERAL : (DECIMAL_DIGIT)+ (INTEGER_TYPE_SUFFIX)?;
Check if this might be a two character token.
Push a token of just one character in length.
Push a token of two characters in length.
ID: ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'$'|'0'..'9'|DOT_ESCAPED)*;
Compare argument arrays and return information about whether they match. A supplied type converter and conversionAllowed flag allow for matches to take into account that a type may be transformed into a different type by the converter. or {@code null} if it was not a match
Based on {@link MethodInvoker#getTypeDifferenceWeight(Class[], Object[])} but operates on TypeDescriptors.
Compare argument arrays and return information about whether they match. A supplied type converter and conversionAllowed flag allow for matches to take into account that a type may be transformed into a different type by the converter. This variant of compareArguments also allows for a varargs match. or {@code null} if it was not a match
TODO could do with more refactoring around argument handling and varargs Convert a supplied set of arguments into the requested types. If the parameterTypes are related to a varargs method then the final entry in the parameterTypes array is going to be an array itself whose component type should be used as the conversion target for extraneous arguments. (For example, if the parameterTypes are {Integer, String[]} and the input arguments are {Integer, boolean, float} then both the boolean and float must be converted to strings). This method does *not* repackage the arguments into a form suitable for the varargs invocation - a subsequent call to setupArgumentsForVarargsInvocation handles that.
Takes an input set of argument values and converts them to the types specified as the required parameter types. The arguments are converted 'in-place' in the input array. ({@code null} if not varargs)
Check if the supplied value is the first entry in the array represented by the possibleArray value.
Package up the arguments so that they correctly match what is expected in parameterTypes. For example, if parameterTypes is {@code (int, String[])} because the second parameter was declared {@code String...}, then if arguments is {@code [1,"a","b"]} then it must be repackaged as {@code [1,new String[]{"a","b"}]} in order to match the expected types.
Find the first public class in the methods declaring class hierarchy that declares this method. Sometimes the reflective method discovery logic finds a suitable method that can easily be called via reflection but cannot be called from generated code when compiling the expression because of visibility restrictions. For example if a non public class overrides toString(), this helper method will walk up the type hierarchy to find the first public type that declares the method (if there is one!). For toString() it may walk as far as Object.
This constructor allows the ReflectiveMethodResolver to be configured such that it will use a distance computation to check which is the better of two close matches (when there are multiple matches). Using the distance computation is intended to ensure matches are more closely representative of what a Java compiler would do when taking into account boxing/unboxing and whether the method candidates are declared to handle a supertype of the type (of the argument) being passed in. calculating matches; {@code false} otherwise
Return the set of methods for this type. The default implementation returns the result of {@link Class#getMethods()} for the given {@code type}, but subclasses may override in order to alter the results, e.g. specifying static methods declared elsewhere.
Find a getter method for the specified property.
Find a setter method for the specified property.
Returns class methods ordered with non bridge methods appearing higher.
Return the method suffixes for a given property name. The default implementation uses JavaBean conventions with additional support for properties of the form 'xY' where the method 'getXY()' is used in preference to the JavaBean convention of 'getxY()'.
Return the method suffix for a given property name. The default implementation uses JavaBean conventions.
Find a field of a certain name on a specified class.
Attempt to create an optimized property accessor tailored for a property of a particular name on a particular class. The general ReflectivePropertyAccessor will always work but is not optimal due to the need to lookup which reflective member (method/field) to use each time read() is called. This method will just return the ReflectivePropertyAccessor instance if it is unable to build something more optimal.
Register a {@code MethodFilter} which will be called during method resolution for the specified type. <p>The {@code MethodFilter} may remove methods and/or sort the methods which will then be used by SpEL as the candidates to look through for a match.
Create a StandardTypeConverter for the default ConversionService.
Create a StandardTypeConverter for the given ConversionService.
Create a StandardTypeLocator for the default ClassLoader (typically, the thread context ClassLoader).
Create a StandardTypeLocator for the given ClassLoader.
Register a new import prefix that will be used when searching for unqualified types. Expected format is something like "java.lang".
Remove that specified prefix from this locator's list of imports.
Return a list of all the import prefixes registered with this StandardTypeLocator.
Push the byte code to load the target (i.e. what was passed as the first argument to CompiledExpression.getValue(target, context))
Record the descriptor for the most recently evaluated expression element.
Enter a new compilation scope, usually due to nested expression evaluation. For example when the arguments for a method invocation expression are being evaluated, each argument will be evaluated in a new scope.
Exit a compilation scope, usually after a nested expression has been evaluated. For example after an argument for a method invocation has been evaluated this method returns us to the previous (outer) scope.
Return the descriptor for the item currently on top of the stack (in the current scope).
If the codeflow shows the last expression evaluated to java.lang.Boolean then insert the necessary instructions to unbox that to a boolean primitive.
Insert any necessary cast and value call to convert from a boxed type to a primitive value
For numbers, use the appropriate method on the number to convert it to the primitive type requested.
Insert any necessary numeric conversion bytecodes based upon what is on the stack and the desired target type.
Create the JVM signature descriptor for a method. This consists of the descriptors for the method parameters surrounded with parentheses, followed by the descriptor for the return type. Note the descriptors here are JVM descriptors, unlike the other descriptor forms the compiler is using which do not include the trailing semicolon.
Create the JVM signature descriptor for a constructor. This consists of the descriptors for the constructor parameters surrounded with parentheses, followed by the descriptor for the return type, which is always "V". Note the descriptors here are JVM descriptors, unlike the other descriptor forms the compiler is using which do not include the trailing semicolon.
Determine the JVM descriptor for a specified class. Unlike the other descriptors used in the compilation process, this is the one the JVM wants, so this one includes any necessary trailing semicolon (e.g. Ljava/lang/String; rather than Ljava/lang/String)
Determine the descriptor for an object instance (or {@code null}). (descriptor is "Ljava/lang/Object" for {@code null} value)
Determine if boxing/unboxing can get from one type to the other. Assumes at least one of the types is in boxed form (i.e. single char descriptor).
Determine if the supplied descriptor is for a supported number type or boolean. The compilation process only (currently) supports certain number types. These are double, float, long and int.
Determine if the supplied descriptor is for a supported number. The compilation process only (currently) supports certain number types. These are double, float, long and int.
Determine whether the given number is to be considered as an integer for the purposes of a numeric operation at the bytecode level.
Insert the appropriate CHECKCAST instruction for the supplied descriptor.
Determine the appropriate boxing instruction for a specific type (if it needs boxing) and insert the instruction into the supplied visitor.
Deduce the descriptor for a type. Descriptors are like JVM type names but missing the trailing ';' so for Object the descriptor is "Ljava/lang/Object" for int it is "I".
Create an array of descriptors representing the parameter types for the supplied method. Returns a zero sized array if there are no parameters.
Create an array of descriptors representing the parameter types for the supplied constructor. Returns a zero sized array if there are no parameters.
Create an array of descriptors from an array of classes.
Called after the main expression evaluation method has been generated, this method will callback any registered FieldAdders or ClinitAdders to add any extra information to the class representing the compiled expression.
Register a FieldAdder which will add a new field to the generated class to support the code produced by an ast nodes primary generateCode() method.
Register a ClinitAdder which will add code to the static initializer in the generated class to support the code produced by an ast nodes primary generateCode() method.
Create the optimal instruction for loading a number on the stack.
Produce appropriate bytecode to store a stack item in an array. The instruction to use varies depending on whether the type is a primitive or reference type.
Determine the appropriate T tag to use for the NEWARRAY bytecode.
Produce the correct bytecode to build an array. The opcode to use and the signature to pass along with the opcode can vary depending on the signature of the array type.
For use in mathematical operators, handles converting from a (possibly boxed) number on the stack to a primitive numeric type. <p>For example, from a Integer to a double, just need to call 'Number.doubleValue()' but from an int to a double, need to use the bytecode 'i2d'.
The active context object is what unqualified references to properties/etc are resolved against.
A new scope is entered when a function is invoked.
Set the position in the related expression which gave rise to this exception.
Produce a complete message including the prefix, the position (if known) and with the inserts applied to the message.
Create a new {@code SpelParserConfiguration} instance.
Create an AccessException with a specific message and cause.
Create an AccessException with a specific message.
Creates a new expression evaluation exception.
Construct a new expression exception.
Return the expression string.
Return the position in the expression string where the problem occurred.
Return a detailed description of this exception, including the expression String and position (if available) as well as the actual exception message.
Return the exception simple message without including the expression that caused the failure.
Creates a new expression parsing exception.
The default ParserContext implementation that enables template expression parsing mode. The expression prefix is #{ and the expression suffix is }.
Create a {@link TypedValue} for a simple object. The {@link TypeDescriptor} is inferred from the object, so no generic declarations are preserved.
Create a {@link TypedValue} for a particular value with a particular {@link TypeDescriptor} which may contain additional generic declarations.
Used to validate the match returned from a compareArguments call.
Used to validate the match returned from a compareArguments call.
Evaluate an expression and check that the actual result matches the expectedValue and the class of the result matches the expectedClassOfResult.
Evaluate an expression and check that the actual result matches the expectedValue and the class of the result matches the expectedClassOfResult. This method can also check if the expression is writable (for example, it is a variable or property reference).
Evaluate the specified expression and ensure the expected message comes out. The message may have inserts and they will be checked if otherProperties is specified. The first entry in otherProperties should always be the position.
Evaluate the specified expression and ensure the expected message comes out. The message may have inserts and they will be checked if otherProperties is specified. The first entry in otherProperties should always be the position. ({@code null} indicates don't ask for conversion)
Parse the specified expression and ensure the expected message comes out. The message may have inserts and they will be checked if otherProperties is specified. The first entry in otherProperties should always be the position.
Produce a nice string representation of the input object.
Parse the supplied expression and then create a string representation of the resultant AST, it should be the same as the original expression.
Parse the supplied expression and then create a string representation of the resultant AST, it should be the expected value.
Adding a new property accessor just for a particular type
Call setValue() but expect it to fail.
For use when coercion is happening during a setValue().  The expectedValue should be the coerced form of the value.
helper methods
method not public
Output an indented representation of the expression syntax tree to the specified output stream.
Helper method for printing the AST with indentation
Register some Java reflect methods as well known functions that can be called from an expression.
Register some variables that can be referenced from the tests
Create the root context object, an Inventor instance. Non-qualified property and method references will be resolved against this context object.
These methods are registered in the test context and therefore accessible through function calls in test expressions
Save the {@link Instrumentation} interface exposed by the JVM.
Save the {@link Instrumentation} interface exposed by the JVM. This method is required to dynamically load this Agent with the Attach API.
Return the {@link Instrumentation} interface exposed by the JVM. <p>Note that this agent class will typically not be available in the classpath unless the agent is actually specified on JVM startup. If you intend to do conditional checking with respect to agent availability, consider using {@link org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation()} instead - which will work without the agent class in the classpath as well. the {@link #premain} or {@link #agentmain} methods was called by the JVM; will be {@code null} if this class was not used as Java agent when this JVM was started or it wasn't installed as agent using the Attach API.
Create a new {@code TomcatInstrumentableClassLoader} using the current context class loader.
Create a new {@code TomcatInstrumentableClassLoader} with the supplied class loader as parent.
Delegate for LoadTimeWeaver's {@code addTransformer} method. Typically called through ReflectiveLoadTimeWeaver.
Delegate for LoadTimeWeaver's {@code getThrowawayClassLoader} method. Typically called through ReflectiveLoadTimeWeaver.
The code below is originally taken from ReflectionUtils and optimized for local usage. There is no dependency on ReflectionUtils to keep this class self-contained (since it gets deployed into Tomcat's server class loader).
Specify the name used for the return value of the function.
Get the name used for the return value of the function.
Specify a limited set of in parameters to be used.
Get a limited set of in parameters to be used.
Specify the names of the out parameters.
Get a list of the out parameter names.
Specify the name of the procedure.
Get the name of the procedure.
Specify the name of the catalog.
Get the name of the catalog.
Secify the name of the schema.
Get the name of the schema.
Specify whether this call is a function call.
Check whether this call is a function call.
Specify whether a return value is required.
Check whether a return value is required.
Specify whether call parameter metadata should be accessed.
Check whether call parameter metadata should be accessed.
Specify whether parameters should be bound by name.
Check whether parameters should be bound by name.
Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided by the JDBC driver used for the database in use.
Get the name of the single out parameter for this call. If there are multiple parameters, the name of the first one will be returned.
Get the List of SqlParameter objects to be used in call execution.
Initialize this class with metadata from the database.
Process the list of parameters provided, and if procedure column metadata is used, the parameters will be matched against the metadata information and any missing ones will be automatically included.
Reconcile the provided parameters with available metadata and add new ones where appropriate.
Match input parameter values with the parameters declared to be used in the call.
Build the call string based on configuration and metadata information.
Build the parameter binding fragment.
Create a CallMetaDataProvider based on the database metadata
Constructor taking all the properties
Get the parameter type.
Get the parameter SQL type.
Get the parameter type name.
Get whether the parameter is nullable.
Constructor used to initialize with provided database meta data.
Specify whether the database supports the use of catalog name in procedure calls
Specify whether the database supports the use of schema name in procedure calls
Specify whether the database uses upper case for identifiers
Does the database use upper case for identifiers
Specify whether the database uses lower case for identifiers
Does the database use lower case for identifiers
Process the procedure column metadata
Constructor used to initialize with provided database meta data.
Provide access to default schema for subclasses.
Provide access to version info for subclasses.
Method supporting the metedata processing for a table.
Method supporting the metadata processing for a table's columns
Oracle-based implementation for detecting the current schema.
Set the name of the table for this context.
Get the name of the table for this context.
Set the name of the catalog for this context.
Get the name of the catalog for this context.
Set the name of the schema for this context.
Get the name of the schema for this context.
Specify whether we should access table column meta data.
Are we accessing table meta data?
Specify whether we should override default for accessing synonyms.
Are we overriding include synonyms default?
Get a List of the table column names.
Does this database support the JDBC 3.0 feature of retrieving generated keys {@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?
Does this database support simple query to retrieve generated keys when the JDBC 3.0 feature is not supported. {@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?
Does this database support simple query to retrieve generated keys when the JDBC 3.0 feature is not supported. {@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?
Is a column name String array for retrieving generated keys supported? {@link java.sql.Connection#createStruct(String, Object[])}?
Set {@link NativeJdbcExtractor} to be used to retrieve the native connection.
Process the current meta data with the provided configuration options.
Compare columns created from metadata with declared columns and return a reconciled list.
Match the provided column names and values with the list of columns used.
Build the insert string based on configuration and metadata information
Build the array of {@link java.sql.Types} based on configuration and metadata information
Create a TableMetaDataProvider based on the database metedata
Constructor taking all the properties.
Get whether the parameter/column is nullable.
Register a SQL type for the given parameter.
Register a SQL type for the given parameter.
Create a new BeanPropertySqlParameterSource for the given bean.
Provide access to the property names of the wrapped bean. Uses support provided in the {@link PropertyAccessor} interface.
Create a new MapSqlParameterSource, with one value comprised of the supplied arguments.
Create a new MapSqlParameterSource based on a Map.
Add a parameter to this parameter source. so it's possible to chain several calls together
Add a Map of parameters to this parameter source. so it's possible to chain several calls together
Expose the current parameter values as read-only Map.
Return a NamedParameterJdbcTemplate wrapping the configured JdbcTemplate.
Create a new NamedParameterJdbcTemplate for the given {@link DataSource}. <p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it.
Create a new NamedParameterJdbcTemplate for the given classic Spring {@link org.springframework.jdbc.core.JdbcTemplate}.
Specify the maximum number of entries for this template's SQL cache. Default is 256.
Return the maximum number of entries for this template's SQL cache.
Build a PreparedStatementCreator based on the given SQL and named parameters. <p>Note: Not used for the {@code update} variant with generated key handling.
Obtain a parsed representation of the given SQL statement. <p>The default implementation uses an LRU cache with an upper limit of 256 entries.
Parse the SQL statement and locate any placeholders or named parameters. Named parameters are substituted for a JDBC placeholder.
Skip over comments and quoted names present in an SQL statement
Parse the SQL statement and locate any placeholders or named parameters. Named parameters are substituted for a JDBC placeholder, and any select list is expanded to the required number of placeholders. Select lists may contain an array of objects, and in that case the placeholders will be grouped and enclosed with parentheses. This allows for the use of "expression lists" in the SQL statement like: <br /><br /> {@code select id, name, state from table where (name, age) in (('John', 35), ('Ann', 50))} <p>The parameter values passed in are used to determine the number of placeholders to be used for a select list. Select lists should be limited to 100 or fewer elements. A larger number of elements is not guaranteed to be supported by the database and is strictly vendor-dependent.
Convert a Map of named parameter values to a corresponding array. (may be {@code null}). If specified, the parameter metadata will be built into the value array in the form of SqlParameterValue objects.
Find a matching parameter in the given list of declared parameters.
Determine whether a parameter name ends at the current position, that is, whether the given character qualifies as a separator.
Convert parameter types from an SqlParameterSource into a corresponding int array. This is necessary in order to reuse existing methods on JdbcTemplate. Any named parameter types are placed in the correct position in the Object array based on the parsed SQL statement info.
Convert parameter declarations from an SqlParameterSource to a corresponding List of SqlParameters. This is necessary in order to reuse existing methods on JdbcTemplate. The SqlParameter for a named parameter is placed in the correct position in the resulting list based on the parsed SQL statement info.
Parse the SQL statement and locate any placeholders or named parameters. Named parameters are substituted for a JDBC placeholder. <p>This is a shortcut version of {@link #parseSqlStatement(String)} in combination with {@link #substituteNamedParameters(ParsedSql, SqlParameterSource)}.
Parse the SQL statement and locate any placeholders or named parameters. Named parameters are substituted for a JDBC placeholder and any select list is expanded to the required number of placeholders. <p>This is a shortcut version of {@link #substituteNamedParameters(ParsedSql, SqlParameterSource)}.
Convert a Map of named parameter values to a corresponding array. <p>This is a shortcut version of {@link #buildValueArray(ParsedSql, SqlParameterSource, java.util.List)}.
Create a new instance of the {@link ParsedSql} class.
Return the SQL statement that is being parsed.
Add a named parameter parsed from this SQL statement.
Return all of the parameters (bind variables) in the parsed SQL statement. Repeated occurrences of the same parameter name are included here.
Return the parameter indexes for the specified parameter. (as index in the parameter names List) a int array of length 2
Set the count of named parameters in the SQL statement. Each parameter name counts once; repeated occurrences do not count here.
Return the count of named parameters in the SQL statement. Each parameter name counts once; repeated occurrences do not count here.
Set the count of all of the unnamed parameters in the SQL statement.
Return the count of all of the unnamed parameters in the SQL statement.
Set the total count of all of the parameters in the SQL statement. Repeated occurrences of the same parameter name do count here.
Return the total count of all of the parameters in the SQL statement. Repeated occurrences of the same parameter name do count here.
Create an array of MapSqlParameterSource objects populated with data from the values passed in. This will define what is included in a batch operation.
Create an array of BeanPropertySqlParameterSource objects populated with data from the values passed in. This will define what is included in a batch operation.
Create a wrapped value if parameter has type information, plain object if not.
Create a Map of case insensitive parameter names together with the original name.
Constructor to be used when initializing using a {@link DataSource}.
Constructor to be used when initializing using a {@link JdbcTemplate}.
Get the configured {@link JdbcTemplate}.
Set the name of the stored procedure.
Get the name of the stored procedure.
Set the names of in parameters to be used.
Get the names of in parameters to be used.
Set the catalog name to use.
Get the catalog name used.
Set the schema name to use.
Get the schema name used.
Specify whether this call is a function call. The default is {@code false}.
Is this call a function call?
Specify whether the call requires a return value. The default is {@code false}.
Does the call require a return value?
Specify whether parameters should be bound by name. The default is {@code false}.
Should parameters be bound by name?
Specify whether the parameter metadata for the call should be used. The default is {@code true}.
Get the call string that should be used based on parameters and meta data.
Get the {@link CallableStatementCreatorFactory} being used
Add a declared parameter to the list of parameters for the call. <p>Only parameters declared as {@code SqlParameter} and {@code SqlInOutParameter} will be used to provide input values. This is different from the {@code StoredProcedure} class which - for backwards compatibility reasons - allows input values to be provided for parameters declared as {@code SqlOutParameter}.
Add a {@link org.springframework.jdbc.core.RowMapper} for the specified parameter or column.
Compile this JdbcCall using provided parameters and meta data plus other settings. <p>This finalizes the configuration for this object and subsequent attempts to compile are ignored. This will be implicitly called the first time an un-compiled call is executed. been correctly initialized, for example if no DataSource has been provided
Delegate method to perform the actual compilation. <p>Subclasses can override this template method to perform their own compilation. Invoked after this base class's compilation is complete.
Is this operation "compiled"?
Check whether this operation has been compiled already; lazily compile it if not already compiled. <p>Automatically called by {@code doExecute}.
Delegate method that executes the call using the passed-in {@link SqlParameterSource}.
Delegate method that executes the call using the passed-in array of parameters. declared for the stored procedure.
Delegate method that executes the call using the passed-in Map of parameters.
Delegate method to perform the actual call processing.
Get the name of a single out parameter or return value. Used for functions or procedures with one out parameter.
Get a List of all the call parameters to be used for call. This includes any parameters added based on meta data processing.
Match the provided in parameter values with registered parameters and parameters defined via metadata processing.
Constructor to be used when initializing using a {@link DataSource}.
Constructor to be used when initializing using a {@link JdbcTemplate}.
Set the name of the table for this insert.
Get the name of the table for this insert.
Set the name of the schema for this insert.
Get the name of the schema for this insert.
Set the name of the catalog for this insert.
Get the name of the catalog for this insert.
Set the names of the columns to be used.
Get the names of the columns used.
Specify the name of a single generated key column.
Set the names of any generated keys.
Get the names of any generated keys.
Specify whether the parameter metadata for the call should be used. The default is {@code true}.
Specify whether the default for including synonyms should be changed. The default is {@code false}.
Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary
Get the insert string to be used.
Get the array of {@link java.sql.Types} to be used for insert.
Compile this JdbcInsert using provided parameters and meta data plus other settings. This finalizes the configuration for this object and subsequent attempts to compile are ignored. This will be implicitly called the first time an un-compiled insert is executed. for example if no DataSource has been provided
Delegate method to perform the actual compilation. <p>Subclasses can override this template method to perform  their own compilation. Invoked after this base class's compilation is complete.
Check whether this operation has been compiled already; lazily compile it if not already compiled. <p>Automatically called by {@code validateParameters}.
Method to check whether we are allowed to make any configuration changes at this time. If the class has been compiled, then no further changes to the configuration are allowed.
Delegate method that executes the insert using the passed-in Map of parameters.
Delegate method that executes the insert using the passed-in {@link SqlParameterSource}.
Delegate method to execute the insert.
Method that provides execution of the insert using the passed-in Map of parameters and returning a generated key.
Method that provides execution of the insert using the passed-in {@link SqlParameterSource} and returning a generated key.
Method that provides execution of the insert using the passed-in Map of parameters and returning all generated keys.
Method that provides execution of the insert using the passed-in {@link SqlParameterSource} and returning all generated keys.
Delegate method to execute the insert, generating a single key.
Delegate method to execute the insert, generating any number of keys.
Create a PreparedStatement to be used for an insert operation with generated keys.
Delegate method that executes a batch insert using the passed-in Maps of parameters.
Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s.
Delegate method to execute the batch insert.
Internal implementation for setting parameter values
Match the provided in parameter values with registered parameters and parameters defined via metadata processing.
Constructor that takes one parameter with the JDBC DataSource to use when creating the underlying JdbcTemplate.
Alternative Constructor that takes one parameter with the JdbcTemplate to be used.
Constructor that takes one parameter with the JDBC DataSource to use when creating the JdbcTemplate.
Alternative Constructor that takes one parameter with the JdbcTemplate to be used.
Create a new AbstractLobCreatingPreparedStatementCallback for the given LobHandler.
Handle the case where the ResultSet does not contain a row. by default an EmptyResultDataAccessException
Handle the case where the ResultSet contains multiple rows. by default an IncorrectResultSizeDataAccessException
Create a new JdbcBeanDefinitionReader for the given bean factory, using a default PropertiesBeanDefinitionReader underneath. <p>DataSource or JdbcTemplate still need to be set.
Create a new JdbcBeanDefinitionReader that delegates to the given PropertiesBeanDefinitionReader underneath. <p>DataSource or JdbcTemplate still need to be set.
Set the DataSource to use to obtain database connections. Will implicitly create a new JdbcTemplate with the given DataSource.
Set the JdbcTemplate to be used by this bean factory. Contains settings for DataSource, SQLExceptionTranslator, NativeJdbcExtractor, etc.
Load bean definitions from the database via the given SQL string. The first three columns must be bean name, property name and value. Any join and any other columns are permitted: e.g. {@code SELECT BEAN_NAME, PROPERTY, VALUE FROM CONFIG WHERE CONFIG.APP_ID = 1} It's also possible to perform a join. Column names are not significant -- only the ordering of these first three columns.
Set the JDBC DataSource to be used by this DAO.
Create a JdbcTemplate for the given DataSource. Only invoked if populating the DAO with a DataSource reference! <p>Can be overridden in subclasses to provide a JdbcTemplate instance with different configuration, or a custom JdbcTemplate subclass.
Return the JDBC DataSource used by this DAO.
Set the JdbcTemplate for this DAO explicitly, as an alternative to specifying a DataSource.
Return the JdbcTemplate for this DAO, pre-initialized with the DataSource or set explicitly.
Return the SQLExceptionTranslator of this DAO's JdbcTemplate, for translating SQLExceptions in custom JDBC access code.
Get a JDBC Connection, either from the current transaction or a new one.
Close the given JDBC Connection, created via this DAO's DataSource, if it isn't bound to the thread.
Create a new BLOB value with the given byte array, using a DefaultLobHandler.
Create a new BLOB value with the given byte array.
Create a new CLOB value with the given content string, using a DefaultLobHandler.
Create a new CLOB value with the given content string.
Create a new BLOB/CLOB value with the given stream, using a DefaultLobHandler.
Create a new BLOB/CLOB value with the given stream.
Create a new CLOB value with the given character stream, using a DefaultLobHandler.
Create a new CLOB value with the given character stream.
Create a new ArgPreparedStatementSetter for the given arguments.
Set the value for prepared statements specified parameter index using the passed in value. This method can be overridden by sub-classes if needed.
Create a new ArgTypePreparedStatementSetter for the given arguments.
Set the value for the prepared statement's specified parameter position using the passed in value and type. This method can be overridden by sub-classes if needed.
Create a new {@code BeanPropertyRowMapper}, accepting unpopulated properties in the target bean. <p>Consider using the {@link #newInstance} factory method instead, which allows for specifying the mapped type once only.
Create a new {@code BeanPropertyRowMapper}. all bean properties have been mapped from corresponding database fields
Set the class that each row should be mapped to.
Get the class that we are mapping to.
Set whether we're strictly validating that all bean properties have been mapped from corresponding database fields. <p>Default is {@code false}, accepting unpopulated properties in the target bean.
Return whether we're strictly validating that all bean properties have been mapped from corresponding database fields.
Set whether we're defaulting Java primitives in the case of mapping a null value from corresponding database fields. <p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.
Return whether we're defaulting Java primitives in the case of mapping a null value from corresponding database fields.
Initialize the mapping metadata for the given class.
Convert a name in camelCase to an underscored name in lower case. Any upper case letters are converted to lower case with a preceding underscore.
Convert the given name to lower case. By default, conversions will happen within the US locale.
Retrieve a JDBC object value for the specified column. <p>The default implementation calls {@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}. Subclasses may override this to check specific value types upfront, or to post-process values return from {@code getResultSetValue}. (or {@code null} if none specified)
Static factory method to create a new {@code BeanPropertyRowMapper} (with the mapped class specified only once).
Create a new factory. Will need to add parameters via the {@link #addParameter} method or have no parameters.
Create a new factory with the given SQL and the given parameters.
Add a new declared parameter. <p>Order of parameter addition is significant.
Set whether to use prepared statements that return a specific type of ResultSet. specific type of ResultSet.
Set whether to use prepared statements capable of returning updatable ResultSets.
Specify the NativeJdbcExtractor to use for unwrapping CallableStatements, if any.
Return a new CallableStatementCreator instance given this parameters.
Return a new CallableStatementCreator instance given this parameter mapper.
Create a new CallableStatementCreatorImpl.
Create a Map instance to be used as column map. <p>By default, a linked case-insensitive Map will be created. capacity for the Map
Retrieve a JDBC object value for the specified column. <p>The default implementation uses the {@code getObject} method. Additionally, this implementation includes a "hack" to get around Oracle returning a non standard object for their TIMESTAMP datatype.
Construct a new JdbcTemplate, given a DataSource to obtain connections from. <p>Note: This will not trigger initialization of the exception translator.
Construct a new JdbcTemplate, given a DataSource to obtain connections from. <p>Note: Depending on the "lazyInit" flag, initialization of the exception translator will be triggered.
Set a NativeJdbcExtractor to extract native JDBC objects from wrapped handles. Useful if native Statement and/or ResultSet handles are expected for casting to database-specific implementation classes, but a connection pool that wraps JDBC objects is used (note: <i>any</i> pool will return wrapped Connections).
Return the current NativeJdbcExtractor implementation.
Set whether or not we want to ignore SQLWarnings. <p>Default is "true", swallowing and logging all warnings. Switch this flag to "false" to make the JdbcTemplate throw a SQLWarningException instead.
Return whether or not we ignore SQLWarnings.
Set the fetch size for this JdbcTemplate. This is important for processing large result sets: Setting this higher than the default value will increase processing speed at the cost of memory consumption; setting this lower can avoid transferring row data that will never be read by the application. <p>Default is -1, indicating to use the JDBC driver's default configuration (i.e. to not pass a specific fetch size setting on to the driver). <p>Note: As of 4.3, negative values other than -1 will get passed on to the driver, since e.g. MySQL supports special behavior for {@code Integer.MIN_VALUE}.
Return the fetch size specified for this JdbcTemplate.
Set the maximum number of rows for this JdbcTemplate. This is important for processing subsets of large result sets, avoiding to read and hold the entire result set in the database or in the JDBC driver if we're never interested in the entire result in the first place (for example, when performing searches that might return a large number of matches). <p>Default is -1, indicating to use the JDBC driver's default configuration (i.e. to not pass a specific max rows setting on to the driver). <p>Note: As of 4.3, negative values other than -1 will get passed on to the driver, in sync with {@link #setFetchSize}'s support for special MySQL values.
Return the maximum number of rows specified for this JdbcTemplate.
Set the query timeout for statements that this JdbcTemplate executes. <p>Default is -1, indicating to use the JDBC driver's default (i.e. to not pass a specific query timeout setting on the driver). <p>Note: Any timeout specified here will be overridden by the remaining transaction timeout when executing within a transaction that has a timeout specified at the transaction level.
Return the query timeout for statements that this JdbcTemplate executes.
Set whether results processing should be skipped. Can be used to optimize callable statement processing when we know that no results are being passed back - the processing of out parameter will still take place. This can be used to avoid a bug in some older Oracle JDBC drivers like 10.1.0.2.
Return whether results processing should be skipped.
Set whether undeclared results should be skipped.
Return whether undeclared results should be skipped.
Set whether execution of a CallableStatement will return the results in a Map that uses case insensitive names for the parameters.
Return whether execution of a CallableStatement will return the results in a Map that uses case insensitive names for the parameters.
Create a close-suppressing proxy for the given JDBC Connection. Called by the {@code execute} method. <p>The proxy also prepares returned JDBC Statements, applying statement settings such as fetch size, max rows, and query timeout.
Query using a prepared statement, allowing for a PreparedStatementCreator and a PreparedStatementSetter. Most other query methods use this method, but application code will always work with either a creator or a setter. Connection If this is null, the SQL will be assumed to contain no bind parameters.
Extract returned ResultSets from the completed stored procedure.
Extract output parameters from the completed stored procedure.
Create a Map instance to be used as the results map. <p>If {@link #resultsMapCaseInsensitive} has been set to true, a {@link LinkedCaseInsensitiveMap} will be created; otherwise, a {@link LinkedHashMap} will be created.
Prepare the given JDBC Statement (or PreparedStatement or CallableStatement), applying statement settings such as fetch size, max rows, and query timeout.
Create a new arg-based PreparedStatementSetter using the args passed in. <p>By default, we'll create an {@link ArgumentPreparedStatementSetter}. This method allows for the creation to be overridden by subclasses.
Create a new arg-type-based PreparedStatementSetter using the args and types passed in. <p>By default, we'll create an {@link ArgumentTypePreparedStatementSetter}. This method allows for the creation to be overridden by subclasses.
Throw an SQLWarningException if we're not ignoring warnings, else log the warnings (at debug level).
Throw an SQLWarningException if encountering an actual warning. May be {@code null}, in which case this method does nothing.
Determine SQL from potential provider object.
Create a new factory. Will need to add parameters via the {@link #addParameter} method or have no parameters.
Create a new factory with the given SQL and JDBC types.
Create a new factory with the given SQL and parameters.
Set whether to use prepared statements that return a specific type of ResultSet.
Set whether prepared statements should be capable of returning auto-generated keys.
Set the column names of the auto-generated keys.
Specify the NativeJdbcExtractor to use for unwrapping PreparedStatements, if any.
Return a new PreparedStatementSetter for the given parameters.
Return a new PreparedStatementCreator for the given parameters.
Return a new PreparedStatementCreator for the given parameters. the factory's, for example because of named parameter expanding)
Create a new ResultSetSupportingSqlParameter.
Create a new ResultSetSupportingSqlParameter. (for DECIMAL and NUMERIC types)
Does this parameter support a ResultSet, i.e. does it hold a ResultSetExtractor, RowCallbackHandler or RowMapper?
Return the ResultSetExtractor held by this parameter, if any.
Return the RowCallbackHandler held by this parameter, if any.
Return the RowMapper held by this parameter, if any.
Return the types of the columns as java.sql.Types constants Valid after processRow is invoked the first time. <b>Indexed from 0 to n-1.</b>
Return the names of the columns. Valid after processRow is invoked the first time. <b>Indexed from 0 to n-1.</b>
Return the row count of this ResultSet Only valid after processing is complete
Return the number of columns in this result set. Valid once we've seen the first row, so subclasses can use it during processing
Create a new RowMapperResultSetExtractor. (just used for optimized collection handling)
Create a new {@code SingleColumnRowMapper}. <p>Consider using the {@link #newInstance} factory method instead, which allows for specifying the required type once only.
Retrieve a JDBC object value for the specified column. <p>The default implementation calls {@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}. If no required type has been specified, this method delegates to {@code getColumnValue(rs, index)}, which basically calls {@code ResultSet.getObject(index)} but applies some additional default conversion to appropriate value types. (or {@code null} if none specified)
Retrieve a JDBC object value for the specified column, using the most appropriate value type. Called if no required type has been specified. <p>The default implementation delegates to {@code JdbcUtils.getResultSetValue()}, which uses the {@code ResultSet.getObject(index)} method. Additionally, it includes a "hack" to get around Oracle returning a non-standard object for their TIMESTAMP datatype. See the {@code JdbcUtils#getResultSetValue()} javadoc for details.
Static factory method to create a new {@code SingleColumnRowMapper} (with the required type specified only once).
Create a new SqlInOutParameter.
Create a new SqlInOutParameter. (for DECIMAL and NUMERIC types)
Create a new SqlOutParameter.
Create a new SqlOutParameter. (for DECIMAL and NUMERIC types)
Return the custom return type, if any.
Return whether this parameter holds a custom return type.
Create a new anonymous SqlParameter, supplying the SQL type. (for DECIMAL and NUMERIC types)
Create a new SqlParameter, supplying name and SQL type. (for DECIMAL and NUMERIC types)
Return the name of the parameter, or {@code null} if anonymous.
Return whether this parameter holds input values that should be set before execution even if they are {@code null}. <p>This implementation always returns {@code true}.
Return whether this parameter is an implicit return parameter used during the results preocessing of the CallableStatement.getMoreResults/getUpdateCount. <p>This implementation always returns {@code false}.
Convert a list of JDBC types, as defined in {@code java.sql.Types}, to a List of SqlParameter objects as used in this package.
Create a new SqlParameterValue, supplying the SQL type. (for DECIMAL and NUMERIC types)
Create a new instance of the {@link SqlReturnResultSet} class.
Create a new instance of the {@link SqlReturnUpdateCount} class.
Create a SqlRowSet that wraps the given ResultSet, representing its data in a disconnected fashion. <p>This implementation creates a Spring ResultSetWrappingSqlRowSet instance that wraps a standard JDBC CachedRowSet instance. Can be overridden to use a different implementation.
Create a new CachedRowSet instance, to be populated by the {@code createSqlRowSet} implementation. <p>The default implementation uses JDBC 4.1's RowSetProvider when running on JDK 7 or higher, falling back to Sun's {@code com.sun.rowset.CachedRowSetImpl} class on older JDKs.
Derive a default SQL type from the given Java type.
Set the value for a parameter. The method used is based on the SQL type of the parameter and we can handle complex types like arrays and LOBs. (optional, only used for SQL NULL and SqlTypeValue)
Set the value for a parameter. The method used is based on the SQL type of the parameter and we can handle complex types like arrays and LOBs. (optional, only used for SQL NULL and SqlTypeValue) (for DECIMAL and NUMERIC types)
Set the specified PreparedStatement parameter to null, respecting database-specific peculiarities.
Check whether the given value is a {@code java.util.Date} (but not one of the JDBC-specific subclasses).
Clean up all resources held by parameter values which were passed to an execute method. This is for example important for closing LOB values.
Get the singleton {@link DerbyEmbeddedDatabaseConfigurer} instance.
Create a new embedded database builder with a {@link DefaultResourceLoader}.
Create a new embedded database builder with the given {@link ResourceLoader}.
Specify whether a unique ID should be generated and used as the database name. <p>If the configuration for this builder is reused across multiple application contexts within a single JVM, this flag should be <em>enabled</em> (i.e., set to {@code true}) in order to ensure that each application context gets its own embedded database. <p>Enabling this flag overrides any explicit name set via {@link #setName}.
Set the name of the embedded database. <p>Defaults to {@link EmbeddedDatabaseFactory#DEFAULT_DATABASE_NAME} if not called. <p>Will be overridden if the {@code generateUniqueName} flag has been set to {@code true}.
Set the type of embedded database. <p>Defaults to HSQL if not called.
Set the factory to use to create the {@link DataSource} instance that connects to the embedded database. <p>Defaults to {@link SimpleDriverDataSourceFactory} but can be overridden, for example to introduce connection pooling.
Add default SQL scripts to execute to populate the database. <p>The default scripts are {@code "schema.sql"} to create the database schema and {@code "data.sql"} to populate the database with data.
Add an SQL script to execute to initialize or populate the database.
Add multiple SQL scripts to execute to initialize or populate the database.
Specify the character encoding used in all SQL scripts, if different from the platform encoding.
Specify the statement separator used in all SQL scripts, if a custom one. <p>Defaults to {@code ";"} if not specified and falls back to {@code "\n"} as a last resort; may be set to {@link ScriptUtils#EOF_STATEMENT_SEPARATOR} to signal that each script contains a single statement without a separator.
Specify the single-line comment prefix used in all SQL scripts. <p>Defaults to {@code "--"}.
Specify the start delimiter for block comments in all SQL scripts. <p>Defaults to {@code "/*"}.
Specify the end delimiter for block comments in all SQL scripts. <p>Defaults to <code>"*&#47;"</code>.
Specify that all failures which occur while executing SQL scripts should be logged but should not cause a failure. <p>Defaults to {@code false}.
Specify that a failed SQL {@code DROP} statement within an executed script can be ignored. <p>This is useful for a database whose SQL dialect does not support an {@code IF EXISTS} clause in a {@code DROP} statement. <p>The default is {@code false} so that {@link #build building} will fail fast if a script starts with a {@code DROP} statement.
Build the embedded database.
Set the {@code generateUniqueDatabaseName} flag to enable or disable generation of a pseudo-random unique ID to be used as the database name. <p>Setting this flag to {@code true} overrides any explicit name set via {@link #setDatabaseName}.
Set the name of the database. <p>Defaults to {@value #DEFAULT_DATABASE_NAME}. <p>Will be overridden if the {@code generateUniqueDatabaseName} flag has been set to {@code true}.
Set the factory to use to create the {@link DataSource} instance that connects to the embedded database. <p>Defaults to {@link SimpleDriverDataSourceFactory}.
Set the type of embedded database to use. <p>Call this when you wish to configure one of the pre-supported types. <p>Defaults to HSQL.
Set the strategy that will be used to configure the embedded database instance. <p>Call this when you wish to use an embedded database type not already supported.
Set the strategy that will be used to initialize or populate the embedded database. <p>Defaults to {@code null}.
Factory method that returns the {@linkplain EmbeddedDatabase embedded database} instance, which is also a {@link DataSource}.
Hook to initialize the embedded database. <p>If the {@code generateUniqueDatabaseName} flag has been set to {@code true}, the current value of the {@linkplain #setDatabaseName database name} will be overridden with an auto-generated name. <p>Subclasses may call this method to force initialization; however, this method should only be invoked once. <p>After calling this method, {@link #getDataSource()} returns the {@link DataSource} providing connectivity to the database.
Hook to shutdown the embedded database. Subclasses may call this method to force shutdown. <p>After calling, {@link #getDataSource()} returns {@code null}. <p>Does nothing if no embedded database has been initialized.
Hook that gets the {@link DataSource} that provides the connectivity to the embedded database. <p>Returns {@code null} if the {@code DataSource} has not been initialized or if the database has been shut down. Subclasses may call this method to access the {@code DataSource} instance directly.
Set a script execution to be run in the bean destruction callback, cleaning up the database and leaving it in a known state for others.
Returns an {@link java.io.OutputStream} that ignores all data given to it.
Construct a new {@code CannotReadScriptException}.
Specify a list of populators to delegate to.
Add one or more populators to the list of delegates.
Execute the given {@link DatabasePopulator} against the given {@link DataSource}.
The {@link DataSource} for the database to populate when this component is initialized and to clean up when this component is shut down. <p>This property is mandatory with no default provided.
Set the {@link DatabasePopulator} to execute during the bean initialization phase. initialization
Set the {@link DatabasePopulator} to execute during the bean destruction phase, cleaning up the database and leaving it in a known state for others.
Flag to explicitly enable or disable the {@linkplain #setDatabasePopulator database populator} and {@linkplain #setDatabaseCleaner database cleaner}. should be called on startup and shutdown, respectively
Construct a new {@code ResourceDatabasePopulator} with default settings.
Construct a new {@code ResourceDatabasePopulator} with default settings for the supplied scripts. (never {@code null})
Construct a new {@code ResourceDatabasePopulator} with the supplied values. logged but not cause a failure statement can be ignored be {@code null} or <em>empty</em> to indicate platform encoding (never {@code null})
Add a script to execute to initialize or clean up the database.
Add multiple scripts to execute to initialize or clean up the database.
Set the scripts to execute to initialize or clean up the database, replacing any previously added scripts.
Specify the encoding for the configured SQL scripts, if different from the platform encoding. or empty to indicate platform encoding
Specify the statement separator, if a custom one. <p>Defaults to {@code ";"} if not specified and falls back to {@code "\n"} as a last resort; may be set to {@link ScriptUtils#EOF_STATEMENT_SEPARATOR} to signal that each script contains a single statement without a separator.
Set the prefix that identifies single-line comments within the SQL scripts. <p>Defaults to {@code "--"}.
Set the start delimiter that identifies block comments within the SQL scripts. <p>Defaults to {@code "/*"}. (never {@code null} or empty)
Set the end delimiter that identifies block comments within the SQL scripts. <p>Defaults to <code>"*&#47;"</code>. (never {@code null} or empty)
Flag to indicate that all failures in SQL should be logged but not cause a failure. <p>Defaults to {@code false}.
Flag to indicate that a failed SQL {@code DROP} statement can be ignored. <p>This is useful for a non-embedded database whose SQL dialect does not support an {@code IF EXISTS} clause in a {@code DROP} statement. <p>The default is {@code false} so that if the populator runs accidentally, it will fail fast if a script starts with a {@code DROP} statement.
Execute this {@code ResourceDatabasePopulator} against the given {@link DataSource}. <p>Delegates to {@link DatabasePopulatorUtils#execute}.
{@link EncodedResource} is not a sub-type of {@link Resource}. Thus we always need to wrap each script resource in an {@code EncodedResource} using the configured {@linkplain #setSqlScriptEncoding encoding}.
Constructor for {@code ScriptException}.
Construct a new {@code ScriptParseException}.
Construct a new {@code ScriptStatementFailedException}. the n<sup>th</sup> statement present in the resource)
Build an error message for an SQL script execution failure, based on the supplied arguments. the n<sup>th</sup> statement present in the resource) or logging
Split an SQL script into separate statements delimited by the provided separator character. Each individual statement will be added to the provided {@code List}. <p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the comment prefix; any text beginning with the comment prefix and extending to the end of the line will be omitted from the output. Similarly, {@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and {@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the <em>start</em> and <em>end</em> block comment delimiters: any text enclosed in a block comment will be omitted from the output. In addition, multiple adjacent whitespace characters will be collapsed into a single space.
Split an SQL script into separate statements delimited by the provided separator string. Each individual statement will be added to the provided {@code List}. <p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the comment prefix; any text beginning with the comment prefix and extending to the end of the line will be omitted from the output. Similarly, {@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and {@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the <em>start</em> and <em>end</em> block comment delimiters: any text enclosed in a block comment will be omitted from the output. In addition, multiple adjacent whitespace characters will be collapsed into a single space.
Split an SQL script into separate statements delimited by the provided separator string. Each individual statement will be added to the provided {@code List}. <p>Within the script, the provided {@code commentPrefix} will be honored: any text beginning with the comment prefix and extending to the end of the line will be omitted from the output. Similarly, the provided {@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter} delimiters will be honored: any text enclosed in a block comment will be omitted from the output. In addition, multiple adjacent whitespace characters will be collapsed into a single space. newline character; never {@code null} typically "--"; never {@code null} or empty never {@code null} or empty never {@code null} or empty
Read a script from the given resource, using "{@code --}" as the comment prefix and "{@code ;}" as the statement separator, and build a String containing the lines.
Read a script from the provided resource, using the supplied comment prefix and statement separator, and build a {@code String} containing the lines. <p>Lines <em>beginning</em> with the comment prefix are excluded from the results; however, line comments anywhere else &mdash; for example, within a statement &mdash; will be included in the results. to be processed typically "--"
Read a script from the provided {@code LineNumberReader}, using the supplied comment prefix and statement separator, and build a {@code String} containing the lines. <p>Lines <em>beginning</em> with the comment prefix are excluded from the results; however, line comments anywhere else &mdash; for example, within a statement &mdash; will be included in the results. to be processed typically "--"
Does the provided SQL script contain the specified delimiter?
Execute the given SQL script using default settings for statement separators, comment delimiters, and exception handling flags. <p>Statement separators and comments will be removed before executing individual statements within the supplied script. <p><strong>Warning</strong>: this method does <em>not</em> release the provided {@link Connection}. configured and ready to use current platform's default encoding
Execute the given SQL script using default settings for statement separators, comment delimiters, and exception handling flags. <p>Statement separators and comments will be removed before executing individual statements within the supplied script. <p><strong>Warning</strong>: this method does <em>not</em> release the provided {@link Connection}. configured and ready to use to load the SQL script from
Execute the given SQL script. <p>Statement separators and comments will be removed before executing individual statements within the supplied script. <p><strong>Warning</strong>: this method does <em>not</em> release the provided {@link Connection}. configured and ready to use to load the SQL script from in the event of an error an error on a {@code DROP} statement SQL script &mdash; typically "--" {@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to {@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort; may be set to {@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a single statement without a separator {@code null} or empty {@code null} or empty
Construct a new {@code UncategorizedScriptException}.
Specify the map of target DataSources, with the lookup key as key. The mapped value can either be a corresponding {@link javax.sql.DataSource} instance or a data source name String (to be resolved via a {@link #setDataSourceLookup DataSourceLookup}). <p>The key can be of arbitrary type; this class implements the generic lookup process only. The concrete key representation will be handled by {@link #resolveSpecifiedLookupKey(Object)} and {@link #determineCurrentLookupKey()}.
Specify the default target DataSource, if any. <p>The mapped value can either be a corresponding {@link javax.sql.DataSource} instance or a data source name String (to be resolved via a {@link #setDataSourceLookup DataSourceLookup}). <p>This DataSource will be used as target if none of the keyed {@link #setTargetDataSources targetDataSources} match the {@link #determineCurrentLookupKey()} current lookup key.
Specify whether to apply a lenient fallback to the default DataSource if no specific DataSource could be found for the current lookup key. <p>Default is "true", accepting lookup keys without a corresponding entry in the target DataSource map - simply falling back to the default DataSource in that case. <p>Switch this flag to "false" if you would prefer the fallback to only apply if the lookup key was {@code null}. Lookup keys without a DataSource entry will then lead to an IllegalStateException.
Set the DataSourceLookup implementation to use for resolving data source name Strings in the {@link #setTargetDataSources targetDataSources} map. <p>Default is a {@link JndiDataSourceLookup}, allowing the JNDI names of application server DataSources to be specified directly.
Resolve the given lookup key object, as specified in the {@link #setTargetDataSources targetDataSources} map, into the actual lookup key to be used for matching with the {@link #determineCurrentLookupKey() current lookup key}. <p>The default implementation simply returns the given key as-is.
Resolve the specified data source object into a DataSource instance. <p>The default implementation handles DataSource instances and data source names (to be resolved via a {@link #setDataSourceLookup DataSourceLookup}). {@link #setTargetDataSources targetDataSources} map
Retrieve the current target DataSource. Determines the {@link #determineCurrentLookupKey() current lookup key}, performs a lookup in the {@link #setTargetDataSources targetDataSources} map, falls back to the specified {@link #setDefaultTargetDataSource default target DataSource} if necessary.
Create a new instance of the {@link BeanFactoryDataSourceLookup} class. <p>Use of this constructor is redundant if this object is being created by a Spring IoC container, as the supplied {@link BeanFactory} will be replaced by the {@link BeanFactory} that creates it (c.f. the {@link BeanFactoryAware} contract). So only use this constructor if you are using this class outside the context of a Spring IoC container.
Constructor for DataSourceLookupFailureException.
Constructor for DataSourceLookupFailureException. lookup API such as JNDI)
Create a new instance of the {@link MapDataSourceLookup} class. are {@link String Strings}, the values are actual {@link DataSource} instances.
Create a new instance of the {@link MapDataSourceLookup} class.
Set the {@link Map} of {@link DataSource DataSources}; the keys are {@link String Strings}, the values are actual {@link DataSource} instances. <p>If the supplied {@link Map} is {@code null}, then this method call effectively has no effect.
Get the {@link Map} of {@link DataSource DataSources} maintained by this object. <p>The returned {@link Map} is {@link Collections#unmodifiableMap(java.util.Map) unmodifiable}.
Add the supplied {@link DataSource} to the map of {@link DataSource DataSources} maintained by this object.
Create a new instance of the {@link SingleDataSourceLookup} class.
Set the JDBC URL to use for connecting through the Driver.
Return the JDBC URL to use for connecting through the Driver.
Set the JDBC username to use for connecting through the Driver.
Return the JDBC username to use for connecting through the Driver.
Set the JDBC password to use for connecting through the Driver.
Return the JDBC password to use for connecting through the Driver.
Specify arbitrary connection properties as key/value pairs, to be passed to the Driver. <p>Can also contain "user" and "password" properties. However, any "username" and "password" bean properties specified on this DataSource will override the corresponding connection properties.
Return the connection properties to be passed to the Driver, if any.
Build properties for the Driver, including the given username and password (if any), and obtain a corresponding Connection.
Create a new ConnectionHolder for the given ConnectionHandle.
Create a new ConnectionHolder for the given JDBC Connection, wrapping it with a {@link SimpleConnectionHandle}, assuming that there is no ongoing transaction.
Create a new ConnectionHolder for the given JDBC Connection, wrapping it with a {@link SimpleConnectionHandle}. in an ongoing transaction
Return the ConnectionHandle held by this ConnectionHolder.
Return whether this holder currently has a Connection.
Set whether this holder represents an active, JDBC-managed transaction.
Return whether this holder represents an active, JDBC-managed transaction.
Override the existing Connection handle with the given Connection. Reset the handle if given {@code null}. <p>Used for releasing the Connection on suspend (with a {@code null} argument) and setting a fresh Connection on resume.
Return the current Connection held by this ConnectionHolder. <p>This will be the same Connection until {@code released} gets called on the ConnectionHolder, which will reset the held Connection, fetching a new Connection on demand.
Return whether JDBC 3.0 Savepoints are supported. Caches the flag for the lifetime of this ConnectionHolder.
Create a new JDBC 3.0 Savepoint for the current Connection, using generated savepoint names that are unique for the Connection.
Create a new DataSourceTransactionManager instance. A DataSource has to be set to be able to use it.
Create a new DataSourceTransactionManager instance.
Set the JDBC DataSource that this instance should manage transactions for. <p>This will typically be a locally defined DataSource, for example an Apache Commons DBCP connection pool. Alternatively, you can also drive transactions for a non-XA J2EE DataSource fetched from JNDI. For an XA DataSource, use JtaTransactionManager. <p>The DataSource specified here should be the target DataSource to manage transactions for, not a TransactionAwareDataSourceProxy. Only data access code may work with TransactionAwareDataSourceProxy, while the transaction manager needs to work on the underlying target DataSource. If there's nevertheless a TransactionAwareDataSourceProxy passed in, it will be unwrapped to extract its target DataSource. <p><b>The DataSource passed in here needs to return independent Connections.</b> The Connections may come from a pool (the typical case), but the DataSource must not return thread-scoped / request-scoped Connections or the like.
Return the JDBC DataSource that this instance manages transactions for.
Obtain a Connection from the given DataSource. Translates SQLExceptions into the Spring hierarchy of unchecked generic data access exceptions, simplifying calling code and making any exception that is thrown more meaningful. <p>Is aware of a corresponding Connection bound to the current thread, for example when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread if transaction synchronization is active, e.g. when running within a {@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction). if the attempt to get a Connection failed
Actually obtain a JDBC Connection from the given DataSource. Same as {@link #getConnection}, but throwing the original SQLException. <p>Is aware of a corresponding Connection bound to the current thread, for example when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread if transaction synchronization is active (e.g. if in a JTA transaction). <p>Directly accessed by {@link TransactionAwareDataSourceProxy}.
Prepare the given Connection with the given transaction semantics.
Reset the given Connection after a transaction, regarding read-only flag and isolation level.
Determine whether the given JDBC Connection is transactional, that is, bound to the current thread by Spring's transaction facilities. (may be {@code null})
Apply the current transaction timeout, if any, to the given JDBC Statement object.
Apply the specified timeout - overridden by the current transaction timeout, if any - to the given JDBC Statement object.
Close the given Connection, obtained from the given DataSource, if it is not managed externally (that is, not bound to the thread). (if this is {@code null}, the call will be ignored) (may be {@code null})
Actually close the given Connection, obtained from the given DataSource. Same as {@link #releaseConnection}, but throwing the original SQLException. <p>Directly accessed by {@link TransactionAwareDataSourceProxy}. (if this is {@code null}, the call will be ignored) (may be {@code null})
Close the Connection, unless a {@link SmartDataSource} doesn't want us to.
Determine whether the given two Connections are equal, asking the target Connection in case of a proxy. Used to detect equality even if the user passed in a raw target Connection while the held one is a proxy. (potentially a target Connection without proxy)
Return the innermost target Connection of the given Connection. If the given Connection is a proxy, it will be unwrapped until a non-proxy Connection is found. Otherwise, the passed-in Connection will be returned as-is.
Determine the connection synchronization order to use for the given DataSource. Decreased for every level of nesting that a DataSource has, checked through the level of DelegatingDataSource nesting.
Create a new DelegatingDataSource.
Set the target DataSource that this DataSource should delegate to.
Return the target DataSource that this DataSource should delegate to.
Create a new DriverManagerDataSource with the given JDBC URL, not specifying a username or password for JDBC access.
Create a new DriverManagerDataSource with the given standard DriverManager parameters.
Set the JDBC driver class name. This driver will get initialized on startup, registering itself with the JDK's DriverManager. <p><b>NOTE: DriverManagerDataSource is primarily intended for accessing <i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver, consider using {@link SimpleDriverDataSource} instead. Alternatively, consider initializing the JDBC driver yourself before instantiating this DataSource. The "driverClassName" property is mainly preserved for backwards compatibility, as well as for migrating between Commons DBCP and this DataSource.
Getting a Connection using the nasty static from DriverManager is extracted into a protected method to allow for easy unit testing.
Set the default isolation level by the name of the corresponding constant in {@link org.springframework.transaction.TransactionDefinition}, e.g. "ISOLATION_SERIALIZABLE". <p>If not specified, the target DataSource's default will be used. Note that a transaction-specific isolation value will always override any isolation setting specified at the DataSource level.
Specify the default isolation level to use for Connection retrieval, according to the JDBC {@link java.sql.Connection} constants (equivalent to the corresponding Spring {@link org.springframework.transaction.TransactionDefinition} constants). <p>If not specified, the target DataSource's default will be used. Note that a transaction-specific isolation value will always override any isolation setting specified at the DataSource level.
Return the statically specified isolation level, or {@code null} if none.
Determine the current isolation level: either the transaction's isolation level or a statically defined isolation level.
Determine the current read-only flag: by default, the transaction's read-only hint.
Create a new LazyConnectionDataSourceProxy.
Set the default auto-commit mode to expose when no target Connection has been fetched yet (-> actual JDBC Connection default not known yet). <p>If not specified, the default gets determined by checking a target Connection on startup. If that check fails, the default will be determined lazily on first access of a Connection.
Set the default transaction isolation level to expose when no target Connection has been fetched yet (-> actual JDBC Connection default not known yet). <p>This property accepts the int constant value (e.g. 8) as defined in the {@link java.sql.Connection} interface; it is mainly intended for programmatic use. Consider using the "defaultTransactionIsolationName" property for setting the value by name (e.g. "TRANSACTION_SERIALIZABLE"). <p>If not specified, the default gets determined by checking a target Connection on startup. If that check fails, the default will be determined lazily on first access of a Connection.
Set the default transaction isolation level by the name of the corresponding constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE".
Check the default connection properties (auto-commit, transaction isolation), keeping them to be able to expose them correctly without fetching an actual JDBC Connection from the target DataSource. <p>This will be invoked once on startup, but also for each retrieval of a target Connection. If the check failed on startup (because the database was down), we'll lazily retrieve those settings.
Expose the default auto-commit value.
Expose the default transaction isolation value.
Return whether the proxy currently holds a target Connection.
Return the target Connection, fetching it and initializing it if necessary.
Create a new SimpleConnectionHandle for the given Connection.
Create a new DriverManagerDataSource with the given standard Driver parameters.
Specify the JDBC Driver implementation class to use. <p>An instance of this Driver class will be created and held within the SimpleDriverDataSource.
Specify the JDBC Driver instance to use. <p>This allows for passing in a shared, possibly pre-configured Driver instance.
Return the JDBC Driver instance to use.
Create a new SingleConnectionDataSource with the given standard DriverManager parameters. close-suppressing proxy or the physical Connection
Create a new SingleConnectionDataSource with a given Connection. suppresses {@code close()} calls (to allow for normal {@code close()} usage in applications that expect a pooled Connection but do not know our SmartDataSource interface)
Set whether the returned Connection should be a close-suppressing proxy or the physical Connection.
Return whether the returned Connection will be a close-suppressing proxy or the physical Connection.
Set whether the returned Connection's "autoCommit" setting should be overridden.
Return whether the returned Connection's "autoCommit" setting should be overridden.
Initialize the underlying Connection via the DriverManager.
Reset the underlying shared Connection, to be reinitialized on next access.
Prepare the given Connection before it is exposed. <p>The default implementation applies the auto-commit flag, if necessary. Can be overridden in subclasses.
Close the underlying shared Connection.
Wrap the given Connection with a proxy that delegates every method call to it but suppresses close calls.
Create a new TransactionAwareDataSourceProxy.
Specify whether to reobtain the target Connection for each operation performed within a transaction. <p>The default is "false". Specify "true" to reobtain transactional Connections for every call on the Connection proxy; this is advisable on JBoss if you hold on to a Connection handle across transaction boundaries. <p>The effect of this setting is similar to the "hibernate.connection.release_mode" value "after_statement".
Wraps the given Connection with a proxy that delegates every method call to it but delegates {@code close()} calls to DataSourceUtils.
Determine whether to obtain a fixed target Connection for the proxy or to reobtain the target Connection for each operation. <p>The default implementation returns {@code true} for all standard cases. This can be overridden through the {@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"} flag, which enforces a non-fixed target Connection within an active transaction. Note that non-transactional access will always use a fixed Connection.
Set the default username that this adapter should use for retrieving Connections. <p>Default is no specific user. Note that an explicitly specified username will always override any username/password specified at the DataSource level.
Set the default user's password that this adapter should use for retrieving Connections. <p>Default is no specific password. Note that an explicitly specified username will always override any username/password specified at the DataSource level.
Set user credententials for this proxy and the current thread. The given username and password will be applied to all subsequent {@code getConnection()} calls on this DataSource proxy. <p>This will override any statically specified user credentials, that is, values of the "username" and "password" bean properties.
Remove any user credentials for this proxy from the current thread. Statically specified user credentials apply again afterwards.
This implementation delegates to the {@code getConnection(username, password)} method of the target DataSource, passing in the specified user credentials. If the specified username is empty, it will simply delegate to the standard {@code getConnection()} method of the target DataSource.
This constructor retrieves the WebSphere JDBC connection spec API, so we can get obtain specific WebSphere Connections using reflection.
Create a WebSphere {@code JDBCConnectionSpec} object for the given charateristics. <p>The default implementation uses reflection to apply the given settings. Can be overridden in subclasses to customize the JDBCConnectionSpec object
Constructor to allow use as a JavaBean. DataSource and SQL must be supplied before compilation and use.
Construct an update object with a given DataSource and SQL.
Construct an update object with a given DataSource, SQL and anonymous parameters. {@code java.sql.Types} class
Construct an update object with a given DataSource, SQL, anonymous parameters and specifying the maximum number of rows that may be affected. {@code java.sql.Types} class an automatic intermediate flush
Set the number of statements that will trigger an automatic intermediate flush. {@code update} calls or the given statement parameters will be queued until the batch size is met, at which point it will empty the queue and execute the batch. <p>You can also flush already queued statements with an explicit {@code flush} call. Note that you need to this after queueing all parameters to guarantee that all statements have been flushed.
Set whether to track the rows affected by batch updates performed by this operation object. <p>Default is "true". Turn this off to save the memory needed for the list of row counts.
Trigger any queued update operations to be added as a final batch.
Return the current number of statements or statement parameters in the queue.
Return the number of already executed statements.
Return the number of affected rows for all already executed statements. Accumulates all of {@code flush}'s return values until {@code reset} is invoked.
Reset the statement parameter queue, the rows affected cache, and the execution count.
Convenient constructor with DataSource and SQL string.
Convenient constructor with DataSource and SQL string.
Subclasses must implement this method to convert each row of the ResultSet into an object of the result type. Subclasses are rarely interested in these. It can be {@code null} if there are no parameters. It can be {@code null} if no contextual information is need. Subclasses can simply not catch SQLExceptions, relying on the framework to clean up.
An alternative to the more commonly used setDataSource() when you want to use the same JdbcTemplate in multiple RdbmsOperations. This is appropriate if the JdbcTemplate has special configuration such as a SQLExceptionTranslator that should apply to multiple RdbmsOperation objects.
Return the JdbcTemplate object used by this object.
Set the JDBC DataSource to obtain connections from.
Set the fetch size for this RDBMS operation. This is important for processing large result sets: Setting this higher than the default value will increase processing speed at the cost of memory consumption; setting this lower can avoid transferring row data that will never be read by the application. <p>Default is 0, indicating to use the driver's default.
Set the maximum number of rows for this RDBMS operation. This is important for processing subsets of large result sets, avoiding to read and hold the entire result set in the database or in the JDBC driver. <p>Default is 0, indicating to use the driver's default.
Set the query timeout for statements that this RDBMS operation executes. <p>Default is 0, indicating to use the JDBC driver's default. <p>Note: Any timeout specified here will be overridden by the remaining transaction timeout when executing within a transaction that has a timeout specified at the transaction level.
Set whether to use statements that return a specific type of ResultSet.
Return whether statements will return a specific type of ResultSet.
Set whether to use statements that are capable of returning updatable ResultSets.
Return whether statements will return updatable ResultSets.
Set whether prepared statements should be capable of returning auto-generated keys.
Return whether statements should be capable of returning auto-generated keys.
Return the column names of the auto generated keys.
Set the SQL executed by this operation.
Subclasses can override this to supply dynamic SQL if they wish, but SQL is normally set by calling the setSql() method or in a subclass constructor.
Add anonymous parameters, specifying only their SQL types as defined in the {@code java.sql.Types} class. <p>Parameter ordering is significant. This method is an alternative to the {@link #declareParameter} method, which should normally be preferred. {@code java.sql.Types} class
Declare a parameter for this operation. <p>The order in which this method is called is significant when using positional parameters. It is not significant when using named parameters with named SqlParameter objects here; it remains significant when using named parameters in combination with unnamed SqlParameter objects here. the parameter's name. Note that you typically use the {@link SqlParameter} class itself here, not any of its subclasses. and hence cannot be configured further
Add one or more declared parameters. Used for configuring this operation when used in a bean factory.  Each parameter will specify SQL type and (optionally) the parameter's name.
Return a list of the declared {@link SqlParameter} objects.
Compile this query. Ignores subsequent attempts to compile. been correctly initialized, for example if no DataSource has been provided
Is this operation "compiled"? Compilation, as in JDO, means that the operation is fully configured, and ready to use. The exact meaning of compilation will vary between subclasses.
Validate the parameters passed to an execute method based on declared parameters. Subclasses should invoke this method before every {@code executeQuery()} or {@code update()} method.
Validate the named parameters passed to an execute method based on declared parameters. Subclasses should invoke this method before every {@code executeQuery()} or {@code update()} method.
Validate the given parameter count against the given declared parameters.
Subclasses must implement this template method to perform their own compilation. Invoked after this base class's compilation is complete. <p>Subclasses can assume that SQL and a DataSource have been supplied. properly configured
Return whether this operation accepts additional parameters that are given but not actually used. Applies in particular to parameter Maps. <p>The default is {@code false}.
Create a new SqlCall object with SQL, but without parameters. Must add parameters or settle with none.
Set whether this call is for a function.
Return whether this call is for a function.
Set whether the SQL can be used as is.
Return whether the SQL can be used as is.
Get the call string.
Return a CallableStatementCreator to perform an operation with this parameters.
Return a CallableStatementCreator to perform an operation with the parameters returned from this ParameterMapper.
Constructor to allow use as a JavaBean. A DataSource, SQL and any parameters must be supplied before invoking the {@code compile} method and using this object.
Create a new SqlFunction object with SQL, but without parameters. Must add parameters or settle with none.
Create a new SqlFunction object with SQL and parameters. {@code java.sql.Types} class
Create a new SqlFunction object with SQL, parameters and a result type. {@code java.sql.Types} class
Specify the type that the result object is required to match. <p>If not specified, the result value will be exposed as returned by the JDBC driver.
Convenient method to run the function without arguments.
Convenient method to run the function with a single int argument.
Analogous to the SqlQuery.execute([]) method. This is a generic method to execute a query, taken a number of arguments. object wrapper types for primitives.
Convenient method to run the function without arguments, returning the value as an object.
Convenient method to run the function with a single int argument.
Analogous to the {@code SqlQuery.findObject(Object[])} method. This is a generic method to execute a query, taken a number of arguments. object wrapper types for primitives.
Obtain a parsed representation of this operation's SQL statement. <p>Typically used for named parameter parsing.
Return a PreparedStatementSetter to perform an operation with the given parameters.
Return a PreparedStatementCreator to perform an operation with the given parameters.
Return a PreparedStatementCreator to perform an operation with the given parameters. the factory's, for example because of named parameter expanding)
Convenient constructor with a {@code DataSource} and SQL string. by overriding the {@link #getSql()} method.
Set the number of rows expected. <p>This can be used to ensure efficient storage of results. The default behavior is not to expect any specific number of rows.
Get the number of rows expected.
Central execution method. All un-named parameter execution goes through this method. Primitive parameters must be represented by their Object wrapper type. The ordering of parameters is significant. callback method. The JDBC operation itself doesn't rely on this parameter, but it can be useful for creating the objects of the result list. will be of the same class, although it is possible to use different types.
Convenient method to execute without context. be represented by their Object wrapper type. The ordering of parameters is significant.
Convenient method to execute without parameters.
Convenient method to execute without parameters nor context.
Convenient method to execute with a single int parameter and context.
Convenient method to execute with a single int parameter.
Convenient method to execute with two int parameters and context.
Convenient method to execute with two int parameters.
Convenient method to execute with a single long parameter and context.
Convenient method to execute with a single long parameter.
Convenient method to execute with a single String parameter and context.
Convenient method to execute with a single String parameter.
Central execution method. All named parameter execution goes through this method. the SqlParameters. Primitive parameters must be represented by their Object wrapper type. The ordering of parameters is not significant since they are supplied in a SqlParameterMap which is an implementation of the Map interface. callback method. The JDBC operation itself doesn't rely on this parameter, but it can be useful for creating the objects of the result list. will be of the same class, although it is possible to use different types.
Convenient method to execute without context. the SqlParameters. Primitive parameters must be represented by their Object wrapper type. The ordering of parameters is not significant.
Generic object finder method, used by all other {@code findObject} methods. Object finder methods are like EJB entity bean finders, in that it is considered an error if they return more than one result. choose to treat this as an error and throw an exception.
Convenient method to find a single object without context.
Convenient method to find a single object given a single int parameter and a context.
Convenient method to find a single object given a single int parameter.
Convenient method to find a single object given two int parameters and a context.
Convenient method to find a single object given two int parameters.
Convenient method to find a single object given a single long parameter and a context.
Convenient method to find a single object given a single long parameter.
Convenient method to find a single object given a single String parameter and a context.
Convenient method to find a single object given a single String parameter.
Generic object finder method for named parameters. matching named parameters specified in the SQL statement. Ordering is not significant. callback method. The JDBC operation itself doesn't rely on this parameter, but it can be useful for creating the objects of the result list. will be of the same class, although it is possible to use different types.
Convenient method to execute without context. matching named parameters specified in the SQL statement. Ordering is not significant.
Constructs an update object with a given DataSource and SQL.
Construct an update object with a given DataSource, SQL and anonymous parameters. {@code java.sql.Types} class
Construct an update object with a given DataSource, SQL, anonymous parameters and specifying the maximum number of rows that may be affected. {@code java.sql.Types} class be affected by the update
Set the maximum number of rows that may be affected by this update. The default value is 0, which does not limit the number of rows affected. this update without this class's update method considering it an error
Set the <i>exact</i> number of rows that must be affected by this update. The default value is 0, which allows any number of rows to be affected. <p>This is an alternative to setting the <i>maximum</i> number of rows that may be affected. by this update without this class's update method considering it an error
Check the given number of affected rows against the specified maximum number or required number. if the actually affected rows are out of bounds
Generic method to execute the update given parameters. All other update methods invoke this method.
Method to execute the update given arguments and retrieve the generated keys using a KeyHolder.
Convenience method to execute an update with no parameters.
Convenient method to execute an update given one int arg.
Convenient method to execute an update given two int args.
Convenient method to execute an update given one long arg.
Convenient method to execute an update given two long args.
Convenient method to execute an update given one String arg.
Convenient method to execute an update given two String args.
Generic method to execute the update given named parameters. All other update methods invoke this method. matching named parameters specified in the SQL statement
Method to execute the update given arguments and retrieve the generated keys using a KeyHolder. matching named parameters specified in the SQL statement
Create a new object wrapper for a stored procedure. of this object to obtain connections
Create a new object wrapper for a stored procedure.
Execute the stored procedure with the provided parameter values. This is a convenience method where the order of the passed in parameter values must match the order that the parameters where declared in. not be included in this map. It is legal for values to be {@code null}, and this will produce the correct behavior using a NULL argument to the stored procedure. Output parameters will appear here, with their values after the stored procedure has been called.
Execute the stored procedure. Subclasses should define a strongly typed execute method (with a meaningful name) that invokes this method, populating the input map and extracting typed values from the output map. Subclass execute methods will often take domain objects as arguments and return values. Alternatively, they can return void. declarations. Output parameters need not (but can) be included in this map. It is legal for map entries to be {@code null}, and this will produce the correct behavior using a NULL argument to the stored procedure. Output parameters will appear here, with their values after the stored procedure has been called.
Execute the stored procedure. Subclasses should define a strongly typed execute method (with a meaningful name) that invokes this method, passing in a ParameterMapper that will populate the input map.  This allows mapping database specific features since the ParameterMapper has access to the Connection object. The execute method is also responsible for extracting typed values from the output map. Subclass execute methods will often take domain objects as arguments and return values. Alternatively, they can return void. declarations. Output parameters need not (but can) be included in this map. It is legal for map entries to be {@code null}, and this will produce the correct behavior using a NULL argument to the stored procedure. Output parameters will appear here, with their values after the stored procedure has been called.
Constructor to allow use as a JavaBean
Convenient constructor with DataSource and SQL string.
Subclasses must implement this method to update each row of the ResultSet and optionally create object of the result type. It can be {@code null} if no contextual information is need.  If you need to pass in data for each row, you can pass in a HashMap with the primary key of the row being the key for the HashMap.  That way it is easy to locate the updates for each row Subclasses can simply not catch SQLExceptions, relying on the framework to clean up.
Convenience constructor.
Set the name of the column in the sequence table.
Return the name of the column in the sequence table.
Set the number of buffered keys.
Return the number of buffered keys.
Convenience constructor.
Set the data source to retrieve the value from.
Return the data source to retrieve the value from.
Set the name of the sequence/table.
Return the name of the sequence/table.
Set the padding length, i.e. the length to which a string result should be pre-pended with zeroes.
Return the padding length for String values.
Specify whether to delete the entire range below the current maximum key value ({@code false} - the default), or the specifically generated values ({@code true}). The former mode will use a where range clause whereas the latter will use an in clause starting with the lowest value minus 1, just preserving the maximum value.
Return whether to delete the entire range below the current maximum key value ({@code false} - the default), or the specifically generated values ({@code true}).
Statement to use to clean up "sequence" values. <p>The default implementation either deletes the entire range below the current maximum value, or the specifically generated values (starting with the lowest minus 1, just preserving the maximum value) - according to the {@link #isDeleteSpecificValues()} setting. (the number of values corresponds to {@link #getCacheSize()})
Convenience constructor.
Convenience constructor.
Convenience constructor.
Convenience constructor.
Set the name of the dummy column.
Return the name of the dummy column.
Convenience constructor.
Convenience constructor.
Convenience constructor.
Convenience constructor.
Convenience constructor.
Convenience constructor.
Convenience constructor.
Convenience constructor.
Convenience constructor.
Specify whether to submit a byte array / String to the JDBC driver wrapped in a JDBC Blob / Clob object, using the JDBC {@code setBlob} {@code setClob} method with a Blob / Clob argument. <p>Default is "false", using the common JDBC 2.0 {@code setBinaryStream} / {@code setCharacterStream} method for setting the content. Switch this to "true" for explicit Blob / Clob wrapping against JDBC drivers that are known to require such wrapping (e.g. PostgreSQL's for access to OID columns, whereas BYTEA columns need to be accessed the standard way). <p>This setting affects byte array / String arguments as well as stream arguments, unless {@link #setStreamAsLob "streamAsLob"} overrides this handling to use JDBC 4.0's new explicit streaming support (if available).
Specify whether to submit a binary stream / character stream to the JDBC driver as explicit LOB content, using the JDBC 4.0 {@code setBlob} {@code setClob} method with a stream argument. <p>Default is "false", using the common JDBC 2.0 {@code setBinaryStream} / {@code setCharacterStream} method for setting the content. Switch this to "true" for explicit JDBC 4.0 streaming, provided that your JDBC driver actually supports those JDBC 4.0 operations (e.g. Derby's). <p>This setting affects stream arguments as well as byte array / String arguments, requiring JDBC 4.0 support. For supporting LOB content against JDBC 3.0, check out the {@link #setWrapAsLob "wrapAsLob"} setting.
Specify whether to copy a byte array / String into a temporary JDBC Blob / Clob object created through the JDBC 4.0 {@code createBlob} {@code createClob} methods. <p>Default is "false", using the common JDBC 2.0 {@code setBinaryStream} / {@code setCharacterStream} method for setting the content. Switch this to "true" for explicit Blob / Clob creation using JDBC 4.0. <p>This setting affects stream arguments as well as byte array / String arguments, requiring JDBC 4.0 support. For supporting LOB content against JDBC 3.0, check out the {@link #setWrapAsLob "wrapAsLob"} setting.
Create a JtaLobCreatorSynchronization for the given LobCreator.
Register a transaction synchronization for closing the given LobCreator, preferring Spring transaction synchronization and falling back to plain JTA transaction synchronization. when no Spring transaction synchronization is active (may be {@code null}) synchronization nor active JTA transaction synchronization
Set an appropriate NativeJdbcExtractor to be able to retrieve the underlying native {@code oracle.jdbc.OracleConnection}. This is necessary for DataSource-based connection pools, as those need to return wrapped JDBC Connection handles that cannot be cast to a native Connection implementation. <p>Effectively, this LobHandler just invokes a single NativeJdbcExtractor method, namely {@code getNativeConnectionFromStatement} with a PreparedStatement argument (falling back to a {@code PreparedStatement.getConnection()} call if no extractor is set). <p>A common choice is {@code SimpleNativeJdbcExtractor}, whose Connection unwrapping (which is what OracleLobHandler needs) will work with many connection pools. See {@code SimpleNativeJdbcExtractor} and oracle.jdbc.OracleConnection</a> javadoc for details.
Set whether to cache the temporary LOB in the buffer cache. This value will be passed into BLOB/CLOB.createTemporary. <p>Default is {@code true}. <p><strong>See Also:</strong> <ul> </ul>
Set whether to aggressively release any resources used by the LOB. If set to {@code true} then you can only read the LOB values once. Any subsequent reads will fail since the resources have been closed. <p>Setting this property to {@code true} can be useful when your queries generates large temporary LOBs that occupy space in the TEMPORARY tablespace or when you want to free up any memory allocated by the driver for the LOB reading. <p>Default is {@code false}. <p><strong>See Also:</strong> <ul> </ul>
Retrieve the {@code oracle.sql.BLOB} and {@code oracle.sql.CLOB} classes via reflection, and initialize the values for the DURATION_SESSION, MODE_READWRITE and MODE_READONLY constants defined there. <p><strong>See Also:</strong> <ul> </ul> that the Oracle driver was loaded with
Initialize any LOB resources before a read is done. <p>This implementation calls {@code BLOB.open(BLOB.MODE_READONLY)} or {@code CLOB.open(CLOB.MODE_READONLY)} on any non-temporary LOBs if {@code releaseResourcesAfterRead} property is set to {@code true}. <p>This method can be overridden by sublcasses if different behavior is desired.
Release any LOB resources after read is complete. <p>If {@code releaseResourcesAfterRead} property is set to {@code true} then this implementation calls {@code BLOB.close()} or {@code CLOB.close()} on any non-temporary LOBs that are open or {@code BLOB.freeTemporary()} or {@code CLOB.freeTemporary()} on any temporary LOBs. <p>This method can be overridden by sublcasses if different behavior is desired.
Create a LOB instance for the given PreparedStatement, populating it via the given callback.
Retrieve the underlying OracleConnection, using a NativeJdbcExtractor if set.
Create and open an oracle.sql.BLOB/CLOB instance via reflection.
Create a SpringLobCreatorSynchronization for the given LobCreator.
This method is not meant to be used directly; it rather serves as callback method for C3P0's "rawConnectionOperation" API.
Extracts the innermost delegate from the given Commons DBCP object. Falls back to the given object if no underlying object found.
This constructor retrieves JBoss JDBC wrapper classes, so we can get the underlying vendor connection using reflection.
Set the vendor's Connection type, e.g. {@code oracle.jdbc.OracleConnection}.
Set the vendor's Statement type, e.g. {@code oracle.jdbc.OracleStatement}.
Set the vendor's PreparedStatement type, e.g. {@code oracle.jdbc.OraclePreparedStatement}.
Set the vendor's CallableStatement type, e.g. {@code oracle.jdbc.OracleCallableStatement}.
Set the vendor's ResultSet type, e.g. {@code oracle.jdbc.OracleResultSet}.
Not able to unwrap: return passed-in Connection.
Set whether it is necessary to work on the native Connection to receive native Statements. Default is "false". If true, the Connection will be unwrapped first to create a Statement. <p>This makes sense if you need to work with native Statements from a pool that does not allow to extract the native JDBC objects from its wrappers but returns the native Connection on DatabaseMetaData.getConnection. <p>The standard SimpleNativeJdbcExtractor is unable to unwrap statements, so set this to true if your connection pool wraps Statements.
Set whether it is necessary to work on the native Connection to receive native PreparedStatements. Default is "false". If true, the Connection will be unwrapped first to create a PreparedStatement. <p>This makes sense if you need to work with native PreparedStatements from a pool that does not allow to extract the native JDBC objects from its wrappers but returns the native Connection on Statement.getConnection. <p>The standard SimpleNativeJdbcExtractor is unable to unwrap statements, so set this to true if your connection pool wraps PreparedStatements.
Set whether it is necessary to work on the native Connection to receive native CallableStatements. Default is "false". If true, the Connection will be unwrapped first to create a CallableStatement. <p>This makes sense if you need to work with native CallableStatements from a pool that does not allow to extract the native JDBC objects from its wrappers but returns the native Connection on Statement.getConnection. <p>The standard SimpleNativeJdbcExtractor is unable to unwrap statements, so set this to true if your connection pool wraps CallableStatements.
This constructor retrieves the WebLogic JDBC extension interface, so we can get the underlying vendor connection using reflection.
This constructor retrieves WebSphere JDBC adapter classes, so we can get the underlying vendor connection using reflection.
Create a new ResultSetWrappingSqlRowSet for the given ResultSet. (usually a {@code javax.sql.rowset.CachedRowSet}) the ResultSetMetaData failed
Return the underlying ResultSet (usually a {@code javax.sql.rowset.CachedRowSet}).
Create a new ResultSetWrappingSqlRowSetMetaData object for the given ResultSetMetaData instance. to wrap (usually a {@code javax.sql.RowSetMetaData} instance)
Constructor for SqlXmlFeatureNotImplementedException.
Override the default SQL state fallback translator (typically a {@link SQLStateSQLExceptionTranslator}).
Return the fallback exception translator, if any.
Build a message {@code String} for the given {@link java.sql.SQLException}. <p>To be called by translator subclasses when creating an instance of a generic {@link org.springframework.dao.DataAccessException} class.
Set the SQL error codes to match.
Return the SQL error codes to match.
Set the exception class for the specified error codes.
Return the exception class for the specified error codes.
Setter for a Map of {@link SQLExceptionTranslator} references where the key must be the database name as defined in the {@code sql-error-codes.xml} file. <p>Note that any existing translators will remain unless there is a match in the database name, at which point the new translator will replace the existing one.
Register a new custom translator for the specified database name.
Find a custom translator for the specified database.
Set the DataSource to validate.
Set the SQL query string to use for validation.
Set the interval between validation runs (in seconds). Default is 1.
Set the timeout (in seconds) after which a fatal exception will be thrown. Default is 60.
Create a new GeneratedKeyHolder with a default list.
Create a new GeneratedKeyHolder with a given list.
Return the DataSource used by this template.
Specify the database product name for the DataSource that this accessor uses. This allows to initialize a SQLErrorCodeSQLExceptionTranslator without obtaining a Connection from the DataSource to get the metadata.
Set the exception translator for this instance. <p>If no custom translator is provided, a default {@link SQLErrorCodeSQLExceptionTranslator} is used which examines the SQLException's vendor-specific error code.
Return the exception translator for this instance. <p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator} for the specified DataSource if none set, or a {@link SQLStateSQLExceptionTranslator} in case of no DataSource.
Set whether to lazily initialize the SQLExceptionTranslator for this accessor, on first encounter of a SQLException. Default is "true"; can be switched to "false" for initialization on startup. <p>Early initialization just applies if {@code afterPropertiesSet()} is called.
Return whether to lazily initialize the SQLExceptionTranslator for this accessor.
Close the given JDBC Connection and ignore any thrown exception. This is useful for typical finally blocks in manual JDBC code.
Retrieve a JDBC column value from a ResultSet, using the most appropriate value type. The returned value should be a detached value object, not having any ties to the active ResultSet: in particular, it should not be a Blob or Clob object but rather a byte array or String representation, respectively. <p>Uses the {@code getObject(index)} method, but includes additional "hacks" to get around Oracle 10g returning a non-standard object for its TIMESTAMP datatype and a {@code java.sql.Date} for DATE columns leaving out the time portion: These columns will explicitly be extracted as standard {@code java.sql.Timestamp} object.
Extract database meta data via the given DatabaseMetaDataCallback. <p>This method will open a connection to the database and retrieve the database metadata. Since this method is called before the exception translation feature is configured for a datasource, this method can not rely on the SQLException translation functionality. <p>Any exceptions will be wrapped in a MetaDataAccessException. This is a checked exception and any calling code should catch and handle this exception. You can just log the error and hope for the best, but there is probably a more serious error that will reappear when you try to access the database again. the DatabaseMetaDataCallback's {@code processMetaData} method
Call the specified method on DatabaseMetaData for the given DataSource, and extract the invocation result. or failed to invoke the specified method
Return whether the given JDBC driver supports JDBC 2.0 batch updates. <p>Typically invoked right before execution of a given set of statements: to decide whether the set of SQL statements should be executed through the JDBC 2.0 batch mechanism or simply in a traditional one-by-one fashion. <p>Logs a warning if the "supportsBatchUpdates" methods throws an exception and simply returns {@code false} in that case.
Extract a common name for the database in use even if various drivers/platforms provide varying names.
Determine the column name to use. The column name is determined based on a lookup using ResultSetMetaData. <p>This method implementation takes into account recent clarifications expressed in the JDBC 4.0 specification: <p><i>columnLabel - the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column</i>.
Convert a column name with underscores to the corresponding property name using "camel case".  A name like "customer_number" would match a "customerNumber" property name.
Constructor for MetaDataAccessException.
Set this property if the database name contains spaces, in which case we can not use the bean name for lookup.
Set this property to specify multiple database names that contains spaces, in which case we can not use bean names for lookup.
Set this property to true for databases that do not provide an error code but that do provide SQL State (this includes PostgreSQL).
Create a new instance of the {@link SQLErrorCodesFactory} class. <p>Not public to enforce Singleton design pattern. Would be private except to allow testing via overriding the {@link #loadResource(String)} method. <p><b>Do not subclass in application code.</b>
Load the given resource from the class path. <p><b>Not to be overridden by application developers, who should obtain instances of this class from the static {@link #getInstance()} method.</b> <p>Protected for testability. {@link #SQL_ERROR_CODE_DEFAULT_PATH} or {@link #SQL_ERROR_CODE_OVERRIDE_PATH}.
Return the {@link SQLErrorCodes} instance for the given database. <p>No need for a database metadata lookup.
Return {@link SQLErrorCodes} for the given {@link DataSource}, evaluating "databaseProductName" from the {@link java.sql.DatabaseMetaData}, or an empty error codes instance if no {@code SQLErrorCodes} were found.
Associate the specified database name with the given {@link DataSource}. definition file (must not be {@code null})
Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.
Constructor for use as a JavaBean. The SqlErrorCodes or DataSource property must be set.
Create a SQL error code translator for the given DataSource. Invoking this constructor will cause a Connection to be obtained from the DataSource to get the metadata. which error codes are usable
Create a SQL error code translator for the given database product name. Invoking this constructor will avoid obtaining a Connection from the DataSource to get the metadata.
Create a SQLErrorCode translator given these error codes. Does not require a database metadata lookup to be performed using a connection.
Set the DataSource for this translator. <p>Setting this property will cause a Connection to be obtained from the DataSource to get the metadata. which error codes are usable
Set the database product name for this translator. <p>Setting this property will avoid obtaining a Connection from the DataSource to get the metadata.
Set custom error codes to be used for translation.
Return the error codes used by this translator. Usually determined via a DataSource.
Subclasses can override this method to attempt a custom mapping from SQLException to DataAccessException. resulting from custom translation. This exception should include the sqlEx parameter as a nested root cause. This implementation always returns null, meaning that the translator always falls back to the default error codes.
Create a custom DataAccessException, based on a given exception class from a CustomSQLErrorCodesTranslation definition. CustomSQLErrorCodesTranslation definition the resulting DataAccessException. This exception should include the sqlEx parameter as a nested root cause.
Gets the SQL state code from the supplied {@link SQLException exception}. <p>Some JDBC drivers nest the actual exception from a batched update, so we might need to dig down into the nested exception. is to be extracted
Constructor for BadSqlGrammarException.
Return the wrapped SQLException.
Return the SQL that caused the problem.
Constructor for CannotGetJdbcConnectionException.
Constructor for IncorrectResultSetColumnCountException.
Constructor for IncorrectResultCountDataAccessException.
Return the expected column count.
Return the actual column count.
Constructor for InvalidResultSetAccessException.
Constructor for JdbcUpdateAffectedIncorrectNumberOfRowsException.
Return the number of rows that should have been affected.
Return the number of rows that have actually been affected.
Constructor for LobRetrievalFailureException.
Constructor for SQLWarningException.
Return the underlying SQLWarning.
Constructor for UncategorizedSQLException.
Return the underlying SQLException.
Return the SQL that led to the problem.
If beanProperty is true, initialize via exception translator bean property; if false, use afterPropertiesSet().
Set the {@link JmsListenerEndpointRegistry} that will hold the created endpoint and manage the lifecycle of the related listener container.
Set the name of the {@link JmsListenerContainerFactory} to use by default. <p>If none is specified, "jmsListenerContainerFactory" is assumed to be defined.
Set the {@link MessageHandlerMethodFactory} to use to configure the message listener responsible to serve an endpoint detected by this processor. <p>By default, {@link DefaultMessageHandlerMethodFactory} is used and it can be configured further to support additional method arguments or to customize conversion and validation support. See {@link DefaultMessageHandlerMethodFactory} Javadoc for more details.
Process the given {@link JmsListener} annotation on the given method, registering a corresponding endpoint for the given bean instance.
Instantiate an empty {@link MethodJmsListenerEndpoint} for further configuration with provided parameters in {@link #processJmsListener}.
Set the name of the destination for this endpoint.
Return the name of the destination for this endpoint.
Set the name for the durable subscription.
Return the name for the durable subscription, if any.
Set the JMS message selector expression. <p>See the JMS specification for a detailed definition of selector expressions.
Return the JMS message selector expression, if any.
Set a concurrency for the listener, if any. <p>The concurrency limits can be a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case). <p>The underlying container may or may not support all features. For instance, it may not be able to scale: in that case only the upper value is used.
Return the concurrency for the listener, if any.
Return a description for this endpoint. <p>Available to subclasses, for inclusion in their {@code toString()} result.
Create an empty container instance.
Set the {@link JmsListenerEndpointRegistry} instance to use.
Return the {@link JmsListenerEndpointRegistry} instance for this registrar, may be {@code null}.
Set the {@link MessageHandlerMethodFactory} to use to configure the message listener responsible to serve an endpoint detected by this processor. <p>By default, {@link DefaultMessageHandlerMethodFactory} is used and it can be configured further to support additional method arguments or to customize conversion and validation support. See {@link DefaultMessageHandlerMethodFactory} javadoc for more details.
Return the custom {@link MessageHandlerMethodFactory} to use, if any.
Set the {@link JmsListenerContainerFactory} to use in case a {@link JmsListenerEndpoint} is registered with a {@code null} container factory. <p>Alternatively, the bean name of the {@link JmsListenerContainerFactory} to use can be specified for a lazy lookup, see {@link #setContainerFactoryBeanName}.
Set the bean name of the {@link JmsListenerContainerFactory} to use in case a {@link JmsListenerEndpoint} is registered with a {@code null} container factory. Alternatively, the container factory instance can be registered directly: see {@link #setContainerFactory(JmsListenerContainerFactory)}.
Register a new {@link JmsListenerEndpoint} alongside the {@link JmsListenerContainerFactory} to use to create the underlying container. <p>The {@code factory} may be {@code null} if the default factory has to be used for that endpoint.
Register a new {@link JmsListenerEndpoint} using the default {@link JmsListenerContainerFactory} to create the underlying container.
Return the {@link MessageListenerContainer} with the specified id or {@code null} if no such container exists.
Return the ids of the managed {@link MessageListenerContainer} instance(s).
Return the managed {@link MessageListenerContainer} instance(s).
Create a message listener container for the given {@link JmsListenerEndpoint}. <p>This create the necessary infrastructure to honor that endpoint with regards to its configuration. <p>The {@code startImmediately} flag determines if the container should be started immediately.
Create a message listener container for the given {@link JmsListenerEndpoint}. <p>This create the necessary infrastructure to honor that endpoint with regards to its configuration.
Create and start a new container using the specified factory.
Start the specified {@link MessageListenerContainer} if it should be started on startup.
Set the actual bean instance to invoke this endpoint method on.
Set the method to invoke for processing a message managed by this endpoint.
Set the most specific method known for this endpoint's declaration. <p>In case of a proxy, this will be the method on the target class (if annotated itself, that is, if not just annotated in an interface).
Set the {@link MessageHandlerMethodFactory} to use to build the {@link InvocableHandlerMethod} responsible to manage the invocation of this endpoint.
Set a value resolver for embedded placeholders and expressions.
Create an empty {@link MessagingMessageListenerAdapter} instance.
Return the default response destination, if any.
Set the {@link MessageListener} to invoke when a message matching the endpoint is received.
Return the {@link MessageListener} to invoke when a message matching the endpoint is received.
Build a dynamic proxy that reflectively adapts to JMS 2.0 API methods, if necessary. Otherwise simply return this CachedMessageProducer instance itself.
Create a new CachingConnectionFactory for bean-style usage.
Create a new CachingConnectionFactory for the given target ConnectionFactory.
Specify the desired size for the JMS Session cache (per JMS Session type). <p>This cache size is the maximum limit for the number of cached Sessions per session acknowledgement type (auto, client, dups_ok, transacted). As a consequence, the actual number of cached Sessions may be up to four times as high as the specified value - in the unlikely case of mixing and matching different acknowledgement types. <p>Default is 1: caching a single Session, (re-)creating further ones on demand. Specify a number like 10 if you'd like to raise the number of cached Sessions; that said, 1 may be sufficient for low-concurrency scenarios.
Return the desired size for the JMS Session cache (per JMS Session type).
Specify whether to cache JMS MessageProducers per JMS Session instance (more specifically: one MessageProducer per Destination and Session). <p>Default is "true". Switch this to "false" in order to always recreate MessageProducers on demand.
Return whether to cache JMS MessageProducers per JMS Session instance.
Specify whether to cache JMS MessageConsumers per JMS Session instance (more specifically: one MessageConsumer per Destination, selector String and Session). Note that durable subscribers will only be cached until logical closing of the Session handle. <p>Default is "true". Switch this to "false" in order to always recreate MessageConsumers on demand.
Return whether to cache JMS MessageConsumers per JMS Session instance.
Wrap the given Session with a proxy that delegates every method call to it but adapts close calls. This is useful for allowing application code to handle a special framework Session just like an ordinary Session.
Add an ExceptionListener to the chained delegate list.
Return all registered ExceptionListener delegates (as array).
Release the given Connection, stopping it (if necessary) and eventually closing it. <p>Checks {@link SmartConnectionFactory#shouldStop}, if available. This is essentially a more sophisticated version of {@link org.springframework.jms.support.JmsUtils#closeConnection}. (if this is {@code null}, the call will be ignored) (may be {@code null})
Return the innermost target Session of the given Session. If the given Session is a proxy, it will be unwrapped until a non-proxy Session is found. Otherwise, the passed-in Session will be returned as-is.
Determine whether the given JMS Session is transactional, that is, bound to the current thread by Spring's transaction facilities.
Obtain a JMS Session that is synchronized with the current transaction, if any. (may be {@code null}) that is synchronized with a Spring-managed transaction (where the main transaction might be a JDBC-based one for a specific DataSource, for example), with the JMS transaction committing right after the main transaction. If not allowed, the given ConnectionFactory needs to handle transaction enlistment underneath the covers.
Obtain a JMS QueueSession that is synchronized with the current transaction, if any. <p>Mainly intended for use with the JMS 1.0.2 API. (may be {@code null}) that is synchronized with a Spring-managed transaction (where the main transaction might be a JDBC-based one for a specific DataSource, for example), with the JMS transaction committing right after the main transaction. If not allowed, the given ConnectionFactory needs to handle transaction enlistment underneath the covers.
Obtain a JMS TopicSession that is synchronized with the current transaction, if any. <p>Mainly intended for use with the JMS 1.0.2 API. (may be {@code null}) that is synchronized with a Spring-managed transaction (where the main transaction might be a JDBC-based one for a specific DataSource, for example), with the JMS transaction committing right after the main transaction. If not allowed, the given ConnectionFactory needs to handle transaction enlistment underneath the covers.
Obtain a JMS Session that is synchronized with the current transaction, if any. <p>This {@code doGetTransactionalSession} variant always starts the underlying JMS Connection, assuming that the Session will be used for receiving messages. (used as TransactionSynchronizationManager key) JMS resources
Obtain a JMS Session that is synchronized with the current transaction, if any. (used as TransactionSynchronizationManager key) JMS resources started in order to allow for receiving messages. Note that a reused Connection may already have been started before, even if this flag is {@code false}.
Create a new JMS Connection for registration with a JmsResourceHolder.
Set the target ConnectionFactory that this ConnectionFactory should delegate to.
Return the target ConnectionFactory that this ConnectionFactory delegates to.
Indicate whether Connections obtained from the target factory are supposed to be stopped before closed ("true") or simply closed ("false"). An extra stop call may be necessary for some connection pools that simply return released connections to the pool, not stopping them while they sit in the pool. <p>Default is "false", simply closing Connections.
Create a new JmsResourceHolder that is open for resources to be added. resource holder is associated with (may be {@code null})
Create a new JmsResourceHolder for the given JMS Session.
Create a new JmsResourceHolder for the given JMS resources.
Create a new JmsResourceHolder for the given JMS resources. resource holder is associated with (may be {@code null})
Create a new JmsTransactionManager for bean-style usage. <p>Note: The ConnectionFactory has to be set before using the instance. This constructor can be used to prepare a JmsTemplate via a BeanFactory, typically setting the ConnectionFactory via setConnectionFactory. <p>Turns off transaction synchronization by default, as this manager might be used alongside a datastore-based Spring transaction manager like DataSourceTransactionManager, which has stronger needs for synchronization. Only one manager is allowed to drive synchronization at any point of time.
Create a new JmsTransactionManager, given a ConnectionFactory.
Set the JMS ConnectionFactory that this instance should manage transactions for.
Return the JMS ConnectionFactory that this instance should manage transactions for.
Create a JMS Connection via this template's ConnectionFactory. <p>This implementation uses JMS 1.1 API.
Create a JMS Session for the given Connection. <p>This implementation uses JMS 1.1 API.
Create a new SingleConnectionFactory that always returns the given Connection.
Create a new SingleConnectionFactory that always returns a single Connection that it will lazily create via the given target ConnectionFactory.
Set the target ConnectionFactory which will be used to lazily create a single Connection.
Return the target ConnectionFactory which will be used to lazily create a single Connection, if any.
Specify a JMS client ID for the single Connection created and exposed by this ConnectionFactory. <p>Note that client IDs need to be unique among all active Connections of the underlying JMS provider. Furthermore, a client ID can only be assigned if the original ConnectionFactory hasn't already assigned one.
Return a JMS client ID for the single Connection created and exposed by this ConnectionFactory, if any.
Specify an JMS ExceptionListener implementation that should be
Return the JMS ExceptionListener implementation that should be registered
Specify whether the single Connection should be reset (to be subsequently renewed) when a JMSException is reported by the underlying Connection. <p>Default is "false". Switch this to "true" to automatically trigger recovery based on your JMS provider's exception notifications. <p>Internally, this will lead to a special JMS ExceptionListener (this SingleConnectionFactory itself) being registered with the underlying Connection. This can also be combined with a user-specified ExceptionListener, if desired.
Return whether the single Connection should be renewed when a JMSException is reported by the underlying Connection.
Obtain an initialized shared Connection.
Initialize the underlying shared Connection. <p>Closes and reinitializes the Connection if an underlying Connection is present already.
Create a JMS Connection via this template's ConnectionFactory.
Prepare the given Connection before it is exposed. <p>The default implementation applies ExceptionListener and client id. Can be overridden in subclasses.
Template method for obtaining a (potentially cached) Session. <p>The default implementation always returns {@code null}. Subclasses may override this for exposing specific Session handles, possibly delegating to {@link #createSession} for the creation of raw Session objects that will then get wrapped and returned from here. ({@code Session.TRANSACTED} or one of the common modes) creation of a raw standard Session
Create a default Session for this ConnectionFactory, adapting to JMS 1.0.2 style queue/topic mode if necessary. ({@code Session.TRANSACTED} or one of the common modes)
Close the given Connection.
Wrap the given Connection with a proxy that delegates every method call to it but suppresses close calls. This is useful for allowing application code to handle a special framework Connection just like an ordinary Connection from a JMS ConnectionFactory.
Create a new SynchedLocalTransactionFailedException.
Create a new TransactionAwareConnectionFactoryProxy.
Return the target ConnectionFactory that this ConnectionFactory should delegate to.
Set whether to allow for a local JMS transaction that is synchronized with a Spring-managed transaction (where the main transaction might be a JDBC-based one for a specific DataSource, for example), with the JMS transaction committing right after the main transaction. If not allowed, the given ConnectionFactory needs to handle transaction enlistment underneath the covers. <p>Default is "false": If not within a managed transaction that encompasses the underlying JMS ConnectionFactory, standard Sessions will be returned. Turn this flag on to allow participation in any Spring-managed transaction, with a local JMS transaction synchronized with the main transaction.
Return whether to allow for a local JMS transaction that is synchronized with a Spring-managed transaction.
Wrap the given Connection with a proxy that delegates every method call to it but handles Session lookup in a transaction-aware fashion.
Set the username that this adapter should use for retrieving Connections. Default is no specific user.
Set the password that this adapter should use for retrieving Connections. Default is no specific password.
Set user credententials for this proxy and the current thread. The given username and password will be applied to all subsequent {@code createConnection()} calls on this ConnectionFactory proxy. <p>This will override any statically specified user credentials, that is, values of the "username" and "password" bean properties.
This implementation delegates to the {@code createConnection(username, password)} method of the target ConnectionFactory, passing in the specified user credentials. If the specified username is empty, it will simply delegate to the standard {@code createConnection()} method of the target ConnectionFactory.
This implementation delegates to the {@code createQueueConnection(username, password)} method of the target QueueConnectionFactory, passing in the specified user credentials. If the specified username is empty, it will simply delegate to the standard {@code createQueueConnection()} method of the target ConnectionFactory.
This implementation delegates to the {@code createTopicConnection(username, password)} method of the target TopicConnectionFactory, passing in the specified user credentials. If the specified username is empty, it will simply delegate to the standard {@code createTopicConnection()} method of the target ConnectionFactory.
Set the JMS connection factory to be used by the gateway. Will automatically create a JmsTemplate for the given ConnectionFactory.
Create a JmsTemplate for the given ConnectionFactory. Only invoked if populating the gateway with a ConnectionFactory reference. <p>Can be overridden in subclasses to provide a JmsTemplate instance with a different configuration.
Return the JMS ConnectionFactory used by the gateway.
Set the JmsTemplate for the gateway.
Return the JmsTemplate for the gateway.
Create a {@code JmsMessagingTemplate} instance with the JMS {@link ConnectionFactory} to use, implicitly building a {@link JmsTemplate} based on it.
Create a {@code JmsMessagingTemplate} instance with the {@link JmsTemplate} to use.
Set the ConnectionFactory to use for the underlying {@link JmsTemplate}.
Return the ConnectionFactory that the underlying {@link JmsTemplate} uses.
Set the {@link JmsTemplate} to use.
Return the configured {@link JmsTemplate}.
Set the {@link MessageConverter} to use to convert a {@link Message} from the messaging to and from a {@link javax.jms.Message}. By default, a {@link MessagingMessageConverter} is defined using a {@link SimpleMessageConverter} to convert the payload of the message. <p>Consider configuring a {@link MessagingMessageConverter} with a different {@link MessagingMessageConverter#setPayloadConverter(MessageConverter) payload converter} for more advanced scenarios.
Return the {@link MessageConverter} to use to convert a {@link Message} from the messaging to and from a {@link javax.jms.Message}.
Configure the default destination name to use in send methods that don't have a destination argument. If a default destination is not configured, send methods without a destination argument will raise an exception if invoked.
Return the configured default destination name.
Create a new JmsTemplate for bean-style usage. <p>Note: The ConnectionFactory has to be set before using the instance. This constructor can be used to prepare a JmsTemplate via a BeanFactory, typically setting the ConnectionFactory via setConnectionFactory.
Create a new JmsTemplate, given a ConnectionFactory.
Initialize the default implementations for the template's strategies: DynamicDestinationResolver and SimpleMessageConverter.
Set the destination to be used on send/receive operations that do not have a destination parameter. <p>Alternatively, specify a "defaultDestinationName", to be dynamically resolved via the DestinationResolver.
Return the destination to be used on send/receive operations that do not have a destination parameter.
Set the destination name to be used on send/receive operations that do not have a destination parameter. The specified name will be dynamically resolved via the DestinationResolver. <p>Alternatively, specify a JMS Destination object as "defaultDestination".
Return the destination name to be used on send/receive operations that do not have a destination parameter.
Set the message converter for this template. Used to resolve Object parameters to convertAndSend methods and Object results from receiveAndConvert methods. <p>The default converter is a SimpleMessageConverter, which is able to handle BytesMessages, TextMessages and ObjectMessages.
Return the message converter for this template.
Set whether message IDs are enabled. Default is "true". <p>This is only a hint to the JMS producer. See the JMS javadocs for details.
Return whether message IDs are enabled.
Set whether message timestamps are enabled. Default is "true". <p>This is only a hint to the JMS producer. See the JMS javadocs for details.
Return whether message timestamps are enabled.
Set whether to inhibit the delivery of messages published by its own connection. Default is "false".
Return whether to inhibit the delivery of messages published by its own connection.
Set the timeout to use for receive calls (in milliseconds). <p>The default is {@link #RECEIVE_TIMEOUT_INDEFINITE_WAIT}, which indicates a blocking receive without timeout. <p>Specify {@link #RECEIVE_TIMEOUT_NO_WAIT} to inidicate that a receive operation should check if a message is immediately available without blocking.
Return the timeout to use for receive calls (in milliseconds).
Set the delivery delay to use for send calls (in milliseconds). <p>The default is -1 (no delivery delay passed on to the broker). Note that this feature requires JMS 2.0.
Return the delivery delay to use for send calls (in milliseconds).
Set if the QOS values (deliveryMode, priority, timeToLive) should be used for sending a message.
If "true", then the values of deliveryMode, priority, and timeToLive will be used when sending a message. Otherwise, the default values, that may be set administratively, will be used. (deliveryMode, priority, and timeToLive)
Set whether message delivery should be persistent or non-persistent, specified as boolean value ("true" or "false"). This will set the delivery mode accordingly, to either "PERSISTENT" (2) or "NON_PERSISTENT" (1). <p>Default is "true" a.k.a. delivery mode "PERSISTENT".
Set the delivery mode to use when sending a message. Default is the JMS Message default: "PERSISTENT". <p>Since a default value may be defined administratively, this is only used when "isExplicitQosEnabled" equals "true".
Return the delivery mode to use when sending a message.
Set the priority of a message when sending. <p>Since a default value may be defined administratively, this is only used when "isExplicitQosEnabled" equals "true".
Return the priority of a message when sending.
Set the time-to-live of the message when sending. <p>Since a default value may be defined administratively, this is only used when "isExplicitQosEnabled" equals "true".
Return the time-to-live of the message when sending.
Execute the action specified by the given action object within a JMS Session. Generalized version of {@code execute(SessionCallback)}, allowing the JMS Connection to be started on the fly. <p>Use {@code execute(SessionCallback)} for the general case. Starting the JMS Connection is just necessary for receiving messages, which is preferably achieved through the {@code receive} methods.
Send the given JMS message.
Actually send the given JMS message.
Receive a JMS message.
Actually receive a JMS message.
Actually receive a message from the given consumer.
Extract the content from the given JMS message.
Send a request message to the given {@link Destination} and block until a reply has been received on a temporary queue created on-the-fly. <p>Return the response message or {@code null} if no message has
A variant of {@link #execute(SessionCallback, boolean)} that explicitly creates a non-transactional {@link Session}. The given {@link SessionCallback} does not participate in an existing transaction.
Fetch an appropriate Connection from the given JmsResourceHolder. <p>This implementation accepts any JMS 1.1 Connection. or {@code null} if none found
Fetch an appropriate Session from the given JmsResourceHolder. <p>This implementation accepts any JMS 1.1 Session. or {@code null} if none found
Check whether the given Session is locally transacted, that is, whether its transaction is managed by this listener container's Session handling and not by an external transaction coordinator. <p>Note: The Session's own transacted flag will already have been checked before. This method is about finding out whether the Session's transaction is local or externally coordinated.
Create a JMS MessageProducer for the given Session and Destination, configuring it to disable message ids and/or timestamps (if necessary). <p>Delegates to {@link #doCreateProducer} for creation of the raw JMS MessageProducer.
Create a raw JMS MessageProducer for the given Session and Destination. <p>This implementation uses JMS 1.1 API.
Create a JMS MessageConsumer for the given Session and Destination. <p>This implementation uses JMS 1.1 API.
Create a JMS MessageProducer for the given Session and Destination, configuring it to disable message ids and/or timestamps (if necessary). <p>Delegates to {@link #doCreateProducer} for creation of the raw JMS MessageProducer.
Set the default destination to send response messages to. This will be applied in case of a request message that does not carry a "JMSReplyTo" field. <p>Response destinations are only relevant for listener methods that return result objects, which will be wrapped in a response message and sent to a response destination. <p>Alternatively, specify a "defaultResponseQueueName" or "defaultResponseTopicName", to be dynamically resolved via the DestinationResolver.
Set the name of the default response queue to send response messages to. This will be applied in case of a request message that does not carry a "JMSReplyTo" field. <p>Alternatively, specify a JMS Destination object as "defaultResponseDestination".
Set the name of the default response topic to send response messages to. This will be applied in case of a request message that does not carry a "JMSReplyTo" field. <p>Alternatively, specify a JMS Destination object as "defaultResponseDestination".
Set the DestinationResolver that should be used to resolve response destination names for this adapter. <p>The default resolver is a DynamicDestinationResolver. Specify a JndiDestinationResolver for resolving destination names as JNDI locations.
Return the DestinationResolver for this adapter.
Set the converter that will convert incoming JMS messages to listener method arguments, and objects returned from listener methods back to JMS messages. <p>The default converter is a {@link SimpleMessageConverter}, which is able to handle {@link javax.jms.BytesMessage BytesMessages}, {@link javax.jms.TextMessage TextMessages} and {@link javax.jms.ObjectMessage ObjectMessages}.
Return the converter that will convert incoming JMS messages to listener method arguments, and objects returned from listener methods back to JMS messages.
Set the {@link JmsHeaderMapper} implementation to use to map the standard JMS headers. By default, a {@link SimpleJmsHeaderMapper} is used.
Return the {@link MessagingMessageConverter} for this listener, being able to convert {@link org.springframework.messaging.Message}.
Handle the given exception that arose during listener execution. The default implementation logs the exception at error level. <p>This method only applies when used as standard JMS {@link MessageListener}. In case of the Spring {@link SessionAwareMessageListener} mechanism, exceptions get handled by the caller instead.
Extract the message body from the given JMS message. as an argument
Handle the given result object returned from the listener method, sending a response message back.
Build a JMS message to be sent as response based on the given result object.
Pre-process the given result before it is converted to a {@link Message}. object (for instance wrapping the result).
Post-process the given response message before it will be sent. <p>The default implementation sets the response's correlation id to the request message's correlation id, if any; otherwise to the request message id.
Determine a response destination for the given message. <p>The default implementation first checks the JMS Reply-To {@link Destination} of the supplied request; if that is not {@code null} it is returned; if it is {@code null}, then the configured {@link #resolveDefaultResponseDestination default response destination} is returned; if this too is {@code null}, then an {@link javax.jms.InvalidDestinationException} is thrown.
Resolve the default response destination into a JMS {@link Destination}, using this accessor's {@link DestinationResolver} in case of a destination name.
Send the given response message to the given destination.
Create a new instance
Return the content of the response.
Resolve the {@link Destination} to use for this instance. The {@link DestinationResolver} and {@link Session} can be used to resolve a destination at runtime.
Create a {@link JmsResponse} targeting the queue with the specified name.
Create a {@link JmsResponse} targeting the topic with the specified name.
Create a {@link JmsResponse} targeting the specified {@link Destination}.
Constructor for ListenerExecutionFailedException.
Create a new {@link MessageListenerAdapter} with default settings.
Create a new {@link MessageListenerAdapter} for the given delegate.
Set a target object to delegate message listening to. Specified listener methods have to be present on this target object. <p>If no explicit delegate object has been specified, listener methods are expected to present on this adapter instance, that is, on a custom subclass of this adapter, defining listener methods.
Return the target object to delegate message listening to.
Specify the name of the default listener method to delegate to, for the case where no specific listener method has been determined. Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}.
Return the name of the default listener method to delegate to.
Determine the name of the listener method that is supposed to handle the given message. <p>The default implementation simply returns the configured default listener method, if any. to be passed into the listener method as argument
Build an array of arguments to be passed into the target listener method. Allows for multiple method arguments to be built from a single message object. <p>The default implementation builds an array with the given message object as sole element. This means that the extracted message will always be passed into a <i>single</i> method argument, even if it is an array, with the target method having a corresponding single argument of the array's type declared. <p>This can be overridden to treat special message content such as arrays differently, for example passing in each element of the message array as distinct method argument. listener method (each element of the array corresponding to a distinct method argument)
Invoke the specified listener method.
Set the {@link InvocableHandlerMethod} to use to invoke the method processing an incoming {@link javax.jms.Message}.
Invoke the handler, wrapping any exception to a {@link ListenerExecutionFailedException} with a dedicated error message.
Set the JMS acknowledgement mode by the name of the corresponding constant in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE". <p>Note that JCA resource adapters generally only support auto and dups-ok (see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also supports "SESSION_TRANSACTED" in the form of RA-managed transactions (automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}.
Set the JMS acknowledgement mode to use.
Return the JMS acknowledgement mode to use.
Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10". <p>JCA listener containers will always scale from zero to the given upper limit. A specified lower limit will effectively be ignored. <p>This property is primarily supported for configuration compatibility with {@link org.springframework.jms.listener.DefaultMessageListenerContainer}. For this activation config, generally use {@link #setMaxConcurrency} instead.
Specify the maximum number of consumers/sessions to use, effectively controlling the number of concurrent invocations on the target listener.
Return the maximum number of consumers/sessions to use.
Specify the maximum number of messages to load into a session (a kind of batch size).
Return the maximum number of messages to load into a session.
Set the {@link MessageConverter} strategy for converting JMS Messages.
Return the {@link MessageConverter} to use, if any.
Set the JMS MessageListener for this endpoint.
Return the JMS MessageListener for this endpoint.
Set the JMS MessageListener for this endpoint. <p>This is a shortcut for configuring a dedicated JmsMessageEndpointFactory.
Set the XA transaction manager to use for wrapping endpoint invocations, enlisting the endpoint resource in each such transaction. <p>The passed-in object may be a transaction manager which implements Spring's {@link org.springframework.transaction.jta.TransactionFactory} interface, or a plain {@link javax.transaction.TransactionManager}. <p>If no transaction manager is specified, the endpoint invocation will simply not be wrapped in an XA transaction. Consult your resource provider's ActivationSpec documentation for the local transaction options of your particular provider. <p>This is a shortcut for configuring a dedicated JmsMessageEndpointFactory.
Set the factory for concrete JCA 1.5 ActivationSpec objects, creating JCA ActivationSpecs based on {@link #setActivationSpecConfig JmsActivationSpecConfig} objects. <p>This factory is dependent on the concrete JMS provider, e.g. on ActiveMQ. The default implementation simply guesses the ActivationSpec class name from the provider's class name (e.g. "ActiveMQResourceAdapter" -> "ActiveMQActivationSpec" in the same package), and populates the ActivationSpec properties as suggested by the JCA 1.5 specification (plus a couple of autodetected vendor-specific properties).
Set the DestinationResolver to use for resolving destination names into the JCA 1.5 ActivationSpec "destination" property. <p>If not specified, destination names will simply be passed in as Strings. If specified, destination names will be resolved into Destination objects first. <p>Note that a DestinationResolver is usually specified on the JmsActivationSpecFactory (see {@link StandardJmsActivationSpecFactory#setDestinationResolver}). This is simply a shortcut for parameterizing the default JmsActivationSpecFactory; it will replace any custom JmsActivationSpecFactory that might have been set before.
Specify the {@link JmsActivationSpecConfig} object that this endpoint manager should use for activating its listener. <p>This config object will be turned into a concrete JCA 1.5 ActivationSpec object through a {@link #setActivationSpecFactory JmsActivationSpecFactory}.
Return the {@link JmsActivationSpecConfig} object that this endpoint manager should use for activating its listener. Return {@code null} if none is set.
Specify the fully-qualified ActivationSpec class name for the target provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").
Specify custom default properties, with String keys and String values. <p>Applied to each ActivationSpec object before it gets populated with listener-specific settings. Allows for configuring vendor-specific properties beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.
Set the DestinationResolver to use for resolving destination names into the JCA 1.5 ActivationSpec "destination" property. <p>If not specified, destination names will simply be passed in as Strings. If specified, destination names will be resolved into Destination objects first. <p>Note that a DestinationResolver for use with this factory must be able to work <i>without</i> an active JMS Session: e.g. {@link org.springframework.jms.support.destination.JndiDestinationResolver} or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver} but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.
Return the {@link DestinationResolver} to use for resolving destinations names.
Determine the ActivationSpec class for the given ResourceAdapter, if possible. Called if no 'activationSpecClass' has been set explicitly if not determinable
Populate the given ApplicationSpec object with the settings defined in the given configuration object. <p>This implementation applies all standard JMS settings, but ignores "maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5.
Apply the specified acknowledge mode to the ActivationSpec object. <p>This implementation applies the standard JCA 1.5 acknowledge modes "Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED} having been requested. (according to the constants in {@link javax.jms.Session}
Specify the JMS client ID for a shared Connection created and used by this container. <p>Note that client IDs need to be unique among all active Connections of the underlying JMS provider. Furthermore, a client ID can only be assigned if the original ConnectionFactory hasn't already assigned one.
Return the JMS client ID for the shared Connection created and used by this container, if any.
Set whether to automatically start the container after initialization. <p>Default is "true"; set this to "false" to allow for manual startup through the {@link #start()} method.
Specify the phase in which this container should be started and stopped. The startup order proceeds from lowest to highest, and the shutdown order is the reverse of that. By default this value is Integer.MAX_VALUE meaning that this container starts as late as possible and stops as soon as possible.
Return the bean name that this listener container has been assigned in its containing bean factory, if any.
Initialize this container. <p>Creates a JMS Connection, starts the {@link javax.jms.Connection} (if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off), and calls {@link #doInitialize()}.
Stop the shared Connection, call {@link #doShutdown()}, and close this container.
Return whether this container is currently active, that is, whether it has been set up but not shut down yet.
Start the shared Connection, if any, and notify all invoker tasks.
Notify all invoker tasks and stop the shared Connection, if any.
Check whether this container's listeners are generally allowed to run. <p>This implementation always returns {@code true}; the default 'running' state is purely determined by {@link #start()} / {@link #stop()}. <p>Subclasses may override this method to check against temporary conditions that prevent listeners from actually running. In other words, they may apply further restrictions to the 'running' state, returning {@code false} if such a restriction prevents listeners from running.
Establish a shared Connection for this container. <p>The default implementation delegates to {@link #createSharedConnection()}, which does one immediate attempt and throws an exception if it fails. Can be overridden to have a recovery process in place, retrying until a Connection can be successfully established.
Refresh the shared Connection that this container holds. <p>Called on startup and also after an infrastructure exception that occurred during invoker setup and/or execution.
Create a shared Connection for this container. <p>The default implementation creates a standard Connection and prepares it through {@link #prepareSharedConnection}.
Prepare the given Connection, which is about to be registered as shared Connection for this container. <p>The default implementation sets the specified client id, if any. Subclasses can override this to apply further settings.
Start the shared Connection.
Stop the shared Connection.
Return the shared JMS Connection maintained by this container. Available after initialization. shared Connection, or if the Connection hasn't been initialized yet
Take the given task object and reschedule it, either immediately if this container is currently running, or later once this container has been restarted. <p>If this container has already been shut down, the task will not get rescheduled at all. (either immediately or for a restart of this container)
Try to resume all paused tasks. Tasks for which rescheduling failed simply remain in paused mode.
Determine the number of currently paused tasks, if any.
Reschedule the given task object immediately. <p>To be implemented by subclasses if they ever call {@code rescheduleTaskIfNecessary}. This implementation throws an UnsupportedOperationException.
Log a task that has been rejected by {@link #doRescheduleTask}. <p>The default implementation simply logs a corresponding message at debug level.
Register any invokers within this container. <p>Subclasses need to implement this method for their specific invoker management process. <p>A shared JMS Connection, if any, will already have been started at this point.
Set the destination to receive messages from. <p>Alternatively, specify a "destinationName", to be dynamically resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}. <p>Note: The destination may be replaced at runtime, with the listener container picking up the new destination immediately (works e.g. with DefaultMessageListenerContainer, as long as the cache level is less than CACHE_CONSUMER). However, this is considered advanced usage; use it with care!
Return the destination to receive messages from. Will be {@code null} if the configured destination is not an actual {@link Destination} type; c.f. {@link #setDestinationName(String) when the destination is a String}.
Set the name of the destination to receive messages from. <p>The specified name will be dynamically resolved via the configured {@link #setDestinationResolver destination resolver}. <p>Alternatively, specify a JMS {@link Destination} object as "destination". <p>Note: The destination may be replaced at runtime, with the listener container picking up the new destination immediately (works e.g. with DefaultMessageListenerContainer, as long as the cache level is less than CACHE_CONSUMER). However, this is considered advanced usage; use it with care!
Return the name of the destination to receive messages from. Will be {@code null} if the configured destination is not a {@link String} type; c.f. {@link #setDestination(Destination) when it is an actual Destination}.
Return a descriptive String for this container's JMS destination (never {@code null}).
Set the JMS message selector expression (or {@code null} if none). Default is none. <p>See the JMS specification for a detailed definition of selector expressions. <p>Note: The message selector may be replaced at runtime, with the listener container picking up the new selector value immediately (works e.g. with DefaultMessageListenerContainer, as long as the cache level is less than CACHE_CONSUMER). However, this is considered advanced usage; use it with care!
Return the JMS message selector expression (or {@code null} if none).
Set the message listener implementation to register. This can be either a standard JMS {@link MessageListener} object or a Spring {@link SessionAwareMessageListener} object. <p>Note: The message listener may be replaced at runtime, with the listener container picking up the new listener object immediately (works e.g. with DefaultMessageListenerContainer, as long as the cache level is less than CACHE_CONSUMER). However, this is considered advanced usage; use it with care! {@link MessageListener} or a {@link SessionAwareMessageListener}
Return the message listener object to register.
Check the given message listener, throwing an exception if it does not correspond to a supported listener type. <p>By default, only a standard JMS {@link MessageListener} object or a Spring {@link SessionAwareMessageListener} object will be accepted. {@link MessageListener} or a {@link SessionAwareMessageListener}
Determine the default subscription name for the given message listener.
Set whether to make the subscription durable. The durable subscription name to be used can be specified through the "subscriptionName" property. <p>Default is "false". Set this to "true" to register a durable subscription, typically in combination with a "subscriptionName" value (unless your message listener class name is good enough as subscription name). <p>Only makes sense when listening to a topic (pub-sub domain), therefore this method switches the "pubSubDomain" flag as well.
Return whether to make the subscription durable.
Set whether to make the subscription shared. The shared subscription name to be used can be specified through the "subscriptionName" property. <p>Default is "false". Set this to "true" to register a shared subscription, typically in combination with a "subscriptionName" value (unless your message listener class name is good enough as subscription name). Note that shared subscriptions may also be durable, so this flag can (and often will) be combined with "subscriptionDurable" as well. <p>Only makes sense when listening to a topic (pub-sub domain), therefore this method switches the "pubSubDomain" flag as well. <p><b>Requires a JMS 2.0 compatible message broker.</b>
Return whether to make the subscription shared.
Set the name of a subscription to create. To be applied in case of a topic (pub-sub domain) with a shared or durable subscription. <p>The subscription name needs to be unique within this client's JMS client id. Default is the class name of the specified message listener. <p>Note: Only 1 concurrent consumer (which is the default of this message listener container) is allowed for each subscription, except for a shared subscription (which requires JMS 2.0).
Return the name of a subscription to create, if any.
Set the name of a durable subscription to create. This method switches to pub-sub domain mode and activates subscription durability as well. <p>The durable subscription name needs to be unique within this client's JMS client id. Default is the class name of the specified message listener. <p>Note: Only 1 concurrent consumer (which is the default of this message listener container) is allowed for each durable subscription, except for a shared durable subscription (which requires JMS 2.0).
Return the name of a durable subscription to create, if any.
Configure the reply destination type. By default, the configured {@code pubSubDomain} value is used (see {@link #isPubSubDomain()}. <p>This setting primarily indicates what type of destination to resolve if dynamic destinations are enabled. "false" for the Point-to-Point domain ({@link Queue Queues})
Set the JMS ExceptionListener to notify in case of a JMSException thrown by the registered message listener or the invocation infrastructure.
Return the JMS ExceptionListener to notify in case of a JMSException thrown by the registered message listener or the invocation infrastructure, if any.
Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message. <p>By default, there will be <b>no</b> ErrorHandler so that error-level logging is the only result.
Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message.
Set whether to expose the listener JMS Session to a registered {@link SessionAwareMessageListener} as well as to {@link org.springframework.jms.core.JmsTemplate} calls. <p>Default is "true", reusing the listener's {@link Session}. Turn this off to expose a fresh JMS Session fetched from the same underlying JMS {@link Connection} instead, which might be necessary on some JMS providers. <p>Note that Sessions managed by an external transaction manager will always get exposed to {@link org.springframework.jms.core.JmsTemplate} calls. So in terms of JmsTemplate exposure, this setting only affects locally transacted Sessions.
Return whether to expose the listener JMS {@link Session} to a registered {@link SessionAwareMessageListener}.
Set whether to accept received messages while the listener container in the process of stopping. <p>Default is "false", rejecting such messages through aborting the receive attempt. Switch this flag on to fully process such messages even in the stopping phase, with the drawback that even newly sent messages might still get processed (if coming in before all receive timeouts have expired). <p><b>NOTE:</b> Aborting receive attempts for such incoming messages might lead to the provider's retry count decreasing for the affected messages. If you have a high number of concurrent consumers, make sure that the number of retries is higher than the number of consumers, to be on the safe side for all potential stopping scenarios.
Return whether to accept received messages while the listener container in the process of stopping.
Execute the specified listener, committing or rolling back the transaction afterwards (if necessary).
Execute the specified listener, committing or rolling back the transaction afterwards (if necessary).
Invoke the specified listener as standard JMS MessageListener. <p>Default implementation performs a plain invocation of the {@code onMessage} method.
Perform a commit or message acknowledgement, as appropriate.
Perform a rollback, if appropriate.
Perform a rollback, handling rollback exceptions properly.
Handle the given exception that arose during listener execution. <p>The default implementation logs the exception at warn level, not propagating it to the JMS provider &mdash; assuming that all handling of acknowledgement and/or transactions is done by this listener container. This can be overridden in subclasses.
Invoke the registered JMS ExceptionListener, if any.
Invoke the registered ErrorHandler, if any. Log at warn level otherwise.
Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager} to use for transactional wrapping of message reception plus listener execution. <p>Default is none, not performing any transactional wrapping. If specified, this will usually be a Spring {@link org.springframework.transaction.jta.JtaTransactionManager} or one of its subclasses, in combination with a JTA-aware ConnectionFactory that this message listener container obtains its Connections from. <p><b>Note: Consider the use of local JMS transactions instead.</b> Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag to "true" in order to use a locally transacted JMS Session for the entire receive processing, including any Session operations performed by a {@link SessionAwareMessageListener} (e.g. sending a response message). This allows for fully synchronized Spring transactions based on local JMS transactions, similar to what {@link org.springframework.jms.connection.JmsTransactionManager} provides. Check {@link AbstractMessageListenerContainer}'s javadoc for a discussion of transaction choices and message redelivery scenarios.
Return the Spring PlatformTransactionManager to use for transactional wrapping of message reception plus listener execution.
Specify the transaction name to use for transactional wrapping. Default is the bean name of this listener container, if any.
Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>. Default is none, using the transaction manager's default timeout.
Set the timeout to use for receive calls, in <b>milliseconds</b>. The default is 1000 ms, that is, 1 second. <p><b>NOTE:</b> This value needs to be smaller than the transaction timeout used by the transaction manager (in the appropriate unit, of course). -1 indicates no timeout at all; however, this is only feasible if not running within a transaction manager.
Return the receive timeout (ms) configured for this listener container.
Create a MessageConsumer for the given JMS Session, registering a MessageListener for the specified listener.
Execute the listener for a message received from the given consumer, wrapping the entire operation in an external transaction if demanded.
Actually execute the listener for a message received from the given consumer, fetching all requires resources and invoking the listener.
Determine whether to trigger a commit after no message has been received. This is a good idea on any JMS provider other than Tibco, which is what this default implementation checks for.
Perform a rollback, handling rollback exceptions properly.
Receive a message from the given consumer.
Set the Spring {@code TaskExecutor} to use for running the listener threads. <p>Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}, starting up a number of new threads, according to the specified number of concurrent consumers. <p>Specify an alternative {@code TaskExecutor} for integration with an existing thread pool. Note that this really only adds value if the threads are managed in a specific fashion, for example within a Java EE environment. A plain thread pool does not add much value, as this listener container will occupy a number of threads for its entire lifetime.
Specify the {@link BackOff} instance to use to compute the interval between recovery attempts. If the {@link BackOffExecution} implementation returns {@link BackOffExecution#STOP}, this listener container will not further attempt to recover. <p>The {@link #setRecoveryInterval(long) recovery interval} is ignored when this property is set.
Specify the interval between recovery attempts, in <b>milliseconds</b>. The default is 5000 ms, that is, 5 seconds. This is a convenience method to create a {@link FixedBackOff} with the specified interval. <p>For more recovery options, consider specifying a {@link BackOff} instance instead.
Specify the level of caching that this listener container is allowed to apply, in the form of the name of the corresponding constant: e.g. "CACHE_CONNECTION".
Specify the level of caching that this listener container is allowed to apply. <p>Default is {@link #CACHE_NONE} if an external transaction manager has been specified (to reobtain all resources freshly within the scope of the external transaction), and {@link #CACHE_CONSUMER} otherwise (operating with local JMS resources). <p>Some Java EE servers only register their JMS resources with an ongoing XA transaction in case of a freshly obtained JMS {@code Connection} and {@code Session}, which is why this listener container by default does not cache any of those. However, depending on the rules of your server with respect to the caching of transactional resources, consider switching this setting to at least {@link #CACHE_CONNECTION} or {@link #CACHE_SESSION} even in conjunction with an external transaction manager.
Return the level of caching that this listener container is allowed to apply.
Specify the number of concurrent consumers to create. Default is 1. <p>Specifying a higher value for this setting will increase the standard level of scheduled concurrent consumers at runtime: This is effectively the minimum number of concurrent consumers which will be scheduled at any given time. This is a static setting; for dynamic scaling, consider specifying the "maxConcurrentConsumers" setting instead. <p>Raising the number of concurrent consumers is recommendable in order to scale the consumption of messages coming in from a queue. However, note that any ordering guarantees are lost once multiple consumers are registered. In general, stick with 1 consumer for low-volume queues. <p><b>Do not raise the number of concurrent consumers for a topic, unless vendor-specific setup measures clearly allow for it.</b> With regular setup, this would lead to concurrent consumption of the same message, which is hardly ever desirable. <p><b>This setting can be modified at runtime, for example through JMX.</b>
Return the "concurrentConsumer" setting. <p>This returns the currently configured "concurrentConsumers" value; the number of currently scheduled/active consumers might differ.
Specify the maximum number of concurrent consumers to create. Default is 1. <p>If this setting is higher than "concurrentConsumers", the listener container will dynamically schedule new consumers at runtime, provided that enough incoming messages are encountered. Once the load goes down again, the number of consumers will be reduced to the standard level ("concurrentConsumers") again. <p>Raising the number of concurrent consumers is recommendable in order to scale the consumption of messages coming in from a queue. However, note that any ordering guarantees are lost once multiple consumers are registered. In general, stick with 1 consumer for low-volume queues. <p><b>Do not raise the number of concurrent consumers for a topic, unless vendor-specific setup measures clearly allow for it.</b> With regular setup, this would lead to concurrent consumption of the same message, which is hardly ever desirable. <p><b>This setting can be modified at runtime, for example through JMX.</b>
Return the "maxConcurrentConsumer" setting. <p>This returns the currently configured "maxConcurrentConsumers" value; the number of currently scheduled/active consumers might differ.
Specify the maximum number of messages to process in one task. More concretely, this limits the number of message reception attempts per task, which includes receive iterations that did not actually pick up a message until they hit their timeout (see the {@link #setReceiveTimeout "receiveTimeout"} property). <p>Default is unlimited (-1) in case of a standard TaskExecutor, reusing the original invoker threads until shutdown (at the expense of limited dynamic scheduling). <p>In case of a SchedulingTaskExecutor indicating a preference for short-lived tasks, the default is 10 instead. Specify a number of 10 to 100 messages to balance between rather long-lived and rather short-lived tasks here. <p>Long-lived tasks avoid frequent thread context switches through sticking with the same thread all the way through, while short-lived tasks allow thread pools to control the scheduling. Hence, thread pools will usually prefer short-lived tasks. <p><b>This setting can be modified at runtime, for example through JMX.</b>
Return the maximum number of messages to process in one task.
Specify the limit for the number of consumers that are allowed to be idle at any given time. <p>This limit is used by the {@link #scheduleNewInvokerIfAppropriate} method to determine if a new invoker should be created. Increasing the limit causes invokers to be created more aggressively. This can be useful to ramp up the number of invokers faster. <p>The default is 1, only scheduling a new invoker (which is likely to be idle initially) if none of the existing invokers is currently idle.
Return the limit for the number of idle consumers.
Specify the limit for idle executions of a consumer task, not having received any message within its execution. If this limit is reached, the task will shut down and leave receiving to other executing tasks. <p>The default is 1, closing idle resources early once a task didn't receive a message. This applies to dynamic scheduling only; see the {@link #setMaxConcurrentConsumers "maxConcurrentConsumers"} setting. The minimum number of consumers (see {@link #setConcurrentConsumers "concurrentConsumers"}) will be kept around until shutdown in any case. <p>Within each task execution, a number of message reception attempts (according to the "maxMessagesPerTask" setting) will each wait for an incoming message (according to the "receiveTimeout" setting). If all of those receive attempts in a given task return without a message, the task is considered idle with respect to received messages. Such a task may still be rescheduled; however, once it reached the specified "idleTaskExecutionLimit", it will shut down (in case of dynamic scaling). <p>Raise this limit if you encounter too frequent scaling up and down. With this limit being higher, an idle consumer will be kept around longer, avoiding the restart of a consumer once a new load of messages comes in. Alternatively, specify a higher "maxMessagesPerTask" and/or "receiveTimeout" value, which will also lead to idle consumers being kept around for a longer time (while also increasing the average execution time of each scheduled task). <p><b>This setting can be modified at runtime, for example through JMX.</b>
Return the limit for idle executions of a consumer task.
Return the number of currently scheduled consumers. <p>This number will always be between "concurrentConsumers" and "maxConcurrentConsumers", but might be higher than "activeConsumerCount" (in case some consumers are scheduled but not executing at the moment).
Return the number of currently active consumers. <p>This number will always be between "concurrentConsumers" and "maxConcurrentConsumers", but might be lower than "scheduledConsumerCount" (in case some consumers are scheduled but not executing at the moment).
Return whether at least one consumer has entered a fixed registration with the target destination. This is particularly interesting for the pub-sub case where it might be important to have an actual consumer registered that is guaranteed not to miss any messages that are just about to be published. <p>This method may be polled after a {@link #start()} call, until asynchronous registration of consumers has happened which is when the method will start returning {@code true} &ndash; provided that the listener container ever actually establishes a fixed registration. It will then keep returning {@code true} until shutdown, since the container will hold on to at least one consumer registration thereafter. <p>Note that a listener container is not bound to having a fixed registration in the first place. It may also keep recreating consumers for every invoker execution. This particularly depends on the {@link #setCacheLevel cache level} setting: only {@link #CACHE_CONSUMER} will lead to a fixed registration.
Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified. <p>The default implementation builds a {@link org.springframework.core.task.SimpleAsyncTaskExecutor} with the specified bean name (or the class name, if no bean name specified) as thread name prefix.
Schedule a new invoker, increasing the total number of scheduled invokers for this listener container.
Schedule a new invoker, increasing the total number of scheduled invokers for this listener container, but only if the specified "maxConcurrentConsumers" limit has not been reached yet, and only if the specified "idleConsumerLimit" has not been reached either. <p>Called once a message has been received, in order to scale up while processing the message in the invoker that originally received it.
Determine whether the current invoker should be rescheduled, given that it might not have received a message in a while. that this invoker task has already accumulated (in a row)
Determine whether this listener container currently has more than one idle instance among its scheduled invokers.
Handle the given exception that arose during setup of a listener. Called for every such exception in every concurrent listener. <p>The default implementation logs the exception at warn level if not recovered yet, and at debug level if already recovered. Can be overridden in subclasses. already recovered from the present listener setup failure (this usually indicates a follow-up failure than can be ignored other than for debug log purposes)
Recover this listener container after a listener failed to set itself up, for example re-establishing the underlying Connection. <p>The default implementation delegates to DefaultMessageListenerContainer's recovery-capable {@link #refreshConnectionUntilSuccessful()} method, which will try to re-establish a Connection to the JMS provider both for the shared and the non-shared Connection case.
Refresh the underlying Connection, not returning before an attempt has been successful. Called in case of a shared Connection as well as without shared Connection, so either needs to operate on the shared Connection or on a temporary Connection that just gets established for validation purposes. <p>The default implementation retries until it successfully established a Connection, for as long as this message listener container is running. Applies the specified recovery interval between retries.
Refresh the JMS destination that this listener container operates on. <p>Called after listener setup failure, assuming that a cached Destination object might have become invalid (a typical case on WebLogic JMS). <p>The default implementation removes the destination from a DestinationResolver's cache, in case of a CachingDestinationResolver.
Apply the next back-off time using the specified {@link BackOffExecution}. <p>Return {@code true} if the back-off period has been applied and a new attempt to recover should be made, {@code false} if no further attempt should be made.
Return whether this listener container is currently in a recovery attempt. <p>May be used to detect recovery phases but also the end of a recovery phase, with {@code isRecovering()} switching to {@code false} after having been found to return {@code true} before.
Apply the back-off time once. In a regular scenario, the back-off is only applied if we failed to recover with the broker. This additional sleep period avoids a burst retry scenario when the broker is actually up but something else if failing (i.e. listener specific).
Specify whether to connect lazily, i.e. whether to establish the JMS Connection and the corresponding Sessions and MessageConsumers as late as possible - in the start phase of this container. <p>Default is "false": connecting early, i.e. during the bean initialization phase. Set this flag to "true" in order to switch to lazy connecting if your target broker is likely to not have started up yet and you prefer to not even try a connection.
Specify the number of concurrent consumers to create. Default is 1. <p>Raising the number of concurrent consumers is recommendable in order to scale the consumption of messages coming in from a queue. However, note that any ordering guarantees are lost once multiple consumers are registered. In general, stick with 1 consumer for low-volume queues. <p><b>Do not raise the number of concurrent consumers for a topic.</b> This would lead to concurrent consumption of the same message, which is hardly ever desirable.
Set the Spring TaskExecutor to use for executing the listener once a message has been received by the provider. <p>Default is none, that is, to run in the JMS provider's own receive thread, blocking the provider's receive endpoint while executing the listener. <p>Specify a TaskExecutor for executing the listener in a different thread, rather than blocking the JMS provider, usually integrating with an existing thread pool. This allows to keep the number of concurrent consumers low (1) while still processing messages concurrently (decoupled from receiving!). <p><b>NOTE: Specifying a TaskExecutor for listener execution affects acknowledgement semantics.</b> Messages will then always get acknowledged before listener execution, with the underlying Session immediately reused for receiving the next message. Using this in combination with a transacted session or with client acknowledgement will lead to unspecified results! <p><b>NOTE: Concurrent listener execution via a TaskExecutor will lead to concurrent processing of messages that have been received by the same underlying Session.</b> As a consequence, it is not recommended to use this setting with a {@link SessionAwareMessageListener}, at least not if the latter performs actual work on the given Session. A standard {@link javax.jms.MessageListener} will work fine, in general.
Initialize the JMS Sessions and MessageConsumers for this container.
Process a message received from the provider. <p>Executes the listener, exposing the current JMS Session as thread-bound resource (if "exposeListenerSession" is "true").
Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.
Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.
Set the target Queue to send invoker requests to.
Set the name of target queue to send invoker requests to. <p>The specified name will be dynamically resolved via the {@link #setDestinationResolver DestinationResolver}.
Set the DestinationResolver that is to be used to resolve Queue references for this accessor. <p>The default resolver is a {@code DynamicDestinationResolver}. Specify a {@code JndiDestinationResolver} for resolving destination names as JNDI locations.
Set the {@link RemoteInvocationFactory} to use for this accessor. <p>Default is a {@link DefaultRemoteInvocationFactory}. <p>A custom invocation factory can add further context information to the invocation, for example user credentials.
Specify the {@link MessageConverter} to use for turning {@link org.springframework.remoting.support.RemoteInvocation} objects into request messages, as well as response messages into {@link org.springframework.remoting.support.RemoteInvocationResult} objects. <p>Default is a {@link SimpleMessageConverter}, using a standard JMS {@link javax.jms.ObjectMessage} for each invocation / invocation result object. <p>Custom implementations may generally adapt {@link java.io.Serializable} objects into special kinds of messages, or might be specifically tailored for translating {@code RemoteInvocation(Result)s} into specific kinds of messages.
Set the timeout to use for receiving the response message for a request (in milliseconds). <p>The default is 0, which indicates a blocking receive without timeout.
Return the timeout to use for receiving the response message for a request (in milliseconds).
Create a new {@code RemoteInvocation} object for the given AOP method invocation. <p>The default implementation delegates to the {@link RemoteInvocationFactory}. <p>Can be overridden in subclasses to provide custom {@code RemoteInvocation} subclasses, containing additional invocation parameters like user credentials. Note that it is preferable to use a custom {@code RemoteInvocationFactory} which is a reusable strategy.
Execute the given remote invocation, sending an invoker request message to this accessor's target queue and waiting for a corresponding response.
Create a new JMS Connection for this JMS invoker.
Create a new JMS Session for this JMS invoker.
Resolve this accessor's target queue.
Resolve the given queue name into a JMS {@link javax.jms.Queue}, via this accessor's {@link DestinationResolver}.
Create the invoker request message. <p>The default implementation creates a JMS {@link javax.jms.ObjectMessage} for the given RemoteInvocation object.
Actually execute the given request, sending the invoker request message to the specified target queue and waiting for a corresponding response. <p>The default implementation is based on standard JMS send/receive, using a {@link javax.jms.TemporaryQueue} for receiving the response.
Extract the invocation result from the response message. <p>The default implementation expects a JMS {@link javax.jms.ObjectMessage} carrying a {@link RemoteInvocationResult} object. If an invalid response message is encountered, the {@code onInvalidResponse} callback gets invoked.
Callback that is invoked by {@link #executeRequest} when the receive timeout has expired for the specified {@link RemoteInvocation}. <p>By default, an {@link RemoteTimeoutException} is thrown. Sub-classes can choose to either throw a more dedicated exception or even return a default {@link RemoteInvocationResult} as a fallback.
Callback that is invoked by {@link #extractInvocationResult} when it encounters an invalid response message. <p>The default implementation throws a {@link MessageFormatException}. the caller (if desired) infrastructure exception propagated to the caller
Recreate the invocation result contained in the given {@link RemoteInvocationResult} object. <p>The default implementation calls the default {@code recreate()} method. <p>Can be overridden in subclasses to provide custom recreation, potentially processing the returned result object.
Convert the given JMS invoker access exception to an appropriate Spring {@link RemoteAccessException}.
Set the interface that the proxy must implement. is {@code null}, or if the supplied {@code serviceInterface} is not an interface type
Specify the MessageConverter to use for turning request messages into {@link org.springframework.remoting.support.RemoteInvocation} objects, as well as {@link org.springframework.remoting.support.RemoteInvocationResult} objects into response messages. <p>Default is a {@link org.springframework.jms.support.converter.SimpleMessageConverter}, using a standard JMS {@link javax.jms.ObjectMessage} for each invocation invocation result object. <p>Custom implementations may generally adapt Serializables into special kinds of messages, or might be specifically tailored for translating RemoteInvocation(Result)s into specific kinds of messages.
Set whether invalidly formatted messages should be discarded. Default is "true". <p>Switch this flag to "false" to throw an exception back to the listener container. This will typically lead to redelivery of the message, which is usually undesirable - since the message content will be the same (that is, still invalid).
Read a RemoteInvocation from the given JMS message. in case of an invalid message that will simply be ignored)
Send the given RemoteInvocationResult as a JMS message to the originator.
Create the invocation result response message. <p>The default implementation creates a JMS ObjectMessage for the given RemoteInvocationResult object. It sets the response's correlation id to the request message's correlation id, if any; otherwise to the request message id.
Callback that is invoked by {@link #readRemoteInvocation} when it encounters an invalid request message. <p>The default implementation either discards the invalid message or throws a MessageFormatException - according to the "ignoreInvalidRequests" flag, which is set to "true" (that is, discard invalid messages) by default. {@code null} in case of an invalid message that will simply be ignored) to lead to an exception (instead of ignoring it)
Specify the {@link ObjectMapper} to use instead of using the default.
Specify whether {@link #toMessage(Object, Session)} should marshal to a {@link BytesMessage} or a {@link TextMessage}. <p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to a {@link BytesMessage}. Note that the default version of this converter supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only.
Specify the encoding to use when converting to and from text-based message body content. The default encoding will be "UTF-8". <p>When reading from a a text-based message, an encoding may have been suggested through a special JMS property which will then be preferred over the encoding set on this MessageConverter instance.
Specify the name of the JMS message property that carries the encoding from bytes to String and back is BytesMessage is used during the conversion process. <p>Default is none. Setting this property is optional; if not set, UTF-8 will be used for decoding any incoming bytes message.
Specify the name of the JMS message property that carries the type id for the contained object: either a mapped id value or a raw Java class name. <p>Default is none. <b>NOTE: This property needs to be set in order to allow for converting from an incoming message to a Java object.</b>
Specify mappings from type ids to Java classes, if desired. This allows for synthetic ids in the type id message property, instead of transferring Java class names. <p>Default is no custom mappings, i.e. transferring raw Java class names.
Convert a Java object to a JMS Message using the specified json view and the supplied session  to create the message object.
Map the given object to a {@link TextMessage}.
Map the given object to a {@link BytesMessage}.
Template method that allows for custom message mapping. Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or {@link MessageType#BYTES}. <p>The default implementation throws an {@link IllegalArgumentException}.
Set a type id for the given payload object on the given JMS Message. <p>The default implementation consults the configured type id mapping and sets the resulting value (either a mapped id or the raw Java class name) into the configured type id message property.
Convenience method to dispatch to converters for individual message types.
Convert a TextMessage to a Java Object with the specified type.
Convert a BytesMessage to a Java Object with the specified type.
Template method that allows for custom message mapping. Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or {@link MessageType#BYTES}. <p>The default implementation throws an {@link IllegalArgumentException}.
Determine a Jackson JavaType for the given JMS Message, typically parsing a type id message property. <p>The default implementation parses the configured type id property name and consults the configured type id mapping. This can be overridden with a different strategy, e.g. doing some heuristics based on message origin.
Determine a Jackson serialization view based on the given conversion hint. converter for the current conversion attempt
Construct a new {@code MarshallingMessageConverter} with the given {@link Marshaller} set. <p>If the given {@link Marshaller} also implements the {@link Unmarshaller} interface, it is used for both marshalling and unmarshalling. Otherwise, an exception is thrown. <p>Note that all {@link Marshaller} implementations in Spring also implement the {@link Unmarshaller} interface, so that you can safely use this constructor. {@link Unmarshaller} interface as well
Construct a new {@code MarshallingMessageConverter} with the given Marshaller and Unmarshaller.
Set the {@link Marshaller} to be used by this message converter.
Set the {@link Unmarshaller} to be used by this message converter.
Specify whether {@link #toMessage(Object, Session)} should marshal to a {@link BytesMessage} or a {@link TextMessage}. <p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to a {@link BytesMessage}. Note that the default version of this converter supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only.
Marshal the given object to a {@link TextMessage}.
Marshal the given object to a {@link BytesMessage}.
Template method that allows for custom message marshalling. Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or {@link MessageType#BYTES}. <p>The default implementation throws an {@link IllegalArgumentException}.
Unmarshal the given {@link TextMessage} into an object.
Unmarshal the given {@link BytesMessage} into an object.
Template method that allows for custom message unmarshalling. Invoked when {@link #fromMessage(Message)} is invoked with a message that is not a {@link TextMessage} or {@link BytesMessage}. <p>The default implementation throws an {@link IllegalArgumentException}.
Create a new MessageConversionException.
Create an instance with a default payload converter.
Create an instance with the specified payload converter and header mapper.
Set the {@link MessageConverter} to use to convert the payload.
Set the {@link JmsHeaderMapper} to use to map JMS headers to and from standard message headers.
Extract the payload of the specified {@link javax.jms.Message}.
Create a JMS TextMessage for the given String.
Create a JMS BytesMessage for the given byte array.
Create a JMS MapMessage for the given Map.
Create a JMS ObjectMessage for the given Serializable object.
Extract a String from the given TextMessage.
Extract a byte array from the given {@link BytesMessage}.
Extract a Serializable object from the given {@link ObjectMessage}.
Create a new instance of the {@link BeanFactoryDestinationResolver} class. <p>Use of this constructor is redundant if this object is being created by a Spring IoC container, as the supplied {@link BeanFactory} will be replaced by the {@link BeanFactory} that creates it (c.f. the {@link BeanFactoryAware} contract). So only use this constructor if you are using this class outside the context of a Spring IoC container.
Create a new DestinationResolutionException.
Resolve the given destination name to a {@link Topic}.
Resolve the given destination name to a {@link Queue}.
Set the {@link DestinationResolver} that is to be used to resolve {@link javax.jms.Destination} references for this accessor. <p>The default resolver is a DynamicDestinationResolver. Specify a JndiDestinationResolver for resolving destination names as JNDI locations.
Return the DestinationResolver for this accessor (never {@code null}).
Configure the destination accessor with knowledge of the JMS domain used. Default is Point-to-Point (Queues). <p>This setting primarily indicates what type of destination to resolve if dynamic destinations are enabled. "false" for the Point-to-Point domain ({@link javax.jms.Queue Queues})
Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}) is used.
Resolve the given destination name into a JMS {@link Destination}, via this accessor's {@link DestinationResolver}.
Set whether to cache resolved destinations. Default is "true". <p>This flag can be turned off to re-lookup a destination for each operation, which allows for hot restarting of destinations. This is mainly useful during development. <p>Note that dynamic queues and topics get cached by destination name. As a consequence, you need to use unique destination names across both queues and topics.
Set whether this resolver is supposed to create dynamic destinations if the destination name is not found in JNDI. Default is "false". <p>Turn this flag on to enable transparent fallback to dynamic destinations.
Set the {@link DestinationResolver} to use when falling back to dynamic destinations. <p>The default is Spring's standard {@link DynamicDestinationResolver}.
Validate the given Destination object, checking whether it matches the expected type. {@code false} in case of a Queue
Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.
Return the ConnectionFactory that this accessor uses for obtaining JMS {@link Connection Connections}.
Set the transaction mode that is used when creating a JMS {@link Session}. Default is "false". <p>Note that within a JTA transaction, the parameters passed to {@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)} method are not taken into account. Depending on the Java EE transaction context, the container makes its own decisions on these values. Analogously, these parameters are not taken into account within a locally managed transaction either, since the accessor operates on an existing JMS Session in this case. <p>Setting this flag to "true" will use a short local JMS transaction when running outside of a managed transaction, and a synchronized local JMS transaction in case of a managed transaction (other than an XA transaction) being present. This has the effect of a local JMS transaction being managed alongside the main transaction (which might be a native JDBC transaction), with the JMS transaction committing right after the main transaction.
Return whether the JMS {@link Session sessions} used by this accessor are supposed to be transacted.
Set the JMS acknowledgement mode by the name of the corresponding constant in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE". <p>If you want to use vendor-specific extensions to the acknowledgment mode, use {@link #setSessionAcknowledgeMode(int)} instead.
Set the JMS acknowledgement mode that is used when creating a JMS {@link Session} to send a message. <p>Default is {@link Session#AUTO_ACKNOWLEDGE}. <p>Vendor-specific extensions to the acknowledgment mode can be set here as well. <p>Note that that inside an EJB, the parameters to the {@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)} method are not taken into account. Depending on the transaction context in the EJB, the container makes its own decisions on these values. See section 17.3.5 of the EJB spec.
Return the acknowledgement mode for JMS {@link Session sessions}.
Convert the specified checked {@link javax.jms.JMSException JMSException} to a Spring runtime {@link org.springframework.jms.JmsException JmsException} equivalent. <p>The default implementation delegates to the {@link JmsUtils#convertJmsAccessException} method.
Determine whether the given Session is in client acknowledge mode. <p>This implementation uses JMS 1.1 API.
Return the {@link JmsHeaders#CORRELATION_ID correlationId}.
Return the {@link JmsHeaders#DESTINATION destination}.
Return the {@link JmsHeaders#DELIVERY_MODE delivery mode}.
Return the message {@link JmsHeaders#EXPIRATION expiration}.
Return the {@link JmsHeaders#MESSAGE_ID message id}.
Return the {@link JmsHeaders#PRIORITY}.
Return the {@link JmsHeaders#REPLY_TO reply to}.
Return the {@link JmsHeaders#REDELIVERED redelivered} flag.
Return the {@link JmsHeaders#TYPE type}.
Return the {@link JmsHeaders#TIMESTAMP timestamp}.
Create a {@link JmsMessageHeaderAccessor} from the headers of an existing message.
Close the given JMS Connection and ignore any thrown exception. This is useful for typical {@code finally} blocks in manual JMS code.
Close the given JMS Session and ignore any thrown exception. This is useful for typical {@code finally} blocks in manual JMS code.
Close the given JMS MessageProducer and ignore any thrown exception. This is useful for typical {@code finally} blocks in manual JMS code.
Close the given JMS MessageConsumer and ignore any thrown exception. This is useful for typical {@code finally} blocks in manual JMS code.
Close the given JMS QueueBrowser and ignore any thrown exception. This is useful for typical {@code finally} blocks in manual JMS code.
Close the given JMS QueueRequestor and ignore any thrown exception. This is useful for typical {@code finally} blocks in manual JMS code.
Commit the Session if not within a JTA transaction.
Rollback the Session if not within a JTA transaction.
Build a descriptive exception message for the given JMSException, incorporating a linked exception's message if appropriate.
Convert the specified checked {@link javax.jms.JMSException JMSException} to a Spring runtime {@link org.springframework.jms.JmsException JmsException} equivalent.
Add the outbound prefix if necessary. <p>Convert {@link MessageHeaders#CONTENT_TYPE} to content_type for JMS compliance.
Add the inbound prefix if necessary. <p>Convert content_type to {@link MessageHeaders#CONTENT_TYPE}.
Constructor that takes a message.
Constructor that takes a message and a root cause. expected to be a proper subclass of {@link javax.jms.JMSException}, but can also be a JNDI NamingException or the like.
Constructor that takes a plain root cause, intended for subclasses mirroring corresponding {@code javax.jms} exceptions. expected to be a proper subclass of {@link javax.jms.JMSException}.
Convenience method to get the vendor specific error code if the root cause was an instance of JMSException. root cause is an instance of JMSException, or {@code null}
Constructor that takes a message.
Constructor that takes a message and a root cause. expected to be a proper subclass of {@link javax.jms.JMSException}, but can also be a JNDI NamingException or the like.
Constructor that takes a root cause only. expected to be a proper subclass of {@link javax.jms.JMSException}, but can also be a JNDI NamingException or the like.
Test for {@link FullBean} discovery. In this case, no default is set because all endpoints provide a default registry. This shows that the default factory is only retrieved if it needs to be.
Test for {@link CustomBean} and an manually endpoint registered with "myCustomEndpointId". The custom endpoint does not provide any factory so it's registered with the default one
Test for {@link DefaultBean} that does not define the container factory to use as a default is registered with an explicit default.
Test for {@link DefaultBean} that does not define the container factory to use as a default is registered with the default name.
Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}. The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException}
Test for {@link JmsListenerRepeatableBean} and {@link JmsListenersBean} that validates that the {@code @JmsListener} annotation is repeatable and generate one specific container per annotation.
Common method for testing a send method that uses the MessageCreator callback but with different QOS options.
Construct an {@code AbstractMessageConverter} supporting a single MIME type.
Construct an {@code AbstractMessageConverter} supporting multiple MIME types.
Return the supported MIME types.
Configure the {@link ContentTypeResolver} to use to resolve the content type of an input message. <p>Note that if no resolver is configured, then {@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should be left as {@code false} (the default) or otherwise this converter will ignore all messages. <p>By default, a {@code DefaultContentTypeResolver} instance is used.
Return the configured {@link ContentTypeResolver}.
Whether this converter should convert messages for which no content type could be resolved through the configured {@link org.springframework.messaging.converter.ContentTypeResolver}. <p>A converter can configured to be strict only when a {@link #setContentTypeResolver contentTypeResolver} is configured and the list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty. <p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)} will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver} is not defined or if no content-type header is present.
Whether content type resolution must produce a value that matches one of the supported MIME types.
Configure the preferred serialization class to use (byte[] or String) when converting an Object payload to a {@link Message}. <p>The default value is byte[].
Return the configured preferred serialization payload class.
Returns the default content type for the payload. Called when {@link #toMessage(Object, MessageHeaders)} is invoked without message headers or without a content type header. <p>By default, this returns the first element of the {@link #getSupportedMimeTypes() supportedMimeTypes}, if any. Can be overridden in sub-classes.
Create an instance with the given converters.
Return the underlying list of delegate converters.
Set the default MIME type to use when there is no {@link MessageHeaders#CONTENT_TYPE} header present. <p>This property does not have a default value.
Return the default MIME type to use if no {@link MessageHeaders#CONTENT_TYPE} header is present.
Create a new instance with a default {@link ConversionService}.
Create a new instance with the given {@link ConversionService}.
Construct a {@code MappingJackson2MessageConverter} supporting the {@code application/json} MIME type with {@code UTF-8} character set.
Construct a {@code MappingJackson2MessageConverter} supporting one or more custom MIME types.
Set the {@code ObjectMapper} for this converter. If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used. <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON serialization process. For example, an extended {@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be configured that provides custom serializers for specific types. The other option for refining the serialization process is to use Jackson's provided annotations on the types to be serialized, in which case a custom-configured ObjectMapper is unnecessary.
Return the underlying {@code ObjectMapper} for this converter.
Whether to use the {@link DefaultPrettyPrinter} when writing JSON. This is a shortcut for setting up an {@code ObjectMapper} as follows: <pre class="code"> ObjectMapper mapper = new ObjectMapper(); mapper.configure(SerializationFeature.INDENT_OUTPUT, true); converter.setObjectMapper(mapper); </pre>
Default construct allowing for {@link #setMarshaller(Marshaller)} and/or {@link #setUnmarshaller(Unmarshaller)} to be invoked separately.
Constructor with a given list of MIME types to support.
Constructor with {@link Marshaller}. If the given {@link Marshaller} also implements {@link Unmarshaller}, it is also used for unmarshalling. <p>Note that all {@code Marshaller} implementations in Spring also implement {@code Unmarshaller} so that you can safely use this constructor.
Return the configured Marshaller.
Return the configured unmarshaller.
Configure the {@link DestinationResolver} to use to resolve String destination names into actual destinations of type {@code <D>}. <p>This field does not have a default setting. If not configured, methods that require resolving a destination name will raise an {@link IllegalArgumentException}.
Return the configured destination resolver.
Configure the default destination to use in send methods that don't have a destination argument. If a default destination is not configured, send methods without a destination argument will raise an exception if invoked.
Return the configured default destination.
Set the {@link MessageConverter} to use in {@code convertAndSend} methods. <p>By default, {@link SimpleMessageConverter} is used.
Return the configured {@link MessageConverter}.
Convert the given Object to serialized form, possibly using a {@link MessageConverter}, wrap it as a message with the given headers and apply the given post processor.
Provides access to the map of input headers before a send operation. Subclasses can modify the headers and then return the same or a different map. <p>This default implementation in this class returns the input map.
A constructor that accepts a {@link BeanFactory} useful if instantiating this resolver manually rather than having it defined as a Spring-managed bean.
Create a new CachingDestinationResolverProxy using the given target DestinationResolver to actually resolve destinations.
Set the target DestinationResolver to delegate to.
Configure the timeout value to use for send operations.
Return the configured send operation timeout value.
Configure the timeout value to use for receive operations.
Return the configured receive operation timeout value.
Whether the thread sending a reply should have an exception raised if the receiving thread isn't going to receive the reply either because it timed out, or because it already received a reply, or because it got an exception while sending the request message. <p>The default value is {@code false} in which case only a WARN message is logged. If set to {@code true} a {@link MessageDeliveryException} is raised in addition to the log message.
Create a new instance providing the invalid {@code MethodParameter}.
Create a new instance providing the invalid {@code MethodParameter} and a prepared description. Subclasses should prepend the description with the help of {@link #getMethodParamMessage(org.springframework.core.MethodParameter)}.
Return the MethodParameter that was rejected.
Constructor with a {@link ConversionService} and a {@link BeanFactory}. target method parameter type and {@code #{...}} SpEL expressions in default values, or {@code null} if default values are not expected to contain expressions
Obtain the named value for the given method parameter.
Create a new NamedValueInfo based on the given NamedValueInfo with sanitized values.
Resolve the given annotation-specified value, potentially containing placeholders and expressions.
Resolves the given parameter type and value name into an argument value.
A constructor that finds {@link MessageExceptionHandler} methods in the given type.
Set the {@link ConversionService} to use to convert the original message payload or headers.
Set the {@link MessageConverter} to use. By default a {@link GenericMessageConverter} is used.
Set the Validator instance used for validating @Payload arguments
Set the list of custom {@code HandlerMethodArgumentResolver}s that will be used after resolvers for supported argument type.
Configure the complete list of supported argument types effectively overriding the ones configured by default. This is an advanced option. For most use cases it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.
Create a new instance with the given {@link MessageConverter}.
Check if the given {@code payload} is empty.
Create a new instance with the invalid {@code MethodParameter}.
Create a new instance with the invalid {@code MethodParameter} and a {@link org.springframework.validation.BindingResult}.
Return the BindingResult if the failure is validation-related, or {@code null} if none.
Create a new instance with the invalid {@code MethodParameter}.
Create a new {@code PayloadArgumentResolver} with the given {@link MessageConverter}.
Create a new {@code PayloadArgumentResolver} with the given {@link MessageConverter} and {@link Validator}.
Specify if the given {@code payload} is empty.
Validate the payload if applicable. <p>The default implementation checks for {@code @javax.validation.Valid}, Spring's {@link org.springframework.validation.annotation.Validated}, and custom annotations whose name starts with "Valid".
Protected constructor accepting exception-to-method mappings.
Whether the contained type has any exception mappings.
Find a method to handle the given exception. Use {@link org.springframework.core.ExceptionDepthComparator} if more than one match is found.
Return the method mapped to the given exception type or {@code null}.
When this property is configured only messages to destinations matching one of the configured prefixes are eligible for handling. When there is a match the prefix is removed and only the remaining part of the destination is used for method-mapping purposes. <p>By default, no prefixes are configured in which case all messages are eligible for handling.
Return the configured destination prefixes.
Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used after resolvers for supported argument type.
Return the configured custom argument resolvers, if any.
Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used after return value handlers for known types.
Return the configured custom return value handlers, if any.
Configure the complete list of supported argument types effectively overriding the ones configured by default. This is an advanced option. For most use cases it should be sufficient to use {@link #setCustomArgumentResolvers}.
Configure the complete list of supported return value types effectively overriding the ones configured by default. This is an advanced option. For most use cases it should be sufficient to use {@link #setCustomReturnValueHandlers}.
Return a map with all handler methods and their mappings.
Detect if the given handler has any methods that can handle messages and if so register it with the extracted mapping information.
Register a handler method and its unique mapping. under the same mapping
Create a HandlerMethod instance from an Object handler that is either a handler instance or a String-based bean name.
Subclasses can invoke this method to populate the MessagingAdviceBean cache (e.g. to support "global" {@code @MessageExceptionHandler}).
Check whether the given destination (of an incoming message) matches to one of the configured destination prefixes and if so return the remaining portion of the destination after the matched prefix. <p>If there are no matching prefixes, return {@code null}. <p>If there are no destination prefixes, return the destination as is.
Find an {@code @MessageExceptionHandler} method for the given exception. The default implementation searches methods in the class hierarchy of the HandlerMethod first and if not found, it continues searching for additional {@code @MessageExceptionHandler} methods among the configured {@linkplain org.springframework.messaging.handler.MessagingAdviceBean MessagingAdviceBean}, if any.
Add the given {@link HandlerMethodArgumentResolver}.
Add the given {@link HandlerMethodArgumentResolver}s.
Return a read-only list with the contained resolvers, or an empty list.
Clear the list of configured resolvers.
Find a registered {@link HandlerMethodArgumentResolver} that supports the given method parameter.
Return a read-only list with the configured handlers.
Clear the list of configured handlers.
Add the given {@link HandlerMethodReturnValueHandler}.
Add the given {@link HandlerMethodReturnValueHandler}s.
Create an instance from a {@code HandlerMethod}.
Create an instance from a bean instance and a method.
Construct a new handler method with the given bean instance, method name and parameters.
Set {@link HandlerMethodArgumentResolver}s to use to use for resolving method argument values.
Set the ParameterNameDiscoverer for resolving parameter names when needed (e.g. default request attribute name). <p>Default is a {@link org.springframework.core.DefaultParameterNameDiscoverer}.
Invoke the method after resolving its argument values in the context of the given message. <p>Argument values are commonly resolved through {@link HandlerMethodArgumentResolver}s. The {@code providedArgs} parameter however may supply argument values to be used directly, i.e. without argument resolution. or if the method raised an exception
Get the method argument values for the current request.
Adds HandlerMethod details such as the controller type and method signature to the given error message.
Attempt to resolve a method parameter from the list of provided argument values.
Invoke the handler method with the given argument values.
Assert that the target bean class is an instance of the class where the given method is declared. In some cases the actual controller instance at request- processing time may be a JDK dynamic proxy (lazy initialization, prototype beans, and others). {@code @Controller}'s that require proxying should prefer class-based proxy mechanisms.
Creates a new instance with the given destination patterns. Each pattern that is not empty and does not start with "/" is prepended with "/".
Alternative constructor accepting a custom PathMatcher.
Create an instance from a bean instance and a method.
Create an instance from a bean instance, method name, and parameter types.
Create an instance from a bean name, a method, and a {@code BeanFactory}. The method {@link #createWithResolvedBean()} may be used later to re-create the {@code HandlerMethod} with an initialized bean.
Copy constructor for use in subclasses.
Re-create HandlerMethod with the resolved handler.
Returns the bean for this handler method.
Returns the method for this handler method.
This method returns the type of the handler for this handler method. <p>Note that if the bean type is a CGLIB-generated class, the original user-defined class is returned.
If the bean method is a bridge method, this method returns the bridged (user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.
Returns the method parameters for this handler method.
Return the HandlerMethod from which this HandlerMethod instance was resolved via {@link #createWithResolvedBean()}.
Return the HandlerMethod return type.
Return the actual return value type.
Returns {@code true} if the method return type is void, {@code false} otherwise.
Returns a single annotation on the underlying method traversing its super methods if no annotation can be found on the given method itself. <p>Also supports <em>merged</em> composed annotations with attribute overrides as of Spring Framework 4.3.
Return whether the parameter is declared with the given annotation type.
If the provided instance contains a bean name rather than an object instance, the bean name is resolved before a {@link HandlerMethod} is created and returned.
Return a short representation of this handler method for log message purposes.
Select handler methods for the given handler type. <p>Callers define handler methods of interest through the {@link MethodFilter} parameter.
Configure a default prefix to add to message destinations in cases where a method is not annotated with {@link SendTo @SendTo} or does not specify any destinations through the annotation's value attribute. <p>By default, the prefix is set to "/topic".
Return the configured default destination prefix.
Configure a default prefix to add to message destinations in cases where a method is annotated with {@link SendToUser @SendToUser} but does not specify any destinations through the annotation's value attribute. <p>By default, the prefix is set to "/queue".
Return the configured default user destination prefix.
Configure a {@link MessageHeaderInitializer} to apply to the headers of all messages sent to the client outbound channel. <p>By default this property is not set.
Create an instance of SimpAnnotationMethodMessageHandler with the given message channels and broker messaging template.
Configure a {@link MessageConverter} to use to convert the payload of a message from its serialized form with a specific MIME type to an Object matching the target method parameter. The converter is also used when sending a message to the message broker.
Configure a {@link ConversionService} to use when resolving method arguments, for example message header values. <p>By default, {@link DefaultFormattingConversionService} is used.
Return the configured {@link ConversionService}.
Set the PathMatcher implementation to use for matching destinations against configured destination patterns. <p>By default, {@link AntPathMatcher} is used.
Return the PathMatcher implementation to use for matching destinations.
Return the configured Validator instance.
Configure a {@link MessageHeaderInitializer} to pass on to {@link org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler}s that send messages from controller return values. <p>By default, this property is not set.
Return the configured header initializer.
Resolve placeholder values in the given array of destinations.
Construct a new SubscriptionMethodReturnValueHandler. most likely the "clientOutboundChannel" (must not be {@code null})
Constructor with no destination prefixes (matches all destinations).
Constructor with destination prefixes to match to destinations of messages.
Whether the message broker is currently available and able to process messages. <p>Note that this is in addition to the {@link #isRunning()} flag, which indicates whether this message handler is running. In other words the message handler must first be running and then the {@code #isBrokerAvailable()} flag may still independently alternate between being on and off depending on the concrete sub-class implementation. <p>Application components may implement {@code org.springframework.context.ApplicationListener&lt;BrokerAvailabilityEvent&gt;} to receive notifications when broker becomes available and unavailable.
Creates a new {@code BrokerAvailabilityEvent}. false otherwise for an external broker, that has changed availability. Must not be {@code null}.
Specify the maximum number of entries for the resolved destination cache. Default is 1024.
Return the maximum number of entries for the resolved destination cache.
Specify the {@link PathMatcher} to use.
Return the configured {@link PathMatcher}.
Configure the name of a selector header that a subscription message can have in order to filter messages based on their headers. The value of the header can use Spring EL expressions against message headers. <p>For example the following expression expects a header called "foo" to have the value "bar": <pre> headers.foo == 'bar' </pre> <p>By default this is set to "selector".
Return the name for the selector header.
Create a SimpleBrokerMessageHandler instance with the given message channels and destination prefixes.
Configure a custom SubscriptionRegistry to use for storing subscriptions. <p><strong>Note</strong> that when a custom PathMatcher is configured via {@link #setPathMatcher}, if the custom registry is not an instance of {@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used and must be configured directly on the custom registry.
When configured, the given PathMatcher is passed down to the SubscriptionRegistry to use for matching destination to subscriptions.
Configure the {@link org.springframework.scheduling.TaskScheduler} to use for providing heartbeat support. Setting this property also sets the {@link #setHeartbeatValue heartbeatValue} to "10000, 10000". <p>By default this is not set.
Return the configured TaskScheduler.
Configure the value for the heart-beat settings. The first number represents how often the server will write or send a heartbeat. The second is how often the client should write. 0 means no heartbeats. <p>By default this is set to "0, 0" unless the {@link #setTaskScheduler taskScheduler} in which case the default becomes "10000,10000" (in milliseconds).
The configured value for the heart-beat settings.
Configure a {@link MessageHeaderInitializer} to apply to the headers of all messages sent to the client outbound channel. <p>By default this property is not set.
An accessor for the {@link MessageBrokerRegistry} that ensures its one-time creation and initialization through {@link #configureMessageBroker(MessageBrokerRegistry)}.
Provide access to the configured PatchMatcher for access from other configuration classes.
Protected method for plugging in a custom sub-class of {@link org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler SimpAnnotationMethodMessageHandler}.
Override this method to add custom message converters. {@code false} if no more converters should be added.
Return a {@link org.springframework.validation.Validator}s instance for validating {@code @Payload} method arguments. <p>In order, this method tries to get a Validator instance: <ul> <li>delegating to getValidator() first</li> <li>if none returned, getting an existing instance with its well-known name "mvcValidator", <li>if none returned, checking the classpath for the presence of a JSR-303 implementation before creating a {@code OptionalValidatorFactoryBean}</li> <li>returning a no-op Validator instance</li> </ul>
Override this method to provide a custom {@link Validator}.
Configure the thread pool backing this message channel.
Configure the thread pool backing this message channel using a custom ThreadPoolTaskExecutor.
Configure interceptors for the message channel.
Enable a simple message broker and configure one or more prefixes to filter destinations targeting the broker (e.g. destinations prefixed with "/topic").
Enable a STOMP broker relay and configure the destination prefixes supported by the message broker. Check the STOMP documentation of the message broker for supported destinations.
Customize the channel used to send messages from the application to the message broker. By default, messages from the application to the message broker are sent synchronously, which means application code sending a message will find out if the message cannot be sent through an exception. However, this can be changed if the broker channel is configured here with task executor properties.
Configure one or more prefixes to filter destinations targeting application annotated methods. For example destinations prefixed with "/app" may be processed by annotated methods while other destinations may target the message broker (e.g. "/topic", "/queue"). <p>When messages are processed, the matching prefix is removed from the destination in order to form the lookup path. This means annotations should not contain the destination prefix. <p>Prefixes that do not have a trailing slash will have one automatically appended.
Configure the prefix used to identify user destinations. User destinations provide the ability for a user to subscribe to queue names unique to their session as well as for others to send messages to those unique, user-specific queues. <p>For example when a user attempts to subscribe to "/user/queue/position-updates", the destination may be translated to "/queue/position-updatesi9oqdfzo" yielding a unique queue name that does not collide with any other user attempting to do the same. Subsequently when messages are sent to "/user/{username}/queue/position-updates", the destination is translated to "/queue/position-updatesi9oqdfzo". <p>The default prefix used to identify such destinations is "/user/".
Configure the PathMatcher to use to match the destinations of incoming messages to {@code @MessageMapping} and {@code @SubscribeMapping} methods. <p>By default {@link org.springframework.util.AntPathMatcher} is configured. However applications may provide an {@code AntPathMatcher} instance customized to use "." (commonly used in messaging) instead of "/" as path separator or provide a completely different PathMatcher implementation. <p>Note that the configured PathMatcher is only used for matching the portion of the destination after the configured prefix. For example given application destination prefix "/app" and destination "/app/price.stock.**", the message might be mapped to a controller with "price" and "stock.**" as its type and method-level mappings respectively. <p>When the simple broker is enabled, the PathMatcher configured here is also used to match message destinations when brokering messages.
Configure the value for the heartbeat settings. The first number represents how often the server will write or send a heartbeat. The second is how often the client should write. 0 means no heartbeats. <p>By default this is set to "0, 0" unless the {@link #setTaskScheduler taskScheduler} in which case the default becomes "10000,10000" (in milliseconds).
Set the STOMP message broker host.
Set the STOMP message broker port.
Set the login to use when creating connections to the STOMP broker on behalf of connected clients. <p>By default this is set to "guest".
Set the passcode to use when creating connections to the STOMP broker on behalf of connected clients. <p>By default this is set to "guest".
Set the login for the shared "system" connection used to send messages to the STOMP broker from within the application, i.e. messages not associated with a specific client session (e.g. REST/HTTP request handling method). <p>By default this is set to "guest".
Set the passcode for the shared "system" connection used to send messages to the STOMP broker from within the application, i.e. messages not associated with a specific client session (e.g. REST/HTTP request handling method). <p>By default this is set to "guest".
Set the interval, in milliseconds, at which the "system" relay session will, in the absence of any other data being sent, send a heartbeat to the STOMP broker. A value of zero will prevent heartbeats from being sent to the broker. <p>The default value is 10000.
Set the maximum interval, in milliseconds, at which the "system" relay session expects, in the absence of any other data, to receive a heartbeat from the STOMP broker. A value of zero will configure the relay session to expect not to receive heartbeats from the broker. <p>The default value is 10000.
Set the value of the "host" header to use in STOMP CONNECT frames. When this property is configured, a "host" header will be added to every STOMP frame sent to the STOMP broker. This may be useful for example in a cloud environment where the actual host to which the TCP connection is established is different from the host providing the cloud-based STOMP service. <p>By default this property is not set.
Configure whether the {@link StompBrokerRelayMessageHandler} should start automatically when the Spring ApplicationContext is refreshed. <p>The default setting is {@code true}.
Set a destination to broadcast messages to user destinations that remain unresolved because the user appears not to be connected. In a multi-application server scenario this gives other application servers a chance to try. <p>By default this is not set. e.g. "/topic/unresolved-user-destination"
Set a destination to broadcast the content of the local user registry to and to listen for such broadcasts from other servers. In a multi-application server scenarios this allows each server's user registry to be aware of users connected to other servers. <p>By default this is not set. e.g. "/topic/simp-user-registry".
Set the core pool size of the ThreadPoolExecutor. <p><strong>NOTE:</strong> The core pool size is effectively the max pool size when an unbounded {@link #queueCapacity(int) queueCapacity} is configured (the default). This is essentially the "Unbounded queues" strategy as explained in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored. <p>By default this is set to twice the value of {@link Runtime#availableProcessors()}. In an an application where tasks do not block frequently, the number should be closer to or equal to the number of available CPUs/cores.
Set the max pool size of the ThreadPoolExecutor. <p><strong>NOTE:</strong> When an unbounded {@link #queueCapacity(int) queueCapacity} is configured (the default), the max pool size is effectively ignored. See the "Unbounded queues" strategy in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for more details. <p>By default this is set to {@code Integer.MAX_VALUE}.
Set the queue capacity for the ThreadPoolExecutor. <p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured (the default), the core pool size is effectively the max pool size. This is essentially the "Unbounded queues" strategy as explained in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored. <p>By default this is set to {@code Integer.MAX_VALUE}.
Set the time limit for which threads may remain idle before being terminated. If there are more than the core number of threads currently in the pool, after waiting this amount of time without processing a task, excess threads will be terminated. This overrides any value set in the constructor. <p>By default this is set to 60.
Return the wrapped {@link org.springframework.messaging.simp.stomp.StompDecoder}.
Return the configured buffer size limit.
Calculate the current buffer size.
Get the expected content length of the currently buffered, incomplete STOMP frame.
Decodes one or more STOMP frames from the given {@code ByteBuffer} into a list of {@link Message}s. <p>If there was enough data to parse a "content-length" header, then the value is used to determine how much more data is needed before a new attempt to decode is made. <p>If there was not enough data to parse the "content-length", or if there is "content-length" header, every subsequent call to decode attempts to parse again with all available data. Therefore the presence of a "content-length" header helps to optimize the decoding of large messages.
Create a new session.
Return the configured session handler.
Set the {@link MessageConverter} to use to convert the payload of incoming and outgoing messages to and from {@code byte[]} based on object type, or expected object type, and the "content-type" header. <p>By default, {@link SimpleMessageConverter} is configured.
Configure the TaskScheduler to use for receipt tracking.
Return the configured TaskScheduler to use for receipt tracking.
Configure the time in milliseconds before a receipt expires. <p>By default set to 15,000 (15 seconds).
Return the configured time limit before a receipt expires.
Whether receipt headers should be automatically added.
Create an instance with host "127.0.0.1" and port 61613.
Create an instance with the given host and port.
Create an instance with a pre-configured TCP client.
Connect and notify the given {@link StompSessionHandler} when connected on the STOMP level.
An overloaded version of {@link #connect(StompSessionHandler)} that accepts headers to use for the STOMP CONNECT frame.
Shut down the client and release resources.
Create a StompBrokerRelayMessageHandler instance with the given message channels and destination prefixes. that do not match the given prefix are ignored.
Return the STOMP message broker host.
Return the STOMP message broker port.
Set the interval, in milliseconds, at which the "system" connection will, in the absence of any other data being sent, send a heartbeat to the STOMP broker. A value of zero will prevent heartbeats from being sent to the broker. <p>The default value is 10000. <p>See class-level documentation for more information on the "system" connection.
Return the interval, in milliseconds, at which the "system" connection will send heartbeats to the STOMP broker.
Set the maximum interval, in milliseconds, at which the "system" connection expects, in the absence of any other data, to receive a heartbeat from the STOMP broker. A value of zero will configure the connection to expect not to receive heartbeats from the broker. <p>The default value is 10000. <p>See class-level documentation for more information on the "system" connection.
Return the interval, in milliseconds, at which the "system" connection expects to receive heartbeats from the STOMP broker.
Return the configured login to use for connections to the STOMP broker on behalf of connected clients.
Set the client passcode to use to create connections to the STOMP broker on behalf of connected clients. <p>By default this is set to "guest".
Return the configured passcode to use for connections to the STOMP broker on behalf of connected clients.
Return the login used for the shared "system" connection to the STOMP broker.
Return the passcode used for the shared "system" connection to the STOMP broker.
Configure one more destinations to subscribe to on the shared "system" connection along with MessageHandler's to handle received messages. <p>This is for internal use in a multi-application server scenario where servers forward messages to each other (e.g. unresolved user destinations).
Return the configured map with subscriptions on the "system" connection.
Return the configured virtual host value.
Configure a TCP client for managing TCP connections to the STOMP broker. By default {@link Reactor2TcpClient} is used.
Get the configured TCP client. Never {@code null} unless not configured invoked and this method is invoked before the handler is started and hence a default implementation initialized.
Return the current count of TCP connection to the broker.
Configure a {@link MessageHeaderInitializer} to apply to the headers of all messages created through the {@code StompBrokerRelayMessageHandler} that are sent to the client outbound message channel. <p>By default this property is not set.
Return a String describing internal state and counters.
Invoked when any TCP connectivity issue is detected, i.e. failure to establish the TCP connection, failure to send a message, missed heartbeat, etc.
Invoked after the STOMP CONNECTED frame is received. At this point the connection is ready for sending STOMP messages to the broker.
After a DISCONNECT there should be no more client frames so we can close the connection pro-actively. However, if the DISCONNECT has a receipt header we leave the connection open and expect the server will respond with a RECEIPT and then close the connection.
Clean up state associated with the connection and close it. Any exception arising from closing the connection are propagated.
Set the {@link MessageConverter} to use to convert the payload of incoming and outgoing messages to and from {@code byte[]} based on object type and the "content-type" header. <p>By default, {@link SimpleMessageConverter} is configured.
Configure a scheduler to use for heartbeats and for receipt tracking. <p><strong>Note:</strong> some transports have built-in support to work with heartbeats and therefore do not require a TaskScheduler. Receipts however, if needed, do require a TaskScheduler to be configured. <p>By default, this is not set.
The configured TaskScheduler.
Configure the default value for the "heart-beat" header of the STOMP CONNECT frame. The first number represents how often the client will write or send a heart-beat. The second is how often the server should write. A value of 0 means no heart-beats. <p>By default this is set to "10000,10000" but sub-classes may override that default and for example set it to "0,0" if they require a TaskScheduler to be configured first.
Return the configured default heart-beat value, never {@code null}.
Whether heartbeats are enabled. Returns {@code false} if {@link #setDefaultHeartbeat defaultHeartbeat} is set to "0,0", and {@code true} otherwise.
Configure the number of milliseconds before a receipt is considered expired. <p>By default set to 15,000 (15 seconds).
Return the configured receipt time limit.
Factory method for create and configure a new session.
Further initialize the StompHeaders, for example setting the heart-beat header if necessary.
Configure a {@link MessageHeaderInitializer} to apply to the headers of {@link Message}s from decoded STOMP frames.
Return the configured {@code MessageHeaderInitializer}, if any.
Decodes one or more STOMP frames from the given {@code ByteBuffer} into a list of {@link Message}s. If the input buffer contains partial STOMP frame content, or additional content with a partial STOMP frame, the buffer is reset and {@code null} is returned.
Decodes one or more STOMP frames from the given {@code buffer} and returns a list of {@link Message}s. <p>If the given ByteBuffer contains only partial STOMP frame content and no complete STOMP frames, an empty list is returned, and the buffer is reset to to where it was. <p>If the buffer contains one ore more STOMP frames, those are returned and the buffer reset to point to the beginning of the unused partial content. <p>The output partialMessageHeaders map is used to store successfully parsed headers in case of partial content. The caller can then check if a "content-length" header was read, which helps to determine how much more content is needed before the next attempt to decode. successfully parsed partialMessageHeaders in case of partial message content in cases where the partial buffer ended with a partial STOMP frame
Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.
Skip one ore more EOL characters at the start of the given ByteBuffer. Those are STOMP heartbeat frames.
See STOMP Spec 1.2:
Try to read an EOL incrementing the buffer position if successful.
Encodes the given STOMP {@code message} into a {@code byte[]}
Encodes the given payload and headers into a {@code byte[]}.
See STOMP Spec 1.2:
A constructor for creating message headers from a parsed STOMP frame.
A constructor for accessing and modifying existing message headers. Note that the message headers may not have been created from a STOMP frame but may have rather originated from using the more generic {@link org.springframework.messaging.simp.SimpMessageHeaderAccessor}.
Return the STOMP command, or {@code null} if not yet set.
Return the passcode header value, or {@code null} if not set.
Create an instance for the given STOMP command.
Create an instance for the given STOMP command and headers.
Create headers for a heartbeat. While a STOMP heartbeat frame does not have headers, a session id is needed for processing purposes at a minimum.
Create an instance from the payload and headers of the given Message.
Return the STOMP command from the given headers, or {@code null} if not set.
Create a new instance to be populated with new header values.
Set the content-type header. Applies to the SEND, MESSAGE, and ERROR frames.
Return the content-type header value.
Set the content-length header. Applies to the SEND, MESSAGE, and ERROR frames.
Return the content-length header or -1 if unknown.
Set the receipt header. Applies to any client frame other than CONNECT.
Get the receipt header.
Set the host header. Applies to the CONNECT frame.
Get the host header.
Set the login header. Applies to the CONNECT frame.
Get the login header.
Set the passcode header. Applies to the CONNECT frame.
Get the passcode header.
Set the heartbeat header. Applies to the CONNECT and CONNECTED frames.
Get the heartbeat header.
Whether heartbeats are enabled. Returns {@code false} if {@link #setHeartbeat} is set to "0,0", and {@code true} otherwise.
Set the session header. Applies to the CONNECTED frame.
Get the session header.
Set the server header. Applies to the CONNECTED frame.
Get the server header. Applies to the CONNECTED frame.
Set the destination header.
Get the destination header. Applies to the SEND, SUBSCRIBE, and MESSAGE frames.
Set the id header. Applies to the SUBSCR0BE, UNSUBSCRIBE, and ACK or NACK frames.
Get the id header.
Set the ack header to one of "auto", "client", or "client-individual". Applies to the SUBSCRIBE and MESSAGE frames.
Get the ack header.
Set the login header. Applies to the MESSAGE frame.
Get the subscription header.
Set the message-id header. Applies to the MESSAGE frame.
Get the message-id header.
Set the receipt-id header. Applies to the RECEIPT frame.
Get the receipt header.
Return a {@code StompHeaders} object that can only be read, not written to.
Create an instance that will access user session id information through the provided registry.
Return the configured {@link SimpUserRegistry}.
The prefix used to identify user destinations. Any destinations that do not start with the given prefix are not be resolved. <p>The default prefix is "/user/".
Return the configured prefix for user destinations.
Provide the {@code PathMatcher} in use for working with destinations which in turn helps to determine whether the leading slash should be kept in actual destinations after removing the {@link #setUserDestinationPrefix userDestinationPrefix}. <p>By default actual destinations have a leading slash, e.g. {@code /queue/position-updates} which makes sense with brokers that support destinations with slash as separator. When a {@code PathMatcher} is provided that supports an alternative separator, then resulting destinations won't have a leading slash, e.g. {@code jms.queue.position-updates}.
Create an instance wrapping the local user registry.
Internal methods for UserRegistryMessageHandler to manage broadcasts
Constructor to create DTO from a local user registry.
Default constructor for JSON deserialization.
Constructor to create user from a local user.
Default constructor for JSON deserialization.
Constructor to create DTO from the local user session.
Constructor to create DTO from a local user subscription.
Create an instance with the given client and broker channels subscribing to handle messages from each and then sending any resolved messages to the broker channel.
Return the configured {@link UserDestinationResolver}.
Set a destination to broadcast messages to that remain unresolved because the user is not connected. In a multi-application server scenario this gives other application servers a chance to try. <p>By default this is not set.
Return the configured destination for unresolved messages.
Return the messaging template used to send resolved messages to the broker channel.
Configure a custom {@link MessageHeaderInitializer} to initialize the headers of resolved target messages. <p>By default this is not set.
The "user" destination from the source message. This may look like "/user/queue/position-updates" when subscribing or "/user/{username}/queue/position-updates" when sending a message.
The target destinations that the source destination was translated to, one per active user session, e.g. "/queue/position-updates-useri9oqdfzo". set if there are no active sessions for the user.
The user destination in the form expected when a client subscribes, e.g. "/user/queue/position-updates".
The user for this user destination. when the user is not authenticated; in such cases it is possible to use sessionId in place of a user name thus removing the need for a user-to-session lookup via {@link SimpUserRegistry}.
Return the configured destination for broadcasting UserRegistry information.
Return the configured registry expiration period.
Constructor wrapping the given session attributes map.
Return the value for the attribute of the given name, if any.
Set the value with the given name replacing an existing value (if any).
Remove the attribute of the given name, if it exists. <p>Also removes the registered destruction callback for the specified attribute, if any. However it <i>does not</i> execute</i> the callback. It is assumed the removed object will continue to be used and destroyed independently at the appropriate time.
Retrieve the names of all attributes.
Register a callback to execute on destruction of the specified attribute. The callback is executed when the session is closed.
Return an id for the associated session.
Expose the object to synchronize on for the underlying session.
Whether the {@link #sessionCompleted()} was already invoked.
Invoked when the session is completed. Executed completion callbacks.
Extract the SiMP session attributes from the given message and wrap them in a {@link SimpAttributes} instance.
Reset the SimpAttributes for the current thread.
Bind the given SimpAttributes to the current thread,
Extract the SiMP session attributes from the given message, wrap them in a {@link SimpAttributes} instance and bind it to the current thread,
Return the SimpAttributes currently bound to the thread.
Return the SimpAttributes currently bound to the thread or raise an {@link java.lang.IllegalStateException} if none are bound..
A constructor for creating new message headers. This constructor is protected. See factory methods in this and sub-classes.
A constructor for accessing and modifying existing message headers. This constructor is protected. See factory methods in this and sub-classes.
A static alternative for access to the session attributes header.
Return the user associated with the current session.
Create an instance with {@link org.springframework.messaging.simp.SimpMessageType} {@code MESSAGE}.
Create an instance with the given {@link org.springframework.messaging.simp.SimpMessageType}.
A constructor accepting a message type.
Create a new {@link SimpMessagingTemplate} instance.
Return the configured message channel.
Configure the prefix to use for destinations targeting a specific user. <p>The default value is "/user/".
Return the configured user destination prefix.
Specify the timeout value to use for send operations (in milliseconds).
Return the configured send timeout (in milliseconds).
Configure a {@link MessageHeaderInitializer} to apply to the headers of all messages created through the {@code SimpMessagingTemplate}. <p>By default, this property is not set.
Specify a prefix to be appended to the message header name for any user-defined property that is being mapped into the MessageHeaders. The default is an empty String (no prefix).
Specify a prefix to be appended to the protocol property name for any user-defined message header that is being mapped into the protocol-specific Message. The default is an empty String (no prefix).
Generate the name to use to set the header defined by the specified {@code headerName} to the protocol specific message.
Generate the name to use to set the header defined by the specified {@code propertyName} to the {@link MessageHeaders} instance.
Return the header value, or {@code null} if it does not exist or does not match the requested {@code type}.
Return the bean name for this message channel.
Create a new message with the given payload.
Create a new message with the given payload and headers. The content of the given header map is copied.
A constructor with the {@link MessageHeaders} instance to use. <p><strong>Note:</strong> the given {@code MessageHeaders} instance is used directly in the new message, i.e. it is not copied.
Create a new {@link ExecutorSubscribableChannel} instance where messages will be sent in the callers thread.
Create a new {@link ExecutorSubscribableChannel} instance where messages will be sent via the specified executor. or {@code null} to execute in the callers thread.
Create a new message with the given payload.
Create a new message with the given payload and headers. The content of the given header map is copied.
A constructor with the {@link MessageHeaders} instance to use. <p><strong>Note:</strong> the given {@code MessageHeaders} instance is used directly in the new message, i.e. it is not copied.
Configure the IdGenerator strategy to initialize {@code MessageHeaderAccessor} instances with. <p>By default this property is set to {@code null} in which case the default IdGenerator of {@link org.springframework.messaging.MessageHeaders} is used. <p>To have no id's generated at all, see {@link #setDisableIdGeneration()}.
A shortcut for calling {@link #setIdGenerator(org.springframework.util.IdGenerator)} with an id generation strategy to disable id generation completely.
Return the configured {@code IdGenerator}, if any.
Whether to enable the automatic addition of the {@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header on {@code MessageHeaderAccessor} instances being initialized. <p>By default this property is set to false.
Return whether the timestamp header is enabled or not.
Set the message headers to use by providing a {@code MessageHeaderAccessor}.
Set the value for the given header name. If the provided value is {@code null}, the header will be removed.
Set the value for the given header name only if the header name is not already associated with a value.
Removes all headers provided via array of 'headerPatterns'. As the name suggests the array may contain simple matching patterns for header names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".
Remove the value for the given header name.
Copy the name-value pairs from the provided Map. This operation will overwrite any existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting values. Note that the 'id' and 'timestamp' header values will never be overwritten.
Copy the name-value pairs from the provided Map. This operation will <em>not</em> overwrite any existing values.
Create a builder for a new {@link Message} instance pre-populated with all of the headers copied from the provided message. The payload of the provided Message will also be used as the payload for the new message.
Create a new builder for a message with the given payload.
A constructor to create new headers.
A constructor accepting the headers of an existing message to copy.
Build a 'nested' accessor for the given message.
By default when {@link #getMessageHeaders()} is called, {@code "this"} {@code MessageHeaderAccessor} instance can no longer be used to modify the underlying message headers and the returned {@code MessageHeaders} is immutable. <p>However when this is set to {@code true}, the returned (underlying) {@code MessageHeaders} instance remains mutable. To make further modifications continue to use the same accessor instance or re-obtain it via:<br> {@link MessageHeaderAccessor#getAccessor(Message, Class) MessageHeaderAccessor.getAccessor(Message, Class)} <p>When modifications are complete use {@link #setImmutable()} to prevent further changes. The intended use case for this mechanism is initialization of a Message within a single thread. <p>By default this is set to {@code false}.
By default when {@link #getMessageHeaders()} is called, {@code "this"} {@code MessageHeaderAccessor} instance can no longer be used to modify the underlying message headers. However if {@link #setLeaveMutable(boolean)} is used, this method is necessary to indicate explicitly when the {@code MessageHeaders} instance should no longer be modified.
Whether the underlying headers can still be modified.
Mark the underlying message headers as modified.
Check whether the underlying message headers have been marked as modified.
A package private mechanism to enables the automatic addition of the {@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header. <p>By default, this property is set to {@code false}.
A package-private mechanism to configure the IdGenerator strategy to use. <p>By default this property is not set in which case the default IdGenerator in {@link org.springframework.messaging.MessageHeaders} is used.
Return the underlying {@code MessageHeaders} instance. <p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after this call, the headers are immutable and this accessor can no longer modify them. <p>This method always returns the same {@code MessageHeaders} instance if invoked multiples times. To obtain a copy of the underlying headers, use {@link #toMessageHeaders()} or {@link #toMap()} instead.
Return a copy of the underlying header values as a {@link MessageHeaders} object. <p>This method can be invoked many times, with modifications in between where each new call returns a fresh copy of the current header values.
Return a copy of the underlying header values as a plain {@link Map} object. <p>This method can be invoked many times, with modifications in between where each new call returns a fresh copy of the current header values.
Retrieve the value for the header with the given name.
Set the value for the given header name. <p>If the provided value is {@code null}, the header will be removed.
Set the value for the given header name only if the header name is not already associated with a value.
Removes all headers provided via array of 'headerPatterns'. <p>As the name suggests, array may contain simple matching patterns for header names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".
Copy the name-value pairs from the provided Map. <p>This operation will overwrite any existing values. Use {@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.
Copy the name-value pairs from the provided Map. <p>This operation will <em>not</em> overwrite any existing values.
Specific header accessors
Return a concise message for logging purposes.
Return a more detailed message for logging purposes.
Return the original {@code MessageHeaderAccessor} used to create the headers of the given {@code Message}, or {@code null} if that's not available or if its type does not match the required type. <p>This is for cases where the existence of an accessor is strongly expected (to be followed up with an assertion) or will created if not provided.
Return a mutable {@code MessageHeaderAccessor} for the given message attempting to match the type of accessor used to create the message headers, or otherwise wrapping the message with a {@code MessageHeaderAccessor} instance. <p>This is for cases where a header needs to be updated in generic code while preserving the accessor type for downstream processing.
A protected constructor to create new headers.
A protected constructor accepting the headers of an existing message to copy.
Return a copy of the native header values or an empty map.
Whether the native header map contains the give header name.
Set the specified native header value replacing existing values.
Add the specified native header value to existing values.
A constructor that creates a {@link TcpClientSpec TcpClientSpec} factory with a default {@link reactor.core.dispatch.SynchronousDispatcher}, i.e. relying on Netty threads. The number of Netty threads can be tweaked with the {@code reactor.tcp.ioThreadCount} System property. The network I/O threads will be shared amongst the active clients. <p>Also see the constructor accepting a ready Reactor {@link TcpClientSpec} {@link Function} factory.
A constructor with a pre-configured {@link TcpClientSpec} {@link Function} factory. This might be used to add SSL or specific network parameters to the generated client configuration. <p><strong>NOTE:</strong> if the client is configured with a thread-creating dispatcher, you are responsible for cleaning them, e.g. using {@link reactor.core.Dispatcher#shutdown}.
Construct a {@link MessageHeaders} with the given headers. An {@link #ID} and {@link #TIMESTAMP} headers will also be added, overriding any existing values.
Constructor providing control over the ID and TIMESTAMP header values.
Copy constructor which allows for ignoring certain entries. Used for serialization without non-serializable entries.
Delegating Map implementation
Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}.
Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}.
Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}.
Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}.
Serialization methods
Specify annotated classes, for which mappings will be read from class-level annotation metadata.
Specify the names of annotated packages, for which package-level annotation metadata will be read.
Specify packages to search using Spring-based scanning for entity classes in the classpath. This is an alternative to listing annotated classes explicitly. <p>Default is none. Specify packages to search for autodetection of your entity classes in the classpath. This is analogous to Spring's component-scan feature ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).
Specify custom type filters for Spring-based scanning for entity classes. <p>Default is to search all specified packages for classes annotated with {@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable} or {@code @javax.persistence.MappedSuperclass}, as well as for Hibernate's special {@code @org.hibernate.annotations.Entity}.
Perform Spring-based scanning for entity classes.
Check whether any of the configured entity type filters matches the current class descriptor contained in the metadata reader.
Constructor used by Hibernate: fetches config-time LobHandler and config-time JTA TransactionManager from LocalSessionFactoryBean.
Constructor used for testing: takes an explicit LobHandler and an explicit JTA TransactionManager (can be {@code null}).
Constructor used by Hibernate: fetches config-time LobHandler and config-time JTA TransactionManager from LocalSessionFactoryBean.
Constructor used for testing: takes an explicit LobHandler and an explicit JTA TransactionManager (can be {@code null}).
Constructor used by Hibernate: fetches config-time LobHandler and config-time JTA TransactionManager from LocalSessionFactoryBean.
Constructor used for testing: takes an explicit LobHandler and an explicit JTA TransactionManager (can be {@code null}).
Constructor used by Hibernate: fetches config-time LobHandler and config-time JTA TransactionManager from LocalSessionFactoryBean.
Constructor used for testing: takes an explicit LobHandler and an explicit JTA TransactionManager (can be {@code null}).
Determine the character encoding to apply to the BLOB's bytes to turn them into a String. <p>Default is {@code null}, indicating to use the platform default encoding. To be overridden in subclasses for a specific encoding such as "ISO-8859-1" or "UTF-8". to use the platform default encoding
Constructor used by Hibernate: fetches config-time LobHandler and config-time JTA TransactionManager from LocalSessionFactoryBean.
Constructor used for testing: takes an explicit LobHandler and an explicit JTA TransactionManager (can be {@code null}).
Set the Hibernate SessionFactory to be used by this DAO. Will automatically create a HibernateTemplate for the given SessionFactory.
Create a HibernateTemplate for the given SessionFactory. Only invoked if populating the DAO with a SessionFactory reference! <p>Can be overridden in subclasses to provide a HibernateTemplate instance with different configuration, or a custom HibernateTemplate subclass.
Return the Hibernate SessionFactory used by this DAO.
Set the HibernateTemplate for this DAO explicitly, as an alternative to specifying a SessionFactory.
Return the HibernateTemplate for this DAO, pre-initialized with the SessionFactory or set explicitly. <p><b>Note: The returned HibernateTemplate is a shared instance.</b> You may introspect its configuration, but not modify the configuration (other than from within an {@link #initDao} implementation). Consider creating a custom HibernateTemplate instance via {@code new HibernateTemplate(getSessionFactory())}, in which case you're allowed to customize the settings on the resulting instance.
Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.
Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.
Open a Session for the SessionFactory that this interceptor uses. <p>The default implementation delegates to the {@link SessionFactory#openSession} method and sets the {@link Session}'s flush mode to "MANUAL".
Set the bean name of the SessionFactory to fetch from Spring's root application context. Default is "sessionFactory".
Return the bean name of the SessionFactory to fetch from Spring's root application context.
Set whether to use a single session for each request. Default is "true". <p>If set to "false", each data access operation or transaction will use its own session (like without Open Session in View). Each of those sessions will be registered for deferred close, though, actually processed at request completion.
Return whether to use a single session for each request.
Specify the Hibernate FlushMode to apply to this filter's {@link org.hibernate.Session}. Only applied in single session mode. <p>Can be populated with the corresponding constant name in XML bean definitions: e.g. "AUTO". <p>The default is "MANUAL". Specify "AUTO" if you intend to use this filter without service layer transactions.
Return the Hibernate FlushMode that this filter applies to its {@link org.hibernate.Session} (in single session mode).
Look up the SessionFactory that this filter should use, taking the current HTTP request as argument. <p>The default implementation delegates to the {@link #lookupSessionFactory()} variant without arguments.
Look up the SessionFactory that this filter should use. <p>The default implementation looks for a bean with the specified name in Spring's root application context.
Get a Session for the SessionFactory that this filter uses. Note that this just applies in single session mode! <p>The default implementation delegates to the {@code SessionFactoryUtils.getSession} method and sets the {@code Session}'s flush mode to "MANUAL". <p>Can be overridden in subclasses for creating a Session with a custom entity interceptor or JDBC exception translator.
Close the given Session. Note that this just applies in single session mode! <p>Can be overridden in subclasses, e.g. for flushing the Session before closing it. See class-level javadoc for a discussion of flush handling. Note that you should also override getSession accordingly, to set the flush mode to something else than NEVER.
Create a new {@code OpenSessionInViewInterceptor}, turning the default flushMode to {@code FLUSH_NEVER}.
Set whether to use a single session for each request. Default is "true". <p>If set to false, each data access operation or transaction will use its own session (like without Open Session in View). Each of those sessions will be registered for deferred close, though, actually processed at request completion.
Return the name of the request attribute that identifies that a request is already intercepted. <p>The default implementation takes the {@code toString()} representation of the {@code SessionFactory} instance and appends {@link #PARTICIPATE_SUFFIX}.
Set the DataSource to be used by the SessionFactory. If set, this will override corresponding settings in Hibernate properties. <p>If this is set, the Hibernate settings should not define a connection provider to avoid meaningless double configuration. <p>If using HibernateTransactionManager as transaction strategy, consider proxying your target DataSource with a LazyConnectionDataSourceProxy. This defers fetching of an actual JDBC Connection until the first JDBC Statement gets executed, even within JDBC transactions (as performed by HibernateTransactionManager). Such lazy fetching is particularly beneficial for read-only operations, in particular if the chances of resolving the result in the second-level cache are high. <p>As JTA and transactional JNDI DataSources already provide lazy enlistment of JDBC Connections, LazyConnectionDataSourceProxy does not add value with JTA (i.e. Spring's JtaTransactionManager) as transaction strategy.
Return the DataSource to be used by the SessionFactory.
Set whether to use a transaction-aware DataSource for the SessionFactory, i.e. whether to automatically wrap the passed-in DataSource with Spring's TransactionAwareDataSourceProxy. <p>Default is "false": LocalSessionFactoryBean is usually used with Spring's HibernateTransactionManager or JtaTransactionManager, both of which work nicely on a plain JDBC DataSource. Hibernate Sessions and their JDBC Connections are fully managed by the Hibernate/JTA transaction infrastructure in such a scenario. <p>If you switch this flag to "true", Spring's Hibernate access will be able to <i>participate in JDBC-based transactions managed outside of Hibernate</i> (for example, by Spring's DataSourceTransactionManager). This can be convenient if you need a different local transaction strategy for another O/R mapping tool, for example, but still want Hibernate access to join into those transactions. <p>A further benefit of this option is that <i>plain Sessions opened directly via the SessionFactory</i>, outside of Spring's Hibernate support, will still participate in active Spring-managed transactions. However, consider using Hibernate's {@code getCurrentSession()} method instead (see javadoc of "exposeTransactionAwareSessionFactory" property). <p><b>WARNING:</b> When using a transaction-aware JDBC DataSource in combination with OpenSessionInViewFilter/Interceptor, whether participating in JTA or external JDBC-based transactions, it is strongly recommended to set Hibernate's Connection release mode to "after_transaction" or "after_statement", which guarantees proper Connection handling in such a scenario. In contrast to that, HibernateTransactionManager generally requires release mode "on_close". <p>Note: If you want to use Hibernate's Connection release mode "after_statement" with a DataSource specified on this LocalSessionFactoryBean (for example, a JTA-aware DataSource fetched from JNDI), switch this setting to "true". Otherwise, the ConnectionProvider used underneath will vote against aggressive release and thus silently switch to release mode "after_transaction".
Return whether to use a transaction-aware DataSource for the SessionFactory.
Set whether to expose a transaction-aware current Session from the SessionFactory's {@code getCurrentSession()} method, returning the Session that's associated with the current Spring-managed transaction, if any. <p>Default is "true", letting data access code work with the plain Hibernate SessionFactory and its {@code getCurrentSession()} method, while still being able to participate in current Spring-managed transactions: with any transaction management strategy, either local or JTA / EJB CMT, and any transaction synchronization mechanism, either Spring or JTA. Furthermore, {@code getCurrentSession()} will also seamlessly work with a request-scoped Session managed by OpenSessionInViewFilter/Interceptor. <p>Turn this flag off to expose the plain Hibernate SessionFactory with Hibernate's default {@code getCurrentSession()} behavior, supporting plain JTA synchronization only. Alternatively, simply override the corresponding Hibernate property "hibernate.current_session_context_class".
Return whether to expose a transaction-aware proxy for the SessionFactory.
Wrap the given SessionFactory with a proxy, if demanded. <p>The default implementation simply returns the given SessionFactory as-is. Subclasses may override this to implement transaction awareness through a SessionFactory proxy, for example.
Return the exposed SessionFactory. Will throw an exception if not initialized yet.
Build the underlying Hibernate SessionFactory. transaction-aware proxy before it is exposed to the application)
Set the name of the filter.
Set the parameter types for the filter, with parameter names as keys and type names as values. See {@code org.hibernate.type.TypeResolver#heuristicType(String)}.
Specify a default filter condition for the filter, if any.
Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.
Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.
Set the bean name of a Hibernate entity interceptor that allows to inspect and change property values before writing to and reading from the database. <p>Requires the bean factory to be known, to be able to resolve the bean name to an interceptor instance on session creation. Typically used for prototype interceptors, i.e. a new interceptor instance per session. <p>Can also be used for shared interceptor instances, but it is recommended to set the interceptor reference directly in such a scenario. the bean factory
Set a Hibernate entity interceptor that allows to inspect and change property values before writing to and reading from the database. <p>Such an interceptor can either be set at the SessionFactory level, i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on HibernateTemplate, HibernateInterceptor, and HibernateTransactionManager. It's preferable to set it on LocalSessionFactoryBean or HibernateTransactionManager to avoid repeated configuration and guarantee consistent behavior in transactions.
Return the current Hibernate entity interceptor, or {@code null} if none. Resolves an entity interceptor bean name via the bean factory, if necessary.
Set the JDBC exception translator for this instance. <p>Applied to any SQLException root cause of a Hibernate JDBCException, overriding Hibernate's default SQLException translation (which is based on Hibernate's Dialect for a specific target database).
Return the JDBC exception translator for this instance, if any.
Set the flush behavior by the name of the respective constant in this class, e.g. "FLUSH_AUTO". Default is "FLUSH_AUTO".
Set the flush behavior to one of the constants in this class. Default is FLUSH_AUTO.
Return if a flush should be forced after executing the callback code.
Set the name of a Hibernate filter to be activated for all Sessions that this accessor works with. <p>This filter will be enabled at the beginning of each operation and correspondingly disabled at the end of the operation. This will work for newly opened Sessions as well as for existing Sessions (for example, within a transaction).
Set one or more names of Hibernate filters to be activated for all Sessions that this accessor works with. <p>Each of those filters will be enabled at the beginning of each operation and correspondingly disabled at the end of the operation. This will work for newly opened Sessions as well as for existing Sessions (for example, within a transaction).
Return the names of Hibernate filters to be activated, if any.
Apply the flush mode that's been specified for this accessor to the given Session. or {@code null} if none
Flush the given Hibernate Session if necessary.
Convert the given HibernateException to an appropriate exception from the {@code org.springframework.dao} hierarchy. <p>Will automatically apply a specified SQLExceptionTranslator to a Hibernate JDBCException, else rely on Hibernate's default translation.
Convert the given Hibernate JDBCException to an appropriate exception from the {@code org.springframework.dao} hierarchy, using the given SQLExceptionTranslator.
Convert the given SQLException to an appropriate exception from the {@code org.springframework.dao} hierarchy. Can be overridden in subclasses. <p>Note that a direct SQLException can just occur when callback code performs direct JDBC access via {@code Session.connection()}.
Obtain a default SQLExceptionTranslator, lazily creating it if necessary. <p>Creates a default {@link org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator} for the SessionFactory's underlying DataSource.
Enable the specified filters on the given Session.
Disable the specified filters on the given Session.
Set the JDBC exception translator for the SessionFactory, exposed via the PersistenceExceptionTranslator interface. <p>Applied to any SQLException root cause of a Hibernate JDBCException, overriding Hibernate's default SQLException translation (which is based on Hibernate's Dialect for a specific target database).
Convert the given HibernateException to an appropriate exception from the {@code org.springframework.dao} hierarchy. <p>Will automatically apply a specified SQLExceptionTranslator to a Hibernate JDBCException, else rely on Hibernate's default translation.
Set whether to convert any HibernateException raised to a Spring DataAccessException, compatible with the {@code org.springframework.dao} exception hierarchy. <p>Default is "true". Turn this flag off to let the caller receive raw exceptions as-is, without any wrapping.
Return a Session for use by this interceptor.
Return the HQL query string that was invalid.
Create a new HibernateSystemException, wrapping an arbitrary HibernateException.
Create a new HibernateTemplate instance.
Create a new HibernateTemplate instance. transactional Session can be found for the current thread
Set if a new {@link Session} should be created when no transactional {@code Session} can be found for the current thread. The default value is {@code true}. <p>{@code HibernateTemplate} is aware of a corresponding {@code Session} bound to the current thread, for example when using {@link HibernateTransactionManager}. If {@code allowCreate} is {@code true}, a new non-transactional {@code Session} will be created if none is found, which needs to be closed at the end of the operation. If {@code false}, an {@link IllegalStateException} will get thrown in this case. <p><b>NOTE: As of Spring 2.5, switching {@code allowCreate} to {@code false} will delegate to Hibernate's {@link org.hibernate.SessionFactory#getCurrentSession()} method,</b> which - with Spring-based setup - will by default delegate to Spring's {@code SessionFactoryUtils.getSession(sessionFactory, false)}. This mode also allows for custom Hibernate CurrentSessionContext strategies to be plugged in, whereas {@code allowCreate} set to {@code true} will always use a Spring-managed Hibernate Session.
Return if a new Session should be created if no thread-bound found.
Set whether to always use a new Hibernate Session for this template. Default is "false"; if activated, all operations on this template will work on a new Hibernate Session even in case of a pre-bound Session (for example, within a transaction or OpenSessionInViewFilter). <p>Within a transaction, a new Hibernate Session used by this template will participate in the transaction through using the same JDBC Connection. In such a scenario, multiple Sessions will participate in the same database transaction. <p>Turn this on for operations that are supposed to always execute independently, without side effects caused by a shared Hibernate Session.
Return whether to always use a new Hibernate Session for this template.
Set whether to expose the native Hibernate Session to HibernateCallback code. <p>Default is "false": a Session proxy will be returned, suppressing {@code close} calls and automatically applying query cache settings and transaction timeouts.
Return whether to expose the native Hibernate Session to HibernateCallback code, or rather a Session proxy.
Set whether to check that the Hibernate Session is not in read-only mode in case of write operations (save/update/delete). <p>Default is "true", for fail-fast behavior when attempting write operations within a read-only transaction. Turn this off to allow save/update/delete on a Session with flush mode NEVER.
Return whether to check that the Hibernate Session is not in read-only mode in case of write operations (save/update/delete).
Set whether to cache all queries executed by this template. this template will be marked as cacheable (including all queries through find methods). <p>To specify the query region to be used for queries cached by this template, set the "queryCacheRegion" property.
Return whether to cache all queries executed by this template.
Set the name of the cache region for queries executed by this template. <p>If this is specified, it will be applied to all Query and Criteria objects template are configured to be cached via the "cacheQueries" property.
Return the name of the cache region for queries executed by this template.
Set the fetch size for this HibernateTemplate. This is important for processing large result sets: Setting this higher than the default value will increase processing speed at the cost of memory consumption; setting this lower can avoid transferring row data that will never be read by the application. <p>Default is 0, indicating to use the JDBC driver's default.
Return the fetch size specified for this HibernateTemplate.
Set the maximum number of rows for this HibernateTemplate. This is important for processing subsets of large result sets, avoiding to read and hold the entire result set in the database or in the JDBC driver if we're never interested in the entire result in the first place (for example, when performing searches that might return a large number of matches). <p>Default is 0, indicating to use the JDBC driver's default.
Return the maximum number of rows specified for this HibernateTemplate.
Execute the action specified by the given action object within a new {@link org.hibernate.Session}. <p>This execute variant overrides the template-wide {@link #isAlwaysUseNewSession() "alwaysUseNewSession"} setting.
Execute the action specified by the given action object within a native {@link org.hibernate.Session}. <p>This execute variant overrides the template-wide {@link #isExposeNativeSession() "exposeNativeSession"} setting.
Execute the action specified by the given action object within a Session. even if there is a pre-bound transactional Session Hibernate Session to callback code
Return a Session for use by this template. <p>Returns a new Session in case of "alwaysUseNewSession" (using the same JDBC Connection as a transactional Session, if applicable), a pre-bound Session in case of "allowCreate" turned off, and a pre-bound or new Session otherwise (new only if no transactional or otherwise pre-bound Session exists).
Create a close-suppressing proxy for the given Hibernate Session. The proxy also prepares returned Query and Criteria objects.
Check whether write operations are allowed on the given Session. <p>Default implementation throws an InvalidDataAccessApiUsageException in case of {@code FlushMode.MANUAL}. Can be overridden in subclasses.
Prepare the given Query object, applying cache settings and/or a transaction timeout.
Prepare the given Criteria object, applying cache settings and/or a transaction timeout.
Apply the given name parameter to the given Query object.
Create a new HibernateTransactionManager instance.
Set the SessionFactory that this instance should manage transactions for.
Return the SessionFactory that this instance should manage transactions for.
Set the JDBC DataSource that this instance should manage transactions for. The DataSource should match the one used by the Hibernate SessionFactory: for example, you could specify the same JNDI DataSource for both. <p>If the SessionFactory was configured with LocalDataSourceConnectionProvider, i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource", the DataSource will be auto-detected: You can still explicitly specify the DataSource, but you don't need to in this case. <p>A transactional JDBC Connection for this DataSource will be provided to application code accessing this DataSource directly via DataSourceUtils or JdbcTemplate. The Connection will be taken from the Hibernate Session. <p>The DataSource specified here should be the target DataSource to manage transactions for, not a TransactionAwareDataSourceProxy. Only data access code may work with TransactionAwareDataSourceProxy, while the transaction manager needs to work on the underlying target DataSource. If there's nevertheless a TransactionAwareDataSourceProxy passed in, it will be unwrapped to extract its target DataSource.
Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory, if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true". <p>Can be turned off to deliberately ignore an available DataSource, in order to not expose Hibernate transactions as JDBC transactions for that DataSource.
Set whether to prepare the underlying JDBC Connection of a transactional Hibernate Session, that is, whether to apply a transaction-specific isolation level and/or the transaction's read-only flag to the underlying JDBC Connection. <p>Default is "true". If you turn this flag off, the transaction manager will not support per-transaction isolation levels anymore. It will not call {@code Connection.setReadOnly(true)} for read-only transactions anymore either. If this flag is turned off, no cleanup of a JDBC Connection is required after a transaction, since no Connection settings will get modified.
Set whether to operate on a Hibernate-managed Session instead of a Spring-managed Session, that is, whether to obtain the Session through Hibernate's {@link org.hibernate.SessionFactory#getCurrentSession()} instead of {@link org.hibernate.SessionFactory#openSession()} (with a Spring {@link org.springframework.transaction.support.TransactionSynchronizationManager} check preceding it). <p>Default is "false", i.e. using a Spring-managed Session: taking the current thread-bound Session if available (e.g. in an Open-Session-in-View scenario), creating a new Session for the current transaction otherwise. <p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session. Note that this requires {@link org.hibernate.SessionFactory#getCurrentSession()} to always return a proper Session when called for a Spring-managed transaction; transaction begin will fail if the {@code getCurrentSession()} call fails. <p>This mode will typically be used in combination with a custom Hibernate {@link org.hibernate.context.CurrentSessionContext} implementation that stores Sessions in a place other than Spring's TransactionSynchronizationManager. It may also be used in combination with Spring's Open-Session-in-View support (using Spring's default {@link SpringSessionContext}), in which case it subtly differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i> receive a {@code clear()} call (on rollback) or a {@code disconnect()} call (on transaction completion) in such a scenario; this is rather left up to a custom CurrentSessionContext implementation (if desired).
Set whether to perform an early flush before proceeding with a commit. <p>Default is "false", performing an implicit flush as part of the actual commit step. Switch this to "true" in order to enforce an explicit early flush right <i>before</i> the actual commit step. <p>An early flush happens before the before-commit synchronization phase, making flushed state visible to {@code beforeCommit} callbacks of registered {@link org.springframework.transaction.support.TransactionSynchronization} objects. Such explicit flush behavior is consistent with Spring-driven flushing in a JTA transaction environment, so may also get enforced for consistency with JTA transaction behavior.
Set the JDBC exception translator for this transaction manager. <p>Applied to any SQLException root cause of a Hibernate JDBCException that is thrown on flush, overriding Hibernate's default SQLException translation (which is based on Hibernate's Dialect for a specific target database).
Return the JDBC exception translator for this transaction manager, if any.
Return whether the given Hibernate Session will always hold the same JDBC Connection. This is used to check whether the transaction manager can safely prepare and clean up the JDBC Connection used for a transaction. <p>Default implementation checks the Session's connection release mode to be "on_close". Unfortunately, this requires casting to SessionImpl, as of Hibernate 3.1. If that cast doesn't work, we'll simply assume we're safe and return {@code true}.
Return the DataSource to use for retrieving Connections. <p>This implementation returns the passed-in DataSource as-is. on LocalSessionFactoryBean (potentially wrapped)
Return the DataSource that this ConnectionProvider wraps.
Standard constructor.
Properties constructor: not used by this class or formally required, but enforced by Hibernate when reflectively instantiating a RegionFactory.
Return the DataSource for the currently configured Hibernate SessionFactory, to be used by LocalDataSourceConnectionProvoder. <p>This instance will be set before initialization of the corresponding SessionFactory, and reset immediately afterwards. It is thus only available during configuration.
Return the JTA TransactionManager for the currently configured Hibernate SessionFactory, to be used by LocalTransactionManagerLookup. <p>This instance will be set before initialization of the corresponding SessionFactory, and reset immediately afterwards. It is thus only available during configuration.
Return the RegionFactory for the currently configured Hibernate SessionFactory, to be used by LocalRegionFactoryProxy. <p>This instance will be set before initialization of the corresponding SessionFactory, and reset immediately afterwards. It is thus only available during configuration.
Return the LobHandler for the currently configured Hibernate SessionFactory, to be used by UserType implementations like ClobStringType. <p>This instance will be set before initialization of the corresponding SessionFactory, and reset immediately afterwards. It is thus only available during configuration.
Set the location of a single Hibernate XML config file, for example as classpath resource "classpath:hibernate.cfg.xml". <p>Note: Can be omitted when all necessary properties and mapping resources are specified locally via this bean.
Set the locations of multiple Hibernate XML config files, for example as classpath resources "classpath:hibernate.cfg.xml,classpath:extension.cfg.xml". <p>Note: Can be omitted when all necessary properties and mapping resources are specified locally via this bean.
Set Hibernate mapping resources to be found in the class path, like "example.hbm.xml" or "mypackage/example.hbm.xml". Analogous to mapping entries in a Hibernate XML config file. Alternative to the more generic setMappingLocations method. <p>Can be used to add to mappings from a Hibernate XML config file, or to specify all mappings locally.
Set locations of Hibernate mapping files, for example as classpath resource "classpath:example.hbm.xml". Supports any resource location via Spring's resource abstraction, for example relative paths like "WEB-INF/mappings/example.hbm.xml" when running in an application context. <p>Can be used to add to mappings from a Hibernate XML config file, or to specify all mappings locally.
Set locations of cacheable Hibernate mapping files, for example as web app resource "/WEB-INF/mapping/example.hbm.xml". Supports any resource location via Spring's resource abstraction, as long as the resource can be resolved in the file system. <p>Can be used to add to mappings from a Hibernate XML config file, or to specify all mappings locally.
Set locations of jar files that contain Hibernate mapping resources, like "WEB-INF/lib/example.hbm.jar". <p>Can be used to add to mappings from a Hibernate XML config file, or to specify all mappings locally.
Set locations of directories that contain Hibernate mapping resources, like "WEB-INF/mappings". <p>Can be used to add to mappings from a Hibernate XML config file, or to specify all mappings locally.
Set Hibernate properties, such as "hibernate.dialect". <p>Can be used to override values in a Hibernate XML config file, or to specify all necessary properties locally. <p>Note: Do not specify a transaction provider here when using Spring-driven transactions. It is also advisable to omit connection provider settings and use a Spring-set DataSource instead.
Return the Hibernate properties, if any. Mainly available for configuration through property paths that specify individual keys.
Set the JTA TransactionManager to be used for Hibernate's TransactionManagerLookup. Allows for using a Spring-managed JTA TransactionManager for Hibernate's cache synchronization. <p>Note: If this is set, the Hibernate settings should not define a transaction manager lookup to avoid meaningless double configuration.
Set the Hibernate RegionFactory to use for the SessionFactory. Allows for using a Spring-managed RegionFactory instance. <p>Note: If this is set, the Hibernate settings should not define a cache provider to avoid meaningless double configuration.
Set the LobHandler to be used by the SessionFactory. Will be exposed at config time for UserType implementations.
Set a Hibernate entity interceptor that allows to inspect and change property values before writing to and reading from the database. <p>Such an interceptor can either be set at the SessionFactory level, i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on HibernateTemplate, HibernateInterceptor, and HibernateTransactionManager. It's preferable to set it on LocalSessionFactoryBean or HibernateTransactionManager to avoid repeated configuration and guarantee consistent behavior in transactions.
Set a Hibernate NamingStrategy for the SessionFactory, determining the physical column and table names given the info in the mapping document.
Specify the Hibernate type definitions to register with the SessionFactory, as Spring TypeDefinitionBean instances. This is an alternative to specifying <&lt;typedef&gt; elements in Hibernate mapping files. <p>Unfortunately, Hibernate itself does not define a complete object that represents a type definition, hence the need for Spring's TypeDefinitionBean.
Specify the Hibernate FilterDefinitions to register with the SessionFactory. This is an alternative to specifying <&lt;filter-def&gt; elements in Hibernate mapping files. <p>Typically, the passed-in FilterDefinition objects will have been defined as Spring FilterDefinitionFactoryBeans, probably as inner beans within the LocalSessionFactoryBean definition.
Specify the cache strategies for entities (persistent classes or named entities). This configuration setting corresponds to the &lt;class-cache&gt; entry in the "hibernate.cfg.xml" configuration format. <p>For example: <pre class="code"> &lt;property name="entityCacheStrategies"&gt; &lt;props&gt; &lt;/props&gt; &lt;/property&gt;</pre> with class names as keys and cache concurrency strategies as values
Specify the cache strategies for persistent collections (with specific roles). This configuration setting corresponds to the &lt;collection-cache&gt; entry in the "hibernate.cfg.xml" configuration format. <p>For example: <pre class="code"> &lt;property name="collectionCacheStrategies"&gt; &lt;props&gt; &lt;/props&gt; &lt;/property&gt;</pre> with collection roles as keys and cache concurrency strategies as values
Specify the Hibernate event listeners to register, with listener types as keys and listener objects as values. Instead of a single listener object, you can also pass in a list or set of listeners objects as value. <p>See the Hibernate documentation for further details on listener types and associated listener interfaces. <p>See {@code org.hibernate.cfg.Configuration#setListener(String, Object)} listener objects as values
Set whether to execute a schema update after SessionFactory initialization. <p>For details on how to make schema update scripts work, see the Hibernate documentation, as this class leverages the same schema update script support in org.hibernate.cfg.Configuration as Hibernate's own SchemaUpdate tool.
Subclasses can override this method to perform custom initialization of the Configuration instance used for SessionFactory creation. The properties of this LocalSessionFactoryBean will be applied to the Configuration object that gets returned here. <p>The default implementation creates a new Configuration instance. A custom implementation could prepare the instance in a specific way, or use a custom Configuration subclass.
Subclasses can override this method to perform custom initialization of the SessionFactory instance, creating it via the given Configuration object that got prepared by this LocalSessionFactoryBean. <p>The default implementation invokes Configuration's buildSessionFactory. A custom implementation could prepare the instance in a specific way, or use a custom SessionFactoryImpl subclass.
Return the Configuration object used to build the SessionFactory. Allows for access to configuration metadata stored there (rarely needed).
Execute schema update script, determined by the Configuration object used for creating the SessionFactory. A replacement for Hibernate's SchemaUpdate class, for automatically executing schema update scripts on application startup. Can also be invoked manually. <p>Fetch the LocalSessionFactoryBean itself rather than the exposed SessionFactory to be able to invoke this method, e.g. via {@code LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");}. <p>Uses the SessionFactory that this bean generates for accessing a JDBC connection to perform the script.
Execute schema creation script, determined by the Configuration object used for creating the SessionFactory. A replacement for Hibernate's SchemaValidator class, to be invoked after application startup. <p>Fetch the LocalSessionFactoryBean itself rather than the exposed SessionFactory to be able to invoke this method, e.g. via {@code LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");}. <p>Uses the SessionFactory that this bean generates for accessing a JDBC connection to perform the script.
Execute schema drop script, determined by the Configuration object used for creating the SessionFactory. A replacement for Hibernate's SchemaExport class, to be invoked on application setup. <p>Fetch the LocalSessionFactoryBean itself rather than the exposed SessionFactory to be able to invoke this method, e.g. via {@code LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");}. <p>Uses the SessionFactory that this bean generates for accessing a JDBC connection to perform the script.
Execute schema creation script, determined by the Configuration object used for creating the SessionFactory. A replacement for Hibernate's SchemaExport class, to be invoked on application setup. <p>Fetch the LocalSessionFactoryBean itself rather than the exposed SessionFactory to be able to invoke this method, e.g. via {@code LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");}. <p>Uses the SessionFactory that this bean generates for accessing a JDBC connection to perform the script.
Execute the given schema script on the given JDBC Connection. <p>Note that the default implementation will log unsuccessful statements and continue to execute. Override the {@code executeSchemaStatement} method to treat failures differently.
Execute the given schema SQL on the given JDBC Statement. <p>Note that the default implementation will log unsuccessful statements and continue to execute. Override this method to treat failures differently.
Determine the DataSource of the given SessionFactory.
Create an appropriate SQLExceptionTranslator for the given SessionFactory. If a DataSource is found, a SQLErrorCodeSQLExceptionTranslator for the DataSource is created; else, a SQLStateSQLExceptionTranslator as fallback.
Try to retrieve the JTA TransactionManager from the given SessionFactory and/or Session. Check the passed-in SessionFactory for implementing SessionFactoryImplementor (the usual case), falling back to the SessionFactory reference that the Session itself carries.
Get a Hibernate Session for the given SessionFactory. Is aware of and will return any existing corresponding Session bound to the current thread, for example when using {@link HibernateTransactionManager}. Will create a new Session otherwise, if "allowCreate" is {@code true}. <p>This is the {@code getSession} method used by typical data access code, in combination with {@code releaseSession} called when done with the Session. Note that HibernateTemplate allows to write data access code without caring about such resource handling. when no transactional Session can be found for the current thread "allowCreate" is {@code false}
Get a Hibernate Session for the given SessionFactory. Is aware of and will return any existing corresponding Session bound to the current thread, for example when using {@link HibernateTransactionManager}. Will always create a new Session otherwise. <p>Supports setting a Session-level Hibernate entity interceptor that allows to inspect and change property values before writing to and reading from the database. Such an interceptor can also be set at the SessionFactory level (i.e. on LocalSessionFactoryBean), on HibernateTransactionManager, etc. Session on transaction synchronization (may be {@code null}; only used when actually registering a transaction synchronization)
Get a Hibernate Session for the given SessionFactory. Is aware of and will return any existing corresponding Session bound to the current thread, for example when using {@link HibernateTransactionManager}. Will create a new Session otherwise, if "allowCreate" is {@code true}. <p>Throws the original HibernateException, in contrast to {@link #getSession}. when no transactional Session can be found for the current thread
Get a Hibernate Session for the given SessionFactory. Is aware of and will return any existing corresponding Session bound to the current thread, for example when using {@link HibernateTransactionManager}. Will create a new Session otherwise, if "allowCreate" is {@code true}. <p>Same as {@link #getSession}, but throwing the original HibernateException. Session on transaction synchronization (may be {@code null}) when no transactional Session can be found for the current thread "allowCreate" is {@code false}
Retrieve a Session from the given SessionHolder, potentially from a JTA transaction synchronization. Session on transaction synchronization (may be {@code null})
Register a JTA synchronization for the given Session, if any. Session on transaction synchronization (may be {@code null})
Get a new Hibernate Session from the given SessionFactory. Will return a new Session even if there already is a pre-bound Session for the given SessionFactory. <p>Within a transaction, this method will create a new Session that shares the transaction's JDBC Connection. More specifically, it will use the same JDBC Connection as the pre-bound Hibernate Session.
Stringify the given Session for debug logging. Returns output equivalent to {@code Object.toString()}: the fully qualified class name + "@" + the identity hash code. <p>The sole reason why this is necessary is because Hibernate3's {@code Session.toString()} implementation is broken (and won't be fixed): it logs the toString representation of all persistent objects in the Session, which might lead to ConcurrentModificationExceptions if the persistent objects in turn refer to the Session (for example, for lazy loading).
Return whether there is a transactional Hibernate Session for the current thread, that is, a Session bound to the current thread by Spring's transaction facilities.
Return whether the given Hibernate Session is transactional, that is, bound to the current thread by Spring's transaction facilities. (may be {@code null})
Apply the current transaction timeout, if any, to the given Hibernate Query object. (may be {@code null})
Apply the current transaction timeout, if any, to the given Hibernate Criteria object.
Convert the given HibernateException to an appropriate exception from the {@code org.springframework.dao} hierarchy.
Determine whether deferred close is active for the current thread and the given SessionFactory.
Initialize deferred close for the current thread and the given SessionFactory. Sessions will not be actually closed on close calls then, but rather at a {@link #processDeferredClose} call at a finishing point (like request completion). <p>Used by {@link org.springframework.orm.hibernate3.support.OpenSessionInViewFilter} and {@link org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor} when not configured for a single session.
Process all Hibernate Sessions that have been registered for deferred close for the given SessionFactory.
Close the given Session, created via the given factory, if it is not managed externally (i.e. not bound to the thread). (may be {@code null})
Close the given Session or register it for deferred close. (may be {@code null})
Perform actual closing of the Hibernate Session, catching and logging any cleanup exceptions thrown.
Create a new SpringSessionContext for the given Hibernate SessionFactory.
Check whether there is a Hibernate Session for the current JTA transaction. Else, fall back to the default thread-bound Session.
Set the name of the type.
Return the name of the type.
Set the type implementation class.
Return the type implementation class.
Specify default parameters for the type. This only applies to parameterized types.
Return the default parameters for the type.
Set the bean name of the PersistenceManagerFactory to fetch from Spring's root application context. Default is "persistenceManagerFactory".
Return the bean name of the PersistenceManagerFactory to fetch from Spring's root application context.
Look up the PersistenceManagerFactory that this filter should use, taking the current HTTP request as argument. <p>Default implementation delegates to the {@code lookupPersistenceManagerFactory} without arguments.
Look up the PersistenceManagerFactory that this filter should use. The default implementation looks for a bean with the specified name in Spring's root application context.
Set the JDO PersistenceManagerFactory that should be used to create PersistenceManagers.
Return the JDO PersistenceManagerFactory that should be used to create PersistenceManagers.
Return the name of the request attribute that identifies that a request is already filtered. Default implementation takes the toString representation of the PersistenceManagerFactory instance and appends ".FILTERED".
Set the target PersistenceManagerFactory for this proxy.
Return the target PersistenceManagerFactory for this proxy.
Set the JDO dialect to use for this proxy. <p>Default is a DefaultJdoDialect based on the PersistenceManagerFactory's underlying DataSource, if any.
Return the JDO dialect to use for this proxy.
Specify the PersistenceManager interface to expose, possibly including vendor extensions. <p>Default is the standard {@code javax.jdo.PersistenceManager} interface.
Return the PersistenceManager interface to expose.
Set whether the PersistenceManagerFactory proxy is allowed to create a non-transactional PersistenceManager when no transactional PersistenceManager can be found for the current thread. <p>Default is "true". Can be turned off to enforce access to transactional PersistenceManagers, which safely allows for DAOs written to get a PersistenceManager without explicit closing (i.e. a {@code PersistenceManagerFactory.getPersistenceManager()} call without corresponding {@code PersistenceManager.close()} call).
Return whether the PersistenceManagerFactory proxy is allowed to create a non-transactional PersistenceManager when no transactional PersistenceManager can be found for the current thread.
Set the target JDO PersistenceManagerFactory that this proxy should delegate to. This should be the raw PersistenceManagerFactory, as accessed by JdoTransactionManager.
Create a new DefaultJdoDialect. which is used to initialize the default JDBC exception translator
Set the JDBC exception translator for this dialect. <p>Applied to any SQLException root cause of a JDOException, if specified. The default is to rely on the JDO provider's native exception translation.
Return the JDBC exception translator for this dialect, if any.
Determine the JDO isolation level String to use for the given Spring transaction definition. to indicate that no isolation level should be set explicitly
Template method for extracting a SQL String from the given exception. <p>Default implementation always returns {@code null}. Can be overridden in subclasses to extract SQL Strings for vendor-specific exception classes.
Create a new JdoTransactionManager instance.
Set the PersistenceManagerFactory that this instance should manage transactions for. <p>The PersistenceManagerFactory specified here should be the target PersistenceManagerFactory to manage transactions for, not a TransactionAwarePersistenceManagerFactoryProxy. Only data access code may work with TransactionAwarePersistenceManagerFactoryProxy, while the transaction manager needs to work on the underlying target PersistenceManagerFactory.
Return the PersistenceManagerFactory that this instance should manage transactions for.
Set the JDBC DataSource that this instance should manage transactions for. The DataSource should match the one used by the JDO PersistenceManagerFactory: for example, you could specify the same JNDI DataSource for both. <p>If the PersistenceManagerFactory uses a DataSource as connection factory, the DataSource will be autodetected: You can still explicitly specify the DataSource, but you don't need to in this case. <p>A transactional JDBC Connection for this DataSource will be provided to application code accessing this DataSource directly via DataSourceUtils or JdbcTemplate. The Connection will be taken from the JDO PersistenceManager. <p>Note that you need to use a JDO dialect for a specific JDO provider to allow for exposing JDO transactions as JDBC transactions. <p>The DataSource specified here should be the target DataSource to manage transactions for, not a TransactionAwareDataSourceProxy. Only data access code may work with TransactionAwareDataSourceProxy, while the transaction manager needs to work on the underlying target DataSource. If there's nevertheless a TransactionAwareDataSourceProxy passed in, it will be unwrapped to extract its target DataSource.
Set whether to autodetect a JDBC DataSource used by the JDO PersistenceManagerFactory, as returned by the {@code getConnectionFactory()} method. Default is "true". <p>Can be turned off to deliberately ignore an available DataSource, to not expose JDO transactions as JDBC transactions for that DataSource.
Set the JDO dialect to use for this transaction manager. <p>The dialect object can be used to retrieve the underlying JDBC connection and thus allows for exposing JDO transactions as JDBC transactions.
Return the JDO dialect to use for this transaction manager. <p>Creates a default one for the specified PersistenceManagerFactory if none set.
Close the current transaction's EntityManager. Called after a transaction begin attempt failed.
Convert the given JDOException to an appropriate exception from the {@code org.springframework.dao} hierarchy. <p>The default implementation delegates to the JdoDialect. May be overridden in subclasses.
Specify the name of the desired PersistenceManagerFactory. <p>This may either be a properties resource in the classpath if such a resource exists, or a PMF definition with that name from "META-INF/jdoconfig.xml", or a JPA EntityManagerFactory cast to a PersistenceManagerFactory based on the persistence-unit name from "META-INF/persistence.xml" (JPA). <p>Default is none: Either 'persistenceManagerFactoryName' or 'configLocation' or 'jdoProperties' needs to be specified.
Set the location of the JDO properties config file, for example as classpath resource "classpath:kodo.properties". <p>Note: Can be omitted when all necessary properties are specified locally via this bean.
Set JDO properties, such as"javax.jdo.PersistenceManagerFactoryClass". <p>Can be used to override values in a JDO properties config file, or to specify all necessary properties locally. <p>Can be populated with a String "value" (parsed via PropertiesEditor) or a "props" element in XML bean definitions.
Specify JDO properties as a Map, to be passed into {@code JDOHelper.getPersistenceManagerFactory} (if any). <p>Can be populated with a "map" or "props" element in XML bean definitions.
Allow Map access to the JDO properties to be passed to the JDOHelper, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "jdoPropertyMap[myKey]".
Set the JDO dialect to use for the PersistenceExceptionTranslator functionality of this factory. <p>Default is a DefaultJdoDialect based on the PersistenceManagerFactory's underlying DataSource, if any.
Subclasses can override this to perform custom initialization of the PersistenceManagerFactory instance, creating it for the specified name. <p>The default implementation invokes JDOHelper's {@code getPersistenceManagerFactory(String)} method. A custom implementation could prepare the instance in a specific way, or use a custom PersistenceManagerFactory implementation.
Subclasses can override this to perform custom initialization of the PersistenceManagerFactory instance, creating it via the given Properties that got prepared by this LocalPersistenceManagerFactoryBean. <p>The default implementation invokes JDOHelper's {@code getPersistenceManagerFactory(Map)} method. A custom implementation could prepare the instance in a specific way, or use a custom PersistenceManagerFactory implementation.
Create an appropriate SQLExceptionTranslator for the given PersistenceManagerFactory. <p>If a DataSource is found, creates a SQLErrorCodeSQLExceptionTranslator for the DataSource; else, falls back to a SQLStateSQLExceptionTranslator. (may be {@code null})
Obtain a JDO PersistenceManager via the given factory. Is aware of a corresponding PersistenceManager bound to the current thread, for example when using JdoTransactionManager. Will create a new PersistenceManager else, if "allowCreate" is {@code true}. when no transactional PersistenceManager can be found for the current thread "allowCreate" is {@code false}
Obtain a JDO PersistenceManager via the given factory. Is aware of a corresponding PersistenceManager bound to the current thread, for example when using JdoTransactionManager. Will create a new PersistenceManager else, if "allowCreate" is {@code true}. <p>Same as {@code getPersistenceManager}, but throwing the original JDOException. when no transactional PersistenceManager can be found for the current thread "allowCreate" is {@code false}
Return whether the given JDO PersistenceManager is transactional, that is, bound to the current thread by Spring's transaction facilities. was created with (can be {@code null})
Apply the current transaction timeout, if any, to the given JDO Query object.
Convert the given JDOException to an appropriate exception from the {@code org.springframework.dao} hierarchy. <p>The most important cases like object not found or optimistic locking failure are covered here. For more fine-granular conversion, JdoTransactionManager supports sophisticated translation of exceptions via a JdoDialect.
Close the given PersistenceManager, created via the given factory, if it is not managed externally (i.e. not bound to the thread). (can be {@code null})
Actually release a PersistenceManager for the given factory. Same as {@code releasePersistenceManager}, but throwing the original JDOException. (can be {@code null})
Set the target JDO PersistenceManagerFactory that this proxy should delegate to. This should be the raw PersistenceManagerFactory, as accessed by JdoTransactionManager.
Return the target JDO PersistenceManagerFactory that this proxy delegates to.
Specify the location of the {@code persistence.xml} files to load. These can be specified as Spring resource locations and/or location patterns. <p>Default is "classpath*:META-INF/persistence.xml".
Specify multiple locations of {@code persistence.xml} files to load. These can be specified as Spring resource locations and/or location patterns. <p>Default is "classpath*:META-INF/persistence.xml". identifying the location of the {@code persistence.xml} files to read
Set the default persistence unit root location, to be applied if no unit-specific persistence unit root could be determined. <p>Default is "classpath:", that is, the root of the current classpath (nearest root directory). To be overridden if unit-specific resolution does not work and the classpath root is not appropriate either.
Specify the name of the default persistence unit, if any. Default is "default". <p>Primarily applied to a scanned persistence unit without {@code persistence.xml}. Also applicable to selecting a default unit from several persistence units available.
Set whether to use Spring-based scanning for entity classes in the classpath instead of using JPA's standard scanning of jar files with {@code persistence.xml} markers in them. In case of Spring-based scanning, no {@code persistence.xml} is necessary; all you need to do is to specify base packages to search here. <p>Default is none. Specify packages to search for autodetection of your entity classes in the classpath. This is analogous to Spring's component-scan feature ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}). <p>Such package scanning defines a "default persistence unit" in Spring, which may live next to regularly defined units originating from {@code persistence.xml}. Its name is determined by {@link #setDefaultPersistenceUnitName}: by default, it's simply "default". <p><p>Note: There may be limitations in comparison to regular JPA scanning.</b> In particular, JPA providers may pick up annotated packages for provider-specific annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's scan can detect annotated packages as well if supported by the given {@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate). <p>If no explicit {@link #setMappingResources mapping resources} have been specified in addition to these packages, this manager looks for a default {@code META-INF/orm.xml} file in the classpath, registering it as a mapping resource for the default unit if the mapping file is not co-located with a {@code persistence.xml} file (in which case we assume it is only meant to be used with the persistence units defined there, like in standard JPA).
Specify one or more mapping resources (equivalent to {@code <mapping-file>} entries in {@code persistence.xml}) for the default persistence unit. Can be used on its own or in combination with entity scanning in the classpath, in both cases avoiding {@code persistence.xml}. <p>Note that mapping resources must be relative to the classpath root, e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that they can be loaded through {@code ClassLoader.getResource}. <p>If no explicit mapping resources have been specified next to {@link #setPackagesToScan packages to scan}, this manager looks for a default {@code META-INF/orm.xml} file in the classpath, registering it as a mapping resource for the default unit if the mapping file is not co-located with a {@code persistence.xml} file (in which case we assume it is only meant to be used with the persistence units defined there, like in standard JPA). <p>Note that specifying an empty array/list here suppresses the default {@code META-INF/orm.xml} check. On the other hand, explicitly specifying {@code META-INF/orm.xml} here will register that file even if it happens to be co-located with a {@code persistence.xml} file.
Specify the JPA 2.0 shared cache mode for all of this manager's persistence units, overriding any value in {@code persistence.xml} if set.
Specify the JPA 2.0 validation mode for all of this manager's persistence units, overriding any value in {@code persistence.xml} if set.
Specify the JDBC DataSources that the JPA persistence provider is supposed to use for accessing the database, resolving data source names in {@code persistence.xml} against Spring-managed DataSources. <p>The specified Map needs to define data source names for specific DataSource objects, matching the data source names used in {@code persistence.xml}. If not specified, data source names will be resolved as JNDI names instead (as defined by standard JPA).
Specify the JDBC DataSourceLookup that provides DataSources for the persistence provider, resolving data source names in {@code persistence.xml} against Spring-managed DataSource instances. <p>Default is JndiDataSourceLookup, which resolves DataSource names as JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup instance if you want DataSource names to be resolved against Spring bean names. <p>Alternatively, consider passing in a map from names to DataSource instances via the "dataSources" property. If the {@code persistence.xml} file does not define DataSource names at all, specify a default DataSource via the "defaultDataSource" property.
Return the JDBC DataSourceLookup that provides DataSources for the persistence provider, resolving data source names in {@code persistence.xml} against Spring-managed DataSource instances.
Specify the JDBC DataSource that the JPA persistence provider is supposed to use for accessing the database if none has been specified in {@code persistence.xml}. This variant indicates no special transaction setup, i.e. typical resource-local. <p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource" on the PersistenceUnitInfo passed to the PersistenceProvider, provided that none has been registered before.
Return the JDBC DataSource that the JPA persistence provider is supposed to use for accessing the database if none has been specified in {@code persistence.xml}.
Specify the JDBC DataSource that the JPA persistence provider is supposed to use for accessing the database if none has been specified in {@code persistence.xml}. This variant indicates that JTA is supposed to be used as transaction type. <p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource" on the PersistenceUnitInfo passed to the PersistenceProvider, provided that none has been registered before.
Return the JTA-aware DataSource that the JPA persistence provider is supposed to use for accessing the database if none has been specified in {@code persistence.xml}.
Set the PersistenceUnitPostProcessors to be applied to each PersistenceUnitInfo that has been parsed by this manager. <p>Such post-processors can, for example, register further entity classes and jar files, in addition to the metadata read from {@code persistence.xml}.
Return the PersistenceUnitPostProcessors to be applied to each PersistenceUnitInfo that has been parsed by this manager.
Return the Spring LoadTimeWeaver to use for class instrumentation according to the JPA class transformer contract.
Prepare the PersistenceUnitInfos according to the configuration of this manager: scanning for {@code persistence.xml} files, parsing all matching files, configuring and post-processing them. <p>PersistenceUnitInfos cannot be obtained before this preparation method has been invoked.
Read all persistence unit infos from {@code persistence.xml}, as defined in the JPA specification.
Perform Spring-based scanning for entity classes.
Check whether any of the configured entity type filters matches the current class descriptor contained in the metadata reader.
Try to determine the persistence unit root URL based on the given "defaultPersistenceUnitRootLocation".
Determine whether to register JPA's default "META-INF/orm.xml" with Spring's default persistence unit, if any. <p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it if it is not co-located with a "META-INF/persistence.xml" file.
Return the specified PersistenceUnitInfo from this manager's cache of processed persistence units, keeping it in the cache (i.e. not 'obtaining' it for use but rather just accessing it for post-processing). <p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations, detecting existing persistence units of the same name and potentially merging them.
Hook method allowing subclasses to customize each PersistenceUnitInfo. <p>The default implementation delegates to all registered PersistenceUnitPostProcessors. It is usually preferable to register further entity classes, jar files etc there rather than in a subclass of this manager, to be able to reuse the post-processors. Passed in as MutablePersistenceUnitInfo.
Return whether an override of a same-named persistence unit is allowed. <p>Default is {@code false}. May be overridden to return {@code true}, for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.
Add a managed class name to the persistence provider's metadata.
Add a managed package to the persistence provider's metadata. <p>Note: This refers to annotated {@code package-info.java} files. It does <i>not</i> trigger entity scanning in the specified package; this is rather the job of {@link DefaultPersistenceUnitManager#setPackagesToScan}.
Create a new PersistenceUnitReader. {@code persistence.xml} files against
Parse and build all persistence unit infos defined in the specified XML file(s).
Parse and build all persistence unit infos defined in the given XML files.
Validate the given stream and return a valid DOM document for parsing.
Parse the validated document and add entries to the given unit info list.
Determine the persistence unit root URL based on the given resource (which points to the {@code persistence.xml} file we're reading).
Parse the unit info DOM element.
Parse the {@code property} XML elements.
Parse the {@code class} XML elements.
Parse the {@code mapping-file} XML elements.
Parse the {@code jar-file} XML elements.
Initialize this PersistenceUnitInfo with the LoadTimeWeaver SPI interface used by Spring to add instrumentation to the current class loader.
Initialize this PersistenceUnitInfo with the current class loader (instead of with a LoadTimeWeaver).
Set the bean name of the EntityManagerFactory to fetch from Spring's root application context. <p>Default is "entityManagerFactory". Note that this default only applies when no "persistenceUnitName" param has been specified.
Return the bean name of the EntityManagerFactory to fetch from Spring's root application context.
Set the name of the persistence unit to access the EntityManagerFactory for. <p>This is an alternative to specifying the EntityManagerFactory by bean name, resolving it by its persistence unit name instead. If no bean name and no persistence unit name have been specified, we'll check whether a bean exists for the default bean name "entityManagerFactory"; if not, a default EntityManagerFactory will be retrieved through finding a single unique bean of type EntityManagerFactory.
Return the name of the persistence unit to access the EntityManagerFactory for, if any.
Look up the EntityManagerFactory that this filter should use, taking the current HTTP request as argument. <p>The default implementation delegates to the {@code lookupEntityManagerFactory} without arguments, caching the EntityManagerFactory reference once obtained.
Look up the EntityManagerFactory that this filter should use. <p>The default implementation looks for a bean with the specified name in Spring's root application context.
Create a JPA EntityManager to be bound to a request. <p>Can be overridden in subclasses.
Return the name of the request attribute that identifies that a request is already filtered. Default implementation takes the toString representation of the EntityManagerFactory instance and appends ".FILTERED".
Specify the persistence units for EntityManagerFactory lookups, as a Map from persistence unit name to persistence unit JNDI name (which needs to resolve to an EntityManagerFactory instance). <p>JNDI names specified here should refer to {@code persistence-unit-ref} entries in the Java EE deployment descriptor, matching the target persistence unit. <p>In case of no unit name specified in the annotation, the specified value for the {@link #setDefaultPersistenceUnitName default persistence unit} will be taken (by default, the value mapped to the empty String), or simply the single persistence unit if there is only one. <p>This is mainly intended for use in a Java EE environment, with all lookup driven by the standard JPA annotations, and all EntityManagerFactory references obtained from JNDI. No separate EntityManagerFactory bean definitions are necessary in such a scenario. <p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts" are specified, {@code @PersistenceContext} will be resolved to EntityManagers built on top of the EntityManagerFactory defined here. Note that those will be Spring-managed EntityManagers, which implement transaction synchronization based on Spring's facilities. If you prefer the Java EE server's own EntityManager handling, specify corresponding "persistenceContexts"/"extendedPersistenceContexts".
Specify the <i>transactional</i> persistence contexts for EntityManager lookups, as a Map from persistence unit name to persistence context JNDI name (which needs to resolve to an EntityManager instance). <p>JNDI names specified here should refer to {@code persistence-context-ref} entries in the Java EE deployment descriptors, matching the target persistence unit and being set up with persistence context type {@code Transaction}. <p>In case of no unit name specified in the annotation, the specified value for the {@link #setDefaultPersistenceUnitName default persistence unit} will be taken (by default, the value mapped to the empty String), or simply the single persistence unit if there is only one. <p>This is mainly intended for use in a Java EE environment, with all lookup driven by the standard JPA annotations, and all EntityManager references obtained from JNDI. No separate EntityManagerFactory bean definitions are necessary in such a scenario, and all EntityManager handling is done by the Java EE server itself.
Specify the <i>extended</i> persistence contexts for EntityManager lookups, as a Map from persistence unit name to persistence context JNDI name (which needs to resolve to an EntityManager instance). <p>JNDI names specified here should refer to {@code persistence-context-ref} entries in the Java EE deployment descriptors, matching the target persistence unit and being set up with persistence context type {@code Extended}. <p>In case of no unit name specified in the annotation, the specified value for the {@link #setDefaultPersistenceUnitName default persistence unit} will be taken (by default, the value mapped to the empty String), or simply the single persistence unit if there is only one. <p>This is mainly intended for use in a Java EE environment, with all lookup driven by the standard JPA annotations, and all EntityManager references obtained from JNDI. No separate EntityManagerFactory bean definitions are necessary in such a scenario, and all EntityManager handling is done by the Java EE server itself.
Specify the default persistence unit name, to be used in case of no unit name specified in an {@code @PersistenceUnit} {@code @PersistenceContext} annotation. <p>This is mainly intended for lookups in the application context, indicating the target persistence unit name (typically matching the bean name), but also applies to lookups in the {@link #setPersistenceUnits "persistenceUnits"} {@link #setPersistenceContexts "persistenceContexts"} {@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map, avoiding the need for duplicated mappings for the empty String there. <p>Default is to check for a single EntityManagerFactory bean in the Spring application context, if any. If there are multiple such factories, either specify this default persistence unit name or explicitly refer to named persistence units in your annotations.
Return a specified persistence unit for the given unit name, as defined through the "persistenceUnits" map. or {@code null} if none found
Return a specified persistence context for the given unit name, as defined through the "persistenceContexts" (or "extendedPersistenceContexts") map.
Find an EntityManagerFactory with the given name in the current Spring application context, falling back to a single default EntityManagerFactory (if any) in case of no unit name specified.
Find an EntityManagerFactory with the given name in the current Spring application context.
Find a single default EntityManagerFactory in the Spring application context.
Perform a JNDI lookup for the given resource by name. <p>Called for EntityManagerFactory and EntityManager lookup when JNDI names are mapped for specific persistence units.
Specify the EntityManager interface to expose. <p>Default is the EntityManager interface as defined by the EntityManagerFactoryInfo, if available. Else, the standard {@code javax.persistence.EntityManager} interface will be used.
Set whether to automatically join ongoing transactions (according to the JPA 2.1 SynchronizationType rules). Default is "true".
Specify the target database to operate on, as a value of the {@code Database} enum: DB2, DERBY, H2, HSQL, INFORMIX, MYSQL, ORACLE, POSTGRESQL, SQL_SERVER, SYBASE
Return the target database to operate on.
Specify the name of the target database to operate on. The supported values are vendor-dependent platform identifiers.
Return the name of the target database to operate on.
Set whether to generate DDL after the EntityManagerFactory has been initialized, creating/updating all relevant tables. <p>Note that the exact semantics of this flag depend on the underlying persistence provider. For any more advanced needs, specify the appropriate vendor-specific settings as "jpaProperties". <p><b>NOTE: Do not set this flag to 'true' while also setting JPA 2.1's {@code javax.persistence.schema-generation.database.action} property.</b> These two schema generation mechanisms - standard JPA versus provider-native - are mutually exclusive, e.g. with Hibernate 5.
Return whether to generate DDL after the EntityManagerFactory has been initialized creating/updating all relevant tables.
Set whether to show SQL in the log (or in the console). <p>For more specific logging configuration, specify the appropriate vendor-specific settings as "jpaProperties".
Return whether to show SQL in the log (or in the console).
Set whether to lazily start a database resource transaction within a Spring-managed EclipseLink transaction. <p>By default, read-only transactions are started lazily but regular non-read-only transactions are started early. This allows for reusing the same JDBC Connection throughout an entire EclipseLink transaction, for enforced isolation and consistent visibility with JDBC access code working on the same DataSource. <p>Switch this flag to "true" to enforce a lazy database transaction begin even for non-read-only transactions, allowing access to EclipseLink's shared cache and following EclipseLink's connection mode configuration, assuming that isolation and visibility at the JDBC level are less important.
Determine the EclipseLink target database name for the given database.
Set whether to prepare the underlying JDBC Connection of a transactional Hibernate Session, that is, whether to apply a transaction-specific isolation level and/or the transaction's read-only flag to the underlying JDBC Connection. <p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close' connection release mode, and "false" on Hibernate EntityManager 3.6 (due to the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is strongly recommended in order to make isolation levels work efficiently.</b> <p>If you turn this flag off, JPA transaction management will not support per-transaction isolation levels anymore. It will not call {@code Connection.setReadOnly(true)} for read-only transactions anymore either. If this flag is turned off, no cleanup of a JDBC Connection is required after a transaction, since no Connection settings will get modified. <p><b>NOTE:</b> The default behavior in terms of read-only handling changed in Spring 4.1, propagating the read-only status to the JDBC Connection now, analogous to other Spring transaction managers. This may have the effect that you're running into read-only enforcement now where previously write access has accidentally been tolerated: Please revise your transaction declarations accordingly, removing invalid read-only markers if necessary.
Return the OpenJPA-specific variant of {@code EntityManager}.
Determine the OpenJPA database dictionary name for the given database.
Set the PersistenceProvider implementation class to use for creating the EntityManagerFactory. If not specified, the persistence provider will be taken from the JpaVendorAdapter (if any) or retrieved through scanning (as far as possible).
Set the PersistenceProvider instance to use for creating the EntityManagerFactory. If not specified, the persistence provider will be taken from the JpaVendorAdapter (if any) or determined by the persistence unit deployment descriptor (as far as possible).
Specify the name of the EntityManagerFactory configuration. <p>Default is none, indicating the default EntityManagerFactory configuration. The persistence provider will throw an exception if ambiguous EntityManager configurations are found.
Specify JPA properties, to be passed into {@code Persistence.createEntityManagerFactory} (if any). <p>Can be populated with a String "value" (parsed via PropertiesEditor) or a "props" element in XML bean definitions.
Specify JPA properties as a Map, to be passed into {@code Persistence.createEntityManagerFactory} (if any). <p>Can be populated with a "map" or "props" element in XML bean definitions.
Allow Map access to the JPA properties to be passed to the persistence provider, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".
Specify the (potentially vendor-specific) EntityManagerFactory interface that this EntityManagerFactory proxy is supposed to implement. <p>The default will be taken from the specific JpaVendorAdapter, if any, or set to the standard {@code javax.persistence.EntityManagerFactory} interface else.
Specify the (potentially vendor-specific) EntityManager interface that this factory's EntityManagers are supposed to implement. <p>The default will be taken from the specific JpaVendorAdapter, if any, or set to the standard {@code javax.persistence.EntityManager} interface else.
Specify the vendor-specific JpaDialect implementation to associate with this EntityManagerFactory. This will be exposed through the EntityManagerFactoryInfo interface, to be picked up as default dialect by accessors that intend to use JpaDialect functionality.
Specify the JpaVendorAdapter implementation for the desired JPA provider, if any. This will initialize appropriate defaults for the given provider, such as persistence provider class and JpaDialect, unless locally overridden in this FactoryBean.
Return the JpaVendorAdapter implementation for this EntityManagerFactory, or {@code null} if not known.
Specify an asynchronous executor for background bootstrapping, e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}. <p>{@code EntityManagerFactory} initialization will then switch into background bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for injection purposes instead of waiting for the JPA provider's bootstrapping to complete. However, note that the first actual call to a {@code EntityManagerFactory} method will then block until the JPA provider's bootstrapping completed, if not ready by then. For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls in init methods of related beans, even for metadata introspection purposes.
Return the asynchronous executor for background bootstrapping, if any.
Create a proxy of the given EntityManagerFactory. We do this to be able to return transaction-aware proxies for application-managed EntityManagers, and to introduce the NamedEntityManagerFactory interface
Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo or the native EntityManagerFactory accordingly.
Subclasses must implement this method to create the EntityManagerFactory that will be returned by the {@code getObject()} method.
Set the JPA EntityManagerFactory that should be used to create EntityManagers.
Return the JPA EntityManagerFactory that should be used to create EntityManagers.
Set the name of the persistence unit to access the EntityManagerFactory for. <p>This is an alternative to specifying the EntityManagerFactory by direct reference, resolving it by its persistence unit name instead. If no EntityManagerFactory and no persistence unit name have been specified, a default EntityManagerFactory will be retrieved through finding a single unique bean of type EntityManagerFactory.
Specify JPA properties, to be passed into {@code EntityManagerFactory.createEntityManager(Map)} (if any). <p>Can be populated with a String "value" (parsed via PropertiesEditor) or a "props" element in XML bean definitions.
Specify JPA properties as a Map, to be passed into {@code EntityManagerFactory.createEntityManager(Map)} (if any). <p>Can be populated with a "map" or "props" element in XML bean definitions.
Allow Map access to the JPA properties to be passed to the persistence provider, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".
Obtain a new EntityManager from this accessor's EntityManagerFactory. <p>Can be overridden in subclasses to create specific EntityManager variants.
Obtain the transactional EntityManager for this accessor's EntityManagerFactory, if any.
Find an EntityManagerFactory with the given name in the given Spring application context (represented as ListableBeanFactory). <p>The specified unit name will be matched against the configured persistence unit, provided that a discovered EntityManagerFactory implements the {@link EntityManagerFactoryInfo} interface. If not, the persistence unit name will be matched against the Spring bean name, assuming that the EntityManagerFactory bean names follow that convention. <p>If no unit name has been given, this method will search for a default EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}. in which case a single bean of type EntityManagerFactory will be searched for)
Obtain a JPA EntityManager from the given factory. Is aware of a corresponding EntityManager bound to the current thread, e.g. when using JpaTransactionManager. <p>Note: Will return {@code null} if no thread-bound EntityManager found!
Obtain a JPA EntityManager from the given factory. Is aware of a corresponding EntityManager bound to the current thread, e.g. when using JpaTransactionManager. <p>Note: Will return {@code null} if no thread-bound EntityManager found! call (may be {@code null})
Obtain a JPA EntityManager from the given factory. Is aware of a corresponding EntityManager bound to the current thread, e.g. when using JpaTransactionManager. <p>Same as {@code getEntityManager}, but throwing the original PersistenceException. call (may be {@code null})
Obtain a JPA EntityManager from the given factory. Is aware of a corresponding EntityManager bound to the current thread, e.g. when using JpaTransactionManager. <p>Same as {@code getEntityManager}, but throwing the original PersistenceException. call (may be {@code null}) transactions (according to the JPA 2.1 SynchronizationType rules)
Prepare a transaction on the given EntityManager, if possible. (to be passed into cleanupTransaction)
Prepare a transaction on the given EntityManager, if possible. (as returned by prepareTransaction)
Apply the current transaction timeout, if any, to the given JPA Query object. <p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly.
Convert the given runtime exception to an appropriate exception from the {@code org.springframework.dao} hierarchy. Return null if no translation is appropriate: any other exception may have resulted from user code, and should not be translated. <p>The most important cases like object not found or optimistic locking failure are covered here. For more fine-granular conversion, JpaTransactionManager etc support sophisticated translation of exceptions via a JpaDialect. or {@code null} if the exception should not be translated
Close the given JPA EntityManager, catching and logging any cleanup exceptions thrown.
Create an application-managed extended EntityManager proxy. and PersistenceUnitInfo from but does not participate in them automatically
Create an application-managed extended EntityManager proxy. and PersistenceUnitInfo from transactions (according to the JPA 2.1 SynchronizationType rules) but does not participate in them automatically
Create a container-managed extended EntityManager proxy. and PersistenceUnitInfo from in any managed transaction
Create a container-managed extended EntityManager proxy. If this implements the EntityManagerFactoryInfo interface, the corresponding JpaDialect and PersistenceUnitInfo will be detected accordingly. in any managed transaction
Create a container-managed extended EntityManager proxy. If this implements the EntityManagerFactoryInfo interface, the corresponding JpaDialect and PersistenceUnitInfo will be detected accordingly. call (may be {@code null}) in any managed transaction
Create a container-managed extended EntityManager proxy. If this implements the EntityManagerFactoryInfo interface, the corresponding JpaDialect and PersistenceUnitInfo will be detected accordingly. call (may be {@code null}) transactions (according to the JPA 2.1 SynchronizationType rules) management but may opt out of automatic transaction synchronization
Actually create the EntityManager proxy. and PersistenceUnitInfo from or application-managed EntityManager semantics transactions (according to the JPA 2.1 SynchronizationType rules)
Actually create the EntityManager proxy. interface to proxy, or {@code null} for default detection of all interfaces (or {@code null} if not known in advance) or application-managed EntityManager semantics transactions (according to the JPA 2.1 SynchronizationType rules)
Join an existing transaction, if not already joined. (i.e. whether failure to join is considered fatal)
Enlist this application-managed EntityManager in the current transaction.
Create a new JpaTransactionManager instance. <p>An EntityManagerFactory has to be set to be able to use it.
Create a new JpaTransactionManager instance.
Set the EntityManagerFactory that this instance should manage transactions for. <p>Alternatively, specify the persistence unit name of the target EntityManagerFactory. By default, a default EntityManagerFactory will be retrieved by finding a single unique bean of type EntityManagerFactory in the containing BeanFactory.
Return the EntityManagerFactory that this instance should manage transactions for.
Set the name of the persistence unit to manage transactions for. <p>This is an alternative to specifying the EntityManagerFactory by direct reference, resolving it by its persistence unit name instead. If no EntityManagerFactory and no persistence unit name have been specified, a default EntityManagerFactory will be retrieved by finding a single unique bean of type EntityManagerFactory.
Return the name of the persistence unit to manage transactions for, if any.
Set the JDBC DataSource that this instance should manage transactions for. The DataSource should match the one used by the JPA EntityManagerFactory: for example, you could specify the same JNDI DataSource for both. <p>If the EntityManagerFactory uses a known DataSource as its connection factory, the DataSource will be autodetected: You can still explicitly specify the DataSource, but you don't need to in this case. <p>A transactional JDBC Connection for this DataSource will be provided to application code accessing this DataSource directly via DataSourceUtils or JdbcTemplate. The Connection will be taken from the JPA EntityManager. <p>Note that you need to use a JPA dialect for a specific JPA implementation to allow for exposing JPA transactions as JDBC transactions. <p>The DataSource specified here should be the target DataSource to manage transactions for, not a TransactionAwareDataSourceProxy. Only data access code may work with TransactionAwareDataSourceProxy, while the transaction manager needs to work on the underlying target DataSource. If there's nevertheless a TransactionAwareDataSourceProxy passed in, it will be unwrapped to extract its target DataSource.
Set the JPA dialect to use for this transaction manager. Used for vendor-specific transaction management and JDBC connection exposure. <p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected: You can still explicitly specify the DataSource, but you don't need to in this case. <p>The dialect object can be used to retrieve the underlying JDBC connection and thus allows for exposing JPA transactions as JDBC transactions.
Return the JPA dialect to use for this transaction manager.
Create a JPA EntityManager to be used for a transaction. <p>The default implementation checks whether the EntityManagerFactory is a Spring proxy and unwraps it first.
Close the current transaction's EntityManager. Called after a transaction begin attempt failed.
Set the PersistenceUnitManager to use for obtaining the JPA persistence unit that this FactoryBean is supposed to build an EntityManagerFactory for. <p>The default is to rely on the local settings specified on this FactoryBean, such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver". <p>For reuse of existing persistence unit configuration or more advanced forms of custom persistence unit handling, consider defining a separate PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance) and linking it in here. {@code persistence.xml} location, DataSource configuration and LoadTimeWeaver will be defined on that separate DefaultPersistenceUnitManager bean in such a scenario.
Set the location of the {@code persistence.xml} file we want to use. This is a Spring resource location. <p>Default is "classpath:META-INF/persistence.xml". <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b> identifying the location of the {@code persistence.xml} file that this LocalContainerEntityManagerFactoryBean should parse
Set whether to use Spring-based scanning for entity classes in the classpath instead of using JPA's standard scanning of jar files with {@code persistence.xml} markers in them. In case of Spring-based scanning, no {@code persistence.xml} is necessary; all you need to do is to specify base packages to search here. <p>Default is none. Specify packages to search for autodetection of your entity classes in the classpath. This is analogous to Spring's component-scan feature ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}). <p><p>Note: There may be limitations in comparison to regular JPA scanning.</b> In particular, JPA providers may pick up annotated packages for provider-specific annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's scan can detect annotated packages as well if supported by the given {@link JpaVendorAdapter} (e.g. for Hibernate). <p>If no explicit {@link #setMappingResources mapping resources} have been specified in addition to these packages, Spring's setup looks for a default {@code META-INF/orm.xml} file in the classpath, registering it as a mapping resource for the default unit if the mapping file is not co-located with a {@code persistence.xml} file (in which case we assume it is only meant to be used with the persistence units defined there, like in standard JPA). <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b> Spring's component-scan configuration for regular Spring components
Specify one or more mapping resources (equivalent to {@code <mapping-file>} entries in {@code persistence.xml}) for the default persistence unit. Can be used on its own or in combination with entity scanning in the classpath, in both cases avoiding {@code persistence.xml}. <p>Note that mapping resources must be relative to the classpath root, e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that they can be loaded through {@code ClassLoader.getResource}. <p>If no explicit mapping resources have been specified next to {@link #setPackagesToScan packages to scan}, Spring's setup looks for a default {@code META-INF/orm.xml} file in the classpath, registering it as a mapping resource for the default unit if the mapping file is not co-located with a {@code persistence.xml} file (in which case we assume it is only meant to be used with the persistence units defined there, like in standard JPA). <p>Note that specifying an empty array/list here suppresses the default {@code META-INF/orm.xml} check. On the other hand, explicitly specifying {@code META-INF/orm.xml} here will register that file even if it happens to be co-located with a {@code persistence.xml} file. <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>
Specify the JPA 2.0 shared cache mode for this persistence unit, overriding a value in {@code persistence.xml} if set. <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>
Specify the JPA 2.0 validation mode for this persistence unit, overriding a value in {@code persistence.xml} if set. <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>
Specify the JDBC DataSource that the JPA persistence provider is supposed to use for accessing the database. This is an alternative to keeping the JDBC configuration in {@code persistence.xml}, passing in a Spring-managed DataSource instead. <p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource" on the PersistenceUnitInfo passed to the PersistenceProvider, as well as overriding data source configuration in {@code persistence.xml} (if any). Note that this variant typically works for JTA transaction management as well; if it does not, consider using the explicit {@link #setJtaDataSource} instead. <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>
Specify the JDBC DataSource that the JPA persistence provider is supposed to use for accessing the database. This is an alternative to keeping the JDBC configuration in {@code persistence.xml}, passing in a Spring-managed DataSource instead. <p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource" on the PersistenceUnitInfo passed to the PersistenceProvider, as well as overriding data source configuration in {@code persistence.xml} (if any). <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>
Set the PersistenceUnitPostProcessors to be applied to the PersistenceUnitInfo used for creating this EntityManagerFactory. <p>Such post-processors can, for example, register further entity classes and jar files, in addition to the metadata read from {@code persistence.xml}. <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>
Determine the PersistenceUnitInfo to use for the EntityManagerFactory <p>The default implementation reads in all persistence unit infos from {@code persistence.xml}, as defined in the JPA specification. If no entity manager name was specified, it takes the first info in the array as returned by the reader. Otherwise, it checks for a matching name.
Create a transactional EntityManager proxy for the given EntityManagerFactory.
Create a transactional EntityManager proxy for the given EntityManagerFactory. {@code createEntityManager} call (may be {@code null})
Create a transactional EntityManager proxy for the given EntityManagerFactory. {@code createEntityManager} call (may be {@code null}) transactions (according to the JPA 2.1 SynchronizationType rules)
Create a transactional EntityManager proxy for the given EntityManagerFactory. {@code createEntityManager} call (may be {@code null}) EntityManager. Allows the addition or specification of proprietary interfaces.
Create a transactional EntityManager proxy for the given EntityManagerFactory. {@code createEntityManager} call (may be {@code null}) transactions (according to the JPA 2.1 SynchronizationType rules) EntityManager. Allows the addition or specification of proprietary interfaces.
Create a general ObjectOptimisticLockingFailureException with the given message, without any information on the affected object.
Create a new ObjectOptimisticLockingFailureException for the given object, with the default "optimistic locking failed" message.
Create a new ObjectOptimisticLockingFailureException for the given object, with the given explicit message.
Return the persistent class of the object for which the locking failed. If no Class was specified, this method returns null.
Return the name of the persistent class of the object for which the locking failed. Will work for both Class objects and String names.
Return the identifier of the object for which the locking failed.
Create a general ObjectRetrievalFailureException with the given message, without any information on the affected object.
Create a new ObjectRetrievalFailureException for the given object, with the default "not found" message.
Create a new ObjectRetrievalFailureException for the given object, with the given explicit message and exception.
Return the persistent class of the object that was not found. If no Class was specified, this method returns null.
Return the name of the persistent class of the object that was not found. Will work for both Class objects and String names.
Return the identifier of the object that was not found.
This would be legal, at least if not actually _starting_ a tx
See comments in spec on EntityManager.joinTransaction(). We take the view that this is a valid no op.
JPA 2.1 method
Create an EntityManager that will always automatically enlist itself in current transactions, in contrast to an EntityManager returned by {@code EntityManagerFactory.createEntityManager()} (which requires an explicit {@code joinTransaction()} call).
Subclasses should override this method if they wish to disable shadow class loading. <p>The default implementation deactivates shadow class loading if Spring's InstrumentationSavingAgent has been configured on VM startup.
NB: This method must <b>not</b> have a return type of ShadowingClassLoader as that would cause that class to be loaded eagerly when this test case loads, creating verify errors at runtime.
Customize the shadowing class loader. ResourceOverridingShadowingClassLoader, and can safely to be cast to that type. However, the signature must not be of that type as that would cause the present class loader to load that type.
Subclasses can override this to return the real location path for orm.xml or null if they do not wish to find any orm.xml
Set the autowire mode for test properties set by Dependency Injection. <p>The default is {@link #AUTOWIRE_BY_TYPE}. Can be set to {@link #AUTOWIRE_BY_NAME} or {@link #AUTOWIRE_NO} instead.
Return the autowire mode for test properties set by Dependency Injection.
Set whether or not dependency checking should be performed for test properties set by Dependency Injection. <p>The default is {@code true}, meaning that tests cannot be run unless all properties are populated.
Return whether or not dependency checking should be performed for test properties set by Dependency Injection.
Create a Spring {@link ConfigurableApplicationContext} for use by this test. <p>The default implementation creates a standard {@link GenericApplicationContext} instance, calls the {@link #prepareApplicationContext} prepareApplicationContext} method and the {@link #customizeBeanFactory customizeBeanFactory} method to allow for customizing the context and its DefaultListableBeanFactory, populates the context from the specified config {@code locations} through the configured {@link #createBeanDefinitionReader(GenericApplicationContext) BeanDefinitionReader}, and finally {@link ConfigurableApplicationContext#refresh() refreshes} the context. e.g. full classpath locations or any kind of URL)
Subclasses can override this method to return the locations of their config files. <p>A plain path will be treated as class path location, e.g.: "org/springframework/whatever/foo.xml". Note however that you may prefix path locations with standard Spring resource prefixes. Therefore, a config location path prefixed with "classpath:" with behave the same as a plain path, but a config location such as "file:/some/path/path/location/appContext.xml" will be treated as a filesystem location. <p>The default implementation builds config locations for the config paths specified through {@link #getConfigPaths()}.
Return the ApplicationContext that this base class manages; may be {@code null}.
Explicitly add an ApplicationContext instance under a given key. <p>This is not meant to be used by subclasses. It is rather exposed for special test suite environments.
Obtain an ApplicationContext for the given key, potentially cached. or {@code null} if the provided {@code key} is <em>empty</em>
Setter: DataSource is provided by Dependency Injection.
Specify the transaction manager to use. No transaction management will be available if this is not set. Populated through dependency injection by the superclass. <p> This mode works only if dependency checking is turned off in the {@link AbstractDependencyInjectionSpringContextTests} superclass.
Subclasses can set this value in their constructor to change the default, which is always to roll the transaction back.
Get the <em>default rollback</em> flag for this test.
Determine whether or not to roll back transactions for the current test. <p>The default implementation simply delegates to {@link #isDefaultRollback()}. Subclasses can override as necessary.
Call this method in an overridden {@link #runBare()} method to prevent transactional execution.
Call this method in an overridden {@link #runBare()} method to override the transaction attributes that will be used, so that {@link #setUp()} and {@link #tearDown()} behavior is modified.
Get the current test method.
Cause the transaction to commit for this test method, even if the test method is configured to {@link #isRollback() rollback}. as no transaction manager was provided
Immediately force a commit or rollback of the transaction, according to the {@code complete} and {@link #isRollback() rollback} flags. <p>Can be used to explicitly let the transaction end early, for example to check whether lazy associations of persistent objects work outside of a transaction (that is, have been initialized properly).
Start a new transaction. Only call this method if {@link #endTransaction()} has been called. {@link #setComplete()} can be used again in the new transaction. The fate of the new transaction, by default, will be the usual rollback.
Convenient method to delete all rows from these tables. Calling this method will make avoidance of rollback by calling {@code setComplete()} impossible.
Count the rows in the given table
Execute the given SQL script. <p>Use with caution outside of a transaction! <p>The script will normally be loaded by classpath. <p><b>Do not use this method to execute DDL if you expect rollback.</b> exception in the event of an error
Conveniently obtain the current Hibernate Session.
Open a Session for the SessionFactory that this filter uses. <p>The default implementation delegates to the {@link SessionFactory#openSession} method and sets the {@link Session}'s flush mode to "MANUAL".
Create a new ConfigurableJtaPlatform instance with the given JTA TransactionManager and optionally a given UserTransaction.
Obtain a proxy that implements the current Hibernate version's JtaPlatform interface in the right package location, delegating all invocations to the same-named methods on this ConfigurableJtaPlatform class itself.
Convert the given HibernateException to an appropriate exception from the {@code org.springframework.dao} hierarchy.
Set whether to check that the Hibernate Session is not in read-only mode in case of write operations (save/update/delete). <p>Default is "true", for fail-fast behavior when attempting write operations within a read-only transaction. Turn this off to allow save/update/delete on a Session with flush mode MANUAL.
Execute the action specified by the given action object within a Session. Hibernate Session to callback code
Set whether to allow result access after completion, typically via Hibernate's ScrollableResults mechanism. <p>Default is "false". Turning this flag on enforces over-commit holdability on the underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on) and skips the disconnect-on-completion step.
Set whether to operate on a Hibernate-managed Session instead of a Spring-managed Session, that is, whether to obtain the Session through Hibernate's {@link org.hibernate.SessionFactory#getCurrentSession()} instead of {@link org.hibernate.SessionFactory#openSession()} (with a Spring {@link org.springframework.transaction.support.TransactionSynchronizationManager} check preceding it). <p>Default is "false", i.e. using a Spring-managed Session: taking the current thread-bound Session if available (e.g. in an Open-Session-in-View scenario), creating a new Session for the current transaction otherwise. <p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session. Note that this requires {@link org.hibernate.SessionFactory#getCurrentSession()} to always return a proper Session when called for a Spring-managed transaction; transaction begin will fail if the {@code getCurrentSession()} call fails. <p>This mode will typically be used in combination with a custom Hibernate {@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores Sessions in a place other than Spring's TransactionSynchronizationManager. It may also be used in combination with Spring's Open-Session-in-View support (using Spring's default {@link SpringSessionContext}), in which case it subtly differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i> receive a {@code clear()} call (on rollback) or a {@code disconnect()} call (on transaction completion) in such a scenario; this is rather left up to a custom CurrentSessionContext implementation (if desired).
Set a Hibernate entity interceptor that allows to inspect and change property values before writing to and reading from the database. <p>Such an interceptor can either be set at the SessionFactory level, i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on HibernateTransactionManager.
Disconnect a pre-existing Hibernate Session on transaction completion, returning its database connection but preserving its entity state. <p>The default implementation simply calls {@link Session#disconnect()}. Subclasses may override this with a no-op or with fine-tuned disconnection logic.
Return whether the given Hibernate Session will always hold the same JDBC Connection. This is used to check whether the transaction manager can safely prepare and clean up the JDBC Connection used for a transaction. <p>The default implementation checks the Session's connection release mode to be "on_close".
Set the DataSource to be used by the SessionFactory. If set, this will override corresponding settings in Hibernate properties. <p>If this is set, the Hibernate settings should not define a connection provider to avoid meaningless double configuration.
Set a Hibernate entity interceptor that allows to inspect and change property values before writing to and reading from the database.
Set the Spring {@link org.springframework.transaction.jta.JtaTransactionManager} or the JTA {@link javax.transaction.TransactionManager} to be used with Hibernate, if any. Implicitly sets up {@code JtaPlatform} and {@code CMTTransactionStrategy}.
Set a Hibernate 4.1/4.2/4.3 {@code MultiTenantConnectionProvider} to be passed on to the SessionFactory: as an instance, a Class, or a String class name. <p>Note that the package location of the {@code MultiTenantConnectionProvider} interface changed between Hibernate 4.2 and 4.3. This method accepts both variants.
Set a Hibernate 4.1/4.2/4.3 {@code CurrentTenantIdentifierResolver} to be passed on to the SessionFactory: as an instance, a Class, or a String class name.
Specify custom type filters for Spring-based scanning for entity classes. <p>Default is to search all specified packages for classes annotated with {@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable} or {@code @javax.persistence.MappedSuperclass}.
Set Hibernate properties, such as "hibernate.dialect". <p>Note: Do not specify a transaction provider here when using Spring-driven transactions. It is also advisable to omit connection provider settings and use a Spring-set DataSource instead.
Specify annotated entity classes to register with this Hibernate SessionFactory.
Specify packages to search for autodetection of your entity classes in the classpath. This is analogous to Spring's component-scan feature ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).
Subclasses can override this method to perform custom initialization of the SessionFactory instance, creating it via the given Configuration object that got prepared by this LocalSessionFactoryBean. <p>The default implementation invokes LocalSessionFactoryBuilder's buildSessionFactory. A custom implementation could prepare the instance in a specific way (e.g. applying a custom ServiceRegistry) or use a custom SessionFactoryImpl subclass.
Return the Hibernate Configuration object used to build the SessionFactory. Allows for access to configuration metadata stored there (rarely needed).
Create a new LocalSessionFactoryBuilder for the given DataSource. (may be {@code null})
Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager} to be used with Hibernate, if any. Allows for using a Spring-managed transaction manager for Hibernate 4's session and cache synchronization, with the "hibernate.transaction.jta.platform" automatically set to it. Also sets "hibernate.transaction.factory_class" to {@link CMTTransactionFactory}, instructing Hibernate to interact with externally managed transactions. <p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA {@link TransactionManager} reference to be usable here, except for the WebSphere case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly. <p>Note: If this is set, the Hibernate settings should not contain a JTA platform setting to avoid meaningless double configuration.
Add the given annotated classes in a batch.
Add the given annotated packages in a batch.
Perform Spring-based scanning for entity classes, registering them as annotated classes with this {@code Configuration}.
Execute the action specified by the given action object within a native {@link Session}. <p>This execute variant overrides the template-wide {@link #isExposeNativeSession() "exposeNativeSession"} setting.
Set whether to operate on a Hibernate-managed Session instead of a Spring-managed Session, that is, whether to obtain the Session through Hibernate's {@link SessionFactory#getCurrentSession()} instead of {@link SessionFactory#openSession()} (with a Spring {@link TransactionSynchronizationManager} check preceding it). <p>Default is "false", i.e. using a Spring-managed Session: taking the current thread-bound Session if available (e.g. in an Open-Session-in-View scenario), creating a new Session for the current transaction otherwise. <p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session. Note that this requires {@link SessionFactory#getCurrentSession()} to always return a proper Session when called for a Spring-managed transaction; transaction begin will fail if the {@code getCurrentSession()} call fails. <p>This mode will typically be used in combination with a custom Hibernate {@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores Sessions in a place other than Spring's TransactionSynchronizationManager. It may also be used in combination with Spring's Open-Session-in-View support (using Spring's default {@link SpringSessionContext}), in which case it subtly differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i> receive a {@code clear()} call (on rollback) or a {@code disconnect()} call (on transaction completion) in such a scenario; this is rather left up to a custom CurrentSessionContext implementation (if desired).
Determine whether the given Session is (still) physically connected to the database, that is, holds an active JDBC Connection internally.
Set a Hibernate 5.0 ImplicitNamingStrategy for the SessionFactory.
Set a Hibernate 5.0 PhysicalNamingStrategy for the SessionFactory.
Set the Spring {@link org.springframework.transaction.jta.JtaTransactionManager} or the JTA {@link javax.transaction.TransactionManager} to be used with Hibernate, if any. Implicitly sets up {@code JtaPlatform}.
Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory.
Set a {@link CurrentTenantIdentifierResolver} to be passed on to the SessionFactory.
Specify an asynchronous executor for background bootstrapping, e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}. <p>{@code SessionFactory} initialization will then switch into background bootstrap mode, with a {@code SessionFactory} proxy immediately returned for injection purposes instead of waiting for Hibernate's bootstrapping to complete. However, note that the first actual call to a {@code SessionFactory} method will then block until Hibernate's bootstrapping completed, if not ready by then. For maximum benefit, make sure to avoid early {@code SessionFactory} calls in init methods of related beans, even for metadata introspection purposes.
Specify a Hibernate {@link MetadataSources} service to use (e.g. reusing an existing one), potentially populated with a custom Hibernate bootstrap {@link org.hibernate.service.ServiceRegistry} as well.
Determine the Hibernate {@link MetadataSources} to use. <p>Can also be externally called to initialize and pre-populate a {@link MetadataSources} instance which is then going to be used for {@link SessionFactory} building.
Determine the Spring {@link ResourceLoader} to use for Hibernate metadata.
Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager} to be used with Hibernate, if any. Allows for using a Spring-managed transaction manager for Hibernate 5's session and cache synchronization, with the "hibernate.transaction.jta.platform" automatically set to it. <p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA {@link TransactionManager} reference to be usable here, except for the WebSphere case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly. <p>Note: If this is set, the Hibernate settings should not contain a JTA platform setting to avoid meaningless double configuration.
Build the Hibernate {@code SessionFactory} through background bootstrapping, using the given executor for a parallel initialization phase (e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}). <p>{@code SessionFactory} initialization will then switch into background bootstrap mode, with a {@code SessionFactory} proxy immediately returned for injection purposes instead of waiting for Hibernate's bootstrapping to complete. However, note that the first actual call to a {@code SessionFactory} method will then block until Hibernate's bootstrapping completed, if not ready by then. For maximum benefit, make sure to avoid early {@code SessionFactory} calls in init methods of related beans, even for metadata introspection purposes.
Construct a {@code CastorMappingException} with the specified detail message and nested exception.
Set the encoding to be used for stream access.
Set the locations of the Castor XML mapping files.
Set the locations of the Castor XML mapping files.
Set the Castor target class.
Set the Castor target classes.
Set the name of a package with the Castor descriptor classes.
Set the names of packages with the Castor descriptor classes.
Set whether this marshaller should validate in- and outgoing documents. <p>Default is {@code false}.
Sets whether this marshaller should output namespaces. <p>The default is {@code false}, i.e. namespaces are written.
Set whether this marshaller should output the {@code xsi:type} attribute. <p>The default is {@code false}, i.e. the {@code xsi:type} is written.
Set whether this marshaller should output the xml declaration. <p>The default is {@code true}, the XML declaration will be written.
Set whether this marshaller should output for given type the {@code xsi:type} attribute. <p>The default is {@code true}, the {@code xsi:type} attribute will be written.
Set the name of the root element.
Set the value of {@code xsi:noNamespaceSchemaLocation} attribute. When set, the {@code xsi:noNamespaceSchemaLocation} attribute will be written for the root element.
Set the value of {@code xsi:schemaLocation} attribute. When set, the {@code xsi:schemaLocation} attribute will be written for the root element.
Sets whether this marshaller should output the {@code xsi:type} attribute for the root element. This can be useful when the type of the element can not be simply determined from the element name. <p>The default is {@code false}: The {@code xsi:type} attribute for the root element won't be written.
Set whether the Castor {@link Unmarshaller} should preserve "ignorable" whitespace. <p>Default is {@code false}.
Set whether the Castor {@link Unmarshaller} should ignore attributes that do not match a specific field. <p>Default is {@code true}: Extra attributes are ignored.
Set whether the Castor {@link Unmarshaller} should ignore elements that do not match a specific field. <p>Default is {@code false}: Extra elements are flagged as an error.
Set the expected root object for the unmarshaller, into which the source will be unmarshalled.
Set whether this unmarshaller should re-use objects. This will be only used when unmarshalling to an existing object. <p>The default is {@code false}, which means that the objects won't be re-used.
Sets whether this unmarshaller should clear collections upon the first use. <p>The default is {@code false} which means that marshaller won't clear collections.
Set Castor-specific properties for marshalling and unmarshalling. Each entry key is considered the property name and each value the property value.
Set the map containing document type definition for the marshaller. Each entry has system id as key and public id as value.
Sets the processing instructions that will be used by during marshalling. Keys are the processing targets and values contain the processing data.
Set the namespace mappings. Property names are interpreted as namespace prefixes; values are namespace URIs.
Set the namespace to package mappings. Property names are represents the namespaces URI, values are packages.
Set the {@link EntityResolver} to be used during unmarshalling. This resolver will used to resolve system and public ids.
Set the {@link XMLClassDescriptorResolver} to be used during unmarshalling. This resolver will used to resolve class descriptors.
Set the Castor {@link IDResolver} to be used during unmarshalling.
Set the Castor {@link ObjectFactory} to be used during unmarshalling.
Create the Castor {@code XMLContext}. Subclasses can override this to create a custom context. <p>The default implementation loads mapping files if defined, or the target class or packages if defined.
Template method that allows for customizing of the given Castor {@link Marshaller}.
Template method that allows for customizing of the given Castor {@link Unmarshaller}.
Convert the given {@code XMLException} to an appropriate exception from the {@code org.springframework.oxm} hierarchy. <p>A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since Castor itself does not make this distinction in its exception hierarchy. or unmarshalling ({@code false})
Scan the packages for classes marked with JAXB2 annotations.
Set multiple JAXB context paths. The given array of context paths gets converted to a colon-delimited string, as supported by JAXB.
Set a JAXB context path. <p>Setting either this property, {@link #setClassesToBeBound "classesToBeBound"} or {@link #setPackagesToScan "packagesToScan"} is required.
Return the JAXB context path.
Set the list of Java classes to be recognized by a newly created JAXBContext. <p>Setting either this property, {@link #setContextPath "contextPath"} or {@link #setPackagesToScan "packagesToScan"} is required.
Return the list of Java classes to be recognized by a newly created JAXBContext.
Set the packages to search for classes with JAXB2 annotations in the classpath. This is using a Spring-bases search and therefore analogous to Spring's component-scan feature ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}). <p>Setting either this property, {@link #setContextPath "contextPath"} or {@link #setClassesToBeBound "classesToBeBound"} is required.
Return the packages to search for JAXB2 annotations.
Set the {@code JAXBContext} properties. These implementation-specific properties will be set on the underlying {@code JAXBContext}.
Set the JAXB {@code Marshaller} properties. These properties will be set on the underlying JAXB {@code Marshaller}, and allow for features such as indentation.
Set the JAXB {@code Unmarshaller} properties. These properties will be set on the underlying JAXB {@code Unmarshaller}.
Specify the {@code Marshaller.Listener} to be registered with the JAXB {@code Marshaller}.
Set the {@code Unmarshaller.Listener} to be registered with the JAXB {@code Unmarshaller}.
Set the JAXB validation event handler. This event handler will be called by JAXB if any validation errors are encountered during calls to any of the marshal APIs.
Specify the {@code XmlAdapter}s to be registered with the JAXB {@code Marshaller} and {@code Unmarshaller}
Set the schema resource to use for validation.
Set the schema resources to use for validation.
Set the resource resolver, as used to load the schema resources.
Set whether to lazily initialize the {@link JAXBContext} for this marshaller. Default is {@code false} to initialize on startup; can be switched to {@code true}. <p>Early initialization just applies if {@link #afterPropertiesSet()} is called.
Specify whether MTOM support should be enabled or not. Default is {@code false}: marshalling using XOP/MTOM not being enabled.
Specify whether the {@link #supports(Class)} returns {@code true} for the {@link JAXBElement} class. <p>Default is {@code false}, meaning that {@code supports(Class)} always returns {@code false} for {@code JAXBElement} classes (though {@link #supports(Type)} can return {@code true}, since it can obtain the type parameters of {@code JAXBElement}). <p>This property is typically enabled in combination with usage of classes like {@link org.springframework.web.servlet.view.xml.MarshallingView MarshallingView}, since the {@code ModelAndView} does not offer type parameter information at runtime.
Specify whether the {@link #supports(Class)} should check for {@link XmlRootElement @XmlRootElement} annotations. <p>Default is {@code true}, meaning that {@code supports(Class)} will check for this annotation. However, some JAXB implementations (i.e. EclipseLink MOXy) allow for defining the bindings in an external definition file, thus keeping the classes annotations free. Setting this property to {@code false} supports these JAXB implementations.
Specify a JAXB mapped class for partial unmarshalling.
Indicates whether DTD parsing should be supported. <p>Default is {@code false} meaning that DTD is disabled.
Whether DTD parsing is supported.
Indicates whether external XML entities are processed when unmarshalling. <p>Default is {@code false}, meaning that external entities are not resolved. Note that processing of external entities will only be enabled/disabled when the {@code Source} passed to {@link #unmarshal(Source)} is a {@link SAXSource} or {@link StreamSource}. It has no effect for {@link DOMSource} or {@link StAXSource} instances. <p><strong>Note:</strong> setting this option to {@code true} also automatically sets {@link #setSupportDtd} to {@code true}.
Return the JAXBContext used by this marshaller, lazily building it if necessary.
Checks whether the given type is a primitive wrapper type. Compare section 8.5.1 of the JAXB2 spec.
Checks whether the given type is a standard class. Compare section 8.5.2 of the JAXB2 spec.
Return a newly created JAXB marshaller. JAXB marshallers are not necessarily thread safe.
Template method that can be overridden by concrete JAXB marshallers for custom initialization behavior. Gets called after creation of JAXB {@code Marshaller}, and after the respective properties have been set. <p>The default implementation sets the {@link #setMarshallerProperties(Map) defined properties}, the {@link #setValidationEventHandler(ValidationEventHandler) validation event handler}, the {@link #setSchemas(Resource[]) schemas}, {@link #setMarshallerListener(javax.xml.bind.Marshaller.Listener) listener}, and {@link #setAdapters(XmlAdapter[]) adapters}.
Return a newly created JAXB unmarshaller. Note: JAXB unmarshallers are not necessarily thread-safe.
Template method that can be overridden by concrete JAXB marshallers for custom initialization behavior. Gets called after creation of JAXB {@code Marshaller}, and after the respective properties have been set. <p>The default implementation sets the {@link #setUnmarshallerProperties(Map) defined properties}, the {@link #setValidationEventHandler(ValidationEventHandler) validation event handler}, the {@link #setSchemas(Resource[]) schemas}, {@link #setUnmarshallerListener(javax.xml.bind.Unmarshaller.Listener) listener}, and {@link #setAdapters(XmlAdapter[]) adapters}.
Convert the given {@code JAXBException} to an appropriate exception from the {@code org.springframework.oxm} hierarchy.
Set the target class for this instance. Setting either this property or the {@link #setTargetPackage(String) targetPackage} property is required. <p>If this property is set, {@link #setTargetPackage(String) targetPackage} is ignored.
Set the target package for this instance. Setting either this property or the {@link #setTargetClass(Class) targetClass} property is required. <p>If {@link #setTargetClass(Class) targetClass} is set, this property is ignored.
Set the optional binding name for this instance.
Set the number of nesting indent spaces. Default is {@code -1}, i.e. no indentation.
Set the document encoding using for marshalling. Default is UTF-8.
Set the document standalone flag for marshalling. By default, this flag is not present.
Set the root element name for the DTD declaration written when marshalling. By default, this is {@code null} (i.e. no DTD declaration is written). <p>If set to a value, the system ID or public ID also need to be set.
Set the system id for the DTD declaration written when marshalling. By default, this is {@code null}. Only used when the root element also has been set. <p>Set either this property or {@code docTypePublicId}, not both.
Set the public id for the DTD declaration written when marshalling. By default, this is {@code null}. Only used when the root element also has been set. <p>Set either this property or {@code docTypeSystemId}, not both.
Set the internal subset Id for the DTD declaration written when marshalling. By default, this is {@code null}. Only used when the root element also has been set.
Create a new {@code IMarshallingContext}, configured with the correct indentation.
Create a new {@code IUnmarshallingContext}.
Convert the given {@code JiBXException} to an appropriate exception from the {@code org.springframework.oxm} hierarchy. <p>A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since JiBX itself does not make this distinction in its exception hierarchy. or unmarshalling ({@code false})
Build a new {@link Document} from this marshaller's {@link DocumentBuilderFactory}, as a placeholder for a DOM node.
Create a {@code DocumentBuilder} that this marshaller will use for creating DOM documents when passed an empty {@code DOMSource}. <p>The resulting {@code DocumentBuilderFactory} is cached, so this method will only be called once.
Create a {@code DocumentBuilder} that this marshaller will use for creating DOM documents when passed an empty {@code DOMSource}. <p>Can be overridden in subclasses, adding further initialization of the builder.
Create an {@code XMLReader} that this marshaller will when passed an empty {@code SAXSource}.
Determine the default encoding to use for marshalling or unmarshalling from a byte stream, or {@code null} if none. <p>The default implementation returns {@code null}.
Template method for handling {@code DOMResult}s. <p>This implementation delegates to {@code marshalDomNode}.
Template method for handling {@code StaxResult}s. <p>This implementation delegates to {@code marshalXMLSteamWriter} or {@code marshalXMLEventConsumer}, depending on what is contained in the {@code StaxResult}.
Template method for handling {@code SAXResult}s. <p>This implementation delegates to {@code marshalSaxHandlers}.
Template method for handling {@code StreamResult}s. <p>This implementation delegates to {@code marshalOutputStream} or {@code marshalWriter}, depending on what is contained in the {@code StreamResult} contain an {@code OutputStream} nor a {@code Writer}
Template method for handling {@code DOMSource}s. <p>This implementation delegates to {@code unmarshalDomNode}. If the given source is empty, an empty source {@code Document} will be created as a placeholder.
Template method for handling {@code StaxSource}s. <p>This implementation delegates to {@code unmarshalXmlStreamReader} or {@code unmarshalXmlEventReader}.
Template method for handling {@code SAXSource}s. <p>This implementation delegates to {@code unmarshalSaxReader}.
Template method for handling {@code StreamSource}s. <p>This implementation delegates to {@code unmarshalInputStream} or {@code unmarshalReader}.
Abstract template method for marshalling the given object graph to a DOM {@code Node}. <p>In practice, node is be a {@code Document} node, a {@code DocumentFragment} node, or a {@code Element} node. In other words, a node that accepts children.
Create a new {@code MarshallingSource} with the given marshaller and content.
Return the {@code Marshaller} used by this {@code MarshallingSource}.
Return the object to be marshalled.
Create a SAX {@code InputSource} from the given resource. <p>Sets the system identifier to the resource's {@code URL}, if available.
Retrieve the URL from the given resource as System ID. <p>Returns {@code null} if it cannot be opened.
Set the {@code XmlOptions}.
Return the {@code XmlOptions}.
Set whether this marshaller should validate in- and outgoing documents. Default is {@code false}.
Return whether this marshaller should validate in- and outgoing documents.
Validate the given {@code XmlObject}.
Convert the given XMLBeans exception to an appropriate exception from the {@code org.springframework.oxm} hierarchy. <p>A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since XMLBeans itself does not make this distinction in its exception hierarchy. or unmarshalling ({@code false})
Set options on the underlying {@code XmlOptions} object. <p>The keys of the supplied map should be one of the String constants defined in {@code XmlOptions}, the values vary per option.
Set a custom XStream {@link ReflectionProvider} to use.
Set a XStream {@link HierarchicalStreamDriver} to be used for readers and writers. <p>As of Spring 4.0, this stream driver will also be passed to the {@link XStream} constructor and therefore used by streaming-related native API methods themselves.
Set a custom XStream {@link Mapper} to use.
Set one or more custom XStream {@link MapperWrapper} classes. Each of those classes needs to have a constructor with a single argument of type {@link Mapper} or {@link MapperWrapper}.
Set a custom XStream {@link ConverterLookup} to use. Also used as {@link ConverterRegistry} if the given reference implements it as well.
Set a custom XStream {@link ConverterRegistry} to use.
Set the {@code Converters} or {@code SingleValueConverters} to be registered with the {@code XStream} instance.
Set a custom XStream {@link MarshallingStrategy} to use.
Set the XStream mode to use.
Set the alias/type map, consisting of string aliases mapped to classes. <p>Keys are aliases; values are either {@code Class} instances, or String class names.
Set the <em>aliases by type</em> map, consisting of string aliases mapped to classes. <p>Any class that is assignable to this type will be aliased to the same name. Keys are aliases; values are either {@code Class} instances, or String class names.
Set the field alias/type map, consisting of field names.
Set types to use XML attributes for.
Set the types to use XML attributes for. The given map can contain either {@code <String, Class>} pairs, in which case {@link XStream#useAttributeFor(String, Class)} is called. Alternatively, the map can contain {@code <Class, String>} or {@code <Class, List<String>>} pairs, which results in {@link XStream#useAttributeFor(Class, String)} calls.
Specify implicit collection fields, as a Map consisting of {@code Class} instances mapped to comma separated collection field names.
Specify omitted fields, as a Map consisting of {@code Class} instances mapped to comma separated field names.
Set annotated classes for which aliases will be read from class-level annotation metadata.
Activate XStream's autodetection mode. <p><b>Note</b>: Autodetection implies that the XStream instance is being configured while it is processing the XML streams, and thus introduces a potential concurrency problem.
Set a custom XStream {@link NameCoder} to use. The default is an {@link XmlFriendlyNameCoder}.
Set the classes supported by this marshaller. <p>If this property is empty (the default), all classes are supported.
Build the native XStream delegate to be used by this marshaller, delegating to {@link #constructXStream()}, {@link #configureXStream} and {@link #customizeXStream}.
Construct an XStream instance, either using one of the standard constructors or creating a custom subclass.
Configure the XStream instance with this marshaller's bean properties.
Return the native XStream delegate used by this marshaller. <p><b>NOTE: This method has been marked as final as of Spring 4.0.</b> It can be used to access the fully configured XStream for marshalling but not configuration purposes anymore.
Marshals the given graph to the given XStream HierarchicalStreamWriter. Converts exceptions using {@link #convertXStreamException}.
Unmarshals the given graph to the given XStream HierarchicalStreamWriter. Converts exceptions using {@link #convertXStreamException}.
Convert the given XStream exception to an appropriate exception from the {@code org.springframework.oxm} hierarchy. <p>A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since XStream itself does not make this distinction in its exception hierarchy. or unmarshalling ({@code false})
Construct a {@code MarshallingException} with the specified detail message.
Construct a {@code MarshallingException} with the specified detail message and nested exception.
Construct a {@code MarshallingFailureException} with the specified detail message.
Construct a {@code MarshallingFailureException} with the specified detail message and nested exception.
Construct an {@code UncategorizedMappingException} with the specified detail message and nested exception.
Construct a {@code MarshallingFailureException} with the specified detail message.
Construct a {@code MarshallingFailureException} with the specified detail message and nested exception.
Construct a {@code ValidationFailureException} with the specified detail message.
Construct a {@code ValidationFailureException} with the specified detail message and nested exception.
Construct an {@code XmlMappingException} with the specified detail message.
Construct an {@code XmlMappingException} with the specified detail message and nested exception.
Assert the values of xpath expression evaluation is exactly the same as expected value. <p>The xpath may contain the xml namespace prefixes, since namespaces from flight example are being registered.
Create an instance of {@link CastorObject} for testing.
following methods are used to test support for primitives
Create a new {@code MockPropertySource} with the given name and backed by the given {@link Properties} object.
Create an instance with the given HttpMethod and URI.
The default implementation returns the configured {@link #setResponse(ClientHttpResponse) response}. <p>Override this method to execute the request and provide a response, potentially different than the configured response.
Constructor with response body as a byte array.
Constructor with response body as InputStream.
Return body content as a byte array.
Return the body content interpreted as a UTF-8 string.
Return the body content as a string.
Construct a new JndiTemplate that will always return the given object, but honour only requests for the given name.
Add the given object to the list of JNDI objects that this template will expose.
Create a new MockActionRequest with a default {@link MockPortalContext} and a default {@link MockPortletContext}.
Create a new MockActionRequest with a default {@link MockPortalContext}.
Create a new MockActionRequest.
Create a new MockActionResponse with a default {@link MockPortalContext}.
Create a new MockActionResponse. PortletModes and WindowStates
Create a new MockClientDataRequest with a default {@link MockPortalContext} and a default {@link MockPortletContext}.
Create a new MockClientDataRequest with a default {@link MockPortalContext}.
Create a new MockClientDataRequest.
Create a new MockEvent with the given name.
Create a new MockEvent with the given name and value.
Create a new MockEventRequest with a default {@link MockPortalContext} and a default {@link MockPortletContext}.
Create a new MockEventRequest with a default {@link MockPortalContext}.
Create a new MockEventRequest.
Create a new MockMimeResponse with a default {@link MockPortalContext}.
Create a new MockMimeResponse. PortletModes and WindowStates
Create a new MockMimeResponse. PortletModes and WindowStates is being generated for
--------------------------------------------------------------------- Methods for MockPortletRequestDispatcher ---------------------------------------------------------------------
Add a file to this request. The parameter name from the multipart form is taken from the {@link org.springframework.web.multipart.MultipartFile#getName()}.
Create a new MockPortalContext with default PortletModes (VIEW, EDIT, HELP) and default WindowStates (NORMAL, MAXIMIZED, MINIMIZED).
Create a new MockPortalContext with the given PortletModes and WindowStates.
Create a new MockPortletConfig with a default {@link MockPortletContext}.
Create a new MockPortletConfig.
Create a new MockPortletContext with no base path and a DefaultResourceLoader (i.e. the classpath root as WAR root).
Create a new MockPortletContext using a DefaultResourceLoader.
Create a new MockPortletContext, using the specified ResourceLoader and no base path.
Create a new MockPortletContext.
Build a full resource location for the given path, prepending the resource base path of this MockPortletContext.
Create a new MockPortletRequest with a default {@link MockPortalContext} and a default {@link MockPortletContext}.
Create a new MockPortletRequest with a default {@link MockPortalContext}.
Create a new MockPortletRequest.
Return the Portlet 2.0 lifecycle id for the current phase.
Return whether this request is still active (that is, not completed yet).
Mark this request as completed.
Check whether this request is still active (that is, not completed yet), throwing an IllegalStateException if not active anymore.
Set a single value for the specified property. <p> If there are already one or more values registered for the given property key, they will be replaced.
Add a single value for the specified property. <p> If there are already one or more values registered for the given property key, the given value will be added to the end of the list.
Create a new MockPortletRequestDispatcher for the given URL.
Create a new MockPortletResponse with a default {@link MockPortalContext}.
Create a new MockPortletResponse. PortletModes and WindowStates
Return the PortalContext that this MockPortletResponse runs in, defining the supported PortletModes and WindowStates.
Create a new MockPortletSession with a default {@link MockPortletContext}.
Create a new MockPortletSession.
Clear all of this session's attributes.
Create a new MockPortletURL for the given URL type. PortletModes and WindowStates
Create a new MockRenderRequest with a default {@link MockPortalContext} and a default {@link MockPortletContext}.
Create a new MockRenderRequest with a default {@link MockPortalContext}.
Create a new MockRenderRequest.
Create a new MockRenderResponse with a default {@link MockPortalContext}.
Create a new MockRenderResponse. PortletModes and WindowStates
Create a new MockRenderResponse. PortletModes and WindowStates is generated for
Create a new MockResourceRequest with a default {@link MockPortalContext} and a default {@link MockPortletContext}.
Create a new MockResourceRequest with a default {@link MockPortalContext}.
Create a new MockResourceRequest.
Create a new MockActionResponse with a default {@link MockPortalContext}.
Create a new MockActionResponse. PortletModes and WindowStates
Create a new PortletContext wrapping the given ServletContext.
Return the underlying ServletContext that this PortletContext wraps.
Create a DelegatingServletInputStream for the given source stream.
Return the underlying source stream (never {@code null}).
Create a DelegatingServletOutputStream for the given target stream.
Return the underlying target stream (never {@code null}).
Find a HeaderValueHolder by name, ignoring casing. or {@code null} if none found
Create a MockBodyContent for the given response.
Create a new MockExpressionEvaluator for the given PageContext.
Register a single do-nothing {@link Filter} implementation. The first invocation saves the request and response. Subsequent invocations raise an {@link IllegalStateException} unless {@link #reset()} is called.
Create a FilterChain with a Servlet.
Create a {@code FilterChain} with Filter's and a Servlet.
Return the request that {@link #doFilter} has been called with.
Return the response that {@link #doFilter} has been called with.
Reset the {@link MockFilterChain} allowing it to be invoked again.
Create a new MockFilterConfig with a default {@link MockServletContext}.
Create a new MockFilterConfig.
Create a new {@code MockHttpServletRequest} with a default {@link MockServletContext}.
Create a new {@code MockHttpServletRequest} with the supplied {@link ServletContext}. (may be {@code null} to use a default {@link MockServletContext})
Create a new {@code MockHttpServletRequest} with the supplied {@link ServletContext}, {@code method}, and {@code requestURI}. <p>The preferred locale will be set to {@link Locale#ENGLISH}. {@code null} to use a default {@link MockServletContext})
Mark this request as completed, keeping its state.
Invalidate this request, clearing its state.
Set a single value for the specified HTTP parameter. <p>If there are already one or more values registered for the given parameter name, they will be replaced.
Set an array of values for the specified HTTP parameter. <p>If there are already one or more values registered for the given parameter name, they will be replaced.
Add a single value for the specified HTTP parameter. <p>If there are already one or more values registered for the given parameter name, the given value will be added to the end of the list.
Add an array of values for the specified HTTP parameter. <p>If there are already one or more values registered for the given parameter name, the given values will be added to the end of the list.
Remove already registered values for the specified HTTP parameter, if any.
Removes all existing parameters.
Clear all of this request's attributes.
Add a new preferred locale, before any existing locales.
Set the list of preferred locales, in descending order, effectively replacing any existing locales.
Set the boolean {@code secure} flag indicating whether the mock request was made using a secure channel, such as HTTPS.
--------------------------------------------------------------------- HttpServletRequest interface ---------------------------------------------------------------------
Add a header entry for the given name. <p>While this method can take any {@code Object} as a parameter, it is recommended to use the following types: <ul> <li>String or any Object to be converted using {@code toString()}; see {@link #getHeader}.</li> <li>String, Number, or Date for date headers; see {@link #getDateHeader}.</li> <li>String or Number for integer headers; see {@link #getIntHeader}.</li> <li>{@code String[]} or {@code Collection<String>} for multiple values; see {@link #getHeaders}.</li> </ul>
The implementation of this (Servlet 3.1+) method calls {@link MockHttpSession#changeSessionId()} if the session is a mock session. Otherwise it simply returns the current session id.
Set whether {@link #getOutputStream()} access is allowed. <p>Default is {@code true}.
Return whether {@link #getOutputStream()} access is allowed.
Set whether {@link #getWriter()} access is allowed. <p>Default is {@code true}.
Return whether {@link #getOutputStream()} access is allowed.
Return whether the character encoding has been set. <p>If {@code false}, {@link #getCharacterEncoding()} will return a default encoding value.
Return the primary value for the given header, if any. <p>Will return the first value in case of multiple values.
Return all values for the given header as a List of value objects.
--------------------------------------------------------------------- Methods for MockRequestDispatcher ---------------------------------------------------------------------
Create a new MockHttpSession with a default {@link MockServletContext}.
Create a new MockHttpSession.
As of Servlet 3.1 the id of a session can be changed.
Convenience method for asserting that this session has not been {@linkplain #invalidate() invalidated}.
Serialize the attributes of this session into an object that can be turned into a byte array with standard Java serialization.
Create a MockJspWriter for the given response, using the response's default Writer.
Create a MockJspWriter for the given plain Writer.
Create a MockJspWriter for the given response.
Lazily initialize the target Writer.
Create a new MockMultipartFile with the given content.
Create a new {@code MockMultipartHttpServletRequest} with a default {@link MockServletContext}.
Create a new {@code MockMultipartHttpServletRequest} with the supplied {@link ServletContext}. (may be {@code null} to use a default {@link MockServletContext})
Add a file to this request. The parameter name from the multipart form is taken from the {@link MultipartFile#getName()}.
Create new MockPageContext with a default {@link MockServletContext}, {@link MockHttpServletRequest}, {@link MockHttpServletResponse}, {@link MockServletConfig}.
Create new MockPageContext with a default {@link MockHttpServletRequest}, {@link MockHttpServletResponse}, {@link MockServletConfig}. (only necessary when actually accessing the ServletContext)
Create new MockPageContext with a MockHttpServletResponse, MockServletConfig. (only necessary when actually accessing the request)
Create new MockPageContext with a MockServletConfig. (only necessary when actually writing to the response)
Create new MockServletConfig.
Create a new MockRequestDispatcher for the given resource. particular path or given by a particular name
Obtain the underlying {@link MockHttpServletResponse}, unwrapping {@link HttpServletResponseWrapper} decorators if necessary.
Create a new MockServletConfig with a default {@link MockServletContext}.
Create a new MockServletConfig.
Create a new {@code MockServletContext}, using no base path and a {@link DefaultResourceLoader} (i.e. the classpath root as WAR root).
Create a new {@code MockServletContext}, using a {@link DefaultResourceLoader}.
Create a new {@code MockServletContext}, using the specified {@link ResourceLoader} and no base path.
Create a new {@code MockServletContext} using the supplied resource base path and resource loader. <p>Registers a {@link MockRequestDispatcher} for the Servlet named {@literal 'default'}.
Build a full resource location for the given path, prepending the resource base path of this {@code MockServletContext}.
Register a {@link RequestDispatcher} (typically a {@link MockRequestDispatcher}) that acts as a wrapper for the named Servlet.
Unregister the {@link RequestDispatcher} with the given name.
Get the name of the <em>default</em> {@code Servlet}. <p>Defaults to {@literal 'default'}.
Set the name of the <em>default</em> {@code Servlet}. <p>Also {@link #unregisterNamedDispatcher unregisters} the current default {@link RequestDispatcher} and {@link #registerNamedDispatcher replaces} it with a {@link MockRequestDispatcher} for the provided {@code defaultServletName}. never {@code null} or empty
Create a new PassThroughFilterChain that delegates to the given Filter, calling it with the given FilterChain.
Create a new PassThroughFilterChain that delegates to the given Servlet.
The <i>mode</i> to use when a test method is annotated with {@code @DirtiesContext}. <p>Defaults to {@link MethodMode#AFTER_METHOD AFTER_METHOD}. <p>Setting the method mode on an annotated test class has no meaning. For class-level control, use {@link #classMode} instead.
A single, permissible {@code value} of the <em>profile value</em> for the given {@link #name}. <p>Note: Assigning values to both {@link #value} and {@link #values} will lead to a configuration conflict.
Determine if the supplied {@code testClass} is <em>enabled</em> in the current environment, as specified by the {@link IfProfileValue &#064;IfProfileValue} annotation at the class level. <p>Defaults to {@code true} if no {@link IfProfileValue &#064;IfProfileValue} annotation is declared. environment
Determine if the supplied {@code testMethod} is <em>enabled</em> in the current environment, as specified by the {@link IfProfileValue &#064;IfProfileValue} annotation, which may be declared on the test method itself or at the class level. Class-level usage overrides method-level usage. <p>Defaults to {@code true} if no {@link IfProfileValue &#064;IfProfileValue} annotation is declared. environment
Determine if the supplied {@code testMethod} is <em>enabled</em> in the current environment, as specified by the {@link IfProfileValue &#064;IfProfileValue} annotation, which may be declared on the test method itself or at the class level. Class-level usage overrides method-level usage. <p>Defaults to {@code true} if no {@link IfProfileValue &#064;IfProfileValue} annotation is declared. the test is enabled environment
Determine if the {@code value} (or one of the {@code values}) in the supplied {@link IfProfileValue &#064;IfProfileValue} annotation is <em>enabled</em> in the current environment. the test is enabled {@code null} environment or if the supplied {@code ifProfileValue} is {@code null}
Obtain the canonical instance of this ProfileValueSource.
Get the {@code timeout} configured via the {@link Timed @Timed} annotation on the supplied {@code method}. <p>Negative configured values will be converted to {@code 0}. annotated with {@code @Timed}
Get the repeat count configured via the {@link Repeat @Repeat} annotation on the supplied {@code method}. <p>Non-negative configured values will be converted to {@code 1}. not annotated with {@code @Repeat}
Construct a new {@code DefaultCacheAwareContextLoaderDelegate} using a static {@link DefaultContextCache}. <p>This default cache is static so that each context can be cached and reused for all subsequent tests that declare the same unique context configuration within the same JVM process.
Construct a new {@code DefaultCacheAwareContextLoaderDelegate} using the supplied {@link ContextCache}.
Get the {@link ContextCache} used by this context loader delegate.
Load the {@code ApplicationContext} for the supplied merged context configuration. <p>Supports both the {@link SmartContextLoader} and {@link ContextLoader} SPIs.
Construct a {@code MergedSqlConfig} instance by merging the configuration from the supplied local (potentially method-level) {@code @SqlConfig} annotation with class-level configuration discovered on the supplied {@code testClass}. <p>Local configuration overrides class-level configuration. <p>If the test class is not annotated with {@code @SqlConfig}, no merging takes place and the local configuration is used "as is".
When the SQL scripts and statements should be executed. <p>Defaults to {@link ExecutionPhase#BEFORE_TEST_METHOD BEFORE_TEST_METHOD}.
The bean name of the {@link javax.sql.DataSource} against which the scripts should be executed. <p>The name is only required if there is more than one bean of type {@code DataSource} in the test's {@code ApplicationContext}. If there is only one such bean, it is not necessary to specify a bean name. <p>Defaults to an empty string, requiring that one of the following is true: <ol> <li>An explicit bean name is defined in a global declaration of {@code @SqlConfig}. <li>The data source can be retrieved from the transaction manager by using reflection to invoke a public method named {@code getDataSource()} on the transaction manager. <li>There is only one bean of type {@code DataSource} in the test's {@code ApplicationContext}.</li> <li>The {@code DataSource} to use is named {@code "dataSource"}.</li> </ol>
Execute SQL scripts configured via {@link Sql @Sql} for the supplied {@link TestContext} and {@link ExecutionPhase}.
Detect a default SQL script by implementing the algorithm defined in {@link Sql#scripts}.
Wrap the supplied {@code statement} with a {@code RunBeforeTestClassCallbacks} statement.
Wrap the supplied {@code statement} with a {@code RunAfterTestClassCallbacks} statement.
Wrap the supplied {@code statement} with a {@code ProfileValueChecker} statement.
Wrap the supplied {@code statement} with a {@code TestContextManagerCacheEvictor} statement.
Throw an {@link IllegalStateException} if the supplied {@code testClass} does not declare a {@code public SpringMethodRule} field that is annotated with {@code @Rule}.
Get the {@link TestContextManager} associated with the supplied test class.
Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement.
Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement.
Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement.
Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement. <p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat} annotation.
Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement. <p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed} annotation.
Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement.
Throw an {@link IllegalStateException} if the supplied {@code testClass} does not declare a {@code public static final SpringClassRule} field that is annotated with {@code @ClassRule}.
Construct a new {@code ProfileValueChecker} statement. never {@code null} this {@code ProfileValueChecker} is being applied at the class level
Construct a new {@code RunAfterTestClassCallbacks} statement. {@code afterTestClass()}
Construct a new {@code RunAfterTestMethodCallbacks} statement. test instance {@code afterTestMethod()}
Construct a new {@code RunBeforeTestClassCallbacks} statement. {@code beforeTestClass()}
Construct a new {@code RunBeforeTestMethodCallbacks} statement. test instance {@code beforeTestMethod()}
Construct a new {@code RunPrepareTestInstanceCallbacks} statement. {@code prepareTestInstance()}; never {@code null}
Construct a new {@code SpringFailOnTimeout} statement for the supplied {@code testMethod}, retrieving the configured timeout from the {@code @Timed} annotation on the supplied method.
Construct a new {@code SpringFailOnTimeout} statement for the supplied {@code timeout}. <p>If the supplied {@code timeout} is {@code 0}, the execution of the {@code next} statement will not be timed. never negative
Construct a new {@code SpringRepeat} statement for the supplied {@code testMethod}, retrieving the configured repeat count from the {@code @Repeat} annotation on the supplied method.
Construct a new {@code SpringRepeat} statement for the supplied {@code testMethod} and {@code repeat} count.
Specify the encoding for SQL scripts, if different from the platform encoding.
Convenience method for counting the rows in the given table.
Convenience method for counting the rows in the given table, using the provided {@code WHERE} clause. <p>See the Javadoc for {@link JdbcTestUtils#countRowsInTableWhere} for details. {@code WHERE} clause
Convenience method for deleting all rows from the specified tables. <p>Use with caution outside of a transaction!
Convenience method for deleting all rows from the given table, using the provided {@code WHERE} clause. <p>Use with caution outside of a transaction! <p>See the Javadoc for {@link JdbcTestUtils#deleteFromTableWhere} for details. PreparedStatement} to guess the corresponding SQL type); may also contain {@link org.springframework.jdbc.core.SqlParameterValue SqlParameterValue} objects which indicate not only the argument value but also the SQL type and optionally the scale.
Convenience method for dropping all of the specified tables. <p>Use with caution outside of a transaction!
Construct a new {@code SpringJUnit4ClassRunner} and initialize a {@link TestContextManager} to provide Spring testing functionality to standard JUnit tests.
Create a new {@link TestContextManager} for the supplied test class. <p>Can be overridden by subclasses.
Get the {@link TestContextManager} associated with this runner.
Invoke JUnit's private {@code withRules()} method using reflection.
Return {@code true} if {@link Ignore @Ignore} is present for the supplied {@linkplain FrameworkMethod test method} or if the test method is disabled via {@code @IfProfileValue}.
Get the {@code exception} that the supplied {@linkplain FrameworkMethod test method} is expected to throw. <p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation. <p>Can be overridden by subclasses.
Retrieve the configured JUnit {@code timeout} from the {@link Test @Test} annotation on the supplied {@linkplain FrameworkMethod test method}.
Retrieve the configured Spring-specific {@code timeout} from the {@link org.springframework.test.annotation.Timed @Timed} annotation on the supplied {@linkplain FrameworkMethod test method}.
Construct a new {@code SpringRunner} and initialize a {@link org.springframework.test.context.TestContextManager TestContextManager} to provide Spring testing functionality to standard JUnit 4 tests.
{@code SmartContextLoader} <i>before</i> bean definitions are read. <p>The default implementation: <ul> <li>Sets the <em>active bean definition profiles</em> from the supplied {@code MergedContextConfiguration} in the {@link org.springframework.core.env.Environment Environment} of the context.</li> <li>Adds {@link PropertySource PropertySources} for all {@linkplain MergedContextConfiguration#getPropertySourceLocations() resource locations} and {@linkplain MergedContextConfiguration#getPropertySourceProperties() inlined properties} from the supplied {@code MergedContextConfiguration} to the {@code Environment} of the context.</li> <li>Determines what (if any) context initializer classes have been supplied via the {@code MergedContextConfiguration} and instantiates and {@linkplain ApplicationContextInitializer#initialize invokes} each with the given application context. <ul> <li>Any {@code ApplicationContextInitializers} implementing {@link org.springframework.core.Ordered Ordered} or annotated with {@link org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li> </ul> </li> </ul>
{@code ContextLoader} <em>after</em> bean definitions have been loaded into the context but <em>before</em> the context has been refreshed. <p>The default implementation delegates to all {@link MergedContextConfiguration#getContextCustomizers context customizers} that have been registered with the supplied {@code mergedConfig}.
Generate the default classpath resource locations array based on the supplied class. <p>For example, if the supplied class is {@code com.example.MyTest}, the generated locations will contain a single string with a value of {@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>} is the value of the first configured {@linkplain #getResourceSuffixes() resource suffix} for which the generated location actually exists in the classpath. <p>As of Spring 3.1, the implementation of this method adheres to the contract defined in the {@link SmartContextLoader} SPI. Specifically, this method will <em>preemptively</em> verify that the generated default location actually exists. If it does not exist, this method will log a warning and return an empty array. <p>Subclasses can override this method to implement a different <em>default location generation</em> strategy.
Generate a modified version of the supplied locations array and return it. <p>The default implementation simply delegates to {@link TestContextResourceUtils#convertToClasspathResourcePaths}. <p>Subclasses can override this method to implement a different <em>location modification</em> strategy.
Determine whether or not <em>default</em> resource locations should be generated if the {@code locations} provided to {@link #processLocations(Class, String...)} are {@code null} or empty. <p>As of Spring 3.1, the semantics of this method have been overloaded to include detection of either default resource locations or default configuration classes. Consequently, this method can also be used to determine whether or not <em>default</em> configuration classes should be detected if the {@code classes} present in the {@link ContextConfigurationAttributes configuration attributes} supplied to {@link #processContextConfiguration(ContextConfigurationAttributes)} are {@code null} or empty. <p>Can be overridden by subclasses to change the default behavior.
Get the suffixes to append to {@link ApplicationContext} resource locations when detecting default locations. <p>The default implementation simply wraps the value returned by {@link #getResourceSuffix()} in a single-element array, but this can be overridden by subclasses in order to support multiple suffixes.
--- SmartContextLoader --------------------------------------------------
Mark the {@linkplain ApplicationContext application context} of the supplied {@linkplain TestContext test context} as {@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty} and set {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}. be marked as dirty context is part of a hierarchy; may be {@code null}
Perform the actual work for {@link #beforeTestMethod} and {@link #afterTestMethod} by dirtying the context if appropriate (i.e., according to the required modes). potentially be marked as dirty; never {@code null} be marked dirty in the current phase; never {@code null} be marked dirty in the current phase; never {@code null}
Perform the actual work for {@link #beforeTestClass} and {@link #afterTestClass} by dirtying the context if appropriate (i.e., according to the required mode). potentially be marked as dirty; never {@code null} be marked dirty in the current phase; never {@code null}
Validate the supplied {@link MergedContextConfiguration} with respect to what this context loader supports. <p>The default implementation is a <em>no-op</em> but can be overridden by subclasses as appropriate. for this context loader
Load bean definitions into the supplied {@link GenericApplicationContext context} from the locations or classes in the supplied {@code MergedContextConfiguration}. <p>The default implementation delegates to the {@link BeanDefinitionReader} returned by {@link #createBeanDefinitionReader(GenericApplicationContext)} to {@link BeanDefinitionReader#loadBeanDefinitions(String) load} the bean definitions. <p>Subclasses must provide an appropriate implementation of {@link #createBeanDefinitionReader(GenericApplicationContext)}. Alternatively subclasses may provide a <em>no-op</em> implementation of {@code createBeanDefinitionReader()} and override this method to provide a custom strategy for loading or registering bean definitions.
Get the names of the default {@link TestExecutionListener} classes for this bootstrapper. <p>The default implementation looks up all {@code org.springframework.test.context.TestExecutionListener} entries configured in all {@code META-INF/spring.factories} files on the classpath. <p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}. classes
Build the {@link MergedContextConfiguration merged context configuration} for the supplied {@link Class testClass}, context configuration attributes, and parent context configuration. should be built (must not be {@code null}) specified test class, ordered <em>bottom-up</em> (i.e., as if we were traversing up the class hierarchy); never {@code null} or empty context in a context hierarchy, or {@code null} if there is no parent be passed to the {@code MergedContextConfiguration} constructor initializers are required; typically {@code true} but may be set to {@code false} if the configured loader supports empty configuration
Get the {@link ContextCustomizerFactory} instances for this bootstrapper. <p>The default implementation uses the {@link SpringFactoriesLoader} mechanism for loading factories configured in all {@code META-INF/spring.factories} files on the classpath.
Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied list of {@link ContextConfigurationAttributes} and then instantiate and return that {@code ContextLoader}. <p>If the user has not explicitly declared which loader to use, the value returned from {@link #getDefaultContextLoaderClass} will be used as the default context loader class. For details on the class resolution process, see {@link #resolveExplicitContextLoaderClass} and {@link #getDefaultContextLoaderClass}. resolved; must not be {@code null} not be {@code null}; must be ordered <em>bottom-up</em> (i.e., as if we were traversing up the class hierarchy) (never {@code null}) returns {@code null}
Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied list of {@link ContextConfigurationAttributes}. <p>Beginning with the first level in the context configuration attributes hierarchy: <ol> <li>If the {@link ContextConfigurationAttributes#getContextLoaderClass() contextLoaderClass} property of {@link ContextConfigurationAttributes} is configured with an explicit class, that class will be returned.</li> <li>If an explicit {@code ContextLoader} class is not specified at the current level in the hierarchy, traverse to the next level in the hierarchy and return to step #1.</li> </ol> must not be {@code null}; must be ordered <em>bottom-up</em> (i.e., as if we were traversing up the class hierarchy) attributes, or {@code null} if no explicit loader is found {@code null} or <em>empty</em>
Get the {@link CacheAwareContextLoaderDelegate} to use for transparent interaction with the {@code ContextCache}. <p>The default implementation simply delegates to {@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}. <p>Concrete subclasses may choose to override this method to return a custom {@code CacheAwareContextLoaderDelegate} implementation with custom {@link org.springframework.test.context.cache.ContextCache ContextCache} support.
Process the supplied, newly instantiated {@link MergedContextConfiguration} instance. <p>The returned {@link MergedContextConfiguration} instance may be a wrapper around or a replacement for the original. <p>The default implementation simply returns the supplied instance unmodified. <p>Concrete subclasses may choose to return a specialized subclass of {@link MergedContextConfiguration} based on properties in the supplied instance.
Resolve <em>active bean definition profiles</em> for the supplied {@link Class}. <p>Note that the {@link ActiveProfiles#inheritProfiles inheritProfiles} flag of {@link ActiveProfiles @ActiveProfiles} will be taken into consideration. Specifically, if the {@code inheritProfiles} flag is set to {@code true}, profiles defined in the test class will be merged with those defined in superclasses. {@code null}) profiles from superclasses if appropriate (never {@code null})
Detect the default configuration classes for the supplied test class. <p>The default implementation simply delegates to {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}. never {@code null}
Detect the default configuration classes for the supplied test class. <p>The returned class array will contain all static nested classes of the supplied class that meet the requirements for {@code @Configuration} class implementations as specified in the documentation for {@link Configuration @Configuration}. <p>The implementation of this method adheres to the contract defined in the {@link org.springframework.test.context.SmartContextLoader SmartContextLoader} SPI. Specifically, this method uses introspection to detect default configuration classes that comply with the constraints required of {@code @Configuration} class implementations. If a potential candidate configuration class does not meet these requirements, this method will log a debug message, and the potential candidate class will be ignored. never {@code null}
Determine if the supplied {@link Class} meets the criteria for being considered a <em>default configuration class</em> candidate. <p>Specifically, such candidates: <ul> <li>must not be {@code null}</li> <li>must not be {@code private}</li> <li>must not be {@code final}</li> <li>must be {@code static}</li> <li>must be annotated or meta-annotated with {@code @Configuration}</li> </ul>
Resolve the set of merged {@code ApplicationContextInitializer} classes for the supplied list of {@code ContextConfigurationAttributes}. <p>Note that the {@link ContextConfiguration#inheritInitializers inheritInitializers} flag of {@link ContextConfiguration @ContextConfiguration} will be taken into consideration. Specifically, if the {@code inheritInitializers} flag is set to {@code true} for a given level in the class hierarchy represented by the provided configuration attributes, context initializer classes defined at the given level will be merged with those defined in higher levels of the class hierarchy. not be {@code null} or <em>empty</em>; must be ordered <em>bottom-up</em> (i.e., as if we were traversing up the class hierarchy) superclasses if appropriate (never {@code null})
Build a <em>context hierarchy map</em> for the supplied {@linkplain Class test class} and its superclasses, taking into account context hierarchies declared via {@link ContextHierarchy @ContextHierarchy} and {@link ContextConfiguration @ContextConfiguration}. <p>Each value in the map represents the consolidated list of {@linkplain ContextConfigurationAttributes context configuration attributes} for a given level in the context hierarchy (potentially across the test class hierarchy), keyed by the {@link ContextConfiguration#name() name} of the context hierarchy level. <p>If a given level in the context hierarchy does not have an explicit name (i.e., configured via {@link ContextConfiguration#name}), a name will be generated for that hierarchy level by appending the numerical level to the {@link #GENERATED_CONTEXT_HIERARCHY_LEVEL_PREFIX}. (must not be {@code null}) keyed by context hierarchy level name; never {@code null} attributes for each level in the {@code @ContextHierarchy} do not define unique context configuration within the overall hierarchy.
Resolve the list of {@linkplain ContextConfigurationAttributes context configuration attributes} for the supplied {@linkplain Class test class} and its superclasses. <p>Note that the {@link ContextConfiguration#inheritLocations inheritLocations} and {@link ContextConfiguration#inheritInitializers() inheritInitializers} flags of {@link ContextConfiguration @ContextConfiguration} will <strong>not</strong> be taken into consideration. If these flags need to be honored, that must be handled manually when traversing the list returned by this method. (must not be {@code null}) <em>bottom-up</em> (i.e., as if we were traversing up the class hierarchy); never {@code null} {@code @ContextConfiguration} is not <em>present</em> on the supplied class
Convenience method for creating a {@link ContextConfigurationAttributes} instance from the supplied {@link ContextConfiguration} annotation and declaring class and then adding the attributes to the supplied list.
Construct a new {@code DefaultBootstrapContext} from the supplied arguments. transparent interaction with the {@code ContextCache}; never {@code null}
Construct a new {@code DefaultTestContext} from the supplied arguments. configuration for this test context; never {@code null} and closing the application context for this test context; never {@code null}
Get the {@linkplain ApplicationContext application context} for this test context. <p>The default implementation delegates to the {@link CacheAwareContextLoaderDelegate} that was supplied when this {@code TestContext} was constructed. loader delegate is not <em>active</em> (i.e., has been closed).
Mark the {@linkplain ApplicationContext application context} associated with this test context as <em>dirty</em> (i.e., by removing it from the context cache and closing it). <p>The default implementation delegates to the {@link CacheAwareContextLoaderDelegate} that was supplied when this {@code TestContext} was constructed.
Performs dependency injection and bean initialization for the supplied {@link TestContext} as described in {@link #prepareTestInstance(TestContext) prepareTestInstance()}. <p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed from the test context, regardless of its value. be performed (never {@code null})
Create an <em>empty</em> {@code MergedTestPropertySources} instance.
Create a {@code MergedTestPropertySources} instance with the supplied {@code locations} and {@code properties}. empty but never {@code null} may be empty but never {@code null}
Get the resource locations of properties files.
Get the properties in the form of <em>key-value</em> pairs.
Create a new {@code TestPropertySourceAttributes} instance for the supplied {@link TestPropertySource @TestPropertySource} annotation and the {@linkplain Class test class} that declared it, enforcing configuration rules and detecting a default properties file if necessary.
Get the {@linkplain Class class} that declared {@code @TestPropertySource}.
Get the resource locations that were declared via {@code @TestPropertySource}. <p>Note: The returned value may represent a <em>detected default</em> that does not match the original value declared via {@code @TestPropertySource}.
Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}.
Get the inlined properties that were declared via {@code @TestPropertySource}.
Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}.
Detect a default properties file for the supplied class, as specified in the class-level Javadoc for {@link TestPropertySource}.
Add the {@link Properties} files from the given resource {@code locations} to the {@link Environment} of the supplied {@code context}. <p>Property placeholders in resource locations (i.e., <code>${...}</code>) will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved} against the {@code Environment}. <p>Each properties file will be converted to a {@link ResourcePropertySource} that will be added to the {@link PropertySources} of the environment with highest precedence. never {@code null} to the environment; potentially empty but never {@code null}
Add the given <em>inlined properties</em> to the {@link Environment} of the supplied {@code context}. <p>This method simply delegates to {@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}. never {@code null} potentially empty but never {@code null}
Add the given <em>inlined properties</em> (in the form of <em>key-value</em> pairs) to the supplied {@link ConfigurableEnvironment environment}. <p>All key-value pairs will be added to the {@code Environment} as a single {@link MapPropertySource} with the highest precedence. <p>For details on the parsing of <em>inlined properties</em>, consult the Javadoc for {@link #convertInlinedPropertiesToMap}. potentially empty but never {@code null}
Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em> pairs) into a map keyed by property name, preserving the ordering of property names in the returned map. <p>Parsing of the key-value pairs is achieved by converting all pairs into <em>virtual</em> properties files in memory and delegating to {@link Properties#load(java.io.Reader)} to parse each virtual file. <p>For a full discussion of <em>inlined properties</em>, consult the Javadoc for {@link TestPropertySource#properties}. but never {@code null} a given inlined property contains multiple key-value pairs
Construct a new AbstractTestNGSpringContextTests instance and initialize the internal {@link TestContextManager} for the current test.
Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext test context}. <p>The following algorithm is used to retrieve the {@code DataSource} from the {@link org.springframework.context.ApplicationContext ApplicationContext} of the supplied test context: <ol> <li>Look up the {@code DataSource} by type and name, if the supplied {@code name} is non-empty, throwing a {@link BeansException} if the named {@code DataSource} does not exist. <li>Attempt to look up the single {@code DataSource} by type. <li>Attempt to look up the <em>primary</em> {@code DataSource} by type. <li>Attempt to look up the {@code DataSource} by type and the {@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}. should be retrieved; never {@code null} or <em>empty</em> named {@code DataSource}
Retrieve the {@linkplain PlatformTransactionManager transaction manager} to use for the supplied {@linkplain TestContext test context}. <p>The following algorithm is used to retrieve the transaction manager from the {@link org.springframework.context.ApplicationContext ApplicationContext} of the supplied test context: <ol> <li>Look up the transaction manager by type and explicit name, if the supplied {@code name} is non-empty, throwing a {@link BeansException} if the named transaction manager does not exist. <li>Attempt to look up the single transaction manager by type. <li>Attempt to look up the <em>primary</em> transaction manager by type. <li>Attempt to look up the transaction manager via a {@link TransactionManagementConfigurer}, if present. <li>Attempt to look up the transaction manager by type and the {@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager name}. should be retrieved; never {@code null} {@code null} or <em>empty</em> named transaction manager exists in the ApplicationContext
Create a delegating {@link TransactionAttribute} for the supplied target {@link TransactionAttribute} and {@link TestContext}, using the names of the test class and test method to build the name of the transaction.
Determine whether a test-managed transaction is currently <em>active</em>.
Determine whether the current test-managed transaction has been {@linkplain #flagForRollback() flagged for rollback} or {@linkplain #flagForCommit() flagged for commit}. to be rolled back; {@code false} if the current test-managed transaction is flagged to be committed current test
Flag the current test-managed transaction for <em>rollback</em>. <p>Invoking this method will <em>not</em> end the current transaction. Rather, the value of this flag will be used to determine whether or not the current test-managed transaction should be rolled back or committed once it is {@linkplain #end ended}. current test
Flag the current test-managed transaction for <em>commit</em>. <p>Invoking this method will <em>not</em> end the current transaction. Rather, the value of this flag will be used to determine whether or not the current test-managed transaction should be rolled back or committed once it is {@linkplain #end ended}. current test
Start a new test-managed transaction. <p>Only call this method if {@link #end} has been called or if no transaction has been previously started. retrieved or if a transaction is already active for the current test
Immediately force a <em>commit</em> or <em>rollback</em> of the current test-managed transaction, according to the {@linkplain #isFlaggedForRollback rollback flag}. retrieved or if a transaction is not active for the current test
Run all {@link BeforeTransaction @BeforeTransaction} methods for the specified {@linkplain TestContext test context}. If one of the methods fails, however, the caught exception will be rethrown in a wrapped {@link RuntimeException}, and the remaining methods will <strong>not</strong> be given a chance to execute.
Run all {@link AfterTransaction @AfterTransaction} methods for the specified {@linkplain TestContext test context}. If one of the methods fails, the caught exception will be logged as an error, and the remaining methods will be given a chance to execute. After all methods have executed, the first caught exception, if any, will be rethrown.
Get the {@linkplain PlatformTransactionManager transaction manager} to use for the supplied {@linkplain TestContext test context} and {@code qualifier}. <p>Delegates to {@link #getTransactionManager(TestContext)} if the supplied {@code qualifier} is {@code null} or empty. should be retrieved may be {@code null} or empty
Get the {@linkplain PlatformTransactionManager transaction manager} to use for the supplied {@linkplain TestContext test context}. <p>The default implementation simply delegates to {@link TestContextTransactionUtils#retrieveTransactionManager}. should be retrieved named transaction manager exists in the ApplicationContext
Determine whether or not to rollback transactions for the supplied {@linkplain TestContext test context} by taking into consideration the {@linkplain #isDefaultRollback(TestContext) default rollback} flag and a possible method-level override via the {@link Rollback @Rollback} annotation. should be retrieved
Gets all superclasses of the supplied {@link Class class}, including the class itself. The ordering of the returned list will begin with the supplied class and continue up the class hierarchy, excluding {@link Object}. <p>Note: This code has been borrowed from {@link org.junit.internal.runners.TestClass#getSuperClasses(Class)} and adapted.
Gets all methods in the supplied {@link Class class} and its superclasses which are annotated with the supplied {@code annotationType} but which are not <em>shadowed</em> by methods overridden in subclasses. <p>Note: This code has been borrowed from {@link org.junit.internal.runners.TestClass#getAnnotatedMethods(Class)} and adapted.
Determine if the supplied {@link Method method} is <em>shadowed</em> by a method in the supplied {@link List list} of previous methods. <p>Note: This code has been borrowed from {@link org.junit.internal.runners.TestClass#isShadowed(Method, List)}. method in the {@code previousMethods} list
Determine if the supplied {@linkplain Method current method} is <em>shadowed</em> by a {@linkplain Method previous method}. <p>Note: This code has been borrowed from {@link org.junit.internal.runners.TestClass#isShadowed(Method, Method)}.
Construct a new {@code TransactionConfigurationAttributes} instance using an empty string for the bean name of the {@link PlatformTransactionManager} and {@code true} for the default rollback flag.
Construct a new {@code TransactionConfigurationAttributes} instance from the supplied arguments. {@link PlatformTransactionManager} that is to be used to drive <em>test-managed transactions</em> should be rolled back by default
Get the bean name of the {@link PlatformTransactionManager} that is to be used to drive <em>test-managed transactions</em>.
Whether <em>test-managed transactions</em> should be rolled back by default.
Has the current transaction been flagged for rollback? <p>In other words, should we roll back or commit the current transaction upon completion of the current test?
Start a new transaction for the configured {@linkplain #getTestContext test context}. <p>Only call this method if {@link #endTransaction} has been called or if no transaction has been previously started.
Immediately force a <em>commit</em> or <em>rollback</em> of the transaction for the configured {@linkplain #getTestContext test context}, according to the {@linkplain #isFlaggedForRollback rollback flag}.
Convert the supplied paths to classpath resource paths. <p>For each of the supplied paths: <ul> <li>A plain path &mdash; for example, {@code "context.xml"} &mdash; will be treated as a classpath resource that is relative to the package in which the specified class is defined. <li>A path starting with a slash will be treated as an absolute path within the classpath, for example: {@code "/org/example/schema.sql"}. <li>A path which is prefixed with a URL protocol (e.g., {@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:}, {@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be {@link StringUtils#cleanPath cleaned} but otherwise unmodified.
Convert the supplied paths to an array of {@link Resource} handles using the given {@link ResourceLoader}.
Convert the supplied paths to a list of {@link Resource} handles using the given {@link ResourceLoader}.
Validate the supplied {@link WebMergedContextConfiguration} with respect to what this context loader supports. <p>The default implementation is a <em>no-op</em> but can be overridden by subclasses as appropriate. for this context loader
Configures web resources for the supplied web application context (WAC). <h4>Implementation Details</h4> <p>If the supplied WAC has no parent or its parent is not a WAC, the supplied WAC will be configured as the Root WAC (see "<em>Root WAC Configuration</em>" below). <p>Otherwise the context hierarchy of the supplied WAC will be traversed to find the top-most WAC (i.e., the root); and the {@link ServletContext} of the Root WAC will be set as the {@code ServletContext} for the supplied WAC. <h4>Root WAC Configuration</h4> <ul> <li>The resource base path is retrieved from the supplied {@code WebMergedContextConfiguration}.</li> <li>A {@link ResourceLoader} is instantiated for the {@link MockServletContext}: if the resource base path is prefixed with "{@code classpath:}", a {@link DefaultResourceLoader} will be used; otherwise, a {@link FileSystemResourceLoader} will be used.</li> <li>A {@code MockServletContext} will be created using the resource base path and resource loader.</li> <li>The supplied {@link GenericWebApplicationContext} is then stored in the {@code MockServletContext} under the {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} key.</li> <li>Finally, the {@code MockServletContext} is set in the {@code WebApplicationContext}.</li> resources web application context
Customize the internal bean factory of the {@code WebApplicationContext} <p>The default implementation is empty but can be overridden in subclasses to customize {@code DefaultListableBeanFactory}'s standard settings. web application context
loader <i>after</i> bean definitions have been loaded into the context but <i>before</i> the context is refreshed. <p>The default implementation simply delegates to {@link AbstractContextLoader#customizeContext(ConfigurableApplicationContext, MergedContextConfiguration)}. web application context
Create a new {@code WebMergedContextConfiguration} instance by copying all properties from the supplied {@code MergedContextConfiguration}. <p>If an <em>empty</em> value is supplied for the {@code resourceBasePath} an empty string will be used.
Create a new {@code WebMergedContextConfiguration} instance for the supplied parameters. <p>If a {@code null} value is supplied for {@code locations}, {@code classes}, {@code activeProfiles}, {@code propertySourceLocations}, or {@code propertySourceProperties} an empty array will be stored instead. If a {@code null} value is supplied for the {@code contextInitializerClasses} an empty set will be stored instead. If an <em>empty</em> value is supplied for the {@code resourceBasePath} an empty string will be used. Furthermore, active profiles will be sorted, and duplicate profiles will be removed. delegate with which to retrieve the parent context
Create a new {@code WebMergedContextConfiguration} instance for the supplied parameters. <p>If a {@code null} value is supplied for {@code locations}, {@code classes}, {@code activeProfiles}, {@code propertySourceLocations}, or {@code propertySourceProperties} an empty array will be stored instead. If a {@code null} value is supplied for {@code contextInitializerClasses} or {@code contextCustomizers}, an empty set will be stored instead. If an <em>empty</em> value is supplied for the {@code resourceBasePath} an empty string will be used. Furthermore, active profiles will be sorted, and duplicate profiles will be removed. delegate with which to retrieve the parent context
Get the resource path to the root directory of the web application for the {@linkplain #getTestClass() test class}, configured via {@code @WebAppConfiguration}.
Resolve the {@link TestContextBootstrapper} type for the test class in the supplied {@link BootstrapContext}, instantiate it, and provide it a reference to the {@link BootstrapContext}. <p>If the {@link BootstrapWith @BootstrapWith} annotation is present on the test class, either directly or as a meta-annotation, then its {@link BootstrapWith#value value} will be used as the bootstrapper type. Otherwise, either the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper DefaultTestContextBootstrapper} or the {@link org.springframework.test.context.web.WebTestContextBootstrapper WebTestContextBootstrapper} will be used, depending on the presence of {@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}.
Construct a new {@link ContextConfigurationAttributes} instance for the supplied {@link ContextConfiguration @ContextConfiguration} annotation and the {@linkplain Class test class} that declared it.
Construct a new {@link ContextConfigurationAttributes} instance for the {@linkplain Class test class} that declared the {@link ContextConfiguration @ContextConfiguration} annotation and its corresponding attributes. {@code null}
Get the {@linkplain Class class} that declared the {@link ContextConfiguration @ContextConfiguration} annotation, either explicitly or implicitly.
Set the <em>processed</em> annotated classes, effectively overriding the original value declared via {@link ContextConfiguration @ContextConfiguration}.
Get the annotated classes that were declared via {@link ContextConfiguration @ContextConfiguration}. <p>Note: this is a mutable property. The returned value may therefore represent a <em>processed</em> value that does not match the original value declared via {@link ContextConfiguration @ContextConfiguration}.
Determine if this {@code ContextConfigurationAttributes} instance has class-based resources.
Set the <em>processed</em> resource locations, effectively overriding the original value declared via {@link ContextConfiguration @ContextConfiguration}.
Get the resource locations that were declared via {@link ContextConfiguration @ContextConfiguration}. <p>Note: this is a mutable property. The returned value may therefore represent a <em>processed</em> value that does not match the original value declared via {@link ContextConfiguration @ContextConfiguration}.
Determine if this {@code ContextConfigurationAttributes} instance has path-based resource locations.
Determine if this {@code ContextConfigurationAttributes} instance has either path-based resource locations or class-based resources. or the {@link #getClasses() classes} array is not empty
Get the {@code inheritLocations} flag that was declared via {@link ContextConfiguration @ContextConfiguration}.
Get the {@code ApplicationContextInitializer} classes that were declared via {@link ContextConfiguration @ContextConfiguration}.
Get the {@code inheritInitializers} flag that was declared via {@link ContextConfiguration @ContextConfiguration}.
Get the name of the context hierarchy level that was declared via {@link ContextConfiguration @ContextConfiguration}.
Get the {@code ContextLoader} class that was declared via {@link ContextConfiguration @ContextConfiguration}.
Generate a null-safe {@link String} representation of the supplied {@link ContextLoader} based solely on the fully qualified name of the loader or &quot;null&quot; if the supplied loaded is {@code null}.
Create a new {@code MergedContextConfiguration} instance for the supplied parameters. <p>Delegates to {@link #MergedContextConfiguration(Class, String[], Class[], Set, String[], String[], String[], ContextLoader, CacheAwareContextLoaderDelegate, MergedContextConfiguration)}.
Create a new {@code MergedContextConfiguration} instance for the supplied parameters. <p>Delegates to {@link #MergedContextConfiguration(Class, String[], Class[], Set, String[], String[], String[], ContextLoader, CacheAwareContextLoaderDelegate, MergedContextConfiguration)}. delegate with which to retrieve the parent context
Create a new {@code MergedContextConfiguration} instance by copying all fields from the supplied {@code MergedContextConfiguration}.
Create a new {@code MergedContextConfiguration} instance for the supplied parameters. <p>If a {@code null} value is supplied for {@code locations}, {@code classes}, {@code activeProfiles}, {@code propertySourceLocations}, or {@code propertySourceProperties} an empty array will be stored instead. If a {@code null} value is supplied for the {@code contextInitializerClasses} an empty set will be stored instead. Furthermore, active profiles will be sorted, and duplicate profiles will be removed. delegate with which to retrieve the parent context
Create a new {@code MergedContextConfiguration} instance for the supplied parameters. <p>If a {@code null} value is supplied for {@code locations}, {@code classes}, {@code activeProfiles}, {@code propertySourceLocations}, or {@code propertySourceProperties} an empty array will be stored instead. If a {@code null} value is supplied for {@code contextInitializerClasses} or {@code contextCustomizers}, an empty set will be stored instead. Furthermore, active profiles will be sorted, and duplicate profiles will be removed. delegate with which to retrieve the parent context
Get the {@linkplain Class test class} associated with this {@code MergedContextConfiguration}.
Get the merged resource locations for {@code ApplicationContext} configuration files for the {@linkplain #getTestClass() test class}. <p>Context resource locations typically represent XML configuration files or Groovy scripts.
Get the merged annotated classes for the {@linkplain #getTestClass() test class}.
Determine if this {@code MergedContextConfiguration} instance has path-based context resource locations.
Determine if this {@code MergedContextConfiguration} instance has class-based resources.
Determine if this {@code MergedContextConfiguration} instance has either path-based context resource locations or class-based resources. or the {@link #getClasses() classes} array is not empty
Get the merged {@code ApplicationContextInitializer} classes for the {@linkplain #getTestClass() test class}.
Get the merged active bean definition profiles for the {@linkplain #getTestClass() test class}.
Get the merged resource locations for test {@code PropertySources} for the {@linkplain #getTestClass() test class}.
Get the merged test {@code PropertySource} properties for the {@linkplain #getTestClass() test class}. <p>Properties will be loaded into the {@code Environment}'s set of {@code PropertySources}.
Get the merged {@link ContextCustomizer ContextCustomizers} that will be applied when the application context is loaded.
Get the resolved {@link ContextLoader} for the {@linkplain #getTestClass() test class}.
Get the {@link MergedContextConfiguration} for the parent application context in a context hierarchy.
Get the parent {@link ApplicationContext} for the context defined by this {@code MergedContextConfiguration} from the context cache. <p>If the parent context has not yet been loaded, it will be loaded, stored in the cache, and then returned.
Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}. <p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with the {@link TestContextBootstrapper} configured for the test class. If the {@link BootstrapWith @BootstrapWith} annotation is present on the test class, either directly or as a meta-annotation, then its {@link BootstrapWith#value value} will be used as the bootstrapper type; otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper DefaultTestContextBootstrapper} will be used.
Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper} and {@linkplain #registerTestExecutionListeners register} the necessary {@link TestExecutionListener TestExecutionListeners}. <p>Delegates to the supplied {@code TestContextBootstrapper} for building the {@code TestContext} and retrieving the {@code TestExecutionListeners}.
Get the {@link TestContext} managed by this {@code TestContextManager}.
Register the supplied list of {@link TestExecutionListener TestExecutionListeners} by appending them to the list of listeners used by this {@code TestContextManager}.
Register the supplied array of {@link TestExecutionListener TestExecutionListeners} by appending them to the list of listeners used by this {@code TestContextManager}.
Get the current {@link TestExecutionListener TestExecutionListeners} registered for this {@code TestContextManager}. <p>Allows for modifications, e.g. adding a listener to the beginning of the list. However, make sure to keep the list stable while actually executing tests.
Get a copy of the {@link TestExecutionListener TestExecutionListeners} registered for this {@code TestContextManager} in reverse order.
Hook for pre-processing a test class <em>before</em> execution of any tests within the class. Should be called prior to any framework-specific <em>before class methods</em> (e.g., methods annotated with JUnit's {@link org.junit.BeforeClass @BeforeClass}). <p>An attempt will be made to give each registered {@link TestExecutionListener} a chance to pre-process the test class execution. If a listener throws an exception, however, the remaining registered listeners will <strong>not</strong> be called. exception
Hook for preparing a test instance prior to execution of any individual test methods, for example for injecting dependencies, etc. Should be called immediately after instantiation of the test instance. <p>The managed {@link TestContext} will be updated with the supplied {@code testInstance}. <p>An attempt will be made to give each registered {@link TestExecutionListener} a chance to prepare the test instance. If a listener throws an exception, however, the remaining registered listeners will <strong>not</strong> be called.
Hook for pre-processing a test <em>before</em> execution of the supplied {@link Method test method}, for example for setting up test fixtures, starting a transaction, etc. Should be called prior to any framework-specific <em>before methods</em> (e.g., methods annotated with JUnit's {@link org.junit.Before @Before}). <p>The managed {@link TestContext} will be updated with the supplied {@code testInstance} and {@code testMethod}. <p>An attempt will be made to give each registered {@link TestExecutionListener} a chance to pre-process the test method execution. If a listener throws an exception, however, the remaining registered listeners will <strong>not</strong> be called. test instance
Hook for post-processing a test <em>after</em> execution of the supplied {@link Method test method}, for example for tearing down test fixtures, ending a transaction, etc. Should be called after any framework-specific <em>after methods</em> (e.g., methods annotated with JUnit's {@link org.junit.After @After}). <p>The managed {@link TestContext} will be updated with the supplied {@code testInstance}, {@code testMethod}, and {@code exception}. <p>Each registered {@link TestExecutionListener} will be given a chance to post-process the test method execution. If a listener throws an exception, the remaining registered listeners will still be called, but the first exception thrown will be tracked and rethrown after all listeners have executed. Note that registered listeners will be executed in the opposite order in which they were registered. test instance test method or by a TestExecutionListener, or {@code null} if none was thrown
Hook for post-processing a test class <em>after</em> execution of all tests within the class. Should be called after any framework-specific <em>after class methods</em> (e.g., methods annotated with JUnit's {@link org.junit.AfterClass @AfterClass}). <p>Each registered {@link TestExecutionListener} will be given a chance to post-process the test class. If a listener throws an exception, the remaining registered listeners will still be called, but the first exception thrown will be tracked and rethrown after all listeners have executed. Note that registered listeners will be executed in the opposite order in which they were registered.
Whether or not test property source {@link #locations} from superclasses should be <em>inherited</em>. <p>The default value is {@code true}, which means that a test class will <em>inherit</em> property source locations defined by a superclass. Specifically, the property source locations for a test class will be appended to the list of property source locations defined by a superclass. Thus, subclasses have the option of <em>extending</em> the list of test property source locations. <p>If {@code inheritLocations} is set to {@code false}, the property source locations for the test class will <em>shadow</em> and effectively replace any property source locations defined by a superclass. <p>In the following example, the {@code ApplicationContext} for {@code BaseTest} will be loaded using only the {@code "base.properties"} file as a test property source. In contrast, the {@code ApplicationContext} for {@code ExtendedTest} will be loaded using the {@code "base.properties"} <strong>and</strong> {@code "extended.properties"} files as test property source locations. <pre class="code"> &#064;TestPropertySource(&quot;base.properties&quot;) &#064;ContextConfiguration public class BaseTest { &#064;TestPropertySource(&quot;extended.properties&quot;) &#064;ContextConfiguration public class ExtendedTest extends BaseTest { </pre>
Count the rows in the given table.
Count the rows in the given table, using the provided {@code WHERE} clause. <p>If the provided {@code WHERE} clause contains text, it will be prefixed with {@code " WHERE "} and then appended to the generated {@code SELECT} statement. For example, if the provided table name is {@code "person"} and the provided where clause is {@code "name = 'Bob' and age > 25"}, the resulting SQL statement to execute will be {@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}. {@code WHERE} clause
Delete all rows from the specified tables.
Delete rows from the given table, using the provided {@code WHERE} clause. <p>If the provided {@code WHERE} clause contains text, it will be prefixed with {@code " WHERE "} and then appended to the generated {@code DELETE} statement. For example, if the provided table name is {@code "person"} and the provided where clause is {@code "name = 'Bob' and age > 25"}, the resulting SQL statement to execute will be {@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}. <p>As an alternative to hard-coded values, the {@code "?"} placeholder can be used within the {@code WHERE} clause, binding to the given arguments. to guess the corresponding SQL type); may also contain {@link SqlParameterValue} objects which indicate not only the argument value but also the SQL type and optionally the scale.
Drop the specified tables.
Fails a test with the given message.
Fails a test with the given message passing along expected and actual values to be added to the message. <p>For example given: <pre class="code"> assertEquals("Response header [" + name + "]", actual, expected); </pre> <p>The resulting message is: <pre class="code"> Response header [Accept] expected:&lt;application/json&gt; but was:&lt;text/plain&gt; </pre>
Assert the given condition is {@code true} and raise an {@link AssertionError} if it is not.
Assert two objects are equal raise an {@link AssertionError} if not. <p>For example: <pre class="code"> assertEquals("Response header [" + name + "]", actual, expected); </pre>
Parse the expected and actual strings as JSON and assert the two are "similar" - i.e. they contain the same attribute-value pairs regardless of formatting with a lenient checking (extensible, and non-strict array ordering).
Parse the expected and actual strings as JSON and assert the two are "similar" - i.e. they contain the same attribute-value pairs regardless of formatting. <p>Can compare in two modes, depending on {@code strict} parameter value: <ul> </ul>
Parse the expected and actual strings as JSON and assert the two are "not similar" - i.e. they contain different attribute-value pairs regardless of formatting with a lenient checking (extensible, and non-strict array ordering).
Parse the expected and actual strings as JSON and assert the two are "not similar" - i.e. they contain different attribute-value pairs regardless of formatting. <p>Can compare in two modes, depending on {@code strict} parameter value: <ul> </ul>
Construct a new {@code JsonPathExpectationsHelper}. using formatting specifiers defined in {@link String#format(String, Object...)}
Evaluate the JSON path expression against the supplied {@code content} and assert that the result is equal to the expected value.
Evaluate the JSON path expression against the supplied {@code content} and assert that the resulting value is a {@link String}.
Evaluate the JSON path expression against the supplied {@code content} and assert that the resulting value is a {@link Boolean}.
Evaluate the JSON path expression against the supplied {@code content} and assert that the resulting value is a {@link Number}.
Evaluate the JSON path expression against the supplied {@code content} and assert that the resulting value is an array.
Evaluate the JSON path expression against the supplied {@code content} and assert that the resulting value is a {@link Map}.
Evaluate the JSON path expression against the supplied {@code content} and assert that a non-null value exists at the given path. <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite() definite}, this method asserts that the value at the given path is not <em>empty</em>.
Evaluate the JSON path expression against the supplied {@code content} and assert that a value does not exist at the given path. <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite() definite}, this method asserts that the value at the given path is <em>empty</em>.
Evaluate the JSON path expression against the supplied {@code content} and assert that an empty value exists at the given path. <p>For the semantics of <em>empty</em>, consult the Javadoc for {@link ObjectUtils#isEmpty(Object)}.
Evaluate the JSON path expression against the supplied {@code content} and assert that a non-empty value exists at the given path. <p>For the semantics of <em>empty</em>, consult the Javadoc for {@link ObjectUtils#isEmpty(Object)}.
Assert that the given matcher matches the actual value.
Find the {@link AnnotationDescriptor} for the supplied {@code annotationType} on the supplied {@link Class}, traversing its annotations and superclasses if no annotation can be found on the given class itself. <p>This method explicitly handles class-level annotations which are not declared as {@linkplain java.lang.annotation.Inherited inherited} <em>as well as meta-annotations</em>. <p>The algorithm operates as follows: <ol> <li>Search for the annotation on the given class and return a corresponding {@code AnnotationDescriptor} if found. <li>Recursively search through all annotations that the given class declares. <li>Recursively search through the superclass hierarchy of the given class. </ol> <p>In this context, the term <em>recursively</em> means that the search process continues by returning to step #1 with the current annotation or superclass as the class to look for annotations on. <p>If the supplied {@code clazz} is an interface, only the interface itself will be checked; the inheritance hierarchy for interfaces will not be traversed. otherwise {@code null}
Perform the search algorithm for {@link #findAnnotationDescriptor(Class, Class)}, avoiding endless recursion by tracking which annotations have already been <em>visited</em>. otherwise {@code null}
Set the {@linkplain Field field} with the given {@code name} on the provided {@code targetObject} to the supplied {@code value}. <p>This method delegates to {@link #setField(Object, String, Object, Class)}, supplying {@code null} for the {@code type} argument.
Set the {@linkplain Field field} with the given {@code name}/{@code type} on the provided {@code targetObject} to the supplied {@code value}. <p>This method delegates to {@link #setField(Object, Class, String, Object, Class)}, supplying {@code null} for the {@code targetClass} argument. {@code type} is specified {@code name} is specified
Set the static {@linkplain Field field} with the given {@code name} on the provided {@code targetClass} to the supplied {@code value}. <p>This method delegates to {@link #setField(Object, Class, String, Object, Class)}, supplying {@code null} for the {@code targetObject} and {@code type} arguments. never {@code null}
Set the static {@linkplain Field field} with the given {@code name}/{@code type} on the provided {@code targetClass} to the supplied {@code value}. <p>This method delegates to {@link #setField(Object, Class, String, Object, Class)}, supplying {@code null} for the {@code targetObject} argument. never {@code null} {@code type} is specified {@code name} is specified
Set the {@linkplain Field field} with the given {@code name}/{@code type} on the provided {@code targetObject}/{@code targetClass} to the supplied {@code value}. <p>If the supplied {@code targetObject} is a <em>proxy</em>, it will be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing the field to be set on the ultimate target of the proxy. <p>This method traverses the class hierarchy in search of the desired field. In addition, an attempt will be made to make non-{@code public} fields <em>accessible</em>, thus allowing one to set {@code protected}, {@code private}, and <em>package-private</em> fields. {@code null} if the field is static be {@code null} if the field is an instance field {@code type} is specified {@code name} is specified
Get the value of the {@linkplain Field field} with the given {@code name} from the provided {@code targetObject}. <p>This method delegates to {@link #getField(Object, Class, String)}, supplying {@code null} for the {@code targetClass} argument. never {@code null}
Get the value of the static {@linkplain Field field} with the given {@code name} from the provided {@code targetClass}. <p>This method delegates to {@link #getField(Object, Class, String)}, supplying {@code null} for the {@code targetObject} argument. never {@code null}
Get the value of the {@linkplain Field field} with the given {@code name} from the provided {@code targetObject}/{@code targetClass}. <p>If the supplied {@code targetObject} is a <em>proxy</em>, it will be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing the field to be retrieved from the ultimate target of the proxy. <p>This method traverses the class hierarchy in search of the desired field. In addition, an attempt will be made to make non-{@code public} fields <em>accessible</em>, thus allowing one to get {@code protected}, {@code private}, and <em>package-private</em> fields. {@code null} if the field is static be {@code null} if the field is an instance field
Invoke the setter method with the given {@code name} on the supplied target object with the supplied {@code value}. <p>This method traverses the class hierarchy in search of the desired method. In addition, an attempt will be made to make non-{@code public} methods <em>accessible</em>, thus allowing one to invoke {@code protected}, {@code private}, and <em>package-private</em> setter methods. <p>In addition, this method supports JavaBean-style <em>property</em> names. For example, if you wish to set the {@code name} property on the target object, you may pass either &quot;name&quot; or &quot;setName&quot; as the method name. method property name
Invoke the getter method with the given {@code name} on the supplied target object with the supplied {@code value}. <p>This method traverses the class hierarchy in search of the desired method. In addition, an attempt will be made to make non-{@code public} methods <em>accessible</em>, thus allowing one to invoke {@code protected}, {@code private}, and <em>package-private</em> getter methods. <p>In addition, this method supports JavaBean-style <em>property</em> names. For example, if you wish to get the {@code name} property on the target object, you may pass either &quot;name&quot; or &quot;getName&quot; as the method name. method property name
Parse the content as {@link Node} and apply a {@link Matcher}.
Parse the content as {@link DOMSource} and apply a {@link Matcher}.
Parse the expected and actual content strings as XML and assert that the two are "similar" -- i.e. they contain the same elements and attributes regardless of order. <p>Use of this method assumes the
XpathExpectationsHelper constructor. formatting specifiers defined in {@link String#format(String, Object...)}
Return the compiled XPath expression.
Parse the content, evaluate the XPath expression as a {@link Node}, and assert it with the given {@code Matcher<Node>}.
Parse the given XML content to a {@link Document}.
Apply the XPath expression and assert the resulting content exists.
Apply the XPath expression and assert the resulting content does not exist.
Apply the XPath expression and assert the resulting content with the given Hamcrest matcher.
Apply the XPath expression and assert the resulting content as an integer.
Apply the XPath expression and assert the resulting content with the given Hamcrest matcher.
Apply the XPath expression and assert the resulting content as a String.
Apply the XPath expression and assert the resulting content with the given Hamcrest matcher.
Apply the XPath expression and assert the resulting content as a Double.
Apply the XPath expression and assert the resulting content as a Boolean.
Class constructor, not for direct instantiation. Use {@link MockRestRequestMatchers#content()}.
Assert the request content type as a String.
Assert the request content type as a {@link MediaType}.
Assert the request content type is compatible with the given content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.
Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.
Get the body of the request as a UTF-8 string and compare it to the given String.
Compare the body of the request to the given byte array.
Parse the body as form data and compare to the given {@code MultiValueMap}.
Parse the request body and the given String as XML and assert that the two are "similar" - i.e. they contain the same elements and attributes regardless of order. <p>Use of this matcher assumes the
Parse the request content as {@link Node} and apply the given {@link Matcher}.
Parse the request content as {@link DOMSource} and apply the given {@link Matcher}.
Protected constructor. <p>Use {@link MockRestRequestMatchers#jsonPath(String, Matcher)} or {@link MockRestRequestMatchers#jsonPath(String, Object...)}. using formatting specifiers defined in {@link String#format(String, Object...)}
Evaluate the JSON path expression against the request content and assert the resulting value with the given Hamcrest {@link Matcher}.
Evaluate the JSON path expression against the request content and assert that the result is equal to the supplied value.
Evaluate the JSON path expression against the request content and assert that a non-null value exists at the given path. <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite definite}, this method asserts that the value at the given path is not <em>empty</em>.
Evaluate the JSON path expression against the request content and assert that a value does not exist at the given path. <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite definite}, this method asserts that the value at the given path is <em>empty</em>.
Evaluate the JSON path expression against the request content and assert that an empty value exists at the given path. <p>For the semantics of <em>empty</em>, consult the Javadoc for {@link org.springframework.util.ObjectUtils#isEmpty(Object)}.
Evaluate the JSON path expression against the request content and assert that a non-empty value exists at the given path. <p>For the semantics of <em>empty</em>, consult the Javadoc for {@link org.springframework.util.ObjectUtils#isEmpty(Object)}.
Evaluate the JSON path expression against the request content and assert that the result is a {@link String}.
Evaluate the JSON path expression against the request content and assert that the result is a {@link Boolean}.
Evaluate the JSON path expression against the request content and assert that the result is a {@link Number}.
Evaluate the JSON path expression against the request content and assert that the result is an array.
Evaluate the JSON path expression against the request content and assert that the result is a {@link java.util.Map}.
Match to any request.
Assert the request URI string with the given matcher.
Assert the request URI string.
Assert the {@link HttpMethod} of the request.
Expect a request to the given URI.
Assert request header values.
Access to request body matchers.
Access to request body matchers using a inspect a specific subset of the body. The JSON path expression can be a parameterized string using formatting specifiers as defined in {@link String#format(String, Object...)}.
Access to request body matchers using a inspect a specific subset of the body and a Hamcrest match for asserting the value found at the JSON path.
Access to request body matchers using an XPath to inspect a specific subset of the body. The XPath expression can be a parameterized string using formatting specifiers as defined in {@link String#format(String, Object...)}.
Access to response body matchers using an XPath to inspect a specific subset of the body. The XPath expression can be a parameterized string using formatting specifiers as defined in {@link String#format(String, Object...)}.
Class constructor, not for direct instantiation. Use {@link MockRestRequestMatchers#xpath(String, Object...)} or {@link MockRestRequestMatchers#xpath(String, Map, Object...)}. formatting specifiers defined in {@link String#format(String, Object...)}
Apply the XPath and assert it with the given {@code Matcher<Node>}.
Assert that content exists at the given XPath.
Assert that content does not exist at the given XPath.
Apply the XPath and assert the number of nodes found with the given {@code Matcher<Integer>}.
Apply the XPath and assert the number of nodes found.
Apply the XPath and assert the String content found with the given matcher.
Apply the XPath and assert the String content found.
Apply the XPath and assert the number found with the given matcher.
Apply the XPath and assert the number of nodes found.
Apply the XPath and assert the boolean value found.
Protected constructor. Use static factory methods in {@link MockRestResponseCreators}.
Set the body as a UTF-8 String.
Set the body as a byte array.
Set the body as a {@link Resource}.
Set the {@code Content-Type} header.
Set the {@code Location} header.
Copy all given headers.
{@code ResponseCreator} for a 200 response (OK).
{@code ResponseCreator} for a 200 response (OK) with String body.
{@code ResponseCreator} for a 200 response (OK) with byte[] body.
{@code ResponseCreator} for a 200 response (OK) content with {@link Resource}-based body.
{@code ResponseCreator} for a 201 response (CREATED) with a 'Location' header.
{@code ResponseCreator} for a 204 response (NO_CONTENT).
{@code ResponseCreator} for a 400 response (BAD_REQUEST).
{@code ResponseCreator} for a 401 response (UNAUTHORIZED).
{@code ResponseCreator} for a 500 response (SERVER_ERROR).
{@code ResponseCreator} with a specific HTTP status.
Sub-classes must implement the actual validation of the request matching it to a declared expectation.
Return details of executed requests.
Return an {@code AssertionError} that a sub-class can raise for an unexpected request.
Create a new request expectation that should be called a number of times as indicated by {@code RequestCount}.
Private constructor. See static factory methods in this class.
Return the {@code min} boundary of the expected count range.
Return the {@code max} boundary of the expected count range.
Exactly once.
Many times (range of 1..Integer.MAX_VALUE).
Exactly N times.
At least {@code min} number of times.
At most {@code max} number of times.
Between {@code min} and {@code max} number of times.
Private constructor with {@code RequestExpectationManager}. See static builder methods and {@code createServer} shortcut methods.
Set up an expectation for a single HTTP request. The returned {@link ResponseActions} can be used to set up further expectations as well as to define the response. <p>This method may be invoked any number times before starting to make request through the underlying {@code RestTemplate} in order to set up all expected requests.
An alternative to {@link #expect(RequestMatcher)} with an indication how many times the request is expected to be executed. <p>When request expectations have an expected count greater than one, only the first execution is expected to match the order of declaration. Subsequent request executions may be inserted anywhere thereafter.
Verify that all expected requests set up via {@link #expect(RequestMatcher)} were indeed performed.
Return a builder for a {@code MockRestServiceServer} that should be used to reply to the given {@code RestTemplate}.
Return a builder for a {@code MockRestServiceServer} that should be used to reply to the given {@code AsyncRestTemplate}.
Return a builder for a {@code MockRestServiceServer} that should be used to reply to the given {@code RestGatewaySupport}.
A shortcut for {@code bindTo(restTemplate).build()}.
A shortcut for {@code bindTo(asyncRestTemplate).build()}.
A shortcut for {@code bindTo(restGateway).build()}.
Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied {@link MockMvc} instance.
Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied {@link WebApplicationContext}. instance from; never {@code null}
Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied {@link WebApplicationContext} and {@link MockMvcConfigurer}. instance from; never {@code null}
Specify whether JavaScript should be enabled. <p>Default is {@code true}.
Supply the {@code WebConnectionHtmlUnitDriver} that the driver {@linkplain #build built} by this builder should delegate to when processing non-{@linkplain WebRequestMatcher matching} requests. for requests that do not match; never {@code null}
Build the {@link HtmlUnitDriver} configured via this builder. <p>The returned driver will use the configured {@link MockMvc} instance for processing any {@linkplain WebRequestMatcher matching} requests and a delegate {@code HtmlUnitDriver} for all other requests. <p>If a {@linkplain #withDelegate delegate} has been explicitly configured, it will be used; otherwise, a default {@code WebConnectionHtmlUnitDriver} with the {@link BrowserVersion} set to {@link BrowserVersion#CHROME CHROME} will be configured as the delegate.
Modify the supplied {@link WebClient}. <p>The default implementation simply returns the supplied client unmodified. <p>Subclasses can override this method to customize the {@code WebClient} that the {@link HtmlUnitDriver} uses.
Access the current {@link WebConnection} for the {@link WebClient}.
Set the {@link WebConnection} to be used with the {@link WebClient}.
Gets the current {@link WebClient}
Create a new {@code HostRequestMatcher} for the given hosts &mdash; for example: {@code "localhost"}, {@code "example.com:443"}, etc.
Construct a new {@code HtmlUnitRequestBuilder}. to currently managed {@link HttpSession} objects; never {@code null} {@link MockHttpServletRequest}; never {@code null}
Set the contextPath to be used. <p>The value may be null in which case the first path segment of the URL is turned into the contextPath. Otherwise it must conform to {@link HttpServletRequest#getContextPath()} which states it can be an empty string, or it must start with a "/" and not end with a "/".
Create a new {@code MockMvcWebClientBuilder} based on the supplied {@link MockMvc} instance.
Create a new {@code MockMvcWebClientBuilder} based on the supplied {@link WebApplicationContext}. instance from; never {@code null}
Create a new {@code MockMvcWebClientBuilder} based on the supplied {@link WebApplicationContext} and {@link MockMvcConfigurer}. instance from; never {@code null}
Supply the {@code WebClient} that the client {@linkplain #build built} by this builder should delegate to when processing non-{@linkplain WebRequestMatcher matching} requests. that do not match; never {@code null}
Build the {@link WebClient} configured via this builder. <p>The returned client will use the configured {@link MockMvc} instance for processing any {@linkplain WebRequestMatcher matching} requests and a delegate {@code WebClient} for all other requests. <p>If a {@linkplain #withDelegate delegate} has been explicitly configured, it will be used; otherwise, a default {@code WebClient} will be configured as the delegate.
Create a new instance that assumes the context path of the application is {@code ""} (i.e., the root context). {@code ""} as the context path.
Create a new instance with the specified context path. <p>The path may be {@code null} in which case the first path segment of the URL is turned into the contextPath. Otherwise it must conform to {@link javax.servlet.http.HttpServletRequest#getContextPath()} which states that it can be an empty string and otherwise must start with a "/" character and not end with a "/" character.
Validate the supplied {@code contextPath}. <p>If the value is not {@code null}, it must conform to {@link javax.servlet.http.HttpServletRequest#getContextPath()} which states that it can be an empty string and otherwise must start with a "/" character and not end with a "/" character.
Create a new instance using the supplied {@link MockMvc} instance.
Create a new instance using the supplied {@link WebApplicationContext}. instance from; never {@code null}
Create a new instance using the supplied {@link WebApplicationContext} and {@link MockMvcConfigurer}. instance from; never {@code null}
Create a new {@link WebConnection} that will use a {@link MockMvc} instance if one of the specified {@link WebRequestMatcher} instances matches. the specified {@code WebRequestMatcher} instances matches; never {@code null} instance if one of the specified {@code WebRequestMatcher} matches
Package private constructor. To get an instance, use static factory methods in {@link MockMvcRequestBuilders}. <p>Although this class cannot be extended, additional ways to initialize the {@code MockHttpServletRequest} can be plugged in via {@link #with(RequestPostProcessor)}.
Alternative to {@link #MockHttpServletRequestBuilder(HttpMethod, String, Object...)} with a pre-built URI.
Alternative constructor for custom HTTP methods.
Add a request parameter to the {@link MockHttpServletRequest}. <p>If called more than once, new values get added to existing ones.
Add a map of request parameters to the {@link MockHttpServletRequest}, for example when testing a form submission. <p>If called more than once, new values get added to existing ones.
Add a header to the request. Values are always added.
Add all headers to the request. Values are always added.
Set the 'Content-Type' header of the request.
Set the 'Accept' header to the given media type(s).
Set the request body.
Set the request body as a UTF-8 String.
Add the given cookies to the request. Cookies are always added.
Set the locale of the request.
Set the character encoding of the request.
Set a request attribute.
Set a session attribute.
Set session attributes.
Set an "input" flash attribute.
Set flash attributes.
Set the HTTP session to use, possibly re-used across requests. <p>Individual attributes provided via {@link #sessionAttr(String, Object)} override the content of the session provided here.
Set the principal of the request.
Specify the portion of the requestURI that represents the context path. The context path, if specified, must match to the start of the request URI. <p>In most cases, tests can be written by omitting the context path from the requestURI. This is because most applications don't actually depend on the name under which they're deployed. If specified here, the context path must start with a "/" and must not end with a "/".
Specify the portion of the requestURI that represents the path to which the Servlet is mapped. This is typically a portion of the requestURI after the context path. <p>In most cases, tests can be written by omitting the servlet path from the requestURI. This is because most applications don't actually depend on the prefix to which a servlet is mapped. For example if a Servlet is mapped to {@code "/main/*"}, tests can be written with the requestURI {@code "/accounts/1"} as opposed to {@code "/main/accounts/1"}. If specified here, the servletPath must start with a "/" and must not end with a "/".
Specify the portion of the requestURI that represents the pathInfo. <p>If left unspecified (recommended), the pathInfo will be automatically derived by removing the contextPath and the servletPath from the requestURI and using any remaining part. If specified here, the pathInfo must start with a "/". <p>If specified, the pathInfo will be used as is.
Set the secure property of the {@link ServletRequest} indicating use of a secure channel, such as HTTPS.
Create a new {@link MockHttpServletRequest} based on the supplied {@code ServletContext}. <p>Can be overridden in subclasses.
Update the contextPath, servletPath, and pathInfo of the request.
Package-private constructor. Use static factory methods in {@link MockMvcRequestBuilders}. <p>For other ways to initialize a {@code MockMultipartHttpServletRequest}, see {@link #with(RequestPostProcessor)} and the {@link RequestPostProcessor} extension point.
Create a new MockMultipartFile with the given content.
Add the given MockMultipartFile.
Create a {@link MockHttpServletRequestBuilder} for a GET request.
Create a {@link MockHttpServletRequestBuilder} for a POST request.
Create a {@link MockHttpServletRequestBuilder} for a PUT request.
Create a {@link MockHttpServletRequestBuilder} for a PATCH request.
Create a {@link MockHttpServletRequestBuilder} for a DELETE request.
Create a {@link MockHttpServletRequestBuilder} for an OPTIONS request.
Create a {@link MockHttpServletRequestBuilder} for a HEAD request.
Create a {@link MockHttpServletRequestBuilder} for a request with the given HTTP method.
Alternative factory method that allows for custom HTTP verbs (e.g. WebDAV).
Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.
Create a {@link RequestBuilder} for an async dispatch from the {@link MvcResult} of the request that started async processing. <p>Usage involves performing a request that starts async processing first: <pre class="code"> MvcResult mvcResult = this.mockMvc.perform(get("/1")) .andExpect(request().asyncStarted()) .andReturn(); </pre> <p>And then performing the async dispatch re-using the {@code MvcResult}: <pre class="code"> this.mockMvc.perform(asyncDispatch(mvcResult)) .andExpect(status().isOk()) .andExpect(content().contentType(MediaType.APPLICATION_JSON)) .andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}")); </pre>
Protected constructor. Use {@link MockMvcResultMatchers#content()}.
Assert the ServletResponse content type. The given content type must fully match including type, sub-type, and parameters. For checking only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.
Assert the ServletResponse content type after parsing it as a MediaType. The given content type must fully match including type, sub-type, and parameters. For checking only the type and sub-type see {@link #contentTypeCompatibleWith(MediaType)}.
Assert the ServletResponse content type is compatible with the given content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.
Assert the character encoding in the ServletResponse.
Assert the response body content with a Hamcrest {@link Matcher}. <pre class="code"> mockMvc.perform(get("/path")) .andExpect(content(containsString("text"))); </pre>
Assert the response body content as a String.
Assert the response body content as a byte array.
Parse the response content and the given string as XML and assert the two are "similar" - i.e. they contain the same elements and attributes regardless of order. <p>Use of this matcher requires the <a
Parse the response content as {@link Node} and apply the given Hamcrest {@link Matcher}.
Parse the response content as {@link DOMSource} and apply the given Hamcrest {@link Matcher}.
Parse the expected and actual strings as JSON and assert the two are "similar" - i.e. they contain the same attribute-value pairs regardless of formatting with a lenient checking (extensible, and non-strict array ordering).
Parse the response content and the given string as JSON and assert the two are "similar" - i.e. they contain the same attribute-value pairs regardless of formatting. <p>Can compare in two modes, depending on {@code strict} parameter value: <ul> </ul> <p>Use of this matcher requires the <a
Assert a cookie value with the given Hamcrest {@link Matcher}.
Assert a cookie value.
Assert a cookie exists. The existence check is irrespective of whether max age is 0 (i.e. expired).
Assert a cookie does not exist. Note that the existence check is irrespective of whether max age is 0, i.e. expired.
Assert a cookie's maxAge with a Hamcrest {@link Matcher}.
Assert a cookie's maxAge value.
Assert a cookie path with a Hamcrest {@link Matcher}.
Assert a cookie's domain with a Hamcrest {@link Matcher}.
Assert a cookie's domain value.
Assert a cookie's comment with a Hamcrest {@link Matcher}.
Assert a cookie's comment value.
Assert a cookie's version with a Hamcrest {@link Matcher}
Assert a cookie's version value.
Assert whether the cookie must be sent over a secure protocol or not.
Assert a flash attribute's value with the given Hamcrest {@link Matcher}.
Assert a flash attribute's value.
Assert the existence of the given flash attributes.
Assert the number of flash attributes.
Assert the type of the handler that processed the request.
Assert the controller method used to process the request. The expected method is specified through a "mock" controller method invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}. <p>For example given this controller: <pre class="code"> &#064;RestController static class SimpleController { </pre> <p>A test can be performed: <pre class="code"> mockMvc.perform(get("/")) </pre>
Assert the name of the controller method used to process the request using the given Hamcrest {@link Matcher}.
Assert the name of the controller method used to process the request.
Assert the controller method used to process the request.
Assert the primary value of the response header with the given Hamcrest String {@code Matcher}.
Assert the values of the response header with the given Hamcrest Iterable {@link Matcher}.
Assert the primary value of the response header as a String value.
Assert the values of the response header as String values.
Assert that the named response header does not exist.
Assert the primary value of the named response header as a {@code long}. <p>The {@link ResultMatcher} returned by this method throws an {@link AssertionError} if the response does not contain the specified header, or if the supplied {@code value} does not match the primary value.
Assert the primary value of the named response header as a date String, using the preferred date format described in RFC 7231. <p>The {@link ResultMatcher} returned by this method throws an {@link AssertionError} if the response does not contain the specified header, or if the supplied {@code value} does not match the primary value.
Protected constructor. <p>Use {@link MockMvcResultMatchers#jsonPath(String, Object...)} or {@link MockMvcResultMatchers#jsonPath(String, Matcher)}. using formatting specifiers defined in {@link String#format(String, Object...)}
Configures the current {@code JsonPathResultMatchers} instance to verify that the JSON payload is prepended with the given prefix. <p>Use this method if the JSON payloads are prefixed to avoid Cross Site Script Inclusion (XSSI) attacks.
Evaluate the JSON path expression against the response content and assert the resulting value with the given Hamcrest {@link Matcher}.
Evaluate the JSON path expression against the response content and assert that the result is equal to the supplied value.
Evaluate the JSON path expression against the response content and assert that a non-null value exists at the given path. <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite definite}, this method asserts that the value at the given path is not <em>empty</em>.
Evaluate the JSON path expression against the response content and assert that a value does not exist at the given path. <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite definite}, this method asserts that the value at the given path is <em>empty</em>.
Evaluate the JSON path expression against the response content and assert that an empty value exists at the given path. <p>For the semantics of <em>empty</em>, consult the Javadoc for {@link org.springframework.util.ObjectUtils#isEmpty(Object)}.
Evaluate the JSON path expression against the response content and assert that a non-empty value exists at the given path. <p>For the semantics of <em>empty</em>, consult the Javadoc for {@link org.springframework.util.ObjectUtils#isEmpty(Object)}.
Evaluate the JSON path expression against the response content and assert that the result is a {@link String}.
Evaluate the JSON path expression against the response content and assert that the result is a {@link Boolean}.
Evaluate the JSON path expression against the response content and assert that the result is a {@link Number}.
Evaluate the JSON path expression against the response content and assert that the result is an array.
Evaluate the JSON path expression against the response content and assert that the result is a {@link java.util.Map}.
Log {@link MvcResult} details as a {@code DEBUG} log message via Apache Commons Logging using the log category {@code org.springframework.test.web.servlet.result}.
Print {@link MvcResult} details to the "standard" output stream.
Print {@link MvcResult} details to the supplied {@link OutputStream}.
Print {@link MvcResult} details to the supplied {@link Writer}.
Access to request-related assertions.
Access to assertions for the handler that handled the request.
Access to model-related assertions.
Access to assertions on the selected view.
Access to flash attribute assertions.
Asserts the request was forwarded to the given URL. <p>This methods accepts only exact matches.
Asserts the request was forwarded to the given URL. <p>This methods accepts {@link org.springframework.util.AntPathMatcher} expressions.
Asserts the request was redirected to the given URL. <p>This methods accepts only exact matches.
Asserts the request was redirected to the given URL. <p>This method accepts {@link org.springframework.util.AntPathMatcher} expressions.
Access to response status assertions.
Access to response header assertions.
Access to response body assertions.
Access to response body assertions using a to inspect a specific subset of the body. <p>The JSON path expression can be a parameterized string using formatting specifiers as defined in {@link String#format(String, Object...)}.
Access to response body assertions using a to inspect a specific subset of the body and a Hamcrest matcher for asserting the value found at the JSON path.
Access to response body assertions using an XPath expression to inspect a specific subset of the body. <p>The XPath expression can be a parameterized string using formatting specifiers as defined in {@link String#format(String, Object...)}.
Access to response cookie assertions.
Assert a model attribute value with the given Hamcrest {@link Matcher}.
Assert a model attribute value.
Assert the given model attributes exist.
Assert the given model attributes do not exist
Assert the given model attribute(s) have errors.
Assert the given model attribute(s) have errors.
Assert the given model attribute(s) do not have errors.
Assert the given model attribute field(s) have errors.
Assert a field error code for a model attribute using exact String match.
Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}.
Assert the total number of errors in the model.
Assert the model has errors.
Assert the model has no errors.
Assert the number of model attributes.
Protected constructor.
Print the request.
Print the handler.
Print exceptions resolved through a HandlerExceptionResolver.
Print the ModelAndView.
Print "output" flash attributes.
Print the response.
Print the supplied cookies in a human-readable form, assuming the {@link Cookie} implementation does not provide its own {@code toString()}.
Assert whether asynchronous processing started, usually as a result of a controller method returning {@link Callable} or {@link DeferredResult}. <p>The test will await the completion of a {@code Callable} so that {@link #asyncResult(Matcher)} can be used to assert the resulting value. Neither a {@code Callable} nor a {@code DeferredResult} will complete processing all the way since a {@link MockHttpServletRequest} does not perform asynchronous dispatches.
Assert that asynchronous processing was not started.
Assert the result from asynchronous processing with the given matcher. <p>This method can be used when a controller method returns {@link Callable} or {@link WebAsyncTask}.
Assert the result from asynchronous processing. <p>This method can be used when a controller method returns {@link Callable} or {@link WebAsyncTask}. The value matched is the value returned from the {@code Callable} or the exception raised.
Assert a request attribute value with the given Hamcrest {@link Matcher}.
Assert a request attribute value.
Assert a session attribute value with the given Hamcrest {@link Matcher}.
Assert a session attribute value.
Assert the response status code with the given Hamcrest {@link Matcher}.
Assert the response status code is equal to an integer value.
Assert the response status code is in the 1xx range.
Assert the response status code is in the 2xx range.
Assert the response status code is in the 3xx range.
Assert the response status code is in the 4xx range.
Assert the response status code is in the 5xx range.
Assert the Servlet response error message with the given Hamcrest {@link Matcher}.
Assert the Servlet response error message.
Assert the response status code is {@code HttpStatus.CONTINUE} (100).
Assert the response status code is {@code HttpStatus.SWITCHING_PROTOCOLS} (101).
Assert the response status code is {@code HttpStatus.PROCESSING} (102).
Assert the response status code is {@code HttpStatus.CHECKPOINT} (103).
Assert the response status code is {@code HttpStatus.OK} (200).
Assert the response status code is {@code HttpStatus.CREATED} (201).
Assert the response status code is {@code HttpStatus.ACCEPTED} (202).
Assert the response status code is {@code HttpStatus.NON_AUTHORITATIVE_INFORMATION} (203).
Assert the response status code is {@code HttpStatus.NO_CONTENT} (204).
Assert the response status code is {@code HttpStatus.RESET_CONTENT} (205).
Assert the response status code is {@code HttpStatus.PARTIAL_CONTENT} (206).
Assert the response status code is {@code HttpStatus.MULTI_STATUS} (207).
Assert the response status code is {@code HttpStatus.ALREADY_REPORTED} (208).
Assert the response status code is {@code HttpStatus.IM_USED} (226).
Assert the response status code is {@code HttpStatus.MULTIPLE_CHOICES} (300).
Assert the response status code is {@code HttpStatus.MOVED_PERMANENTLY} (301).
Assert the response status code is {@code HttpStatus.FOUND} (302).
Assert the response status code is {@code HttpStatus.SEE_OTHER} (303).
Assert the response status code is {@code HttpStatus.NOT_MODIFIED} (304).
Assert the response status code is {@code HttpStatus.TEMPORARY_REDIRECT} (307).
Assert the response status code is {@code HttpStatus.PERMANENT_REDIRECT} (308).
Assert the response status code is {@code HttpStatus.BAD_REQUEST} (400).
Assert the response status code is {@code HttpStatus.UNAUTHORIZED} (401).
Assert the response status code is {@code HttpStatus.PAYMENT_REQUIRED} (402).
Assert the response status code is {@code HttpStatus.FORBIDDEN} (403).
Assert the response status code is {@code HttpStatus.NOT_FOUND} (404).
Assert the response status code is {@code HttpStatus.METHOD_NOT_ALLOWED} (405).
Assert the response status code is {@code HttpStatus.NOT_ACCEPTABLE} (406).
Assert the response status code is {@code HttpStatus.PROXY_AUTHENTICATION_REQUIRED} (407).
Assert the response status code is {@code HttpStatus.REQUEST_TIMEOUT} (408).
Assert the response status code is {@code HttpStatus.CONFLICT} (409).
Assert the response status code is {@code HttpStatus.GONE} (410).
Assert the response status code is {@code HttpStatus.LENGTH_REQUIRED} (411).
Assert the response status code is {@code HttpStatus.PRECONDITION_FAILED} (412).
Assert the response status code is {@code HttpStatus.PAYLOAD_TOO_LARGE} (413).
Assert the response status code is {@code HttpStatus.REQUEST_URI_TOO_LONG} (414).
Assert the response status code is {@code HttpStatus.UNSUPPORTED_MEDIA_TYPE} (415).
Assert the response status code is {@code HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE} (416).
Assert the response status code is {@code HttpStatus.EXPECTATION_FAILED} (417).
Assert the response status code is {@code HttpStatus.I_AM_A_TEAPOT} (418).
Assert the response status code is {@code HttpStatus.UNPROCESSABLE_ENTITY} (422).
Assert the response status code is {@code HttpStatus.LOCKED} (423).
Assert the response status code is {@code HttpStatus.FAILED_DEPENDENCY} (424).
Assert the response status code is {@code HttpStatus.UPGRADE_REQUIRED} (426).
Assert the response status code is {@code HttpStatus.PRECONDITION_REQUIRED} (428).
Assert the response status code is {@code HttpStatus.TOO_MANY_REQUESTS} (429).
Assert the response status code is {@code HttpStatus.REQUEST_HEADER_FIELDS_TOO_LARGE} (431).
Assert the response status code is {@code HttpStatus.UNAVAILABLE_FOR_LEGAL_REASONS} (451).
Assert the response status code is {@code HttpStatus.INTERNAL_SERVER_ERROR} (500).
Assert the response status code is {@code HttpStatus.NOT_IMPLEMENTED} (501).
Assert the response status code is {@code HttpStatus.BAD_GATEWAY} (502).
Assert the response status code is {@code HttpStatus.SERVICE_UNAVAILABLE} (503).
Assert the response status code is {@code HttpStatus.GATEWAY_TIMEOUT} (504).
Assert the response status code is {@code HttpStatus.HTTP_VERSION_NOT_SUPPORTED} (505).
Assert the response status code is {@code HttpStatus.VARIANT_ALSO_NEGOTIATES} (506).
Assert the response status code is {@code HttpStatus.INSUFFICIENT_STORAGE} (507).
Assert the response status code is {@code HttpStatus.LOOP_DETECTED} (508).
Assert the response status code is {@code HttpStatus.BANDWIDTH_LIMIT_EXCEEDED} (509).
Assert the response status code is {@code HttpStatus.NOT_EXTENDED} (510).
Assert the response status code is {@code HttpStatus.NETWORK_AUTHENTICATION_REQUIRED} (511).
Match the expected response status to that of the HttpServletResponse
Assert the selected view name with the given Hamcrest {@link Matcher}.
Assert the selected view name.
Protected constructor, not for direct instantiation. Use {@link MockMvcResultMatchers#xpath(String, Object...)} or {@link MockMvcResultMatchers#xpath(String, Map, Object...)}. formatting specifiers defined in {@link String#format(String, Object...)}
Evaluate the XPath and assert the {@link Node} content found with the given Hamcrest {@link Matcher}.
Get the response encoding if explicitly defined in the response, {code null} otherwise.
Evaluate the XPath and assert that content exists.
Evaluate the XPath and assert that content doesn't exist.
Evaluate the XPath and assert the number of nodes found with the given Hamcrest {@link Matcher}.
Evaluate the XPath and assert the number of nodes found.
Apply the XPath and assert the {@link String} value found with the given Hamcrest {@link Matcher}.
Apply the XPath and assert the {@link String} value found.
Evaluate the XPath and assert the {@link Double} value found with the given Hamcrest {@link Matcher}.
Evaluate the XPath and assert the {@link Double} value found.
Evaluate the XPath and assert the {@link Boolean} value found.
Protected constructor. Not intended for direct instantiation.
Build a {@link MockMvc} instance using the given, fully initialized (i.e., <em>refreshed</em>) {@link WebApplicationContext}. <p>The {@link org.springframework.web.servlet.DispatcherServlet DispatcherServlet} will use the context to discover Spring MVC infrastructure and application controllers in it. The context must have been configured with a {@link javax.servlet.ServletContext ServletContext}.
Build a {@link MockMvc} instance by registering one or more {@code @Controller} instances and configuring Spring MVC infrastructure programmatically. <p>This allows full control over the instantiation and initialization of controllers and their dependencies, similar to plain unit tests while also making it possible to test one controller at a time. <p>When this builder is used, the minimum infrastructure required by the {@link org.springframework.web.servlet.DispatcherServlet DispatcherServlet} to serve requests with annotated controllers is created automatically and can be customized, resulting in configuration that is equivalent to what MVC Java configuration provides except using builder-style methods. <p>If the Spring MVC configuration of an application is relatively straight-forward &mdash; for example, when using the MVC namespace in XML or MVC Java config &mdash; then using this builder might be a good option for testing a majority of controllers. In such cases, a much smaller number of tests can be used to focus on testing and verifying the actual Spring MVC configuration.
Creates a new instance.
Protected constructor. Not intended for direct instantiation.
Register one or more {@link org.springframework.web.bind.annotation.ControllerAdvice ControllerAdvice} instances to be used in tests. <p>Normally {@code @ControllerAdvice} are auto-detected as long as they're declared as Spring beans. However since the standalone setup does not load any Spring configuration they need to be registered explicitly here instead much like controllers.
Set the message converters to use in argument resolvers and in return value handlers, which support reading and/or writing to the body of the request and response. If no message converters are added to the list, a default list of converters is added instead.
The default implementation used, assuming JSR-303 is on the classpath, is {@link org.springframework.validation.beanvalidation.LocalValidatorFactoryBean}.
Provide a conversion service with custom formatters and converters. If not set, a {@link DefaultFormattingConversionService} is used by default.
Add interceptors mapped to all incoming requests.
Add interceptors mapped to a set of path patterns.
Set a ContentNegotiationManager.
Specify the timeout value for async execution. In Spring MVC Test, this value is used to determine how to long to wait for async execution to complete so that a test can verify the results synchronously.
Provide custom resolvers for controller method arguments.
Provide custom handlers for controller method return values.
Set the HandlerExceptionResolver types to use as a list.
Set the HandlerExceptionResolver types to use as an array.
Set up view resolution with the given {@link ViewResolver}s. If not set, an {@link InternalResourceViewResolver} is used by default.
Sets up a single {@link ViewResolver} that always returns the provided view instance. This is a convenient shortcut if you need to use one View instance only -- e.g. rendering generated content (JSON, XML, Atom).
Provide a LocaleResolver instance. If not provided, the default one used is {@link AcceptHeaderLocaleResolver}.
Provide a custom FlashMapManager instance. If not provided, {@code SessionFlashMapManager} is used by default.
Whether to use suffix pattern match (".*") when matching patterns to requests. If enabled a method mapped to "/users" also matches to "/users.*". <p>The default value is {@code true}.
Whether to match to URLs irrespective of the presence of a trailing slash. If enabled a method mapped to "/users" also matches to "/users/". <p>The default value is {@code true}.
Set if ";" (semicolon) content should be stripped from the request URI. The value, if provided, is in turn set on {@link AbstractHandlerMapping#setRemoveSemicolonContent(boolean)}.
In a standalone setup there is no support for placeholder values embedded in request mappings. This method allows manually provided placeholder values so they can be resolved. Alternatively consider creating a test that initializes a {@link WebApplicationContext}.
Create a new instance with the given request and response.
Private constructor, not for direct instantiation.
A default request builder merged into every performed request.
Expectations to assert after every performed request.
General actions to apply after every performed request.
Perform a request and return a type that allows chaining further actions, such as asserting expectations, on the result. see static factory methods in {@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}
Create a new instance with the given web application context.
Assert whether or not a model attribute is available. {@code null})
Compare a given {@code expectedValue} to the value from the model bound under the given {@code modelName}. {@code null})
Inspect the {@code expectedModel} to see if all elements in the model appear and are equal.
Check to see if the view name in the ModelAndView matches the given {@code expectedName}.
Reset the state of the static context cache in {@link DefaultCacheAwareContextLoaderDelegate}.
Assert the statistics of the static context cache in {@link DefaultCacheAwareContextLoaderDelegate}.
Assert the statistics of the supplied context cache.
test## prefix required for @FixMethodOrder.
test## prefix required for @FixMethodOrder.
test## prefix required for @FixMethodOrder.
test## prefix required for @FixMethodOrder.
test##_ prefix is required for @FixMethodOrder.
test##_ prefix is required for @FixMethodOrder.
test## is required for @FixMethodOrder.
test## is required for @FixMethodOrder.
no expected exception!
Run the tests in the supplied {@code testClass}, using the {@link Runner} it is configured with (i.e., via {@link RunWith @RunWith}) or the default JUnit runner, and assert the expectations of the test execution. resulted in a failed assumption
Run the tests in the supplied {@code testClass}, using the specified {@link Runner}, and assert the expectations of the test execution. <p>If the specified {@code runnerClass} is {@code null}, the tests will be run with the runner that the test class is configured with (i.e., via {@link RunWith @RunWith}) or the default JUnit runner. if the implicit runner should be used resulted in a failed assumption
Asserts the <em>execution order</em> of 'before' and 'after' test method calls on {@link TestExecutionListener listeners} registered for the configured {@link TestContextManager}.
Convenience method for determining if a transaction is active for the current {@link Thread}.
Asserts whether or not a transaction is active for the current {@link Thread}.
Fails by throwing an {@code AssertionError} with the supplied {@code message}.
Assert the provided boolean {@code condition}, throwing {@code AssertionError} with the supplied {@code message} if the test result is {@code false}.
Verify that the breaking change introduced in <a <p>This code has been copied from {@link org.springframework.test.context.hierarchies.web.ControllerIntegrationTests}.
Create a new PersistenceExceptionTranslationAdvisor.
Create a new PersistenceExceptionTranslationAdvisor. PersistenceExceptionTranslators from
Set the 'repository' annotation type. The default repository annotation type is the {@link Repository} annotation. <p>This setter property exists so that developers can provide their own (non-Spring-specific) annotation type to indicate that a class has a repository role.
Add a PersistenceExceptionTranslator to the chained delegate list.
Return all registered PersistenceExceptionTranslator delegates (as array).
Abstract subclasses must override this to check their configuration. <p>Implementors should be marked as {@code final} if concrete subclasses are not supposed to override this template method themselves.
Return a single result object from the given Collection. <p>Returns {@code null} if 0 result objects found; throws an exception if more than 1 element found. element has been found in the given Collection
Return a single result object from the given Collection. <p>Throws an exception if 0 or more than 1 element found. element has been found in the given Collection has been found in the given Collection
Return a unique result object from the given Collection. <p>Returns {@code null} if 0 result objects found; throws an exception if more than 1 instance found. result object has been found in the given Collection
Return a unique result object from the given Collection. <p>Throws an exception if 0 or more than 1 instance found. result object has been found in the given Collection has been found in the given Collection
Return a unique int result from the given Collection. Throws an exception if 0 or more than 1 result objects found, of if the unique result object is not convertable to an int. result object has been found in the given Collection at all has been found in the given Collection in the collection is not convertable to an int
Return a unique long result from the given Collection. Throws an exception if 0 or more than 1 result objects found, of if the unique result object is not convertable to a long. result object has been found in the given Collection at all has been found in the given Collection in the collection is not convertable to a long
Return a translated exception if this is appropriate, otherwise return the input exception. the raw exception if it is not
Create a new PersistenceExceptionTranslationInterceptor for the given PersistenceExceptionTranslator.
Create a new PersistenceExceptionTranslationInterceptor, autodetecting PersistenceExceptionTranslators in the given BeanFactory. PersistenceExceptionTranslators from
Specify the PersistenceExceptionTranslator to use. <p>Default is to autodetect all PersistenceExceptionTranslators in the containing BeanFactory, using them in a chain.
Specify whether to always translate the exception ("true"), or whether throw the raw exception when declared, i.e. when the originating method signature's exception declarations allow for the raw exception to be thrown ("false"). <p>Default is "false". Switch this flag to "true" in order to always translate applicable exceptions, independent from the originating method signature. <p>Note that the originating method does not have to declare the specific exception. Any base class will do as well, even {@code throws Exception}: As long as the originating method does explicitly declare compatible exceptions, the raw exception will be rethrown. If you would like to avoid throwing raw exceptions in any case, switch this flag to "true".
Detect all PersistenceExceptionTranslators in the given BeanFactory. PersistenceExceptionTranslators from PersistenceExceptionTranslators found in the factory
Constructor for CannotAcquireLockException.
Constructor for CannotSerializeTransactionException.
Constructor for CleanupFailureDataAccessException. such as JDBC
Constructor for ConcurrencyFailureException.
Constructor for DataAccessException.
Constructor for DataAccessException. data access API such as JDBC)
Constructor for DataAccessResourceFailureException.
Constructor for DataIntegrityViolationException.
Constructor for DataRetrievalFailureException.
Constructor for DeadlockLoserDataAccessException.
Constructor for DuplicateKeyException.
Constructor for EmptyResultDataAccessException.
Constructor for IncorrectResultSizeDataAccessException.
Return the expected result size.
Return the actual result size (or -1 if unknown).
Constructor for IncorrectUpdateSemanticsDataAccessException.
Return whether data was updated. If this method returns false, there's nothing to roll back. <p>The default implementation always returns true. This can be overridden in subclasses.
Constructor for InvalidDataAccessApiUsageException.
Constructor for InvalidDataAccessResourceUsageException.
Constructor for NonTransientDataAccessException.
Constructor for NonTransientDataAccessException. data access API such as JDBC)
Constructor for NonTransientDataAccessResourceException.
Constructor for OptimisticLockingFailureException.
Constructor for PermissionDeniedDataAccessException. such as JDBC
Constructor for PessimisticLockingFailureException.
Constructor for QueryTimeoutException.
Constructor for RecoverableDataAccessException.
Constructor for RecoverableDataAccessException. data access API such as JDBC)
Constructor for TransientDataAccessException.
Constructor for TransientDataAccessException. data access API such as JDBC)
Constructor for TransientDataAccessResourceException.
Constructor for TypeMismatchDataAccessException.
Constructor for UncategorizedDataAccessException.
Create a new CciLocalTransactionManager instance.
Set the CCI ConnectionFactory that this instance should manage local transactions for.
Return the CCI ConnectionFactory that this instance manages local transactions for.
Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions into the Spring hierarchy of unchecked generic data access exceptions, simplifying calling code and making any exception that is thrown more meaningful. <p>Is aware of a corresponding Connection bound to the current thread, for example when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread if transaction synchronization is active (e.g. if in a JTA transaction). if the attempt to get a Connection failed
Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions into the Spring hierarchy of unchecked generic data access exceptions, simplifying calling code and making any exception that is thrown more meaningful. <p>Is aware of a corresponding Connection bound to the current thread, for example when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread if transaction synchronization is active (e.g. if in a JTA transaction). Note: If this is specified, a new Connection will be obtained for every call, without participating in a shared transactional Connection. if the attempt to get a Connection failed
Actually obtain a CCI Connection from the given ConnectionFactory. Same as {@link #getConnection}, but throwing the original ResourceException. <p>Is aware of a corresponding Connection bound to the current thread, for example when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread if transaction synchronization is active (e.g. if in a JTA transaction). <p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}.
Determine whether the given JCA CCI Connection is transactional, that is, bound to the current thread by Spring's transaction facilities. (may be {@code null})
Close the given Connection, obtained from the given ConnectionFactory, if it is not managed externally (that is, not bound to the thread). (if this is {@code null}, the call will be ignored) (can be {@code null})
Actually close the given Connection, obtained from the given ConnectionFactory. Same as {@link #releaseConnection}, but throwing the original ResourceException. <p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}. (if this is {@code null}, the call will be ignored) (can be {@code null})
Set the ConnectionSpec that this adapter should use for retrieving Connections. Default is none.
Set a ConnectionSpec for this proxy and the current thread. The given ConnectionSpec will be applied to all subsequent {@code getConnection()} calls on this ConnectionFactory proxy. <p>This will override any statically specified "connectionSpec" property.
Remove any ConnectionSpec for this proxy from the current thread. A statically specified ConnectionSpec applies again afterwards.
This implementation delegates to the {@code getConnection(ConnectionSpec)} method of the target ConnectionFactory, passing in the specified user credentials. If the specified username is empty, it will simply delegate to the standard {@code getConnection()} method of the target ConnectionFactory.
Create a new SingleConnectionFactory that always returns the given Connection.
Create a new SingleConnectionFactory that always returns a single Connection which it will lazily create via the given target ConnectionFactory.
Initialize the single underlying Connection. <p>Closes and reinitializes the Connection if an underlying Connection is present already.
Create a CCI Connection via this template's ConnectionFactory.
Wrap the given Connection with a proxy that delegates every method call to it but suppresses close calls. This is useful for allowing application code to handle a special framework Connection just like an ordinary Connection from a CCI ConnectionFactory.
Wrap the given Connection with a proxy that delegates every method call to it but delegates {@code close} calls to ConnectionFactoryUtils.
Set the ConnectionFactory to be used by this DAO.
Create a CciTemplate for the given ConnectionFactory. Only invoked if populating the DAO with a ConnectionFactory reference! <p>Can be overridden in subclasses to provide a CciTemplate instance with different configuration, or a custom CciTemplate subclass.
Return the ConnectionFactory used by this DAO.
Set the CciTemplate for this DAO explicitly, as an alternative to specifying a ConnectionFactory.
Return the CciTemplate for this DAO, pre-initialized with the ConnectionFactory or set explicitly.
Obtain a CciTemplate derived from the main template instance, inheriting the ConnectionFactory and other settings but overriding the ConnectionSpec used for obtaining Connections. template instance is supposed to obtain Connections for
Get a CCI Connection, either from the current transaction or a new one. if the attempt to get a Connection failed
Close the given CCI Connection, created via this bean's ConnectionFactory, if it isn't bound to the thread.
Create a new CommAreaRecord.
Construct a new CciTemplate, given a ConnectionFactory to obtain Connections from. Note: This will trigger eager initialization of the exception translator.
Construct a new CciTemplate, given a ConnectionFactory to obtain Connections from. Note: This will trigger eager initialization of the exception translator. (may be {@code null})
Set the CCI ConnectionFactory to obtain Connections from.
Return the CCI ConnectionFactory used by this template.
Set the CCI ConnectionSpec that this template instance is supposed to obtain Connections for.
Return the CCI ConnectionSpec used by this template, if any.
Set a RecordCreator that should be used for creating default output Records. <p>Default is none: When no explicit output Record gets passed into an {@code execute} method, CCI's {@code Interaction.execute} variant that returns an output Record will be called. <p>Specify a RecordCreator here if you always need to call CCI's {@code Interaction.execute} variant with a passed-in output Record. Unless there is an explicitly specified output Record, CciTemplate will then invoke this RecordCreator to create a default output Record instance.
Return a RecordCreator that should be used for creating default output Records.
Create a template derived from this template instance, inheriting the ConnectionFactory and other settings but overriding the ConnectionSpec used for obtaining Connections. instance is supposed to obtain Connections for
Execute the specified interaction on an EIS with CCI. All other interaction execution methods go through this. the interaction (connector-specific)
Create an indexed Record through the ConnectionFactory's RecordFactory.
Create a mapped Record from the ConnectionFactory's RecordFactory.
Invoke the given RecordCreator, converting JCA ResourceExceptions to Spring's DataAccessException hierarchy.
Return a RecordFactory for the given ConnectionFactory. <p>Default implementation returns the connector's RecordFactory if available, falling back to a NotSupportedRecordFactory placeholder. This allows to invoke a RecordCreator callback with a non-null RecordFactory reference in any case.
Close the given CCI Interaction and ignore any thrown exception. This is useful for typical finally blocks in manual CCI code.
Close the given CCI ResultSet and ignore any thrown exception. This is useful for typical finally blocks in manual CCI code.
Set the CciTemplate to be used by this operation. Alternatively, specify a CCI ConnectionFactory.
Return the CciTemplate used by this operation.
Set the CCI ConnectionFactory to be used by this operation.
Set the CCI InteractionSpec for this operation.
Return the CCI InteractionSpec for this operation.
Create a new MappingCommAreaQuery.
Convenient constructor with ConnectionFactory and specifications (connection and interaction).
Set a RecordCreator that should be used for creating default output Records. <p>Default is none: CCI's {@code Interaction.execute} variant that returns an output Record will be called. <p>Specify a RecordCreator here if you always need to call CCI's {@code Interaction.execute} variant with a passed-in output Record. This RecordCreator will then be invoked to create a default output Record instance.
Execute the interaction encapsulated by this operation object. by the {@code createInputRecord} method
Subclasses must implement this method to generate an input Record from an input object passed into the {@code execute} method. to a DataAccessException
Convenient constructor with ConnectionFactory and specifications (connection and interaction).
Execute the CCI interaction encapsulated by this operation object. <p>This method will call CCI's {@code Interaction.execute} variant that returns an output Record.
Execute the CCI interaction encapsulated by this operation object. <p>This method will call CCI's {@code Interaction.execute} variant with a passed-in output Record.
Constructor for CannotCreateRecordException.
Constructor for CannotGetCciConnectionException.
Constructor for CciOperationNotSupportedException.
Constructor for RecordTypeNotSupportedException.
Create a new BootstrapContextAwareProcessor for the given context.
Create a new ResourceAdapterApplicationContext for the given BootstrapContext. has been started with
Set the location of the context configuration files, within the resource adapter's deployment unit. This can be a delimited String that consists of multiple resource location, separated by commas, semicolons, whitespace, or line breaks. <p>This can be specified as "ContextConfigLocation" config property in the {@code ra.xml} deployment descriptor. <p>The default is "classpath:META-INF/applicationContext.xml".
Return the specified context configuration files.
Return a new {@link StandardEnvironment}. <p>Subclasses may override this method in order to supply a custom {@link ConfigurableEnvironment} implementation.
Build a Spring ApplicationContext for the given JCA BootstrapContext. <p>The default implementation builds a {@link ResourceAdapterApplicationContext} and delegates to {@link #loadBeanDefinitions} for actually parsing the specified configuration files.
Load the bean definitions into the given registry, based on the specified configuration files.
Set the the XA transaction manager to use for wrapping endpoint invocations, enlisting the endpoint resource in each such transaction. <p>The passed-in object may be a transaction manager which implements Spring's {@link org.springframework.transaction.jta.TransactionFactory} interface, or a plain {@link javax.transaction.TransactionManager}. <p>If no transaction manager is specified, the endpoint invocation will simply not be wrapped in an XA transaction. Check out your resource provider's ActivationSpec documentation for local transaction options of your particular provider.
Set the Spring TransactionFactory to use for wrapping endpoint invocations, enlisting the endpoint resource in each such transaction. <p>Alternatively, specify an appropriate transaction manager through the {@link #setTransactionManager "transactionManager"} property. <p>If no transaction factory is specified, the endpoint invocation will simply not be wrapped in an XA transaction. Check out your resource provider's ActivationSpec documentation for local transaction options of your particular provider.
Specify the name of the transaction, if any. <p>Default is none. A specified name will be passed on to the transaction manager, allowing to identify the transaction in a transaction monitor.
Specify the transaction timeout, if any. <p>Default is -1: rely on the transaction manager's default timeout. Specify a concrete timeout to restrict the maximum duration of each endpoint invocation.
Implementation of the JCA 1.7 {@code #getActivationName()} method, returning the bean name as set on this MessageEndpointFactory.
The alternative JCA 1.6 version of {@code createEndpoint}. <p>This implementation delegates to {@link #createEndpointInternal()}, ignoring the specified timeout. It is only here for JCA 1.6 compliance.
Create the actual endpoint instance, as a subclass of the {@link AbstractMessageEndpoint} inner class of this factory.
Specify the message listener object that the endpoint should expose (e.g. a {@link javax.jms.MessageListener} objects or {@link javax.resource.cci.MessageListener} implementation).
Set the JCA ResourceAdapter to manage endpoints for.
Return the JCA ResourceAdapter to manage endpoints for.
Set the JCA MessageEndpointFactory to activate, pointing to a MessageListener object that the endpoints will delegate to. <p>A MessageEndpointFactory instance may be shared across multiple endpoints (i.e. multiple GenericMessageEndpointManager instances), with different {@link #setActivationSpec ActivationSpec} objects applied.
Return the JCA MessageEndpointFactory to activate.
Set the JCA ActivationSpec to use for activating the endpoint. <p>Note that this ActivationSpec instance should not be shared across multiple ResourceAdapter instances.
Return the JCA ActivationSpec to use for activating the endpoint.
Set whether to auto-start the endpoint activation after this endpoint manager has been initialized and the context has been refreshed. <p>Default is "true". Turn this flag off to defer the endpoint activation until an explicit {#start()} call.
Specify the phase in which this endpoint manager should be started and stopped. The startup order proceeds from lowest to highest, and the shutdown order is the reverse of that. By default this value is Integer.MAX_VALUE meaning that this endpoint manager starts as late as possible and stops as soon as possible.
Set the JCA ManagerConnectionFactory that should be used to create the desired connection factory. <p>The ManagerConnectionFactory will usually be set up as separate bean (potentially as inner bean), populated with JavaBean properties: a ManagerConnectionFactory is encouraged to follow the JavaBean pattern by the JCA specification, analogous to a JDBC DataSource and a JDO PersistenceManagerFactory. <p>Note that the ManagerConnectionFactory implementation might expect a reference to its JCA 1.5 ResourceAdapter, expressed through the {@link javax.resource.spi.ResourceAdapterAssociation} interface. Simply inject the corresponding ResourceAdapter instance into its "resourceAdapter" bean property in this case, before passing the ManagerConnectionFactory into this LocalConnectionFactoryBean.
Set the JCA ConnectionManager that should be used to create the desired connection factory. <p>A ConnectionManager implementation for local usage is often included with a JCA connector. Such an included ConnectionManager might be set as default, with no need to explicitly specify one.
Specify the target JCA ResourceAdapter as class, to be instantiated with its default configuration. <p>Alternatively, specify a pre-configured ResourceAdapter instance through the "resourceAdapter" property.
Specify the target JCA ResourceAdapter, passed in as configured instance which hasn't been started yet. This will typically happen as an inner bean definition, configuring the ResourceAdapter instance through its vendor-specific bean properties.
Specify the JCA BootstrapContext to use for starting the ResourceAdapter. <p>Alternatively, you can specify the individual parts (such as the JCA WorkManager) as individual references.
Specify the JCA WorkManager to use for bootstrapping the ResourceAdapter.
Specify the JCA XATerminator to use for bootstrapping the ResourceAdapter.
Create a new SimpleBootstrapContext for the given WorkManager, with no XATerminator available.
Create a new SimpleBootstrapContext for the given WorkManager and XATerminator.
Identify a specific GlassFish thread pool to talk to. <p>The thread pool name matches the resource adapter name in default RAR deployment scenarios.
Identify a specific JBossWorkManagerMBean to talk to, through its JMX object name. <p>The default MBean name is "jboss.jca:service=WorkManager".
Obtain the default JBoss JCA WorkManager through a JMX lookup for the default JBossWorkManagerMBean.
Obtain the default JBoss JCA WorkManager through a JMX lookup for the JBossWorkManagerMBean.
Create a new DelegatingWork.
Specify the TaskExecutor to use for <i>synchronous</i> work execution (i.e. {@link #doWork} calls). <p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.
Specify the TaskExecutor to use for <i>asynchronous</i> work execution (i.e. {@link #startWork} and {@link #scheduleWork} calls). <p>This will typically (but not necessarily) be an {@link org.springframework.core.task.AsyncTaskExecutor} implementation. Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.
Execute the given Work on the specified TaskExecutor. (or -1 if not applicable or not known)
Create a new WorkManagerTaskExecutor for the given WorkManager.
Specify the JCA WorkManager instance to delegate to.
Set the JNDI name of the JCA WorkManager. <p>This can either be a fully qualified JNDI name, or the JNDI name relative to the current environment naming context if "resourceRef" is set to "true".
Set whether to let {@link #execute} block until the work has been actually started. <p>Uses the JCA {@code startWork} operation underneath, instead of the default {@code scheduleWork}.
Set whether to let {@link #execute} block until the work has been completed. <p>Uses the JCA {@code doWork} operation underneath, instead of the default {@code scheduleWork}.
Specify a JCA 1.5 WorkListener to apply, if any. <p>This shared WorkListener instance will be passed on to the WorkManager by all {@link #execute} calls on this TaskExecutor.
Obtain a default WorkManager to delegate to. Called if no explicit WorkManager or WorkManager JNDI name has been specified. <p>The default implementation returns a {@link SimpleTaskWorkManager}. Can be overridden in subclasses.
Create a default AnnotationTransactionAttributeSource, supporting public methods that carry the {@code Transactional} annotation or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.
Create a custom AnnotationTransactionAttributeSource, supporting public methods that carry the {@code Transactional} annotation or the EJB3 {@link javax.ejb.TransactionAttribute} annotation. the {@code Transactional} annotation only (typically for use with proxy-based AOP), or protected/private methods as well (typically used with AspectJ class weaving)
Create a custom AnnotationTransactionAttributeSource.
Determine the transaction attribute for the given method or class. <p>This implementation delegates to configured {@link TransactionAnnotationParser TransactionAnnotationParsers} for parsing known annotations into Spring's metadata attribute class. Returns {@code null} if it's not transactional. <p>Can be overridden to support custom annotations that carry transaction metadata. or {@code null} if none was found
Phase to bind the handling of an event to. <p>If no transaction is in progress, the event is not processed at all unless {@link #fallbackExecution} has been enabled explicitly.
Same signature as {@link #getTransactionAttribute}, but doesn't cache the result. {@link #getTransactionAttribute} is effectively a caching decorator for this method. <p>As of 4.1.8, this method can be overridden.
Should only public methods be allowed to have transactional semantics? <p>The default implementation returns {@code false}.
Set the transaction attribute source which is used to find transaction attributes. This should usually be identical to the source reference set on the transaction interceptor itself.
Create a new CompositeTransactionAttributeSource for the given sources.
Return the TransactionAttributeSource instances that this CompositeTransactionAttributeSource combines.
Create a new DefaultTransactionAttribute, with default settings. Can be modified through bean property setters.
Copy constructor. Definition can be modified through bean property setters.
Create a new DefaultTransactionAttribute with the the given propagation behavior. Can be modified through bean property setters. TransactionDefinition interface
Associate a qualifier value with this transaction attribute. <p>This may be used for choosing a corresponding transaction manager to process this specific transaction.
Return an identifying description for this transaction attribute. <p>Available to subclasses, for inclusion in their {@code toString()} result.
Create a DelegatingTransactionAttribute for the given target attribute.
Allows a transaction attribute to be specified, using the String form, for example, "PROPAGATION_REQUIRED".
Set a name/attribute map, consisting of "FQCN.method" method names (e.g. "com.mycompany.mycode.MyClass.myMethod") and {@link TransactionAttribute} instances (or Strings to be converted to {@code TransactionAttribute} instances). <p>Intended for configuration via setter injection, typically within a Spring bean factory. Relies on {@link #afterPropertiesSet()} being called afterwards.
Initialize the specified {@link #setMethodMap(java.util.Map) "methodMap"}, if any.
Add an attribute for a transactional method. <p>Method names can end or start with "*" for matching multiple methods.
Add an attribute for a transactional method. Method names can end or start with "*" for matching multiple methods.
Add an attribute for a transactional method.
Return if the given method name matches the mapped name. <p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches, as well as direct equality.
Set a name/attribute map, consisting of method names (e.g. "myMethod") and TransactionAttribute instances (or Strings to be converted to TransactionAttribute instances).
Parses the given properties into a name/attribute map. Expects method names as keys and String attributes definitions as values, parsable into TransactionAttribute instances via TransactionAttributeEditor.
Add an attribute for a transactional method. <p>Method names can be exact matches, or of the pattern "xxx*", "*xxx" or "*xxx*" for matching multiple methods.
Create a new instance of the {@code NoRollbackRuleAttribute} class for the supplied {@link Throwable} class.
Create a new instance of the {@code NoRollbackRuleAttribute} class for the supplied {@code exceptionName}.
Create a new instance of the {@code RollbackRuleAttribute} class. <p>This is the preferred way to construct a rollback rule that matches the supplied {@link Exception} class (and subclasses). of {@code Throwable} not a {@code Throwable} type or is {@code null}
Create a new instance of the {@code RollbackRuleAttribute} class for the given {@code exceptionName}. <p>This can be a substring, with no wildcard support at present. A value of "ServletException" would match {@code javax.servlet.ServletException} and subclasses, for example. <p><b>NB:</b> Consider carefully how specific the pattern is, and whether to include package information (which is not mandatory). For example, "Exception" will match nearly anything, and will probably hide other rules. "java.lang.Exception" would be correct if "Exception" was meant to define a rule for all checked exceptions. With more unusual exception names such as "BaseBusinessException" there's no need to use a fully package-qualified name. package-qualified class name {@code exceptionName} is {@code null} or empty
Return the pattern for the exception name.
Return the depth of the superclass matching. <p>{@code 0} means {@code ex} matches exactly. Returns {@code -1} if there is no match. Otherwise, returns depth with the lowest depth winning.
Create a new RuleBasedTransactionAttribute, with default settings. Can be modified through bean property setters.
Copy constructor. Definition can be modified through bean property setters.
Create a new DefaultTransactionAttribute with the the given propagation behavior. Can be modified through bean property setters. TransactionDefinition interface
Set the list of {@code RollbackRuleAttribute} objects (and/or {@code NoRollbackRuleAttribute} objects) to apply.
Return the list of {@code RollbackRuleAttribute} objects (never {@code null}).
Subclasses can use this to return the current TransactionInfo. Only subclasses that cannot handle all operations in one method, such as an AspectJ aspect involving distinct before and after advice, need to use this mechanism to get at the current TransactionInfo. An around advice such as an AOP Alliance MethodInterceptor can hold a reference to the TransactionInfo throughout the aspect method. <p>A TransactionInfo will be returned even if no transaction was created. The {@code TransactionInfo.hasTransaction()} method can be used to query this. <p>To find out about specific transaction characteristics, consider using TransactionSynchronizationManager's {@code isSynchronizationActive()} and/or {@code isActualTransactionActive()} methods.
Return the transaction status of the current method invocation. Mainly intended for code that wants to set the current transaction rollback-only but not throw an application exception. because the method was invoked outside an AOP invocation context
Specify the name of the default transaction manager bean.
Return the name of the default transaction manager bean.
Specify the <em>default</em> transaction manager to use to drive transactions. <p>The default transaction manager will be used if a <em>qualifier</em> has not been declared for a given transaction or if an explicit name for the default transaction manager bean has not been specified.
Return the default transaction manager, or {@code null} if unknown.
Set properties with method names as keys and transaction attribute descriptors (parsed via TransactionAttributeEditor) as values: e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly". <p>Note: Method names are always applied to the target class, no matter if defined in an interface or the class itself. <p>Internally, a NameMatchTransactionAttributeSource will be created from the given properties.
Set multiple transaction attribute sources which are used to find transaction attributes. Will build a CompositeTransactionAttributeSource for the given sources.
Set the transaction attribute source which is used to find transaction attributes. If specifying a String property value, a PropertyEditor will create a MethodMapTransactionAttributeSource from the value.
Return the transaction attribute source.
Return the BeanFactory to use for retrieving PlatformTransactionManager beans.
General delegate for around-advice-based subclasses, delegating to several other template methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager} as well as regular {@link PlatformTransactionManager} implementations.
Clear the cache.
Determine the specific transaction manager to use for the given transaction.
Prepare a TransactionInfo for the given attribute and status object. (used for monitoring and logging purposes)
Execute after successful completion of call, but not after an exception was handled. Do nothing if we didn't create a transaction.
Handle a throwable, completing the transaction. We may commit or roll back, depending on the configuration.
Reset the TransactionInfo ThreadLocal. <p>Call this in all cases: exception or normal return!
Return a String representation of this joinpoint (usually a Method call) for use in logging.
or whether we just have a placeholder to keep ThreadLocal stack integrity.
Create a new TransactionAttributeSourceAdvisor.
Set the transaction interceptor to use for this advisor.
Create a new TransactionInterceptor.
--------------------------------------------------------------------- Serialization support ---------------------------------------------------------------------
Set the default transaction manager. This will perform actual transaction management: This class is just a way of invoking it.
Set a pointcut, i.e a bean that can cause conditional invocation of the TransactionInterceptor depending on method and attributes passed. Note: Additional interceptors are always invoked.
Create a new JtaAfterCompletionSynchronization for the given synchronization objects.
Create a new JtaTransactionManager instance, to be configured as bean. Invoke {@code afterPropertiesSet} to activate the configuration.
Create a new JtaTransactionManager instance.
Set the JndiTemplate to use for JNDI lookups. A default one is used if not set.
Return the JndiTemplate used for JNDI lookups.
Set the JTA UserTransaction to use as direct reference. <p>Typically just used for local JTA setups; in a Java EE environment, the UserTransaction will always be fetched from JNDI.
Return the JTA UserTransaction that this transaction manager uses.
Set the JNDI name of the JTA UserTransaction. <p>Note that the UserTransaction will be autodetected at the Java EE default location "java:comp/UserTransaction" if not specified explicitly.
Set whether to autodetect the JTA UserTransaction at its default JNDI location "java:comp/UserTransaction", as specified by Java EE. Will proceed without UserTransaction if none found. <p>Default is "true", autodetecting the UserTransaction unless it has been specified explicitly. Turn this flag off to allow for JtaTransactionManager operating against the TransactionManager only, despite a default UserTransaction being available.
Set whether to cache the JTA UserTransaction object fetched from JNDI. <p>Default is "true": UserTransaction lookup will only happen at startup, reusing the same UserTransaction handle for all transactions of all threads. This is the most efficient choice for all application servers that provide a shared UserTransaction object (the typical case). <p>Turn this flag off to enforce a fresh lookup of the UserTransaction for every transaction. This is only necessary for application servers that return a new UserTransaction for every transaction, keeping state tied to the UserTransaction object itself rather than the current thread.
Set the JTA TransactionManager to use as direct reference. <p>A TransactionManager is necessary for suspending and resuming transactions, as this not supported by the UserTransaction interface. <p>Note that the TransactionManager will be autodetected if the JTA UserTransaction object implements the JTA TransactionManager interface too, as well as autodetected at various well-known fallback JNDI locations.
Return the JTA TransactionManager that this transaction manager uses, if any.
Set the JNDI name of the JTA TransactionManager. <p>A TransactionManager is necessary for suspending and resuming transactions, as this not supported by the UserTransaction interface. <p>Note that the TransactionManager will be autodetected if the JTA UserTransaction object implements the JTA TransactionManager interface too, as well as autodetected at various well-known fallback JNDI locations.
Set whether to autodetect a JTA UserTransaction object that implements the JTA TransactionManager interface too (i.e. the JNDI location for the TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction). Also checks the fallback JNDI locations "java:comp/TransactionManager" and "java:/TransactionManager". Will proceed without TransactionManager if none found. <p>Default is "true", autodetecting the TransactionManager unless it has been specified explicitly. Can be turned off to deliberately ignore an available TransactionManager, for example when there are known issues with suspend/resume and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast.
Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference. <p>A TransactionSynchronizationRegistry allows for interposed registration of transaction synchronizations, as an alternative to the regular registration methods on the JTA TransactionManager API. Also, it is an official part of the Java EE 5 platform, in contrast to the JTA TransactionManager itself. <p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and also from the UserTransaction/TransactionManager object if implemented there as well.
Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.
Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry. <p>Note that the TransactionSynchronizationRegistry will be autodetected at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry" if not specified explicitly.
Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object at its default JDNI location ("java:comp/TransactionSynchronizationRegistry") if the UserTransaction has also been obtained from JNDI, and also whether to fall back to checking whether the JTA UserTransaction/TransactionManager object implements the JTA TransactionSynchronizationRegistry interface too. <p>Default is "true", autodetecting the TransactionSynchronizationRegistry unless it has been specified explicitly. Can be turned off to delegate synchronization registration to the regular JTA TransactionManager API.
Set whether to allow custom isolation levels to be specified. <p>Default is "false", throwing an exception if a non-default isolation level is specified for a transaction. Turn this flag on if affected resource adapters check the thread-bound transaction context and apply the specified isolation levels individually (e.g. through an IsolationLevelDataSourceAdapter).
Initialize the UserTransaction as well as the TransactionManager handle.
Check the UserTransaction as well as the TransactionManager handle, assuming standard JTA requirements.
Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available. <p>To be called after {@link #initUserTransactionAndTransactionManager()}, since it may check the UserTransaction and TransactionManager handles.
Build a UserTransaction handle based on the given TransactionManager.
Look up the JTA UserTransaction in JNDI via the configured name. <p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set. Can be overridden in subclasses to provide a different UserTransaction object.
Look up the JTA TransactionManager in JNDI via the configured name. <p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set. Can be overridden in subclasses to provide a different TransactionManager object.
Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name. <p>Can be overridden in subclasses to provide a different TransactionManager object. TransactionSynchronizationRegistry
Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner. Only called if no "userTransaction" or "userTransactionName" specified. <p>The default implementation simply returns {@code null}.
Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner. Only called if no "transactionManager" or "transactionManagerName" specified. <p>The default implementation simply returns {@code null}.
Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry in a vendor-specific manner. <p>The default implementation simply returns {@code null}. or {@code null} if none found
Find the JTA UserTransaction through a default JNDI lookup: "java:comp/UserTransaction".
Find the JTA TransactionManager through autodetection: checking whether the UserTransaction object implements the TransactionManager, and checking the fallback JNDI locations.
Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection: checking whether the UserTransaction object or TransactionManager object implements it, and checking Java EE 5's standard JNDI location. <p>The default implementation simply returns {@code null}. or {@code null} if none found
Get a JTA transaction object for the given current UserTransaction. <p>Subclasses can override this to provide a JtaTransactionObject subclass, for example holding some additional JTA handle needed.
Perform a JTA begin on the JTA UserTransaction or TransactionManager. <p>This implementation only supports standard JTA functionality: that is, no per-transaction isolation levels and no transaction names. Can be overridden in subclasses, for specific JTA implementations. <p>Calls {@code applyIsolationLevel} and {@code applyTimeout} before invoking the UserTransaction's {@code begin} method. behavior, isolation level, read-only flag, timeout, and transaction name
Apply the given transaction isolation level. The default implementation will throw an exception for any level other than ISOLATION_DEFAULT. <p>To be overridden in subclasses for specific JTA implementations, as alternative to overriding the full {@link #doJtaBegin} method. cannot be applied
Apply the given transaction timeout. The default implementation will call {@code UserTransaction.setTransactionTimeout} for a non-default timeout value.
Perform a JTA suspend on the JTA TransactionManager. <p>Can be overridden in subclasses, for specific JTA implementations.
Perform a JTA resume on the JTA TransactionManager. <p>Can be overridden in subclasses, for specific JTA implementations.
Register a JTA synchronization on the JTA TransactionManager, for calling {@code afterCompletion} on the given Spring TransactionSynchronizations. <p>The default implementation registers the synchronizations on the JTA 1.1 TransactionSynchronizationRegistry, if available, or on the JTA TransactionManager's current Transaction - again, if available. If none of the two is available, a warning will be logged. <p>Can be overridden in subclasses, for specific JTA implementations.
Create a new JtaTransactionObject for the given JTA UserTransaction. (either a shared object or retrieved through a fresh per-transaction lookuip)
Return the JTA UserTransaction object for the current transaction.
Create a new ManagedTransactionAdapter for the given TransactionManager.
Return the JTA TransactionManager that this adapter delegates to.
Create a new SimpleTransactionFactory for the given TransactionManager
Create a new SpringJtaSynchronizationAdapter for the given Spring TransactionSynchronization and JTA TransactionManager.
Create a new SpringJtaSynchronizationAdapter for the given Spring TransactionSynchronization and JTA TransactionManager. <p>Note that this adapter will never perform a rollback-only call on WebLogic, since WebLogic Server is known to automatically mark the transaction as rollback-only in case of a {@code beforeCompletion} exception. Hence, on WLS, this constructor is equivalent to the single-arg constructor. setting in case of an exception thrown in {@code beforeCompletion} (can be omitted if the JTA provider itself marks the transaction rollback-only in such a scenario, which is required by the JTA specification as of JTA 1.1).
Create a new SpringJtaSynchronizationAdapter for the given Spring TransactionSynchronization and JTA TransactionManager. <p>Note that this adapter will never perform a rollback-only call on WebLogic, since WebLogic Server is known to automatically mark the transaction as rollback-only in case of a {@code beforeCompletion} exception. Hence, on WLS, this constructor is equivalent to the single-arg constructor. setting in case of an exception thrown in {@code beforeCompletion} (can be omitted if the JTA provider itself marks the transaction rollback-only in such a scenario, which is required by the JTA specification as of JTA 1.1)
Set the underlying JTA transaction to rollback-only.
Create a new UserTransactionAdapter for the given TransactionManager.
Create a new WebSphereUowTransactionManager.
Create a new WebSphereUowTransactionManager for the given UOWManager.
Set the WebSphere UOWManager to use as direct reference. <p>Typically just used for test setups; in a Java EE environment, the UOWManager will always be fetched from JNDI.
Set the JNDI name of the WebSphere UOWManager. The default "java:comp/websphere/UOWManager" is used if not set.
Look up the WebSphere UOWManager in JNDI via the configured name.
Obtain the WebSphere UOWManager from the default JNDI location "java:comp/websphere/UOWManager".
Set the transaction synchronization by the name of the corresponding constant in this class, e.g. "SYNCHRONIZATION_ALWAYS".
Set when this transaction manager should activate the thread-bound transaction synchronization support. Default is "always". <p>Note that transaction synchronization isn't supported for multiple concurrent transactions by different transaction managers. Only one transaction manager is allowed to activate it at any time.
Return if this transaction manager should activate the thread-bound transaction synchronization support.
Specify the default timeout that this transaction manager should apply if there is no timeout specified at the transaction level, in seconds. <p>Default is the underlying transaction infrastructure's default timeout, e.g. typically 30 seconds in case of a JTA provider, indicated by the {@code TransactionDefinition.TIMEOUT_DEFAULT} value.
Return the default timeout that this transaction manager should apply if there is no timeout specified at the transaction level, in seconds. <p>Returns {@code TransactionDefinition.TIMEOUT_DEFAULT} to indicate the underlying transaction infrastructure's default timeout.
Set whether nested transactions are allowed. Default is "false". <p>Typically initialized with an appropriate default by the concrete transaction manager subclass.
Return whether nested transactions are allowed.
Set whether existing transactions should be validated before participating in them. <p>When participating in an existing transaction (e.g. with PROPAGATION_REQUIRES or PROPAGATION_SUPPORTS encountering an existing transaction), this outer transaction's characteristics will apply even to the inner transaction scope. Validation will detect incompatible isolation level and read-only settings on the inner transaction definition and reject participation accordingly through throwing a corresponding exception. <p>Default is "false", leniently ignoring inner transaction settings, simply overriding them with the outer transaction's characteristics. Switch this flag to "true" in order to enforce strict validation.
Return whether existing transactions should be validated before participating in them.
Set whether to globally mark an existing transaction as rollback-only after a participating transaction failed. <p>Default is "true": If a participating transaction (e.g. with PROPAGATION_REQUIRES or PROPAGATION_SUPPORTS encountering an existing transaction) fails, the transaction will be globally marked as rollback-only. The only possible outcome of such a transaction is a rollback: The transaction originator <i>cannot</i> make the transaction commit anymore. <p>Switch this to "false" to let the transaction originator make the rollback decision. If a participating transaction fails with an exception, the caller can still decide to continue with a different path within the transaction. However, note that this will only work as long as all participating resources are capable of continuing towards a transaction commit even after a data access failure: This is generally not the case for a Hibernate Session, for example; neither is it for a sequence of JDBC insert/update/delete operations. <p><b>Note:</b>This flag only applies to an explicit rollback attempt for a subtransaction, typically caused by an exception thrown by a data access operation (where TransactionInterceptor will trigger a {@code PlatformTransactionManager.rollback()} call according to a rollback rule). If the flag is off, the caller can handle the exception and decide on a rollback, independent of the rollback rules of the subtransaction. This flag does, however, <i>not</i> apply to explicit {@code setRollbackOnly} calls on a {@code TransactionStatus}, which will always cause an eventual global rollback (as it might not throw an exception after the rollback-only call). <p>The recommended solution for handling failure of a subtransaction is a "nested transaction", where the global transaction can be rolled back to a savepoint taken at the beginning of the subtransaction. PROPAGATION_NESTED provides exactly those semantics; however, it will only work when nested transaction support is available. This is the case with DataSourceTransactionManager, but not with JtaTransactionManager.
Return whether to globally mark an existing transaction as rollback-only after a participating transaction failed.
Set whether to fail early in case of the transaction being globally marked as rollback-only. <p>Default is "false", only causing an UnexpectedRollbackException at the outermost transaction boundary. Switch this flag on to cause an UnexpectedRollbackException as early as the global rollback-only marker has been first detected, even from within an inner transaction boundary. <p>Note that, as of Spring 2.0, the fail-early behavior for global rollback-only markers has been unified: All transaction managers will by default only cause UnexpectedRollbackException at the outermost transaction boundary. This allows, for example, to continue unit tests even after an operation failed and the transaction will never be completed. All transaction managers will only fail earlier if this flag has explicitly been set to "true".
Return whether to fail early in case of the transaction being globally marked as rollback-only.
Set whether {@code doRollback} should be performed on failure of the {@code doCommit} call. Typically not necessary and thus to be avoided, as it can potentially override the commit exception with a subsequent rollback exception. <p>Default is "false".
Return whether {@code doRollback} should be performed on failure of the {@code doCommit} call.
Create a TransactionStatus for an existing transaction.
Create a new TransactionStatus for the given arguments, also initializing transaction synchronization as appropriate.
Create a TransactionStatus instance for the given arguments.
Initialize transaction synchronization as appropriate.
Determine the actual timeout to use for the given definition. Will fall back to this manager's default timeout if the transaction definition doesn't specify a non-default value.
Suspend the given transaction. Suspends transaction synchronization first, then delegates to the {@code doSuspend} template method. (or {@code null} to just suspend active synchronizations, if any) (or {@code null} if neither transaction nor synchronization active)
Resume the given transaction. Delegates to the {@code doResume} template method first, then resuming transaction synchronization. as returned by {@code suspend} (or {@code null} to just resume synchronizations, if any)
Resume outer transaction after inner transaction begin failed.
Suspend all current synchronizations and deactivate transaction synchronization for the current thread.
Reactivate transaction synchronization for the current thread and resume all given synchronizations.
Process an actual commit. Rollback-only flags have already been checked and applied.
Process an actual rollback. The completed flag has already been checked.
Invoke {@code doRollback}, handling rollback exceptions properly.
Trigger {@code beforeCommit} callbacks.
Trigger {@code beforeCompletion} callbacks.
Trigger {@code afterCommit} callbacks.
Trigger {@code afterCompletion} callbacks.
Actually invoke the {@code afterCompletion} methods of the given Spring TransactionSynchronization objects. <p>To be called by this abstract manager itself, or by special implementations of the {@code registerAfterCompletionWithExistingTransaction} callback. constants in the TransactionSynchronization interface
Clean up after completion, clearing synchronization if necessary, and invoking doCleanupAfterCompletion.
Return a transaction object for the current transaction state. <p>The returned object will usually be specific to the concrete transaction manager implementation, carrying corresponding transaction state in a modifiable fashion. This object will be passed into the other template methods (e.g. doBegin and doCommit), either directly or as part of a DefaultTransactionStatus instance. <p>The returned object should contain information about any existing transaction, that is, a transaction that has already started before the current {@code getTransaction} call on the transaction manager. Consequently, a {@code doGetTransaction} implementation will usually look for an existing transaction and store corresponding state in the returned transaction object. if transaction support is not available
Return whether to use a savepoint for a nested transaction. <p>Default is {@code true}, which causes delegation to DefaultTransactionStatus for creating and holding a savepoint. If the transaction object does not implement the SavepointManager interface, a NestedTransactionNotSupportedException will be thrown. Else, the SavepointManager will be asked to create a new savepoint to demarcate the start of the nested transaction. <p>Subclasses can override this to return {@code false}, causing a further call to {@code doBegin} - within the context of an already existing transaction. The {@code doBegin} implementation needs to handle this accordingly in such a scenario. This is appropriate for JTA, for example.
Begin a new transaction with semantics according to the given transaction definition. Does not have to care about applying the propagation behavior, as this has already been handled by this abstract manager. <p>This method gets called when the transaction manager has decided to actually start a new transaction. Either there wasn't any transaction before, or the previous transaction has been suspended. <p>A special scenario is a nested transaction without savepoint: If {@code useSavepointForNestedTransaction()} returns "false", this method will be called to start a nested transaction when necessary. In such a context, there will be an active transaction: The implementation of this method has to detect this and start an appropriate nested transaction. behavior, isolation level, read-only flag, timeout, and transaction name
Resume the resources of the current transaction. Transaction synchronization will be resumed afterwards. <p>The default implementation throws a TransactionSuspensionNotSupportedException, assuming that transaction suspension is generally not supported. as returned by doSuspend if resuming is not supported by the transaction manager implementation
Return whether to call {@code doCommit} on a transaction that has been marked as rollback-only in a global fashion. <p>Does not apply if an application locally sets the transaction to rollback-only via the TransactionStatus, but only to the transaction itself being marked as rollback-only by the transaction coordinator. <p>Default is "false": Local transaction strategies usually don't hold the rollback-only marker in the transaction itself, therefore they can't handle rollback-only transactions as part of transaction commit. Hence, AbstractPlatformTransactionManager will trigger a rollback in that case, throwing an UnexpectedRollbackException afterwards. <p>Override this to return "true" if the concrete transaction manager expects a {@code doCommit} call even for a rollback-only transaction, allowing for special handling there. This will, for example, be the case for JTA, where {@code UserTransaction.commit} will check the read-only flag itself and throw a corresponding RollbackException, which might include the specific reason (such as a transaction timeout). <p>If this method returns "true" but the {@code doCommit} implementation does not throw an exception, this transaction manager will throw an UnexpectedRollbackException itself. This should not be the typical case; it is mainly checked to cover misbehaving JTA providers that silently roll back even when the rollback has not been requested by the calling code.
Perform an actual commit of the given transaction. <p>An implementation does not need to check the "new transaction" flag or the rollback-only flag; this will already have been handled before. Usually, a straight commit will be performed on the transaction object contained in the passed-in status.
Register the given list of transaction synchronizations with the existing transaction. <p>Invoked when the control of the Spring transaction manager and thus all Spring transaction synchronizations end, without the transaction being completed yet. This is for example the case when participating in an existing JTA or EJB CMT transaction. <p>The default implementation simply invokes the {@code afterCompletion} methods immediately, passing in "STATUS_UNKNOWN". This is the best we can do if there's no chance to determine the actual outcome of the outer transaction.
Determine the rollback-only flag via checking this TransactionStatus. <p>Will only return "true" if the application called {@code setRollbackOnly} on this TransactionStatus object.
Template method for determining the global rollback-only flag of the underlying transaction, if any. <p>This implementation always returns {@code false}.
Mark this transaction as completed, that is, committed or rolled back.
Set a savepoint for this transaction. Useful for PROPAGATION_NESTED.
Get the savepoint for this transaction, if any.
Create a savepoint and hold it for the transaction. if the underlying transaction does not support savepoints
Roll back to the savepoint that is held for the transaction and release the savepoint right afterwards.
Release the savepoint that is held for the transaction.
Return a SavepointManager for the underlying transaction, if possible. <p>Default implementation always throws a NestedTransactionNotSupportedException. if the underlying transaction does not support savepoints
Copy constructor. Definition can be modified through bean property setters.
Create a new DefaultTransactionDefinition with the the given propagation behavior. Can be modified through bean property setters. TransactionDefinition interface
Set the propagation behavior by the name of the corresponding constant in TransactionDefinition, e.g. "PROPAGATION_REQUIRED". to one of the {@code PROPAGATION_} constants or is {@code null}
Set the propagation behavior. Must be one of the propagation constants in the TransactionDefinition interface. Default is PROPAGATION_REQUIRED. one of the {@code PROPAGATION_} constants
Set the isolation level by the name of the corresponding constant in TransactionDefinition, e.g. "ISOLATION_DEFAULT". to one of the {@code ISOLATION_} constants or is {@code null}
Set the isolation level. Must be one of the isolation constants in the TransactionDefinition interface. Default is ISOLATION_DEFAULT. one of the {@code ISOLATION_} constants
Set the timeout to apply, as number of seconds. Default is TIMEOUT_DEFAULT (-1).
Set whether to optimize as read-only transaction. Default is "false".
Set the name of this transaction. Default is none. <p>This will be used as transaction name to be shown in a transaction monitor, if applicable (for example, WebLogic's).
Return an identifying description for this transaction definition. <p>Available to subclasses, for inclusion in their {@code toString()} result.
Create a new DefaultTransactionStatus instance. state for the internal transaction implementation else participating in an existing transaction has been opened for the given transaction Caching it in here can prevent repeated calls to ask the logging system whether debug logging should be enabled. for this transaction, if any
Return the underlying transaction object.
Return whether there is an actual transaction active.
Return if a new transaction synchronization has been opened for this transaction.
Return if this transaction is defined as read-only transaction.
Return whether the progress of this transaction is debugged. This is used by AbstractPlatformTransactionManager as an optimization, to prevent repeated calls to logger.isDebug(). Not really intended for client code.
Return the holder for resources that have been suspended for this transaction, if any.
Return whether the underlying transaction implements the SavepointManager interface.
Create a DelegatingTransactionAttribute for the given target attribute.
Mark the resource as synchronized with a transaction.
Return whether the resource is synchronized with a transaction.
Mark the resource transaction as rollback-only.
Return whether the resource transaction is marked as rollback-only.
Set the timeout for this object in seconds.
Set the timeout for this object in milliseconds.
Return whether this object has an associated timeout.
Return the expiration deadline of this object.
Return the time to live for this object in seconds. Rounds up eagerly, e.g. 9.00001 still to 10.
Return the time to live for this object in milliseconds.
Set the transaction rollback-only if the deadline has been reached, and throw a TransactionTimedOutException.
Increase the reference count by one because the holder has been requested (i.e. someone requested the resource held by it).
Decrease the reference count by one because the holder has been released (i.e. someone released the resource held by it).
Return whether there are still open references to this holder.
Clear the transactional state of this resource holder.
Create a new ResourceHolderSynchronization for the given holder.
Return whether this holder should be unbound at completion (or should rather be left bound to the thread after the transaction). <p>The default implementation returns {@code true}.
Return whether this holder's resource should be released before transaction completion ({@code true}) or rather after transaction completion ({@code false}). <p>Note that resources will only be released when they are unbound from the thread ({@link #shouldUnbindAtCompletion()}). <p>The default implementation returns {@code true}.
Return whether this holder's resource should be released after transaction completion ({@code true}). <p>The default implementation returns {@code !shouldReleaseBeforeCompletion()}, releasing after completion if no attempt was made before completion.
Create a new instance of the {@link SimpleTransactionStatus} class, indicating a new transaction.
Create a new instance of the {@link SimpleTransactionStatus} class.
Return all resources that are bound to the current thread. <p>Mainly for debugging purposes. Resource managers should always invoke {@code hasResource} for a specific resource key that they are interested in. values (usually the active resource object), or an empty Map if there are currently no resources bound
Check if there is a resource for the given key bound to the current thread.
Retrieve a resource for the given key that is bound to the current thread. resource object), or {@code null} if none
Actually check the value of the resource that is bound for the given key.
Bind the given resource for the given key to the current thread.
Unbind a resource for the given key from the current thread.
Unbind a resource for the given key from the current thread.
Actually remove the value of the resource that is bound for the given key.
Return if transaction synchronization is active for the current thread. Can be called before register to avoid unnecessary instance creation.
Activate transaction synchronization for the current thread. Called by a transaction manager on transaction begin.
Register a new transaction synchronization for the current thread. Typically called by resource management code. <p>Note that synchronizations can implement the {@link org.springframework.core.Ordered} interface. They will be executed in an order according to their order value (if any).
Return an unmodifiable snapshot list of all registered synchronizations for the current thread.
Deactivate transaction synchronization for the current thread. Called by the transaction manager on transaction cleanup.
Expose the name of the current transaction, if any. Called by the transaction manager on transaction begin and on cleanup.
Return the name of the current transaction, or {@code null} if none set. To be called by resource management code for optimizations per use case, for example to optimize fetch strategies for specific named transactions.
Expose a read-only flag for the current transaction. Called by the transaction manager on transaction begin and on cleanup. as read-only; {@code false} to reset such a read-only marker
Return whether the current transaction is marked as read-only. To be called by resource management code when preparing a newly created resource (for example, a Hibernate Session). <p>Note that transaction synchronizations receive the read-only flag as argument for the {@code beforeCommit} callback, to be able to suppress change detection on commit. The present method is meant to be used for earlier read-only checks, for example to set the flush mode of a Hibernate Session to "FlushMode.NEVER" upfront.
Expose an isolation level for the current transaction. Called by the transaction manager on transaction begin and on cleanup. JDBC Connection constants (equivalent to the corresponding Spring TransactionDefinition constants), or {@code null} to reset it
Return the isolation level for the current transaction, if any. To be called by resource management code when preparing a newly created resource (for example, a JDBC Connection). JDBC Connection constants (equivalent to the corresponding Spring TransactionDefinition constants), or {@code null} if none
Expose whether there currently is an actual transaction active. Called by the transaction manager on transaction begin and on cleanup. with an actual transaction; {@code false} to reset that marker
Return whether there currently is an actual transaction active. This indicates whether the current thread is associated with an actual transaction rather than just with active transaction synchronization. <p>To be called by resource management code that wants to discriminate between active transaction synchronization (with or without backing resource transaction; also on PROPAGATION_SUPPORTS) and an actual transaction being active (with backing resource transaction; on PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etc).
Clear the entire transaction synchronization state for the current thread: registered synchronizations as well as the various transaction characteristics.
Check whether the given resource transaction managers refers to the given (underlying) resource factory.
Unwrap the given resource handle if necessary; otherwise return the given handle as-is.
Trigger {@code flush} callbacks on all currently registered synchronizations.
Trigger {@code beforeCommit} callbacks on all currently registered synchronizations.
Trigger {@code beforeCompletion} callbacks on all currently registered synchronizations.
Trigger {@code afterCommit} callbacks on all currently registered synchronizations.
Actually invoke the {@code afterCommit} methods of the given Spring TransactionSynchronization objects.
Trigger {@code afterCompletion} callbacks on all currently registered synchronizations. constants in the TransactionSynchronization interface
Actually invoke the {@code afterCompletion} methods of the given Spring TransactionSynchronization objects. constants in the TransactionSynchronization interface
Construct a new TransactionTemplate using the given transaction manager.
Construct a new TransactionTemplate using the given transaction manager, taking its default settings from the given transaction definition. default settings from. Local properties can still be set to change values.
Set the transaction management strategy to be used.
Return the transaction management strategy to be used.
Constructor for CannotCreateTransactionException.
Constructor for HeuristicCompletionException.
Return the outcome state of the transaction state, as one of the constants in this class.
Constructor for IllegalTransactionStateException.
Constructor for InvalidIsolationLevelException.
Constructor for InvalidTimeoutException.
Return the invalid timeout value.
Constructor for NestedTransactionNotSupportedException.
Constructor for NoTransactionException.
Constructor for TransactionException.
Constructor for TransactionSuspensionNotSupportedException.
Constructor for TransactionSystemException.
Set an application exception that was thrown before this transaction exception, preserving the original exception despite the overriding TransactionSystemException. application exception
Return the application exception that was thrown before this transaction exception, if any.
Return the exception that was the first to be thrown within the failed transaction: i.e. the application exception, if any, or the TransactionSystemException's own cause.
Constructor for TransactionTimedOutException.
Constructor for TransactionUsageException.
Constructor for UnexpectedRollbackException.
Set the request factory that this accessor uses for obtaining {@link org.springframework.http.client.ClientHttpRequest HttpRequests}.
Return the request factory that this accessor uses for obtaining {@link org.springframework.http.client.ClientHttpRequest HttpRequests}.
Create a new {@link AsyncClientHttpRequest} via this template's {@link AsyncClientHttpRequestFactory}.
Set the request factory that this accessor uses for obtaining {@link ClientHttpRequest HttpRequests}.
Create a new {@code HttpRequest} wrapping the given request object.
Return the wrapped request.
Set the proxy type. <p>Defaults to {@link java.net.Proxy.Type#HTTP}.
Set the proxy host name.
Set the proxy port.
Asserts that this request has not been {@linkplain #executeAsync() executed} yet.
Create a {@code AbstractClientHttpRequestFactoryWrapper} wrapping the given request factory.
Create a buffering wrapper for the given {@link ClientHttpRequestFactory}.
Indicates whether the request/response exchange for the given URI and method should be buffered in memory. <p>The default implementation returns {@code true} for all URIs and methods. Subclasses can override this method to change this behavior.
Create a new instance of the {@code HttpComponentsAsyncClientHttpRequestFactory} with a default {@link HttpAsyncClient} and {@link HttpClient}.
Create a new instance of the {@code HttpComponentsAsyncClientHttpRequestFactory} with the given {@link HttpAsyncClient} instance and a default {@link HttpClient}.
Create a new instance of the {@code HttpComponentsAsyncClientHttpRequestFactory} with the given {@link HttpClient} and {@link HttpAsyncClient} instances.
Set the {@code HttpClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.
Return the {@code HttpClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.
Create a new instance of the {@code HttpComponentsClientHttpRequestFactory} with a default {@link HttpClient}.
Create a new instance of the {@code HttpComponentsClientHttpRequestFactory} with the given {@link HttpClient} instance.
Set the {@code HttpClient} used for {@linkplain #createRequest(URI, HttpMethod) synchronous execution}.
Return the {@code HttpClient} used for {@linkplain #createRequest(URI, HttpMethod) synchronous execution}.
Set the connection timeout for the underlying HttpClient. A timeout value of 0 specifies an infinite timeout. <p>Additional properties can be configured by specifying a {@link RequestConfig} instance on a custom {@link HttpClient}.
Set the timeout in milliseconds used when requesting a connection from the connection manager using the underlying HttpClient. A timeout value of 0 specifies an infinite timeout. <p>Additional properties can be configured by specifying a {@link RequestConfig} instance on a custom {@link HttpClient}.
Set the socket read timeout for the underlying HttpClient. A timeout value of 0 specifies an infinite timeout. <p>Additional properties can be configured by specifying a {@link RequestConfig} instance on a custom {@link HttpClient}.
Indicates whether this request factory should buffer the request body internally. <p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended to change this property to {@code false}, so as not to run out of memory.
Return a builder for modifying the factory-level {@link RequestConfig}.
Create a default {@link RequestConfig} to use with the given client. Can return {@code null} to indicate that no custom request config should be set and the defaults of the {@link HttpClient} should be used. <p>The default implementation tries to merge the defaults of the client with the local customizations of this factory instance, if any.
Merge the given {@link HttpClient}-level {@link RequestConfig} with the factory-level {@link RequestConfig}, if necessary. (may be {@code null} if the given client config is {@code null})
Create a Commons HttpMethodBase object for the given HTTP method and URI specification.
Template methods that creates a {@link HttpContext} for the given HTTP method and URI. <p>The default implementation returns {@code null}.
Creates new instance of {@link InterceptingAsyncClientHttpRequest}.
Create new instance of {@link InterceptingAsyncClientHttpRequestFactory} with delegated request factory and list of interceptors.
Create a new instance of the {@code InterceptingClientHttpRequestFactory} with the given parameters.
Create a new {@code Netty4ClientHttpRequestFactory} with a default {@link NioEventLoopGroup}.
Create a new {@code Netty4ClientHttpRequestFactory} with the given {@link EventLoopGroup}. <p><b>NOTE:</b> the given group will <strong>not</strong> be {@linkplain EventLoopGroup#shutdownGracefully() shutdown} by this factory; doing so becomes the responsibility of the caller.
Set the default maximum response size. <p>By default this is set to {@link #DEFAULT_MAX_RESPONSE_SIZE}.
Set the SSL context. When configured it is used to create and insert an {@link io.netty.handler.ssl.SslHandler} in the channel pipeline. <p>By default this is not set.
Set the underlying connect timeout (in milliseconds). A timeout value of 0 specifies an infinite timeout.
Set the underlying URLConnection's read timeout (in milliseconds). A timeout value of 0 specifies an infinite timeout.
Template method for changing properties on the given {@link SocketChannelConfig}. <p>The default implementation sets the connect timeout based on the set property.
Add the given headers to the given HTTP connection.
Sets the number of bytes to write in each chunk when not buffering request bodies locally. <p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is not known in advance.
Set if the underlying URLConnection can be set to 'output streaming' mode. Default is {@code true}. <p>When output streaming is enabled, authentication and redirection cannot be handled automatically. If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and {@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never be called.
Set the task executor for this request factory. Setting this property is required for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}.
Set the {@code ObjectMapper} for this view. If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used. <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON serialization process. For example, an extended {@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be configured that provides custom serializers for specific types. The other option for refining the serialization process is to use Jackson's provided annotations on the types to be serialized, in which case a custom-configured ObjectMapper is unnecessary.
Return the Jackson {@link JavaType} for the specified type and context class. <p>The default implementation returns {@code typeFactory.constructType(type, contextClass)}, but this can be overridden in subclasses, to allow for custom generic collection handling. For instance: <pre class="code"> protected JavaType getJavaType(Type type) { if (type instanceof Class && List.class.isAssignableFrom((Class)type)) { } else { } </pre> in which the target type appears in a method signature (can be {@code null})
Obtain a {@link GsonBuilder} which Base64-encodes {@code byte[]} properties when reading and writing JSON. <p>A custom {@link com.google.gson.TypeAdapter} will be registered via {@link GsonBuilder#registerTypeHierarchyAdapter(Class, Object)} which serializes a {@code byte[]} property to and from a Base64-encoded String instead of a JSON array. <p><strong>NOTE:</strong> Use of this option requires the presence of the Apache Commons Codec library on the classpath when running on Java 6 or 7. On Java 8, the standard {@link java.util.Base64} facility is used instead.
Whether to Base64-encode {@code byte[]} properties when reading and writing JSON. <p>When set to {@code true}, a custom {@link com.google.gson.TypeAdapter} will be registered via {@link GsonBuilder#registerTypeHierarchyAdapter(Class, Object)} which serializes a {@code byte[]} property to and from a Base64-encoded String instead of a JSON array. <p><strong>NOTE:</strong> Use of this option requires the presence of the Apache Commons Codec library on the classpath when running on Java 6 or 7. On Java 8, the standard {@link java.util.Base64} facility is used instead.
Whether to use the {@link GsonBuilder#serializeNulls()} option when writing JSON. This is a shortcut for setting up a {@code Gson} as follows: <pre class="code"> new GsonBuilder().serializeNulls().create(); </pre>
Whether to use the {@link GsonBuilder#setPrettyPrinting()} when writing JSON. This is a shortcut for setting up a {@code Gson} as follows: <pre class="code"> new GsonBuilder().setPrettyPrinting().create(); </pre>
Whether to use the {@link GsonBuilder#disableHtmlEscaping()} when writing JSON. Set to {@code true} to disable HTML escaping in JSON. This is a shortcut for setting up a {@code Gson} as follows: <pre class="code"> new GsonBuilder().disableHtmlEscaping().create(); </pre>
Define the date/time format with a {@link SimpleDateFormat}-style pattern. This is a shortcut for setting up a {@code Gson} as follows: <pre class="code"> new GsonBuilder().setDateFormat(dateFormatPattern).create(); </pre>
Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is {@code false}. <p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking. The prefix renders the string syntactically invalid as a script so that it cannot be hijacked. This prefix should be stripped before parsing the string as JSON.
If set to {@code true}, an {@link XmlMapper} will be created using its default constructor. This is only applicable to {@link #build()} calls, not to {@link #configure} calls.
Define the format for date/time with the given {@link DateFormat}. <p>Note: Setting this property makes the exposed {@link ObjectMapper} non-thread-safe, according to Jackson's thread safety rules.
Define the date/time format with a {@link SimpleDateFormat}. <p>Note: Setting this property makes the exposed {@link ObjectMapper} non-thread-safe, according to Jackson's thread safety rules.
Override the default {@link Locale} to use for formatting. Default value used is {@link Locale#getDefault()}.
Override the default {@link TimeZone} to use for formatting. Default value used is UTC (NOT local timezone).
Set an {@link AnnotationIntrospector} for both serialization and deserialization.
Specify a {@link com.fasterxml.jackson.databind.PropertyNamingStrategy} to configure the {@link ObjectMapper} with.
Specify a {@link TypeResolverBuilder} to use for Jackson's default typing.
Set a custom inclusion strategy for serialization.
Set the global filters to use in order to support {@link JsonFilter @JsonFilter} annotated POJO.
Add mix-in annotations to use for augmenting specified class or interface. to target's annotations as value
Add mix-in annotations to use for augmenting specified class or interface. to effectively override as key and mix-in classes (or interface) whose annotations are to be "added" to target's annotations as value.
Configure custom serializers. Each serializer is registered for the type returned by {@link JsonSerializer#handledType()}, which must not be {@code null}.
Configure a custom serializer for the given type.
Configure custom serializers for the given types.
Configure a custom deserializer for the given type.
Configure custom deserializers for the given types.
Shortcut for {@link MapperFeature#AUTO_DETECT_FIELDS} option.
Shortcut for {@link MapperFeature#AUTO_DETECT_SETTERS} {@link MapperFeature#AUTO_DETECT_GETTERS}/{@link MapperFeature#AUTO_DETECT_IS_GETTERS} options.
Shortcut for {@link MapperFeature#DEFAULT_VIEW_INCLUSION} option.
Shortcut for {@link DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES} option.
Shortcut for {@link SerializationFeature#FAIL_ON_EMPTY_BEANS} option.
Shortcut for {@link SerializationFeature#INDENT_OUTPUT} option.
Define if a wrapper will be used for indexed (List, array) properties or not by default (only applies to {@link XmlMapper}).
Specify features to enable.
Specify features to disable.
Specify one or more modules to be registered with the {@link ObjectMapper}. <p>Note: If this is set, no finding of modules is going to happen - not by Jackson, and not by Spring either (see {@link #findModulesViaServiceLoader}). As a consequence, specifying an empty list here will suppress any kind of module detection. <p>Specify either this or {@link #modulesToInstall}, not both.
Set a complete list of modules to be registered with the {@link ObjectMapper}. <p>Note: If this is set, no finding of modules is going to happen - not by Jackson, and not by Spring either (see {@link #findModulesViaServiceLoader}). As a consequence, specifying an empty list here will suppress any kind of module detection. <p>Specify either this or {@link #modulesToInstall}, not both.
Specify one or more modules to be registered with the {@link ObjectMapper}. <p>Modules specified here will be registered after Spring's autodetection of JSR-310 and Joda-Time, or Jackson's finding of modules (see {@link #findModulesViaServiceLoader}), allowing to eventually override their configuration. <p>Specify either this or {@link #modules}, not both.
Set whether to let Jackson find available modules via the JDK ServiceLoader, based on META-INF metadata in the classpath. Requires Jackson 2.2 or higher. <p>If this mode is not set, Spring's Jackson2ObjectMapperBuilder itself will try to find the JSR-310 and Joda-Time support modules on the classpath - provided that Java 8 and Joda-Time themselves are available, respectively.
Set the ClassLoader to use for loading Jackson extension modules.
Customize the construction of Jackson handlers ({@link JsonSerializer}, {@link JsonDeserializer}, {@link KeyDeserializer}, {@code TypeResolverBuilder} and {@code TypeIdResolver}).
Set the Spring {@link ApplicationContext} in order to autowire Jackson handlers ({@link JsonSerializer}, {@link JsonDeserializer}, {@link KeyDeserializer}, {@code TypeResolverBuilder} and {@code TypeIdResolver}).
Configure an existing {@link ObjectMapper} instance with this builder's settings. This can be applied to any number of {@code ObjectMappers}.
Any change to this method should be also applied to spring-jms and spring-messaging MappingJackson2MessageConverter default constructors
Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to build a regular JSON {@link ObjectMapper} instance.
Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to build an {@link XmlMapper} instance.
Set the {@link ObjectMapper} instance to use. If not set, the {@link ObjectMapper} will be created using its default constructor.
If set to true and no custom {@link ObjectMapper} has been set, a {@link XmlMapper} will be created using its default constructor.
Define the format for date/time with the given {@link DateFormat}. <p>Note: Setting this property makes the exposed {@link ObjectMapper} non-thread-safe, according to Jackson's thread safety rules.
Define the date/time format with a {@link SimpleDateFormat}. <p>Note: Setting this property makes the exposed {@link ObjectMapper} non-thread-safe, according to Jackson's thread safety rules.
Override the default {@link Locale} to use for formatting. Default value used is {@link Locale#getDefault()}.
Override the default {@link TimeZone} to use for formatting. Default value used is UTC (NOT local timezone).
Set an {@link AnnotationIntrospector} for both serialization and deserialization.
Specify a {@link com.fasterxml.jackson.databind.PropertyNamingStrategy} to configure the {@link ObjectMapper} with.
Specify a {@link TypeResolverBuilder} to use for Jackson's default typing.
Set a custom inclusion strategy for serialization.
Set the global filters to use in order to support {@link JsonFilter @JsonFilter} annotated POJO.
Add mix-in annotations to use for augmenting specified class or interface. to effectively override as key and mix-in classes (or interface) whose annotations are to be "added" to target's annotations as value.
Configure custom serializers. Each serializer is registered for the type returned by {@link JsonSerializer#handledType()}, which must not be {@code null}.
Configure custom serializers for the given types.
Configure custom deserializers for the given types.
Shortcut for {@link MapperFeature#AUTO_DETECT_FIELDS} option.
Shortcut for {@link MapperFeature#AUTO_DETECT_SETTERS} {@link MapperFeature#AUTO_DETECT_GETTERS}/{@link MapperFeature#AUTO_DETECT_IS_GETTERS} options.
Shortcut for {@link MapperFeature#DEFAULT_VIEW_INCLUSION} option.
Shortcut for {@link DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES} option.
Shortcut for {@link SerializationFeature#FAIL_ON_EMPTY_BEANS} option.
Shortcut for {@link SerializationFeature#INDENT_OUTPUT} option.
Define if a wrapper will be used for indexed (List, array) properties or not by default (only applies to {@link XmlMapper}).
Specify features to enable.
Specify features to disable.
Set a complete list of modules to be registered with the {@link ObjectMapper}. <p>Note: If this is set, no finding of modules is going to happen - not by Jackson, and not by Spring either (see {@link #setFindModulesViaServiceLoader}). As a consequence, specifying an empty list here will suppress any kind of module detection. <p>Specify either this or {@link #setModulesToInstall}, not both.
Set whether to let Jackson find available modules via the JDK ServiceLoader, based on META-INF metadata in the classpath. Requires Jackson 2.2 or higher. <p>If this mode is not set, Spring's Jackson2ObjectMapperFactoryBean itself will try to find the JSR-310 and Joda-Time support modules on the classpath - provided that Java 8 and Joda-Time themselves are available, respectively.
Customize the construction of Jackson handlers ({@link JsonSerializer}, {@link JsonDeserializer}, {@link KeyDeserializer}, {@code TypeResolverBuilder} and {@code TypeIdResolver}).
Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration provided by {@link Jackson2ObjectMapperBuilder}.
Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}. You can use {@link Jackson2ObjectMapperBuilder} to build it easily.
Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false. <p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking. The prefix renders the string syntactically invalid as a script so that it cannot be hijacked. This prefix should be stripped before parsing the string as JSON.
Create a new instance wrapping the given POJO to be serialized.
Modify the POJO to serialize.
Return the POJO that needs to be serialized.
Set the serialization view to serialize the POJO with.
Return the serialization view to use.
Set the Jackson filter provider to serialize the POJO with.
Return the Jackson filter provider to use.
Set the name of the JSONP function name.
Return the configured JSONP function name.
Create a new SpringHandlerInstantiator for the given BeanFactory.
Construct a new instance.
Construct a new instance with an {@link ExtensionRegistryInitializer} that allows the registration of message extensions.
Create a new {@code Message.Builder} instance for the given class. <p>This method uses a ConcurrentHashMap for caching method lookups.
Set the "X-Protobuf-*" HTTP headers when responding with a message of content type "application/x-protobuf" <p><b>Note:</b> <code>outputMessage.getBody()</code> should not have been called before because it writes HTTP headers (making them read only).</p>
Create a new {@link Marshaller} for the given class.
Create a new {@link Unmarshaller} for the given class.
Return a {@link JAXBContext} for the given class.
Create a {@code XMLInputFactory} that this converter will use to create {@link javax.xml.stream.XMLStreamReader} and {@link javax.xml.stream.XMLEventReader} objects. <p>Can be overridden in subclasses, adding further initialization of the factory. The resulting factory is cached, so this method will only be called once.
Indicates whether external XML entities are processed when converting to a Source. <p>Default is {@code false}, meaning that external entities are not resolved. <p><strong>Note:</strong> setting this option to {@code true} also automatically sets {@link #setSupportDtd} to {@code true}.
Construct a new {@code MappingJackson2XmlHttpMessageConverter} using default configuration provided by {@code Jackson2ObjectMapperBuilder}.
Construct a new {@code MappingJackson2XmlHttpMessageConverter} with a custom {@link ObjectMapper} (must be a {@link XmlMapper} instance). You can use {@link Jackson2ObjectMapperBuilder} to build it easily.
Construct a new {@code MarshallingMessageConverter} with the given {@link Marshaller} set. <p>If the given {@link Marshaller} also implements the {@link Unmarshaller} interface, it is used for both marshalling and unmarshalling. Otherwise, an exception is thrown. <p>Note that all {@code Marshaller} implementations in Spring also implement the {@code Unmarshaller} interface, so that you can safely use this constructor.
Construct a new {@code MarshallingMessageConverter} with the given {@code Marshaller} and {@code Unmarshaller}.
Construct an {@code AbstractGenericHttpMessageConverter} with one supported media type.
Construct an {@code AbstractGenericHttpMessageConverter} with multiple supported media type.
This implementation sets the default headers by calling {@link #addDefaultHeaders}, and then calls {@link #writeInternal}.
Set the default character set if any.
Returns true if any of the {@linkplain #setSupportedMediaTypes(List) supported} media types {@link MediaType#includes(MediaType) include} the given media type. Typically the value of a {@code Content-Type} header. or if the media type is {@code null}
Add default headers to the output message. <p>This implementation delegates to {@link #getDefaultContentType(Object)} if a content type was not provided, set if necessary the default character set, calls {@link #getContentLength}, and sets the corresponding headers.
Sets the default {@code Content-Type} to be used for writing.
Returns the default {@code Content-Type} to be used for writing. Called when {@link #write} is invoked without a specified content type parameter.
Sets the cache directory. If this property is set to an existing directory, this converter will cache image data.
Set the default character set to use for reading and writing form data when the request or response Content-Type header does not explicitly specify it. <p>By default this is set to "UTF-8".
Set the character set to use when writing multipart data to encode file names. Encoding is based on the encoded-word syntax defined in RFC 2047 and relies on {@code MimeUtility} from "javax.mail". <p>If not set file names will be encoded as US-ASCII.
Set the message body converters to use. These converters are used to convert objects to MIME parts.
Add a message body converter. Such a converter is used to convert objects to MIME parts.
Generate a multipart boundary. <p>This implementation delegates to {@link MimeTypeUtils#generateMultipartBoundary()}.
Return an {@link HttpEntity} for the given part Object. or a newly built {@link HttpEntity} wrapper for that part
Write parts of the resource as indicated by the request {@code Range} header.
Return the list of supported {@link Charset}s. <p>By default, returns {@link Charset#availableCharsets()}. Can be overridden in subclasses.
Constructor accepting a request and response pair that are expected to be of type {@link ServletServerHttpRequest} and {@link ServletServerHttpResponse} respectively.
Construct a new instance of the ServletServerHttpRequest based on the given {@link HttpServletRequest}.
Returns the {@code HttpServletRequest} this object is based on.
Use {@link javax.servlet.ServletRequest#getParameterMap()} to reconstruct the body of a form 'POST' providing a predictable outcome as opposed to reading from the body, which can fail if any other code has used the ServletRequest to access a parameter, thus causing the input stream to be "consumed".
Construct a new instance of the ServletServerHttpResponse based on the given {@link HttpServletResponse}.
Return the {@code HttpServletResponse} this object is based on.
Return an empty directive. <p>This is well suited for using other optional directives without "max-age", "no-cache" or "no-store".
Add a "max-age=" directive. <p>This directive is well suited for publicly caching resources, knowing that they won't change within the configured amount of time. Additional directives can be also used, in case resources shouldn't be cached ({@link #cachePrivate()}) or transformed ({@link #noTransform()}) by shared caches. <p>In order to prevent caches to reuse the cached response even when it has become stale (i.e. the "max-age" delay is passed), the "must-revalidate" directive should be set ({@link #mustRevalidate()}
Add a "no-cache" directive. <p>This directive is well suited for telling caches that the response can be reused only if the client revalidates it with the server. This directive won't disable cache altogether and may result with clients sending conditional requests (with "ETag", "If-Modified-Since" headers) and the server responding with "304 - Not Modified" status. <p>In order to disable caching and minimize requests/responses exchanges, the {@link #noStore()} directive should be used instead of {@link #noCache()}.
Add a "no-store" directive. <p>This directive is well suited for preventing caches (browsers and proxies) to cache the content of responses.
Add a "must-revalidate" directive. <p>This directive indicates that once it has become stale, a cache MUST NOT use the response to satisfy subsequent requests without successful validation on the origin server.
Add a "no-transform" directive. <p>This directive indicates that intermediaries (caches and others) should not transform the response content. This can be useful to force caches and CDNs not to automatically gzip or optimize the response content.
Add a "public" directive. <p>This directive indicates that any cache MAY store the response, even if the response would normally be non-cacheable or cacheable only within a private cache.
Add a "private" directive. <p>This directive indicates that the response message is intended for a single user and MUST NOT be stored by a shared cache.
Add a "proxy-revalidate" directive. <p>This directive has the same meaning as the "must-revalidate" directive, except that it does not apply to private caches (i.e. browsers, HTTP clients).
Add an "s-maxage" directive. <p>This directive indicates that, in shared caches, the maximum age specified by this directive overrides the maximum age specified by other directives.
Add a "stale-while-revalidate" directive. <p>This directive indicates that caches MAY serve the response in which it appears after it becomes stale, up to the indicated number of seconds. If a cached response is served stale due to the presence of this extension, the cache SHOULD attempt to revalidate it while still serving stale responses (i.e., without blocking).
Add a "stale-if-error" directive. <p>This directive indicates that when an error is encountered, a cached stale response MAY be used to satisfy the request, regardless of other freshness information.
Return the "Cache-Control" header value.
Set the (new) value of the {@code Access-Control-Allow-Credentials} response header.
Returns the value of the {@code Access-Control-Allow-Credentials} response header.
Set the (new) value of the {@code Access-Control-Allow-Headers} response header.
Returns the value of the {@code Access-Control-Allow-Headers} response header.
Set the (new) value of the {@code Access-Control-Allow-Methods} response header.
Return the value of the {@code Access-Control-Allow-Methods} response header.
Set the (new) value of the {@code Access-Control-Allow-Origin} response header.
Return the value of the {@code Access-Control-Allow-Origin} response header.
Set the (new) value of the {@code Access-Control-Expose-Headers} response header.
Returns the value of the {@code Access-Control-Expose-Headers} response header.
Set the (new) value of the {@code Access-Control-Max-Age} response header.
Returns the value of the {@code Access-Control-Max-Age} response header. <p>Returns -1 when the max age is unknown.
Set the (new) value of the {@code Access-Control-Request-Headers} request header.
Returns the value of the {@code Access-Control-Request-Headers} request header.
Set the (new) value of the {@code Access-Control-Request-Method} request header.
Return the value of the {@code Access-Control-Request-Method} request header.
Return the value of the {@code Cache-Control} header.
Return the value of the {@code Connection} header.
Sets the (new) value of the {@code Range} header.
Return the value of the {@code Range} header. <p>Returns an empty list when the range is unknown.
Return the value of the {@code Upgrade} header.
Set the request header names (e.g. "Accept-Language") for which the response is subject to content negotiation and variances based on the value of those request headers.
Return the request header names subject to content negotiation.
Resolve the given method value to an {@code HttpMethod}.
Determine whether this {@code HttpMethod} matches the given method value.
Create an {@code HttpRange} from the given position to the end.
Create a {@code HttpRange} from the given fist to last position.
Create an {@code HttpRange} that ranges over the last given number of bytes.
Parse the given, comma-separated string into a list of {@code HttpRange} objects. <p>This method can be used to parse an {@code Range} header.
Return a string representation of the given list of {@code HttpRange} objects. <p>This method can be used to for an {@code Range} header.
Return the list of HTTP (byte) ranges describing the requested parts of the Resource, as provided by the HTTP Range request.
Return the integer value of this status code.
Return the reason phrase of this status code.
Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#INFORMATIONAL}. This is a shortcut for checking the value of {@link #series()}.
Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#SUCCESSFUL}. This is a shortcut for checking the value of {@link #series()}.
Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#REDIRECTION}. This is a shortcut for checking the value of {@link #series()}.
Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR}. This is a shortcut for checking the value of {@link #series()}.
Whether this status code is in the HTTP series {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}. This is a shortcut for checking the value of {@link #series()}.
Returns the HTTP status series of this status code.
Return the enum constant of this type with the specified numeric value.
Return the integer value of this status series. Ranges from 1 to 5.
Constructor that allows wrapping {@link InvalidMimeTypeException}.
Create a new {@code MediaType} for the given primary type. <p>The {@linkplain #getSubtype() subtype} is set to "&#42;", parameters empty.
Copy-constructor that copies the type, subtype and parameters of the given {@code MediaType}, and allows to set the specified character set.
Sorts the given list of {@code MediaType} objects by specificity. <p>Given two media types: <ol> <li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the wildcard is ordered before the other.</li> <li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and remain their current order.</li> <li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without the wildcard is sorted before the other.</li> <li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal and remain their current order.</li> <li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type with the highest quality value is ordered before the other.</li> <li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the media type with the most parameters is ordered before the other.</li> </ol> <p>For example: <blockquote>audio/basic &lt; audio/* &lt; *&#047;*</blockquote> <blockquote>audio/* &lt; audio/*;q=0.7; audio/*;q=0.3</blockquote> <blockquote>audio/basic;level=1 &lt; audio/basic</blockquote> <blockquote>audio/basic == text/html</blockquote> <blockquote>audio/basic == audio/wave</blockquote> and Content, section 5.3.2</a>
Comparator used by {@link #sortBySpecificity(List)}.
Constructor with method and URL but without body nor headers.
Constructor with method, URL and body but without headers.
Constructor with method, URL, body and type but without headers.
Constructor with method, URL and headers but without body.
Constructor with method, URL, headers and body.
Constructor with method, URL, headers, body and type.
Return the HTTP method of the request.
Return the URL of the request.
Return the type of the request's body.
Create a builder with the given method and url.
Create an HTTP GET builder with the given url.
Create an HTTP HEAD builder with the given url.
Create an HTTP POST builder with the given url.
Create an HTTP PUT builder with the given url.
Create an HTTP PATCH builder with the given url.
Create an HTTP DELETE builder with the given url.
Creates an HTTP OPTIONS builder with the given url.
Create a builder with the given status.
Create a builder with the status set to {@linkplain HttpStatus#OK OK}.
A shortcut for creating a {@code ResponseEntity} with the given body and the status set to {@linkplain HttpStatus#OK OK}.
Create a new builder with a {@linkplain HttpStatus#CREATED CREATED} status and a location header set to the given URI.
Create a builder with an {@linkplain HttpStatus#ACCEPTED ACCEPTED} status.
Create a builder with a {@linkplain HttpStatus#NO_CONTENT NO_CONTENT} status.
Create a builder with a {@linkplain HttpStatus#BAD_REQUEST BAD_REQUEST} status.
Create a builder with a {@linkplain HttpStatus#NOT_FOUND NOT_FOUND} status.
Create a builder with an {@linkplain HttpStatus#UNPROCESSABLE_ENTITY UNPROCESSABLE_ENTITY} status.
Set the BurlapProxyFactory instance to use. If not specified, a default BurlapProxyFactory will be created. <p>Allows to use an externally configured factory instance, in particular a custom BurlapProxyFactory subclass.
Set the username that this factory should use to access the remote service. Default is none. <p>The username will be sent by Burlap via HTTP Basic Authentication.
Set the password that this factory should use to access the remote service. Default is none. <p>The password will be sent by Burlap via HTTP Basic Authentication.
Set whether overloaded methods should be enabled for remote invocations. Default is "false".
Initialize the Burlap proxy for this interceptor.
Create the Burlap proxy that is wrapped by this interceptor.
Convert the given Burlap access exception to an appropriate Spring RemoteAccessException.
Perform an invocation on the exported object.
Set the HessianProxyFactory instance to use. If not specified, a default HessianProxyFactory will be created. <p>Allows to use an externally configured factory instance, in particular a custom HessianProxyFactory subclass.
Specify the Hessian SerializerFactory to use. <p>This will typically be passed in as an inner bean definition of type {@code com.caucho.hessian.io.SerializerFactory}, with custom bean property values applied.
Set whether to send the Java collection type for each serialized collection. Default is "true".
Set whether to allow non-serializable types as Hessian arguments and return values. Default is "true".
Set the username that this factory should use to access the remote service. Default is none. <p>The username will be sent by Hessian via HTTP Basic Authentication.
Set the password that this factory should use to access the remote service. Default is none. <p>The password will be sent by Hessian via HTTP Basic Authentication.
Set whether Hessian's debug mode should be enabled. Default is "false".
Set whether to use a chunked post for sending a Hessian request.
Specify a custom HessianConnectionFactory to use for the Hessian client.
Set the socket connect timeout to use for the Hessian client.
Set the timeout to use when waiting for a reply from the Hessian service.
Set whether version 2 of the Hessian protocol should be used for parsing requests and replies. Default is "false".
Set whether version 2 of the Hessian protocol should be used for parsing requests. Default is "false".
Set whether version 2 of the Hessian protocol should be used for parsing replies. Default is "false".
Initialize the Hessian proxy for this interceptor.
Create the Hessian proxy that is wrapped by this interceptor.
Convert the given Hessian access exception to an appropriate Spring RemoteAccessException.
Specify a custom HessianRemoteResolver to use for resolving remote object references.
Set whether Hessian's debug mode should be enabled, logging to this exporter's Commons Logging log. Default is "false".
Initialize this exporter.
Actually invoke the skeleton with the given streams.
Specify the content type to use for sending HTTP invoker requests. <p>Default is "application/x-java-serialized-object".
Return the content type to use for sending HTTP invoker requests.
Set whether to accept GZIP encoding, that is, whether to send the HTTP "Accept-Encoding" header with "gzip" as value. <p>Default is "true". Turn this flag off if you do not want GZIP response compression even if enabled on the HTTP server.
Return whether to accept GZIP encoding, that is, whether to send the HTTP "Accept-Encoding" header with "gzip" as value.
Return the bean ClassLoader that this executor is supposed to use.
Serialize the given RemoteInvocation into a ByteArrayOutputStream.
Serialize the given RemoteInvocation to the given OutputStream. <p>The default implementation gives {@code decorateOutputStream} a chance to decorate the stream first (for example, for custom encryption or compression). Creates an {@code ObjectOutputStream} for the final stream and calls {@code doWriteRemoteInvocation} to actually write the object. <p>Can be overridden for custom serialization of the invocation.
Return the OutputStream to use for writing remote invocations, potentially decorating the given original OutputStream. <p>The default implementation returns the given stream as-is. Can be overridden, for example, for custom encryption or compression.
Perform the actual writing of the given invocation object to the given ObjectOutputStream. <p>The default implementation simply calls {@code writeObject}. Can be overridden for serialization of a custom wrapper object rather than the plain invocation, for example an encryption-aware holder.
Execute a request to send the given serialized remote invocation. <p>Implementations will usually call {@code readRemoteInvocationResult} to deserialize a returned RemoteInvocationResult object. target service RemoteInvocation object
Return the InputStream to use for reading remote invocation results, potentially decorating the given original InputStream. <p>The default implementation returns the given stream as-is. Can be overridden, for example, for custom encryption or compression.
Create an ObjectInputStream for the given InputStream and codebase. The default implementation creates a CodebaseAwareObjectInputStream. (can be {@code null})
Perform the actual reading of an invocation object from the given ObjectInputStream. <p>The default implementation simply calls {@code readObject}. Can be overridden for deserialization of a custom wrapper object rather than the plain invocation, for example an encryption-aware holder. couldn't get resolved
Create a new instance of the HttpComponentsHttpInvokerRequestExecutor with a default {@link HttpClient} that uses a default {@code org.apache.http.impl.conn.PoolingClientConnectionManager}.
Create a new instance of the HttpComponentsClientHttpRequestFactory with the given {@link HttpClient} instance.
Set the {@link HttpClient} instance to use for this request executor.
Return the {@link HttpClient} instance that this request executor uses.
Create a HttpPost for the given configuration. <p>The default implementation creates a standard HttpPost with "application/x-java-serialized-object" as "Content-Type" header. target service
Create a {@link RequestConfig} for the given configuration. Can return {@code null} to indicate that no custom request config should be set and the defaults of the {@link HttpClient} should be used. <p>The default implementation tries to merge the defaults of the client with the local customizations of the instance, if any. target service
Set the given serialized remote invocation as request body. <p>The default implementation simply sets the serialized invocation as the HttpPost's request body. This can be overridden, for example, to write a specific encoding and to potentially set appropriate HTTP request headers. RemoteInvocation object
Execute the given HttpPost instance.
Validate the given response as contained in the HttpPost object, throwing an exception if it does not correspond to a successful HTTP response. <p>Default implementation rejects any HTTP status code beyond 2xx, to avoid parsing the response body and trying to deserialize from a corrupted stream.
Extract the response body from the given executed remote invocation request. <p>The default implementation simply fetches the HttpPost's response body stream. If the response is recognized as GZIP response, the InputStream will get wrapped in a GZIPInputStream.
Determine whether the given response indicates a GZIP response. <p>The default implementation checks whether the HTTP "Content-Encoding" header contains "gzip" (in any casing).
Set the codebase URL to download classes from if not found locally. Can consists of multiple URLs, separated by spaces. <p>Follows RMI's codebase conventions for dynamic class download. In contrast to RMI, where the server determines the URL for class download (via the "java.rmi.server.codebase" system property), it's the client that determines the codebase URL here. The server will usually be the same as for the service URL, just pointing to a different path there.
Set the HttpInvokerRequestExecutor implementation to use for executing remote invocations. <p>Default is {@link SimpleHttpInvokerRequestExecutor}. Alternatively, consider using {@link HttpComponentsHttpInvokerRequestExecutor} for more sophisticated needs.
Return the HttpInvokerRequestExecutor used by this remote accessor. <p>Creates a default SimpleHttpInvokerRequestExecutor if no executor has been initialized already.
Execute the given remote invocation via the HttpInvokerRequestExecutor. <p>This implementation delegates to {@link #executeRequest(RemoteInvocation)}. Can be overridden to react to the specific original MethodInvocation. to the ProxyMethodInvocation interface for accessing user attributes)
Execute the given remote invocation via the HttpInvokerRequestExecutor. <p>Can be overridden in subclasses to pass a different configuration object to the executor. Alternatively, add further configuration properties in a subclass of this accessor: By default, the accessor passed itself as configuration object to the executor.
Convert the given HTTP invoker access exception to an appropriate Spring RemoteAccessException.
Read a RemoteInvocation from the given HTTP request. <p>Delegates to {@link #readRemoteInvocation(javax.servlet.http.HttpServletRequest, java.io.InputStream)} with the {@link javax.servlet.ServletRequest#getInputStream() servlet request's input stream}.
Deserialize a RemoteInvocation object from the given InputStream. <p>Gives {@link #decorateInputStream} a chance to decorate the stream first (for example, for custom encryption or compression). Creates a {@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream} and calls {@link #doReadRemoteInvocation} to actually read the object. <p>Can be overridden for custom serialization of the invocation.
Return the InputStream to use for reading remote invocations, potentially decorating the given original InputStream. <p>The default implementation returns the given stream as-is. Can be overridden, for example, for custom encryption or compression.
Write the given RemoteInvocationResult to the given HTTP response.
Serialize the given RemoteInvocation to the given OutputStream. <p>The default implementation gives {@link #decorateOutputStream} a chance to decorate the stream first (for example, for custom encryption or compression). Creates an {@link java.io.ObjectOutputStream} for the final stream and calls {@link #doWriteRemoteInvocationResult} to actually write the object. <p>Can be overridden for custom serialization of the invocation.
Return the OutputStream to use for writing remote invocation results, potentially decorating the given original OutputStream. <p>The default implementation returns the given stream as-is. Can be overridden, for example, for custom encryption or compression.
Open an HttpURLConnection for the given remote invocation request. target service
Prepare the given HTTP connection. <p>The default implementation specifies POST as method, "application/x-java-serialized-object" as "Content-Type" header, and the given content length as "Content-Length" header.
Set the given serialized remote invocation as request body. <p>The default implementation simply write the serialized invocation to the HttpURLConnection's OutputStream. This can be overridden, for example, to write a specific encoding and potentially set appropriate HTTP request headers. RemoteInvocation object
Validate the given response as contained in the HttpURLConnection object, throwing an exception if it does not correspond to a successful HTTP response. <p>Default implementation rejects any HTTP status code beyond 2xx, to avoid parsing the response body and trying to deserialize from a corrupted stream.
Extract the response body from the given executed remote invocation request. <p>The default implementation simply reads the serialized invocation from the HttpURLConnection's InputStream. If the response is recognized as GZIP response, the InputStream will get wrapped in a GZIPInputStream.
Determine whether the given response is a GZIP response. <p>Default implementation checks whether the HTTP "Content-Encoding" header contains "gzip" (in any casing).
Read a RemoteInvocation from the given HTTP request. <p>Delegates to {@link #readRemoteInvocation(com.sun.net.httpserver.HttpExchange, java.io.InputStream)} with the {@link com.sun.net.httpserver.HttpExchange#getRequestBody()} request's input stream}.
Set the property bag for the endpoint, including properties such as "javax.xml.ws.wsdl.service" or "javax.xml.ws.wsdl.port".
Set the JDK concurrent executor to use for dispatching incoming requests to exported service instances.
Specify the binding type to use, overriding the value of the JAX-WS {@link javax.xml.ws.BindingType} annotation.
Specify WebServiceFeature objects (e.g. as inner bean definitions) to apply to JAX-WS endpoint creation.
Publish all {@link javax.jws.WebService} annotated beans in the containing BeanFactory.
Set a reference to an existing JAX-WS Service instance, for example obtained via {@link org.springframework.jndi.JndiObjectFactoryBean}. If not set, {@link LocalJaxWsServiceFactory}'s properties have to be specified.
Return a reference to an existing JAX-WS Service instance, if any.
Set the name of the port. Corresponds to the "wsdl:port" name.
Return the name of the port.
Set the username to specify on the stub.
Return the username to specify on the stub.
Set the password to specify on the stub.
Return the password to specify on the stub.
Set the endpoint address to specify on the stub.
Return the endpoint address to specify on the stub.
Set the "session.maintain" flag to specify on the stub.
Return the "session.maintain" flag to specify on the stub.
Set the "soapaction.use" flag to specify on the stub.
Return the "soapaction.use" flag to specify on the stub.
Set the SOAP action URI to specify on the stub.
Return the SOAP action URI to specify on the stub.
Set custom properties to be set on the stub. <p>Can be populated with a String "value" (parsed via PropertiesEditor) or a "props" element in XML bean definitions.
Allow Map access to the custom properties to be set on the stub, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "customProperties[myKey]". This is particularly useful for adding or overriding entries in child bean definitions.
Add a custom property to this JAX-WS BindingProvider.
Specify WebServiceFeature objects (e.g. as inner bean definitions) to apply to JAX-WS port stub creation.
Set the interface of the service that this factory should create a proxy for.
Return the interface of the service that this factory should create a proxy for.
Set whether to look up the JAX-WS service on startup. <p>Default is "true". Turn this flag off to allow for late start of the target server. In this case, the JAX-WS service will be lazily fetched on first access.
Return the bean ClassLoader to use for this interceptor.
Initialize the JAX-WS port for this interceptor.
Initialize this client interceptor's properties from the given WebService annotation, if necessary and possible (i.e. if "wsdlDocumentUrl", "namespaceUri", "serviceName" and "portName" haven't been set but corresponding values are declared at the annotation level of the specified service interface).
Return whether this client interceptor has already been prepared, i.e. has already looked up the JAX-WS service and port.
Return the prepared QName for the port.
Obtain the port stub from the given JAX-WS Service. {@code Service.getPort(...)}
Convert the given feature specification object to a WebServiceFeature instance {@link #setWebServiceFeatures "webServiceFeatures"} bean property
Prepare the given JAX-WS port stub, applying properties to it. Called by {@link #prepare}.
Return the underlying JAX-WS port stub that this interceptor delegates to for each method invocation on the proxy.
Perform a JAX-WS service invocation based on the given method invocation.
Perform a JAX-WS service invocation on the given port stub.
Constructor for JaxWsSoapFaultException.
Return the wrapped JAX-WS SOAPFault.
Set the URL of the WSDL document that describes the service.
Set the WSDL document URL as a {@link Resource}.
Return the URL of the WSDL document that describes the service.
Set the namespace URI of the service. Corresponds to the WSDL "targetNamespace".
Return the namespace URI of the service.
Set the name of the service to look up. Corresponds to the "wsdl:service" name.
Return the name of the service.
Specify WebServiceFeature objects (e.g. as inner bean definitions) to apply to JAX-WS service creation. <p>Note: This mechanism requires JAX-WS 2.2 or higher.
Set the JDK concurrent executor to use for asynchronous executions that require callbacks.
Set the JAX-WS HandlerResolver to use for all proxies and dispatchers created through this factory.
Return a QName for the given name, relative to the namespace URI of this factory, if given.
Specify an existing HTTP server to register the web service contexts with. This will typically be a server managed by the general Spring {@link org.springframework.remoting.support.SimpleHttpServerFactoryBean}. <p>Alternatively, configure a local HTTP server through the {@link #setPort "port"}, {@link #setHostname "hostname"} and {@link #setBacklog "backlog"} properties (or rely on the defaults there).
Specify the HTTP server's port. Default is 8080. <p>Only applicable for a locally configured HTTP server. Ignored when the {@link #setServer "server"} property has been specified.
Specify the HTTP server's hostname to bind to. Default is localhost; can be overridden with a specific network address to bind to. <p>Only applicable for a locally configured HTTP server. Ignored when the {@link #setServer "server"} property has been specified.
Specify the HTTP server's TCP backlog. Default is -1, indicating the system's default value. <p>Only applicable for a locally configured HTTP server. Ignored when the {@link #setServer "server"} property has been specified.
Specify the number of seconds to wait until HTTP exchanges have completed when shutting down the HTTP server. Default is 0. <p>Only applicable for a locally configured HTTP server. Ignored when the {@link #setServer "server"} property has been specified.
Set the base path for context publication. Default is "/". <p>For each context publication path, the service name will be appended to this base address. E.g. service name "OrderService" -> "/OrderService".
Register common {@link com.sun.net.httpserver.Filter Filters} to be applied to all detected {@link javax.jws.WebService} annotated beans.
Register a common {@link com.sun.net.httpserver.Authenticator} to be applied to all detected {@link javax.jws.WebService} annotated beans.
Build the HttpContext for the given endpoint.
Calculate the full endpoint path for the given endpoint.
Set the base address for exported services. <p>For each actual publication address, the service name will be appended to this base address. E.g. service name "OrderService"
Calculate the full endpoint address for the given endpoint.
Create an instance with the given map of file extensions and media types.
An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts an already extracted key.
Override to provide handling when a key is not resolved via. {@link #lookupMediaType}. Sub-classes can take further steps to determine the media type(s). If a MediaType is returned from this method it will be added to the cache in the base class.
Create an instance with the given list of {@code ContentNegotiationStrategy} strategies each of which may also be an instance of {@code MediaTypeFileExtensionResolver}.
A collection-based alternative to {@link #ContentNegotiationManager(ContentNegotiationStrategy...)}.
Create a default instance with a {@link HeaderContentNegotiationStrategy}.
Return the configured content negotiation strategies.
Register more {@code MediaTypeFileExtensionResolver} instances in addition to those detected at construction.
Whether the path extension in the URL path should be used to determine the requested media type. <p>By default this is set to {@code true} in which case a request for {@code /hotels.pdf} will be interpreted as a request for {@code "application/pdf"} regardless of the 'Accept' header.
Add a mapping from a key, extracted from a path extension or a query parameter, to a MediaType. This is required in order for the parameter strategy to work. Any extensions explicitly registered here are also whitelisted for the purpose of Reflected File Download attack detection (see Spring Framework reference documentation for more details on RFD attack protection). <p>The path extension strategy will also try to use {@link ServletContext#getMimeType} and JAF (if present) to resolve path extensions. To change this behavior see the {@link #useJaf} property.
An alternative to {@link #setMediaTypes} for use in Java code.
An alternative to {@link #setMediaTypes} for use in Java code.
Whether to ignore requests with path extension that cannot be resolved to any media type. Setting this to {@code false} will result in an {@code HttpMediaTypeNotAcceptableException} if there is no match. <p>By default this is set to {@code true}.
When {@link #setFavorPathExtension favorPathExtension} is set, this property determines whether to allow use of JAF (Java Activation Framework) to resolve a path extension to a specific MediaType. <p>By default this is not set in which case {@code PathExtensionContentNegotiationStrategy} will use JAF if available.
Whether a request parameter ("format" by default) should be used to determine the requested media type. For this option to work you must register {@link #setMediaTypes media type mappings}. <p>By default this is set to {@code false}.
Set the query parameter name to use when {@link #setFavorParameter} is on. <p>The default parameter name is {@code "format"}.
Whether to disable checking the 'Accept' request header. <p>By default this value is set to {@code false}.
Set the default content type to use when no content type is requested. <p>By default this is not set.
Set a custom {@link ContentNegotiationStrategy} to use to determine the content type to use when no content type is requested. <p>By default this is not set.
Create an instance with the given content type.
Create an instance with the given map of file extensions and media types.
Map an extension to a MediaType. Ignore if extension already mapped.
Use this method for a reverse lookup from extension to MediaType.
Create an instance with the given map of file extensions and media types.
Set the name of the parameter to use to determine requested media types. <p>By default this is set to {@code "format"}.
Create an instance with the given map of file extensions and media types.
Create an instance without any mappings to start with. Mappings may be added later on if any extensions are resolved through the Java Activation framework.
Whether to use the Java Activation Framework to look up file extensions. <p>By default this is set to "true" but depends on JAF being present.
Whether to ignore requests with unknown file extension. Setting this to {@code false} results in {@code HttpMediaTypeNotAcceptableException}. <p>By default this is set to {@code true}.
A public method exposing the knowledge of the path extension strategy to resolve file extensions to a MediaType in this case for a given {@link Resource}. The method first looks up any explicitly registered file extensions first and then falls back on JAF if available.
Find extended mime.types from the spring-context-support module.
Create an instance with the given extension-to-MediaType lookup.
Create an instance without any mappings to start with. Mappings may be added later when extensions are resolved through {@link ServletContext#getMimeType(String)} or via JAF.
Extends the base class {@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource} with the ability to also look up through the ServletContext.
Create a new HandlerMethodInvocationException for the given Method handle and cause.
Resolves the given {@link RequestBody @RequestBody} annotation.
Resolves the given {@link CookieValue @CookieValue} annotation. <p>Throws an UnsupportedOperationException by default.
Resolves the given {@link PathVariable @PathVariable} annotation. <p>Throws an UnsupportedOperationException by default.
Determine whether the given value qualifies as a "binding candidate", i.e. might potentially be subject to bean-style data binding later on.
Return a {@link HttpInputMessage} for the given {@link NativeWebRequest}. <p>Throws an UnsupportedOperation1Exception by default.
Return a {@link HttpOutputMessage} for the given {@link NativeWebRequest}. <p>Throws an UnsupportedOperationException by default.
Initialize a new HandlerMethodResolver for the specified handler type.
Assign a name to this mapping. <p><b>Supported at the type level as well as at the method level!</b> When used on both levels, a combined name is derived by concatenation with "#" as separator.
Set whether a binder should attempt to "auto-grow" a nested path that contains a null value. <p>If "true", a null path location will be populated with a default object value and traversed instead of resulting in an exception. This flag also enables auto-growth of collection elements when accessing an out-of-bounds index. <p>Default is "true" on a standard DataBinder. Note that this feature is only supported for bean property access (DataBinder's default mode), not for field access.
Return whether a binder should attempt to "auto-grow" a nested path that contains a null value.
Set whether to use direct field access instead of bean property access. <p>Default is {@code false}, using bean property access. Switch this to {@code true} in order to enforce direct field access.
Return whether to use direct field access instead of bean property access.
Set the strategy to use for resolving errors into message codes. Applies the given strategy to all data binders used by this controller. <p>Default is {@code null}, i.e. using the default strategy of the data binder.
Set the strategy to use for processing binding errors, that is, required field errors and {@code PropertyAccessException}s. <p>Default is {@code null}, that is, using the default strategy of the data binder.
Return the strategy to use for processing binding errors.
Return the Validator to apply after each binding step, if any.
Specify a ConversionService which will apply to every DataBinder.
Return the ConversionService which will apply to every DataBinder.
Specify a single PropertyEditorRegistrar to be applied to every DataBinder.
Specify multiple PropertyEditorRegistrars to be applied to every DataBinder.
Return the PropertyEditorRegistrars to be applied to every DataBinder.
Create a new {@code DefaultDataBinderFactory} instance. (or {@code null} if none)
Extension point to create the WebDataBinder instance. By default this is {@code WebRequestDataBinder}.
Specify a prefix to use for the attribute names in the backend session. <p>Default is to use no prefix, storing the session attributes with the same name as in the model.
Calculate the attribute name in the backend session. <p>The default implementation simply prepends the configured {@link #setAttributeNamePrefix "attributeNamePrefix"}, if any.
Retrieve the Spring {@link WebApplicationContext} to use. The default implementation returns the current {@link WebApplicationContext} as registered for the thread context class loader.
Create a new WebRequestDataBinder instance, with default object name. if the binder is just used to convert a plain parameter value)
Create a new WebRequestDataBinder instance. if the binder is just used to convert a plain parameter value)
Bind the parameters of the given request to this binder's target, also binding multipart files in case of a multipart request. <p>This call can create field errors, representing basic binding errors like a required field (code "required"), or type mismatch between value and bean property (code "typeMismatch"). <p>Multipart files are bound via their parameter name, just like normal HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property, invoking a "setUploadedFile" setter method. <p>The type of the target property for a multipart file can be Part, MultipartFile, byte[], or String. The latter two receive the contents of the uploaded file; all metadata like original file name, content type, etc are lost in those cases.
Check if the request is a multipart request (by checking its Content-Type header).
Treats errors as fatal. <p>Use this method only if it's an error if the input isn't valid. This might be appropriate if all input is from dropdowns, for example.
Create a new EscapedErrors instance for the given source instance.
Constructor for {@link MethodArgumentNotValidException}.
Return the method parameter that failed validation.
Return the results of the failed validation.
Constructor for MissingPathVariableException.
Return the expected name of the path variable.
Return the method parameter bound to the path variable.
Constructor for MissingServletRequestParameterException.
Return the name of the offending parameter.
Return the expected type of the offending parameter.
Constructor for ServletRequestBindingException.
Create a new ServletRequestDataBinder instance, with default object name. if the binder is just used to convert a plain parameter value)
Create a new ServletRequestDataBinder instance. if the binder is just used to convert a plain parameter value)
Bind the parameters of the given request to this binder's target, also binding multipart files in case of a multipart request. <p>This call can create field errors, representing basic binding errors like a required field (code "required"), or type mismatch between value and bean property (code "typeMismatch"). <p>Multipart files are bound via their parameter name, just like normal HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property, invoking a "setUploadedFile" setter method. <p>The type of the target property for a multipart file can be MultipartFile, byte[], or String. The latter two receive the contents of the uploaded file; all metadata like original file name, content type, etc are lost in those cases.
Create new ServletRequestPropertyValues using no prefix (and hence, no prefix separator).
Create new ServletRequestPropertyValues using the given prefix and the default prefix separator (the underscore character "_"). consist of this plus the separator)
Create new ServletRequestPropertyValues supplying both prefix and prefix separator. consist of this plus the separator) and the rest of the parameter name ("param1", "param2")
Get an Integer parameter, or {@code null} if not present. Throws an exception if it the parameter value isn't a number. so it doesn't need to be caught
Get an int parameter, with a fallback value. Never throws an exception. Can pass a distinguished value as default to enable checks of whether it was supplied.
Get an array of int parameters, return an empty array if not found.
Get an int parameter, throwing an exception if it isn't found or isn't a number. so it doesn't need to be caught
Get an array of int parameters, throwing an exception if not found or one is not a number.. so it doesn't need to be caught
Get a Long parameter, or {@code null} if not present. Throws an exception if it the parameter value isn't a number. so it doesn't need to be caught
Get a long parameter, with a fallback value. Never throws an exception. Can pass a distinguished value as default to enable checks of whether it was supplied.
Get an array of long parameters, return an empty array if not found.
Get a long parameter, throwing an exception if it isn't found or isn't a number. so it doesn't need to be caught
Get an array of long parameters, throwing an exception if not found or one is not a number. so it doesn't need to be caught
Get a Float parameter, or {@code null} if not present. Throws an exception if it the parameter value isn't a number. so it doesn't need to be caught
Get a float parameter, with a fallback value. Never throws an exception. Can pass a distinguished value as default to enable checks of whether it was supplied.
Get an array of float parameters, return an empty array if not found.
Get a float parameter, throwing an exception if it isn't found or isn't a number. so it doesn't need to be caught
Get an array of float parameters, throwing an exception if not found or one is not a number. so it doesn't need to be caught
Get a Double parameter, or {@code null} if not present. Throws an exception if it the parameter value isn't a number. so it doesn't need to be caught
Get a double parameter, with a fallback value. Never throws an exception. Can pass a distinguished value as default to enable checks of whether it was supplied.
Get an array of double parameters, return an empty array if not found.
Get a double parameter, throwing an exception if it isn't found or isn't a number. so it doesn't need to be caught
Get an array of double parameters, throwing an exception if not found or one is not a number. so it doesn't need to be caught
Get a Boolean parameter, or {@code null} if not present. Throws an exception if it the parameter value isn't a boolean. <p>Accepts "true", "on", "yes" (any case) and "1" as values for true; treats every other non-empty value as false (i.e. parses leniently). so it doesn't need to be caught
Get a boolean parameter, with a fallback value. Never throws an exception. Can pass a distinguished value as default to enable checks of whether it was supplied. <p>Accepts "true", "on", "yes" (any case) and "1" as values for true; treats every other non-empty value as false (i.e. parses leniently).
Get an array of boolean parameters, return an empty array if not found. <p>Accepts "true", "on", "yes" (any case) and "1" as values for true; treats every other non-empty value as false (i.e. parses leniently).
Get a boolean parameter, throwing an exception if it isn't found or isn't a boolean. <p>Accepts "true", "on", "yes" (any case) and "1" as values for true; treats every other non-empty value as false (i.e. parses leniently). so it doesn't need to be caught
Get an array of boolean parameters, throwing an exception if not found or one isn't a boolean. <p>Accepts "true", "on", "yes" (any case) and "1" as values for true; treats every other non-empty value as false (i.e. parses leniently). so it doesn't need to be caught
Get a String parameter, or {@code null} if not present. so it doesn't need to be caught
Get a String parameter, with a fallback value. Never throws an exception. Can pass a distinguished value to default to enable checks of whether it was supplied.
Get an array of String parameters, return an empty array if not found.
Get a String parameter, throwing an exception if it isn't found. so it doesn't need to be caught
Get an array of String parameters, throwing an exception if not found. so it doesn't need to be caught
Create a new UnsatisfiedServletRequestParameterException.
Return the parameter conditions that have been violated or the first group in case of multiple groups.
Return all parameter condition groups that have been violated.
Return the actual parameter Map associated with the ServletRequest.
Create a new WebDataBinder instance, with default object name. if the binder is just used to convert a plain parameter value)
Create a new WebDataBinder instance. if the binder is just used to convert a plain parameter value)
Specify a prefix that can be used for parameters that mark potentially empty fields, having "prefix + field" as name. Such a marker parameter is checked by existence: You can send any value for it, for example "visible". This is particularly useful for HTML checkboxes and select options. <p>Default is "_", for "_FIELD" parameters (e.g. "_subscribeToNewsletter"). Set this to null if you want to turn off the empty field check completely. <p>HTML checkboxes only send a value when they're checked, so it is not possible to detect that a formerly checked box has just been unchecked, at least not with standard HTML means. <p>One way to address this is to look for a checkbox parameter value if you know that the checkbox has been visible in the form, resetting the checkbox if no value found. In Spring web MVC, this typically happens in a custom {@code onBind} implementation. <p>This auto-reset mechanism addresses this deficiency, provided that a marker parameter is sent for each checkbox field, like "_subscribeToNewsletter" for a "subscribeToNewsletter" field. As the marker parameter is sent in any case, the data binder can detect an empty field and automatically reset its value.
Return the prefix for parameters that mark potentially empty fields.
Specify a prefix that can be used for parameters that indicate default value fields, having "prefix + field" as name. The value of the default field is used when the field is not provided. <p>Default is "!", for "!FIELD" parameters (e.g. "!subscribeToNewsletter"). Set this to null if you want to turn off the field defaults completely. <p>HTML checkboxes only send a value when they're checked, so it is not possible to detect that a formerly checked box has just been unchecked, at least not with standard HTML means.  A default field is especially useful when a checkbox represents a non-boolean value. <p>The presence of a default parameter preempts the behavior of a field marker for the given field.
Return the prefix for parameters that mark default fields.
Set whether to bind empty MultipartFile parameters. Default is "true". <p>Turn this off if you want to keep an already bound MultipartFile when the user resubmits the form without choosing a different file. Else, the already bound MultipartFile will be replaced by an empty MultipartFile holder.
Return whether to bind empty MultipartFile parameters.
Check the given property values for field defaults, i.e. for fields that start with the field default prefix. <p>The existence of a field defaults indicates that the specified value should be used if the field is otherwise not present.
Check the given property values for field markers, i.e. for fields that start with the field marker prefix. <p>The existence of a field marker indicates that the specified field existed in the form. If the property values do not contain a corresponding field value, the field will be considered as empty and will be reset appropriately.
Determine an empty value for the specified field. <p>Default implementation returns {@code Boolean.FALSE} for boolean fields and an empty array of array types. Else, {@code null} is used as default.
Bind all multipart files contained in the given request, if any (in case of a multipart request). <p>Multipart files will only be added to the property values if they are not empty or if we're configured to bind empty multipart files too.
Create a new instance of the {@code AsyncRestTemplate} using default settings. <p>This constructor uses a {@link SimpleClientHttpRequestFactory} in combination with a {@link SimpleAsyncTaskExecutor} for asynchronous execution.
Create a new instance of the {@code AsyncRestTemplate} using the given {@link AsyncTaskExecutor}. <p>This constructor uses a {@link SimpleClientHttpRequestFactory} in combination with the given {@code AsyncTaskExecutor} for asynchronous execution.
Create a new instance of the {@code AsyncRestTemplate} using the given {@link AsyncClientHttpRequestFactory}. <p>This constructor will cast the given asynchronous {@code AsyncClientHttpRequestFactory} to a {@link ClientHttpRequestFactory}. Since all implementations of {@code ClientHttpRequestFactory} provided in Spring also implement {@code AsyncClientHttpRequestFactory}, this should not result in a {@code ClassCastException}.
Creates a new instance of the {@code AsyncRestTemplate} using the given asynchronous and synchronous request factories.
Create a new instance of the {@code AsyncRestTemplate} using the given {@link AsyncClientHttpRequestFactory} and synchronous {@link RestTemplate}.
Set the error handler. <p>By default, AsyncRestTemplate uses a {@link org.springframework.web.client.DefaultResponseErrorHandler}.
This property has the same purpose as the corresponding property on the {@code RestTemplate}. For more details see {@link RestTemplate#setUriTemplateHandler}.
Return the configured URI template handler.
Execute the given method on the provided URI. The {@link org.springframework.http.client.ClientHttpRequest} is processed using the {@link RequestCallback}; the response with the {@link ResponseExtractor}. be {@code null})
Returns a request callback implementation that prepares the request {@code Accept} headers based on the given response type and configured {@linkplain #getMessageConverters() message converters}.
Returns a request callback implementation that writes the given object to the request stream.
Returns a response extractor for {@link ResponseEntity}.
Returns a response extractor for {@link HttpHeaders}.
Create a new {@code AsyncRequestCallbackAdapter} from the given {@link RequestCallback}.
Create a new instance of the {@code HttpMessageConverterExtractor} with the given response type and message converters. The given converters must support the response type.
Creates a new instance of the {@code HttpMessageConverterExtractor} with the given response type and message converters. The given converters must support the response type.
Construct a new instance with an {@link HttpStatus}.
Construct a new instance with an {@link HttpStatus} and status text.
Construct instance with an {@link HttpStatus}, status text, and content.
Construct instance with an {@link HttpStatus}, status text, content, and a response charset.
Indicates whether the response has a message body. <p>Implementation returns {@code false} for: <ul> <li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li> <li>a {@code Content-Length} header of {@code 0}</li> </ul>
Indicates whether the response has an empty message body. <p>Implementation tries to read the first bytes of the response stream: <ul> <li>if no bytes are available, the message body is empty</li> <li>otherwise it is not empty and the stream is reset to its start for further reading</li> </ul>
Construct a new instance of with the given response data.
Configure the {@link UriTemplateHandler} to use to expand URI templates. By default the {@link DefaultUriTemplateHandler} is used which relies on Spring's URI template support and exposes several useful properties that customize its behavior for encoding and for prepending a common base URL. An alternative implementation may be used to plug an external URI template library.
Handle the given response, performing appropriate logging and invoking the {@link ResponseErrorHandler} if necessary. <p>Can be overridden in subclasses.
Returns a request callback implementation that prepares the request {@code Accept} headers based on the given response type and configured {@linkplain #getMessageConverters() message converters}.
Create a DeferredResult.
Create a DeferredResult with a timeout value. <p>By default not set in which case the default configured in the MVC Java Config or the MVC namespace is used, or if that's not set, then the timeout depends on the default of the underlying server.
Create a DeferredResult with a timeout value and a default result to use in case of timeout.
Return {@code true} if this DeferredResult is no longer usable either because it was previously set or because the underlying request expired. <p>The result may have been set with a call to {@link #setResult(Object)}, or {@link #setErrorResult(Object)}, or as a result of a timeout, if a timeout result was provided to the constructor. The request may also expire due to a timeout or network error.
Return {@code true} if the DeferredResult has been set.
Return the result, or {@code null} if the result wasn't set. Since the result can also be {@code null}, it is recommended to use {@link #hasResult()} first to check if there is a result prior to calling this method.
Return the configured timeout value in milliseconds.
Register code to invoke when the async request times out. <p>This method is called from a container thread when an async request times out before the {@code DeferredResult} has been populated. It may invoke {@link DeferredResult#setResult setResult} or {@link DeferredResult#setErrorResult setErrorResult} to resume processing.
Register code to invoke when the async request completes. <p>This method is called from a container thread when an async request completed for any reason including timeout and network error. This is useful for detecting that a {@code DeferredResult} instance is no longer usable.
Provide a handler to use to handle the result value.
Set the value for the DeferredResult and handle it. "false" if the result was already set or the async request expired
Set an error value for the {@link DeferredResult} and handle it. The value may be an {@link Exception} or {@link Throwable} in which case it will be processed as if a handler raised the exception. handling; "false" if the result was already set or the async request expired
Create a new instance for the given request/response pair.
Configure the {@link AsyncWebRequest} to use. This property may be set more than once during a single request to accurately reflect the current state of the request (e.g. following a forward, request/response wrapping, etc). However, it should not be set while concurrent handling is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is {@code true}.
Configure an AsyncTaskExecutor for use with concurrent processing via {@link #startCallableProcessing(Callable, Object...)}. <p>By default a {@link SimpleAsyncTaskExecutor} instance is used.
Whether the selected handler for the current request chose to handle the request asynchronously. A return value of "true" indicates concurrent handling is under way and the response will remain open. A return value of "false" means concurrent handling was either not started or possibly that it has completed and the request was dispatched for further processing of the concurrent result.
Whether a result value exists as a result of concurrent handling.
Provides access to the result from concurrent handling. concurrent handling raised one.
Provides access to additional processing context saved at the start of concurrent handling.
Get the {@link CallableProcessingInterceptor} registered under the given key.
Get the {@link DeferredResultProcessingInterceptor} registered under the given key.
Register a {@link CallableProcessingInterceptor} under the given key.
Register a {@link CallableProcessingInterceptor} without a key. The key is derived from the class name and hashcode.
Register a {@link DeferredResultProcessingInterceptor} under the given key.
Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key. The default key is derived from the interceptor class name and hash code.
Clear {@linkplain #getConcurrentResult() concurrentResult} and {@linkplain #getConcurrentResultContext() concurrentResultContext}.
Use the given {@link WebAsyncTask} to configure the task executor as well as the timeout value of the {@code AsyncWebRequest} before delegating to {@link #startCallableProcessing(Callable, Object...)}. via {@link #getConcurrentResultContext()}
Start concurrent request processing and initialize the given {@link DeferredResult} with a {@link DeferredResultHandler} that saves the result and dispatches the request to resume processing of that result. The {@code AsyncWebRequest} is also updated with a completion handler that expires the {@code DeferredResult} and a timeout handler assuming the {@code DeferredResult} has a default timeout result. via {@link #getConcurrentResultContext()}
Create a {@code WebAsyncTask} wrapping the given {@link Callable}.
Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}.
Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}.
Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable.
Return the {@link Callable} to use for concurrent handling (never {@code null}).
Return the timeout value in milliseconds, or {@code null} if no timeout is set.
A {@link BeanFactory} to use for resolving an executor name. <p>This factory reference will automatically be set when {@code WebAsyncTask} is used within a Spring MVC controller.
Return the AsyncTaskExecutor to use for concurrent handling, or {@code null} if none specified.
Register code to invoke when the async request times out. <p>This method is called from a container thread when an async request times out before the {@code Callable} has completed. The callback is executed in the same thread and therefore should return without blocking. It may return an alternative value to use, including an {@link Exception} or return {@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.
Register code to invoke when the async request completes. <p>This method is called from a container thread when an async request completed for any reason, including timeout and network error.
Obtain the {@link WebAsyncManager} for the current request, or if not found, create and associate it with the request.
Create an AsyncWebRequest instance. By default, an instance of {@link StandardServletAsyncWebRequest} gets created when running in Servlet 3.0 (or higher) environment - as a fallback, an instance of {@link NoSupportAsyncWebRequest} will be returned.
Signal that the request has been completed. <p>Executes all request destruction callbacks and updates the session attributes that have been accessed during request processing.
Determine whether the original request is still active.
Register the given callback as to be executed after request completion.
Remove the request destruction callback for the specified attribute, if any.
Execute all callbacks that have been registered for execution after request completion.
Create a new DestructionCallbackBindingListener for the given callback. object gets unbound from the session
Create a new FacesRequestAttributes adapter for the given FacesContext.
Return the JSF FacesContext that this adapter operates on.
Return the JSF ExternalContext that this adapter operates on.
Return the JSF attribute Map for the specified scope
Create a new FacesWebRequest adapter for the given FacesContext.
Set whether or not the session id and user name should be included in the log message.
Return whether or not the session id and user name should be included in the log message.
Determine the message to be pushed onto the Log4J nested diagnostic context. <p>Default is the request object's {@code getDescription} result.
Reset the RequestAttributes for the current thread.
Bind the given RequestAttributes to the current thread, <i>not</i> exposing it as inheritable for child threads.
Bind the given RequestAttributes to the current thread. or {@code null} to reset the thread-bound context for child threads (using an {@link InheritableThreadLocal})
Return the RequestAttributes currently bound to the thread. or {@code null} if none bound
Return the RequestAttributes currently bound to the thread. <p>Exposes the previously bound RequestAttributes instance, if any. Falls back to the current JSF FacesContext, if any. is bound to the current thread
Create a new ServletRequestAttributes instance for the given request.
Exposes the native {@link HttpServletRequest} that we're wrapping.
Exposes the native {@link HttpServletResponse} that we're wrapping (if any).
Exposes the {@link HttpSession} that we're wrapping.
Determine whether the given value is to be considered as an immutable session attribute, that is, doesn't have to be re-set via {@code session.setAttribute} since its value cannot meaningfully change internally. <p>The default implementation returns {@code true} for {@code String}, {@code Character}, {@code Boolean} and standard {@code Number} values. purposes of session attribute management; {@code false} otherwise
Register the given callback as to be executed after session termination. <p>Note: The callback object should be serializable in order to survive web app restarts.
Create a new ServletWebRequest instance for the given request.
Create a new ServletWebRequest instance for the given request/response pair.
Return the HTTP method of the request.
Create a new SessionScope, storing attributes in a locally isolated session (or default session, if there is no distinction between a global session and a component-specific session).
Create a new SessionScope, specifying whether to store attributes in the global session, provided that such a distinction is available. <p>This distinction is important for Portlet environments, where there are two notions of a session: "portlet scope" and "application scope". If this flag is on, objects will be put into the "application scope" session; else they will end up in the "portlet scope" session (the typical default). <p>In a Servlet environment, this flag is effectively ignored. {@code false} in case of a component-specific session as target
Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader} and/or {@link ClassPathBeanDefinitionScanner}. <p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}.
Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader} and/or {@link ClassPathBeanDefinitionScanner}, if any.
Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader} and/or {@link ClassPathBeanDefinitionScanner}. <p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}.
Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader} and/or {@link ClassPathBeanDefinitionScanner}, if any.
Register one or more annotated classes to be processed. <p>Note that {@link #refresh()} must be called in order for the context to fully process the new classes. e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes
Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory. <p>This should be pre-configured with the {@code Environment} (if desired) but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet.
Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory. <p>This should be pre-configured with the {@code Environment} (if desired) but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet.
Create a new ContextExposingHttpServletRequest for the given request.
Create a new ContextExposingHttpServletRequest for the given request. are supposed to be exposed (if this is non-null, only the beans in this Set are eligible for exposure as attributes)
Return the WebApplicationContext that this request runs in.
Create a new GenericWebApplicationContext.
Create a new GenericWebApplicationContext for the given ServletContext.
Create a new GenericWebApplicationContext with the given DefaultListableBeanFactory.
Load the bean definitions with the given GroovyBeanDefinitionReader. <p>The lifecycle of the bean factory is handled by the refreshBeanFactory method; therefore this method is just supposed to load and/or register bean definitions. <p>Delegates to a ResourcePatternResolver for resolving location patterns into Resource instances.
Create a new RequestHandledEvent with session information. request, if any (usually the UserPrincipal)
Return the processing time of the request in milliseconds.
Return the id of the HTTP session, if any.
Return the name of the user that was associated with the request (usually the UserPrincipal).
Return whether the request failed.
Return the cause of failure, if any.
Return a short description of this event, only involving the most important context data.
Return a full description of this event, involving all available context data.
Set the ServletContext attributes to expose as key-value pairs. Each key will be considered a ServletContext attributes key, and each value will be used as corresponding attribute value. <p>Usually, you will use bean references for the values, to export Spring-defined beans as ServletContext attributes. Of course, it is also possible to define plain values to export.
Set the name of the ServletContext attribute to expose.
Create a new ServletContextAwareProcessor for the given context.
Create a new ServletContextAwareProcessor for the given config.
Create a new ServletContextAwareProcessor for the given context and config.
Returns the {@link ServletContext} to be injected or {@code null}. This method can be overridden by subclasses when a context is obtained after the post-processor has been registered.
Returns the {@link ServletContext} to be injected or {@code null}. This method can be overridden by subclasses when a context is obtained after the post-processor has been registered.
Create a new LiveBeansView for the given ServletContext.
Set the name of the ServletContext init parameter to expose.
Create a new ServletContextResource. <p>The Servlet spec requires that resource paths start with a slash, even if many containers accept paths without leading slash too. Consequently, the given path will be prepended with a slash if it doesn't already start with one.
Return the ServletContext for this resource.
Return the path for this resource.
Create a new ServletContextResourceLoader.
Create a new ServletContextResourcePatternResolver.
Create a new ServletContextResourcePatternResolver. actual resources with
Recursively retrieve ServletContextResources that match the given pattern, adding them to the given result set. with preprended root directory path
Extract entries from the given jar by pattern.
Create a new Scope wrapper for the given ServletContext.
Create a new ServletRequestHandledEvent. request, if any (usually the UserPrincipal)
Return the URL of the request.
Return the IP address that the request came from.
Return the HTTP method of the request (usually GET or POST).
Return the name of the servlet that handled the request.
Return the HTTP status code of the response or -1 if the status code is not available.
This constructor performs injection on this instance, based on the current web application context. <p>Intended for use as a base class.
Process {@code @Autowired} injection for the given target object, based on the current web application context. <p>Intended for use as a delegate.
Process {@code @Autowired} injection for the given target object, based on the current root web application context as stored in the ServletContext. <p>Intended for use as a delegate.
Find the root {@code WebApplicationContext} for this web app, typically loaded via {@link org.springframework.web.context.ContextLoaderListener}. <p>Will rethrow an exception that happened on root context startup, to differentiate between a failed context startup and no context at all.
Find the root {@code WebApplicationContext} for this web app, typically loaded via {@link org.springframework.web.context.ContextLoaderListener}. <p>Will rethrow an exception that happened on root context startup, to differentiate between a failed context startup and no context at all.
Find a custom {@code WebApplicationContext} for this web app.
Find a unique {@code WebApplicationContext} for this web app: either the root web app context (preferred) or a unique {@code WebApplicationContext} among the registered {@code ServletContext} attributes (typically coming from a single {@code DispatcherServlet} in the current web application). <p>Note that {@code DispatcherServlet}'s exposure of its context can be controlled through its {@code publishContext} property, which is {@code true} by default but can be selectively switched to only publish a single context despite multiple {@code DispatcherServlet} registrations in the web app.
Register web-specific scopes ("request", "session", "globalSession") with the given BeanFactory, as used by the WebApplicationContext.
Register web-specific scopes ("request", "session", "globalSession", "application") with the given BeanFactory, as used by the WebApplicationContext.
Register web-specific environment beans ("contextParameters", "contextAttributes") with the given BeanFactory, as used by the WebApplicationContext.
Convenient variant of {@link #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig)} that always provides {@code null} for the {@link ServletConfig} parameter.
Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with actual instances populated with the given {@code servletContext} and {@code servletConfig} objects. <p>This method is idempotent with respect to the fact it may be called any number of times but will perform replacement of stub property sources with their corresponding actual property sources once and only once. be {@code null}) or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME servlet context property source} has already been initialized) or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME servlet config property source} has already been initialized)
Return the current RequestAttributes instance as ServletRequestAttributes.
Return the current application context as WebApplicationContext. <p><b>NOTE:</b> Only use this if you actually need to access WebApplicationContext-specific functionality. Preferably use {@code getApplicationContext()} or {@code getServletContext()} else, to be able to run in non-WebApplicationContext environments as well.
Return the current ServletContext.
Return the temporary directory for the current web application, as provided by the servlet container.
Load the bean definitions with the given XmlBeanDefinitionReader. <p>The lifecycle of the bean factory is handled by the refreshBeanFactory method; therefore this method is just supposed to load and/or register bean definitions. <p>Delegates to a ResourcePatternResolver for resolving location patterns into Resource instances.
Register a {@link ContextLoaderListener} against the given servlet context. The {@code ContextLoaderListener} is initialized with the application context returned from the {@link #createRootApplicationContext()} template method.
Specify application context initializers to be applied to the root application context that the {@code ContextLoaderListener} is being created with.
Find all ServletContext attributes which implement {@link DisposableBean} and destroy them, removing all affected ServletContext attributes eventually.
Create a new {@code ContextLoader} with the given application context. This constructor is useful in Servlet 3.0+ environments where instance-based registration of listeners is possible through the {@link ServletContext#addListener} API. <p>The context may or may not yet be {@linkplain ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong> already been refreshed (the recommended approach), then the following will occur: <ul> <li>If the given context has not already been assigned an {@linkplain ConfigurableApplicationContext#setId id}, one will be assigned to it</li> <li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to the application context</li> <li>{@link #customizeContext} will be called</li> <li>Any {@link ApplicationContextInitializer}s specified through the "contextInitializerClasses" init-param will be applied.</li> <li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li> </ul> If the context has already been refreshed or does not implement {@code ConfigurableWebApplicationContext}, none of the above will occur under the assumption that the user has performed these actions (or not) per his or her specific needs. <p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples. <p>In any case, the given application context will be registered into the ServletContext under the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are free to call the {@link #closeWebApplicationContext} method on container shutdown to close the application context.
Initialize Spring's web application context for the given servlet context, using the application context provided at construction time, or creating a new one according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and "{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params.
Instantiate the root WebApplicationContext for this loader, either the default context class or a custom context class if specified. <p>This implementation expects custom contexts to implement the {@link ConfigurableWebApplicationContext} interface. Can be overridden in subclasses. <p>In addition, {@link #customizeContext} gets called prior to refreshing the context, allowing subclasses to perform custom modifications to the context.
Return the WebApplicationContext implementation class to use, either the default XmlWebApplicationContext or a custom context class if specified.
ContextLoader after config locations have been supplied to the context but before the context is <em>refreshed</em>. <p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext) determines} what (if any) context initializer classes have been specified through {@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and {@linkplain ApplicationContextInitializer#initialize invokes each} with the given web application context. <p>Any {@code ApplicationContextInitializers} implementing {@link org.springframework.core.Ordered Ordered} or marked with @{@link org.springframework.core.annotation.Order Order} will be sorted appropriately.
Template method with default implementation (which may be overridden by a subclass), to load or obtain an ApplicationContext instance which will be used as the parent context of the root WebApplicationContext. If the return value from the method is null, no parent context is set. <p>The main reason to load a parent context here is to allow multiple root web application contexts to all be children of a shared EAR context, or alternately to also share the same parent context that is visible to EJBs. For pure web applications, there is usually no need to worry about having a parent context to the root web application context. <p>The default implementation uses {@link org.springframework.context.access.ContextSingletonBeanFactoryLocator}, configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and {@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context which will be shared by all other users of ContextsingletonBeanFactoryLocator which also use the same configuration parameters.
Close Spring's web application context for the given servlet context. If the default {@link #loadParentContext(ServletContext)} implementation, which uses ContextSingletonBeanFactoryLocator, has loaded any shared parent context, release one reference to that shared parent context. <p>If overriding {@link #loadParentContext(ServletContext)}, you may have to override this method as well.
Obtain the Spring root web application context for the current thread (i.e. for the current thread's context ClassLoader, which needs to be the web application's ClassLoader). if none found
Create a new {@code ContextLoaderListener} with the given application context. This constructor is useful in Servlet 3.0+ environments where instance-based registration of listeners is possible through the {@link javax.servlet.ServletContext#addListener} API. <p>The context may or may not yet be {@linkplain org.springframework.context.ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong> already been refreshed (the recommended approach), then the following will occur: <ul> <li>If the given context has not already been assigned an {@linkplain org.springframework.context.ConfigurableApplicationContext#setId id}, one will be assigned to it</li> <li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to the application context</li> <li>{@link #customizeContext} will be called</li> <li>Any {@link org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}s specified through the "contextInitializerClasses" init-param will be applied.</li> <li>{@link org.springframework.context.ConfigurableApplicationContext#refresh refresh()} will be called</li> </ul> If the context has already been refreshed or does not implement {@code ConfigurableWebApplicationContext}, none of the above will occur under the assumption that the user has performed these actions (or not) per his or her specific needs. <p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples. <p>In any case, the given application context will be registered into the ServletContext under the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring application context will be closed when the {@link #contextDestroyed} lifecycle method is invoked on this listener.
Construct a new {@code CorsConfiguration} instance by copying all values from the supplied {@code CorsConfiguration}.
Combine the supplied {@code CorsConfiguration} with this one. <p>Properties of this configuration are overridden by any non-null properties of the supplied one. configuration if the supplied configuration is {@code null}
<p>The special value {@code "*"} allows all domains. <p>By default this is not set.
Return the configured origins to allow, possibly {@code null}.
Add an origin to allow.
Set the HTTP methods to allow, e.g. {@code "GET"}, {@code "POST"}, {@code "PUT"}, etc. <p>The special value {@code "*"} allows all methods. <p>If not set, only {@code "GET"} is allowed. <p>By default this is not set.
Return the allowed HTTP methods, possibly {@code null} in which case only {@code "GET"} is allowed.
Add an HTTP method to allow.
Set the list of headers that a pre-flight request can list as allowed for use during an actual request. <p>The special value {@code "*"} allows actual requests to send any header. <p>A header name is not required to be listed if it is one of: {@code Cache-Control}, {@code Content-Language}, {@code Expires}, {@code Last-Modified}, or {@code Pragma}. <p>By default this is not set.
Return the allowed actual request headers, possibly {@code null}.
Add an actual request header to allow.
Set the list of response headers other than simple headers (i.e. {@code Cache-Control}, {@code Content-Language}, {@code Content-Type}, {@code Expires}, {@code Last-Modified}, or {@code Pragma}) that an actual response might have and can be exposed. <p>Note that {@code "*"} is not a valid exposed header value. <p>By default this is not set.
Return the configured response headers to expose, possibly {@code null}.
Add a response header to expose. <p>Note that {@code "*"} is not a valid exposed header value.
Whether user credentials are supported. <p>By default this is not set (i.e. user credentials are not supported).
Return the configured {@code allowCredentials} flag, possibly {@code null}.
Configure how long, in seconds, the response from a pre-flight request can be cached by clients. <p>By default this is not set.
Return the configured {@code maxAge} value, possibly {@code null}.
Check the origin of the request against the configured allowed origins. means the request origin is not allowed
Check the HTTP request method (or the method from the {@code Access-Control-Request-Method} header on a pre-flight request) against the configured allowed methods. request, or {@code null} if the supplied {@code requestMethod} is not allowed
Check the supplied request headers (or the headers listed in the {@code Access-Control-Request-Headers} of a pre-flight request) against the configured allowed headers. request, or {@code null} if none of the supplied request headers is allowed
Returns {@code true} if the request is a valid CORS one.
Returns {@code true} if the request is a valid CORS pre-flight one.
Invoked when one of the CORS checks failed. The default implementation sets the response status to 403 and writes "Invalid CORS request" to the response.
Handle the given request.
Check the origin and determine the origin for the response. The default implementation simply delegates to {@link org.springframework.web.cors.CorsConfiguration#checkOrigin(String)}.
Check the HTTP method and determine the methods for the response of a pre-flight request. The default implementation simply delegates to {@link org.springframework.web.cors.CorsConfiguration#checkOrigin(String)}.
Check the headers and determine the headers for the response of a pre-flight request. The default implementation simply delegates to {@link org.springframework.web.cors.CorsConfiguration#checkOrigin(String)}.
Set the PathMatcher implementation to use for matching URL paths against registered URL patterns. Default is AntPathMatcher.
Set if URL lookup should always use the full path within the current servlet context. Else, the path within the current servlet mapping is used if applicable (that is, in the case of a ".../*" servlet mapping in web.xml). <p>Default is "false".
Set if context path and request URI should be URL-decoded. Both are returned <i>undecoded</i> by the Servlet API, in contrast to the servlet path. <p>Uses either the request encoding or the default encoding according to the Servlet spec (ISO-8859-1).
Set if ";" (semicolon) content should be stripped from the request URI. <p>The default value is {@code true}.
Set the UrlPathHelper to use for resolution of lookup paths. <p>Use this to override the default UrlPathHelper with a custom subclass.
Set CORS configuration based on URL patterns.
Get the CORS configuration.
Register a {@link CorsConfiguration} for the specified path pattern.
Set whether the query string should be included in the log message. <p>Should be configured using an {@code <init-param>} for parameter name "includeQueryString" in the filter definition in {@code web.xml}.
Return whether the query string should be included in the log message.
Set whether the client address and session id should be included in the log message. <p>Should be configured using an {@code <init-param>} for parameter name "includeClientInfo" in the filter definition in {@code web.xml}.
Return whether the client address and session id should be included in the log message.
Set whether the request payload (body) should be included in the log message. <p>Should be configured using an {@code <init-param>} for parameter name "includePayload" in the filter definition in {@code web.xml}.
Return whether the request payload (body) should be included in the log message.
Sets the maximum length of the payload body to be included in the log message. Default is 50 characters.
Return the maximum length of the payload body to be included in the log message.
Set the value that should be prepended to the log message written <i>before</i> a request is processed.
Set the value that should be appended to the log message written <i>before</i> a request is processed.
Set the value that should be prepended to the log message written <i>after</i> a request is processed.
Set the value that should be appended to the log message written <i>after</i> a request is processed.
Get the message to write to the log before the request.
Get the message to write to the log after the request.
Create a log message for the given request, prefix and suffix. <p>If {@code includeQueryString} is {@code true}, then the inner part of the log message will take the form {@code request_uri?query_string}; otherwise the message will simply be of the form {@code request_uri}. <p>The final message is composed of the inner part as described and the supplied prefix and suffix.
Determine whether to call the {@link #beforeRequest}/{@link #afterRequest} methods for the current request, i.e. whether logging is currently active (and the log message is worth building). <p>The default implementation always returns {@code true}. Subclasses may override this with a log level check. {@code false} otherwise
Create a {@code CharacterEncodingFilter} for the given encoding.
Create a {@code CharacterEncodingFilter} for the given encoding. override existing request and response encodings
Set the encoding to use for requests. This encoding will be passed into a {@link javax.servlet.http.HttpServletRequest#setCharacterEncoding} call. <p>Whether this encoding will override existing request encodings (and whether it will be applied as default response encoding as well) depends on the {@link #setForceEncoding "forceEncoding"} flag.
Set whether the configured {@link #setEncoding encoding} of this filter is supposed to override existing request and response encodings. <p>Default is "false", i.e. do not modify the encoding if {@link javax.servlet.http.HttpServletRequest#getCharacterEncoding()} returns a non-null value. Switch this to "true" to enforce the specified encoding in any case, applying it as default response encoding as well.
Constructor accepting a {@link CorsConfigurationSource} used by the filter to find the {@link CorsConfiguration} to use for each incoming request.
Configure a custom {@link CorsProcessor} to use to apply the matched {@link CorsConfiguration} for a request. <p>By default {@link DefaultCorsProcessor} is used.
Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate. Bypasses entirely the need for interacting with a Spring application context, specifying the {@linkplain #setTargetBeanName target bean name}, etc. <p>For use in Servlet 3.0+ environments where instance-based registration of filters is supported. manage the lifecycle for (must not be {@code null}).
Create a new {@code DelegatingFilterProxy} that will retrieve the named target bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext} (either the 'root' application context or the context named by {@link #setContextAttribute}). <p>For use in Servlet 3.0+ environments where instance-based registration of filters is supported. <p>The target bean must implement the standard Servlet Filter. application context (must not be {@code null}).
Create a new {@code DelegatingFilterProxy} that will retrieve the named target bean from the given Spring {@code WebApplicationContext}. <p>For use in Servlet 3.0+ environments where instance-based registration of filters is supported. <p>The target bean must implement the standard Servlet Filter interface. <p>The given {@code WebApplicationContext} may or may not be refreshed when passed in. If it has not, and if the context implements {@link ConfigurableApplicationContext}, a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before retrieving the named target bean. <p>This proxy's {@code Environment} will be inherited from the given {@code WebApplicationContext}. context (must not be {@code null}). if {@code null}, an application context will be looked up from {@code ServletContext} as a fallback.
Set the name of the ServletContext attribute which should be used to retrieve the {@link WebApplicationContext} from which to load the delegate {@link Filter} bean.
Return the name of the ServletContext attribute which should be used to retrieve the {@link WebApplicationContext} from which to load the delegate {@link Filter} bean.
Set the name of the target bean in the Spring application context. The target bean must implement the standard Servlet Filter interface. <p>By default, the {@code filter-name} as specified for the DelegatingFilterProxy in {@code web.xml} will be used.
Return the name of the target bean in the Spring application context.
Set whether to invoke the {@code Filter.init} and {@code Filter.destroy} lifecycle methods on the target bean. <p>Default is "false"; target beans usually rely on the Spring application context for managing their lifecycle. Setting this flag to "true" means that the servlet container will control the lifecycle of the target Filter, with this proxy delegating the corresponding calls.
Return whether to invoke the {@code Filter.init} and {@code Filter.destroy} lifecycle methods on the target bean.
Return the {@code WebApplicationContext} passed in at construction time, if available. Otherwise, attempt to retrieve a {@code WebApplicationContext} from the {@code ServletContext} attribute with the {@linkplain #setContextAttribute configured name} if set. Otherwise look up a {@code WebApplicationContext} under the well-known "root" application context attribute. The {@code WebApplicationContext} must have already been loaded and stored in the {@code ServletContext} before this filter gets initialized (or invoked). <p>Subclasses may override this method to provide a different {@code WebApplicationContext} retrieval strategy.
Initialize the Filter delegate, defined as bean the given Spring application context. <p>The default implementation fetches the bean from the application context and calls the standard {@code Filter.init} method on it, passing in the FilterConfig of this Filter proxy.
Actually invoke the delegate Filter with the given request and response.
Destroy the Filter delegate. Default implementation simply calls {@code Filter.destroy} on it.
Configure a contextPath value that will replace the contextPath of proxy-forwarded requests. <p>This is useful when external clients are not aware of the application context path. However a proxy forwards the request to a URL that includes a contextPath. ensure it starts with a '/' but does not end with one, or if the context path is empty (default, root context) it is left as-is.
Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.
Subclasses can invoke this method to specify that this property (which must match a JavaBean property they expose) is mandatory, and must be supplied as a config parameter. This should be called from the constructor of a subclass. <p>This method is only relevant in case of traditional initialization driven by a FilterConfig instance.
Make the FilterConfig of this filter available, if any. Analogous to GenericServlet's {@code getServletConfig()}. <p>Public to resemble the {@code getFilterConfig()} method of the Servlet Filter version that shipped with WebLogic 6.1.
Make the name of this filter available to subclasses. Analogous to GenericServlet's {@code getServletName()}. <p>Takes the FilterConfig's filter name by default. If initialized as bean in a Spring application context, it falls back to the bean name as defined in the bean factory.
Make the ServletContext of this filter available to subclasses. Analogous to GenericServlet's {@code getServletContext()}. <p>Takes the FilterConfig's ServletContext by default. If initialized as bean in a Spring application context, it falls back to the ServletContext that the bean factory runs in.
Create new FilterConfigPropertyValues. we can't accept default values
Set the parameter name to look for HTTP methods.
The default character set to use for reading form data.
Determine the message to be pushed onto the Log4J nested diagnostic context. <p>Default is a plain request log message without prefix or suffix.
The dispatcher type {@code javax.servlet.DispatcherType.ASYNC} introduced in Servlet 3.0 means a filter can be invoked in more than one thread over the course of a single request. This method returns {@code true} if the filter is currently executing within an asynchronous dispatch.
Whether request processing is in asynchronous mode meaning that the response will not be committed after the current thread is exited.
Return the name of the request attribute that identifies that a request is already filtered. <p>The default implementation takes the configured name of the concrete filter instance and appends ".FILTERED". If the filter is not fully initialized, it falls back to its class name.
Can be overridden in subclasses for custom filtering control, returning {@code true} to avoid filtering of the given request. <p>The default implementation always returns {@code false}.
The dispatcher type {@code javax.servlet.DispatcherType.ASYNC} introduced in Servlet 3.0 means a filter can be invoked in more than one thread over the course of a single request. Some filters only need to filter the initial thread (e.g. request wrapping) while others may need to be invoked at least once in each additional thread for example for setting up thread locals or to perform final processing at the very end. <p>Note that although a filter can be mapped to handle specific dispatcher types via {@code web.xml} or in Java through the {@code ServletContext}, servlet containers may enforce different defaults with regards to dispatcher types. This flag enforces the design intent of the filter. <p>The default return value is "true", which means the filter will not be invoked during subsequent async dispatches. If "false", the filter will be invoked during async dispatches with the same guarantees of being invoked only once during a request within a single thread.
Whether to filter error dispatches such as when the servlet container processes and error mapped in {@code web.xml}. The default return value is "true", which means the filter will not be invoked in case of an error dispatch.
Set whether to expose the LocaleContext and RequestAttributes as inheritable for child threads (using an {@link java.lang.InheritableThreadLocal}). <p>Default is "false", to avoid side effects on spawned background threads. Switch this to "true" to enable inheritance for custom child threads which are spawned during request processing and only used for this request (that is, ending after their initial task, without reuse of the thread). <p><b>WARNING:</b> Do not use inheritance for child threads if you are accessing a thread pool which is configured to potentially add new threads on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}), since this will expose the inherited context to such a pooled thread.
Set whether the ETag value written to the response should be weak, as per rfc7232. <p>Should be configured using an {@code <init-param>} for parameter name "writeWeakETag" in the filter definition in {@code web.xml}.
Return whether the ETag value written to the response should be weak, as per rfc7232.
Indicates whether the given request and response are eligible for ETag generation. <p>The default implementation returns {@code true} if all conditions match: <ul> <li>response status codes in the {@code 2xx} series</li> <li>request method is a GET</li> <li>response Cache-Control header is not set or does not contain a "no-store" directive</li> </ul>
Generate the ETag header value from the given response body byte array. <p>The default implementation generates an MD5 hash.
This method can be used to disable the content caching response wrapper of the ShallowEtagHeaderFilter. This can be done before the start of HTTP streaming for example where the response will be written to asynchronously and not in the context of a Servlet container thread.
Retrieve the web application context to delegate bean name resolution to. <p>The default implementation delegates to FacesContextUtils.
Retrieve the WebApplicationContext reference to expose. <p>The default implementation delegates to FacesContextUtils, returning {@code null} if no WebApplicationContext found.
Create a DecoratingNavigationHandler with fixed original NavigationHandler.
Return the fixed original NavigationHandler decorated by this handler, if any (that is, if passed in through the constructor).
Method to be called by subclasses when intending to delegate to the next handler in the NavigationHandler chain. Will always call the most appropriate next handler, either the decorated NavigationHandler passed in as constructor argument or the original NavigationHandler as passed into this method - according to the position of this instance in the chain. <p>Will call the decorated NavigationHandler specified as constructor argument, if any. In case of a DecoratingNavigationHandler as target, the original NavigationHandler as passed into this method will be passed on to the next element in the chain: This ensures propagation of the original handler that the last element in the handler chain might delegate back to. In case of a standard NavigationHandler as target, the original handler will simply not get passed on; no delegating back to the original is possible further down the chain in that scenario. <p>If no decorated NavigationHandler specified as constructor argument, this instance is the last element in the chain. Hence, this method will call the original NavigationHandler as passed into this method. If no original NavigationHandler has been passed in (for example if this instance is the last element in a chain with standard NavigationHandlers as earlier elements), this method corresponds to a no-op. specified outcome, or {@code null} if the outcome was acquired by some other means (which may be {@code null}) or {@code null} if none
Create a new DelegatingNavigationHandlerProxy.
Return the target NavigationHandler to delegate to. <p>By default, a bean with the name "jsfNavigationHandler" is obtained from the Spring root WebApplicationContext, for every invocation.
Return the name of the target NavigationHandler bean in the BeanFactory. Default is "jsfNavigationHandler".
Retrieve the Spring BeanFactory to delegate bean name resolution to. <p>Default implementation delegates to {@code getWebApplicationContext}. Can be overridden to provide an arbitrary BeanFactory reference to resolve against; usually, this will be a full Spring ApplicationContext.
Retrieve the web application context to delegate bean name resolution to. <p>Default implementation delegates to FacesContextUtils.
Obtain the delegate PhaseListener beans from the Spring root WebApplicationContext.
Retrieve the Spring BeanFactory to delegate bean name resolution to. <p>The default implementation delegates to {@code getWebApplicationContext}. Can be overridden to provide an arbitrary ListableBeanFactory reference to resolve against; usually, this will be a full Spring ApplicationContext.
Find the root {@link WebApplicationContext} for this web app, typically loaded via {@link org.springframework.web.context.ContextLoaderListener}. <p>Will rethrow an exception that happened on root context startup, to differentiate between a failed context startup and no context at all.
Find the root {@link WebApplicationContext} for this web app, typically loaded via {@link org.springframework.web.context.ContextLoaderListener}. <p>Will rethrow an exception that happened on root context startup, to differentiate between a failed context startup and no context at all.
Return the best available mutex for the given session: that is, an object to synchronize on for the given session. <p>Returns the session mutex attribute if available; usually, this means that the HttpSessionMutexListener needs to be defined in {@code web.xml}. Falls back to the Session reference itself if no mutex attribute found. <p>The session mutex is guaranteed to be the same object during the entire lifetime of the session, available under the key defined by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a safe reference to synchronize on for locking on the current session. <p>In many cases, the Session reference itself is a safe mutex as well, since it will always be the same object reference for the same active logical session. However, this is not guaranteed across different servlet containers; the only 100% safe way is a session mutex.
placeholder and #{...} SpEL expressions in default values; or {@code null} if default values are not expected to contain expressions
and #{...} SpEL expressions in default values, or {@code null} if default values are not expected to contain expressions
Resolve the given parameter type and value name into an argument value. (pre-nested in case of a {@link java.util.Optional} declaration)
Invoked when a named value is required, but {@link #resolveName(String, MethodParameter, NativeWebRequest)} returned {@code null} and there is no default value. Subclasses typically throw an exception in this case.
A {@code null} results in a {@code false} value for {@code boolean}s or an exception for other primitives.
Invoked after a value is resolved.
Create a new instance.
A filter for selecting {@code @ExceptionHandler} methods.
A constructor that finds {@link ExceptionHandler} methods in the given type.
Find a {@link Method} to handle the given exception. Use {@link ExceptionDepthComparator} if more than one match is found.
Find a {@link Method} to handle the given exception type. This can be useful if an {@link Exception} instance is not available (e.g. for tools).
Return the {@link Method} mapped to the given exception type, or {@code null} if none.
placeholder and #{...} SpEL expressions in default values; or {@code null} if default values are not expected to contain expressions
Create a new instance.
Return {@code true} if the given {@code @InitBinder} method should be invoked to initialize the given WebDataBinder. <p>The default implementation checks if target object name is included in the attribute names specified in the {@code @InitBinder} annotation.
Return the name of the method argument.
Return the target method parameter.
Class constructor. return values are considered model attributes with or without a {@code @ModelAttribute} annotation.
Extension point to create the model attribute if not found in the model. The default implementation uses the default constructor.
Extension point to bind the request to the target object.
Validate the model attribute if applicable. <p>The default implementation checks for {@code @javax.validation.Valid}, Spring's {@link org.springframework.validation.annotation.Validated}, and custom annotations whose name starts with "Valid".
Whether to raise a fatal bind exception on validation errors.
Create a new instance with the given {@code @ModelAttribute} methods.
Populate the model in the following order: <ol> <li>Retrieve "known" session attributes listed as {@code @SessionAttributes}. <li>Invoke {@code @ModelAttribute} methods <li>Find {@code @ModelAttribute} method arguments also listed as {@code @SessionAttributes} and ensure they're present in the model raising an exception if necessary. </ol>
Invoke model attribute methods to populate the model. Attributes are added only if not already present in the model.
Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.
Derives the model attribute name for a method parameter based on: <ol> <li>The parameter {@code @ModelAttribute} annotation value <li>The parameter type </ol>
Derive the model attribute name for the given return value using one of: <ol> <li>The method {@code ModelAttribute} annotation value <li>The declared return type if it is more specific than {@code Object} <li>The actual return value type </ol>
Promote model attributes listed as {@code @SessionAttributes} to the session. Add {@link BindingResult} attributes where necessary.
Add {@link BindingResult} attributes to the model for attributes that require it.
Whether the given attribute requires a {@link BindingResult} in the model.
placeholder and #{...} SpEL expressions in default values; or {@code null} if default values are not expected to have expressions
that is a simple type, as defined in {@link BeanUtils#isSimpleProperty}, is treated as a request parameter even if it it isn't annotated, the request parameter name is derived from the method parameter name.
and #{...} SpEL expressions in default values, or {@code null} if default values are not expected to contain expressions that is a simple type, as defined in {@link BeanUtils#isSimpleProperty}, is treated as a request parameter even if it it isn't annotated, the request parameter name is derived from the method parameter name.
Create a new instance for a controller type. Session attribute names and types are extracted from the {@code @SessionAttributes} annotation, if present, on the given type.
Whether the controller represented by this instance has declared any session attributes through an {@link SessionAttributes} annotation.
Whether the attribute name or type match the names and types specified via {@code @SessionAttributes} in underlying controller. <p>Attributes successfully resolved through this method are "remembered" and subsequently used in {@link #retrieveAttributes(WebRequest)} and {@link #cleanupAttributes(WebRequest)}.
Store a subset of the given attributes in the session. Attributes not declared as session attributes via {@code @SessionAttributes} are ignored.
Retrieve "known" attributes from the session, i.e. attributes listed by name in {@code @SessionAttributes} or attributes previously stored in the model that matched by type.
Remove "known" attributes from the session, i.e. attributes listed by name in {@code @SessionAttributes} or attributes previously stored in the model that matched by type.
A pass-through call to the underlying {@link SessionAttributeStore}.
Create an instance from a collection of {@link UriComponentsContributor}s or {@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented by the same class, the most convenient option is to obtain the configured {@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter} and provide that to this constructor. or {@link HandlerMethodArgumentResolver}s.
Create an instance from a collection of {@link UriComponentsContributor}s or {@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented by the same class, the most convenient option is to obtain the configured {@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter} and provide that to this constructor. <p>If the {@link ConversionService} argument is {@code null}, {@link org.springframework.format.support.DefaultFormattingConversionService} will be used by default. or {@link HandlerMethodArgumentResolver}s. need to be formatted as Strings before being added to the URI
An overloaded method that uses the ConversionService created at construction.
Return a read-only list with the registered handlers, or an empty list.
Set the {@link WebDataBinderFactory} to be passed to argument resolvers allowing them to create a {@link WebDataBinder} for data binding and type conversion purposes.
Set {@link HandlerMethodArgumentResolver}s to use to use for resolving method argument values.
Invoke the method after resolving its argument values in the context of the given request. <p>Argument values are commonly resolved through {@link HandlerMethodArgumentResolver}s. The {@code providedArgs} parameter however may supply argument values to be used directly, i.e. without argument resolution. Examples of provided argument values include a {@link WebDataBinder}, a {@link SessionStatus}, or a thrown exception instance. Provided argument values are checked before argument resolvers. or if the method raised an exception
By default the content of the "default" model is used both during rendering and redirect scenarios. Alternatively controller methods can declare an argument of type {@code RedirectAttributes} and use it to provide attributes to prepare the redirect URL. <p>Setting this flag to {@code true} guarantees the "default" model is never used in a redirect scenario even if a RedirectAttributes argument is not declared. Setting it to {@code false} means the "default" model may be used in a redirect if the controller method doesn't declare a RedirectAttributes argument. <p>The default setting is {@code false}.
Set a view name to be resolved by the DispatcherServlet via a ViewResolver. Will override any pre-existing view name or View.
Return the view name to be resolved by the DispatcherServlet via a ViewResolver, or {@code null} if a View object is set.
Set a View object to be used by the DispatcherServlet. Will override any pre-existing view name or View.
Return the View object, or {@code null} if we using a view name to be resolved by the DispatcherServlet via a ViewResolver.
Whether the view is a view reference specified via a name to be resolved by the DispatcherServlet via a ViewResolver.
Return the model to use -- either the "default" or the "redirect" model. The default model is used if {@code redirectModelScenario=false} or there is no redirect model (i.e. RedirectAttributes was not declared as a method argument) and {@code ignoreDefaultModelOnRedirect=false}.
Register an attribute for which data binding should not occur, for example corresponding to an {@code @ModelAttribute(binding=false)} declaration.
Whether binding is disabled for the given model attribute.
Whether to use the default model or the redirect model.
Return the "default" model created at instantiation. <p>In general it is recommended to use {@link #getModel()} instead which returns either the "default" model (template rendering) or the "redirect" model (redirect URL preparation). Use of this method may be needed for advanced cases when access to the "default" model is needed regardless, e.g. to save model attributes specified via {@code @SessionAttributes}.
Provide a separate model instance to use in a redirect scenario. The provided additional model however is not used used unless {@link #setRedirectModelScenario(boolean)} gets set to {@code true} to signal a redirect scenario.
Whether the controller has returned a redirect instruction, e.g. a "redirect:" prefixed view name, a RedirectView instance, etc.
Return the {@link SessionStatus} instance to use that can be used to signal that session processing is complete.
Provide a HTTP status that will be passed on to with the {@code ModelAndView} used for view rendering purposes.
Return the configured HTTP status, if any.
Whether the request has been handled fully within the handler, e.g. {@code @ResponseBody} method, and therefore view resolution is not necessary. This flag can also be set when controller methods declare an argument of type {@code ServletResponse} or {@code OutputStream}). <p>The default value is {@code false}.
Whether the request has been handled fully within the handler.
Add the supplied attribute to the underlying model. A shortcut for {@code getModel().addAttribute(String, Object)}.
Add the supplied attribute to the underlying model. A shortcut for {@code getModel().addAttribute(Object)}.
Copy all attributes to the underlying model. A shortcut for {@code getModel().addAllAttributes(Map)}.
Copy attributes in the supplied {@code Map} with existing objects of the same name taking precedence (i.e. not getting replaced). A shortcut for {@code getModel().mergeAttributes(Map<String, ?>)}.
Remove the given attributes from the model.
Whether the underlying model contains the given attribute name. A shortcut for {@code getModel().containsAttribute(String)}.
Create a {@code ControllerAdviceBean} using the given bean instance.
Create a {@code ControllerAdviceBean} using the given bean name.
Return the type of the contained bean. <p>If the bean type is a CGLIB-generated class, the original user-defined class is returned.
Return a bean instance if necessary resolving the bean name through the BeanFactory.
Check whether the given bean type should be assisted by this {@code @ControllerAdvice} instance.
Find the names of beans annotated with {@linkplain ControllerAdvice @ControllerAdvice} in the given ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.
Returns a single annotation on the underlying method traversing its super methods if no annotation can be found on the given method itself. <p>Also supports <em>merged</em> composed annotations with attribute overrides as of Spring Framework 4.2.2.
Instantiate a new CommonsFileUploadSupport with its corresponding FileItemFactory and FileUpload instances.
Return the underlying {@code org.apache.commons.fileupload.disk.DiskFileItemFactory} instance. There is hardly any need to access this.
Return the underlying {@code org.apache.commons.fileupload.FileUpload} instance. There is hardly any need to access this.
Set the maximum allowed size (in bytes) before an upload gets rejected. -1 indicates no limit (the default).
Set the maximum allowed size (in bytes) for each individual file before an upload gets rejected. -1 indicates no limit (the default).
Set the maximum allowed size (in bytes) before uploads are written to disk. Uploaded files will still be received past this amount, but they will not be stored in memory. Default is 10240, according to Commons FileUpload.
Set the default character encoding to use for parsing requests, to be applied to headers of individual parts and to form fields. Default is ISO-8859-1, according to the Servlet spec. <p>If the request specifies a character encoding itself, the request encoding will override this setting. This also allows for generically overriding the character encoding in a filter that invokes the {@code ServletRequest.setCharacterEncoding} method.
Set the temporary directory where uploaded files get stored. Default is the servlet container's temporary directory for the web application.
Factory method for a Commons DiskFileItemFactory instance. <p>Default implementation returns a standard DiskFileItemFactory. Can be overridden to use a custom subclass, e.g. for testing purposes.
Determine an appropriate FileUpload instance for the given encoding. <p>Default implementation returns the shared FileUpload instance if the encoding matches, else creates a new FileUpload instance with the same configuration other than the desired encoding.
Parse the given List of Commons FileItems into a Spring MultipartParsingResult, containing Spring MultipartFile instances and a Map of multipart parameter.
Cleanup the Spring MultipartFiles created during multipart parsing, potentially holding temporary data on disk. <p>Deletes the underlying Commons FileItem instances.
Create an instance wrapping the given FileItem.
Return the underlying {@code org.apache.commons.fileupload.FileItem} instance. There is hardly any need to access this.
Determine whether the multipart content is still available. If a temporary file has been moved, the content is no longer available.
Return a description for the storage location of the multipart content. Tries to be as specific as possible: mentions the file location in case of a temporary file.
Constructor for use as bean. Determines the servlet container's temporary directory via the ServletContext passed in as through the ServletContextAware interface (typically by a WebApplicationContext).
Constructor for standalone usage. Determines the servlet container's temporary directory via the given ServletContext.
Set whether to resolve the multipart request lazily at the time of file or parameter access. <p>Default is "false", resolving the multipart elements immediately, throwing corresponding exceptions at the time of the {@link #resolveMultipart} call. Switch this to "true" for lazy multipart parsing, throwing parse exceptions once the application attempts to obtain multipart files or parameters.
Parse the given servlet request, resolving its multipart elements.
Determine the encoding for the given request. Can be overridden in subclasses. <p>The default implementation checks the request encoding, falling back to the default encoding specified for this resolver.
Wrap the given HttpServletRequest in a MultipartHttpServletRequest.
Set a Map with parameter names as keys and list of MultipartFile objects as values. To be invoked by subclasses on initialization.
Obtain the MultipartFile Map for retrieval, lazily initializing it if necessary.
Lazily initialize the multipart request, if possible. Only called if not already eagerly initialized.
Wrap the given HttpServletRequest in a MultipartHttpServletRequest. with Strings as keys and String arrays as values
Wrap the given HttpServletRequest in a MultipartHttpServletRequest.
Set a Map with parameter names as keys and String array objects as values. To be invoked by subclasses on initialization.
Obtain the multipart parameter Map for retrieval, lazily initializing it if necessary.
Set a Map with parameter names as keys and content type Strings as values. To be invoked by subclasses on initialization.
Obtain the multipart parameter content type Map for retrieval, lazily initializing it if necessary.
Set the bean name of the MultipartResolver to fetch from Spring's root application context. Default is "filterMultipartResolver".
Return the bean name of the MultipartResolver to fetch from Spring's root application context.
Look up the MultipartResolver that this filter should use, taking the current HTTP request as argument. <p>The default implementation delegates to the {@code lookupMultipartResolver} without arguments.
Look for a MultipartResolver bean in the root web application context. Supports a "multipartResolverBeanName" filter init param; the default bean name is "filterMultipartResolver". <p>This can be overridden to use a custom MultipartResolver instance, for example if not using a Spring web application context.
Create a new {@code RequestPartServletServerHttpRequest} instance.
Create a new StandardMultipartHttpServletRequest wrapper for the given request, immediately parsing the multipart content.
Create a new StandardMultipartHttpServletRequest wrapper for the given request. first access of multipart files or parameters
Create a new {@link StringMultipartFileEditor}, using the default charset.
Create a new {@link StringMultipartFileEditor}, using the given charset.
Constructor for MaxUploadSizeExceededException.
Return the maximum upload size allowed.
Constructor for MultipartException.
Create a new ContentCachingRequestWrapper for the given servlet request.
Return the cached request content as a byte array.
Create a new ContentCachingResponseWrapper for the given servlet response.
Overrides Servlet 3.1 setContentLengthLong(long) at runtime
Return the status code as specified on the response.
Return the cached response content as a byte array.
Return an {@link InputStream} to the cached content.
Return the current size of the cached content.
Copy the complete cached body content to the response.
Copy the cached body content to the response. for the complete cached body content
The cookie is only visible to servers in this domain.
The cookie is only visible to URLs in this path and below.
Useful special value: -1 ... not persistent, deleted when client shuts down
Set whether the cookie should only be sent using a secure protocol, such as HTTPS (SSL). This is an indication to the receiving browser, not processed by the HTTP server itself. Default is "false".
Return whether the cookie should only be sent using a secure protocol, such as HTTPS (SSL).
Set whether the cookie is supposed to be marked with the "HttpOnly" attribute. <p>Note that this feature is only available on Servlet 3.0 and higher.
Return whether the cookie is supposed to be marked with the "HttpOnly" attribute.
Add a cookie with the given value to the response, using the cookie descriptor settings of this generator. <p>Delegates to {@link #createCookie} for cookie creation.
Remove the cookie that this generator describes from the response. Will generate a cookie with empty value and max age 0. <p>Delegates to {@link #createCookie} for cookie creation.
Create a cookie with the given value, using the cookie descriptor settings of this generator (except for "cookieMaxAge").
Configure a base URL to prepend URI templates with. The base URL must have a scheme and host but may optionally contain a port and a path. The base URL must be fully expanded and encoded which can be done via {@link UriComponentsBuilder}.
Return the configured base URL.
Whether to parse the path of a URI template string into path segments. <p>If set to {@code true} the URI template path is immediately decomposed into path segments any URI variables expanded into it are then subject to path segment encoding rules. In effect URI variables in the path have any "/" characters percent encoded. <p>By default this is set to {@code false} in which case the path is kept as a full path and expanded URI variables will preserve "/" characters.
Whether the handler is configured to parse the path into path segments.
Whether to encode characters outside the unreserved set as defined in This ensures a URI variable value will not contain any characters with a reserved purpose. <p>By default this is set to {@code false} in which case only characters illegal for the given URI component are encoded. For example when expanding a URI variable into a path segment the "/" character is illegal and encoded. The ";" character however is legal and not encoded even though it has a reserved purpose. <p><strong>Note:</strong> this property supersedes the need to also set the {@link #setParsePath parsePath} property.
Whether to strictly encode any character outside the unreserved set.
Create a {@code UriComponentsBuilder} from the UriTemplate string. The default implementation also parses the path into path segments if {@link #setParsePath parsePath} is enabled.
Invoked after the URI template has been expanded and encoded to prepend the configured {@link #setBaseUrl(String) baseUrl} if any.
Encode the given source into an encoded String using the rules specified by the given component and with the given options.
Returns a new set of character entity references reflecting the HTML 4.0 character set.
Return the number of supported entity references.
Return true if the given character is mapped to a supported entity reference.
Return the reference mapped to the given character or {@code null}.
Return the char mapped to the given entityReference or -1.
Turn special characters into HTML character references. Handles complete character set defined in HTML 4.01 recommendation. <p>Escapes all special characters to their corresponding entity reference (e.g. {@code &lt;}). <p>Reference: </a>
Turn special characters into HTML character references. Handles complete character set defined in HTML 4.01 recommendation. <p>Escapes all special characters to their corresponding entity reference (e.g. {@code &lt;}) at least as required by the specified encoding. In other words, if a special character does not have to be escaped for the given encoding, it may not be. <p>Reference: </a>
Turn special characters into HTML character references. Handles complete character set defined in HTML 4.01 recommendation. <p>Escapes all special characters to their corresponding numeric reference in decimal format (&#<i>Decimal</i>;). <p>Reference: </a>
Turn special characters into HTML character references. Handles complete character set defined in HTML 4.01 recommendation. <p>Escapes all special characters to their corresponding numeric reference in decimal format (&#<i>Decimal</i>;) at least as required by the specified encoding. In other words, if a special character does not have to be escaped for the given encoding, it may not be. <p>Reference: </a>
Turn special characters into HTML character references. Handles complete character set defined in HTML 4.01 recommendation. <p>Escapes all special characters to their corresponding numeric reference in hex format (&#x<i>Hex</i>;). <p>Reference: </a>
Turn special characters into HTML character references. Handles complete character set defined in HTML 4.01 recommendation. <p>Escapes all special characters to their corresponding numeric reference in hex format (&#x<i>Hex</i>;) at least as required by the specified encoding. In other words, if a special character does not have to be escaped for the given encoding, it may not be. <p>Reference: </a>
Turn HTML character references into their plain text UNICODE equivalent. <p>Handles complete character set defined in HTML 4.01 recommendation and all reference types (decimal, hex, and entity). <p>Correctly converts the following formats: <blockquote> &amp;#<i>Entity</i>; - <i>(Example: &amp;amp;) case sensitive</i> &amp;#<i>Decimal</i>; - <i>(Example: &amp;#68;)</i><br> &amp;#x<i>Hex</i>; - <i>(Example: &amp;#xE5;) case insensitive</i><br> </blockquote> Gracefully handles malformed character references by copying original characters as is when encountered.<p> <p>Reference: </a>
Turn JavaScript special characters into escaped characters.
Initialize log4j, including setting the web app root system property.
Shut down log4j, properly releasing all file locks and resetting the web app root system property.
Return whether to expose the web app root system property, checking the corresponding ServletContext init parameter.
Construct a {@code NestedServletException} with the specified detail message.
Construct a {@code NestedServletException} with the specified detail message and nested exception.
Resolve ${...} placeholders in the given text, replacing them with corresponding servlet context init parameter or system property values.
Resolve ${...} placeholders in the given text, replacing them with corresponding servlet context init parameter or system property values. Unresolvable placeholders with no default value are ignored and passed through unchanged if the flag is set to true.
Determines the scope for a given input {@code String}. <p>If the {@code String} does not match 'request', 'session', 'page' or 'application', the method will return {@link PageContext#PAGE_SCOPE}.
Determine whether the supplied {@link Tag} has any ancestor tag of the supplied type. of the supplied type or if the supplied {@code ancestorTagClass} is not type-assignable to the {@link Tag} class
Determine whether the supplied {@link Tag} has any ancestor tag of the supplied type, throwing an {@link IllegalStateException} if not. have a tag of the supplied {@code parentTagClass} as an ancestor or in the case of the {@link String}-typed arguments, is composed wholly of whitespace; or if the supplied {@code ancestorTagClass} is not type-assignable to the {@link Tag} class
Remove nested "{}" such as in URI vars with regular expressions.
Default constructor. Protected to prevent direct instantiation.
Create a deep copy of the given UriComponentsBuilder.
Create a new, empty builder.
Create a builder that is initialized with the given path.
Create a builder that is initialized with the given {@code URI}.
Create a builder that is initialized with the given URI string. <p><strong>Note:</strong> The presence of reserved characters can prevent correct parsing of the URI string. For example if a query parameter contains {@code '='} or {@code '&'} characters, the query string cannot be parsed unambiguously. Such values should be substituted for URI variables to enable correct parsing: <pre class="code"> String uriString = &quot;/hotels/42?filter={value}&quot;; UriComponentsBuilder.fromUriString(uriString).buildAndExpand(&quot;hot&amp;cold&quot;); </pre>
Create a URI components builder from the given HTTP URL String. <p><strong>Note:</strong> The presence of reserved characters can prevent correct parsing of the URI string. For example if a query parameter contains {@code '='} or {@code '&'} characters, the query string cannot be parsed unambiguously. Such values should be substituted for URI variables to enable correct parsing: <pre class="code"> String uriString = &quot;/hotels/42?filter={value}&quot;; UriComponentsBuilder.fromUriString(uriString).buildAndExpand(&quot;hot&amp;cold&quot;); </pre>
Create a new {@code UriComponents} object from the URI associated with the given HttpRequest while also overlaying with values from the headers or "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" if "Forwarded" is not found.
Create an instance by parsing the "Origin" header of an HTTP request.
Append path segments to the existing path. Each path segment may contain URI template variables and should not contain any slashes. Use {@code path("/")} subsequently to ensure a trailing slash.
Append the given query to the existing query of this builder. The given query may contain URI template variables. <p><strong>Note:</strong> The presence of reserved characters can prevent correct parsing of the URI string. For example if a query parameter contains {@code '='} or {@code '&'} characters, the query string cannot be parsed unambiguously. Such values should be substituted for URI variables to enable correct parsing: <pre class="code"> UriComponentsBuilder.fromUriString(&quot;/hotels/42&quot;) .query(&quot;filter={value}&quot;) .buildAndExpand(&quot;hot&amp;cold&quot;); </pre>
Set the query parameter values overriding all existing query values.
Adapt this builder's scheme+host+port from the given headers, specifically or "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" if "Forwarded" is not found.
Clone this {@code UriComponentsBuilder}.
Encode characters outside the unreserved character set as defined in <p>This can be used to ensure the given String will not contain any characters with reserved URI meaning regardless of URI component.
Set if URL lookup should always use full path within current servlet context. Else, the path within the current servlet mapping is used if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml). Default is "false".
Set if context path and request URI should be URL-decoded. Both are returned <i>undecoded</i> by the Servlet API, in contrast to the servlet path. <p>Uses either the request encoding or the default encoding according to the Servlet spec (ISO-8859-1). <p>Default is "true", as of Spring 2.5.
Set if ";" (semicolon) content should be stripped from the request URI. <p>Default is "true".
Whether configured to remove ";" (semicolon) content from the request URI.
Set the default character encoding to use for URL decoding. Default is ISO-8859-1, according to the Servlet spec. <p>If the request specifies a character encoding itself, the request encoding will override this setting. This also allows for generically overriding the character encoding in a filter that invokes the {@code ServletRequest.setCharacterEncoding} method.
Return the default character encoding to use for URL decoding.
Return the mapping lookup path for the given request, within the current servlet mapping if applicable, else within the web application. <p>Detects include request URL if called within a RequestDispatcher include.
Return the path within the servlet mapping for the given request, i.e. the part of the request's URL beyond the part that called the servlet, or "" if the whole URL has been used to identify the servlet. <p>Detects include request URL if called within a RequestDispatcher include. <p>E.g.: servlet mapping = "/*"; request URI = "/test/a" -> "/test/a". <p>E.g.: servlet mapping = "/"; request URI = "/test/a" -> "/test/a". <p>E.g.: servlet mapping = "/test/*"; request URI = "/test/a" -> "/a". <p>E.g.: servlet mapping = "/test"; request URI = "/test" -> "". <p>E.g.: servlet mapping = "/*.test"; request URI = "/a.test" -> "".
Return the path within the web application for the given request. <p>Detects include request URL if called within a RequestDispatcher include.
Match the given "mapping" to the start of the "requestUri" and if there is a match return the extra part. This method is needed because the context path and the servlet path returned by the HttpServletRequest are stripped of semicolon content unlike the requesUri.
Sanitize the given path with the following rules: <ul> </ul>
Return the request URI for the given request, detecting an include request URL if called within a RequestDispatcher include. <p>As the value returned by {@code request.getRequestURI()} is <i>not</i> decoded by the servlet container, this method will decode it. <p>The URI that the web container resolves <i>should</i> be correct, but some containers like JBoss/Jetty incorrectly include ";" strings like ";jsessionid" in the URI. This method cuts off such incorrect appendices.
Return the context path for the given request, detecting an include request URL if called within a RequestDispatcher include. <p>As the value returned by {@code request.getContextPath()} is <i>not</i> decoded by the servlet container, this method will decode it.
Return the servlet path for the given request, regarding an include request URL if called within a RequestDispatcher include. <p>As the value returned by {@code request.getServletPath()} is already decoded by the servlet container, this method will not attempt to decode it.
Return the request URI for the given request. If this is a forwarded request, correctly resolves to the request URI of the original request.
Return the context path for the given request, detecting an include request URL if called within a RequestDispatcher include. <p>As the value returned by {@code request.getContextPath()} is <i>not</i> decoded by the servlet container, this method will decode it.
Return the servlet path for the given request, detecting an include request URL if called within a RequestDispatcher include.
Return the query string part of the given request's URL. If this is a forwarded request, correctly resolves to the query string of the original request.
Decode the supplied URI string and strips any extraneous portion after a ';'.
Decode the given source string with a URLDecoder. The encoding will be taken from the request, falling back to the default "ISO-8859-1". <p>The default implementation uses {@code URLDecoder.decode(input, enc)}.
Remove ";" (semicolon) content from the given request URI if the {@linkplain #setRemoveSemicolonContent(boolean) removeSemicolonContent} property is set to "true". Note that "jssessionid" is always removed.
Decode the given URI path variables via {@link #decodeRequestString(HttpServletRequest, String)} unless {@link #setUrlDecode(boolean)} is set to {@code true} in which case it is assumed the URL path from which the variables were extracted is already decoded through a call to {@link #getLookupPathForRequest(HttpServletRequest)}.
Decode the given matrix variables via {@link #decodeRequestString(HttpServletRequest, String)} unless {@link #setUrlDecode(boolean)} is set to {@code true} in which case it is assumed the URL path from which the variables were extracted is already decoded through a call to {@link #getLookupPathForRequest(HttpServletRequest)}.
Set a system property to the web application root directory. The key of the system property can be defined with the "webAppRootKey" context-param in {@code web.xml}. Default is "webapp.root". <p>Can be used for tools that support substitution with {@code System.getProperty} values, like log4j's "${key}" syntax within log file locations. or if the WAR file is not expanded
Remove the system property that points to the web app root directory. To be called on shutdown of the web application.
Return whether default HTML escaping is enabled for the web application, i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml} (if any). <p>This method differentiates between no param specified at all and an actual boolean value specified, allowing to have a context-specific default in case of no setting at the global level. ({@code null} = no explicit default)
Return whether response encoding should be used when HTML escaping characters, thus only escaping XML markup significant characters with UTF-* encodings. This option is enabled for the web application with a ServletContext param, i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml} (if any). <p>This method differentiates between no param specified at all and an actual boolean value specified, allowing to have a context-specific default in case of no setting at the global level. ({@code null} = no explicit default)
Return the real path of the given path within the web application, as provided by the servlet container. <p>Prepends a slash if the path does not already start with a slash, and throws a FileNotFoundException if the path cannot be resolved to a resource (in contrast to ServletContext's {@code getRealPath}, which returns null).
Determine the session id of the given request, if any.
Check the given request for a session attribute of the given name. Returns null if there is no session or if the session has no such attribute. Does not create a new session if none has existed before!
Check the given request for a session attribute of the given name. Throws an exception if there is no session or if the session has no such attribute. Does not create a new session if none has existed before!
Set the session attribute with the given name to the given value. Removes the session attribute if value is null, if a session existed at all. Does not create a new session if not necessary!
Get the specified session attribute, creating and setting a new attribute if no existing found. The given class needs to have a public no-arg constructor. Useful for on-demand state objects in a web tier, like shopping carts.
Return the best available mutex for the given session: that is, an object to synchronize on for the given session. <p>Returns the session mutex attribute if available; usually, this means that the HttpSessionMutexListener needs to be defined in {@code web.xml}. Falls back to the HttpSession itself if no mutex attribute found. <p>The session mutex is guaranteed to be the same object during the entire lifetime of the session, available under the key defined by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a safe reference to synchronize on for locking on the current session. <p>In many cases, the HttpSession reference itself is a safe mutex as well, since it will always be the same object reference for the same active logical session. However, this is not guaranteed across different servlet containers; the only 100% safe way is a session mutex.
Determine whether the given request is an include request, that is, not a top-level HTTP request coming in from the outside. <p>Checks the presence of the "javax.servlet.include.request_uri" request attribute. Could check any request attribute that is only present in an include request.
Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest} attributes under the keys defined in the Servlet 2.3 specification, for error pages that are rendered directly rather than through the Servlet container's error page resolution: {@code javax.servlet.error.status_code}, {@code javax.servlet.error.exception_type}, {@code javax.servlet.error.message}, {@code javax.servlet.error.exception}, {@code javax.servlet.error.request_uri}, {@code javax.servlet.error.servlet_name}. <p>Does not override values if already present, to respect attribute values that have been exposed explicitly before. <p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code" attribute explicitly (before or after) in order to expose a different status code.
Expose the specified request attribute if not already present.
Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest} attributes under the keys defined in the Servlet 2.3 specification: {@code javax.servlet.error.status_code}, {@code javax.servlet.error.exception_type}, {@code javax.servlet.error.message}, {@code javax.servlet.error.exception}, {@code javax.servlet.error.request_uri}, {@code javax.servlet.error.servlet_name}.
Expose the given Map as request attributes, using the keys as attribute names and the values as corresponding attribute values. Keys need to be Strings.
Retrieve the first cookie with the given name. Note that multiple cookies can have the same name but different paths or domains.
Check if a specific input type="submit" parameter was sent in the request, either via a button (directly with name) or via an image (name + ".x" or name + ".y").
Obtain a named parameter from the given request parameters. <p>See {@link #findParameterValue(java.util.Map, String)} for a description of the lookup algorithm. if the parameter does not exist in given request
Obtain a named parameter from the given request parameters. <p>This method will try to obtain a parameter value using the following algorithm: <ol> <li>Try to get the parameter value using just the given <i>logical</i> name. This handles parameters of the form <tt>logicalName = value</tt>. For normal parameters, e.g. submitted using a hidden HTML form field, this will return the requested value.</li> <li>Try to obtain the parameter value from the parameter name, where the parameter name in the request is of the form <tt>logicalName_value = xyz</tt> with "_" being the configured delimiter. This deals with parameter values submitted using an HTML form submit button.</li> <li>If the value obtained in the previous step has a ".x" or ".y" suffix, remove that. This handles cases where the value was submitted using an HTML form image button. In this case the parameter in the request would actually be of the form <tt>logicalName_value.x = 123</tt>. </li> </ol> if the parameter does not exist in given request
Return a map containing all parameters with the given prefix. Maps single values to String and multiple values to String array. <p>For example, with a prefix of "spring_", "spring_param1" and "spring_param2" result in a Map with "param1" and "param2" as keys. (if this is null or the empty string, all parameters will match) containing either a String or a String array as values
Return the target page specified in the request. (e.g. "_target" for parameters like "_target1" or "_target2") if no target page specified
Extract the URL filename from the given request URL path. Correctly resolves nested paths such as "/products/view.html" as well.
Extract the full URL filename (including file extension) from the given request URL path. Correctly resolve nested paths such as "/products/view.html" and remove any path and or query parameters.
Parse the given string with matrix variables. An example string would look like this {@code "q1=a;q1=b;q2=a,b,c"}. The resulting map would contain keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and {@code ["a","b","c"]} respectively.
Check the given request origin against a list of allowed origins. A list containing "*" means that all origins are allowed. An empty list means only same origin is allowed.
Check if the request is a same-origin one, based on {@code Origin}, {@code Host}, {@code Forwarded} and {@code X-Forwarded-Host} headers. of cross-origin request.
Create a new HttpMediaTypeException.
Create a new HttpMediaTypeException with a list of supported media types.
Return the list of supported media types.
Create a new HttpMediaTypeNotAcceptableException.
Create a new HttpMediaTypeNotSupportedException.
Create a new HttpMediaTypeNotSupportedException.
Return the HTTP request content type method that caused the failure.
Create a new HttpRequestMethodNotSupportedException.
Return the HTTP request method that caused the failure.
Return the actually supported HTTP methods, if known.
Return the actually supported HTTP methods, if known, as {@link HttpMethod} instances.
Create a new HttpSessionRequiredException.
New in Jackson 2.7
Return a copy of the actual headers written at the time of the call to getBody, i.e. ignoring any further changes that may have been made to the underlying headers, e.g. via a previously obtained instance.
Create a new MockPart with the given content.
Use Msg.newBuilder() to construct.
<code>optional string foo = 1;</code>
<code>optional string foo = 1;</code>
<code>optional .SecondMsg blah = 2;</code>
<code>optional .SecondMsg blah = 2;</code>
<code>optional .SecondMsg blah = 2;</code>
Construct using org.springframework.protobuf.Msg.newBuilder()
<code>optional string foo = 1;</code>
<code>optional string foo = 1;</code>
<code>optional string foo = 1;</code>
<code>optional .SecondMsg blah = 2;</code>
<code>optional .SecondMsg blah = 2;</code>
<code>optional .SecondMsg blah = 2;</code>
<code>optional .SecondMsg blah = 2;</code>
Use SecondMsg.newBuilder() to construct.
<code>optional int32 blah = 1;</code>
<code>optional int32 blah = 1;</code>
Construct using org.springframework.protobuf.SecondMsg.newBuilder()
<code>optional int32 blah = 1;</code>
<code>optional int32 blah = 1;</code>
Set the default {@link AsyncTaskExecutor} to use when a controller method returns a {@link Callable}. Controller methods can override this default on a per-request basis by returning a {@link WebAsyncTask}. <p>By default a {@link SimpleAsyncTaskExecutor} instance is used, and it's highly recommended to change that default in production since the simple executor does not re-use threads.
Specify the amount of time, in milliseconds, before asynchronous request handling times out. In Servlet 3, the timeout begins after the main request processing thread has exited and ends when the request is dispatched again for further processing of the concurrently produced result. <p>If this value is not set, the default timeout of the underlying implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.
Configure lifecycle interceptors with callbacks around concurrent request execution that starts when a controller returns a {@link java.util.concurrent.Callable}.
Configure lifecycle interceptors with callbacks around concurrent request execution that starts when a controller returns a {@link DeferredResult}.
Class constructor with {@link javax.servlet.ServletContext}.
Whether the path extension in the URL path should be used to determine the requested media type. <p>By default this is set to {@code true} in which case a request for {@code /hotels.pdf} will be interpreted as a request for {@code "application/pdf"} regardless of the 'Accept' header.
Add a mapping from a key, extracted from a path extension or a query parameter, to a MediaType. This is required in order for the parameter strategy to work. Any extensions explicitly registered here are also whitelisted for the purpose of Reflected File Download attack detection (see Spring Framework reference documentation for more details on RFD attack protection). <p>The path extension strategy will also try to use {@link ServletContext#getMimeType} and JAF (if present) to resolve path extensions. To change this behavior see the {@link #useJaf} property.
An alternative to {@link #mediaType}.
Similar to {@link #mediaType} but for replacing existing mappings.
Whether to ignore requests with path extension that cannot be resolved to any media type. Setting this to {@code false} will result in an {@code HttpMediaTypeNotAcceptableException} if there is no match. <p>By default this is set to {@code true}.
When {@link #favorPathExtension} is set, this property determines whether to allow use of JAF (Java Activation Framework) to resolve a path extension to a specific MediaType. <p>By default this is not set in which case {@code PathExtensionContentNegotiationStrategy} will use JAF if available.
Whether a request parameter ("format" by default) should be used to determine the requested media type. For this option to work you must register {@link #mediaType(String, MediaType) media type mappings}. <p>By default this is set to {@code false}.
Set the query parameter name to use when {@link #favorParameter} is on. <p>The default parameter name is {@code "format"}.
Whether to disable checking the 'Accept' request header. <p>By default this value is set to {@code false}.
Set the default content type to use when no content type is requested. <p>By default this is not set.
Set a custom {@link ContentNegotiationStrategy} to use to determine the content type to use when no content type is requested. <p>By default this is not set.
Enable cross origin request handling for the specified path pattern. <p>Exact path mapping URIs (such as {@code "/admin"}) are supported as well as Ant-style path patterns (such as {@code "/admin/**"}). <p>By default, all origins, all headers, credentials and {@code GET}, {@code HEAD}, and {@code POST} methods are allowed, and the max age is set to 30 minutes.
Create a {@link DefaultServletHandlerConfigurer} instance.
Enable forwarding to the "default" Servlet. When this method is used the {@link DefaultServletHttpRequestHandler} will try to auto-detect the "default" Servlet name. Alternatively, you can specify the name of the default Servlet via {@link #enable(String)}.
Enable forwarding to the "default" Servlet identified by the given name. This is useful when the default Servlet cannot be auto-detected, for example when it has been manually configured.
Return a handler mapping instance ordered at {@link Integer#MAX_VALUE} containing the {@link DefaultServletHttpRequestHandler} instance mapped to {@code "/**"}; or {@code null} if default servlet handling was not been enabled.
Creates an {@link InterceptorRegistration} instance.
Add URL patterns to which the registered interceptor should apply to.
Add URL patterns to which the registered interceptor should not apply to.
A PathMatcher implementation to use with this interceptor. This is an optional, advanced property required only if using custom PathMatcher implementations that support mapping metadata other than the Ant path patterns supported by default.
Returns the underlying interceptor. If URL patterns are provided the returned type is {@link MappedInterceptor}; otherwise {@link HandlerInterceptor}.
Adds the provided {@link HandlerInterceptor}. registered interceptor further for example adding URL patterns it should apply to.
Adds the provided {@link WebRequestInterceptor}. registered interceptor further for example adding URL patterns it should apply to.
Returns all registered interceptors.
Whether to use suffix pattern match (".*") when matching patterns to requests. If enabled a method mapped to "/users" also matches to "/users.*". <p>By default this is set to {@code true}.
Whether to match to URLs irrespective of the presence of a trailing slash. If enabled a method mapped to "/users" also matches to "/users/". <p>The default value is {@code true}.
Whether suffix pattern matching should work only against path extensions explicitly registered when you {@link WebMvcConfigurer#configureContentNegotiation configure content negotiation}. This is generally recommended to reduce ambiguity and to avoid issues such as when a "." appears in the path for other reasons. <p>By default this is set to "false".
Set the UrlPathHelper to use for resolution of lookup paths. <p>Use this to override the default UrlPathHelper with a custom subclass, or to share common UrlPathHelper settings across multiple HandlerMappings and MethodNameResolvers.
Set the specific redirect 3xx status code to use. <p>If not set, {@link org.springframework.web.servlet.view.RedirectView} will select {@code HttpStatus.MOVED_TEMPORARILY (302)} by default.
Whether to interpret a given redirect URL that starts with a slash ("/") as relative to the current ServletContext, i.e. as relative to the web application root. <p>Default is {@code true}.
Whether to propagate the query parameters of the current request through to the target redirect URL. <p>Default is {@code false}.
Add a resource resolver to the chain.
Add a resource transformer to the chain.
Create a {@link ResourceHandlerRegistration} instance.
Add one or more resource locations from which to serve static content. Each location must point to a valid directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked for a given resource in the order specified. <p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to be served both from the web application root and from any JAR on the classpath that contains a {@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence.
Specify the cache period for the resources served by the resource handler, in seconds. The default is to not send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value.
Specify the {@link org.springframework.http.CacheControl} which should be used by the resource handler. <p>Setting a custom value here will override the configuration set with {@link #setCachePeriod}.
Configure a chain of resource resolvers and transformers to use. This can be useful, for example, to apply a version strategy to resource URLs. <p>If this method is not invoked, by default only a simple {@link PathResourceResolver} is used in order to match URL paths to resources under the configured locations. setting this to "true" is recommended for production (and "false" for development, especially when applying a version strategy)
Configure a chain of resource resolvers and transformers to use. This can be useful, for example, to apply a version strategy to resource URLs. <p>If this method is not invoked, by default only a simple {@link PathResourceResolver} is used in order to match URL paths to resources under the configured locations. setting this to "true" is recommended for production (and "false" for development, especially when applying a version strategy by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache} is used. Since Resources aren't serializable and can be dependent on the application host, one should not use a distributed cache but rather an in-memory cache.
Returns the URL path patterns for the resource handler.
Returns a {@link ResourceHttpRequestHandler} instance.
Add a resource handler for serving static resources based on the specified URL path patterns. The handler will be invoked for every incoming request that matches to one of the specified path patterns.
Whether a resource handler has already been registered for the given pathPattern.
Specify the order to use for resource handling relative to other {@link HandlerMapping}s configured in the Spring MVC application context. The default value used is {@code Integer.MAX_VALUE-1}.
Return a handler mapping with the mapped resource handlers; or {@code null} in case of no registrations.
Set the prefix that gets prepended to view names when building a URL.
Set the suffix that gets appended to view names when building a URL.
Set the view class that should be used to create views.
Set the view names (or name patterns) that can be handled by this view resolver. View names can contain simple wildcards such that 'my*', '*Report' and '*Repo*' will all match the view name 'myReport'.
Set static attributes to be added to the model of every request for all views resolved by this view resolver. This allows for setting any kind of attribute values, for example bean references.
Specify the maximum number of entries for the view cache. Default is 1024.
Enable or disable caching. <p>This is equivalent to setting the {@link #cacheLimit "cacheLimit"} property to the default limit (1024) or to 0, respectively. <p>Default is "true": caching is enabled. Disable this only for debugging and development.
Set the status code to set on the response. Optional. <p>If not set the response status will be 200 (OK).
Set the view name to return. Optional. <p>If not specified, the view controller will return {@code null} as the view name in which case the configured {@link RequestToViewNameTranslator} will select the view name. The {@code DefaultRequestToViewNameTranslator} for example translates "/foo/bar" to "foo/bar".
Map a view controller to the given URL path (or pattern) in order to render a response with a pre-configured status code and view.
Map a view controller to the given URL path (or pattern) in order to redirect to another URL. By default the redirect URL is expected to be relative to the current ServletContext, i.e. as relative to the web application root.
Map a simple controller to the given URL path (or pattern) in order to set the response status to the given code without rendering a body.
Specify the order to use for the {@code HandlerMapping} used to map view controllers relative to other handler mappings configured in Spring MVC. <p>By default this is set to 1, i.e. right after annotated controllers, which are ordered at 0.
Return the {@code HandlerMapping} that contains the registered view controller mappings, or {@code null} for no registrations.
Whether any view resolvers have been registered.
Enable use of a {@link ContentNegotiatingViewResolver} to front all other configured view resolvers and select among all selected Views based on media types requested by the client (e.g. in the Accept header). <p>If invoked multiple times the provided default views will be added to any other default views that may have been configured already.
Register JSP view resolver using a default view name prefix of "/WEB-INF/" and a default suffix of ".jsp". <p>When this method is invoked more than once, each call will register a new ViewResolver instance. Note that since it's not easy to determine if a JSP exists without forwarding to it, using multiple JSP-based view resolvers only makes sense in combination with the "viewNames" property on the resolver indicating which view names are handled by which resolver.
Register JSP view resolver with the specified prefix and suffix. <p>When this method is invoked more than once, each call will register a new ViewResolver instance. Note that since it's not easy to determine if a JSP exists without forwarding to it, using multiple JSP-based view resolvers only makes sense in combination with the "viewNames" property on the resolver indicating which view names are handled by which resolver.
Register Tiles 3.x view resolver. <p><strong>Note</strong> that you must also configure Tiles by adding a {@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.
Register a FreeMarker view resolver with an empty default view name prefix and a default suffix of ".ftl". <p><strong>Note</strong> that you must also configure FreeMarker by adding a {@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.
Register a Groovy markup view resolver with an empty default view name prefix and a default suffix of ".tpl".
Register a script template view resolver with an empty default view name prefix and suffix.
Register a bean name view resolver that interprets view names as the names of {@link org.springframework.web.servlet.View} beans.
Register a {@link ViewResolver} bean instance. This may be useful to configure a custom (or 3rd party) resolver implementation. It may also be used as an alternative to other registration methods in this class when they don't expose some more advanced property that needs to be set.
ViewResolver's registered through this registry are encapsulated in an instance of {@link org.springframework.web.servlet.view.ViewResolverComposite ViewResolverComposite} and follow the order of registration. This property determines the order of the ViewResolverComposite itself relative to any additional ViewResolver's (not registered here) present in the Spring configuration <p>By default this property is not set, which means the resolver is ordered at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled in which case the order (if not set explicitly) is changed to {@link Ordered#HIGHEST_PRECEDENCE}.
Protected method for plugging in a custom sub-class of {@link RequestMappingHandlerMapping}.
Provide access to the shared handler interceptors used to configure {@link HandlerMapping} instances with. This method cannot be overridden, use {@link #addInterceptors(InterceptorRegistry)} instead.
Callback for building the {@link PathMatchConfigurer}. Delegates to {@link #configurePathMatch}.
Protected method for plugging in a custom sub-class of {@link RequestMappingHandlerAdapter}.
Return the {@link ConfigurableWebBindingInitializer} to use for initializing all {@link WebDataBinder} instances.
Override this method to provide a custom {@link MessageCodesResolver}.
Provide access to the shared custom argument resolvers used by the {@link RequestMappingHandlerAdapter} and the {@link ExceptionHandlerExceptionResolver}. This method cannot be overridden, use {@link #addArgumentResolvers(List)} instead.
Provide access to the shared return value handlers used by the {@link RequestMappingHandlerAdapter} and the {@link ExceptionHandlerExceptionResolver}. This method cannot be overridden, use {@link #addReturnValueHandlers(List)} instead.
Provides access to the shared {@link HttpMessageConverter}s used by the {@link RequestMappingHandlerAdapter} and the {@link ExceptionHandlerExceptionResolver}. This method cannot be overridden. Use {@link #configureMessageConverters(List)} instead. Also see {@link #addDefaultHttpMessageConverters(List)} that can be used to add default message converters.
Adds a set of default HttpMessageConverter instances to the given list. Subclasses can call this method from {@link #configureMessageConverters(List)}.
A method available to subclasses for adding default {@link HandlerExceptionResolver}s. <p>Adds the following exception resolvers: <ul> <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through @{@link ExceptionHandler} methods. <li>{@link ResponseStatusExceptionResolver} for exceptions annotated with @{@link ResponseStatus}. <li>{@link DefaultHandlerExceptionResolver} for resolving known Spring exception types </ul>
Protected method for plugging in a custom sub-class of {@link ExceptionHandlerExceptionResolver}.
Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper} under that well-known name, unless already registered.
Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher} under that well-known name, unless already registered.
Registers  an {@link HttpRequestHandlerAdapter} under a well-known name unless already registered.
Registers  an {@link HttpRequestHandlerAdapter} under a well-known name unless already registered.
Registers a {@link SimpleControllerHandlerAdapter} under a well-known name unless already registered.
Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s) under a well-known name unless already registered. The bean definition may be updated if a non-null CORS configuration is provided.
with the {@code annotation-driven} element.
Set whether to detect handler beans in ancestor ApplicationContexts. <p>Default is "false": Only handler beans in the current ApplicationContext will be detected, i.e. only in the context that this HandlerMapping itself is defined in (typically the current DispatcherServlet's context). <p>Switch this flag on to detect handler beans in ancestor contexts (typically the Spring root WebApplicationContext) as well.
Register all handlers found in the current ApplicationContext. <p>The actual URL determination for a handler is up to the concrete {@link #determineUrlsForHandler(String)} implementation. A bean for which no such URLs could be determined is simply not considered a handler.
Specify the set of handlers that this exception resolver should apply to. <p>The exception mappings and the default error view will only apply to the specified handlers. <p>If no handlers or handler classes are set, the exception mappings and the default error view will apply to all handlers. This means that a specified default error view will be used as a fallback for all exceptions; any further HandlerExceptionResolvers in the chain will be ignored in this case.
Specify the set of classes that this exception resolver should apply to. <p>The exception mappings and the default error view will only apply to handlers of the specified types; the specified types may be interfaces or superclasses of handlers as well. <p>If no handlers or handler classes are set, the exception mappings and the default error view will apply to all handlers. This means that a specified default error view will be used as a fallback for all exceptions; any further HandlerExceptionResolvers in the chain will be ignored in this case.
Set the log category for warn logging. The name will be passed to the underlying logger implementation through Commons Logging, getting interpreted as a log category according to the logger's configuration. <p>Default is no warn logging. Specify this setting to activate warn logging into a specific category. Alternatively, override the {@link #logException} method for custom logging.
Specify whether to prevent HTTP response caching for any view resolved by this exception resolver. <p>Default is {@code false}. Switch this to {@code true} in order to automatically generate HTTP response headers that suppress response caching.
Check whether this resolver is supposed to apply to the given handler. <p>The default implementation checks against the configured {@linkplain #setMappedHandlers handlers} and {@linkplain #setMappedHandlerClasses handler classes}, if any. at the time of the exception (for example, if multipart resolution failed) for the given request and handler
Log the given exception at warn level, provided that warn logging has been activated through the {@link #setWarnLogCategory "warnLogCategory"} property. <p>Calls {@link #buildLogMessage} in order to determine the concrete message to log.
Build a log message for the given exception, occurred during processing the given request.
Prepare the response for the exceptional case. <p>The default implementation prevents the response from being cached, if the {@link #setPreventResponseCaching "preventResponseCaching"} property has been set to "true".
Prevents the response from being cached, through setting corresponding HTTP {@code Cache-Control: no-store} header.
Specify the order value for this HandlerMapping bean. <p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered.
Set the default handler for this handler mapping. This handler will be returned if no specific mapping was found. <p>Default is {@code null}, indicating no default handler.
Return the default handler for this handler mapping, or {@code null} if none.
Return the UrlPathHelper implementation to use for resolution of lookup paths.
Return the PathMatcher implementation to use for matching URL paths against registered URL patterns.
Set the interceptors to apply for all handlers mapped by this handler mapping. <p>Supported interceptor types are HandlerInterceptor, WebRequestInterceptor, and MappedInterceptor. Mapped interceptors apply only to request URLs that match its path patterns. Mapped interceptor beans are also detected by type during initialization.
Return the configured {@link CorsProcessor}.
Set "global" CORS configuration based on URL patterns. By default the first matching URL pattern is combined with the CORS configuration for the handler, if any.
Detect beans of type {@link MappedInterceptor} and add them to the list of mapped interceptors. <p>This is called in addition to any {@link MappedInterceptor}s that may have been provided via {@link #setInterceptors}, by default adding all beans of type {@link MappedInterceptor} from the current context and its ancestors. Subclasses can override and refine this policy.
Initialize the specified interceptors, checking for {@link MappedInterceptor}s and adapting {@link HandlerInterceptor}s and {@link WebRequestInterceptor}s if necessary.
Adapt the given interceptor object to the {@link HandlerInterceptor} interface. <p>By default, the supported interceptor types are {@link HandlerInterceptor} and {@link WebRequestInterceptor}. Each given {@link WebRequestInterceptor} will be wrapped in a {@link WebRequestHandlerInterceptorAdapter}. Can be overridden in subclasses.
Return the adapted interceptors as {@link HandlerInterceptor} array.
Return all configured {@link MappedInterceptor}s as an array.
Look up a handler for the given request, returning {@code null} if no specific one is found. This method is called by {@link #getHandler}; a {@code null} return value will lead to the default handler, if one is set. <p>On CORS pre-flight requests this method should return a match not for the pre-flight request but for the expected actual request based on the URL path, the HTTP methods from the "Access-Control-Request-Method" header, and the headers from the "Access-Control-Request-Headers" header thus allowing the CORS configuration to be obtained via {@link #getCorsConfigurations}, <p>Note: This method may also return a pre-built {@link HandlerExecutionChain}, combining a handler object with dynamically determined interceptors. Statically specified interceptors will get merged into such an existing chain.
Retrieve the CORS configuration for the given handler.
Update the HandlerExecutionChain for CORS-related handling. <p>For pre-flight requests, the default implementation replaces the selected handler with a simple HttpRequestHandler that invokes the configured {@link #setCorsProcessor}. <p>For actual requests, the default implementation inserts a HandlerInterceptor that makes CORS-related checks and adds CORS headers.
Whether to detect handler methods in beans in ancestor ApplicationContexts. <p>Default is "false": Only beans in the current ApplicationContext are considered, i.e. only in the context that this HandlerMapping itself is defined in (typically the current DispatcherServlet's context). <p>Switch this flag on to detect handler beans in ancestor contexts (typically the Spring root WebApplicationContext) as well.
Configure the naming strategy to use for assigning a default name to every mapped handler method. <p>The default naming strategy is based on the capital letters of the class name followed by "#" and then the method name, e.g. "TC#getFoo" for a class named TestController with method getFoo.
Return the configured naming strategy or {@code null}.
Return a (read-only) map with all mappings and HandlerMethod's.
Return the handler methods for the given mapping name. list will never be modified and is safe to iterate.
Return the internal mapping registry. Provided for testing purposes.
Register the given mapping. <p>This method may be invoked at runtime after initialization has completed.
Un-register the given mapping. <p>This method may be invoked at runtime after initialization has completed.
Scan beans in the ApplicationContext, detect and register handler methods.
Look for handler methods in a handler.
Register a handler method and its unique mapping. Invoked at startup for each detected handler method. under the same mapping
Create the HandlerMethod instance.
Extract and return the CORS configuration for the mapping.
Look up the best-matching handler method for the current request. If multiple matches are found, the best match is selected.
Invoked when a matching mapping is found.
Invoked when no matching mapping is not found.
Return all mappings and handler methods. Not thread-safe.
Return matches for the given URL path. Not thread-safe.
Return handler methods by mapping name. Thread-safe for concurrent use.
Return CORS configuration. Thread-safe for concurrent use.
Acquire the read lock when using getMappings and getMappingsByUrl.
Release the read lock after using getMappings and getMappingsByUrl.
Set the root handler for this handler mapping, that is, the handler to be registered for the root path ("/"). <p>Default is {@code null}, indicating no root handler.
Return the root handler for this handler mapping (registered for "/"), or {@code null} if none.
Whether to match to URLs irrespective of the presence of a trailing slash. If enabled a URL pattern such as "/users" also matches to "/users/". <p>The default value is {@code false}.
Whether to match to URLs irrespective of the presence of a trailing slash.
Set whether to lazily initialize handlers. Only applicable to singleton handlers, as prototypes are always lazily initialized. Default is "false", as eager initialization allows for more efficiency through referencing the controller objects directly. <p>If you want to allow your controllers to be lazily initialized, make them "lazy-init" and set this flag to true. Just making them "lazy-init" will not work, as they are initialized through the references from the handler mapping in this case.
Look up a handler instance for the given URL path. <p>Supports direct matches, e.g. a registered "/test" matches "/test", and various Ant-style pattern matches, e.g. a registered "/t*" matches both "/test" and "/team". For details, see the AntPathMatcher class. <p>Looks for the most exact pattern, where most exact is defined as the longest path pattern.
Build a handler object for the given raw handler, exposing the actual handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler. <p>The default implementation builds a {@link HandlerExecutionChain} with a special interceptor that exposes the path attribute and uri template variables
Expose the path within the current mapping as request attribute.
Expose the URI templates variables as request attribute.
Register the specified handler for the given URL paths.
Register the specified handler for the given URL path. (a bean name will automatically be resolved into the corresponding handler bean)
Return the registered handlers as an unmodifiable Map, with the registered path as key and the handler object (or handler bean name in case of a lazy-init handler) as value.
Indicates whether this handler mapping support type-level mappings. Default to {@code false}.
Creates a new {@link ConversionServiceExposingInterceptor}.
Create a new DispatcherServletWebRequest instance for the given request.
Create a new DispatcherServletWebRequest instance for the given request and response.
Set the list of exception resolvers to delegate to.
Return the list of exception resolvers to delegate to.
Create a new MappedInterceptor instance.
Configure a PathMatcher to use with this MappedInterceptor instead of the one passed by default to the {@link #matches(String, org.springframework.util.PathMatcher)} method. This is an advanced property that is only required when using custom PathMatcher implementations that support mapping metadata other than the Ant-style path patterns supported by default.
The configured PathMatcher, or {@code null}.
The path into the application the interceptor is mapped to.
The actual Interceptor reference.
Returns {@code true} if the interceptor applies to the given request path.
Set the mappings between exception class names and error view names. The exception class name can be a substring, with no wildcard support at present. A value of "ServletException" would match {@code javax.servlet.ServletException} and subclasses, for example. <p><b>NB:</b> Consider carefully how specific the pattern is, and whether to include package information (which isn't mandatory). For example, "Exception" will match nearly anything, and will probably hide other rules. "java.lang.Exception" would be correct if "Exception" was meant to define a rule for all checked exceptions. With more unusual exception names such as "BaseBusinessException" there's no need to use a FQN. and error view names as values
Set one or more exceptions to be excluded from the exception mappings. Excluded exceptions are checked first and if one of them equals the actual exception, the exception will remain unresolved.
Set the name of the default error view. This view will be returned if no specific mapping was found. <p>Default is none.
Set the HTTP status code that this exception resolver will apply for a given resolved error view. Keys are view names; values are status codes. <p>Note that this error code will only get applied in case of a top-level request. It will not be set for an include request, since the HTTP status cannot be modified from within an include. <p>If not specified, the default status code will be applied.
An alternative to {@link #setStatusCodes(Properties)} for use with Java-based configuration.
Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}. Keys are view names; values are status codes.
Set the default HTTP status code that this exception resolver will apply if it resolves an error view and if there is no status code mapping defined. <p>Note that this error code will only get applied in case of a top-level request. It will not be set for an include request, since the HTTP status cannot be modified from within an include. <p>If not specified, no status code will be applied, either leaving this to the controller or view, or keeping the servlet engine's default of 200 (OK). ({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})
Set the name of the model attribute as which the exception should be exposed. Default is "exception". <p>This can be either set to a different attribute name or to {@code null} for not exposing an exception attribute at all.
Determine the view name for the given exception, first checking against the {@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the {@link #setExceptionMappings "exceptionMappings"}, and finally using the {@link #setDefaultErrorView "defaultErrorView"} as a fallback.
Find a matching view name in the given exception mappings.
Return the depth to the superclass matching. <p>0 means ex matches exactly. Returns -1 if there's no match. Otherwise, returns depth. Lowest depth wins.
Determine the HTTP status code to apply for the given error view. <p>The default implementation returns the status code for the given view name (specified through the {@link #setStatusCodes(Properties) statusCodes} property), or falls back to the {@link #setDefaultStatusCode defaultStatusCode} if there is no match. <p>Override this in a custom subclass to customize this behavior. (200 in case of a standard error view)
Apply the specified HTTP status code to the given response, if possible (that is, if not executing within an include request).
Return a ModelAndView for the given request, view name and exception. <p>The default implementation delegates to {@link #getModelAndView(String, Exception)}.
Return a ModelAndView for the given view name and exception. <p>The default implementation adds the specified exception attribute. Can be overridden in subclasses.
Set whether to use the shared ServletConfig object passed in through {@code setServletConfig}, if available. <p>Default is "true". Turn this setting to "false" to pass in a mock ServletConfig object with the bean name as servlet name, holding the current ServletContext.
Map URL paths to handler bean names. This is the typical way of configuring this HandlerMapping. <p>Supports direct URL matches and Ant-style pattern matches. For syntax details, see the {@link org.springframework.util.AntPathMatcher} javadoc.
Set a Map with URL paths as keys and handler beans (or handler bean names) as values. Convenient for population with bean references. <p>Supports direct URL matches and Ant-style pattern matches. For syntax details, see the {@link org.springframework.util.AntPathMatcher} javadoc.
Allow Map access to the URL path mappings, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "urlMap[myKey]". This is particularly useful for adding or overriding entries in child bean definitions.
Register all handlers specified in the URL map for the corresponding paths.
Set the roles that this interceptor should treat as authorized.
Handle a request that is not authorized according to this interceptor. Default implementation sends HTTP status code 403 ("forbidden"). <p>This method can be overridden to write a custom message, forward or redirect to some error page or login page, or throw a ServletException.
Create a new WebRequestHandlerInterceptorAdapter for the given WebRequestInterceptor.
Set a default TimeZone that this resolver will return if no other time zone found.
Return the default TimeZone that this resolver is supposed to fall back to, if any.
Set a default Locale that this resolver will return if no other locale found.
Return the default Locale that this resolver is supposed to fall back to, if any.
Configure supported locales to check against the requested locales determined via {@link HttpServletRequest#getLocales()}. If this is not configured then {@link HttpServletRequest#getLocale()} is used instead.
Return the configured list of supported locales.
Create a new instance of the {@link CookieLocaleResolver} class using the {@link #DEFAULT_COOKIE_NAME default cookie name}.
Specify whether this resolver's cookies should be compliant with BCP 47 language tags instead of Java's legacy locale specification format. The default is {@code false}. <p>Note: This mode requires JDK 7 or higher. Set this flag to {@code true} for BCP 47 compliance on JDK 7+ only.
Return whether this resolver's cookies should be compliant with BCP 47 language tags instead of Java's legacy locale specification format.
Set a fixed Locale that this resolver will return if no cookie found.
Return the fixed Locale that this resolver will return if no cookie found, if any.
Set a fixed TimeZone that this resolver will return if no cookie found.
Return the fixed TimeZone that this resolver will return if no cookie found, if any.
Determine the default locale for the given request, Called if no locale cookie has been found. <p>The default implementation returns the specified default locale, if any, else falls back to the request's accept-header locale.
Determine the default time zone for the given request, Called if no TimeZone cookie has been found. <p>The default implementation returns the specified default time zone, if any, or {@code null} otherwise.
Create a default FixedLocaleResolver, exposing a configured default locale (or the JVM's default locale as fallback).
Create a FixedLocaleResolver that exposes the given locale.
Create a FixedLocaleResolver that exposes the given locale and time zone.
Set the name of the parameter that contains a locale specification in a locale change request. Default is "locale".
Return the name of the parameter that contains a locale specification in a locale change request.
Configure the HTTP method(s) over which the locale can be changed.
Return the configured HTTP methods.
Set whether to ignore an invalid value for the locale parameter.
Return whether to ignore an invalid value for the locale parameter.
Specify whether to parse request parameter values as BCP 47 language tags instead of Java's legacy locale specification format. The default is {@code false}. <p>Note: This mode requires JDK 7 or higher. Set this flag to {@code true} for BCP 47 compliance on JDK 7+ only.
Return whether to use BCP 47 language tags instead of Java's legacy locale specification format.
Determine the default locale for the given request, Called if no Locale session attribute has been found. <p>The default implementation returns the specified default locale, if any, else falls back to the request's accept-header locale.
Determine the default time zone for the given request, Called if no TimeZone session attribute has been found. <p>The default implementation returns the specified default time zone, if any, or {@code null} otherwise.
Set the UrlPathHelper to use for resolution of lookup paths. <p>Use this to override the default UrlPathHelper with a custom subclass, or to share common UrlPathHelper settings across multiple HandlerMappings and HandlerAdapters.
Set the PathMatcher implementation to use for matching URL paths against registered URL patterns. <p>Default is {@link org.springframework.util.AntPathMatcher}.
Set the MethodNameResolver to use for resolving default handler methods (carrying an empty {@code @RequestMapping} annotation). <p>Will only kick in when the handler method cannot be resolved uniquely through the annotation metadata already.
Specify a WebBindingInitializer which will apply pre-configured configuration to every DataBinder that this controller uses.
Specify the strategy to store session attributes with. <p>Default is {@link org.springframework.web.bind.support.DefaultSessionAttributeStore}, storing session attributes in the HttpSession, using the same attribute name as in the model.
Cache content produced by {@code @SessionAttributes} annotated handlers for the given number of seconds. Default is 0, preventing caching completely. <p>In contrast to the "cacheSeconds" property which will apply to all general handlers (but not to {@code @SessionAttributes} annotated handlers), this setting will apply to {@code @SessionAttributes} annotated handlers only.
Set if controller execution should be synchronized on the session, to serialize parallel invocations from the same client. <p>More specifically, the execution of the {@code handleRequestInternal} method will get synchronized if this flag is "true". The best available session mutex will be used for the synchronization; ideally, this will be a mutex exposed by HttpSessionMutexListener. <p>The session mutex is guaranteed to be the same object during the entire lifetime of the session, available under the key defined by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a safe reference to synchronize on for locking on the current session. <p>In many cases, the HttpSession reference itself is a safe mutex as well, since it will always be the same object reference for the same active logical session. However, this is not guaranteed across different servlet containers; the only 100% safe way is a session mutex.
Set the ParameterNameDiscoverer to use for resolving method parameter names if needed (e.g. for default attribute names). <p>Default is a {@link org.springframework.core.DefaultParameterNameDiscoverer}.
Set a custom WebArgumentResolvers to use for special method parameter types. <p>Such a custom WebArgumentResolver will kick in first, having a chance to resolve an argument value before the standard argument handling kicks in.
Set one or more custom WebArgumentResolvers to use for special method parameter types. <p>Any such custom WebArgumentResolver will kick in first, having a chance to resolve an argument value before the standard argument handling kicks in.
Set a custom ModelAndViewResolvers to use for special method return types. <p>Such a custom ModelAndViewResolver will kick in first, having a chance to resolve a return value before the standard ModelAndView handling kicks in.
Set one or more custom ModelAndViewResolvers to use for special method return types. <p>Any such custom ModelAndViewResolver will kick in first, having a chance to resolve a return value before the standard ModelAndView handling kicks in.
Return the message body converters that this adapter has been configured with.
Specify the order value for this HandlerAdapter bean. <p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered.
Build a HandlerMethodResolver for the given handler type.
Template method for creating a new ServletRequestDataBinder instance. <p>The default implementation creates a standard ServletRequestDataBinder. This can be overridden for custom ServletRequestDataBinder subclasses. if the binder is just used to convert a plain parameter value)
Template method for creating a new HttpInputMessage instance. <p>The default implementation creates a standard {@link ServletServerHttpRequest}. This can be overridden for custom {@code HttpInputMessage} implementations
Template method for creating a new HttpOutputMessage instance. <p>The default implementation creates a standard {@link ServletServerHttpResponse}. This can be overridden for custom {@code HttpOutputMessage} implementations
Determines the combined pattern for the given methodLevelPattern and path. <p>Uses the following algorithm: <ol> <li>If there is a type-level mapping with path information, it is {@linkplain PathMatcher#combine(String, String) combined} with the method-level pattern.</li> <li>If there is a {@linkplain HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE best matching pattern} in the request, it is combined with the method-level pattern.</li> <li>Otherwise, the method-level pattern is returned.</li> </ol>
Set a custom ArgumentResolvers to use for special method parameter types. <p>Such a custom ArgumentResolver will kick in first, having a chance to resolve an argument value before the standard argument handling kicks in.
Set one or more custom ArgumentResolvers to use for special method parameter types. <p>Any such custom ArgumentResolver will kick in first, having a chance to resolve an argument value before the standard argument handling kicks in.
Finds the handler method that matches the thrown exception best.
Uses the {@link ExceptionDepthComparator} to find the best matching method.
Resolves the arguments for the given method. Delegates to {@link #resolveCommonArgument}.
Resolves common method arguments. Delegates to registered {@link #setCustomArgumentResolver(WebArgumentResolver) argumentResolvers} first, then checking {@link #resolveStandardArgument}.
Resolves standard method arguments. The default implementation handles {@link NativeWebRequest}, {@link ServletRequest}, {@link ServletResponse}, {@link HttpSession}, {@link Principal}, {@link Locale}, request {@link InputStream}, request {@link Reader}, response {@link OutputStream}, response {@link Writer}, and the given {@code thrownException}.
Set whether to register paths using the default suffix pattern as well: i.e. whether "/users" should be registered as "/users.*" and "/users/" too. <p>Default is "true". Turn this convention off if you intend to interpret your {@code @RequestMapping} paths strictly. <p>Note that paths which include a ".xxx" suffix or end with "/" already will not be transformed using the default suffix pattern in any case.
Derive URL mappings from the handler's method-level mappings. within a type-level mapping
Derive URL mappings from the handler's method-level mappings.
Add URLs and/or URL patterns for the given path.
Validate the given type-level mapping metadata against the current request, checking HTTP request method and parameter conditions.
Template method that handles {@link ResponseStatus @ResponseStatus} annotation. <p>The default implementation sends a response error using {@link HttpServletResponse#sendError(int)} or {@link HttpServletResponse#sendError(int, String)} if the annotation has a {@linkplain ResponseStatus#reason() reason} and then returns an empty ModelAndView. time of the exception (for example, if multipart resolution failed) exception that has the ResponseStatus annotation if found on the cause. for default processing
Check whether the given request matches the specified request methods.
Check whether the given request matches the specified parameter conditions. {@link org.springframework.web.bind.annotation.RequestMapping#params() RequestMapping.#params()}
Check whether the given request matches the specified header conditions. {@link org.springframework.web.bind.annotation.RequestMapping#headers() RequestMapping.headers()}
Indicates whether this condition is empty, i.e. whether or not it contains any discrete items.
Create an instance with 0 or more {@code RequestCondition} types. It is important to create {@code CompositeRequestCondition} instances with the same number of conditions so they may be compared and combined. It is acceptable to provide {@code null} conditions.
Whether this instance contains 0 conditions or not.
Return the underlying conditions, possibly empty but never {@code null}.
Creates a new instance from 0 or more "consumes" expressions. {@link RequestMapping#consumes()}; if 0 expressions are provided, the condition will match to every request
Creates a new instance with "consumes" and "header" expressions. "Header" expressions where the header name is not 'Content-Type' or have no header value defined are ignored. If 0 expressions are provided in total, the condition will match to every request
Private constructor accepting parsed media type expressions.
Return the contained MediaType expressions.
Returns the media types for this condition excluding negated expressions.
Whether the condition has any media type expressions.
Create a new instance from the given header expressions. Expressions with header names 'Accept' or 'Content-Type' are ignored. See {@link ConsumesRequestCondition} and {@link ProducesRequestCondition} for those. if 0, the condition will match to every request
Return the contained request header expressions.
Create a new instance from the given param expressions. if 0, the condition will match to every request.
Return the contained request parameter expressions.
Creates a new instance with the given URL patterns. Each pattern that is not empty and does not start with "/" is prepended with "/".
Additional constructor with flags for using suffix pattern (.*) and trailing slash matches.
Creates a new instance with the given URL patterns. Each pattern that is not empty and does not start with "/" is pre-pended with "/".
Private constructor accepting a collection of patterns.
Find the patterns matching the given lookup path. Invoking this method should yield results equivalent to those of calling {@link #getMatchingCondition(javax.servlet.http.HttpServletRequest)}. This method is provided as an alternative to be used if no request is available (e.g. introspection, tooling, etc).
Creates a new instance from "produces" expressions. If 0 expressions are provided in total, this condition will match to any request.
Creates a new instance with "produces" and "header" expressions. "Header" expressions where the header name is not 'Accept' or have no header value defined are ignored. If 0 expressions are provided in total, this condition will match to any request.
Same as {@link #ProducesRequestCondition(String[], String[])} but also accepting a {@link ContentNegotiationManager}.
Private constructor with already parsed media type expressions.
Return the contained "produces" expressions.
Return the contained producible media types excluding negated expressions.
Return the contained "produces" expressions or if that's empty, a list with a {@code MediaType_ALL} expression.
Return the held request condition, or {@code null} if not holding one.
Ensure the held request conditions are of the same type.
Create a new instance with the given request methods. if, 0 the condition will match to every request
Returns all {@link RequestMethod}s contained in this condition.
On a pre-flight request match to the would-be, actual request. Hence empty conditions is a match, otherwise try to match to the HTTP method in the "Access-Control-Request-Method" header.
Validate the jsonp query parameter value. The default implementation returns true if it consists of digits, letters, or "_" and ".". Invalid parameter values are ignored.
Return the content type to set the response to. This implementation always returns "application/javascript".
Wrap the body in a {@link MappingJacksonValue} value container (for providing additional serialization instructions) or simply cast it if already wrapped.
Basic constructor with converters only.
Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}.
Return the media types supported by all provided message converters sorted by specificity via {@link MediaType#sortBySpecificity(List)}.
Return the configured {@link RequestBodyAdvice} and {@link RequestBodyAdvice} where each instance may be wrapped as a {@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.
Create the method argument value of the expected parameter type by reading from the given request.
Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}.
Validate the request part if applicable. <p>The default implementation checks for {@code @javax.validation.Valid}, Spring's {@link org.springframework.validation.annotation.Validated}, and custom annotations whose name starts with "Valid".
Constructor with list of converters only.
Constructor with list of converters and ContentNegotiationManager.
Constructor with list of converters and ContentNegotiationManager as well as request/response body advice instances.
Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}.
Writes the given return value to the given web request. Delegates to {@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)}
Return the type of the value to be written to the response. Typically this is a simple check via getClass on the returnValue but if the returnValue is null, then the returnType needs to be examined possibly including generic type determination (e.g. {@code ResponseEntity<T>}).
Return the generic type of the {@code returnType} (or of the nested type if it is a {@link HttpEntity}).
Return the more specific of the acceptable and the producible media types with the q-value of the former.
Check if the path has a file extension and whether the extension is either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly {@link ContentNegotiationManager#getAllFileExtensions() registered}. If not, and the status is in the 2xx range, a 'Content-Disposition' header with a safe attachment file name ("f.txt") is added to prevent RFD exploits.
Return the map with {@code DeferredResult} adapters. <p>By default the map contains adapters for {@code DeferredResult}, which simply downcasts, {@link ListenableFuture}, and {@link CompletionStage}.
Provide resolvers for custom argument types. Custom resolvers are ordered after built-in ones. To override the built-in support for argument resolution use {@link #setArgumentResolvers} instead.
Return the custom argument resolvers, or {@code null}.
Configure the complete list of supported argument types thus overriding the resolvers that would otherwise be configured by default.
Return the configured argument resolvers, or possibly {@code null} if not initialized yet via {@link #afterPropertiesSet()}.
Provide handlers for custom return value types. Custom handlers are ordered after built-in ones. To override the built-in support for return value handling use {@link #setReturnValueHandlers}.
Return the custom return value handlers, or {@code null}.
Configure the complete list of supported return value types thus overriding handlers that would otherwise be configured by default.
Return the configured handlers, or possibly {@code null} if not initialized yet via {@link #afterPropertiesSet()}.
Return the configured message body converters.
Set the {@link ContentNegotiationManager} to use to determine requested media types. If not set, the default constructor is used.
Return the configured {@link ContentNegotiationManager}.
Add one or more components to be invoked after the execution of a controller method annotated with {@code @ResponseBody} or returning {@code ResponseEntity} but before the body is written to the response with the selected {@code HttpMessageConverter}.
Return an unmodifiable Map with the {@link ControllerAdvice @ControllerAdvice} beans discovered in the ApplicationContext. The returned map will be empty if the method is invoked before the bean has been initialized via {@link #afterPropertiesSet()}.
Return the list of argument resolvers to use including built-in resolvers and custom resolvers provided via {@link #setCustomArgumentResolvers}.
Return the list of return value handlers to use including built-in and custom handlers provided via {@link #setReturnValueHandlers}.
Find an {@code @ExceptionHandler} method for the given exception. The default implementation searches methods in the class hierarchy of the controller first and if not found, it continues searching for additional {@code @ExceptionHandler} methods assuming some {@linkplain ControllerAdvice @ControllerAdvice} Spring-managed beans were detected.
Create a new instance, with default object name. if the binder is just used to convert a plain parameter value)
Create a new instance. if the binder is just used to convert a plain parameter value)
Basic constructor with converters only. Suitable for resolving {@code HttpEntity}. For handling {@code ResponseEntity} consider also providing a {@code ContentNegotiationManager}.
Basic constructor with converters and {@code ContentNegotiationManager}. Suitable for resolving {@code HttpEntity} and handling {@code ResponseEntity} without {@code Request~} or {@code ResponseBodyAdvice}.
Complete constructor for resolving {@code HttpEntity} method arguments. For handling {@code ResponseEntity} consider also providing a {@code ContentNegotiationManager}.
Complete constructor for resolving {@code HttpEntity} and handling {@code ResponseEntity}.
Configure one more simple patterns (as described in {@link org.springframework.util.PatternMatchUtils#simpleMatch}) to use in order to recognize custom redirect prefixes in addition to "redirect:". <p>Note that simply configuring this property will not make a custom redirect prefix work. There must be a custom View that recognizes the prefix as well.
The configured redirect patterns, if any.
Whether the given view name is a redirect view reference. The default implementation checks the configured redirect patterns and also if the view name starts with the "redirect:" prefix. reference; "false" otherwise.
Create a new instance.
Default constructor. Protected to prevent direct instantiation.
Create an instance of this class with a base URL. After that calls to one of the instance based {@code withXxx(...}} methods will create URLs relative to the given base URL.
Create a {@link UriComponentsBuilder} from the mapping of a controller class and current request information including Servlet mapping. If the controller contains multiple mappings, only the first one is used.
An alternative to {@link #fromController(Class)} that accepts a {@code UriComponentsBuilder} representing the base URL. This is useful when using MvcUriComponentsBuilder outside the context of processing a request or to apply a custom baseUrl not matching the current request. and therefore not modified and may be re-used for further calls.
Create a {@link UriComponentsBuilder} from the mapping of a controller method and an array of method argument values. This method delegates to {@link #fromMethod(java.lang.reflect.Method, Object...)}. if there is more than one matching method
An alternative to {@link #fromMethodName(Class, String, Object...)} that accepts a {@code UriComponentsBuilder} representing the base URL. This is useful when using MvcUriComponentsBuilder outside the context of processing a request or to apply a custom baseUrl not matching the current request. and therefore not modified and may be re-used for further calls. if there is more than one matching method
Create a {@link UriComponentsBuilder} by invoking a "mock" controller method. The controller method and the supplied argument values are then used to delegate to {@link #fromMethod(java.lang.reflect.Method, Object...)}. <p>For example, given this controller: <pre class="code"> &#064;RequestMapping("/people/{id}/addresses") class AddressController { &#064;RequestMapping("/{country}") public HttpEntity<Void> getAddressesForCountry(&#064;PathVariable String country) { ... } &#064;RequestMapping(value="/", method=RequestMethod.POST) public void addAddress(Address address) { ... } </pre> A UriComponentsBuilder can be created: <pre class="code"> // Inline style with static import of "MvcUriComponentsBuilder.on" MvcUriComponentsBuilder.fromMethodCall( on(AddressController.class).getAddressesForCountry("US")).buildAndExpand(1); // Longer form useful for repeated invocation (and void controller methods) AddressController controller = MvcUriComponentsBuilder.on(AddressController.class); controller.addAddress(null); builder = MvcUriComponentsBuilder.fromMethodCall(controller); controller.getAddressesForCountry("US") builder = MvcUriComponentsBuilder.fromMethodCall(controller); </pre> invocation or the "mock" controller itself after an invocation
An alternative to {@link #fromMethodCall(Object)} that accepts a {@code UriComponentsBuilder} representing the base URL. This is useful when using MvcUriComponentsBuilder outside the context of processing a request or to apply a custom baseUrl not matching the current request. and therefore not modified and may be re-used for further calls. invocation or the "mock" controller itself after an invocation
Create a URL from the name of a Spring MVC controller method's request mapping. <p>The configured {@link org.springframework.web.servlet.handler.HandlerMethodMappingNamingStrategy HandlerMethodMappingNamingStrategy} determines the names of controller method request mappings at startup. By default all mappings are assigned a name based on the capital letters of the class name, followed by "#" as separator, and then the method name. For example "PC#getPerson" for a class named PersonController with method getPerson. In case the naming convention does not produce unique results, an explicit name may be assigned through the name attribute of the {@code @RequestMapping} annotation. <p>This is aimed primarily for use in view rendering technologies and EL expressions. The Spring URL tag library registers this method as a function called "mvcUrl". <p>For example, given this controller: <pre class="code"> &#064;RequestMapping("/people") class PersonController { &#064;RequestMapping("/{id}") public HttpEntity<Void> getPerson(&#064;PathVariable String id) { ... } </pre> A JSP can prepare a URL to the controller method as follows: <pre class="code"> &lt;a href="${s:mvcUrl('PC#getPerson').arg(0,"123").build()}"&gt;Get Person&lt;/a&gt; </pre> <p>Note that it's not necessary to specify all arguments. Only the ones required to prepare the URL, mainly {@code @RequestParam} and {@code @PathVariable}). if there is no unique match
An alternative to {@link #fromMappingName(String)} that accepts a {@code UriComponentsBuilder} representing the base URL. This is useful when using MvcUriComponentsBuilder outside the context of processing a request or to apply a custom baseUrl not matching the current request. and therefore not modified and may be re-used for further calls. if there is no unique match
Create a {@link UriComponentsBuilder} from the mapping of a controller method and an array of method argument values. The array of values  must match the signature of the controller method. Values for {@code @RequestParam} and {@code @PathVariable} are used for building the URI (via implementations of {@link org.springframework.web.method.support.UriComponentsContributor UriComponentsContributor}) while remaining argument values are ignored and can be {@code null}.
An alternative to {@link #fromMethod(java.lang.reflect.Method, Object...)} that accepts a {@code UriComponentsBuilder} representing the base URL. This is useful when using MvcUriComponentsBuilder outside the context of processing a request or to apply a custom baseUrl not matching the current request. and therefore not modified and may be re-used for further calls.
Return a "mock" controller instance. When an {@code @RequestMapping} method on the controller is invoked, the supplied argument values are remembered and the result can then be used to create a {@code UriComponentsBuilder} via {@link #fromMethodCall(Object)}. <p> Note that this is a shorthand version of {@link #controller(Class)} intended for inline use (with a static import), for example: <pre class="code"> MvcUriComponentsBuilder.fromMethodCall(on(FooController.class).getFoo(1)).build(); </pre>
Return a "mock" controller instance. When an {@code @RequestMapping} method on the controller is invoked, the supplied argument values are remembered and the result can then be used to create {@code UriComponentsBuilder} via {@link #fromMethodCall(Object)}. <p> This is a longer version of {@link #on(Class)}. It is needed with controller methods returning void as well for repeated invocations. <pre class="code"> FooController fooController = controller(FooController.class); fooController.saveFoo(1, null); builder = MvcUriComponentsBuilder.fromMethodCall(fooController); fooController.saveFoo(2, null); builder = MvcUriComponentsBuilder.fromMethodCall(fooController); </pre>
An alternative to {@link #fromController(Class)} for use with an instance of this class created via a call to {@link #relativeTo}.
An alternative to {@link #fromMethodName(Class, String, Object...)}} for use with an instance of this class created via {@link #relativeTo}.
An alternative to {@link #fromMethodCall(Object)} for use with an instance of this class created via {@link #relativeTo}.
An alternative to {@link #fromMappingName(String)} for use with an instance of this class created via {@link #relativeTo}.
An alternative to {@link #fromMethod(Class, Method, Object...)} for use with an instance of this class created via {@link #relativeTo}.
Configure the supported argument types in {@code @InitBinder} methods.
Return the argument resolvers for {@code @InitBinder} methods, or possibly {@code null} if not initialized yet via {@link #afterPropertiesSet()}.
Provide custom {@link ModelAndViewResolver}s. <p><strong>Note:</strong> This method is available for backwards compatibility only. However, it is recommended to re-write a {@code ModelAndViewResolver} as {@link HandlerMethodReturnValueHandler}. An adapter between the two interfaces is not possible since the {@link HandlerMethodReturnValueHandler#supportsReturnType} method cannot be implemented. Hence {@code ModelAndViewResolver}s are limited to always being invoked at the end after all other return value handlers have been given a chance. <p>A {@code HandlerMethodReturnValueHandler} provides better access to the return type and controller method information and can be ordered freely relative to other return value handlers.
Return the configured {@link ModelAndViewResolver}s, or {@code null}.
Provide the converters to use in argument resolvers and return value handlers that support reading and/or writing to the body of the request and response.
Add one or more {@code RequestBodyAdvice} instances to intercept the request before it is read and converted for {@code @RequestBody} and {@code HttpEntity} method arguments.
Add one or more {@code ResponseBodyAdvice} instances to intercept the response before {@code @ResponseBody} or {@code ResponseEntity} return values are written to the response body.
Provide a WebBindingInitializer with "global" initialization to apply to every DataBinder instance.
Return the configured WebBindingInitializer, or {@code null} if none.
Set the default {@link AsyncTaskExecutor} to use when a controller method return a {@link Callable}. Controller methods can override this default on a per-request basis by returning an {@link WebAsyncTask}. <p>By default a {@link SimpleAsyncTaskExecutor} instance is used. It's recommended to change that default in production as the simple executor does not re-use threads.
Specify the amount of time, in milliseconds, before concurrent handling should time out. In Servlet 3, the timeout begins after the main request processing thread has exited and ends when the request is dispatched again for further processing of the concurrently produced result. <p>If this value is not set, the default timeout of the underlying implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.
Configure {@code CallableProcessingInterceptor}'s to register on async requests.
Configure {@code DeferredResultProcessingInterceptor}'s to register on async requests.
By default the content of the "default" model is used both during rendering and redirect scenarios. Alternatively a controller method can declare a {@link RedirectAttributes} argument and use it to provide attributes for a redirect. <p>Setting this flag to {@code true} guarantees the "default" model is never used in a redirect scenario even if a RedirectAttributes argument is not declared. Setting it to {@code false} means the "default" model may be used in a redirect if the controller method doesn't declare a RedirectAttributes argument. <p>The default setting is {@code false} but new applications should consider setting it to {@code true}.
Specify the strategy to store session attributes with. The default is {@link org.springframework.web.bind.support.DefaultSessionAttributeStore}, storing session attributes in the HttpSession with the same attribute name as in the model.
Cache content produced by {@code @SessionAttributes} annotated handlers for the given number of seconds. <p>Possible values are: <ul> <li>-1: no generation of cache-related headers</li> <li>0 (default value): "Cache-Control: no-store" will prevent caching</li> <li>1 or higher: "Cache-Control: max-age=seconds" will ask to cache content; not advised when dealing with session attributes</li> </ul> <p>In contrast to the "cacheSeconds" property which will apply to all general handlers (but not to {@code @SessionAttributes} annotated handlers), this setting will apply to {@code @SessionAttributes} handlers only.
Return the owning factory of this bean instance, or {@code null} if none.
Return the list of argument resolvers to use for {@code @InitBinder} methods including built-in and custom resolvers.
Return the {@link SessionAttributesHandler} instance for the given handler type (never {@code null}).
Invoke the {@link RequestMapping} handler method preparing a {@link ModelAndView} if view resolution is required.
Create a {@link ServletInvocableHandlerMethod} from the given {@link HandlerMethod} definition.
Template method to create a new InitBinderDataBinderFactory instance. <p>The default implementation creates a ServletRequestDataBinderFactory. This can be overridden for custom ServletRequestDataBinder subclasses.
MethodFilter that matches {@link InitBinder @InitBinder} methods.
MethodFilter that matches {@link ModelAttribute @ModelAttribute} methods.
Whether to use suffix pattern match (".*") when matching patterns to requests. If enabled a method mapped to "/users" also matches to "/users.*". <p>The default value is {@code true}. <p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for more fine-grained control over specific suffixes to allow.
Whether suffix pattern matching should work only against path extensions explicitly registered with the {@link ContentNegotiationManager}. This is generally recommended to reduce ambiguity and to avoid issues such as when a "." appears in the path for other reasons. <p>By default this is set to "false".
Whether to use suffix pattern matching.
Whether to use registered suffixes for pattern matching.
Return the file extensions to use for suffix pattern matching.
Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)}, supplying the appropriate custom {@link RequestCondition} depending on whether the supplied {@code annotatedElement} is a class or method.
Provide a custom type-level request condition. The custom {@link RequestCondition} can be of any type so long as the same condition type is returned from all calls to this method in order to ensure custom request conditions can be combined and compared. <p>Consider extending {@link AbstractRequestCondition} for custom condition types and using {@link CompositeRequestCondition} to provide multiple custom conditions.
Provide a custom method-level request condition. The custom {@link RequestCondition} can be of any type so long as the same condition type is returned from all calls to this method in order to ensure custom request conditions can be combined and compared. <p>Consider extending {@link AbstractRequestCondition} for custom condition types and using {@link CompositeRequestCondition} to provide multiple custom conditions.
Create a {@link RequestMappingInfo} from the supplied {@link RequestMapping @RequestMapping} annotation, which is either a directly declared annotation, a meta-annotation, or the synthesized result of merging annotation attributes within an annotation hierarchy.
Resolve placeholder values in the given array of patterns.
Basic constructor with converters only.
Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}.
Create an instance from a list of objects that are either of type {@code ControllerAdviceBean} or {@code RequestBodyAdvice}.
Basic constructor with converters only. Suitable for resolving {@code @RequestBody}. For handling {@code @ResponseBody} consider also providing a {@code ContentNegotiationManager}.
Basic constructor with converters and {@code ContentNegotiationManager}. Suitable for resolving {@code @RequestBody} and handling {@code @ResponseBody} without {@code Request~} or {@code ResponseBodyAdvice}.
Complete constructor for resolving {@code @RequestBody} method arguments. For handling {@code @ResponseBody} consider also providing a {@code ContentNegotiationManager}.
Complete constructor for resolving {@code @RequestBody} and handling {@code @ResponseBody}.
Create a new ResponseBodyEmitter instance.
Create a ResponseBodyEmitter with a custom timeout value. <p>By default not set in which case the default configured in the MVC Java Config or the MVC namespace is used, or if that's not set, then the timeout depends on the default of the underlying server.
Return the configured timeout value, if any.
Write the given object to the response. <p>If any exception occurs a dispatch is made back to the app server where Spring MVC will pass the exception through its exception handling mechanism.
Write the given object to the response also using a MediaType hint. <p>If any exception occurs a dispatch is made back to the app server where Spring MVC will pass the exception through its exception handling mechanism.
Complete request processing. <p>A dispatch is made into the app server where Spring MVC completes asynchronous request processing.
Complete request processing with an error. <p>A dispatch is made into the app server where Spring MVC will pass the exception through its exception handling mechanism.
Register code to invoke when the async request times out. This method is called from a container thread when an async request times out.
Register code to invoke when the async request completes. This method is called from a container thread when an async request completed for any reason including timeout and network error. This method is useful for detecting that a {@code ResponseBodyEmitter} instance is no longer usable.
Return the map with {@code ResponseBodyEmitter} adapters. By default the map contains a single adapter {@code ResponseBodyEmitter} that simply downcasts the return value.
A single place to customize the response body of all Exception types. <p>The default implementation sets the {@link WebUtils#ERROR_EXCEPTION_ATTRIBUTE} request attribute and creates a {@link ResponseEntity} from the given body, headers, and status.
Customize the response for NoSuchRequestHandlingMethodException. <p>This method logs a warning and delegates to {@link #handleExceptionInternal}.
Customize the response for HttpRequestMethodNotSupportedException. <p>This method logs a warning, sets the "Allow" header, and delegates to {@link #handleExceptionInternal}.
Customize the response for HttpMediaTypeNotSupportedException. <p>This method sets the "Accept" header and delegates to {@link #handleExceptionInternal}.
Customize the response for HttpMediaTypeNotAcceptableException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for MissingPathVariableException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for MissingServletRequestParameterException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for ServletRequestBindingException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for ConversionNotSupportedException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for TypeMismatchException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for HttpMessageNotReadableException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for HttpMessageNotWritableException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for MethodArgumentNotValidException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for MissingServletRequestPartException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for BindException. <p>This method delegates to {@link #handleExceptionInternal}.
Customize the response for NoHandlerFoundException. <p>This method delegates to {@link #handleExceptionInternal}.
Creates an instance from the given handler and method.
Create an instance from a {@code HandlerMethod}.
Register {@link HandlerMethodReturnValueHandler} instances to use to handle return values.
Invokes the method and handles the return value through one of the configured {@link HandlerMethodReturnValueHandler}s.
Set the response status according to the {@link ResponseStatus} annotation.
Does the given request qualify as "not modified"?
Does this method have the response status instruction?
Create a nested ServletInvocableHandlerMethod subclass that returns the the given value (or raises an Exception if the value is one) rather than actually invoking the controller method. This is useful when processing async return values (e.g. Callable, DeferredResult, ListenableFuture).
return values are considered model attributes with or without a {@code @ModelAttribute} annotation
Obtain a value from the request that may be used to instantiate the model attribute through type conversion from String to the target type. <p>The default implementation looks for the attribute name to match a URI variable first and then a request parameter.
Create a model attribute from a String request value (e.g. URI template variable, request parameter) using type conversion. <p>The default implementation converts only if there a registered {@link Converter} that can perform the conversion.
Create a new instance.
Create a new SseEmitter instance.
Create a SseEmitter with a custom timeout value. <p>By default not set in which case the default configured in the MVC Java Config or the MVC namespace is used, or if that's not set, then the timeout depends on the default of the underlying server.
Send an SSE event prepared with the given builder. For example: <pre> // static import of SseEmitter SseEmitter emitter = new SseEmitter(); emitter.send(event().name("update").id("1").data(myObject)); </pre>
Configure one more simple patterns (as described in {@link PatternMatchUtils#simpleMatch}) to use in order to recognize custom redirect prefixes in addition to "redirect:". <p>Note that simply configuring this property will not make a custom redirect prefix work. There must be a custom View that recognizes the prefix as well.
Use the given handler method to handle the request. {@link #supportsInternal(HandlerMethod)} this interface, which must have returned {@code true}. or {@code null} if the request has been handled directly
Creates a new instance with the given request conditions.
Re-create a RequestMappingInfo with the given custom request condition.
Return the name for this mapping, or {@code null}.
Returns the URL patterns of this {@link RequestMappingInfo}; or instance with 0 patterns, never {@code null}.
Returns the HTTP request methods of this {@link RequestMappingInfo}; or instance with 0 request methods, never {@code null}.
Returns the "parameters" condition of this {@link RequestMappingInfo}; or instance with 0 parameter expressions, never {@code null}.
Returns the "headers" condition of this {@link RequestMappingInfo}; or instance with 0 header expressions, never {@code null}.
Returns the "consumes" condition of this {@link RequestMappingInfo}; or instance with 0 consumes expressions, never {@code null}.
Returns the "produces" condition of this {@link RequestMappingInfo}; or instance with 0 produces expressions, never {@code null}.
Returns the "custom" condition of this {@link RequestMappingInfo}; or {@code null}.
Create a new {@code RequestMappingInfo.Builder} with the given paths.
Set a custom UrlPathHelper to use for the PatternsRequestCondition. <p>By default this is not set.
Set a custom PathMatcher to use for the PatternsRequestCondition. <p>By default this is not set.
Whether to apply trailing slash matching in PatternsRequestCondition. <p>By default this is set to 'true'.
Whether to apply suffix pattern matching in PatternsRequestCondition. <p>By default this is set to 'true'.
Whether suffix pattern matching should be restricted to registered file extensions only. Setting this property also sets suffixPatternMatch=true and requires that a {@link #setContentNegotiationManager} is also configured in order to obtain the registered file extensions.
Return the file extensions to use for suffix pattern matching. If {@code registeredSuffixPatternMatch=true}, the extensions are obtained from the configured {@code contentNegotiationManager}.
Set the ContentNegotiationManager to use for the ProducesRequestCondition. <p>By default this is not set.
Set if context path and request URI should be URL-decoded. Both are returned <i>undecoded</i> by the Servlet API, in contrast to the servlet path. <p>Uses either the request encoding or the default encoding according to the Servlet spec (ISO-8859-1).
Set the UrlPathHelper to use for resolution of lookup paths. <p>Use this to override the default UrlPathHelper with a custom subclass, or to share common UrlPathHelper settings across multiple MethodNameResolvers and HandlerMappings.
Specify a common prefix for handler method names. Will be prepended to the internal path found in the URL: e.g. internal path "baz", prefix "my" -> method name "mybaz".
Return the common prefix for handler method names.
Specify a common suffix for handler method names. Will be appended to the internal path found in the URL: e.g. internal path "baz", suffix "Handler" -> method name "bazHandler".
Return the common suffix for handler method names.
Extract the handler method name from the given request URI. Delegates to {@code WebUtils.extractViewNameFromUrlPath(String)}.
Build the full handler method name based on the given method name as indicated by the URL path. <p>The default implementation simply applies prefix and suffix. This can be overridden, for example, to manipulate upper case / lower case, etc.
Constructor for {@code MultiActionController} that looks for handler methods in the present subclass.
Constructor for {@code MultiActionController} that looks for handler methods in delegate, rather than a subclass of this class. particular interface, as everything is done using reflection.
Set the delegate used by this class; the default is {@code this}, assuming that handler methods have been added by a subclass. <p>This method does not get invoked once the class is configured.
Set the method name resolver that this class should use. <p>Allows parameterization of handler method mappings.
Return the MethodNameResolver used by this class.
Set the {@link Validator Validators} for this controller. <p>The {@code Validators} must support the specified command class.
Return the Validators for this controller.
Specify a WebBindingInitializer which will apply pre-configured configuration to every DataBinder that this controller uses. <p>Allows for factoring out the entire binder configuration to separate objects, as an alternative to {@link #initBinder}.
Return the WebBindingInitializer (if any) which will apply pre-configured configuration to every DataBinder that this controller uses.
Registers all handlers methods on the delegate object.
Is the supplied method a valid handler method? <p>Does not consider {@code Controller.handleRequest} itself as handler method (to avoid potential stack overflow).
Is the supplied method a valid exception handler method?
Registers the supplied method as a request handler.
Registers a last-modified handler method for the supplied handler method if one exists.
Registers the supplied method as an exception handler.
Handle the case where no request handler method was found. <p>The default implementation logs a warning and sends an HTTP 404 error. Alternatively, a fallback view could be chosen, or the NoSuchRequestHandlingMethodException could be rethrown as-is.
Invokes the named method. <p>Uses a custom exception handler if possible; otherwise, throw an unchecked exception; wrap a checked exception or Throwable.
Create a new command object of the given class. <p>This implementation uses {@code BeanUtils.instantiateClass}, so commands need to have public no-arg constructors. Subclasses can override this implementation if desired.
Bind request parameters onto the given command bean
Create a new binder instance for the given command and request. <p>Called by {@code bind}. Can be overridden to plug in custom ServletRequestDataBinder subclasses. <p>The default implementation creates a standard ServletRequestDataBinder, and invokes {@code initBinder}. Note that {@code initBinder} will not be invoked if you override this method!
Return the command name to use for the given command object. <p>Default is "command".
Initialize the given binder instance, for example with custom editors. Called by {@code createBinder}. <p>This method allows you to register custom editors for certain fields of your command class. For instance, you will be able to transform Date objects into a String pattern and back, in order to allow your JavaBeans to have Date properties and still be able to set and display them in an HTML interface. <p>The default implementation is empty. <p>Note: the command object is not directly passed to this method, but it's available via {@link org.springframework.validation.DataBinder#getTarget()}
Determine the exception handler method for the given exception. <p>Can return {@code null} if not found.
We've encountered an exception thrown from a handler method. Invoke an appropriate exception handler method, if any.
Create a new NoSuchRequestHandlingMethodException for the given request.
Create a new NoSuchRequestHandlingMethodException.
Return the name of the offending method, if known.
Set the name of the parameter whose <i>value</i> identifies the name of the method to invoke. Default is "action". <p>Alternatively, specify parameter names where the very existence of each parameter means that a method of the same name should be invoked, via the "methodParamNames" property.
Set a String array of parameter names, where the <i>very existence of a parameter</i> in the list (with value ignored) means that a method of the same name should be invoked. This target method name may then be optionally further mapped via the {@link #logicalMappings} property, in which case it can be considered a logical name only.
Specifies a set of optional logical method name mappings. For both resolution strategies, the method name initially comes in from the view layer. If that needs to be treated as a 'logical' method name, and mapped to a 'real' method name, then a name/value pair for that purpose should be added to this Properties instance. Any method name not found in this mapping will be considered to already be the real method name. <p>Note that in the case of no match, where the {@link #defaultMethodName} property is used if available, that method name is considered to already be the real method name, and is not run through the logical mapping. method names
Set the name of the default handler method that should be used when no parameter was found in the request
Set explicit URL to method name mappings through a Properties object.
Set whether to activate or deactivate detection of annotated controllers.
Specify Java packages that should be excluded from this mapping. Any classes in such a package (or any of its subpackages) will be ignored by this HandlerMapping. <p>Default is to exclude the entire "org.springframework.web.servlet.mvc" package, including its subpackages, since none of Spring's out-of-the-box Controller implementations is a reasonable candidate for this mapping strategy. Such controllers are typically handled by a separate HandlerMapping, e.g. a {@link org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping}, alongside this ControllerClassNameHandlerMapping for application controllers.
Specify controller classes that should be excluded from this mapping. Any such classes will simply be ignored by this HandlerMapping.
Determine whether the specified controller is excluded from this mapping.
Determine whether the given bean class indicates a controller type that is supported by this mapping strategy.
Determine whether the given bean class indicates a controller type that dispatches to multiple action methods.
Set an optional prefix to prepend to generated URL mappings. <p>By default this is an empty String. If you want a prefix like "/myapp/", you can set it for all beans mapped by this mapping.
Set an optional suffix to append to generated URL mappings. <p>By default this is an empty String. If you want a suffix like ".do", you can set it for all beans mapped by this mapping.
Prepends a '/' if required and appends the URL suffix to the name.
Set whether to apply case sensitivity to the generated paths, e.g. turning the class name "BuyForm" into "buyForm". <p>Default is "false", using pure lower case paths, e.g. turning the class name "BuyForm" into "buyform".
Specify a prefix to prepend to the path generated from the controller name. <p>Default is a plain slash ("/"). A path like "/mymodule" can be specified in order to have controller path mappings prefixed with that path, e.g. "/mymodule/buyform" instead of "/buyform" for the class name "BuyForm".
Set the base package to be used for generating path mappings, including all subpackages underneath this packages as path elements. <p>Default is {@code null}, using the short class name for the generated path, with the controller's package not represented in the path. Specify a base package like "com.mycompany.myapp" to include subpackages within that base package as path elements, e.g. generating the path "/mymodule/buyform" for the class name "com.mycompany.myapp.mymodule.BuyForm". Subpackage hierarchies are represented as individual path elements, e.g. "/mymodule/mysubmodule/buyform" for the class name "com.mycompany.myapp.mymodule.mysubmodule.BuyForm".
Generate the actual URL paths for the given controller class. <p>Subclasses may choose to customize the paths that are generated by overriding this method.
Build a path prefix for the given controller bean class.
Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.
Handle the case where no request handler method was found. <p>The default implementation logs a warning, sends an HTTP 404 error, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the NoSuchRequestHandlingMethodException could be rethrown as-is. at the time of the exception (for example, if multipart resolution failed)
Handle the case where no request handler method was found for the particular HTTP request method. <p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the HttpRequestMethodNotSupportedException could be rethrown as-is. at the time of the exception (for example, if multipart resolution failed)
Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters} were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error, sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is.
Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters} were found that were acceptable for the client (expressed via the {@code Accept} header. <p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException could be rethrown as-is.
Handle the case when a declared path variable does not match any extracted URI variable. <p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the MissingPathVariableException could be rethrown as-is.
Handle the case when a required parameter is missing. <p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException could be rethrown as-is.
Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie. <p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is.
Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur. <p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is.
Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs. <p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is.
Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter} cannot read from a HTTP request. <p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is.
Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter} cannot write to a HTTP request. <p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is.
Handle the case where an argument annotated with {@code @Valid} such as an {@link RequestBody} or {@link RequestPart} argument fails validation. An HTTP 400 error is sent back to the client.
Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile}, or a {@code javax.servlet.http.Part} argument is required but is missing. An HTTP 400 error is sent back to the client.
Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method argument has binding or validation errors and is not followed by another method argument of type {@link BindingResult}. By default, an HTTP 400 error is sent back to the client.
Handle the case where no handler was found during the dispatch. <p>The default implementation sends an HTTP 404 error and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen, or the NoHandlerFoundException could be rethrown as-is. at the time of the exception (for example, if multipart resolution failed)
Invoked to send a server error. Sets the status to 500 and also sets the request attribute "javax.servlet.error.exception" to the Exception.
Class constructor.
Default constructor without a DataBinder. Attribute values are converted to String via {@link #toString()}.
Create a new AbstractController which supports HTTP methods GET, HEAD and POST by default.
Create a new AbstractController. controller should support HTTP methods GET, HEAD and POST by default, or {@code false} if it should be unrestricted
Return whether controller execution should be synchronized on the session.
Set if ";" (semicolon) content should be stripped from the request URI.
Set the UrlPathHelper to use for the resolution of lookup paths. <p>Use this to override the default UrlPathHelper with a custom subclass, or to share common UrlPathHelper settings across multiple MethodNameResolvers and HandlerMappings.
Return the UrlPathHelper to use for the resolution of lookup paths.
Set a view name for the ModelAndView to return, to be resolved by the DispatcherServlet via a ViewResolver. Will override any pre-existing view name or View.
Return the name of the view to delegate to, or {@code null} if using a View instance.
Set a View object for the ModelAndView to return. Will override any pre-existing view name or View.
Return the View object, or {@code null} if we are using a view name to be resolved by the DispatcherServlet via a ViewResolver.
Configure the HTTP status code that this controller should set on the response. <p>When a "redirect:" prefixed view name is configured, there is no need to set this property since RedirectView will do that. However this property may still be used to override the 3xx status code of {@code RedirectView}. For full control over redirecting provide a {@code RedirectView} instance. <p>If the status code is 204 and no view is configured, the request is fully handled within the controller.
Return the configured HTTP status code or {@code null}.
The property can be used to indicate the request is considered fully handled within the controller and that no view should be used for rendering. Useful in combination with {@link #setStatusCode}. <p>By default this is set to {@code false}.
Whether the request is fully handled within the controller.
Set the name of the servlet to forward to, i.e. the "servlet-name" of the target servlet in web.xml. <p>Default is the bean name of this controller.
Determine whether to use RequestDispatcher's {@code include} or {@code forward} method. <p>Performs a check whether an include URI attribute is found in the request, indicating an include request, and whether the response has already been committed. In both cases, an include will be performed, as a forward is not possible anymore.
Set the class of the servlet to wrap. Needs to implement {@code javax.servlet.Servlet}.
Set the name of the servlet to wrap. Default is the bean name of this controller.
Specify init parameters for the servlet to wrap, as name-value pairs.
Set the prefix to prepend to the request URL filename to build a view name.
Return the prefix to prepend to the request URL filename.
Set the suffix to append to the request URL filename to build a view name.
Return the suffix to append to the request URL filename.
Extract a URL path from the given request, suitable for view name extraction.
Returns view name based on the URL filename, with prefix/suffix applied when appropriate.
Extract the URL filename from the given request URI.
Build the full view name based on the given view name as indicated by the URL path. <p>The default implementation simply applies prefix and suffix. This can be overridden, for example, to manipulate upper case / lower case, etc.
Set if URL lookup should always use full path within current servlet context. Else, the path within the current servlet mapping is used if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml). Default is "false". <p>Only relevant for the "cacheMappings" setting.
Set if context path and request URI should be URL-decoded. Both are returned <i>undecoded</i> by the Servlet API, in contrast to the servlet path. <p>Uses either the request encoding or the default encoding according to the Servlet spec (ISO-8859-1). <p>Only relevant for the "cacheMappings" setting.
Set the UrlPathHelper to use for resolution of lookup paths. <p>Use this to override the default UrlPathHelper with a custom subclass, or to share common UrlPathHelper settings across multiple HandlerMappings and MethodNameResolvers. <p>Only relevant for the "cacheMappings" setting.
Map specific URL paths to specific cache seconds. <p>Overrides the default cache seconds setting of this interceptor. Can specify "-1" to exclude a URL path from default caching. <p>Supports direct matches, e.g. a registered "/test" matches "/test", and a various Ant-style pattern matches, e.g. a registered "/t*" matches both "/test" and "/team". For details, see the AntPathMatcher javadoc. cache seconds (as values, need to be integer-parsable)
Map specific URL paths to a specific {@link org.springframework.http.CacheControl}. <p>Overrides the default cache seconds setting of this interceptor. Can specify a empty {@link org.springframework.http.CacheControl} instance to exclude a URL path from default caching. <p>Supports direct matches, e.g. a registered "/test" matches "/test", and a various Ant-style pattern matches, e.g. a registered "/t*" matches both "/test" and "/team". For details, see the AntPathMatcher javadoc.
Set the PathMatcher implementation to use for matching URL paths against registered URL patterns, for determining cache mappings. Default is AntPathMatcher.
Look up a {@link org.springframework.http.CacheControl} instance for the given URL path. <p>Supports direct matches, e.g. a registered "/test" matches "/test", and various Ant-style pattern matches, e.g. a registered "/t*" matches both "/test" and "/team". For details, see the AntPathMatcher class.
Look up a cacheSeconds integer value for the given URL path. <p>Supports direct matches, e.g. a registered "/test" matches "/test", and various Ant-style pattern matches, e.g. a registered "/t*" matches both "/test" and "/team". For details, see the AntPathMatcher class.
Create an AppCacheResourceTransformer that transforms files with extension ".manifest".
Create an AppCacheResourceTransformer that transforms files with the extension given as a parameter.
Transforms a line in a section of the manifest. <p>The actual transformation depends on the chosen transformation strategy for the current manifest section (CACHE, NETWORK, FALLBACK, etc).
Return the configured {@code Cache}.
Set the name of the default Servlet to be forwarded to for static resource requests.
Create a new FixedVersionStrategy with the given version string.
By default when a Resource is found, the path of the resolved resource is compared to ensure it's under the input location where it was found. However sometimes that may not be the case, e.g. when {@link org.springframework.web.servlet.resource.CssLinkResourceTransformer} resolves public URLs of links it contains, the CSS file is the location and the resources being resolved are css files, images, fonts and others located in adjacent or parent directories. <p>This property allows configuring a complete list of locations under which resources must be so that if a resource is not under the location relative to which it was found, this list may be checked as well. <p>By default {@link ResourceHttpRequestHandler} initializes this property to match its list of locations.
Find the resource under the given location. <p>The default implementation checks if there is a readable {@code Resource} for the given path relative to the location.
Perform additional checks on a resolved resource beyond checking whether the resources exists and is readable. The default implementation also verifies the resource is either under the location relative to which it was found or is under one of the {@link #setAllowedLocations allowed locations}.
Set a {@code List} of {@code Resource} paths to use as sources for serving static resources.
Configure the list of {@link ResourceResolver}s to use. <p>By default {@link PathResourceResolver} is configured. If using this property, it is recommended to add {@link PathResourceResolver} as the last resolver.
Return the list of configured resource resolvers.
Configure the list of {@link ResourceTransformer}s to use. <p>By default no transformers are configured for use.
Return the list of configured resource transformers.
Configure the {@link ResourceHttpMessageConverter} to use. <p>By default a {@link ResourceHttpMessageConverter} will be configured.
Configure a {@code ContentNegotiationManager} to determine the media types for resources being served. If the manager contains a path extension strategy it will be used to look up the file extension of resources being served via {@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource getMediaTypeForResource}. If that fails the check is then expanded to use any configured content negotiation strategy against the request. <p>By default a {@link ContentNegotiationManagerFactoryBean} with default settings is used to create the manager. See the Javadoc of {@code ContentNegotiationManagerFactoryBean} for details
Specify the CORS configuration for resources served by this handler. <p>By default this is not set in which allows cross-origin requests.
Look for a {@code PathResourceResolver} among the configured resource resolvers and set its {@code allowedLocations} property (if empty) to match the {@link #setLocations locations} configured on this class.
Create the {@code ContentNegotiationManager} to use to resolve the {@link MediaType} for requests. This implementation delegates to {@link ContentNegotiationManagerFactoryBean} with default settings.
Process the given resource path to be used. <p>The default implementation replaces any combination of leading '/' and control characters (00-1F and 7F) with a single "/" or "". For example {@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.
Identifies invalid resource paths. By default rejects: <ul> <li>Paths that contain "WEB-INF" or "META-INF" <li>Paths that contain "../" after a call to {@link org.springframework.util.StringUtils#cleanPath}. <li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl valid URL} or would represent one after the leading slash is removed. </ul> <p><strong>Note:</strong> this method assumes that leading, duplicate '/' or control characters (e.g. white space) have been trimmed so that the path starts predictably with a single '/' or does not have one.
Set headers on the given servlet response. Called for GET requests as well as HEAD requests.
Configure a {@link ResourceUrlProvider} to use when resolving the public URL of links in a transformed resource (e.g. import links in a CSS file). This is required only for links expressed as full paths, i.e. including context and servlet path, and not for relative links. <p>By default this property is not set. In that case if a {@code ResourceUrlProvider} is needed an attempt is made to find the {@code ResourceUrlProvider} exposed through the {@link org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor ResourceUrlProviderExposingInterceptor} (configured by default in the MVC Java config and XML namespace). Therefore explicitly configuring this property should not be needed in most cases.
A transformer can use this method when a resource being transformed contains links to other resources. Such links need to be replaced with the public facing link as determined by the resource resolver chain (e.g. the public URL may have a version inserted).
Configure a {@code UrlPathHelper} to use in {@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)} in order to derive the lookup path for a target request URL path.
Return the configured {@code UrlPathHelper}.
Configure a {@code PathMatcher} to use when comparing target lookup path against resource mappings.
Return the configured {@code PathMatcher}.
Manually configure the resource mappings. <p><strong>Note:</strong> by default resource mappings are auto-detected from the Spring {@code ApplicationContext}. However if this property is used, the auto-detection is turned off.
Return the resource mappings, either manually configured or auto-detected when the Spring {@code ApplicationContext} is refreshed.
Return {@code false} if resource mappings were manually configured, {@code true} otherwise.
A variation on {@link #getForLookupPath(String)} that accepts a full request URL path (i.e. including context and servlet path) and returns the full request URL path to expose for public use.
Compare the given path against configured resource handler mappings and if a match is found use the {@code ResourceResolver} chain of the matched {@code ResourceHttpRequestHandler} to resolve the URL path to expose for public use. <p>It is expected that the given path is what Spring MVC would use for request mapping purposes, i.e. excluding context and servlet path portions. <p>If several handler mappings match, the handler used will be the one configured with the most specific pattern.
Set a Map with URL paths as keys and {@code VersionStrategy} as values. <p>Supports direct URL matches and Ant-style pattern matches. For syntax details, see the {@link org.springframework.util.AntPathMatcher} javadoc.
Return the map with version strategies keyed by path pattern.
Insert a content-based version in resource URLs that match the given path patterns. The version is computed from the content of the file, e.g. {@code "css/main-e36d2e05253c6c7085a91522ce43a0b4.css"}. This is a good default strategy to use except when it cannot be, for example when using JavaScript module loaders, use {@link #addFixedVersionStrategy} instead for serving JavaScript files.
Insert a fixed, prefix-based version in resource URLs that match the given path patterns, for example: <code>"{version}/js/main.js"</code>. This is useful (vs. content-based versions) when using JavaScript module loaders. <p>The version may be a random number, the current date, or a value fetched from a git commit sha, a property file, or environment variable and set with SpEL expressions in the configuration (e.g. see {@code @Value} in Java config). <p>If not done already, variants of the given {@code pathPatterns}, prefixed with the {@code version} will be also configured. For example, adding a {@code "/js/**"} path pattern will also cofigure automatically a {@code "/v1.0.0/js/**"} with {@code "v1.0.0"} the {@code version} String given as an argument.
Register a custom VersionStrategy to apply to resource URLs that match the given path patterns.
Find a {@code VersionStrategy} for the request path of the requested resource.
Register a {@link DispatcherServlet} against the given servlet context. <p>This method will create a {@code DispatcherServlet} with the name returned by {@link #getServletName()}, initializing it with the application context returned from {@link #createServletApplicationContext()}, and mapping it to the patterns returned from {@link #getServletMappings()}. <p>Further customization can be achieved by overriding {@link #customizeRegistration(ServletRegistration.Dynamic)} or {@link #createDispatcherServlet(WebApplicationContext)}.
Return the name under which the {@link DispatcherServlet} will be registered. Defaults to {@link #DEFAULT_SERVLET_NAME}.
Create a {@link DispatcherServlet} (or other kind of {@link FrameworkServlet}-derived dispatcher) with the specified {@link WebApplicationContext}. <p>Note: This allows for any {@link FrameworkServlet} subclass as of 4.2.3. Previously, it insisted on returning a {@link DispatcherServlet} or subclass thereof.
Specify application context initializers to be applied to the servlet-specific application context that the {@code DispatcherServlet} is being created with.
Specify filters to add and map to the {@code DispatcherServlet}.
Add the given filter to the ServletContext and map it to the {@code DispatcherServlet} as follows: <ul> <li>a default filter name is chosen based on its concrete type <li>the {@code asyncSupported} flag is set depending on the return value of {@link #isAsyncSupported() asyncSupported} <li>a filter mapping is created with dispatcher types {@code REQUEST}, {@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending on the return value of {@link #isAsyncSupported() asyncSupported} </ul> <p>If the above defaults are not suitable or insufficient, override this method and register filters directly with the {@code ServletContext}.
A single place to control the {@code asyncSupported} flag for the {@code DispatcherServlet} and all filters added via {@link #getServletFilters()}. <p>The default value is "true".
Set the amount of time in seconds after a {@link FlashMap} is saved (at request completion) and before it expires. <p>The default value is 180 seconds.
Return the amount of time in seconds before a FlashMap expires.
Set the UrlPathHelper to use to match FlashMap instances to requests.
Return the UrlPathHelper implementation to use.
Return a list of expired FlashMap instances contained in the given list.
Return a FlashMap contained in the given list that matches the request.
Whether the given FlashMap matches the current request. Uses the expected request path and query parameters saved in the FlashMap.
Obtain a mutex for modifying the FlashMap List as handled by {@link #retrieveFlashMaps} and {@link #updateFlashMaps}, <p>The default implementation returns a shared static mutex. Subclasses are encouraged to return a more specific mutex, or {@code null} to indicate that no synchronization is necessary.
Create a new BindStatus instance, representing a field or object status. will be resolved (e.g. "customer.address.street")
Extract the error codes from the ObjectError list.
Extract the error messages from the ObjectError list.
Return the bean and property path for which values and errors will be resolved (e.g. "customer.address.street").
Return a bind expression that can be used in HTML forms as input name for the respective field, or {@code null} if not field-specific. <p>Returns a bind path appropriate for resubmission, e.g. "address.street". Note that the complete bind path as required by the bind tag is "customer.address.street", if bound to a "customer" bean.
Return the current value of the field, i.e. either the property value or a rejected update, or {@code null} if not field-specific. <p>This value will be an HTML-escaped String if the original value already was a String.
Get the '{@code Class}' type of the field. Favor this instead of '{@code getValue().getClass()}' since '{@code getValue()}' may return '{@code null}'.
Return the actual value of the field, i.e. the raw property value, or {@code null} if not available.
Return a suitable display value for the field, i.e. the stringified value if not null, and an empty string in case of a null value. <p>This value will be an HTML-escaped String if the original value was non-null: the {@code toString} result of the original value will get HTML-escaped.
Return if this status represents a field or object error.
Return the error codes for the field or object, if any. Returns an empty array instead of null if none.
Return the first error codes for the field or object, if any.
Return the resolved error messages for the field or object, if any. Returns an empty array instead of null if none.
Return the first error message for the field or object, if any.
Return an error message string, concatenating all messages separated by the given delimiter.
Return the Errors instance (typically a BindingResult) that this bind status is currently associated with.
Return the PropertyEditor for the property that this bind status is currently bound to.
Find a PropertyEditor for the given value class, associated with the property that this bound status is currently bound to.
Create a new JspAwareRequestContext for the given page context, using the request attributes for Errors retrieval.
Create a new JspAwareRequestContext for the given page context, using the given model attributes for Errors retrieval. (can be {@code null}, using the request attributes for Errors retrieval)
Initialize this context with the given page context, using the given model attributes for Errors retrieval. (can be {@code null}, using the request attributes for Errors retrieval)
Return the underlying PageContext. Only intended for cooperating classes in this package.
Checks JSTL's "javax.servlet.jsp.jstl.fmt.localizationContext" context-param and creates a corresponding child message source, with the provided Spring-defined MessageSource as parent. (to check JSTL-related context-params in {@code web.xml}) the ApplicationContext of the current DispatcherServlet JSTL-defined bundle, then the Spring-defined MessageSource
Exposes JSTL-specific request attributes specifying locale and resource bundle for JSTL's formatting and message tags, using Spring's locale and MessageSource. typically the current ApplicationContext (may be {@code null})
Exposes JSTL-specific request attributes specifying locale and resource bundle for JSTL's formatting and message tags, using Spring's locale and MessageSource. including the ApplicationContext to expose as MessageSource
Create a new RequestContext for the given request, using the request attributes for Errors retrieval. <p>This only works with InternalResourceViews, as Errors instances are part of the model and not normally exposed as request attributes. It will typically be used within JSPs or custom tags. <p><b>Will only work within a DispatcherServlet request.</b> Pass in a ServletContext to be able to fallback to the root WebApplicationContext.
Create a new RequestContext for the given request, using the request attributes for Errors retrieval. <p>This only works with InternalResourceViews, as Errors instances are part of the model and not normally exposed as request attributes. It will typically be used within JSPs or custom tags. <p>If a ServletContext is specified, the RequestContext will also work with the root WebApplicationContext (outside a DispatcherServlet). necessary for fallback to root WebApplicationContext)
Create a new RequestContext for the given request, using the given model attributes for Errors retrieval. <p>This works with all View implementations. It will typically be used by View implementations. <p><b>Will only work within a DispatcherServlet request.</b> Pass in a ServletContext to be able to fallback to the root WebApplicationContext. using the request attributes for Errors retrieval)
Create a new RequestContext for the given request, using the given model attributes for Errors retrieval. <p>This works with all View implementations. It will typically be used by View implementations. <p>If a ServletContext is specified, the RequestContext will also work with a root WebApplicationContext (outside a DispatcherServlet). fallback to root WebApplicationContext) for Errors retrieval)
Initialize this context with the given request, using the given model attributes for Errors retrieval. <p>Delegates to {@code getFallbackLocale} and {@code getFallbackTheme} for determining the fallback locale and theme, respectively, if no LocaleResolver and/or ThemeResolver can be found in the request. fallback to root WebApplicationContext) for Errors retrieval)
Determine the fallback locale for this context. <p>The default implementation checks for a JSTL locale attribute in request, session or application scope; if not found, returns the {@code HttpServletRequest.getLocale()}.
Determine the fallback time zone for this context. <p>The default implementation checks for a JSTL time zone attribute in request, session or application scope; returns {@code null} if not found.
Determine the fallback theme for this context. <p>The default implementation returns the default theme (with name "theme").
Return the underlying HttpServletRequest. Only intended for cooperating classes in this package.
Return the underlying ServletContext. Only intended for cooperating classes in this package.
Return the current WebApplicationContext.
Return the current WebApplicationContext as MessageSource.
Return the model Map that this RequestContext encapsulates, if any.
Return the current Locale (falling back to the request locale; never {@code null}). <p>Typically coming from a DispatcherServlet's {@link LocaleResolver}. Also includes a fallback check for JSTL's Locale attribute.
Return the current TimeZone (or {@code null} if none derivable from the request). <p>Typically coming from a DispatcherServlet's {@link LocaleContextResolver}. Also includes a fallback check for JSTL's TimeZone attribute.
Change the current locale to the specified one, storing the new locale through the configured {@link LocaleResolver}.
Change the current locale to the specified locale and time zone context, storing the new locale context through the configured {@link LocaleResolver}.
Return the current theme (never {@code null}). <p>Resolved lazily for more efficiency when theme support is not being used.
Change the current theme to the specified one, storing the new theme name through the configured {@link ThemeResolver}.
Change the current theme to the specified theme by name, storing the new theme name through the configured {@link ThemeResolver}.
(De)activate default HTML escaping for messages and errors, for the scope of this RequestContext. <p>The default is the application-wide setting (the "defaultHtmlEscape" context-param in web.xml).
Is default HTML escaping active? Falls back to {@code false} in case of no explicit default given.
Return the default HTML escape setting, differentiating between no default specified and an explicit value.
Is HTML escaping using the response encoding by default? If enabled, only XML markup significant characters will be escaped with UTF-* encodings. <p>Falls back to {@code true} in case of no explicit default given, as of Spring 4.2.
Return the default setting about use of response encoding for HTML escape setting, differentiating between no default specified and an explicit value.
Set the UrlPathHelper to use for context path and request URI decoding. Can be used to pass a shared UrlPathHelper instance in. <p>A default UrlPathHelper is always available.
Return the UrlPathHelper used for context path and request URI decoding. Can be used to configure the current UrlPathHelper. <p>A default UrlPathHelper is always available.
Return the RequestDataValueProcessor instance to use obtained from the WebApplicationContext under the name {@code "requestDataValueProcessor"}. Or {@code null} if no matching bean was found.
Return the context path of the original request, that is, the path that indicates the current web application. This is useful for building links to other resources within the application. <p>Delegates to the UrlPathHelper for decoding.
Return a context-aware URl for the given relative URL.
Return a context-aware URl for the given relative URL with placeholders (named keys with braces {@code {}}). For example, send in a relative URL {@code foo/{bar}?spam={spam}} and a parameter map {@code {bar=baz,spam=nuts}} and the result will be {@code [contextpath]/foo/baz?spam=nuts}.
Return the path to URL mappings within the current servlet including the context path and the servlet path of the original request. This is useful for building links to other resources within the application where a servlet mapping of the style {@code "/main/*"} is used. <p>Delegates to the UrlPathHelper to determine the context and servlet path.
Return the request URI of the original request, that is, the invoked URL without parameters. This is particularly useful as HTML form action target, possibly in combination with the original query string. <p>Delegates to the UrlPathHelper for decoding.
Return the query string of the current request, that is, the part after the request path. This is particularly useful for building an HTML form action target in combination with the original request URI. <p>Delegates to the UrlPathHelper for decoding.
Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
Retrieve the message for the given code.
Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance), using the "defaultHtmlEscape" setting.
Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance).
Retrieve the theme message for the given code. <p>Note that theme messages are never HTML-escaped, as they typically denote theme-specific resource paths and not client-visible messages.
Retrieve the given MessageSourceResolvable in the current theme. <p>Note that theme messages are never HTML-escaped, as they typically denote theme-specific resource paths and not client-visible messages.
Retrieve the Errors instance for the given bind object, using the "defaultHtmlEscape" setting.
Retrieve the Errors instance for the given bind object.
Retrieve the model object for the given model name, either from the model or from the request attributes.
Create a BindStatus for the given bind object, using the "defaultHtmlEscape" setting.
Look for the WebApplicationContext associated with the DispatcherServlet that has initiated request processing, and for the global context if none was found associated with the current request. The global context will be found via the ServletContext or via ContextLoader's current context. <p>NOTE: This variant remains compatible with Servlet 2.5, explicitly checking a given ServletContext instead of deriving it from the request. if no request-specific context has been found, or {@code null} if none
Look for the WebApplicationContext associated with the DispatcherServlet that has initiated request processing, and for the global context if none was found associated with the current request. The global context will be found via the ServletContext or via ContextLoader's current context. <p>NOTE: This variant requires Servlet 3.0+ and is generally recommended for forward-looking custom user code. if no request-specific context has been found, or {@code null} if none
Return the LocaleResolver that has been bound to the request by the DispatcherServlet.
Retrieve the current locale from the given request, using the LocaleResolver bound to the request by the DispatcherServlet (if available), falling back to the request's accept-header Locale. <p>This method serves as a straightforward alternative to the standard Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method, falling back to the latter if no more specific locale has been found. <p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()} which will normally be populated with the same Locale. LocaleResolver or from the plain request itself
Retrieve the current time zone from the given request, using the TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet (if available), falling back to the system's default time zone. <p>Note: This method returns {@code null} if no specific time zone can be resolved for the given request. This is in contrast to {@link #getLocale} where there is always the request's accept-header locale to fall back to. <p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()} which will normally be populated with the same TimeZone: That method only differs in terms of its fallback to the system time zone if the LocaleResolver hasn't provided provided a specific time zone (instead of this method's {@code null}). TimeZoneAwareLocaleResolver or {@code null} if none associated
Return the ThemeResolver that has been bound to the request by the DispatcherServlet.
Return the ThemeSource that has been bound to the request by the DispatcherServlet.
Retrieves the current theme from the given request, using the ThemeResolver and ThemeSource bound to the request by the DispatcherServlet.
Return the "output" FlashMap with attributes to save for a subsequent request.
Return the FlashMapManager instance to save flash attributes with before a redirect.
Create a deep copy of the given ServletUriComponentsBuilder.
Prepare a builder from the host, port, scheme, and context path of the given HttpServletRequest.
Prepare a builder from the host, port, scheme, context path, and servlet mapping of the given HttpServletRequest. <p>If the servlet is mapped by name, e.g. {@code "/main/*"}, the path will end with "/main". If the servlet is mapped otherwise, e.g. {@code "/"} or {@code "*.do"}, the result will be the same as if calling {@link #fromContextPath(HttpServletRequest)}.
Prepare a builder from the host, port, scheme, and path (but not the query) of the HttpServletRequest.
Prepare a builder by copying the scheme, host, port, path, and query string of an HttpServletRequest.
Initialize a builder with a scheme, host,and port (but not path and query).
Same as {@link #fromContextPath(HttpServletRequest)} except the request is obtained through {@link RequestContextHolder}.
Same as {@link #fromServletMapping(HttpServletRequest)} except the request is obtained through {@link RequestContextHolder}.
Same as {@link #fromRequestUri(HttpServletRequest)} except the request is obtained through {@link RequestContextHolder}.
Same as {@link #fromRequest(HttpServletRequest)} except the request is obtained through {@link RequestContextHolder}.
Obtain current request through {@link RequestContextHolder}.
Remove any path extension from the {@link HttpServletRequest#getRequestURI() requestURI}. This method must be invoked before any calls to {@link #path(String)} or {@link #pathSegment(String...)}. <pre> ServletUriComponentsBuilder builder = ServletUriComponentsBuilder.fromRequestUri(this.request); String ext = builder.removePathExtension(); String uri = builder.path("/pages/1.{ext}").buildAndExpand(ext).toUriString(); </pre>
Create a new WebContentGenerator which supports HTTP methods GET, HEAD and POST by default.
Create a new WebContentGenerator. generator should support HTTP methods GET, HEAD and POST by default, or {@code false} if it should be unrestricted
Create a new WebContentGenerator.
Set the HTTP methods that this content generator should support. <p>Default is GET, HEAD and POST for simple form controller types; unrestricted for general controllers and interceptors.
Return the HTTP methods that this content generator supports.
Return the "Allow" header value to use in response to an HTTP OPTIONS request based on the configured {@link #setSupportedMethods supported methods} also automatically adding "OPTIONS" to the list even if not present as a supported method. This means sub-classes don't have to explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS requests are handled before making a call to {@link #checkRequest(HttpServletRequest)}.
Set whether a session should be required to handle requests.
Return whether a session is required to handle requests.
Set the {@link org.springframework.http.CacheControl} instance to build the Cache-Control HTTP response header.
Get the {@link org.springframework.http.CacheControl} instance that builds the Cache-Control HTTP response header.
Cache content for the given number of seconds, by writing cache-related HTTP headers to the response: <ul> <li>seconds == -1 (default value): no generation cache-related headers</li> <li>seconds == 0: "Cache-Control: no-store" will prevent caching</li> <li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li> </ul> <p>For more specific needs, a custom {@link org.springframework.http.CacheControl} should be used.
Return the number of seconds that content is cached.
Configure one or more request header names (e.g. "Accept-Language") to add to the "Vary" response header to inform clients that the response is subject to content negotiation and variances based on the value of the given request headers. The configured request header names are added only if not already present in the response "Vary" header. <p><strong>Note:</strong> This property is only supported on Servlet 3.0+ which allows checking existing response header values.
Return the configured request header names for the "Vary" response header.
Check the given request for supported methods and a required session, if any.
Prepare the given response according to the settings of this generator. Applies the number of cache seconds specified for this generator.
Set the HTTP Cache-Control header according to the given settings.
Render the '{@code input(checkbox)}' with the supplied value, marking the '{@code input}' element as 'checked' if the supplied value matches the bound value.
Determines whether the supplied value matched the selected value through delegating to {@link SelectedValueComparator#isSelected}.
Render the '{@code input(checkbox)}' with the supplied value, marking the '{@code input}' element as 'checked' if the supplied Boolean is {@code true}.
Set the property path from the {@link FormTag#setModelAttribute form object}. May be a runtime expression.
Get the {@link #evaluate resolved} property path for the {@link FormTag#setModelAttribute form object}.
Writes the default set of attributes to the supplied {@link TagWriter}. Further abstract sub-classes should override this method to add in any additional default attributes but <strong>must</strong> remember to call the {@code super} method. <p>Concrete sub-classes should call this method when/if they want to render default attributes.
Determine the '{@code id}' attribute value for this tag, autogenerating one if none specified.
Autogenerate the '{@code id}' attribute value for this tag. <p>The default implementation simply delegates to {@link #getName()}, deleting invalid characters (such as "[" or "]").
Get the value for the HTML '{@code name}' attribute. <p>The default implementation simply delegates to {@link #getPropertyPath()} to use the property path as the name. For the most part this is desirable as it links with the server-side expectation for data binding. However, some subclasses may wish to change the value of the '{@code name}' attribute without changing the bind path.
Get the {@link BindStatus} for this tag.
Get the value of the nested path that may have been exposed by the {@link NestedPathTag}.
Build the property path for this tag, including the nested path but <i>not</i> prefixed with the name of the form attribute.
Get the bound value.
Get the {@link PropertyEditor}, if any, in use for value bound to this tag.
Get a display String for the given value, converted by a PropertyEditor that the BindStatus may have registered for the value's Class.
Process the given form field through a {@link RequestDataValueProcessor} instance if one is configured or otherwise returns the same value.
Evaluate the supplied value for the supplied attribute name. <p>The default implementation simply returns the given value as-is.
Optionally writes the supplied value under the supplied attribute name into the supplied {@link TagWriter}. In this case, the supplied value is {@link #evaluate evaluated} first and then the {@link ObjectUtils#getDisplayString String representation} is written as the attribute value. If the resultant {@code String} representation is {@code null} or empty, no attribute is written.
Create the {@link TagWriter} which all output will be written to. By default, the {@link TagWriter} writes its output to the {@link javax.servlet.jsp.JspWriter} for the current {@link javax.servlet.jsp.PageContext}. Subclasses may choose to change the {@link java.io.Writer} to which output is actually written.
Get the display value of the supplied {@code Object}, HTML escaped as required. This version is <strong>not</strong> {@link PropertyEditor}-aware.
Get the display value of the supplied {@code Object}, HTML escaped as required. If the supplied value is not a {@link String} and the supplied {@link PropertyEditor} is not null then the {@link PropertyEditor} is used to obtain the display value.
Render the tag contents based on the supplied {@link BodyContent}. <p>The default implementation simply {@link #flushBufferedBodyContent flushes} the {@link BodyContent} directly to the output. Subclasses may choose to override this to add additional content to the output.
Should rendering of this tag proceed at all. Returns '{@code true}' by default causing rendering to occur always, Subclasses can override this if they provide conditional rendering.
The user customised the output of the error messages - flush the buffered content into the main {@link javax.servlet.jsp.JspWriter}.
Set the value of the '{@code class}' attribute. May be a runtime expression.
Get the value of the '{@code class}' attribute. May be a runtime expression.
The CSS class to use when the field bound to a particular tag has errors. May be a runtime expression.
The CSS class to use when the field bound to a particular tag has errors. May be a runtime expression.
Set the value of the '{@code style}' attribute. May be a runtime expression.
Get the value of the '{@code style}' attribute. May be a runtime expression.
Set the value of the '{@code lang}' attribute. May be a runtime expression.
Get the value of the '{@code lang}' attribute. May be a runtime expression.
Set the value of the '{@code title}' attribute. May be a runtime expression.
Get the value of the '{@code title}' attribute. May be a runtime expression.
Set the value of the '{@code dir}' attribute. May be a runtime expression.
Get the value of the '{@code dir}' attribute. May be a runtime expression.
Set the value of the '{@code tabindex}' attribute. May be a runtime expression.
Get the value of the '{@code tabindex}' attribute. May be a runtime expression.
Set the value of the '{@code onclick}' attribute. May be a runtime expression.
Get the value of the '{@code onclick}' attribute. May be a runtime expression.
Set the value of the '{@code ondblclick}' attribute. May be a runtime expression.
Get the value of the '{@code ondblclick}' attribute. May be a runtime expression.
Set the value of the '{@code onmousedown}' attribute. May be a runtime expression.
Get the value of the '{@code onmousedown}' attribute. May be a runtime expression.
Set the value of the '{@code onmouseup}' attribute. May be a runtime expression.
Get the value of the '{@code onmouseup}' attribute. May be a runtime expression.
Set the value of the '{@code onmouseover}' attribute. May be a runtime expression.
Get the value of the '{@code onmouseover}' attribute. May be a runtime expression.
Set the value of the '{@code onmousemove}' attribute. May be a runtime expression.
Get the value of the '{@code onmousemove}' attribute. May be a runtime expression.
Set the value of the '{@code onmouseout}' attribute. May be a runtime expression.
Get the value of the '{@code onmouseout}' attribute. May be a runtime expression.
Set the value of the '{@code onkeypress}' attribute. May be a runtime expression.
Get the value of the '{@code onkeypress}' attribute. May be a runtime expression.
Set the value of the '{@code onkeyup}' attribute. May be a runtime expression.
Get the value of the '{@code onkeyup}' attribute. May be a runtime expression.
Set the value of the '{@code onkeydown}' attribute. May be a runtime expression.
Get the value of the '{@code onkeydown}' attribute. May be a runtime expression.
Get the map of dynamic attributes.
Whether the given name-value pair is a valid dynamic attribute.
Writes the optional attributes configured via this base class to the supplied {@link TagWriter}. The set of optional attributes that will be rendered includes any non-standard dynamic attributes. Called by {@link #writeDefaultAttributes(TagWriter)}.
Gets the appropriate CSS class to use based on the state of the current {@link org.springframework.web.servlet.support.BindStatus} object.
Set the value of the '{@code onfocus}' attribute. May be a runtime expression.
Get the value of the '{@code onfocus}' attribute.
Set the value of the '{@code onblur}' attribute. May be a runtime expression.
Get the value of the '{@code onblur}' attribute.
Set the value of the '{@code onchange}' attribute. May be a runtime expression.
Get the value of the '{@code onchange}' attribute.
Set the value of the '{@code accesskey}' attribute. May be a runtime expression.
Get the value of the '{@code accesskey}' attribute.
Set the value of the '{@code disabled}' attribute.
Get the value of the '{@code disabled}' attribute.
Sets the value of the '{@code readonly}' attribute.
Gets the value of the '{@code readonly}' attribute.
Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects used to generate the '{@code input type="checkbox/radio"}' tags. <p>Typically a runtime expression.
Get the {@link java.util.Collection}, {@link java.util.Map} or array of objects used to generate the '{@code input type="checkbox/radio"}' tags.
Set the name of the property mapped to the '{@code value}' attribute of the '{@code input type="checkbox/radio"}' tag. <p>May be a runtime expression.
Get the name of the property mapped to the '{@code value}' attribute of the '{@code input type="checkbox/radio"}' tag.
Set the value to be displayed as part of the '{@code input type="checkbox/radio"}' tag. <p>May be a runtime expression.
Get the value to be displayed as part of the '{@code input type="checkbox/radio"}' tag.
Set the delimiter to be used between each '{@code input type="checkbox/radio"}' tag. <p>By default, there is <em>no</em> delimiter.
Return the delimiter to be used between each '{@code input type="radio"}' tag.
Set the HTML element used to enclose the '{@code input type="checkbox/radio"}' tag. <p>Defaults to an HTML '{@code <span/>}' tag.
Get the HTML element used to enclose '{@code input type="checkbox/radio"}' tag.
Set the value of the '{@code value}' attribute. May be a runtime expression.
Get the value of the '{@code value}' attribute.
Set the value of the '{@code label}' attribute. May be a runtime expression.
Get the value of the '{@code label}' attribute.
Get the value of the '{@code name}' attribute.
Set the value of the '{@code value}' attribute.
Writes the '{@code value}' attribute to the supplied {@link TagWriter}. Subclasses may choose to override this implementation to control exactly when the value is written.
Return the default value.
Get the value of the '{@code type}' attribute. Subclasses can override this to change the type of '{@code input}' element rendered. Default value is '{@code submit}'.
Set the HTML element must be used to render the error messages. <p>Defaults to an HTML '{@code <span/>}' tag.
Get the HTML element must be used to render the error messages.
Set the delimiter to be used between error messages. <p>Defaults to an HTML '{@code <br/>}' tag.
Return the delimiter to be used between error messages.
Set the name of the form attribute in the model. <p>May be a runtime expression.
Get the name of the form attribute in the model.
Set the name of the form attribute in the model. <p>May be a runtime expression.
Get the name of the form attribute in the model.
Set the value of the '{@code name}' attribute. <p>May be a runtime expression. <p>Name is not a valid attribute for form on XHTML 1.0. However, it is sometimes needed for backward compatibility.
Set the value of the '{@code action}' attribute. <p>May be a runtime expression.
Get the value of the '{@code action}' attribute.
Set the value of the '{@code action}' attribute through a value that is to be appended to the current servlet path. <p>May be a runtime expression.
Get the servlet-relative value of the '{@code action}' attribute.
Set the value of the '{@code method}' attribute. <p>May be a runtime expression.
Get the value of the '{@code method}' attribute.
Set the value of the '{@code target}' attribute. <p>May be a runtime expression.
Get the value of the '{@code target}' attribute.
Set the value of the '{@code enctype}' attribute. <p>May be a runtime expression.
Get the value of the '{@code enctype}' attribute.
Set the value of the '{@code acceptCharset}' attribute. <p>May be a runtime expression.
Get the value of the '{@code acceptCharset}' attribute.
Set the value of the '{@code onsubmit}' attribute. <p>May be a runtime expression.
Get the value of the '{@code onsubmit}' attribute.
Set the value of the '{@code onreset}' attribute. <p>May be a runtime expression.
Get the value of the '{@code onreset}' attribute.
Set the value of the '{@code autocomplete}' attribute. May be a runtime expression.
Get the value of the '{@code autocomplete}' attribute.
Set the name of the request param for non-browser supported HTTP methods.
Determine if the HTTP method is supported by browsers (i.e. GET or POST).
{@link #evaluate Resolves} and returns the name of the form object.
Resolve the value of the '{@code action}' attribute. <p>If the user configured an '{@code action}' value then the result of evaluating this value is used. If the user configured an '{@code servletRelativeAction}' value then the value is prepended with the context and servlet paths, and the result is used. Otherwise, the {@link org.springframework.web.servlet.support.RequestContext#getRequestUri() originating URI} is used.
Process the action through a {@link RequestDataValueProcessor} instance if one is configured or otherwise returns the action unmodified.
Writes the given values as hidden fields.
Set the value of the '{@code disabled}' attribute. May be a runtime expression.
Set the value of the '{@code size}' attribute. May be a runtime expression.
Get the value of the '{@code size}' attribute.
Set the value of the '{@code maxlength}' attribute. May be a runtime expression.
Get the value of the '{@code maxlength}' attribute.
Set the value of the '{@code alt}' attribute. May be a runtime expression.
Get the value of the '{@code alt}' attribute.
Set the value of the '{@code onselect}' attribute. May be a runtime expression.
Get the value of the '{@code onselect}' attribute.
Get the value of the '{@code type}' attribute. Subclasses can override this to change the type of '{@code input}' element rendered. Default value is '{@code text}'.
Set the value of the '{@code for}' attribute. <p>Defaults to the value of {@link #getPath}; may be a runtime expression.
Get the value of the '{@code id}' attribute. <p>May be a runtime expression.
Determine the '{@code for}' attribute value for this tag, autogenerating one if none specified.
Autogenerate the '{@code for}' attribute value for this tag. <p>The default implementation delegates to {@link #getPropertyPath()}, deleting invalid characters (such as "[" or "]").
Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects used to generate the inner '{@code option}' tags. <p>Required when wishing to render '{@code option}' tags from an array, {@link java.util.Collection} or {@link java.util.Map}. <p>Typically a runtime expression.
Get the {@link java.util.Collection}, {@link java.util.Map} or array of objects used to generate the inner '{@code option}' tags. <p>Typically a runtime expression.
Set the name of the property mapped to the '{@code value}' attribute of the '{@code option}' tag. <p>Required when wishing to render '{@code option}' tags from an array or {@link java.util.Collection}.
Return the name of the property mapped to the '{@code value}' attribute of the '{@code option}' tag.
Set the name of the property mapped to the label (inner text) of the '{@code option}' tag.
Get the name of the property mapped to the label (inner text) of the '{@code option}' tag.
Set the 'value' attribute of the rendered HTML {@code <option>} tag.
Get the 'value' attribute of the rendered HTML {@code <option>} tag.
Set the text body of the rendered HTML {@code <option>} tag. <p>May be a runtime expression.
Get the text body of the rendered HTML {@code <option>} tag.
Returns the value of the label for this '{@code option}' element. If the {@link #setLabel label} property is set then the resolved value of that property is used, otherwise the value of the {@code resolvedValue} argument is used.
Creates a new {@code OptionWriter} for the supplied {@code objectSource}. (optional) (optional)
Write the '{@code option}' tags for the configured {@link #optionSource} to the supplied {@link TagWriter}.
Renders the inner '{@code option}' tags using the {@link #optionSource}.
Renders the inner '{@code option}' tags using the supplied {@link Map} as the source.
Renders the inner '{@code option}' tags using the {@link #optionSource}.
Renders the inner '{@code option}' tags using the {@link #optionSource}.
Renders the inner '{@code option}' tags using the supplied {@link Collection} of objects as the source. The value of the {@link #valueProperty} field is used when rendering the '{@code value}' of the '{@code option}' and the value of the {@link #labelProperty} property is used when rendering the label.
Renders an HTML '{@code option}' with the supplied value and label. Marks the value as 'selected' if either the item itself or its value match the bound value.
Determines the display value of the supplied {@code Object}, HTML-escaped as required.
Process the option value before it is written. The default implementation simply returns the same value unchanged.
Determine whether the supplied values matched the selected value. Delegates to {@link SelectedValueComparator#isSelected}.
Determine whether the option fields should be disabled.
Is the password value to be rendered?
Is the password value to be rendered?
Returns {@code true} if the supplied candidate value is equal to the value bound to the supplied {@link BindStatus}. Equality in this case differs from standard Java equality and is described in more detail <a href="#equality-contract">here</a>.
Set the {@link Collection}, {@link Map} or array of objects used to generate the inner '{@code option}' tags. <p>Required when wishing to render '{@code option}' tags from an array, {@link Collection} or {@link Map}. <p>Typically a runtime expression.
Get the value of the '{@code items}' attribute. <p>May be a runtime expression.
Set the name of the property mapped to the '{@code value}' attribute of the '{@code option}' tag. <p>Required when wishing to render '{@code option}' tags from an array or {@link Collection}. <p>May be a runtime expression.
Get the value of the '{@code itemValue}' attribute. <p>May be a runtime expression.
Set the name of the property mapped to the label (inner text) of the '{@code option}' tag. <p>May be a runtime expression.
Get the value of the '{@code itemLabel}' attribute. <p>May be a runtime expression.
Set the value of the HTML '{@code size}' attribute rendered on the final '{@code select}' element.
Set the value of the HTML '{@code multiple}' attribute rendered on the final '{@code select}' element.
Get the value of the HTML '{@code multiple}' attribute rendered on the final '{@code select}' element.
If using a multi-select, a hidden element is needed to make sure all items are correctly unselected on the server-side in response to a {@code null} post.
Returns '{@code true}' if the bound value requires the resultant '{@code select}' tag to be multi-select.
Returns '{@code true}' for arrays, {@link Collection Collections} and {@link Map Maps}.
Get the next unique ID (within the given {@link PageContext}) for the supplied name.
Create a new instance of the {@link TagWriter} class that writes to the supplied {@link PageContext}.
Create a new instance of the {@link TagWriter} class that writes to the supplied {@link Writer}.
Start a new tag with the supplied name. Leaves the tag open so that attributes, inner text or nested tags can be written into it.
Write an HTML attribute with the specified name and value. <p>Be sure to write all attributes <strong>before</strong> writing any inner text or nested tags.
Write an HTML attribute if the supplied value is not {@code null} or zero length.
Close the current opening tag (if necessary) and appends the supplied value as inner text.
Indicate that the currently open tag should be closed and marked as a block level element. <p>Useful when you plan to write additional content in the body outside the context of the current {@link TagWriter}.
Close the current tag. <p>Correctly writes an empty tag if no inner text or nested tags have been written.
Close the current tag, allowing to enforce a full closing tag. <p>Correctly writes an empty tag if no inner text or nested tags have been written. rendered in any case, even in case of a non-block tag
Adds the supplied tag name to the {@link #tagState tag state}.
Closes the current opening tag and marks it as a block tag.
Set the value of the '{@code rows}' attribute. May be a runtime expression.
Get the value of the '{@code rows}' attribute.
Set the value of the '{@code cols}' attribute. May be a runtime expression.
Get the value of the '{@code cols}' attribute.
Build the display value of the supplied {@code Object}, HTML escaped as required. This version is <strong>not</strong> {@link PropertyEditor}-aware.
Build the display value of the supplied {@code Object}, HTML escaped as required. If the supplied value is not a {@link String} and the supplied {@link PropertyEditor} is not null then the {@link PropertyEditor} is used to obtain the display value.
Set the value of the argument (optional). <pIf not set, the tag's body content will get evaluated.
Set the name of the bean that this tag should check.
Return the name of the bean that this tag checks.
Retrieve the Errors instance that this tag is currently bound to. <p>Intended for cooperating nesting tags.
Set the path that this tag should apply. Can be a bean (e.g. "person") to get global errors, or a bean property (e.g. "person.name") to get field errors (also supporting nested fields and "person.na*" mappings). "person.*" will return all errors for the specified bean, both global and field errors.
Return the path that this tag applies to.
Set whether to ignore a nested path, if any. Default is to not ignore.
Return whether to ignore a nested path, if any.
Retrieve the property that this tag is currently bound to, or {@code null} if bound to an object rather than a specific property. Intended for cooperating nesting tags. or {@code null} if none
Retrieve the Errors instance that this tag is currently bound to. Intended for cooperating nesting tags.
Set JavaScript escaping for this tag, as boolean value. Default is "false".
Read the unescaped body content from the page.
Write the escaped body content to the page. <p>Can be overridden in subclasses, e.g. for testing purposes.
Set the expression to evaluate.
Set the variable name to expose the evaluation result under. Defaults to rendering the result to the current JspWriter.
Set the scope to export the evaluation result to. This attribute has no meaning unless var is also defined.
Set the default value for HTML escaping, to be put into the current PageContext.
Set HTML escaping for this tag, as boolean value. Overrides the default HTML escaping setting for the current page.
Return the HTML escaping setting for this tag, or the default setting if not overridden.
Return the applicable default HTML escape setting for this tag. <p>The default implementation checks the RequestContext's setting, falling back to {@code false} in case of no explicit default given.
Return the applicable default for the use of response encoding with HTML escaping for this tag. <p>The default implementation checks the RequestContext's setting, falling back to {@code false} in case of no explicit default given.
HTML-encodes the given String, only if the "htmlEscape" setting is enabled. <p>The response encoding will be taken into account if the "responseEncodedHtmlEscape" setting is enabled as well.
Set the MessageSourceResolvable for this tag. <p>If a MessageSourceResolvable is specified, it effectively overrides any code, arguments or text specified on this tag.
Set the message code for this tag.
Set optional message arguments for this tag, as a comma-delimited String (each String argument can contain JSP EL), an Object array (used as argument array), or a single Object (used as single argument).
Set the separator to use for splitting an arguments String. Default is a comma (",").
Set the message text for this tag.
Set PageContext attribute name under which to expose a variable that contains the resolved message.
Set the scope to export the variable to. Default is SCOPE_PAGE ("page").
Resolve the specified message into a concrete message String. The returned message String should be unescaped.
Resolve the given arguments Object into an arguments array.
Write the message to the page. <p>Can be overridden in subclasses, e.g. for testing purposes.
Use the current RequestContext's application context as MessageSource.
Return default exception message.
Set the path that this tag should apply. <p>E.g. "customer" to allow bind paths like "address.street" rather than "customer.address.street".
Set the raw name of the parameter
Set the raw value of the parameter
Set the name of the parameter (required).
Set the value of the parameter (optional).
Return the current RequestContext.
Called by doStartTag to perform the actual work. a JspException gets wrapped in a JspException by doStartTag
Set the value to transform, using the appropriate PropertyEditor from the enclosing BindTag. <p>The value can either be a plain value to transform (a hard-coded String value in a JSP or a JSP expression), or a JSP EL expression to be evaluated (transforming the result of the expression).
Set PageContext attribute name under which to expose a variable that contains the result of the transformation.
Sets the value of the URL
Set the context path for the URL. Defaults to the current context
Set the variable name to expose the URL under. Defaults to rendering the URL to the current JspWriter
Set the scope to export the URL variable to. This attribute has no meaning unless var is also defined.
Build the URL for the tag from the tag attributes and parameters.
Build the query string from available parameters that have not already been applied as template params. <p>The names and values of parameters are URL encoded. template params with a '?' instead of '&'
Replace template markers in the URL matching available parameters. The name of matched parameters are added to the used parameters set. <p>Parameter values are URL encoded.
Set the name of the default theme. Out-of-the-box value is "theme".
Return the name of the default theme.
Set the name of the default theme.
Set the name of the parameter that contains a theme specification in a theme change request. Default is "theme".
Return the name of the parameter that contains a theme specification in a theme change request.
Default Constructor. Sets the content type of the view to "application/vnd.ms-excel".
Set the URL of the Excel workbook source, without localization part nor extension.
Creates the workbook from an existing XLS document.
Subclasses must implement this method to create an Excel HSSFWorkbook document, given the model.
Convenient method to set a String as text content in a cell.
Default Constructor. Sets the content type of the view to "application/vnd.ms-excel".
Create the workbook from an existing XLS document.
Read the raw PDF resource into an iText PdfReader. <p>The default implementation resolve the specified "url" property as ApplicationContext resource.
This constructor sets the appropriate content type "application/pdf". Note that IE won't take much notice of this, but there's not a lot we can do about this. Generated documents should have a ".pdf" extension.
Create a new document to hold the PDF contents. <p>By default returns an A4 document, but the subclass can specify any Document, possibly parameterized via bean properties defined on the View.
Create a new PdfWriter for the given iText Document.
Prepare the given PdfWriter. Called before building the PDF document, that is, before the call to {@code Document.open()}. <p>Useful for registering a page event listener, for example. The default implementation sets the viewer preferences as returned by this class's {@code getViewerPreferences()} method.
Return the viewer preferences for the PDF file. <p>By default returns {@code AllowPrinting} and {@code PageLayoutSinglePage}, but can be subclassed. The subclass can either have fixed preferences or retrieve them from bean properties defined on the View.
Default Constructor. Sets the content type of the view to "application/vnd.ms-excel".
Template method for creating the POI {@link Workbook} instance. <p>The default implementation creates a traditional {@link HSSFWorkbook}. Spring-provided subclasses are overriding this for the OOXML-based variants; custom subclasses may override this for reading a workbook from a file.
The actual render step: taking the POI {@link Workbook} and rendering it to the given response.
Default Constructor. <p>Sets the content type of the view to {@code "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}.
Set the Rome feed type to use. <p>Defaults to Atom 1.0.
Set a preconfigured Configuration to use for the FreeMarker web config, e.g. a shared one for web and email usage, set up via FreeMarkerConfigurationFactoryBean. If this is not set, FreeMarkerConfigurationFactory's properties (inherited by this class) have to be specified.
Set the encoding of the FreeMarker template file. Default is determined by the FreeMarker Configuration: "ISO-8859-1" if not specified otherwise. <p>Specify the encoding in the FreeMarker Configuration rather than per template if all your templates share a common encoding.
Return the encoding for the FreeMarker template.
Set the FreeMarker Configuration to be used by this view. <p>If this is not set, the default lookup will occur: a single {@link FreeMarkerConfig} is expected in the current web application context, with any bean name. <strong>Note:</strong> using this method will cause a new instance of {@link TaglibFactory} to created for every single {@link FreeMarkerView} instance. This can be quite expensive in terms of memory and initial CPU usage. In production it is recommended that you use a {@link FreeMarkerConfig} which exposes a single shared {@link TaglibFactory}.
Return the FreeMarker configuration used by this view.
Autodetect a {@link FreeMarkerConfig} object via the ApplicationContext.
Return the configured FreeMarker {@link ObjectWrapper}, or the {@link ObjectWrapper#DEFAULT_WRAPPER default wrapper} if none specified.
Render the FreeMarker view to the given response, using the given model map which contains the complete template model to use. <p>The default implementation renders the template specified by the "url" bean property, retrieved via {@code getTemplate}. It delegates to the {@code processTemplate} method to merge the template instance with the given template model. <p>Adds the standard Freemarker hash models to the model: request parameters, request, session and application (ServletContext), as well as the JSP tag library hash model. <p>Can be overridden to customize the behavior, for example to render multiple templates into a single view.
Build a FreeMarker template model for the given model Map. <p>The default implementation builds a {@link AllHttpScopesHashModel}.
Build a FreeMarker {@link HttpSessionHashModel} for the given request, detecting whether a session already exists and reacting accordingly.
Retrieve the FreeMarker template for the given locale, to be rendering by this view. <p>By default, the template specified by the "url" bean property will be retrieved.
Retrieve the FreeMarker template specified by the given name, using the encoding specified by the "encoding" bean property. <p>Can be called by subclasses to retrieve a specific template, for example to render multiple templates into a single view.
Process the FreeMarker template to the servlet response. <p>Can be overridden to customize the behavior.
Sets the default {@link #setViewClass view class} to {@link #requiredViewClass}: by default {@link FreeMarkerView}.
A convenience constructor that allows for specifying {@link #setPrefix prefix} and {@link #setSuffix suffix} as constructor arguments.
Set the Groovy Markup Template resource loader path(s) via a Spring resource location. Accepts multiple locations as a comma-separated list of paths. Standard URLs like "file:" and "classpath:" and pseudo URLs are supported as understood by Spring's {@link org.springframework.core.io.ResourceLoader}. Relative paths are allowed when running in an ApplicationContext.
Set a pre-configured MarkupTemplateEngine to use for the Groovy Markup Template web configuration. <p>Note that this engine instance has to be manually configured, since all other bean properties of this configurer will be ignored.
Create a parent ClassLoader for Groovy to use as parent ClassLoader when loading and compiling templates.
Resolve a template from the given template path. <p>The default implementation uses the Locale associated with the current request, as obtained through {@link org.springframework.context.i18n.LocaleContextHolder LocaleContextHolder}, to find the template file. Effectively the locale configured at the engine level is ignored.
Set the MarkupTemplateEngine to use in this view. <p>If not set, the engine is auto-detected by looking up up a single {@link GroovyMarkupConfig} bean in the web application context and using it to obtain the configured {@code MarkupTemplateEngine} instance.
Autodetect a MarkupTemplateEngine via the ApplicationContext. Called if a MarkupTemplateEngine has not been manually configured.
Return a template compiled by the configured Groovy Markup template engine for the given view URL.
Sets the default {@link #setViewClass view class} to {@link #requiredViewClass}: by default {@link GroovyMarkupView}.
A convenience constructor that allows for specifying {@link #setPrefix prefix} and {@link #setSuffix suffix} as constructor arguments.
We need to write text to the response Writer.
We need to write binary output to the response OutputStream.
Set the name of the model attribute that represents the report data. If not specified, the model map will be searched for a matching value type. <p>A {@code JRDataSource} will be taken as-is. For other types, conversion will apply: By default, a {@code java.util.Collection} will be converted to {@code JRBeanCollectionDataSource}, and an object array to {@code JRBeanArrayDataSource}. <p><b>Note:</b> If you pass in a Collection or object array in the model map for use as plain report parameter, rather than as report data to extract fields from, you need to specify the key for the actual report data to use, to avoid mis-detection of report data by type.
Specify resource paths which must be loaded as instances of {@code JasperReport} and passed to the JasperReports engine for rendering as sub-reports, under the same keys as in this mapping. (Spring resource locations)
Set the list of names corresponding to the model parameters that will contain data source objects for use in sub-reports. Spring will convert these objects to instances of {@code JRDataSource} where applicable and will then include the resulting {@code JRDataSource} in the parameters passed into the JasperReports engine. <p>The name specified in the list should correspond to an attribute in the model Map, and to a sub-report data source parameter in your report file. If you pass in {@code JRDataSource} objects as model attributes, specifying this list of keys is not required. <p>If you specify a list of sub-report data keys, it is required to also specify a {@code reportDataKey} for the main report, to avoid confusion between the data source objects for the various reports involved.
Specify the set of headers that are included in each of response.
Set the exporter parameters that should be used when rendering a view. of the {@code JRExporterParameter} instance as key (e.g. "net.sf.jasperreports.engine.export.JRHtmlExporterParameter.IMAGES_URI") and the value you wish to assign to the parameter as value
Return the exporter parameters that this view uses, if any.
Allows subclasses to populate the converted exporter parameters.
Allows subclasses to retrieve the converted exporter parameters.
Specify the {@code javax.sql.DataSource} to use for reports with embedded SQL statements.
Return the {@code javax.sql.DataSource} that this view uses, if any.
Converts the exporter parameters passed in by the user which may be keyed by {@code String}s corresponding to the fully qualified name of the {@code JRExporterParameter} into parameters which are keyed by {@code JRExporterParameter}.
Convert the supplied parameter value into the actual type required by the corresponding {@code JRExporterParameter}. <p>The default implementation simply converts the String values "true" and "false" into corresponding {@code Boolean} objects, and tries to convert String values that start with a digit into {@code Integer} objects (simply keeping them as String if number conversion fails).
Return a {@code JRExporterParameter} for the given parameter object, converting it from a String if necessary.
Convert the given fully qualified field name to a corresponding JRExporterParameter instance. of the class name followed by a dot followed by the field name (e.g. "net.sf.jasperreports.engine.export.JRHtmlExporterParameter.IMAGES_URI")
Load the main {@code JasperReport} from the specified {@code Resource}. If the {@code Resource} points to an uncompiled report design file then the report file is compiled dynamically and loaded into memory. report has been statically defined
Loads a {@code JasperReport} from the specified {@code Resource}. If the {@code Resource} points to an uncompiled report design file then the report file is compiled dynamically and loaded into memory.
Expose current Spring-managed Locale and MessageSource to JasperReports i18n ($R expressions etc). The MessageSource should only be exposed as JasperReports resource bundle if no such bundle is defined in the report itself. <p>The default implementation exposes the Spring RequestContext Locale and a MessageSourceResourceBundle adapter for the Spring ApplicationContext, analogous to the {@code JstlUtils.exposeLocalizationContext} method.
Create a populated {@code JasperPrint} instance from the configured {@code JasperReport} instance. <p>By default, this method will use any {@code JRDataSource} instance (or wrappable {@code Object}) that can be located using {@link #setReportDataKey}, a lookup for type {@code JRDataSource} in the model Map, or a special value retrieved via {@link #getReportData}. <p>If no {@code JRDataSource} can be found, this method will use a JDBC {@code Connection} obtained from the configured {@code javax.sql.DataSource} (or a DataSource attribute in the model). If no JDBC DataSource can be found either, the JasperReports engine will be invoked with plain model Map, assuming that the model contains parameters that identify the source for report data (e.g. Hibernate or JPA queries). and no {@code javax.sql.DataSource} is supplied the {@code javax.sql.DataSource} a {@code JRDataSource}
Fill the given report using the given JDBC DataSource and model.
Populates the headers in the {@code HttpServletResponse} with the headers supplied by the user.
Determine the {@code JasperReport} to fill. Called by {@link #fillReport}. <p>The default implementation returns the report as statically configured through the 'url' property (and loaded by {@link #loadReport()}). Can be overridden in subclasses in order to dynamically obtain a {@code JasperReport} instance. As an alternative, consider overriding the {@link #fillReport} template method itself.
Create an appropriate {@code JRDataSource} for passed-in report data. Called by {@link #fillReport} when its own lookup steps were not successful. <p>The default implementation looks for a value of type {@code java.util.Collection} or object array (in that order). Can be overridden in subclasses.
Convert the given report data value to a {@code JRDataSource}. <p>The default implementation delegates to {@code JasperReportUtils} unless the report data value is an instance of {@code JRDataSourceProvider}. A {@code JRDataSource}, {@code JRDataSourceProvider}, {@code java.util.Collection} or object array is detected. {@code JRDataSource}s are returned as is, whilst {@code JRDataSourceProvider}s are used to create an instance of {@code JRDataSource} which is then returned. The latter two are converted to {@code JRBeanCollectionDataSource} or {@code JRBeanArrayDataSource}, respectively.
Create a report using the given provider.
Return the value types that can be converted to a {@code JRDataSource}, in prioritized order. Should only return types that the {@link #convertReportData} method is actually able to convert. <p>Default value types are: {@code java.util.Collection} and {@code Object} array.
Set the {@code JRExporter} implementation {@code Class} to use. Throws {@link IllegalArgumentException} if the {@code Class} doesn't implement {@code JRExporter}. Required setting, as it does not have a default.
Specifies whether or not the {@code JRExporter} writes to the {@link java.io.PrintWriter} of the associated with the request ({@code true}) or whether it writes directly to the {@link java.io.InputStream} of the request ({@code false}). Default is {@code true}.
Creates a new {@code JasperReportsMultiFormatView} instance with a default set of mappings.
Set the key of the model parameter that holds the format discriminator. Default is "format".
Set the mappings of format discriminators to view class names. The default mappings are: <p><ul> <li>{@code csv} - {@code JasperReportsCsvView}</li> <li>{@code html} - {@code JasperReportsHtmlView}</li> <li>{@code pdf} - {@code JasperReportsPdfView}</li> <li>{@code xls} - {@code JasperReportsXlsView}</li> <li>{@code xlsx} - {@code JasperReportsXlsxView}</li> (as of Spring 4.2) </ul>
Set the mappings of {@code Content-Disposition} header values to mapping keys. If specified, Spring will look at these mappings to determine the value of the {@code Content-Disposition} header for a given format mapping.
Return the mappings of {@code Content-Disposition} header values to mapping keys. Mainly available for configuration through property paths that specify individual keys.
Adds/overwrites the {@code Content-Disposition} header value with the format-specific value if the mappings have been specified and a valid one exists for the given format.
Set the {@code reportDataKey} the view class should use.
Set the {@code subReportUrls} the view class should use.
Set the {@code subReportDataKeys} the view class should use.
Set the {@code headers} the view class should use.
Set the {@code exporterParameters} the view class should use.
Set the {@link DataSource} the view class should use.
Set the {@code ObjectMapper} for this view. If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} will be used. <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON serialization process. The other option is to use Jackson's provided annotations on the types to be serialized, in which case a custom-configured ObjectMapper is unnecessary.
Return the {@code ObjectMapper} for this view.
Set the {@code JsonEncoding} for this view. By default, {@linkplain JsonEncoding#UTF8 UTF-8} is used.
Return the {@code JsonEncoding} for this view.
Whether to use the default pretty printer when writing the output. This is a shortcut for setting up an {@code ObjectMapper} as follows: <pre class="code"> ObjectMapper mapper = new ObjectMapper(); mapper.configure(SerializationFeature.INDENT_OUTPUT, true); </pre> <p>The default value is {@code false}.
Disables caching of the generated JSON. <p>Default is {@code true}, which will prevent the client from caching the generated JSON.
Whether to update the 'Content-Length' header of the response. When set to {@code true}, the response is buffered in order to determine the content length and set the 'Content-Length' header of the response. <p>The default setting is {@code false}.
Filter and optionally wrap the model in {@link MappingJacksonValue} container.
Write the actual JSON content to the stream.
Construct a new {@code MappingJackson2JsonView} using default configuration provided by {@link Jackson2ObjectMapperBuilder} and setting the content type to {@code application/json}.
Construct a new {@code MappingJackson2JsonView} using the provided {@link ObjectMapper} and setting the content type to {@code application/json}.
Indicates whether the JSON output by this view should be prefixed with <tt>")]}', "</tt>. Default is {@code false}. <p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking. The prefix renders the string syntactically invalid as a script so that it cannot be hijacked. This prefix should be stripped before parsing the string as JSON.
Set the attributes in the model that should be rendered by this view. When set, all other model attributes will be ignored.
Return the attributes in the model that should be rendered by this view.
Set whether to serialize models containing a single attribute as a map or whether to extract the single value from the model and serialize it directly. <p>The effect of setting this flag is similar to using {@code MappingJackson2HttpMessageConverter} with an {@code @ResponseBody} request-handling method. <p>Default is {@code false}.
Set JSONP request parameter names. Each time a request has one of those parameters, the resulting JSON will be wrapped into a function named as specified by the JSONP request parameter value. <p>The parameter names configured by default are "jsonp" and "callback".
Set the {@link ScriptEngine} to use by the view. The script engine must implement {@code Invocable}. You must define {@code engine} or {@code engineName}, not both. <p>When the {@code sharedEngine} flag is set to {@code false}, you should not specify the script engine with this setter, but with the {@link #setEngineName(String)} one (since it implies multiple lazy instantiations of the script engine).
Set the engine name that will be used to instantiate the {@link ScriptEngine}. The script engine must implement {@code Invocable}. You must define {@code engine} or {@code engineName}, not both.
When set to {@code false}, use thread-local {@link ScriptEngine} instances instead of one single shared instance. This flag should be set to {@code false} for those using non thread-safe script engines with templating libraries not designed for concurrency, like Handlebars or React running on Nashorn for example. In this case, Java 8u60 or greater is required due to <p>When this flag is set to {@code false}, the script engine must be specified using {@link #setEngineName(String)}. Using {@link #setEngine(ScriptEngine)} is not possible because multiple instances of the script engine need to be created lazily (one per thread).
Set the scripts to be loaded by the script engine (library or user provided). Since {@code resourceLoaderPath} default value is "classpath:", you can load easily any script available on the classpath. <p>For example, in order to use a JavaScript library available as a WebJars dependency and a custom "render.js" file, you should call {@code configurer.setScripts("/META-INF/resources/webjars/library/version/library.js", "com/myproject/script/render.js");}.
Set the object where the render function belongs (optional). For example, in order to call {@code Mustache.render()}, {@code renderObject} should be set to {@code "Mustache"} and {@code renderFunction} to {@code "render"}.
Set the render function name (mandatory). <p>This function will be called with the following parameters: <ol> <li>{@code String template}: the template content</li> <li>{@code Map model}: the view model</li> <li>{@code String url}: the template url (since 4.2.2)</li> </ol>
Set the content type to use for the response. ({@code text/html} by default).
Set the charset used to read script and template files. ({@code UTF-8} by default).
Set the resource loader path(s) via a Spring resource location. Accepts multiple locations as a comma-separated list of paths. Standard URLs like "file:" and "classpath:" and pseudo URLs are supported as understood by Spring's {@link org.springframework.core.io.ResourceLoader}. Relative paths are allowed when running in an ApplicationContext. <p>Default is "classpath:".
Constructor for use as a bean.
Create a new ScriptTemplateView with the given URL.
See {@link ScriptTemplateConfigurer#setEngine(ScriptEngine)} documentation.
See {@link ScriptTemplateConfigurer#setEngineName(String)} documentation.
See {@link ScriptTemplateConfigurer#setSharedEngine(Boolean)} documentation.
See {@link ScriptTemplateConfigurer#setScripts(String...)} documentation.
See {@link ScriptTemplateConfigurer#setRenderObject(String)} documentation.
See {@link ScriptTemplateConfigurer#setRenderFunction(String)} documentation.
See {@link ScriptTemplateConfigurer#setCharset(Charset)} documentation.
See {@link ScriptTemplateConfigurer#setResourceLoaderPath(String)} documentation.
Sets the default {@link #setViewClass view class} to {@link #requiredViewClass}: by default {@link ScriptTemplateView}.
A convenience constructor that allows for specifying {@link #setPrefix prefix} and {@link #setSuffix suffix} as constructor arguments.
Configure Tiles using a custom TilesInitializer, typically specified as an inner bean. <p>Default is a variant of {@link org.apache.tiles.startup.DefaultTilesInitializer}, respecting the "definitions", "preparerFactoryClass" etc properties on this configurer. <p><b>NOTE: Specifying a custom TilesInitializer effectively disables all other bean properties on this configurer.</b> The entire initialization procedure is then left to the TilesInitializer as specified.
Specify whether to apply Tiles 3.0's "complete-autoload" configuration. <p>See {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory} for details on the complete-autoload mode. <p><b>NOTE: Specifying the complete-autoload mode effectively disables all other bean properties on this configurer.</b> The entire initialization procedure is then left to {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer}.
Set the Tiles definitions, i.e. the list of files containing the definitions. Default is "/WEB-INF/tiles.xml".
Set whether to check Tiles definition files for a refresh at runtime. Default is "false".
Set whether to validate the Tiles XML definitions. Default is "true".
Set the {@link org.apache.tiles.definition.DefinitionsFactory} implementation to use. Default is {@link org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory}, operating on definition resource URLs. <p>Specify a custom DefinitionsFactory, e.g. a UrlDefinitionsFactory subclass, to customize the creation of Tiles Definition objects. Note that such a DefinitionsFactory has to be able to handle {@link java.net.URL} source objects, unless you configure a different TilesContainerFactory.
Set the {@link org.apache.tiles.preparer.factory.PreparerFactory} implementation to use. Default is {@link org.apache.tiles.preparer.factory.BasicPreparerFactory}, creating shared instances for specified preparer classes. <p>Specify {@link SimpleSpringPreparerFactory} to autowire {@link org.apache.tiles.preparer.ViewPreparer} instances based on specified preparer classes, applying Spring's container callbacks as well as applying configured Spring BeanPostProcessors. If Spring's context-wide annotation-config has been activated, annotations in ViewPreparer classes will be automatically detected and applied. <p>Specify {@link SpringBeanPreparerFactory} to operate on specified preparer <i>names</i> instead of classes, obtaining the corresponding Spring bean from the DispatcherServlet's application context. The full bean creation process will be in the control of the Spring application context in this case, allowing for the use of scoped beans etc. Note that you need to define one Spring bean definition per preparer name (as used in your Tiles definitions).
Set whether to use a MutableTilesContainer (typically the CachingTilesContainer implementation) for this application. Default is "false".
Set the {@link Renderer} to use. If not set, by default {@link DefinitionRenderer} is used.
Whether to expose JSTL attributes. By default set to {@code true}.
Specify whether to always include the view rather than forward to it. <p>Default is "false". Switch this flag on to enforce the use of a Servlet include, even if a forward would be possible.
Create a Tiles {@link Request}. <p>This implementation creates a {@link ServletRequest}.
Set the {@link Renderer} to use. If not specified, a default {@link org.apache.tiles.renderer.DefinitionRenderer} will be used.
Set a pre-configured VelocityEngine to use for the Velocity web configuration: e.g. a shared one for web and email usage, set up via {@link org.springframework.ui.velocity.VelocityEngineFactoryBean}. <p>Note that the Spring macros will <i>not</i> be enabled automatically in case of an external VelocityEngine passed in here. Make sure to include {@code spring.vm} in your template loader path in such a scenario (if there is an actual need to use those macros). <p>If this is not set, VelocityEngineFactory's properties (inherited by this class) have to be specified.
Set the layout template to use. Default is {@link #DEFAULT_LAYOUT_URL "layout.vm"}. root directory)
Set the context key used to specify an alternate layout to be used instead of the default layout. Screen content templates can override the layout template that they wish to be wrapped with by setting this value in the template, for example:<br> {@code #set($layout = "MyLayout.vm" )} <p>Default key is {@link #DEFAULT_LAYOUT_KEY "layout"}, as illustrated above. screen content templates to override the layout template
Set the name of the context key that will hold the content of the screen within the layout template. This key must be present in the layout template for the current screen to be rendered. <p>Default is {@link #DEFAULT_SCREEN_CONTENT_KEY "screen_content"}: accessed in VTL as {@code $screen_content}.
The resulting context contains any mappings from render, plus screen content.
Set the layout template to use. Default is "layout.vm". root directory)
Set the context key used to specify an alternate layout to be used instead of the default layout. Screen content templates can override the layout template that they wish to be wrapped with by setting this value in the template, for example:<br> {@code #set($layout = "MyLayout.vm" )} <p>The default key is "layout", as illustrated above. screen content templates to override the layout template
Set the name of the context key that will hold the content of the screen within the layout template. This key must be present in the layout template for the current screen to be rendered. <p>Default is "screen_content": accessed in VTL as {@code $screen_content}.
Set a Velocity Toolbox config location, for example "/WEB-INF/toolbox.xml", to automatically load a Velocity Tools toolbox definition file and expose all defined tools in the specified scopes. If no config location is specified, no toolbox will be loaded and exposed. <p>The specified location string needs to refer to a ServletContext resource, as expected by ServletToolboxManager which is part of the view package of Velocity Tools.
Return the Velocity Toolbox config location, if any.
Set tool attributes to expose to the view, as attribute name / class name pairs. An instance of the given class will be added to the Velocity context for each rendering operation, under the given attribute name. <p>For example, an instance of MathTool, which is part of the generic package of Velocity Tools, can be bound under the attribute name "math", specifying the fully qualified class name "org.apache.velocity.tools.generic.MathTool" as value. <p>Note that VelocityView can only create simple generic tools or values, that is, classes with a public default constructor and no further initialization needs. This class does not do any further checks, to not introduce a required dependency on a specific tools package. <p>For tools that are part of the view package of Velocity Tools, a special Velocity context and a special init callback are needed. Use VelocityToolboxView in such a case, or override {@code createVelocityContext} and {@code initTool} accordingly. <p>For a simple VelocityFormatter instance or special locale-aware instances of DateTool/NumberTool, which are part of the generic package of Velocity Tools, specify the "velocityFormatterAttribute", "dateToolAttribute" or "numberToolAttribute" properties, respectively.
Set the name of the DateTool helper object to expose in the Velocity context of this view, or {@code null} if not needed. The exposed DateTool will be aware of the current locale, as determined by Spring's LocaleResolver. <p>DateTool is part of the generic package of Velocity Tools 1.0. Spring uses a special locale-aware subclass of DateTool.
Set the name of the NumberTool helper object to expose in the Velocity context of this view, or {@code null} if not needed. The exposed NumberTool will be aware of the current locale, as determined by Spring's LocaleResolver. <p>NumberTool is part of the generic package of Velocity Tools 1.1. Spring uses a special locale-aware subclass of NumberTool.
Set the encoding of the Velocity template file. Default is determined by the VelocityEngine: "ISO-8859-1" if not specified otherwise. <p>Specify the encoding in the VelocityEngine rather than per template if all your templates share a common encoding.
Return the encoding for the Velocity template.
Set whether the Velocity template should be cached. Default is "false". It should normally be true in production, but setting this to false enables us to modify Velocity templates without restarting the application (similar to JSPs). <p>Note that this is a minor optimization only, as Velocity itself caches templates in a modification-aware fashion.
Return whether the Velocity template should be cached.
Set the VelocityEngine to be used by this view. <p>If this is not set, the default lookup will occur: A single VelocityConfig is expected in the current web application context, with any bean name.
Return the VelocityEngine used by this view.
Autodetect a VelocityEngine via the ApplicationContext. Called if no explicit VelocityEngine has been specified.
Create a Velocity Context instance for the given model, to be passed to the template for merging. <p>The default implementation delegates to {@link #createVelocityContext(Map)}. Can be overridden for a special context class, for example ChainedContext which is part of the view package of Velocity Tools. ChainedContext is needed for initialization of ViewTool instances. <p>Have a look at {@link VelocityToolboxView}, which pre-implements ChainedContext support. This is not part of the standard VelocityView class in order to avoid a required dependency on the view package of Velocity Tools.
Create a Velocity Context instance for the given model, to be passed to the template for merging. <p>Default implementation creates an instance of Velocity's VelocityContext implementation class. to be exposed to the view
Expose helpers unique to each rendering operation. This is necessary so that different rendering operations can't overwrite each other's formats etc. <p>Called by {@code renderMergedTemplateModel}. Default implementation delegates to {@code exposeHelpers(velocityContext, request)}. This method can be overridden to add special tools to the context, needing the servlet response to initialize (see Velocity Tools, for example LinkTool and ViewTool/ChainedContext).
Expose the tool attributes, according to corresponding bean property settings. <p>Do not override this method unless for further tools driven by bean properties. Override one of the {@code exposeHelpers} methods to add custom helpers.
Render the Velocity view to the given response, using the given Velocity context which contains the complete template model to use. <p>The default implementation renders the template specified by the "url" bean property, retrieved via {@code getTemplate}. It delegates to the {@code mergeTemplate} method to merge the template instance with the given Velocity context. <p>Can be overridden to customize the behavior, for example to render multiple templates into a single view.
Retrieve the Velocity template to be rendered by this view. <p>By default, the template specified by the "url" bean property will be retrieved: either returning a cached template instance or loading a fresh instance (according to the "cacheTemplate" bean property)
Retrieve the Velocity template specified by the given name, using the encoding specified by the "encoding" bean property. <p>Can be called by subclasses to retrieve a specific template, for example to render multiple templates into a single view.
Merge the template with the context. Can be overridden to customize the behavior.
Set the name of the DateTool helper object to expose in the Velocity context of this view, or {@code null} if not needed. DateTool is part of Velocity Tools 1.0.
Set the name of the NumberTool helper object to expose in the Velocity context of this view, or {@code null} if not needed. NumberTool is part of Velocity Tools 1.1.
Set a Velocity Toolbox config location, for example "/WEB-INF/toolbox.xml", to automatically load a Velocity Tools toolbox definition file and expose all defined tools in the specified scopes. If no config location is specified, no toolbox will be loaded and exposed. <p>The specified location string needs to refer to a ServletContext resource, as expected by ServletToolboxManager which is part of the view package of Velocity Tools. <p><b>Note:</b> Specifying a toolbox config location will lead to VelocityToolboxView instances being created.
Construct a new {@code MappingJackson2XmlView} using default configuration provided by {@link Jackson2ObjectMapperBuilder} and setting the content type to {@code application/xml}.
Construct a new {@code MappingJackson2XmlView} using the provided {@link XmlMapper} and setting the content type to {@code application/xml}.
Construct a new {@code MarshallingView} with no {@link Marshaller} set. The marshaller must be set after construction by invoking {@link #setMarshaller}.
Constructs a new {@code MarshallingView} with the given {@link Marshaller} set.
Set the {@link Marshaller} to be used by this view.
Set the name of the model key that represents the object to be marshalled. If not specified, the model map will be searched for a supported value type.
Locate the object to be marshalled. <p>The default implementation first attempts to look under the configured {@linkplain #setModelKey(String) model key}, if any, before attempting to locate an object of {@linkplain Marshaller#supports(Class) supported type}. {@linkplain #setModelKey(String) model key} is not supported by the marshaller
Check whether the given value from the current view's model is eligible for marshalling through the configured {@link Marshaller}. <p>The default implementation calls {@link Marshaller#supports(Class)}, unwrapping a given {@link JAXBElement} first if applicable.
Specify the XSLT TransformerFactory class to use. <p>The default constructor of the specified class will be called to build the TransformerFactory for this view.
Set the name of the model attribute that represents the XSLT Source. If not specified, the model map will be searched for a matching value type. <p>The following source types are supported out of the box: {@link Source}, {@link Document}, {@link Node}, {@link Reader}, {@link InputStream} and {@link Resource}.
Set the URIResolver used in the transform. <p>The URIResolver handles calls to the XSLT {@code document()} function.
Set an implementation of the {@link javax.xml.transform.ErrorListener} interface for custom handling of transformation errors and warnings. <p>If not set, a default {@link org.springframework.util.xml.SimpleTransformErrorListener} is used that simply logs warnings using the logger instance of the view class, and rethrows errors to discontinue the XML transformation.
Set whether the XSLT transformer may add additional whitespace when outputting the result tree. <p>Default is {@code true} (on); set this to {@code false} (off) to not specify an "indent" key, leaving the choice up to the stylesheet.
Set arbitrary transformer output properties to be applied to the stylesheet. <p>Any values specified here will override defaults that this view sets programmatically.
Turn on/off the caching of the XSLT {@link Templates} instance. <p>The default value is "true". Only set this to "false" in development, where caching does not seriously impact performance.
Instantiate a new TransformerFactory for this view. <p>The default implementation simply calls {@link javax.xml.transform.TransformerFactory#newInstance()}. If a {@link #setTransformerFactoryClass "transformerFactoryClass"} has been specified explicitly, the default constructor of the specified class will be called instead. <p>Can be overridden in subclasses.
Return the TransformerFactory that this XsltView uses.
Create the XSLT {@link Result} used to render the result of the transformation. <p>The default implementation creates a {@link StreamResult} wrapping the supplied HttpServletResponse's {@link HttpServletResponse#getOutputStream() OutputStream}.
<p>Locate the {@link Source} object in the supplied model, converting objects as required. The default implementation first attempts to look under the configured {@link #setSourceKey source key}, if any, before attempting to locate an object of {@link #getSourceTypes() supported type}.
Return the array of {@link Class Classes} that are supported when converting to an XSLT {@link Source}. <p>Currently supports {@link Source}, {@link Document}, {@link Node}, {@link Reader}, {@link InputStream} and {@link Resource}.
Convert the supplied {@link Object} into an XSLT {@link Source} if the {@link Object} type is {@link #getSourceTypes() supported}.
Configure the supplied {@link Transformer} instance. <p>The default implementation copies parameters from the model into the Transformer's {@link Transformer#setParameter parameter set}. This implementation also copies the {@link #setOutputProperties output properties} into the {@link Transformer} {@link Transformer#setOutputProperty output properties}. Indentation properties are set as well.
Configure the indentation settings for the supplied {@link Transformer}.
Copy the configured output {@link Properties}, if any, into the {@link Transformer#setOutputProperty output property set} of the supplied {@link Transformer}.
Copy all entries from the supplied Map into the {@link Transformer#setParameter(String, Object) parameter set} of the supplied {@link Transformer}.
Configure the supplied {@link HttpServletResponse}. <p>The default implementation of this method sets the {@link HttpServletResponse#setContentType content type} and {@link HttpServletResponse#setCharacterEncoding encoding} from the "media-type" and "encoding" output properties specified in the {@link Transformer}.
Load the {@link Templates} instance for the stylesheet at the configured location.
Create the {@link Transformer} instance used to prefer the XSLT transformation. <p>The default implementation simply calls {@link Templates#newTransformer()}, and configures the {@link Transformer} with the custom {@link URIResolver} if specified.
Get the XSLT {@link Source} for the XSLT template under the {@link #setUrl configured URL}.
Close the underlying resource managed by the supplied {@link Source} if applicable. <p>Only works for {@link StreamSource StreamSources}.
Set the name of the model attribute that represents the XSLT Source. If not specified, the model map will be searched for a matching value type. <p>The following source types are supported out of the box: {@link javax.xml.transform.Source}, {@link org.w3c.dom.Document}, {@link org.w3c.dom.Node}, {@link java.io.Reader}, {@link java.io.InputStream} and {@link org.springframework.core.io.Resource}.
Turn on/off the caching of the XSLT templates. <p>The default value is "true". Only set this to "false" in development, where caching does not seriously impact performance.
Dummy marker object for unresolved views in the cache Maps
Specify the maximum number of entries for the view cache. Default is 1024.
Return the maximum number of entries for the view cache.
Enable or disable caching. <p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"} property to the default limit (1024) or to 0, respectively. <p>Default is "true": caching is enabled. Disable this only for debugging and development.
Return if caching is enabled.
Whether a view name once resolved to {@code null} should be cached and automatically resolved to {@code null} subsequently. <p>Default is "true": unresolved view names are being cached, as of Spring 3.1. Note that this flag only applies if the general {@link #setCache "cache"} flag is kept at its default of "true" as well. <p>Of specific interest is the ability for some AbstractUrlBasedView implementations (FreeMarker, Velocity, Tiles) to check if an underlying resource exists via {@link AbstractUrlBasedView#checkResource(Locale)}. With this flag set to "false", an underlying resource that re-appears is noticed and used. With the flag set to "true", one check is made only.
Return if caching of unresolved views is enabled.
Return the cache key for the given view name and the given locale. <p>Default is a String consisting of view name and locale suffix. Can be overridden in subclasses. <p>Needs to respect the locale in general, as a different locale can lead to a different view resource.
Provides functionality to clear the cache for a certain view. <p>This can be handy in case developer are able to modify views (e.g. Velocity templates) at runtime after which you'd need to clear the cache for the specified view. (if any) needs to be removed
Clear the entire view cache, removing all cached view objects. Subsequent resolve calls will lead to recreation of demanded view objects.
Create the actual View object. <p>The default implementation delegates to {@link #loadView}. This can be overridden to resolve certain view names in a special fashion, before delegating to the actual {@code loadView} implementation provided by the subclass. (optional, to allow for ViewResolver chaining)
Set whether all request attributes should be added to the model prior to merging with the template. Default is "false".
Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name. Default is "false", which causes an exception to be thrown if request attributes of the same name as model attributes are found.
Set whether all HttpSession attributes should be added to the model prior to merging with the template. Default is "false".
Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name. Default is "false", which causes an exception to be thrown if session attributes of the same name as model attributes are found.
Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext". Default is "true". <p>Currently needed for Spring's Velocity and FreeMarker default macros. Note that this is <i>not</i> required for templates that use HTML forms <i>unless</i> you wish to take advantage of the Spring helper macros.
Apply this view's content type as specified in the "contentType" bean property to the given response. <p>Only applies the view's contentType if no content type has been set on the response before. This allows handlers to override the default content type beforehand.
Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext". Default is "true".
Create a new AbstractUrlBasedView with the given URL.
Set the URL of the resource that this view wraps. The URL must be appropriate for the concrete View implementation.
Return the URL of the resource that this view wraps.
Return whether the 'url' property is required. <p>The default implementation returns {@code true}. This can be overridden in subclasses.
Check whether the underlying resource that the configured URL points to actually exists. {@code false} if we know that it does not exist
Return the view's name. Should never be {@code null}, if the view was correctly configured.
Set the content type for this view. Default is "text/html;charset=ISO-8859-1". <p>May be ignored by subclasses if the view itself is assumed to set the content type, e.g. in case of JSPs.
Set the name of the RequestContext attribute for this view. Default is none.
Return the name of the RequestContext attribute, if any.
Set static attributes as a CSV string. Format is: attname0={value1},attname1={value1} <p>"Static" attributes are fixed attributes that are specified in the View instance configuration. "Dynamic" attributes, on the other hand, are values passed in as part of the model.
Set static attributes for this view from a {@code java.util.Properties} object. <p>"Static" attributes are fixed attributes that are specified in the View instance configuration. "Dynamic" attributes, on the other hand, are values passed in as part of the model. <p>This is the most convenient way to set static attributes. Note that static attributes can be overridden by dynamic attributes, if a value with the same name is included in the model. <p>Can be populated with a String "value" (parsed via PropertiesEditor) or a "props" element in XML bean definitions.
Set static attributes for this view from a Map. This allows to set any kind of attribute values, for example bean references. <p>"Static" attributes are fixed attributes that are specified in the View instance configuration. "Dynamic" attributes, on the other hand, are values passed in as part of the model. <p>Can be populated with a "map" or "props" element in XML bean definitions.
Allow Map access to the static attributes of this view, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "attributesMap[myKey]". This is particularly useful for adding or overriding entries in child view definitions.
Add static data to this view, exposed in each view. <p>"Static" attributes are fixed attributes that are specified in the View instance configuration. "Dynamic" attributes, on the other hand, are values passed in as part of the model. <p>Must be invoked before any calls to {@code render}.
Return the static attributes for this view. Handy for testing. <p>Returns an unmodifiable Map, as this is not intended for manipulating the Map but rather just for checking the contents.
Specify whether to add path variables to the model or not. <p>Path variables are commonly bound to URI template variables through the {@code @PathVariable} annotation. They're are effectively URI template variables with type conversion applied to them to derive typed Object values. Such values are frequently needed in views for constructing links to the same and other URLs. <p>Path variables added to the model override static attributes (see {@link #setAttributes(Properties)}) but not attributes already present in the model. <p>By default this flag is set to {@code true}. Concrete view types can override this.
Return whether to add path variables to the model or not.
Set whether to make all Spring beans in the application context accessible as request attributes, through lazy checking once an attribute gets accessed. <p>This will make all such beans accessible in plain {@code ${...}} expressions in a JSP 2.0 page, as well as in JSTL's {@code c:out} value expressions. <p>Default is "false". Switch this flag on to transparently expose all Spring beans in the request attribute namespace. <p><b>NOTE:</b> Context beans will override any custom request or session attributes of the same name that have been manually added. However, model attributes (as explicitly exposed to this view) of the same name will always override context beans.
Specify the names of beans in the context which are supposed to be exposed. If this is non-null, only the specified beans are eligible for exposure as attributes. <p>If you'd like to expose all Spring beans in the application context, switch the {@link #setExposeContextBeansAsAttributes "exposeContextBeansAsAttributes"} flag on but do not list specific bean names for this property.
Creates a combined output Map (never {@code null}) that includes dynamic values and static attributes. Dynamic values take precedence over static attributes.
Create a RequestContext to expose under the specified attribute name. <p>The default implementation creates a standard RequestContext instance for the given request and model. Can be overridden in subclasses for custom instances. with dynamic values taking precedence over static attributes
Prepare the given response for rendering. <p>The default implementation applies a workaround for an IE bug when sending download content via HTTPS.
Return whether this view generates download content (typically binary content like PDF or Excel files). <p>The default implementation returns {@code false}. Subclasses are encouraged to return {@code true} here if they know that they are generating download content that requires temporary caching on the client side, typically via the response OutputStream.
Get the request handle to expose to {@link #renderMergedOutputModel}, i.e. to the view. <p>The default implementation wraps the original request for exposure of Spring beans as request attributes (if demanded).
Subclasses must implement this method to actually render the view. <p>The first step will be preparing the request: In the JSP case, this would mean setting model objects as request attributes. The second step will be the actual rendering of the view, for example including the JSP via a RequestDispatcher. with dynamic values taking precedence over static attributes
Create a temporary OutputStream for this view. <p>This is typically used as IE workaround, for setting the content length header from the temporary stream before actually writing the content to the HTTP response.
Write the given temporary OutputStream to the HTTP response.
Set the content type of the response to the configured {@link #setContentType(String) content type} unless the {@link View#SELECTED_CONTENT_TYPE} request attribute is present and set to a concrete media type.
Set the {@link ContentNegotiationManager} to use to determine requested media types. <p>If not set, ContentNegotiationManager's default constructor will be used, applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}.
Return the {@link ContentNegotiationManager} to use to determine requested media types.
Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable} status code should be returned if no suitable view can be found. <p>Default is {@code false}, meaning that this view resolver returns {@code null} for {@link #resolveViewName(String, Locale)} when an acceptable view cannot be found. This will allow for view resolvers chaining. When this property is set to {@code true}, {@link #resolveViewName(String, Locale)} will respond with a view that sets the response status to {@code 406 Not Acceptable} instead.
Whether to return HTTP Status 406 if no suitable is found.
Set the default views to use when a more specific view can not be obtained from the {@link ViewResolver} chain.
Sets the view resolvers to be wrapped by this view resolver. <p>If this property is not set, view resolvers will be detected automatically.
Determines the list of {@link MediaType} for the given {@link HttpServletRequest}.
Set the prefix to prepend to generated view names.
Set the suffix to append to generated view names.
Set the value that will replace '{@code /}' as the separator in the view name. The default behavior simply leaves '{@code /}' as the separator.
Set whether or not leading slashes should be stripped from the URI when generating the view name. Default is "true".
Set whether or not trailing slashes should be stripped from the URI when generating the view name. Default is "true".
Set whether or not file extensions should be stripped from the URI when generating the view name. Default is "true".
Set if URL lookup should always use the full path within the current servlet context. Else, the path within the current servlet mapping is used if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml). Default is "false".
Set if the context path and request URI should be URL-decoded. Both are returned <i>undecoded</i> by the Servlet API, in contrast to the servlet path. <p>Uses either the request encoding or the default encoding according to the Servlet spec (ISO-8859-1).
Set the {@link org.springframework.web.util.UrlPathHelper} to use for the resolution of lookup paths. <p>Use this to override the default UrlPathHelper with a custom subclass, or to share common UrlPathHelper settings across multiple web components.
Transform the request URI (in the context of the webapp) stripping slashes and extensions, and replacing the separator as required. as determined by the UrlPathHelper if desired
Create a new InternalResourceView with the given URL.
Set whether to explicitly prevent dispatching back to the current handler path. <p>Default is "false". Switch this to "true" for convention-based views where a dispatch back to the current handler path is a definitive error.
Prepare for rendering, and determine the request dispatcher path to forward to (or to include). <p>This implementation simply returns the configured URL. Subclasses can override this to determine a resource to render, typically interpreting the URL in a different manner.
Obtain the RequestDispatcher to use for the forward/include. <p>The default implementation simply calls {@link HttpServletRequest#getRequestDispatcher(String)}. Can be overridden in subclasses.
Sets the default {@link #setViewClass view class} to {@link #requiredViewClass}: by default {@link InternalResourceView}, or {@link JstlView} if the JSTL API is present.
A convenience constructor that allows for specifying {@link #setPrefix prefix} and {@link #setSuffix suffix} as constructor arguments.
Create a new JstlView with the given URL.
Create a new JstlView with the given URL. (will be wrapped with a JSTL-aware MessageSource that is aware of JSTL's {@code javax.servlet.jsp.jstl.fmt.localizationContext} context-param)
Constructor for use as a bean.
Create a new RedirectView with the given URL. <p>The given URL will be considered as relative to the web server, not as relative to the current ServletContext.
Create a new RedirectView with the given URL. relative to the current ServletContext
Create a new RedirectView with the given URL. relative to the current ServletContext exposed as query parameters
Set whether to interpret a given URL that starts with a slash ("/") as relative to the current ServletContext, i.e. as relative to the web application root. <p>Default is "false": A URL that starts with a slash will be interpreted as absolute, i.e. taken as-is. If "true", the context path will be prepended to the URL in such a case.
Set whether to stay compatible with HTTP 1.0 clients. <p>In the default implementation, this will enforce HTTP status code 302 in any case, i.e. delegate to {@code HttpServletResponse.sendRedirect}. Turning this off will send HTTP status code 303, which is the correct code for HTTP 1.1 clients, but not understood by HTTP 1.0 clients. <p>Many HTTP 1.1 clients treat 302 just like 303, not making any difference. However, some clients depend on 303 when redirecting after a POST request; turn this flag off in such a scenario.
Set the {@code exposeModelAttributes} flag which denotes whether or not model attributes should be exposed as HTTP query parameters. <p>Defaults to {@code true}.
Set the encoding scheme for this view. <p>Default is the request's encoding scheme (which is ISO-8859-1 if not specified otherwise).
Set the status code for this view. <p>Default is to send 302/303, depending on the value of the {@link #setHttp10Compatible(boolean) http10Compatible} flag.
Whether to treat the redirect URL as a URI template. Set this flag to {@code false} if the redirect URL contains open and close curly braces "{", "}" and you don't want them interpreted as URI variables. <p>Defaults to {@code true}.
When set to {@code true} the query string of the current URL is appended and thus propagated through to the redirected URL. <p>Defaults to {@code false}.
Whether to propagate the query params of the current URL.
Configure one or more hosts associated with the application. All other hosts will be considered external hosts. In effect this property provides a way turn off encoding via {@link HttpServletResponse#encodeRedirectURL} for URLs that have a host and that host is not listed as a known host. <p>If not set (the default) all URLs are encoded through the response.
Return the configured application hosts.
Create the target URL by checking if the redirect string is a URI template first, expanding it with the given model, and then optionally appending simple type model attributes as query String parameters.
Replace URI template variables in the target URL with encoded model attributes or URI variables from the current request. Model attributes referenced in the URL are removed from the model.
Append the query string of the current request to the target redirect URL.
Determine name-value pairs for query strings, which will be stringified, URL-encoded and formatted by {@link #appendQueryProperties}. <p>This implementation filters the model through checking {@link #isEligibleProperty(String, Object)} for each element, by default accepting Strings, primitives and primitive wrappers only.
Determine whether the given model element should be exposed as a query property. <p>The default implementation considers Strings and primitives as eligible, and also arrays and Collections/Iterables with corresponding elements. This can be overridden in subclasses.
Determine whether the given model element value is eligible for exposure. <p>The default implementation considers primitives, Strings, Numbers, Dates, URIs, URLs and Locale objects as eligible. This can be overridden in subclasses.
URL-encode the given input String with the given encoding scheme. <p>The default implementation uses {@code URLEncoder.encode(input, enc)}.
Find the registered {@link RequestDataValueProcessor}, if any, and allow it to update the redirect target URL.
Send a redirect back to the HTTP client
Whether the given targetUrl has a host that is a "foreign" system in which case {@link HttpServletResponse#encodeRedirectURL} will not be applied. This method returns {@code true} if the {@link #setHosts(String[])} property is configured and the target URL has a host that does not match. the URL does not have a host or the "host" property is not configured.
Determines the status code to use for HTTP 1.1 compatible requests. <p>The default implementation returns the {@link #setStatusCode(HttpStatus) statusCode} property if set, or the value of the {@link #RESPONSE_STATUS_ATTRIBUTE} attribute. If neither are set, it defaults to {@link HttpStatus#SEE_OTHER} (303).
Set a single basename, following {@link java.util.ResourceBundle} conventions. The default is "views". <p>{@code ResourceBundle} supports different suffixes. For example, a base name of "views" might map to {@code ResourceBundle} files "views", "views_en_au" and "views_de". <p>Note that ResourceBundle names are effectively classpath locations: As a consequence, the JDK's standard ResourceBundle treats dots as package separators. This means that "test.theme" is effectively equivalent to "test/theme", just like it is for programmatic {@code java.util.ResourceBundle} usage.
Set an array of basenames, each following {@link java.util.ResourceBundle} conventions. The default is a single basename "views". <p>{@code ResourceBundle} supports different suffixes. For example, a base name of "views" might map to {@code ResourceBundle} files "views", "views_en_au" and "views_de". <p>The associated resource bundles will be checked sequentially when resolving a message code. Note that message definitions in a <i>previous</i> resource bundle will override ones in a later bundle, due to the sequential lookup. <p>Note that ResourceBundle names are effectively classpath locations: As a consequence, the JDK's standard ResourceBundle treats dots as package separators. This means that "test.theme" is effectively equivalent to "test/theme", just like it is for programmatic {@code java.util.ResourceBundle} usage.
Set the {@link ClassLoader} to load resource bundles with. Default is the thread context {@code ClassLoader}.
Return the {@link ClassLoader} to load resource bundles with. <p>Default is the specified bundle {@code ClassLoader}, usually the thread context {@code ClassLoader}.
Set the default parent for views defined in the {@code ResourceBundle}. <p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions in the bundle, especially if all defined views share the same parent. <p>The parent will typically define the view class and common attributes. Concrete views might simply consist of an URL definition then: a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp". <p>View definitions that define their own parent or carry their own class can still override this. Strictly speaking, the rule that a default parent setting does not apply to a bean definition that carries a class is there for backwards compatibility reasons. It still matches the typical use case.
Specify Locales to initialize eagerly, rather than lazily when actually accessed. <p>Allows for pre-initialization of common Locales, eagerly checking the view configuration for those Locales.
Initialize the View {@link BeanFactory} from the {@code ResourceBundle}, for the given {@link Locale locale}. <p>Synchronized because of access by parallel threads.
Obtain the resource bundle for the given basename and {@link Locale}.
Set the view class that should be used to create views. (by default, AbstractUrlBasedView)
Return the view class to be used to create views.
Return the required type of view for this resolver. This implementation returns AbstractUrlBasedView.
Set the prefix that gets prepended to view names when building a URL.
Return the prefix that gets prepended to view names when building a URL.
Set the suffix that gets appended to view names when building a URL.
Return the suffix that gets appended to view names when building a URL.
Set the content type for all views. <p>May be ignored by view classes if the view itself is assumed to set the content type, e.g. in case of JSPs.
Return the content type for all views, if any.
Set whether to interpret a given redirect URL that starts with a slash ("/") as relative to the current ServletContext, i.e. as relative to the web application root. <p>Default is "true": A redirect URL that starts with a slash will be interpreted as relative to the web application root, i.e. the context path will be prepended to the URL. <p><b>Redirect URLs can be specified via the "redirect:" prefix.</b> E.g.: "redirect:myAction.do"
Return whether to interpret a given redirect URL that starts with a slash ("/") as relative to the current ServletContext, i.e. as relative to the web application root.
Set whether redirects should stay compatible with HTTP 1.0 clients. <p>In the default implementation, this will enforce HTTP status code 302 in any case, i.e. delegate to {@code HttpServletResponse.sendRedirect}. Turning this off will send HTTP status code 303, which is the correct code for HTTP 1.1 clients, but not understood by HTTP 1.0 clients. <p>Many HTTP 1.1 clients treat 302 just like 303, not making any difference. However, some clients depend on 303 when redirecting after a POST request; turn this flag off in such a scenario. <p><b>Redirect URLs can be specified via the "redirect:" prefix.</b> E.g.: "redirect:myAction.do"
Return whether redirects should stay compatible with HTTP 1.0 clients.
Configure one or more hosts associated with the application. All other hosts will be considered external hosts. In effect this property provides a way turn off encoding on redirect via {@link HttpServletResponse#encodeRedirectURL} for URLs that have a host and that host is not listed as a known host. <p>If not set (the default) all URLs are encoded through the response.
Return the configured application hosts for redirect purposes.
Set the name of the RequestContext attribute for all views.
Return the name of the RequestContext attribute for all views, if any.
Set static attributes from a {@code java.util.Properties} object, for all views returned by this resolver. <p>This is the most convenient way to set static attributes. Note that static attributes can be overridden by dynamic attributes, if a value with the same name is included in the model. <p>Can be populated with a String "value" (parsed via PropertiesEditor) or a "props" element in XML bean definitions.
Set static attributes from a Map, for all views returned by this resolver. This allows to set any kind of attribute values, for example bean references. <p>Can be populated with a "map" or "props" element in XML bean definitions.
Allow Map access to the static attributes for views returned by this resolver, with the option to add or override specific entries. <p>Useful for specifying entries directly, for example via "attributesMap[myKey]". This is particularly useful for adding or overriding entries in child view definitions.
Specify whether views resolved by this resolver should add path variables to the model or not. <p>>The default setting is to let each View decide (see {@link AbstractView#setExposePathVariables}. However, you can use this property to override that. <ul> <li>{@code true} - all Views resolved by this resolver will expose path variables <li>{@code false} - no Views resolved by this resolver will expose path variables <li>{@code null} - individual Views can decide for themselves (this is used by the default) <ul>
Return whether views resolved by this resolver should add path variables to the model or not.
Set whether to make all Spring beans in the application context accessible as request attributes, through lazy checking once an attribute gets accessed. <p>This will make all such beans accessible in plain {@code ${...}} expressions in a JSP 2.0 page, as well as in JSTL's {@code c:out} value expressions. <p>Default is "false".
Specify the names of beans in the context which are supposed to be exposed. If this is non-null, only the specified beans are eligible for exposure as attributes.
Set the view names (or name patterns) that can be handled by this {@link org.springframework.web.servlet.ViewResolver}. View names can contain simple wildcards such that 'my*', '*Report' and '*Repo*' will all match the view name 'myReport'.
Return the view names (or name patterns) that can be handled by this {@link org.springframework.web.servlet.ViewResolver}.
Set the order in which this {@link org.springframework.web.servlet.ViewResolver} is evaluated.
Indicates whether or not this {@link org.springframework.web.servlet.ViewResolver} can handle the supplied view name. If not, {@link #createView(String, java.util.Locale)} will return {@code null}. The default implementation checks against the configured {@link #setViewNames view names}.
Creates a new View instance of the specified view class and configures it. Does <i>not</i> perform any lookup for pre-defined View instances. <p>Spring lifecycle methods as defined by the bean container do not have to be called here; those will be applied by the {@code loadView} method after this method returns. <p>Subclasses will typically call {@code super.buildView(viewName)} first, before setting further properties themselves. {@code loadView} will then apply Spring lifecycle methods at the end of this process.
Set the list of view viewResolvers to delegate to.
Return the list of view viewResolvers to delegate to.
Set the location of the XML file that defines the view beans. <p>The default is "/WEB-INF/views.xml".
Initialize the view bean factory from the XML file. Synchronized because of access by parallel threads.
Create a new {@code DispatcherServlet} that will create its own internal web application context based on defaults and values provided through servlet init-params. Typically used in Servlet 2.5 or earlier environments, where the only option for servlet registration is through {@code web.xml} which requires the use of a no-arg constructor. <p>Calling {@link #setContextConfigLocation} (init-param 'contextConfigLocation') will dictate which XML files will be loaded by the {@linkplain #DEFAULT_CONTEXT_CLASS default XmlWebApplicationContext} <p>Calling {@link #setContextClass} (init-param 'contextClass') overrides the default {@code XmlWebApplicationContext} and allows for specifying an alternative class, such as {@code AnnotationConfigWebApplicationContext}. <p>Calling {@link #setContextInitializerClasses} (init-param 'contextInitializerClasses') indicates which {@code ApplicationContextInitializer} classes should be used to further configure the internal application context prior to refresh().
Create a new {@code DispatcherServlet} with the given web application context. This constructor is useful in Servlet 3.0+ environments where instance-based registration of servlets is possible through the {@link ServletContext#addServlet} API. <p>Using this constructor indicates that the following properties / init-params will be ignored: <ul> <li>{@link #setContextClass(Class)} / 'contextClass'</li> <li>{@link #setContextConfigLocation(String)} / 'contextConfigLocation'</li> <li>{@link #setContextAttribute(String)} / 'contextAttribute'</li> <li>{@link #setNamespace(String)} / 'namespace'</li> </ul> <p>The given web application context may or may not yet be {@linkplain ConfigurableApplicationContext#refresh() refreshed}. If it has <strong>not</strong> already been refreshed (the recommended approach), then the following will occur: <ul> <li>If the given context does not already have a {@linkplain ConfigurableApplicationContext#setParent parent}, the root application context will be set as the parent.</li> <li>If the given context has not already been assigned an {@linkplain ConfigurableApplicationContext#setId id}, one will be assigned to it</li> <li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to the application context</li> <li>{@link #postProcessWebApplicationContext} will be called</li> <li>Any {@code ApplicationContextInitializer}s specified through the "contextInitializerClasses" init-param or through the {@link #setContextInitializers} property will be applied.</li> <li>{@link ConfigurableApplicationContext#refresh refresh()} will be called if the context implements {@link ConfigurableApplicationContext}</li> </ul> If the context has already been refreshed, none of the above will occur, under the assumption that the user has performed these actions (or not) per their specific needs. <p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples.
Set whether to detect all HandlerMapping beans in this servlet's context. Otherwise, just a single bean with name "handlerMapping" will be expected. <p>Default is "true". Turn this off if you want this servlet to use a single HandlerMapping, despite multiple HandlerMapping beans being defined in the context.
Set whether to detect all HandlerAdapter beans in this servlet's context. Otherwise, just a single bean with name "handlerAdapter" will be expected. <p>Default is "true". Turn this off if you want this servlet to use a single HandlerAdapter, despite multiple HandlerAdapter beans being defined in the context.
Set whether to detect all HandlerExceptionResolver beans in this servlet's context. Otherwise, just a single bean with name "handlerExceptionResolver" will be expected. <p>Default is "true". Turn this off if you want this servlet to use a single HandlerExceptionResolver, despite multiple HandlerExceptionResolver beans being defined in the context.
Set whether to detect all ViewResolver beans in this servlet's context. Otherwise, just a single bean with name "viewResolver" will be expected. <p>Default is "true". Turn this off if you want this servlet to use a single ViewResolver, despite multiple ViewResolver beans being defined in the context.
Set whether to throw a NoHandlerFoundException when no Handler was found for this request. This exception can then be caught with a HandlerExceptionResolver or an {@code @ExceptionHandler} controller method. <p>Note that if {@link org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler} is used, then requests will always be forwarded to the default servlet and a NoHandlerFoundException would never be thrown in that case. <p>Default is "false", meaning the DispatcherServlet sends a NOT_FOUND error through the Servlet response.
Set whether to perform cleanup of request attributes after an include request, that is, whether to reset the original state of all request attributes after the DispatcherServlet has processed within an include request. Otherwise, just the DispatcherServlet's own request attributes will be reset, but not model attributes for JSPs or special attributes set by views (for example, JSTL's). <p>Default is "true", which is strongly recommended. Views should not rely on request attributes having been set by (dynamic) includes. This allows JSP views rendered by an included controller to use any model attributes, even with the same names as in the main JSP, without causing side effects. Only turn this off for special needs, for example to deliberately allow main JSPs to access attributes from JSP views rendered by an included controller.
Initialize the strategy objects that this servlet uses. <p>May be overridden in subclasses in order to initialize further strategy objects.
Initialize the MultipartResolver used by this class. <p>If no bean is defined with the given name in the BeanFactory for this namespace, no multipart handling is provided.
Initialize the LocaleResolver used by this class. <p>If no bean is defined with the given name in the BeanFactory for this namespace, we default to AcceptHeaderLocaleResolver.
Initialize the ThemeResolver used by this class. <p>If no bean is defined with the given name in the BeanFactory for this namespace, we default to a FixedThemeResolver.
Initialize the HandlerMappings used by this class. <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace, we default to BeanNameUrlHandlerMapping.
Initialize the HandlerAdapters used by this class. <p>If no HandlerAdapter beans are defined in the BeanFactory for this namespace, we default to SimpleControllerHandlerAdapter.
Initialize the HandlerExceptionResolver used by this class. <p>If no bean is defined with the given name in the BeanFactory for this namespace, we default to no exception resolver.
Initialize the RequestToViewNameTranslator used by this servlet instance. <p>If no implementation is configured then we default to DefaultRequestToViewNameTranslator.
Initialize the ViewResolvers used by this class. <p>If no ViewResolver beans are defined in the BeanFactory for this namespace, we default to InternalResourceViewResolver.
Initialize the {@link FlashMapManager} used by this servlet instance. <p>If no implementation is configured then we default to {@code org.springframework.web.servlet.support.DefaultFlashMapManager}.
Return this servlet's ThemeSource, if any; else return {@code null}. <p>Default is to return the WebApplicationContext as ThemeSource, provided that it implements the ThemeSource interface.
Obtain this servlet's MultipartResolver, if any. (indicating that no multipart support is available)
Return the default strategy object for the given strategy interface. <p>The default implementation delegates to {@link #getDefaultStrategies}, expecting a single object in the list.
Create a default strategy. <p>The default implementation uses {@link org.springframework.beans.factory.config.AutowireCapableBeanFactory#createBean}.
Process the actual dispatching to the handler. <p>The handler will be obtained by applying the servlet's HandlerMappings in order. The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters to find the first that supports the handler class. <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers themselves to decide which methods are acceptable.
Do we need view name translation?
Handle the result of handler selection and handler invocation, which is either a ModelAndView or an Exception to be resolved to a ModelAndView.
Convert the request into a multipart request, and make multipart resolver available. <p>If no multipart resolver is set, simply use the existing request.
Clean up any resources used by the given multipart request (if any).
Return the HandlerExecutionChain for this request. <p>Tries all handler mappings in order.
No handler found -> set appropriate HTTP response status.
Return the HandlerAdapter for this handler object.
Determine an error ModelAndView via the registered HandlerExceptionResolvers. (for example, if multipart resolution failed)
Render the given ModelAndView. <p>This is the last stage in handling a request. It may involve resolving the view by name.
Translate the supplied request into a default view name.
Resolve the given view name into a View object (to be rendered). <p>The default implementations asks all ViewResolvers of this dispatcher. Can be overridden for custom resolution strategies, potentially based on specific model attributes or request parameters. (typically in case of problems creating an actual View object)
Provide a URL path to help identify the target request for this FlashMap. <p>The path may be absolute (e.g. "/application/resource") or relative to the current request (e.g. "../resource").
Return the target URL path (or {@code null} if none specified).
Provide request parameters identifying the request for this FlashMap.
Provide a request parameter identifying the request for this FlashMap.
Return the parameters identifying the target request, or an empty map.
Start the expiration period for this instance.
Set the expiration time for the FlashMap. This is provided for serialization purposes but can also be used instead {@link #startExpirationPeriod(int)}.
Return the expiration time for the FlashMap or -1 if the expiration period has not started.
Return whether this instance has expired depending on the amount of elapsed time since the call to {@link #startExpirationPeriod}.
Create a new {@code FrameworkServlet} with the given web application context. This constructor is useful in Servlet 3.0+ environments where instance-based registration of servlets is possible through the {@link ServletContext#addServlet} API. <p>Using this constructor indicates that the following properties / init-params will be ignored: <ul> <li>{@link #setContextClass(Class)} / 'contextClass'</li> <li>{@link #setContextConfigLocation(String)} / 'contextConfigLocation'</li> <li>{@link #setContextAttribute(String)} / 'contextAttribute'</li> <li>{@link #setNamespace(String)} / 'namespace'</li> </ul> <p>The given web application context may or may not yet be {@linkplain ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong> already been refreshed (the recommended approach), then the following will occur: <ul> <li>If the given context does not already have a {@linkplain ConfigurableApplicationContext#setParent parent}, the root application context will be set as the parent.</li> <li>If the given context has not already been assigned an {@linkplain ConfigurableApplicationContext#setId id}, one will be assigned to it</li> <li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to the application context</li> <li>{@link #postProcessWebApplicationContext} will be called</li> <li>Any {@link ApplicationContextInitializer}s specified through the "contextInitializerClasses" init-param or through the {@link #setContextInitializers} property will be applied.</li> <li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li> </ul> If the context has already been refreshed or does not implement {@code ConfigurableWebApplicationContext}, none of the above will occur under the assumption that the user has performed these actions (or not) per his or her specific needs. <p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples.
Set the name of the ServletContext attribute which should be used to retrieve the {@link WebApplicationContext} that this servlet is supposed to use.
Return the name of the ServletContext attribute which should be used to retrieve the {@link WebApplicationContext} that this servlet is supposed to use.
Set a custom context class. This class must be of type {@link org.springframework.web.context.WebApplicationContext}. <p>When using the default FrameworkServlet implementation, the context class must also implement the {@link org.springframework.web.context.ConfigurableWebApplicationContext} interface.
Return the custom context class.
Specify a custom WebApplicationContext id, to be used as serialization id for the underlying BeanFactory.
Return the custom WebApplicationContext id, if any.
Set a custom namespace for this servlet, to be used for building a default context config location.
Return the namespace for this servlet, falling back to default scheme if no custom namespace was set: e.g. "test-servlet" for a servlet named "test".
Set the context config location explicitly, instead of relying on the default location built from the namespace. This location string can consist of multiple locations separated by any number of commas and spaces.
Return the explicit context config location, if any.
Specify the set of fully-qualified {@link ApplicationContextInitializer} class names, per the optional "contextInitializerClasses" servlet init-param.
Set whether to publish this servlet's context as a ServletContext attribute, available to all objects in the web container. Default is "true". <p>This is especially handy during testing, although it is debatable whether it's good practice to let other application objects access the context this way.
Set whether this servlet should publish a ServletRequestHandledEvent at the end of each request. Default is "true"; can be turned off for a slight performance improvement, provided that no ApplicationListeners rely on such events.
Set whether this servlet should dispatch an HTTP OPTIONS request to the {@link #doService} method. <p>Default in the {@code FrameworkServlet} is "false", applying {@link javax.servlet.http.HttpServlet}'s default behavior (i.e.enumerating all standard HTTP request methods as a response to the OPTIONS request). Note however that as of 4.3 the {@code DispatcherServlet} sets this property to "true" by default due to its built-in support for OPTIONS. <p>Turn this flag on if you prefer OPTIONS requests to go through the regular dispatching chain, just like other HTTP requests. This usually means that your controllers will receive those requests; make sure that those endpoints are actually able to handle an OPTIONS request. <p>Note that HttpServlet's default OPTIONS processing will be applied in any case if your controllers happen to not set the 'Allow' header (as required for an OPTIONS response).
Set whether this servlet should dispatch an HTTP TRACE request to the {@link #doService} method. <p>Default is "false", applying {@link javax.servlet.http.HttpServlet}'s default behavior (i.e. reflecting the message received back to the client). <p>Turn this flag on if you prefer TRACE requests to go through the regular dispatching chain, just like other HTTP requests. This usually means that your controllers will receive those requests; make sure that those endpoints are actually able to handle a TRACE request. <p>Note that HttpServlet's default TRACE processing will be applied in any case if your controllers happen to not generate a response of content type 'message/http' (as required for a TRACE response).
Initialize and publish the WebApplicationContext for this servlet. <p>Delegates to {@link #createWebApplicationContext} for actual creation of the context. Can be overridden in subclasses.
Retrieve a {@code WebApplicationContext} from the {@code ServletContext} attribute with the {@link #setContextAttribute configured name}. The {@code WebApplicationContext} must have already been loaded and stored in the {@code ServletContext} before this servlet gets initialized (or invoked). <p>Subclasses may override this method to provide a different {@code WebApplicationContext} retrieval strategy.
Instantiate the WebApplicationContext for this servlet, either a default {@link org.springframework.web.context.support.XmlWebApplicationContext} or a {@link #setContextClass custom context class}, if set. <p>This implementation expects custom contexts to implement the {@link org.springframework.web.context.ConfigurableWebApplicationContext} interface. Can be overridden in subclasses. <p>Do not forget to register this servlet instance as application listener on the created context (for triggering its {@link #onRefresh callback}, and to call {@link org.springframework.context.ConfigurableApplicationContext#refresh()} before returning the context instance.
Instantiate the WebApplicationContext for this servlet, either a default {@link org.springframework.web.context.support.XmlWebApplicationContext} or a {@link #setContextClass custom context class}, if set. Delegates to #createWebApplicationContext(ApplicationContext).
Delegate the WebApplicationContext before it is refreshed to any {@link ApplicationContextInitializer} instances specified by the "contextInitializerClasses" servlet init-param. <p>See also {@link #postProcessWebApplicationContext}, which is designed to allow subclasses (as opposed to end-users) to modify the application context, and is called immediately before this method.
Return the ServletContext attribute name for this servlet's WebApplicationContext. <p>The default implementation returns {@code SERVLET_CONTEXT_PREFIX + servlet name}.
Return this servlet's WebApplicationContext.
Refresh this servlet's application context, as well as the dependent state of the servlet.
Callback that receives refresh events from this servlet's WebApplicationContext. <p>The default implementation calls {@link #onRefresh}, triggering a refresh of this servlet's context-dependent state.
Template method which can be overridden to add servlet-specific refresh work. Called after successful context refresh. <p>This implementation is empty.
Process this request, publishing an event regardless of the outcome. <p>The actual event handling is performed by the abstract {@link #doService} template method.
Build a LocaleContext for the given request, exposing the request's primary locale as current locale.
Build ServletRequestAttributes for the given request (potentially also holding a reference to the response), taking pre-bound attributes (and their type) into consideration. the previously bound instance (or not binding any, if none bound before)
Determine the username for the given request. <p>The default implementation takes the name of the UserPrincipal, if any. Can be overridden in subclasses.
Subclasses must implement this method to do the work of request handling, receiving a centralized callback for GET, POST, PUT and DELETE. <p>The contract is essentially the same as that for the commonly overridden {@code doGet} or {@code doPost} methods of HttpServlet. <p>This class intercepts calls to ensure that exception handling and event publication takes place.
Create a new HandlerExecutionChain.
Create a new HandlerExecutionChain. (in the given order) before the handler itself executes
Return the handler object to execute.
Return the array of interceptors to apply (in the given order).
Apply preHandle methods of registered interceptors. next interceptor or the handler itself. Else, DispatcherServlet assumes that this interceptor has already dealt with the response itself.
Apply postHandle methods of registered interceptors.
Trigger afterCompletion callbacks on the mapped HandlerInterceptors. Will just invoke afterCompletion for all interceptors whose preHandle invocation has successfully completed and returned true.
Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.
Subclasses can invoke this method to specify that this property (which must match a JavaBean property they expose) is mandatory, and must be supplied as a config parameter. This should be called from the constructor of a subclass. <p>This method is only relevant in case of traditional initialization driven by a ServletConfig instance.
Create and return a new {@link StandardServletEnvironment}. Subclasses may override in order to configure the environment or specialize the environment type returned.
Create new ServletConfigPropertyValues. we can't accept default values
Convenient constructor when there is no model data to expose. Can also be used in conjunction with {@code addObject}. by the DispatcherServlet's ViewResolver
Convenient constructor when there is no model data to expose. Can also be used in conjunction with {@code addObject}.
Creates new ModelAndView given a view name and a model. by the DispatcherServlet's ViewResolver (Objects). Model entries may not be {@code null}, but the model Map may be {@code null} if there is no model data.
Creates new ModelAndView given a View object and a model. <emphasis>Note: the supplied model data is copied into the internal storage of this class. You should not consider to modify the supplied Map after supplying it to this class</emphasis> (Objects). Model entries may not be {@code null}, but the model Map may be {@code null} if there is no model data.
Creates new ModelAndView given a view name, model, and status. by the DispatcherServlet's ViewResolver (Objects). Model entries may not be {@code null}, but the model Map may be {@code null} if there is no model data.
Convenient constructor to take a single model object. by the DispatcherServlet's ViewResolver
Convenient constructor to take a single model object.
Set a view name for this ModelAndView, to be resolved by the DispatcherServlet via a ViewResolver. Will override any pre-existing view name or View.
Return the view name to be resolved by the DispatcherServlet via a ViewResolver, or {@code null} if we are using a View object.
Set a View object for this ModelAndView. Will override any pre-existing view name or View.
Indicate whether or not this {@code ModelAndView} has a view, either as a view name or as a direct {@link View} instance.
Return whether we use a view reference, i.e. {@code true} if the view has been specified via a name to be resolved by the DispatcherServlet via a ViewResolver.
Return the model map. May return {@code null}. Called by DispatcherServlet for evaluation of the model.
Return the underlying {@code ModelMap} instance (never {@code null}).
Return the model map. Never returns {@code null}. To be called by application code for modifying the model.
Set the status to use for the response.
Return the configured status for the response.
Add an attribute to the model.
Add an attribute to the model using parameter name generation.
Add all attributes contained in the provided Map to the model.
Clear the state of this ModelAndView object. The object will be empty afterwards. <p>Can be used to suppress rendering of a given ModelAndView object in the {@code postHandle} method of a HandlerInterceptor.
Return whether this ModelAndView object is empty, i.e. whether it does not hold any view and does not contain a model.
Return whether this ModelAndView object is empty as a result of a call to {@link #clear} i.e. whether it does not hold any view and does not contain a model. <p>Returns {@code false} if any additional state was added to the instance <strong>after</strong> the call to {@link #clear}.
Create new ModelAndViewDefiningException with the given ModelAndView, typically representing a specific error page.
Return the ModelAndView that this exception contains for forwarding to.
Constructor for NoHandlerFoundException.
Set the URL within the current web application from which to include content if the requested path isn't found, or if none is specified in the first place. <p>If specifying multiple URLs, they will be included one by one to build the response. If last-modified determination is active, the newest timestamp among those files will be used.
Set allowed resources as URL pattern, e.g. "/WEB-INF/res/*.jsp", The parameter can be any Ant-style pattern parsable by AntPathMatcher.
Set the content type of the target resource (typically a JSP). Default is none, which is appropriate when including resources. <p>For directly accessing resources, for example to leverage this servlet's last-modified support, specify a content type here. Note that a content type header in the target JSP will be ignored when including the resource via a RequestDispatcher include.
Set whether to apply the file timestamp of the target resource as last-modified value. Default is "false". <p>This is mainly intended for JSP targets that don't generate session-specific or database-driven content: Such files can be cached by the browser as long as the last-modified timestamp of the JSP file doesn't change. <p>This will only work correctly with expanded WAR files that allow access to the file timestamps. Else, the startup time of this servlet is returned.
Return a PathMatcher to use for matching the "allowedResources" URL pattern. Default is AntPathMatcher.
Determine the URL of the target resource of this request. <p>Default implementation returns the value of the "resource" parameter. Can be overridden in subclasses.
Include the specified default URL, if appropriate.
Include the specified resource via the RequestDispatcher.
Return the file timestamp for the given resource.
Process this request, handling exceptions. The actually event handling is performed by the abstract {@code renderView()} template method.
Initialize a DispatcherServlet instance registering zero or more controller classes.
Always says content is up to date
support methods
If it's non null it will be checked
Not a constant: allows overrides. Controls whether to cache views.
Constructor for MissingPortletRequestParameterException.
Constructor for PortletRequestBindingException.
Create a new PortletRequestDataBinder instance, with default object name. if the binder is just used to convert a plain parameter value)
Create a new PortletRequestDataBinder instance. if the binder is just used to convert a plain parameter value)
Create new PortletRequestPropertyValues using no prefix (and hence, no prefix separator).
Create new PortletRequestPropertyValues using the given prefix and the default prefix separator (the underscore character "_"). consist of this plus the separator)
Create new PortletRequestPropertyValues supplying both prefix and prefix separator. consist of this plus the separator) and the rest of the parameter name ("param1", "param2")
Get a String parameter, or {@code null} if not present. Throws an exception if it the parameter value is empty. so it doesn't need to be caught
Get a String parameter, throwing an exception if it isn't found or is empty. so it doesn't need to be caught
Get an array of String parameters, throwing an exception if not found or one is empty. so it doesn't need to be caught
Find the root {@link WebApplicationContext} for this web app, typically loaded via {@link org.springframework.web.context.ContextLoaderListener}. <p>Will rethrow an exception that happened on root context startup, to differentiate between a failed context startup and no context at all. (typed to ApplicationContext to avoid a Servlet API dependency; can usually be casted to WebApplicationContext, but there shouldn't be a need to)
Find the root {@link WebApplicationContext} for this web app, typically loaded via {@link org.springframework.web.context.ContextLoaderListener}. <p>Will rethrow an exception that happened on root context startup, to differentiate between a failed context startup and no context at all. (typed to ApplicationContext to avoid a Servlet API dependency; can usually be casted to WebApplicationContext, but there shouldn't be a need to)
Register web-specific scopes ("request", "session", "globalSession") with the given BeanFactory, as used by the Portlet ApplicationContext.
Register web-specific environment beans ("contextParameters", "contextAttributes") with the given BeanFactory, as used by the Portlet ApplicationContext.
Replace {@code Servlet}- and {@code Portlet}-based {@link org.springframework.core.env.PropertySource.StubPropertySource stub property sources} with actual instances populated with the given {@code servletContext}, {@code portletContext} and {@code portletConfig} objects. <p>This method is idempotent with respect to the fact it may be called any number of times but will perform replacement of stub property sources with their corresponding actual property sources once and only once. or if the {@link org.springframework.web.context.support.StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME servlet context property source} has already been initialized) or if the {@link StandardPortletEnvironment#PORTLET_CONTEXT_PROPERTY_SOURCE_NAME portlet context property source} has already been initialized) or if the {@link StandardPortletEnvironment#PORTLET_CONFIG_PROPERTY_SOURCE_NAME portlet config property source} has already been initialized)
Return the current RequestAttributes instance as PortletRequestAttributes.
Return the current PortletContext.
Create a new PortletContextAwareProcessor for the given context.
Create a new PortletContextAwareProcessor for the given config.
Create a new PortletContextAwareProcessor for the given context and config.
Create a new PortletContextResource. <p>The Portlet spec requires that resource paths start with a slash, even if many containers accept paths without leading slash too. Consequently, the given path will be prepended with a slash if it doesn't already start with one.
Return the PortletContext for this resource.
Create a new PortletContextResourceLoader.
Create a new PortletContextResourcePatternResolver.
Create a new PortletContextResourcePatternResolver. actual resources with
Recursively retrieve PortletContextResources that match the given pattern, adding them to the given result set. with preprended root directory path
Create a new Scope wrapper for the given PortletContext.
Create a new PortletRequestAttributes instance for the given request.
Exposes the native {@link PortletRequest} that we're wrapping.
Exposes the native {@link PortletResponse} that we're wrapping (if any).
Exposes the {@link PortletSession} that we're wrapping.
Create a new PortletRequestHandledEvent. request, if any (usually the UserPrincipal)
Return the name of the portlet that handled the request.
Return the mode of the portlet request (usually 'view', 'edit', or 'help').
Return the the type of Portlet Request ('action' or 'render').
Create a new PortletWebRequest instance for the given request.
Create a new PortletWebRequest instance for the given request/response pair.
Replace any {@linkplain org.springframework.core.env.PropertySource.StubPropertySource stub property source} instances acting as placeholders with real portlet context/config property sources using the given parameters. org.springframework.core.env.MutablePropertySources, ServletContext, PortletContext, PortletConfig)
Set if the resolver should render a view when the portlet is in a minimized window. The default is "false".
Check whether this resolver is supposed to apply to the given handler. <p>The default implementation checks against the specified mapped handlers and handler classes, if any, and also checks the window state (according to the "renderWhenMinimize" property). time of the exception (for example, if multipart resolution failed) for the given request and handler
Set the interceptors to apply for all handlers mapped by this handler mapping. <p>Supported interceptor types are HandlerInterceptor and WebRequestInterceptor. Each given WebRequestInterceptor will be wrapped in a WebRequestHandlerInterceptorAdapter.
Specify whether to apply WebRequestInterceptors to the Portlet render phase only ("true", or whether to apply them to the Portlet action phase as well ("false"). <p>Default is "true", since WebRequestInterceptors are usually built for MVC-style handler execution plus rendering process (which is, for example, the primary target scenario for "Open Session in View" interceptors, offering lazy loading of persistent objects during view rendering). Set this to "false" to have WebRequestInterceptors apply to the action phase as well (for example, in case of an "Open Session in View" interceptor, to allow for lazy loading outside of a transaction during the action phase).
Initialize the specified interceptors, adapting them where necessary.
Adapt the given interceptor object to the HandlerInterceptor interface. <p>Supported interceptor types are HandlerInterceptor and WebRequestInterceptor. Each given WebRequestInterceptor will be wrapped in a WebRequestHandlerInterceptorAdapter. Can be overridden in subclasses.
Return the adapted interceptors as HandlerInterceptor array.
Look up a handler for the given request, returning {@code null} if no specific one is found. This method is called by {@link #getHandler}; a {@code null} return value will lead to the default handler, if one is set. <p>Note: This method may also return a pre-built {@link HandlerExecutionChain}, combining a handler object with dynamically determined interceptors. Statically specified interceptors will get merged into such an existing chain.
Set whether to lazily initialize handlers. Only applicable to singleton handlers, as prototypes are always lazily initialized. Default is false, as eager initialization allows for more efficiency through referencing the handler objects directly. <p>If you want to allow your handlers to be lazily initialized, make them "lazy-init" and set this flag to true. Just making them "lazy-init" will not work, as they are initialized through the references from the handler mapping in this case.
Build a lookup key for the given request.
Register the given handler instance for the given parameter value. (a bean name will automatically be resolved into the corresponding handler bean)
Default callback that all "pre*" methods delegate to. <p>This implementation always returns {@code true}.
Default callback that all "after*" methods delegate to. <p>This implementation is empty.
Set the name of the parameter used for mapping to handlers. <p>Default is "action".
Set a Map with parameters as keys and handler beans or bean names as values. Convenient for population with bean references.
Set the name of the parameter used for mapping.
Cache content for the given number of seconds. Default is -1, indicating no override of portlet content caching. <p>Only if this is set to 0 (no cache) or a positive value (cache for this many seconds) will this class override the portlet settings. <p>The cache setting can be overwritten by subclasses, before content is generated.
Check and prepare the given request and response according to the settings of this generator. Checks for a required session, and applies the number of cache seconds configured for this generator (if it is a render request/response).
Check and prepare the given request and response according to the settings of this generator. Checks for a required session, and applies the number of cache seconds configured for this generator (if it is a render request/response).
Check and prepare the given request and response according to the settings of this generator. Checks for a required session, and applies the given number of cache seconds (if it is a render request/response). response should be cacheable for, 0 to prevent caching
Prevent the render response from being cached.
Set portlet response to allow caching for the given number of seconds. should be cacheable for
Apply the given cache seconds to the render response response should be cacheable for, 0 to prevent caching
Set PortletMode to handler bean name mappings from a Properties object.
Set a Map with PortletModes as keys and handler beans as values. Convenient for population with bean references.
Register all handlers specified in the Portlet mode map for the corresponding modes.
Set a Map with portlet mode names as keys and another Map as values. The sub-map has parameter names as keys and handler bean or bean names as values. <p>Convenient for population with bean references.
Set whether to allow duplicate parameter values across different portlet modes. Default is "false". <p>Doing this is dangerous because the portlet mode can be changed by the portal itself and the only way to see that is a rerender of the portlet. If the same parameter value is legal in multiple modes, then a change in mode could result in a matched mapping that is not intended and the user could end up in a strange place in the application.
Register all handlers specified in the Portlet mode map for the corresponding modes.
Register all handlers specified in the given parameter map.
Register the given handler instance for the given PortletMode and parameter value, under an appropriate lookup key.
Create a new PortletRequestMethodNotSupportedException.
Create a new PortletSessionRequiredException.
Set the mappings between exception class names and error view names. The exception class name can be a substring, with no wildcard support at present. A value of "PortletException" would match {@code javax.portet.PortletException} and subclasses, for example. <p><b>NB:</b> Consider carefully how specific the pattern is, and whether to include package information (which isn't mandatory). For example, "Exception" will match nearly anything, and will probably hide other rules. "java.lang.Exception" would be correct if "Exception" was meant to define a rule for all checked exceptions. With more unusual exception names such as "BaseBusinessException" there's no need to use a FQN. <p>Follows the same matching algorithm as RuleBasedTransactionAttribute and RollbackRuleAttribute. as keys, and error view names as values
Set the name of the model attribute as which the exception should be exposed. Default is "exception".
Determine the view name for the given exception, searching the {@link #setExceptionMappings "exceptionMappings"}, using the {@link #setDefaultErrorView "defaultErrorView"} as fallback.
Find a matching view name in the given exception mappings
Return the depth to the superclass matching. <p>0 means ex matches exactly. Returns -1 if there's no match. Otherwise, returns depth. Lowest depth wins. <p>Follows the same algorithm as {@link org.springframework.transaction.interceptor.RollbackRuleAttribute}.
Return a ModelAndView for the given request, view name and exception. Default implementation delegates to {@code getModelAndView(viewName, ex)}.
Return a ModelAndView for the given view name and exception. Default implementation adds the specified exception attribute. Can be overridden in subclasses.
Set whether to use the shared PortletConfig object passed in through {@code setPortletConfig}, if available. <p>Default is "true". Turn this setting to "false" to pass in a mock PortletConfig object with the bean name as portlet name, holding the current PortletContext.
Handle a request that is not authorized according to this interceptor. Default implementation throws a new PortletSecurityException. <p>This method can be overridden to write a custom message, forward or redirect to some error page or login page, or throw a PortletException.
Create a new WebRequestHandlerInterceptorAdapter for the given WebRequestInterceptor, applying to the render phase only.
Create a new WebRequestHandlerInterceptorAdapter for the given WebRequestInterceptor. or to the action phase as well ({@code false})
Constructor for use as bean. Determines the portlet container's temporary directory via the PortletContext passed in as through the PortletContextAware interface (typically by an ApplicationContext).
Constructor for standalone usage. Determines the portlet container's temporary directory via the given PortletContext.
Parse the given portlet request, resolving its multipart elements.
Wrap the given Portlet ActionRequest in a MultipartActionRequest. with Strings as keys and String arrays as values
Wrap the given Portlet ActionRequest in a MultipartActionRequest.
Specify the strategy to store session attributes with. <p>Default is {@link org.springframework.web.bind.support.DefaultSessionAttributeStore}, storing session attributes in the PortletSession, using the same attribute name as in the model.
Cache content produced by {@code @SessionAttributes} annotated handlers for the given number of seconds. Default is 0, preventing caching completely. <p>In contrast to the "cacheSeconds" property which will apply to all general handlers (but not to {@code @SessionAttributes} annotated handlers), this setting will apply to {@code @SessionAttributes} annotated handlers only.
Set if controller execution should be synchronized on the session, to serialize parallel invocations from the same client. <p>More specifically, the execution of each handler method will get synchronized if this flag is "true". The best available session mutex will be used for the synchronization; ideally, this will be a mutex exposed by HttpSessionMutexListener. <p>The session mutex is guaranteed to be the same object during the entire lifetime of the session, available under the key defined by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a safe reference to synchronize on for locking on the current session. <p>In many cases, the PortletSession reference itself is a safe mutex as well, since it will always be the same object reference for the same active logical session. However, this is not guaranteed across different servlet containers; the only 100% safe way is a session mutex.
Set the ParameterNameDiscoverer to use for resolving method parameter names if needed (e.g. for default attribute names). <p>Default is a {@link org.springframework.core.DefaultParameterNameDiscoverer}.
Set a custom WebArgumentResolver to use for special method parameter types. Such a custom WebArgumentResolver will kick in first, having a chance to resolve an argument value before the standard argument handling kicks in.
Set one or more custom WebArgumentResolvers to use for special method parameter types. Any such custom WebArgumentResolver will kick in first, having a chance to resolve an argument value before the standard argument handling kicks in.
Set a custom ModelAndViewResolvers to use for special method return types. Such a custom ModelAndViewResolver will kick in first, having a chance to resolve an return value before the standard ModelAndView handling kicks in.
Set one or more custom ModelAndViewResolvers to use for special method return types. Any such custom ModelAndViewResolver will kick in first, having a chance to resolve an return value before the standard ModelAndView handling kicks in.
Template method for creating a new PortletRequestDataBinder instance. <p>The default implementation creates a standard PortletRequestDataBinder. This can be overridden for custom PortletRequestDataBinder subclasses. if the binder is just used to convert a plain parameter value)
Resolves common method arguments. Delegates to registered {@link #setCustomArgumentResolver argumentResolvers} first, then checking {@link #resolveStandardArgument}.
Register all handlers specified in the Portlet mode map for the corresponding modes.
Derive portlet mode mappings from the handler's method-level mappings. {@code false} otherwise
Check whether the given portlet modes matches the specified type-level modes.
Check whether the given request matches the specified parameter conditions. {@link org.springframework.web.bind.annotation.RequestMapping#params()}
Check whether the given request matches the specified header conditions.
Set if controller execution should be synchronized on the session, to serialize parallel invocations from the same client. <p>More specifically, the execution of the {@code handleActionRequestInternal} method will get synchronized if this flag is "true". The best available session mutex will be used for the synchronization; ideally, this will be a mutex exposed by HttpSessionMutexListener. <p>The session mutex is guaranteed to be the same object during the entire lifetime of the session, available under the key defined by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a safe reference to synchronize on for locking on the current session. <p>In many cases, the PortletSession reference itself is a safe mutex as well, since it will always be the same object reference for the same active logical session. However, this is not guaranteed across different servlet containers; the only 100% safe way is a session mutex.
Set if the controller should render an view when the portlet is in a minimized window.  The default is false.
Return whether controller will render when portlet is minimized.
Subclasses are meant to override this method if the controller is expected to handle action requests. The contract is the same as for {@code handleActionRequest}. <p>The default implementation throws a PortletException.
Subclasses are meant to override this method if the controller is expected to handle render requests. The contract is the same as for {@code handleRenderRequest}. <p>The default implementation throws a PortletException.
Set the name of the view to delegate to.
Return the name of the view to delegate to.
Set the class of the Portlet to wrap. Needs to implement {@code javax.portlet.Portlet}.
Set the name of the Portlet to wrap. Default is the bean name of this controller.
Specify init parameters for the portlet to wrap, as name-value pairs.
Return the temporary directory for the current web application, as provided by the portlet container.
Return the real path of the given path within the web application, as provided by the portlet container. <p>Prepends a slash if the path does not already start with a slash, and throws a {@link java.io.FileNotFoundException} if the path cannot be resolved to a resource (in contrast to {@link javax.portlet.PortletContext#getRealPath PortletContext's {@code getRealPath}}, which simply returns {@code null}).
Check the given request for a session attribute of the given name under the {@link javax.portlet.PortletSession#PORTLET_SCOPE}. Returns {@code null} if there is no session or if the session has no such attribute in that scope. Does not create a new session if none has existed before!
Check the given request for a session attribute of the given name in the given scope. Returns {@code null} if there is no session or if the session has no such attribute in that scope. Does not create a new session if none has existed before!
Check the given request for a session attribute of the given name under the {@link javax.portlet.PortletSession#PORTLET_SCOPE}. Throws an exception if there is no session or if the session has no such attribute in that scope. <p>Does not create a new session if none has existed before!
Check the given request for a session attribute of the given name in the given scope. Throws an exception if there is no session or if the session has no such attribute in that scope. <p>Does not create a new session if none has existed before!
Set the session attribute with the given name to the given value under the {@link javax.portlet.PortletSession#PORTLET_SCOPE}. Removes the session attribute if value is {@code null}, if a session existed at all. Does not create a new session if not necessary!
Set the session attribute with the given name to the given value in the given scope. Removes the session attribute if value is {@code null}, if a session existed at all. Does not create a new session if not necessary!
Get the specified session attribute under the {@link javax.portlet.PortletSession#PORTLET_SCOPE}, creating and setting a new attribute if no existing found. The given class needs to have a public no-arg constructor. Useful for on-demand state objects in a web tier, like shopping carts.
Get the specified session attribute in the given scope, creating and setting a new attribute if no existing found. The given class needs to have a public no-arg constructor. Useful for on-demand state objects in a web tier, like shopping carts.
Return the best available mutex for the given session: that is, an object to synchronize on for the given session. <p>Returns the session mutex attribute if available; usually, this means that the {@link org.springframework.web.util.HttpSessionMutexListener} needs to be defined in {@code web.xml}. Falls back to the {@link javax.portlet.PortletSession} itself if no mutex attribute found. <p>The session mutex is guaranteed to be the same object during the entire lifetime of the session, available under the key defined by the {@link org.springframework.web.util.WebUtils#SESSION_MUTEX_ATTRIBUTE} constant. It serves as a safe reference to synchronize on for locking on the current session. <p>In many cases, the {@link javax.portlet.PortletSession} reference itself is a safe mutex as well, since it will always be the same object reference for the same active logical session. However, this is not guaranteed across different servlet containers; the only 100% safe way is a session mutex.
Expose the given Map as request attributes, using the keys as attribute names and the values as corresponding attribute values. Keys must be Strings.
Return the full name of a specific input type="submit" parameter if it was sent in the request, either via a button (directly with name) or via an image (name + ".x" or name + ".y").
Return a map containing all parameters with the given prefix. Maps single values to String and multiple values to String array. <p>For example, with a prefix of "spring_", "spring_param1" and "spring_param2" result in a Map with "param1" and "param2" as keys. <p>Similar to portlet {@link javax.portlet.PortletRequest#getParameterMap()}, but more flexible. (if this is {@code null} or the empty string, all parameters will match) containing either a String or a String array as values
Pass all the action request parameters to the render phase by putting them into the action response object. This may not be called when the action will call {@link javax.portlet.ActionResponse#sendRedirect sendRedirect}.
Clear all the render parameters from the {@link javax.portlet.ActionResponse}. This may not be called when the action will call {@link ActionResponse#sendRedirect sendRedirect}.
Serve the resource as specified in the given request to the given response, using the PortletContext's request dispatcher. <p>This is roughly equivalent to Portlet 2.0 GenericPortlet.
Check whether the specified path indicates a resource in the protected WEB-INF or META-INF directories.
Set whether to detect all HandlerMapping beans in this portlet's context. Else, just a single bean with name "handlerMapping" will be expected. <p>Default is true. Turn this off if you want this portlet to use a single HandlerMapping, despite multiple HandlerMapping beans being defined in the context.
Set whether to detect all HandlerAdapter beans in this portlet's context. Else, just a single bean with name "handlerAdapter" will be expected. <p>Default is "true". Turn this off if you want this portlet to use a single HandlerAdapter, despite multiple HandlerAdapter beans being defined in the context.
Set whether to detect all HandlerExceptionResolver beans in this portlet's context. Else, just a single bean with name "handlerExceptionResolver" will be expected. <p>Default is true. Turn this off if you want this portlet to use a single HandlerExceptionResolver, despite multiple HandlerExceptionResolver beans being defined in the context.
Set whether to detect all ViewResolver beans in this portlet's context. Else, just a single bean with name "viewResolver" will be expected. <p>Default is true. Turn this off if you want this portlet to use a single ViewResolver, despite multiple ViewResolver beans being defined in the context.
Set whether to forward exceptions thrown during the action phase to the render phase via a session attribute. <p>Default is true. Turn this off if you want the portlet container to provide immediate exception handling for action requests.
Set whether to forward exceptions thrown during the event phase to the render phase via a session attribute. <p>Default is false. Turn this on if you want the {@link DispatcherPortlet} to forward the exception to the render phase, similar to what it does for {@link #setForwardActionException action exceptions} by default.
Set the URL to the ViewRendererServlet. That servlet is used to ultimately render all views in the portlet application.
Refresh the strategy objects that this portlet uses. <p>May be overridden in subclasses in order to initialize further strategy objects.
Initialize the PortletMultipartResolver used by this class. <p>If no valid bean is defined with the given name in the BeanFactory for this namespace, no multipart handling is provided.
Initialize the HandlerMappings used by this class. <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace, we default to PortletModeHandlerMapping.
Initialize the HandlerAdapters used by this class. <p>If no HandlerAdapter beans are defined in the BeanFactory for this namespace, we default to SimpleControllerHandlerAdapter.
Initialize the HandlerExceptionResolver used by this class. <p>If no bean is defined with the given name in the BeanFactory for this namespace, we default to no exception resolver.
Initialize the ViewResolvers used by this class. <p>If no ViewResolver beans are defined in the BeanFactory for this namespace, we default to InternalResourceViewResolver.
Obtain this portlet's PortletMultipartResolver, if any. if none (indicating that no multipart support is available)
Convert the request into a multipart request, and make multipart resolver available. If no multipart resolver is set, simply use the existing request.
Return the HandlerExecutionChain for this request. Try all handler mappings in order.
No handler found -> throw appropriate exception.
Return the HandlerAdapter for this handler object. This is a fatal error.
Expose the given action exception to the given response.
Render the given ModelAndView. This is the last stage in handling a request. It may involve resolving the view by name.
Resolve the given view name into a View object (to be rendered). <p>Default implementations asks all ViewResolvers of this dispatcher. Can be overridden for custom resolution strategies, potentially based on specific model attributes or request parameters. (typically in case of problems creating an actual View object)
Actually render the given view. <p>The default implementation delegates to {@link org.springframework.web.servlet.ViewRendererServlet}.
Perform a dispatch on the given PortletRequestDispatcher. <p>The default implementation uses a forward for resource requests and an include for render requests.
Determine an error ModelAndView via the registered HandlerExceptionResolvers. the exception (for example, if multipart resolution failed)
Trigger afterCompletion callbacks on the mapped HandlerInterceptors. Will just invoke afterCompletion for all interceptors whose preHandle invocation has successfully completed and returned true.
Trigger afterCompletion callbacks on the mapped HandlerInterceptors. Will just invoke afterCompletion for all interceptors whose preHandle invocation has successfully completed and returned true.
Trigger afterCompletion callbacks on the mapped HandlerInterceptors. Will just invoke afterCompletion for all interceptors whose preHandle invocation has successfully completed and returned true.
Trigger afterCompletion callbacks on the mapped HandlerInterceptors. Will just invoke afterCompletion for all interceptors whose preHandle invocation has successfully completed and returned true.
Set a custom context class. This class must be of type ApplicationContext; when using the default FrameworkPortlet implementation, the context class must also implement ConfigurablePortletApplicationContext.
Set a custom namespace for this portlet, to be used for building a default context config location.
Return the namespace for this portlet, falling back to default scheme if no custom namespace was set. (e.g. "test-portlet" for a portlet named "test")
Set whether to publish this portlet's context as a PortletContext attribute, available to all objects in the web container. Default is true. <p>This is especially handy during testing, although it is debatable whether it's good practice to let other application objects access the context this way.
Set whether this portlet should publish a PortletRequestHandledEvent at the end of each request. Default is true; can be turned off for a slight performance improvement, provided that no ApplicationListeners rely on such events.
Set the list of attributes to search in the USER_INFO map when trying to find the username of the current user.
Initialize and publish the Portlet ApplicationContext for this portlet. <p>Delegates to {@link #createPortletApplicationContext} for actual creation. Can be overridden in subclasses.
Instantiate the Portlet ApplicationContext for this portlet, either a default XmlPortletApplicationContext or a custom context class if set. <p>This implementation expects custom contexts to implement ConfigurablePortletApplicationContext. Can be overridden in subclasses.
Return the PortletContext attribute name for this portlets's ApplicationContext. <p>The default implementation returns PORTLET_CONTEXT_PREFIX + portlet name.
Return this portlet's ApplicationContext.
Refresh this portlet's application context, as well as the dependent state of the portlet.
Template method which can be overridden to add portlet-specific refresh work. Called after successful context refresh. <p>This implementation is empty.
Process this request, publishing an event regardless of the outcome. The actual event handling is performed by the abstract {@code doActionService()} and {@code doRenderService()} template methods.
Determine the username for the given request. <p>The default implementation first tries the UserPrincipal. If that does not exist, then it checks the USER_INFO map. Can be overridden in subclasses.
Subclasses must implement this method to do the work of action request handling. <p>The contract is essentially the same as that for the {@code processAction} method of GenericPortlet. <p>This class intercepts calls to ensure that exception handling and event publication takes place.
Subclasses can invoke this method to specify that this property (which must match a JavaBean property they expose) is mandatory, and must be supplied as a config parameter. This method would normally be called from a subclass constructor.
Create and return a new {@link StandardPortletEnvironment}. Subclasses may override in order to configure the environment or specialize the environment type returned.
Create new PortletConfigPropertyValues. we can't accept default values
Convenient constructor when there is no model data to expose. Can also be used in conjunction with {@code addObject}. by the DispatcherPortlet's ViewResolver
Create a new ModelAndView given a view name and a model. by the DispatcherPortlet's ViewResolver (Objects). Model entries may not be {@code null}, but the model Map may be {@code null} if there is no model data.
Create a new ModelAndView given a View object and a model. (Objects). Model entries may not be {@code null}, but the model Map may be {@code null} if there is no model data.
Convenient constructor to take a single model object. by the DispatcherPortlet's ViewResolver
Set a view name for this ModelAndView, to be resolved by the DispatcherPortlet via a ViewResolver. Will override any pre-existing view name or View.
Return the view name to be resolved by the DispatcherPortlet via a ViewResolver, or {@code null} if we are using a view object.
Set a View object for this ModelAndView. Will override any pre-existing view name or View. <p>The given View object will usually be a Servlet MVC View object. This is nevertheless typed as Object to avoid a Servlet API dependency in the Portlet ModelAndView class.
Return the View object, or {@code null} if we are using a view name to be resolved by the DispatcherPortlet via a ViewResolver.
Indicate whether or not this {@code ModelAndView} has a view, either as a view name or as a direct view instance.
Return whether we use a view reference, i.e. {@code true} if the view has been specified via a name to be resolved by the DispatcherPortlet via a ViewResolver.
Return the model map. May return {@code null}. Called by DispatcherPortlet for evaluation of the model.
Clear the state of this ModelAndView object. The object will be empty afterwards. <p>Can be used to suppress rendering of a given ModelAndView object in the {@code postHandleRender} method of a HandlerInterceptor.
Return whether this ModelAndView object is empty as a result of a call to {@link #clear} i.e. whether it does not hold any view and does not contain a model. Returns {@code false} if any additional state was added to the instance <strong>after</strong> the call to {@link #clear}.
Constructor for NoHandlerFoundException. for further context to be included in the exception message
Set a single value for the specified property. <p>If there are already one or more values registered for the given property key, they will be replaced.
Add a single value for the specified property. <p>If there are already one or more values registered for the given property key, the given value will be added to the end of the list.
Specify whether to apply Tiles 2.2's "complete-autoload" configuration. <p>See {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory} for details on the complete-autoload mode. <p><b>NOTE: Specifying the complete-autoload mode effectively disables all other bean properties on this configurer.</b> The entire initialization procedure is then left to {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer}.
Set the {@link org.apache.tiles.preparer.PreparerFactory} implementation to use. Default is {@link org.apache.tiles.preparer.BasicPreparerFactory}, creating shared instances for specified preparer classes. <p>Specify {@link SimpleSpringPreparerFactory} to autowire {@link org.apache.tiles.preparer.ViewPreparer} instances based on specified preparer classes, applying Spring's container callbacks as well as applying configured Spring BeanPostProcessors. If Spring's context-wide annotation-config has been activated, annotations in ViewPreparer classes will be automatically detected and applied. <p>Specify {@link SpringBeanPreparerFactory} to operate on specified preparer <i>names</i> instead of classes, obtaining the corresponding Spring bean from the DispatcherServlet's application context. The full bean creation process will be in the control of the Spring application context in this case, allowing for the use of scoped beans etc. Note that you need to define one Spring bean definition per preparer name (as used in your Tiles definitions).
Creates a new instance of {@code SpringTilesInitializer}. <p>Override it to use a different initializer.
Create a new {@link JettyWebSocketSession} instance.
Create a new {@link JettyWebSocketSession} instance associated with the given user. session; the provided attributes are copied, the original map is not used. available via {@link org.eclipse.jetty.websocket.api.Session#getUpgradeRequest()}
Strategy method used to obtain the {@link ConversionService}. By default this method expects a bean named {@code 'webSocketConversionService'} in the {@link #getApplicationContext() active ApplicationContext}.
Returns the active {@link ApplicationContext}. Be default this method obtains the context via {@link ContextLoader#getCurrentWebApplicationContext()}, which finds the ApplicationContext loaded via {@link ContextLoader} typically in a Servlet container environment. When not running in a Servlet container and not using {@link ContextLoader}, this method should be overridden.
Returns the type being converted. By default the type is resolved using the generic arguments of the class.
Returns the websocket message type. By default the type is resolved using the generic arguments of the class.
Class constructor. session; the provided attributes are copied, the original map is not used.
Class constructor that associates a user with the WebSocket session. fallback on the user available in the underlying WebSocket session
Create a new instance and associate the given attributes with it. session; the provided attributes are copied, the original map is not used.
Default constructor that creates an instance of {@link org.eclipse.jetty.websocket.client.WebSocketClient}.
Constructor that accepts an existing {@link org.eclipse.jetty.websocket.client.WebSocketClient} instance.
Set an {@link AsyncListenableTaskExecutor} to use when opening connections. If this property is set to {@code null}, calls to  any of the {@code doHandshake} methods will block until the connection is established. <p>By default an instance of {@code SimpleAsyncTaskExecutor} is used.
Return the configured {@link TaskExecutor}.
by default this method returns {@code null}
Set a {@link TaskExecutor} to use to open the connection. By default {@link SimpleAsyncTaskExecutor} is used.
Set a {@link TaskExecutor} to use to open connections. By default {@link SimpleAsyncTaskExecutor} is used.
Default constructor that calls {@code ContainerProvider.getWebSocketContainer()} to obtain a (new) {@link WebSocketContainer} instance. Also see constructor accepting existing {@code WebSocketContainer} instance.
Constructor accepting an existing {@link WebSocketContainer} instance. <p>For XML configuration, see {@link WebSocketContainerFactoryBean}. For Java configuration, use {@code ContainerProvider.getWebSocketContainer()} to obtain the {@code WebSocketContainer} instance.
The standard Java WebSocket API allows passing "user properties" to the server via {@link ClientEndpointConfig#getUserProperties() userProperties}. Use this property to configure one or more properties to be passed on every handshake.
The configured user properties, or {@code null}.
Set an {@link AsyncListenableTaskExecutor} to use when opening connections. If this property is set to {@code null}, calls to  any of the {@code doHandshake} methods will block until the connection is established. <p>By default, an instance of {@code SimpleAsyncTaskExecutor} is used.
Set whether to auto-connect to the remote endpoint after this connection manager has been initialized and the Spring context has been refreshed. <p>Default is "false".
Specify the phase in which a connection should be established to the remote endpoint and subsequently closed. The startup order proceeds from lowest to highest, and the shutdown order is the reverse of that. By default this value is Integer.MAX_VALUE meaning that this endpoint connection factory connects as late as possible and is closed as soon as possible.
Decorate the WebSocketHandler provided to the class constructor. <p>By default {@link LoggingWebSocketHandlerDecorator} is added.
Set the sub-protocols to use. If configured, specified sub-protocols will be requested in the handshake through the {@code Sec-WebSocket-Protocol} header. The resulting WebSocket session will contain the protocol accepted by the server, if any.
Return the configured sub-protocols to use.
Set the origin to use.
Provide default headers to add to the WebSocket handshake request.
Return the default headers for the WebSocket handshake request.
Set the order for the resulting {@link SimpleUrlHandlerMapping} relative to other handler mappings configured in Spring MVC. <p>The default value is 1.
Set the UrlPathHelper to configure on the {@code SimpleUrlHandlerMapping} used to map handshake requests.
Return a {@link HandlerMapping} with mapped {@link HttpRequestHandler}s.
Transports with no native cross-domain communication (e.g. "eventsource", "htmlfile") must get a simple page from the "foreign" domain in an invisible iframe so that code in the iframe can run from  a domain local to the SockJS server. Since the iframe needs to load the SockJS javascript client library, this property allows specifying where to load it from. <p>By default this is set to point to also be set to point to a URL served by the application. <p>Note that it's possible to specify a relative URL in which case the URL must be relative to the iframe URL. For example assuming a SockJS endpoint mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the the relative URL must start with "../../" to traverse up to the location above the SockJS mapping. In case of a prefix-based Servlet mapping one more traversal may be needed.
Streaming transports save responses on the client side and don't free memory used by delivered messages. Such transports need to recycle the connection once in a while. This property sets a minimum number of bytes that can be send over a single HTTP streaming request before it will be closed. After that client will open a new request. Setting this value to one effectively disables streaming and will make streaming transports to behave like polling transports. <p>The default value is 128K (i.e. 128 * 1024).
The SockJS protocol requires a server to respond to the initial "/info" request from clients with a "cookie_needed" boolean property that indicates whether the use of a JSESSIONID cookie is required for the application to function correctly, e.g. for load balancing or in Java Servlet containers for the use of an HTTP session. <p>This is especially important for IE 8,9 that support XDomainRequest -- a modified AJAX/XHR -- that can do requests across domains but does not send any cookies. In those cases, the SockJS client prefers the "iframe-htmlfile" transport over "xdr-streaming" in order to be able to send cookies. <p>The default value is "true" to maximize the chance for applications to work correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in particular). However, an application can choose to set this to "false" if the use of cookies (and HTTP session) is not required.
The amount of time in milliseconds when the server has not sent any messages and after which the server should send a heartbeat frame to the client in order to keep the connection from breaking. <p>The default value is 25,000 (25 seconds).
The amount of time in milliseconds before a client is considered disconnected after not having a receiving connection, i.e. an active connection over which the server can send data to the client. <p>The default value is 5000.
The number of server-to-client messages that a session can cache while waiting for the next HTTP polling request from the client. All HTTP transports use this property since even streaming transports recycle HTTP requests periodically. <p>The amount of time between HTTP requests should be relatively brief and will not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)}), 5 seconds by default. <p>The default size is 100.
Some load balancers don't support WebSocket. This option can be used to disable the WebSocket transport on the server side. <p>The default value is "true".
This option can be used to disable automatic addition of CORS headers for SockJS requests. <p>The default value is "false".
The codec to use for encoding and decoding SockJS messages. <p>By default {@code Jackson2SockJsMessageCodec} is used requiring the Jackson library to be present on the classpath.
Return a handler mapping with the mapped ViewControllers; or {@code null} in case of no registrations.
Configure the maximum size for an incoming sub-protocol message. For example a STOMP message may be received as multiple WebSocket messages or multiple HTTP POST requests when SockJS fallback options are in use. <p>In theory a WebSocket message can be almost unlimited in size. In practice WebSocket servers impose limits on incoming message size. STOMP clients for example tend to split large messages around 16K boundaries. Therefore a server must be able to buffer partial content and decode when enough data is received. Use this property to configure the max size of the buffer to use. <p>The default value is 64K (i.e. 64 * 1024). <p><strong>NOTE</strong> that the current version 1.2 of the STOMP spec does not specifically discuss how to send STOMP messages over WebSocket. Version 2 of the spec will but in the mean time existing client libraries have already established a practice that servers must handle.
Protected accessor for internal use.
Configure a time limit (in milliseconds) for the maximum amount of a time allowed when sending messages to a WebSocket session or writing to an HTTP response when SockJS fallback option are in use. <p>In general WebSocket servers expect that messages to a single WebSocket session are sent from a single thread at a time. This is automatically guaranteed when using {@code @EnableWebSocketMessageBroker} configuration. If message sending is slow, or at least slower than rate of messages sending, subsequent messages are buffered until either the {@code sendTimeLimit} or the {@code sendBufferSizeLimit} are reached at which point the session state is cleared and an attempt is made to close the session. <p><strong>NOTE</strong> that the session time limit is checked only on attempts to send additional messages. So if only a single message is sent and it hangs, the session will not time out until another message is sent or the underlying physical socket times out. So this is not a replacement for WebSocket server or HTTP connection timeout but is rather intended to control the extent of buffering of unsent messages. <p><strong>NOTE</strong> that closing the session may not succeed in actually closing the physical socket and may also hang. This is true especially when using blocking IO such as the BIO connector in Tomcat that is used by default on Tomcat 7. Therefore it is recommended to ensure the server is using non-blocking IO such as Tomcat's NIO connector that is used by default on Tomcat 8. If you must use blocking IO consider customizing OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2} on Linux. <p>The default value is 10 seconds (i.e. 10 * 10000). greater than 0, otherwise it is ignored.
Protected accessor for internal use.
Configure the maximum amount of data to buffer when sending messages to a WebSocket session, or an HTTP response when SockJS fallback option are in use. <p>In general WebSocket servers expect that messages to a single WebSocket session are sent from a single thread at a time. This is automatically guaranteed when using {@code @EnableWebSocketMessageBroker} configuration. If message sending is slow, or at least slower than rate of messages sending, subsequent messages are buffered until either the {@code sendTimeLimit} or the {@code sendBufferSizeLimit} are reached at which point the session state is cleared and an attempt is made to close the session. <p><strong>NOTE</strong> that closing the session may not succeed in actually closing the physical socket and may also hang. This is true especially when using blocking IO such as the BIO connector in Tomcat configured by default on Tomcat 7. Therefore it is recommended to ensure the server is using non-blocking IO such as Tomcat's NIO connector used by default on Tomcat 8. If you must use blocking IO consider customizing OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2} on Linux. <p>The default value is 512K (i.e. 512 * 1024). sending messages; if the value is less than or equal to 0 then buffering is effectively disabled.
Protected accessor for internal use.
Configure one or more factories to decorate the handler used to process WebSocket messages. This may be useful in some advanced use cases, for example to allow Spring Security to forcibly close the WebSocket session when the corresponding HTTP session expires.
Add a factory that to decorate the handler used to process WebSocket messages. This may be useful for some advanced use cases, for example to allow Spring Security to forcibly close the WebSocket session when the corresponding HTTP session expires.
Set the frequency for logging information at INFO level in milliseconds. If set 0 or less than 0, the logging task is cancelled. <p>By default this property is set to 30 minutes (30 * 60 * 1000).
Return the configured logging period frequency in milliseconds.
Get stats about WebSocket sessions.
Get stats about STOMP-related WebSocket message processing.
Get stats about STOMP broker relay (when using a full-featured STOMP broker).
Get stats about the executor processing incoming messages from WebSocket clients.
Get stats about the executor processing outgoing messages to WebSocket clients.
Get stats about the SockJS task scheduler.
Create a new {@code ConcurrentWebSocketSessionDecorator}.
Create a new AbstractSubProtocolEvent.
Return the Message associated with the event. Here is an example of obtaining information about the session id or any headers in the message: <pre class="code"> StompHeaderAccessor headers = StompHeaderAccessor.wrap(message); headers.getSessionId(); headers.getSessionAttributes(); headers.getPrincipal(); </pre>
Return the user for the session associated with the event.
Create a new SessionConnectedEvent.
Create a new SessionConnectEvent.
Create a new SessionDisconnectEvent.
Return the session id.
Return the status with which the session was closed.
Configure a handler for error messages sent to clients which allows customizing the error messages or preventing them from being sent. <p>By default this isn't configured in which case an ERROR frame is sent with a message header reflecting the error.
Return the configured error handler.
Configure the maximum size allowed for an incoming STOMP message. Since a STOMP message can be received in multiple WebSocket messages, buffering may be required and therefore it is necessary to know the maximum allowed message size. <p>By default this property is set to 64K.
Get the configured message buffer size limit in bytes.
Configure a {@link MessageHeaderInitializer} to apply to the headers of all messages created from decoded STOMP frames and other messages sent to the client inbound channel. <p>By default this property is not set.
Handle incoming WebSocket messages from clients.
The simple broker produces {@code SimpMessageType.CONNECT_ACK} that's not STOMP specific and needs to be turned into a STOMP CONNECTED frame.
Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels.
Configure one or more handlers to use depending on the sub-protocol requested by the client in the WebSocket handshake request.
Register a sub-protocol handler.
Return the sub-protocols keyed by protocol name.
Set the {@link SubProtocolHandler} to use when the client did not request a sub-protocol.
Return the default sub-protocol handler to use.
Return all supported protocols.
Specify the send-time limit (milliseconds).
Return the send-time limit (milliseconds).
Specify the buffer-size limit (number of bytes).
Return the buffer-size limit (number of bytes).
When a session is connected through a higher-level protocol it has a chance to use heartbeat management to shut down sessions that are too slow to send or receive messages. However, after a WebSocketSession is established and before the higher level protocol is fully connected there is a possibility for sessions to hang. This method checks and closes any sessions that have been connected for more than 60 seconds without having received a single message.
Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will reset it back to the preferred "10000,10000" when a {@link #setTaskScheduler} is configured.
Return the configured WebSocketClient.
Configure the maximum size allowed for inbound STOMP message. Since a STOMP message can be received in multiple WebSocket messages, buffering may be required and this property determines the maximum buffer size per message. <p>By default this is set to 64 * 1024 (64K).
Get the configured inbound message buffer size in bytes.
Set whether to auto-start the contained WebSocketClient when the Spring context has been refreshed. <p>Default is "true".
Specify the phase in which the WebSocket client should be started and subsequently closed. The startup order proceeds from lowest to highest, and the shutdown order is the reverse of that. <p>By default this is Integer.MAX_VALUE meaning that the WebSocket client is started as late as possible and stopped as soon as possible.
Connect to the given WebSocket URL and notify the given {@link org.springframework.messaging.simp.stomp.StompSessionHandler} when connected on the STOMP level after the CONNECTED frame is received.
An overloaded version of {@link #connect(String, StompSessionHandler, Object...)} that also accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake.
An overloaded version of {@link #connect(String, StompSessionHandler, Object...)} that also accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake and {@link StompHeaders} for the STOMP CONNECT frame.
An overloaded version of {@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)} that accepts a fully prepared {@link java.net.URI}.
Default constructor that creates {@link WebSocketServerFactory} through its default constructor thus using a default {@link WebSocketPolicy}.
A constructor accepting a {@link WebSocketServerFactory}. This may be useful for modifying the factory's {@link WebSocketPolicy} via {@link WebSocketServerFactory#getPolicy()}.
Explicitly list annotated endpoint types that should be registered on startup. This can be done if you wish to turn off a Servlet container's scan for endpoints, which goes through all 3rd party jars in the, and rely on Spring configuration instead.
Set the JSR-356 {@link ServerContainer} to use for endpoint registration. If not set, the container is going to be retrieved via the {@code ServletContext}.
Return the JSR-356 {@link ServerContainer} to use for endpoint registration.
Actually register the endpoints. Called by {@link #afterSingletonsInstantiated()}.
Create a new {@link ServerEndpointRegistration} instance from an {@code javax.websocket.Endpoint} class.
Create a new {@link ServerEndpointRegistration} instance from an {@code javax.websocket.Endpoint} instance.
Default constructor that auto-detects and instantiates a {@link RequestUpgradeStrategy} suitable for the runtime container.
A constructor that accepts a runtime-specific {@link RequestUpgradeStrategy}.
Return the {@link RequestUpgradeStrategy} for WebSocket requests.
Use this property to configure the list of supported sub-protocols. The first configured sub-protocol that matches a client-requested sub-protocol is accepted. If there are no matches the response will not contain a {@literal Sec-WebSocket-Protocol} header. <p>Note that if the WebSocketHandler passed in at runtime is an instance of {@link SubProtocolCapable} then there is not need to explicitly configure this property. That is certainly the case with the built-in STOMP over WebSocket support. Therefore this property should be configured explicitly only if the WebSocketHandler does not implement {@code SubProtocolCapable}.
Return the list of supported sub-protocols.
Return whether the request {@code Origin} header value is valid or not. By default, all origins as considered as valid. Consider using an {@link OriginHandshakeInterceptor} for filtering origins if needed.
Perform the sub-protocol negotiation based on requested and supported sub-protocols. For the list of supported sub-protocols, this method first checks if the target WebSocketHandler is a {@link SubProtocolCapable} and then also checks if any sub-protocols have been explicitly configured with {@link #setSupportedProtocols(String...)}.
Determine the sub-protocols supported by the given WebSocketHandler by checking whether it is an instance of {@link SubProtocolCapable}.
Filter the list of requested WebSocket extensions. <p>As of 4.1, the default implementation of this method filters the list to leave only extensions that are both requested and supported.
A method that can be used to associate a user with the WebSocket session in the process of being established. The default implementation calls {@link ServerHttpRequest#getPrincipal()} <p>Subclasses can provide custom logic for associating a user with a session, for example for assigning a name to anonymous users (i.e. not fully authenticated).
Default constructor for copying all HTTP session attributes and the HTTP session id.
Constructor for copying specific HTTP session attributes and the HTTP session id.
Return the configured attribute names to copy (read-only).
Whether to copy all attributes from the HTTP session. If set to "true", any explicitly configured attribute names are ignored. <p>By default this is set to either "true" or "false" depending on which constructor was used (default or with attribute names respectively).
Whether to copy all HTTP session attributes.
Whether the HTTP session id should be copied to the handshake attributes under the key {@link #HTTP_SESSION_ID_ATTR_NAME}. <p>By default this is "true".
Whether to copy the HTTP session id to the handshake attributes.
Whether to allow the HTTP session to be created while accessing it. <p>By default set to {@code false}.
Whether the HTTP session is allowed to be created.
Constructor using the specified allowed origin values.
Configure allowed {@code Origin} header values. This check is mostly designed for browsers. There is nothing preventing other types of client to modify the {@code Origin} header value. <p>Each provided allowed origin must have a scheme, and optionally a port string may also be "*" in which case all origins are allowed.
Return the WebSocketHandler.
Return the HandshakeHandler.
Configure one or more WebSocket handshake request interceptors.
Return the configured WebSocket handshake request interceptors.
Return a timeout cleanup task to invoke if the SockJS sessions is not fully established within the retransmission timeout period calculated in {@code SockJsRequest} based on the duration of the initial SockJS "Info" request.
An {@code XhrTransport} can support both the "xhr_streaming" and "xhr" SockJS server transports. From a client perspective there is no implementation difference. <p>Typically an {@code XhrTransport} is used as "XHR streaming" first and then, if that fails, as "XHR". In some cases however it may be helpful to suppress XHR streaming so that only XHR is attempted. <p>By default this property is set to {@code false} which means both "XHR streaming" and "XHR" apply.
Whether XHR streaming is disabled or not.
Return the configured {@code RestTemplate}.
Configure the {@code TaskExecutor} to use to execute XHR receive requests. <p>By default {@link org.springframework.core.task.SimpleAsyncTaskExecutor SimpleAsyncTaskExecutor} is configured which creates a new thread every time the transports connects.
Return the configured {@code TaskExecutor}.
Create a {@code SockJsClient} with the given transports. <p>If the list includes an {@link XhrTransport} (or more specifically an implementation of {@link InfoReceiver}) the instance is used to initialize the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or otherwise is defaulted to {@link RestTemplateXhrTransport}.
The names of HTTP headers that should be copied from the handshake headers of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)} and also used with other HTTP requests issued as part of that SockJS connection, e.g. the initial info request, XHR send or receive requests. <p>By default if this property is not set, all handshake headers are also used for other HTTP requests. Set it if you want only a subset of handshake headers (e.g. auth headers) to be used for other HTTP requests.
The configured HTTP header names to be copied from the handshake headers and also included in other HTTP requests.
Configure the {@code InfoReceiver} to use to perform the SockJS "Info" request before the SockJS session starts. <p>If the list of transports provided to the constructor contained an {@link XhrTransport} or an implementation of {@link InfoReceiver} that instance would have been used to initialize this property, or otherwise it defaults to {@link RestTemplateXhrTransport}.
Return the configured {@code InfoReceiver} (never {@code null}).
Set the SockJsMessageCodec to use. <p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.
Return the SockJsMessageCodec to use.
Configure a {@code TaskScheduler} for scheduling a connect timeout task where the timeout value is calculated based on the duration of the initial SockJS "Info" request. The connect timeout task ensures a more timely fallback but is otherwise entirely optional. <p>By default this is not configured in which case a fallback may take longer.
Return the user to associate with the SockJS session and make available via {@link org.springframework.web.socket.WebSocketSession#getPrincipal()}. <p>By default this method returns {@code null}.
By default the result of a SockJS "Info" request, including whether the server has WebSocket disabled and how long the request took (used for calculating transport timeout time) is cached. This method can be used to clear that cache hence causing it to re-populate.
Return Undertow's native HTTP client
Return the {@link org.xnio.XnioWorker} backing the I/O operations for Undertow's HTTP client.
Return the configured {@code WebSocketClient}.
See "JSON Unicode Encoding" section of SockJS protocol.
See `escapable_by_server` variable in the SockJS protocol test suite.
Create a new instance frame with the given frame content.
Return the SockJS frame type.
Return the SockJS frame content, never {@code null}.
Return the SockJS frame content as a byte array.
Return data contained in a SockJS "message" and "close" frames. Otherwise for SockJS "open" and "close" frames, which do not contain data, return {@code null}.
A scheduler instance to use for scheduling heart-beat messages.
Set a unique name for this service (mainly for logging purposes).
Return the unique name associated with this service.
Transports with no native cross-domain communication (e.g. "eventsource", "htmlfile") must get a simple page from the "foreign" domain in an invisible iframe so that code in the iframe can run from  a domain local to the SockJS server. Since the iframe needs to load the SockJS javascript client library, this property allows specifying where to load it from. <p>By default this is set to point to However, it can also be set to point to a URL served by the application. <p>Note that it's possible to specify a relative URL in which case the URL must be relative to the iframe URL. For example assuming a SockJS endpoint mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the the relative URL must start with "../../" to traverse up to the location above the SockJS mapping. In case of a prefix-based Servlet mapping one more traversal may be needed.
Return he URL to the SockJS JavaScript client library.
Streaming transports save responses on the client side and don't free memory used by delivered messages. Such transports need to recycle the connection once in a while. This property sets a minimum number of bytes that can be sent over a single HTTP streaming request before it will be closed. After that client will open a new request. Setting this value to one effectively disables streaming and will make streaming transports to behave like polling transports. <p>The default value is 128K (i.e. 128 * 1024).
Return the minimum number of bytes that can be sent over a single HTTP streaming request before it will be closed.
The SockJS protocol requires a server to respond to an initial "/info" request from clients with a "cookie_needed" boolean property that indicates whether the use of a JSESSIONID cookie is required for the application to function correctly, e.g. for load balancing or in Java Servlet containers for the use of an HTTP session. <p>This is especially important for IE 8,9 that support XDomainRequest -- a modified AJAX/XHR -- that can do requests across domains but does not send any cookies. In those cases, the SockJS client prefers the "iframe-htmlfile" transport over "xdr-streaming" in order to be able to send cookies. <p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID cookie when this property is set to true. However, when running in a Servlet container this is not necessary since the container takes care of it. <p>The default value is "true" to maximize the chance for applications to work correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in particular). However, an application can choose to set this to "false" if the use of cookies (and HTTP session) is not required.
Return whether the JSESSIONID cookie is required for the application to function.
Specify the amount of time in milliseconds when the server has not sent any messages and after which the server should send a heartbeat frame to the client in order to keep the connection from breaking. <p>The default value is 25,000 (25 seconds).
Return the amount of time in milliseconds when the server has not sent any messages.
Return the amount of time in milliseconds before a client is considered disconnected.
The number of server-to-client messages that a session can cache while waiting for the next HTTP polling request from the client. All HTTP transports use this property since even streaming transports recycle HTTP requests periodically. <p>The amount of time between HTTP requests should be relatively brief and will not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)}); 5 seconds by default. <p>The default size is 100.
Return the size of the HTTP message cache.
Some load balancers do not support WebSocket. This option can be used to disable the WebSocket transport on the server side. <p>The default value is "true".
Return whether WebSocket transport is enabled.
This option can be used to disable automatic addition of CORS headers for SockJS requests. <p>The default value is "false".
Configure allowed {@code Origin} header values. This check is mostly designed for browsers. There is nothing preventing other types of client to modify the {@code Origin} header value. <p>When SockJS is enabled and origins are restricted, transport types that do not allow to check request origin (JSONP and Iframe based transports) are disabled. As a consequence, IE 6 to 9 are not supported when origins are restricted. <p>Each provided allowed origin must have a scheme, and optionally a port string may also be "*" in which case all origins are allowed.
Ensure the path does not contain a file extension, either in the filename (e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp;Setup.bat") which could be used for RFD exploits. <p>Since the last part of the path is expected to be a transport type, the presence of an extension would not work. All we need to do is check if there are any path parameters, which would have been removed from the SockJS path during request mapping, and if found reject the request.
Handle request for raw WebSocket communication, i.e. without any SockJS message framing.
Create a new SockJsHttpRequestHandler.
Return the {@link SockJsService}.
Return the {@link WebSocketHandler}.
Create a DefaultSockJsService with default {@link TransportHandler handler} types. timed-out sessions; the provided TaskScheduler should be declared as a Spring bean to ensure it is initialized at start up and shut down when the application stops.
Create a DefaultSockJsService with overridden {@link TransportHandler handler} types replacing the corresponding default handler implementation. the provided TaskScheduler should be declared as a Spring bean to ensure it gets initialized at start-up and shuts down when the application stops
Unlike WebSocket where sub-protocol negotiation is part of the initial handshake, in HTTP transports the same negotiation must be emulated and the selected protocol set through this setter.
Return the selected sub-protocol to use.
Return the SockJS buffer for messages stored transparently between polling requests. If the polling request takes longer than 5 seconds, the session is closed.
Handle the first request for receiving messages on a SockJS HTTP transport based session. <p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request after writing the open frame. Streaming-based transports ("xhr_streaming", "eventsource", and "htmlfile") leave the response open longer for further streaming of message frames but will also close it eventually after some amount of data has been sent.
Handle all requests, except the first one, to receive messages on a SockJS HTTP transport based session. <p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request after writing any buffered message frames (or the next one). Streaming-based transports ("xhr_streaming", "eventsource", and "htmlfile") leave the response open longer for further streaming of message frames but will also close it eventually after some amount of data has been sent.
Invoked when a SockJS transport request is received.
Called when the connection is active and ready to write to the response. Subclasses should only call this method from a method where the "responseLock" is acquired.
Create a new instance. session; the provided attributes are copied, the original map is not used.
Message sending
Should be invoked whenever the session becomes inactive.
Actually close the underlying WebSocket session or in the case of HTTP transports complete the underlying request.
Invoked when the underlying connection is closed.
Close due to error arising from SockJS transport handling.
Create a TransportHandlingSockJsService with given {@link TransportHandler handler} types. the provided TaskScheduler should be declared as a Spring bean to ensure it gets initialized at start-up and shuts down when the application stops
Return the registered handlers per transport type.
The codec to use for encoding and decoding SockJS messages.
Constructor for SockJsException.
Return the SockJS session id.
Constructor for SockJsTransportFailureException.
Create a new WebSocket message with the given payload.
Create a new WebSocket message given payload representing the full or partial message content. When the {@code isLast} boolean flag is set to {@code false} the message is sent as partial content and more partial messages will be expected until the boolean flag is set to {@code true}.
Return the message payload, never be {@code null}.
Whether this is the last part of a message sent as a series of partial messages.
Create a new binary WebSocket message with the given ByteBuffer payload.
Create a new binary WebSocket message with the given payload representing the full or partial message content. When the {@code isLast} boolean flag is set to {@code false} the message is sent as partial content and more partial messages will be expected until the boolean flag is set to {@code true}.
Create a new binary WebSocket message with the given byte[] payload. must be taken not to modify the array.
Create a new binary WebSocket message with the given byte[] payload representing the full or partial message content. When the {@code isLast} boolean flag is set to {@code false} the message is sent as partial content and more partial messages will be expected until the boolean flag is set to {@code true}. must be taken not to modify the array.
Create a new binary WebSocket message by wrapping an existing byte array. must be taken not to modify the array.
Create a new {@link CloseStatus} instance.
Return the status code.
Return the reason, or {@code null} if none.
Create a new {@link CloseStatus} from this one with the specified reason.
Create a new ping message with an empty payload.
Create a new ping message with the given ByteBuffer payload.
Create a new pong message with an empty payload.
Create a new pong message with the given ByteBuffer payload.
Create a new text WebSocket message from the given CharSequence payload.
Create a new text WebSocket message from the given byte[]. It is assumed the byte array can be encoded into an UTF-8 String.
Create a new text WebSocket message with the given payload representing the full or partial message content. When the {@code isLast} boolean flag is set to {@code false} the message is sent as partial content and more partial messages will be expected until the boolean flag is set to {@code true}.
Create a WebSocketExtension with the given name.
Create a WebSocketExtension with the given name and parameters.
Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects. <p>This method can be used to parse a "Sec-WebSocket-Extension" extensions.
Create a new instance.
Create an instance that wraps the given pre-existing HttpHeaders and also propagate all changes to it.
Private constructor that can create read-only {@code WebSocketHttpHeader} instances.
Returns {@code WebSocketHttpHeaders} object that can only be read, not written to.
Sets the (new) value of the {@code Sec-WebSocket-Accept} header.
Returns the value of the {@code Sec-WebSocket-Accept} header.
Returns the value of the {@code Sec-WebSocket-Extensions} header.
Sets the (new) value(s) of the {@code Sec-WebSocket-Extensions} header.
Sets the (new) value of the {@code Sec-WebSocket-Key} header.
Returns the value of the {@code Sec-WebSocket-Key} header.
Sets the (new) value of the {@code Sec-WebSocket-Protocol} header.
Returns the value of the {@code Sec-WebSocket-Key} header.
Sets the (new) value of the {@code Sec-WebSocket-Version} header.
Returns the value of the {@code Sec-WebSocket-Version} header.
mmm, there is no setter method for the 'components'
This method is solely to allow us to create a mixture of dependencies in the bean definitions. The dependencies don't have any meaning, and don't <b>do</b> anything.
Inherits transaction attribute. Illustrates programmatic rollback.
Extracted in a protected method to facilitate testing
Provide a message via a mock JMS template and wait for the default timeout to receive the message on the expected channel
Provide a message via a mock JMS template and wait for the specified timeout to receive the message on the expected channel not long enough
Resolve a customer to a channel, where each customer gets a private application context and the channel is the inbound channel to that application context.
Use Spring 3.1. environment support to set properties for the customer-specific application context.
place some orders
Place some orders.
Aggregates LoanQuote Messages to return a single reply Message.
Load the Spring Integration Application Context
Default Constructor.
Simple application that polls the current system time 2 times every 20 seconds (20000 milliseconds). The resulting message contains the time in milliseconds and the message is routed to a Logging Channel Adapter which will print the time to the command prompt.
Sets the person id
Get the person Id
Gets the name of the person
Gets the gender of the person
Gets the date of birth of the person
Convert a CustomOrder object into a byte-stream
Convert a raw byte stream into a CustomOrder
Check whether the byte passed in is the "closed socket" byte Note, I put this in here just as an example, but you could just extend the {@link org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer} class which has this method
Show, explicitly, how the stream would look if you had to manually create it. See more about TCP synchronous communication for more about framing the stream
Create a trigger with the given period in milliseconds. The underlying {@link TimeUnit} will be initialized to TimeUnit.MILLISECONDS.
Create a trigger with the given period and time unit. The time unit will apply not only to the period but also to any 'initialDelay' value, if configured on this Trigger later via {@link #setInitialDelay(long)}.
Returns the time after which a task should run again.
Specify the period of the trigger. It will be evaluated in terms of this trigger's {@link TimeUnit}. If no time unit was explicitly provided upon instantiation, the default is milliseconds.
The data to save to the file system, e.g. text messages/attachments, binary file attachments etc.
The file name to create for the respective {@link EmailFragment}.
The directory where to store the {@link #getData()} using the specified {@link #getFilename()}.
Prevent instantiation.
Parses a mail message. The respective message can either be the root message or another message that is attached to another message. If the mail message is an instance of {@link String}, then a {@link EmailFragment} is being created using the email message's subject line as the file name, which will contain the mail message's content. If the mail message is an instance of {@link Multipart} then we delegate to {@link #handleMultipart(File, Multipart, javax.mail.Message, List)}.
Parses any {@link Multipart} instances that contain text or Html attachments, {@link InputStream} instances, additional instances of {@link Multipart} or other attached instances of {@link javax.mail.Message}. Will create the respective {@link EmailFragment}s representing those attachments. Instances of {@link javax.mail.Message} are delegated to {@link #handleMessage(File, javax.mail.Message, List)}. Further instances of {@link Multipart} are delegated to {@link #handleMultipart(File, Multipart, javax.mail.Message, List)}.
Default constructor.
Constructor to initialize all fields available.
Constructor that initializes the 'twitterMessages' Map as a simple LRU
Called by Spring Integration to populate a simple LRU cache.
not supplied {@link Object} will be added as a catch-all.
Annotation introspector to use for serialization process is configured separately for serialization and deserialization purposes
The API <code>setReturnStatusAndMessage()</code> sets the return status and return message in the return message payload and its header.
If this service receives a payload 'failnnn' where nnn is the number of failures, it will fail that many times for a given message id.
Succeeds only if called any time in the fourth quarter of any minute (seconds 45 thru 59)
Default Constructor
Prettifies XML data, e.g. add indentation.
If this service receives a payload 'fail.*' it throws an Exception.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
This implementation supports any type of class, because it does not query the presented secure object.
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Constructors =================================================================================================== Sets the permission mask and uses the '*' character to represent active bits when represented as a bit pattern string.
Sets the permission mask and uses the specified character for active bits. {@link Permission#getPattern()})
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
Constructor. The only mandatory parameter relates to the system-wide {@link GrantedAuthority} instances that can be held to always permit ACL changes. (index 0 is the authority needed to change ownership, index 1 is the authority needed to modify auditing details, index 2 is the authority needed to change other ACL and ACE details) (required) <p> Alternatively, a single value can be supplied for all three permissions.
~ Methods ========================================================================================================
Creates a principal-like sid from the authentication information. thus the sid's id will be dependant on the value inside
Returns a representation of the active bits in the presented mask, with each active bit being denoted by character '*'. <p> Inactive bits will be denoted by character {@link Permission#RESERVED_OFF}.
Returns a representation of the active bits in the presented mask, with each active bit being denoted by the passed character. <p> Inactive bits will be denoted by character {@link Permission#RESERVED_OFF}.
Minimal constructor, which should be used {@link org.springframework.security.acls.model.MutableAclService#createAcl(ObjectIdentity)}
Full constructor, which should be used by persistence tools that do not provide field-level access features. by the {@code isGranted()} method
~ Methods ========================================================================================================
Delegates to the {@link PermissionGrantingStrategy}. ACL was only loaded for a subset of SIDs
~ Methods ========================================================================================================
Registers the <tt>Permission</tt> fields from the <tt>BasePermission</tt> class.
Registers the <tt>Permission</tt> fields from the supplied class.
Registers a map of named <tt>Permission</tt> instances.
Registers the public static fields of type {@link Permission} for a give class. <p> These permissions will be registered under the name of the field. See {@link BasePermission} for an example.
Creates an instance with the logger which will be used to record granting and denial of requested permissions.
Determines authorization. The order of the <code>permission</code> and <code>sid</code> arguments is <em>extremely important</em>! The method will iterate through each of the <code>permission</code>s in the order specified. For each iteration, all of the <code>sid</code>s will be considered, again in the order they are presented. A search will then be performed for the first {@link AccessControlEntry} object that directly matches that <code>permission:sid</code> combination. When the <em>first full match</em> is found (ie an ACE that has the SID currently being searched for and the exact permission bit mask being search for), the grant or deny flag for that ACE will prevail. If the ACE specifies to grant access, the method will return <code>true</code>. If the ACE specifies to deny access, the loop will stop and the next <code>permission</code> iteration will be performed. If each permission indicates to deny access, the first deny ACE found will be considered the reason for the failure (as it was the first match found, and is therefore the one most logically requiring changes - although not always). If absolutely no matching ACE was found at all for any permission, the parent ACL will be tried (provided that there is a parent and {@link Acl#isEntriesInheriting()} is <code>true</code>. The parent ACL will also scan its parent and so on. If ultimately no matching ACE is found, a <code>NotFoundException</code> will be thrown and the caller will need to decide how to handle the permission check. Similarly, if any of the SID arguments presented to the method were not loaded by the ACL, <code>UnloadedSidException</code> will be thrown. administrative purposes and no auditing will be undertaken <code>false</code> if one of the permissions has been specifically revoked SID combination could not be found
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
Constructs an <code>IdentityUnavailableException</code> with the specified message.
Constructs an <code>IdentityUnavailableException</code> with the specified message and root cause.
~ Constructors ===================================================================================================
Constructor which uses the name of the supplied class as the <tt>type</tt> property.
Creates the <code>ObjectIdentityImpl</code> based on the passed object instance. The passed object must provide a <code>getId()</code> method, otherwise an exception will be thrown. <p> The class name of the object passed will be considered the {@link #type}, so if more control is required, a different constructor should be used.
Important so caching operates properly. <p> Considers an object of the same class equal if it has the same <code>classname</code> and <code>id</code> properties. <p> Numeric identities (Integer and Long values) are considered equal if they are numerically equal. Other serializable types are evaluated using a simple equality.
Important so caching operates properly.
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
Constructor accepting mandatory arguments
Creates a new instance
~ Methods ========================================================================================================
Locates the primary key IDs specified in "findNow", adding AclImpl instances with StubAclParents to the "acls" Map.
The main method. <p> WARNING: This implementation completely disregards the "sids" argument! Every item in the cache is expected to contain all SIDs. If you have serious performance needs (e.g. a very large number of SIDs per object identity), you'll probably want to develop a custom {@link LookupStrategy} implementation instead. <p> The implementation works in batch sizes specified by {@link #batchSize}. implementation) located {@link Acl} and values are the located {@link Acl} (never <tt>null</tt> although some entries may be missing; this method should not throw {@link NotFoundException}, as a chain of {@link LookupStrategy}s may be used to automatically create entries if required)
Looks up a batch of <code>ObjectIdentity</code>s directly from the database. <p> The caller is responsible for optimization issues, such as selecting the identities to lookup, ensuring the cache doesn't contain them already, and adding the returned elements to the cache etc. <p> This subclass is required to return fully valid <code>Acl</code>s, including properly-configured parent ACLs.
The final phase of converting the <code>Map</code> of <code>AclImpl</code> instances which contain <code>StubAclParent</code>s into proper, valid <code>AclImpl</code>s with correct ACL parents. may be
Creates a particular implementation of {@link Sid} depending on the arguments. database schema it's located in table {@code acl_sid} table, {@code sid} column.
Sets the {@code PermissionFactory} instance which will be used to convert loaded permission data values to {@code Permission}s. A {@code DefaultPermissionFactory} will be used by default.
The SQL for the select clause. If customizing in order to modify column names, schema etc, the other SQL customization fields must also be set to match. {@link #DEFAULT_SELECT_CLAUSE}.
The SQL for the where clause used in the <tt>lookupPrimaryKey</tt> method.
The SQL for the where clause used in the <tt>lookupObjectIdentities</tt> method.
The SQL for the "order by" clause used in both queries.
Implementation of {@link ResultSetExtractor#extractData(ResultSet)}. Creates an {@link Acl} for each row in the {@link ResultSet} and ensures it is in member field <tt>acls</tt>. Any {@link Acl} with a parent will have the parents id returned in a set. The returned set of ids may requires further processing. <tt>null</tt>)
Accepts the current <code>ResultSet</code> row, and converts it into an <code>AclImpl</code> that contains a <code>StubAclParent</code>
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
Allows customization of the SQL query used to find child object identities.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object.
Creates an entry in the acl_object_identity table for the passed ObjectIdentity. The Sid is also necessary, as acl_object_identity has defined the sid column as non-null. this particular Sid already)
Retrieves the primary key from {@code acl_class}, creating a new row if needed and the {@code allowCreate} property is {@code true}.
Retrieves the primary key from acl_sid, creating a new row if needed and the allowCreate property is true. implementation.
Retrieves the primary key from acl_sid, creating a new row if needed and the allowCreate property is true.
Deletes all ACEs defined in the acl_entry table belonging to the presented ObjectIdentity primary key.
Deletes a single row from acl_object_identity that is associated with the presented ObjectIdentity primary key. <p> We do not delete any entries from acl_class, even if no classes are using that class any longer. This is a deadlock avoidance approach.
Retrieves the primary key from the acl_object_identity table for the passed ObjectIdentity. Unlike some other methods in this implementation, this method will NOT create a row (use {@link #createObjectIdentity(ObjectIdentity, Sid)} instead).
This implementation will simply delete all ACEs in the database and recreate them on each invocation of this method. A more comprehensive implementation might use dirty state checking, or more likely use ORM capabilities for create, update and delete operations of {@link MutableAcl}.
Updates an existing acl_object_identity row, with new information presented in the passed MutableAcl object. Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl.
Sets the query that will be used to retrieve the identity of a newly created row in the <tt>acl_class</tt> table. to <tt>call identity()</tt>
Sets the query that will be used to retrieve the identity of a newly created row in the <tt>acl_sid</tt> table. <tt>call identity()</tt>
constrain checking, which may cause deadlocks (the default is true, so deadlocks are avoided but the database is expected to enforce FKs)
Constructs an <code>AclDataAccessException</code> with the specified message and root cause.
Constructs an <code>AclDataAccessException</code> with the specified message and no root cause.
Constructs an <code>AlreadyExistsException</code> with the specified message.
Constructs an <code>AlreadyExistsException</code> with the specified message and root cause.
Constructs an <code>ChildrenExistException</code> with the specified message.
Constructs an <code>ChildrenExistException</code> with the specified message and root cause.
Constructs an <code>NotFoundException</code> with the specified message.
Constructs an <code>NotFoundException</code> with the specified message and root cause.
Constructs an <code>NotFoundException</code> with the specified message.
Constructs an <code>NotFoundException</code> with the specified message and root cause.
~ Constructors ===================================================================================================
Optionally specifies a method of the domain object that will be used to obtain a contained domain object. That contained domain object will be used for the ACL evaluation. This is useful if a domain object contains a parent that an ACL evaluation should be targeted for, instead of the child domain object (which perhaps is being created and as such does not yet have any ACL permissions) requires no arguments) that should be invoked to obtain an <code>Object</code> which will be the domain object used for ACL evaluation
Determines whether the user has the given permission(s) on the domain object using the ACL configuration. If the domain object is null, returns false (this can always be overridden using a null check in the expression itself).
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
Gets the serviceUrl. If the {@link Authentication#getDetails()} is an instance of {@link ServiceAuthenticationDetails}, then {@link ServiceAuthenticationDetails#getServiceUrl()} is used. Otherwise, the {@link ServiceProperties#getService()} is used.
Template method for retrieving the UserDetails based on the assertion. Default is to call configured userDetailsService and pass the username. Deployers can override this method and retrieve the user based on any criteria they desire.
Sets the UserDetailsService to use. This is a convenience method to invoke
Constructor. {@link CasAuthenticationProvider} <code>null</code>) {@link org.springframework.security.core.userdetails.UserDetailsService}) (cannot be <code>null</code>) {@link org.springframework.security.core.userdetails.UserDetailsService}) (cannot be <code>null</code>) principal and how to obtain a proxy ticket for the user.
This is a no-op since we are not storing tickets.
This is a no-op since we are not storing tickets.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
Converts the returned attribute values to uppercase values.
Creates a new instance {@link #getServiceUrl()} from. string from containing the artifact name and value. This can be created using {@link #createArtifactPattern(String)}.
Returns the current URL minus the artifact parameter and its value, if present.
If present, removes the artifactParameterName and the corresponding value from the query String. value.
Creates a {@link Pattern} that can be passed into the constructor. This allows the {@link Pattern} to be reused for every instance of {@link DefaultServiceAuthenticationDetails}.
Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used.
Creates an implementation that uses the specified ServiceProperites and the default CAS artifactParameterName.
Creates an implementation that uses the specified artifactParameterName current URL. The result becomes the service url. Cannot be null and cannot be an empty String.
current request
Constructs a new Service Url. The default implementation relies on the CAS client to do the bulk of the work.
Constructs the Url for Redirection to the CAS server. Default implementation relies on the CAS client to do the bulk of the work.
Template method for you to do your own pre-processing before the redirect occurs.
The enterprise-wide CAS login URL. Usually something like
Sets whether to encode the service url with the session id or not. session id or not.
Sets whether to encode the service url with the session id or not.
~ Constructors ===================================================================================================
If present, gets the artifact (CAS ticket) from the {@link HttpServletRequest}.
Overridden to provide proxying capabilities.
Sets the {@link AuthenticationFailureHandler} for proxy requests.
Indicates if the request is elgible to process a service ticket. This method exists for readability.
Indicates if the request is elgible to process a proxy ticket.
Determines if a user is already authenticated.
Indicates if the request is elgible to be processed as the proxy receptor.
Determines if the {@link CasAuthenticationFilter} is configured to handle the proxy receptor requests.
Represents the service the user is authenticating to. <p> This service is the callback URL belonging to the local Spring Security System for Spring secured application. For example, <pre> </pre>
Indicates whether the <code>renew</code> parameter should be sent to the CAS login URL and CAS validation URL. <p> If <code>true</code>, it will force CAS to authenticate the user again (even if the user has previously authenticated). During ticket validation it will require the ticket was generated as a consequence of an explicit login. High security applications would probably set this to <code>true</code>. Defaults to <code>false</code>, providing automated single sign on.
Configures the Request Parameter to look for when attempting to see if a CAS ticket was sent from the server.
Configures the Request parameter to look for when attempting to send a request to CAS.
If true, then any non-null artifact (ticket) should be authenticated. Additionally, the service will be determined dynamically in order to ensure the service matches the expected value for this artifact.
~ Methods ========================================================================================================
~ Methods ========================================================================================================
Creates a new instance
Allows providing a parent {@link AuthenticationManager} that will be tried if this {@link AuthenticationManager} was unable to attempt to authenticate the provided {@link Authentication}. if the current {@link AuthenticationManager} was unable to attempt to authenticate the provided {@link Authentication}. authentication
Sets the {@link AuthenticationEventPublisher}
credentials from the {@link Authentication} object after authenticating
Add in memory authentication to the {@link AuthenticationManagerBuilder} and return a {@link InMemoryUserDetailsManagerConfigurer} to allow customization of the in memory authentication. <p> This method also ensure that a {@link UserDetailsService} is available for the {@link #getDefaultUserDetailsService()} method. Note that additional {@link UserDetailsService}'s may override this {@link UserDetailsService} as the default. </p> the in memory authentication
Add JDBC authentication to the {@link AuthenticationManagerBuilder} and return a {@link JdbcUserDetailsManagerConfigurer} to allow customization of the JDBC authentication. <p> When using with a persistent data store, it is best to add users external of users to ensure these steps are only done once and that the optimal SQL is used. </p> <p> This method also ensure that a {@link UserDetailsService} is available for the {@link #getDefaultUserDetailsService()} method. Note that additional {@link UserDetailsService}'s may override this {@link UserDetailsService} as the default. See the <a href= >User Schema</a> section of the reference for the default schema. </p> JDBC authentication
Add authentication based upon the custom {@link UserDetailsService} that is passed in. It then returns a {@link DaoAuthenticationConfigurer} to allow customization of the authentication. <p> This method also ensure that the {@link UserDetailsService} is available for the {@link #getDefaultUserDetailsService()} method. Note that additional {@link UserDetailsService}'s may override this {@link UserDetailsService} as the default. </p> authentication based authentication
Add LDAP authentication to the {@link AuthenticationManagerBuilder} and return a {@link LdapAuthenticationProviderConfigurer} to allow customization of the LDAP authentication. <p> This method <b>does NOT</b> ensure that a {@link UserDetailsService} is available for the {@link #getDefaultUserDetailsService()} method. the LDAP authentication
Add authentication based upon the custom {@link AuthenticationProvider} that is passed in. Since the {@link AuthenticationProvider} implementation is unknown, all customizations must be done externally and the {@link AuthenticationManagerBuilder} is returned immediately. <p> This method <b>does NOT</b> ensure that the {@link UserDetailsService} is available for the {@link #getDefaultUserDetailsService()} method. Note that an {@link Exception} might be thrown if an error occurs when adding the {@link AuthenticationProvider}. be provided to the {@link AuthenticationManagerBuilder}
Determines if the {@link AuthenticationManagerBuilder} is configured to build a non null {@link AuthenticationManager}. This means that either a non-null parent is specified or at least one {@link AuthenticationProvider} has been specified. <p> When using {@link SecurityConfigurer} instances, the {@link AuthenticationManagerBuilder} will not be configured until the {@link SecurityConfigurer#configure(SecurityBuilder)} methods. This means a {@link SecurityConfigurer} that is last could check this method and provide a default configuration in the {@link SecurityConfigurer#configure(SecurityBuilder)} method.
Gets the default {@link UserDetailsService} for the {@link AuthenticationManagerBuilder}. The result may be null in some circumstances. {@link AuthenticationManagerBuilder}
Captures the {@link UserDetailsService} from any {@link UserDetailsAwareConfigurer} {@link UserDetailsService} from.
Specifies the {@link LdapAuthoritiesPopulator}. {@link DefaultLdapAuthoritiesPopulator}
Adds an {@link ObjectPostProcessor} for this class.
Gets the {@link LdapAuthoritiesPopulator} and defaults to {@link DefaultLdapAuthoritiesPopulator}
Creates the {@link LdapAuthenticator} to use
Creates {@link PasswordComparisonAuthenticator}
Creates a {@link BindAuthenticator}
Specifies the {@link BaseLdapPathContextSource} to be used. If not specified, an embedded LDAP server will be created using {@link #contextSource()}.
Allows easily configuring of a {@link BaseLdapPathContextSource} with defaults pointing to an embedded LDAP server that is created.
Specifies the {@link PasswordEncoder} to be used when authenticating with password comparison. {@link #passwordEncoder(org.springframework.security.crypto.password.PasswordEncoder)} instead
Specifies the {@link org.springframework.security.crypto.password.PasswordEncoder} to be used when authenticating with password comparison. {@link org.springframework.security.crypto.password.PasswordEncoder} to use
If your users are at a fixed location in the directory (i.e. you can work out the DN directly from the username without doing a directory search), you can use this attribute to map directly to the DN. It maps directly to the userDnPatterns property of AbstractLdapAuthenticator. The value is a specific pattern used to build the user's DN, for example "uid={0},ou=people". The key "{0}" must be present and will be substituted with the username.
Allows explicit customization of the loaded user object by specifying a UserDetailsContextMapper bean which will be called with the context information from the user's directory entry.
Specifies the attribute name which contains the role name. Default is "cn".
The search base for group membership searches. Defaults to "".
The LDAP filter to search for groups. Defaults to "(uniqueMember={0})". The substituted parameter is the DN of the user.
A non-empty string prefix that will be added as a prefix to the existing roles. The default is "ROLE_".
Search base for user searches. Defaults to "". Only used with {@link #userSearchFilter(String)}.
The LDAP filter used to search for users (optional). For example "(uid={0})". The substituted parameter is the user's login name.
Allows specifying the {@link PasswordEncoder} to use. The default is {@link PlaintextPasswordEncoder}.
The attribute in the directory which contains the user password. Defaults to "userPassword". password
Allows obtaining a reference to the {@link LdapAuthenticationProviderConfigurer} for further customizations
Specifies an ldif to load at startup for an embedded LDAP server. This only loads if using an embedded instance. The default is "classpath*:*.ldif".
Username (DN) of the "manager" user identity (i.e. "uid=admin,ou=system") which will be used to authenticate to a (non-embedded) LDAP server. If omitted, anonymous access will be used. authenticate to a LDAP server.
The password for the manager DN. This is required if the manager-dn is specified.
The port to connect to LDAP to (the default is 33389 or random available port if unavailable).
Optional root suffix for the embedded LDAP server. Default is "dc=springframework,dc=org"
Specifies the ldap server URL when not using the embedded LDAP server. For
Gets the {@link LdapAuthenticationProviderConfigurer} for further customizations customizations
Creates a new instance
Populates the {@link DataSource} to be used. This is the only required attribute.
Sets the query to be used for finding a user by their username. For example: <code> </code> is enabled by username. Must contain a single parameter for the username. customizations
Sets the query to be used for finding a user's authorities by their username. For example: <code> </code> Must contain a single parameter for the username. customizations
An SQL statement to query user's group authorities given a username. For example: <code> </code> a single parameter for the username. customizations
A non-empty string prefix that will be added to role strings loaded from persistent storage (default is "").
Defines the {@link UserCache} to use
Populates the default schema that allows users and authorities to be stored. customizations
Creates a new instance
Returns the {@link UserDetailsManagerConfigurer} for method chaining (i.e. to add another user)
Populates the username. This attribute is required. additional attributes for this user)
Populates the password. This attribute is required. additional attributes for this user)
Populates the roles. This method is a shortcut for calling {@link #authorities(String...)}, but automatically prefixes each entry with "ROLE_". This means the following: <code> </code> is equivalent to <code> </code> <p> This attribute is required, but can also be populated with {@link #authorities(String...)}. </p> contain null values or start with "ROLE_" additional attributes for this user)
Populates the authorities. This attribute is required. null values additional attributes for this user)
Populates the authorities. This attribute is required. etc). Cannot be null, or contain null values additional attributes for this user)
Defines if the account is expired or not. Default is false. additional attributes for this user)
Defines if the account is locked or not. Default is false. additional attributes for this user)
Defines if the credentials are expired or not. Default is false. additional attributes for this user)
Defines if the account is disabled or not. Default is false. additional attributes for this user)
Creates a new instance
Gets the {@link UserDetailsService} that is used with the {@link DaoAuthenticationProvider} {@link DaoAuthenticationProvider}
Creates a new instance
Creates a new instance
Register, escalate, and configure the AspectJ auto proxy creator based on the value of the @{@link EnableGlobalMethodSecurity#proxyTargetClass()} attribute on the importing {@code @Configuration} class.
Provide a custom {@link AfterInvocationManager} for the default implementation of {@link #methodSecurityInterceptor()}. The default is null if pre post is not enabled. Otherwise, it returns a {@link AfterInvocationProviderManager}. <p> Subclasses should override this method to provide a custom {@link AfterInvocationManager} </p>
Provide a custom {@link RunAsManager} for the default implementation of {@link #methodSecurityInterceptor()}. The default is null.
Allows subclasses to provide a custom {@link AccessDecisionManager}. The default is a {@link AffirmativeBased} with the following voters: <ul> <li>{@link PreInvocationAuthorizationAdviceVoter}</li> <li>{@link RoleVoter}</li> <li>{@link AuthenticatedVoter}</li> </ul>
Provide a {@link MethodSecurityExpressionHandler} that is registered with the {@link ExpressionBasedPreInvocationAdvice}. The default is {@link DefaultMethodSecurityExpressionHandler} which optionally will Autowire an {@link AuthenticationTrustResolver}. <p> Subclasses may override this method to provide a custom {@link MethodSecurityExpressionHandler} </p>
Gets the {@link MethodSecurityExpressionHandler} or creates it using {@link #expressionHandler}.
Provides a custom {@link MethodSecurityMetadataSource} that is registered with the {@link #methodSecurityMetadataSource()}. Default is null. {@link #methodSecurityMetadataSource()}
Allows providing a custom {@link AuthenticationManager}. The default is to use any authentication mechanisms registered by {@link #configure(AuthenticationManagerBuilder)}. If {@link #configure(AuthenticationManagerBuilder)} was not overridden, then an {@link AuthenticationManager} is attempted to be autowired by type.
Sub classes can override this method to register different types of authentication. If not overridden, {@link #configure(AuthenticationManagerBuilder)} will attempt to autowire by type. authentication mechanisms for the global method security.
Obtains the attributes from {@link EnableGlobalMethodSecurity} if this class was imported using the {@link EnableGlobalMethodSecurity} annotation.
Determines if a particular {@link Filter} is registered to be sorted
Registers a {@link Filter} to exist after a particular {@link Filter} that is already registered. {@code filter} should be placed after.
Registers a {@link Filter} to exist before a particular {@link Filter} that is already registered. {@code filter} should be placed before.
Gets the order of a particular {@link Filter} class taking into consideration superclasses.
Creates a new instance additional updates
Allows configuring OpenID based authentication. <h2>Example Configurations</h2> A basic example accepting the defaults and not using attribute exchange: <pre> &#064;Configuration &#064;EnableWebSecurity public class OpenIDLoginConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().openidLogin() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication() </pre> A more advanced example demonstrating using attribute exchange and providing a custom AuthenticationUserDetailsService that will make any user that authenticates a valid user. <pre> &#064;Configuration &#064;EnableWebSecurity public class OpenIDLoginConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) { http.authorizeRequests() public class AutoProvisioningUserDetailsService implements AuthenticationUserDetailsService&lt;OpenIDAuthenticationToken&gt; { public UserDetails loadUserDetails(OpenIDAuthenticationToken token) return new User(token.getName(), &quot;NOTUSED&quot;, </pre>
Adds the Security headers to the response. This is activated by default when using {@link WebSecurityConfigurerAdapter}'s default constructor. Accepting the default provided by {@link WebSecurityConfigurerAdapter} or only invoking {@link #headers()} without invoking additional methods on it, is the equivalent of: <pre> &#064;Configuration &#064;EnableWebSecurity public class CsrfSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override </pre> You can disable the headers using the following: <pre> &#064;Configuration &#064;EnableWebSecurity public class CsrfSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override </pre> You can enable only a few of the headers by first invoking {@link HeadersConfigurer#defaultsDisabled()} and then invoking the appropriate methods on the {@link #headers()} result. For example, the following will enable {@link HeadersConfigurer#cacheControl()} and {@link HeadersConfigurer#frameOptions()} only. <pre> &#064;Configuration &#064;EnableWebSecurity public class CsrfSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override </pre> You can also choose to keep the defaults but explicitly disable a subset of headers. For example, the following will enable all the default headers except {@link HeadersConfigurer#frameOptions()}. <pre> &#064;Configuration &#064;EnableWebSecurity public class CsrfSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override </pre>
Allows configuring of Session Management. <h2>Example Configuration</h2> The following configuration demonstrates how to enforce that only a single instance of a user is authenticated at a time. If a user authenticates with the username "user" without logging out and an attempt to authenticate with "user" is made the first session will be forcibly terminated and sent to the "/login?expired" URL. <pre> &#064;Configuration &#064;EnableWebSecurity public class SessionManagementSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().anyRequest().hasRole(&quot;USER&quot;).and().formLogin() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre> When using {@link SessionManagementConfigurer#maximumSessions(int)}, do not forget to configure {@link HttpSessionEventPublisher} for the application to ensure that expired sessions are cleaned up. In a web.xml this can be configured using the following: <pre> &lt;listener&gt; &lt;/listener&gt; </pre> Alternatively, {@link AbstractSecurityWebApplicationInitializer#enableHttpSessionEventPublisher()} could return true.
Allows configuring a {@link PortMapper} that is available from {@link HttpSecurity#getSharedObject(Class)}. Other provided {@link SecurityConfigurer} objects use this configured {@link PortMapper} as a default {@link PortMapper} when redirecting from HTTP to HTTPS or from HTTPS to HTTP (for example when used in combination with {@link #requiresChannel()}. By default Spring Security uses a {@link PortMapperImpl} which maps the HTTP port 8080 to the HTTPS port 8443 and the HTTP port of 80 to the HTTPS port of 443. <h2>Example Configuration</h2> The following configuration will ensure that redirects within Spring Security from HTTP of a port of 9090 will redirect to HTTPS port of 9443 and the HTTP port of 80 to the HTTPS port of 443. <pre> &#064;Configuration &#064;EnableWebSecurity public class PortMapperSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre>
Configures container based based pre authentication. In this case, authentication is managed by the Servlet Container. <h2>Example Configuration</h2> The following configuration will use the principal found on the {@link HttpServletRequest} and if the user is in the role "ROLE_USER" or "ROLE_ADMIN" will add that to the resulting {@link Authentication}. <pre> &#064;Configuration &#064;EnableWebSecurity public class JeeSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and() // Example jee() configuration </pre> Developers wishing to use pre authentication with the container will need to ensure their web.xml configures the security constraints. For example, the web.xml (there is no equivalent Java based configuration supported by the Servlet specification) might look like: <pre> &lt;login-config&gt; &lt;/login-config&gt; &lt;security-role&gt; &lt;/security-role&gt; &lt;security-constraint&gt; &lt;/security-constraint&gt; &lt;security-constraint&gt; &lt;/security-constraint&gt; </pre> Last you will need to configure your container to contain the user with the correct roles. This configuration is specific to the Servlet Container, so consult your Servlet Container's documentation.
Configures X509 based pre authentication. <h2>Example Configuration</h2> The following configuration will attempt to extract the username from the X509 certificate. Remember that the Servlet Container will need to be configured to request client certificates in order for this to work. <pre> &#064;Configuration &#064;EnableWebSecurity public class X509SecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and() // Example x509() configuration </pre>
Allows configuring of Remember Me authentication. <h2>Example Configuration</h2> The following configuration demonstrates how to allow token based remember me authentication. Upon authenticating if the HTTP parameter named "remember-me" exists, then the user will be remembered even after their {@link javax.servlet.http.HttpSession} expires. <pre> &#064;Configuration &#064;EnableWebSecurity public class RememberMeSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin() </pre>
Allows restricting access based upon the {@link HttpServletRequest} using <h2>Example Configurations</h2> The most basic example is to configure all URLs to require the role "ROLE_USER". The configuration below requires authentication to every URL and will grant access to both the user "admin" and "user". <pre> &#064;Configuration &#064;EnableWebSecurity public class AuthorizeUrlsSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin(); &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;) </pre> We can also configure multiple URLs. The configuration below requires authentication to every URL and will grant access to URLs starting with /admin/ to only the "admin" user. All other URLs either user can access. <pre> &#064;Configuration &#064;EnableWebSecurity public class AuthorizeUrlsSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/admin/**&quot;).hasRole(&quot;ADMIN&quot;) &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;) </pre> Note that the matchers are considered in order. Therefore, the following is invalid because the first matcher matches every request and will never get to the second mapping: <pre> http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).antMatchers(&quot;/admin/**&quot;) .hasRole(&quot;ADMIN&quot;) </pre>
Allows configuring the Request Cache. For example, a protected page (/protected) may be requested prior to authentication. The application will redirect the user to a login page. After authentication, Spring Security will redirect the user to the originally requested protected page (/protected). This is automatically applied when using {@link WebSecurityConfigurerAdapter}.
Allows configuring exception handling. This is automatically applied when using {@link WebSecurityConfigurerAdapter}.
Sets up management of the {@link SecurityContext} on the {@link SecurityContextHolder} between {@link HttpServletRequest}'s. This is automatically applied when using {@link WebSecurityConfigurerAdapter}.
Integrates the {@link HttpServletRequest} methods with the values found on the {@link SecurityContext}. This is automatically applied when using {@link WebSecurityConfigurerAdapter}.
Adds CSRF support. This is activated by default when using {@link WebSecurityConfigurerAdapter}'s default constructor. You can disable it using: <pre> &#064;Configuration &#064;EnableWebSecurity public class CsrfSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override </pre>
Provides logout support. This is automatically applied when using {@link WebSecurityConfigurerAdapter}. The default is that accessing the URL "/logout" will log the user out by invalidating the HTTP Session, cleaning up any {@link #rememberMe()} authentication that was configured, clearing the {@link SecurityContextHolder}, and then redirect to "/login?success". <h2>Example Custom Configuration</h2> The following customization to log out when the URL "/custom-logout" is invoked. Log out will remove the cookie named "remove", not invalidate the HttpSession, clear the SecurityContextHolder, and upon completion redirect to "/logout-success". <pre> &#064;Configuration &#064;EnableWebSecurity public class LogoutSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre>
Allows configuring how an anonymous user is represented. This is automatically applied when used in conjunction with {@link WebSecurityConfigurerAdapter}. By default anonymous users will be represented with an {@link org.springframework.security.authentication.AnonymousAuthenticationToken} and contain the role "ROLE_ANONYMOUS". <h2>Example Configuration</h2> The following configuration demonstrates how to specify that anonymous users should contain the role "ROLE_ANON" instead. <pre> &#064;Configuration &#064;EnableWebSecurity public class AnononymousSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre> The following demonstrates how to represent anonymous users as null. Note that this can cause {@link NullPointerException} in code that assumes anonymous authentication is enabled. <pre> &#064;Configuration &#064;EnableWebSecurity public class AnononymousSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre>
Specifies to support form based authentication. If {@link FormLoginConfigurer#loginPage(String)} is not specified a default login page will be generated. <h2>Example Configurations</h2> The most basic configuration defaults to automatically generating a login page at the URL "/login", redirecting to "/login?error" for authentication failure. The details of the login page can be found on {@link FormLoginConfigurer#loginPage(String)} <pre> &#064;Configuration &#064;EnableWebSecurity public class FormLoginSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin(); &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre> The configuration below demonstrates customizing the defaults. <pre> &#064;Configuration &#064;EnableWebSecurity public class FormLoginSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre>
Configures channel security. In order for this configuration to be useful at least one mapping to a required channel must be provided. <h2>Example Configuration</h2> The example below demonstrates how to require HTTPs for every request. Only requiring HTTPS for some requests is supported, but not recommended since an application that allows for HTTP introduces many security vulnerabilities. For one such example, read about <a <pre> &#064;Configuration &#064;EnableWebSecurity public class ChannelSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre>
Configures HTTP Basic authentication. <h2>Example Configuration</h2> The example below demonstrates how to configure HTTP Basic authentication for an application. The default realm is "Spring Security Application", but can be customized using {@link HttpBasicConfigurer#realmName(String)}. <pre> &#064;Configuration &#064;EnableWebSecurity public class HttpBasicSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().httpBasic(); &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre>
(non-Javadoc) org.springframework.security.config.annotation.web.HttpBuilder#addFilterAfter(javax .servlet.Filter, java.lang.Class)
(non-Javadoc) org.springframework.security.config.annotation.web.HttpBuilder#addFilterBefore( javax.servlet.Filter, java.lang.Class)
Allows specifying which {@link HttpServletRequest} instances this {@link HttpSecurity} will be invoked on. This method allows for easily invoking the {@link HttpSecurity} for multiple different {@link RequestMatcher} instances. If only a single {@link RequestMatcher} is necessary consider using {@link #antMatcher(String)}, {@link #regexMatcher(String)}, or {@link #requestMatcher(RequestMatcher)}. <p> Invoking {@link #requestMatchers()} will override previous invocations of {@link #requestMatchers()}, {@link #antMatcher(String)}, {@link #regexMatcher(String)}, and {@link #requestMatcher(RequestMatcher)}. </p> <h3>Example Configurations</h3> The following configuration enables the {@link HttpSecurity} for URLs that begin with "/api/" or "/oauth/". <pre> &#064;Configuration &#064;EnableWebSecurity public class RequestMatchersSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.requestMatchers().antMatchers(&quot;/api/**&quot;, &quot;/oauth/**&quot;).and() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre> The configuration below is the same as the previous configuration. <pre> &#064;Configuration &#064;EnableWebSecurity public class RequestMatchersSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.requestMatchers().antMatchers(&quot;/api/**&quot;).antMatchers(&quot;/oauth/**&quot;).and() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre> The configuration below is also the same as the above configuration. <pre> &#064;Configuration &#064;EnableWebSecurity public class RequestMatchersSecurityConfig extends WebSecurityConfigurerAdapter { &#064;Override protected void configure(HttpSecurity http) throws Exception { http.requestMatchers().antMatchers(&quot;/api/**&quot;).and().requestMatchers() &#064;Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); </pre>
Allows configuring the {@link HttpSecurity} to only be invoked when matching the provided {@link RequestMatcher}. If more advanced configuration is necessary, consider using {@link #requestMatchers()}. <p> Invoking {@link #requestMatcher(RequestMatcher)} will override previous invocations of {@link #requestMatchers()}, {@link #antMatcher(String)}, {@link #regexMatcher(String)}, and {@link #requestMatcher(RequestMatcher)}. </p> AntPathRequestMatcher("/admin/**","GET") )
Allows configuring the {@link HttpSecurity} to only be invoked when matching the provided ant pattern. If more advanced configuration is necessary, consider using {@link #requestMatchers()} or {@link #requestMatcher(RequestMatcher)}. <p> Invoking {@link #antMatcher(String)} will override previous invocations of {@link #requestMatchers()}, {@link #antMatcher(String)}, {@link #regexMatcher(String)}, and {@link #requestMatcher(RequestMatcher)}. </p>
Allows configuring the {@link HttpSecurity} to only be invoked when matching the provided regex pattern. If more advanced configuration is necessary, consider using {@link #requestMatchers()} or {@link #requestMatcher(RequestMatcher)}. <p> Invoking {@link #regexMatcher(String)} will override previous invocations of {@link #requestMatchers()}, {@link #antMatcher(String)}, {@link #regexMatcher(String)}, and {@link #requestMatcher(RequestMatcher)}. </p>
Return the {@link HttpSecurity} for further customizations
Creates a new instance
<p> Allows adding {@link RequestMatcher} instances that should that Spring Security should ignore. Web Security provided by Spring Security (including the {@link SecurityContext}) will not be available on {@link HttpServletRequest} that match. Typically the requests that are registered should be that of only static resources. For requests that are dynamic, consider mapping the request to allow all users instead. </p> Example Usage: <pre> webSecurityBuilder.ignoring() // ignore all URLs that start with /resources/ or /static .antMatchers(&quot;/resources/**&quot;, &quot;/static/**&quot;); </pre> Alternatively this will accomplish the same result: <pre> webSecurityBuilder.ignoring() // ignore all URLs that start with /resources/ or /static .antMatchers(&quot;/resources/**&quot;).antMatchers(&quot;/static/**&quot;); </pre> Multiple invocations of ignoring() are also additive, so the following is also equivalent to the previous two examples: <pre> webSecurityBuilder.ignoring() // ignore all URLs that start with /resources .antMatchers(&quot;/resources/**&quot;); webSecurityBuilder.ignoring() // ignore all URLs that start with /static .antMatchers(&quot;/static/**&quot;); // now both URLs that start with /resources/ and /static/ will be ignored </pre> should be ignored
Allows customizing the {@link HttpFirewall}. The default is {@link DefaultHttpFirewall}.
Controls debugging support for Spring Security. false.
<p> Adds builders to create {@link SecurityFilterChain} instances. </p> <p> Typically this method is invoked automatically within the framework from {@link WebSecurityConfigurerAdapter#init(WebSecurity)} </p> {@link SecurityFilterChain} instances
Set the {@link WebInvocationPrivilegeEvaluator} to be used. If this is null, then a {@link DefaultWebInvocationPrivilegeEvaluator} will be created when {@link #securityInterceptor(FilterSecurityInterceptor)} is non null.
Set the {@link SecurityExpressionHandler} to be used. If this is null, then a {@link DefaultWebSecurityExpressionHandler} will be used.
Gets the {@link SecurityExpressionHandler} to be used.
Gets the {@link WebInvocationPrivilegeEvaluator} to be used.
Sets the {@link FilterSecurityInterceptor}. This is typically invoked by {@link WebSecurityConfigurerAdapter}.
Executes the Runnable immediately after the build takes place
Returns the {@link WebSecurity} to be returned for chaining.
Creates an instance with the default configuration enabled.
Creates an instance which allows specifying if the default configuration should be enabled. Disabling the default configuration should be considered more advanced usage as it requires more understanding of how the framework is implemented. false
Used by the default implementation of {@link #authenticationManager()} to attempt to obtain an {@link AuthenticationManager}. If overridden, the {@link AuthenticationManagerBuilder} should be used to specify the {@link AuthenticationManager}. <p> The {@link #authenticationManagerBean()} method can be used to expose the resulting {@link AuthenticationManager} as a Bean. The {@link #userDetailsServiceBean()} can be used to expose the last populated {@link UserDetailsService} that is created with the {@link AuthenticationManagerBuilder} as a Bean. The {@link UserDetailsService} will also automatically be populated on {@link HttpSecurity#getSharedObject(Class)} for use with other {@link SecurityContextConfigurer} (i.e. RememberMeConfigurer ) </p> <p> For example, the following configuration could be used to register in memory authentication that exposes an in memory {@link UserDetailsService}: </p> <pre> &#064;Override protected void configure(AuthenticationManagerBuilder auth) { auth // enable in memory based authentication with a user named // &quot;user&quot; and &quot;admin&quot; .inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;).and() // Expose the UserDetailsService as a Bean &#064;Bean &#064;Override public UserDetailsService userDetailsServiceBean() throws Exception { return super.userDetailsServiceBean(); </pre>
Creates the {@link HttpSecurity} or returns the current instance ] * @return the {@link HttpSecurity}
Override this method to expose the {@link AuthenticationManager} from {@link #configure(AuthenticationManagerBuilder)} to be exposed as a Bean. For example: <pre> &#064;Bean(name name="myAuthenticationManager") &#064;Override public AuthenticationManager authenticationManagerBean() throws Exception { </pre>
Gets the {@link AuthenticationManager} to use. The default strategy is if {@link #configure(AuthenticationManagerBuilder)} method is overridden to use the {@link AuthenticationManagerBuilder} that was passed in. Otherwise, autowire the {@link AuthenticationManager} by type.
Override this method to expose a {@link UserDetailsService} created from {@link #configure(AuthenticationManagerBuilder)} as a bean. In general only the following override should be done of this method: <pre> &#064;Bean(name = &quot;myUserDetailsService&quot;) // any or no name specified is allowed &#064;Override public UserDetailsService userDetailsServiceBean() throws Exception { return super.userDetailsServiceBean(); </pre> To change the instance returned, developers should change {@link #userDetailsService()} instead
Allows modifying and accessing the {@link UserDetailsService} from {@link #userDetailsServiceBean()} without interacting with the {@link ApplicationContext}. Developers should override this method when changing the instance of {@link #userDetailsServiceBean()}.
Override this method to configure the {@link HttpSecurity}. Typically subclasses should not invoke this method by calling super as it may override their configuration. The default configuration is: <pre> http.authorizeRequests().anyRequest().authenticated().and().formLogin().and().httpBasic(); </pre>
Creates a new instance
Sets up OpenID attribute exchange for OpenID's matching the specified pattern. attribute exchange
Allows specifying the {@link OpenIDConsumer} to be used. The default is using an {@link OpenID4JavaConsumer}.
Allows specifying the {@link ConsumerManager} to be used. If specified, will be populated into an {@link OpenID4JavaConsumer}. <p> This is a shortcut for specifying the {@link OpenID4JavaConsumer} with a specific {@link ConsumerManager} on {@link #consumer(OpenIDConsumer)}. </p>
The {@link AuthenticationUserDetailsService} to use. By default a {@link UserDetailsByNameServiceWrapper} is used with the {@link UserDetailsService} shared object found with {@link HttpSecurity#getSharedObject(Class)}. use
Specifies the URL used to authenticate OpenID requests. If the {@link HttpServletRequest} matches this URL the {@link OpenIDAuthenticationFilter} will attempt to authenticate the request. The default is "/login/openid".
<p> Specifies the URL to send users to if login is required. If used with {@link WebSecurityConfigurerAdapter} a default login page will be generated when this attribute is not specified. </p> <p> If a URL is specified or this is not being used in conjuction with {@link WebSecurityConfigurerAdapter}, users are required to process the specified URL to generate a login page. </p> <ul> <li>It must be an HTTP POST</li> <li>It must be submitted to {@link #loginProcessingUrl(String)}</li> <li>It should include the OpenID as an HTTP parameter by the name of {@link OpenIDAuthenticationFilter#DEFAULT_CLAIMED_IDENTITY_FIELD}</li> </ul> <h2>Impact on other defaults</h2> Updating this value, also impacts a number of other default values. For example, the following are the default values when only formLogin() was specified. <ul> <li>/login GET - the login form</li> <li>/login POST - process the credentials and if valid authenticate the user</li> <li>/login?error GET - redirect here for failed authentication attempts</li> <li>/login?logout GET - redirect here after successfully logging out</li> </ul> If "/authenticate" was passed to this method it update the defaults as shown below: <ul> <li>/authenticate GET - the login form</li> <li>/authenticate POST - process the credentials and if valid authenticate the user </li> <li>/authenticate?error GET - redirect here for failed authentication attempts</li> <li>/authenticate?logout GET - redirect here after successfully logging out</li> </ul> "/login")
Gets the {@link OpenIDConsumer} that was configured or defaults to an {@link OpenID4JavaConsumer}.
Gets the {@link ConsumerManager} that was configured or defaults to using a {@link ConsumerManager} with the default constructor.
Creates an {@link RegexBasedAxFetchListFactory} using the attributes populated by {@link AttributeExchangeConfigurer}
Gets the {@link AuthenticationUserDetailsService} that was configured or defaults to {@link UserDetailsByNameServiceWrapper} that uses a {@link UserDetailsService} looked up using {@link HttpSecurity#getSharedObject(Class)}
If available, initializes the {@link DefaultLoginPageGeneratingFilter} shared object.
Creates a new instance
Get the {@link OpenIDLoginConfigurer} to customize the OpenID configuration further
Adds an {@link OpenIDAttribute} to be obtained for the configured OpenID pattern. attribute exchange
Adds an {@link OpenIDAttribute} with the given name {@link OpenIDAttribute} that should be obtained.
Gets the {@link OpenIDAttribute}'s for the configured OpenID pattern
Creates a new instance
Specifies the number of attribute values to request. Default is 1.
Specifies that this attribute is required. The default is <code>false</code>. Note that as outlined in the OpenID specification, required attributes are not validated by the OpenID Provider. Developers should perform any validation in custom code.
The OpenID attribute type.
Gets the {@link AttributeExchangeConfigurer} for further customization of the attributes
Builds the {@link OpenIDAttribute}.
Creates a new instance use {@link #loginProcessingUrl(String)}
Specifies where users will go after authenticating successfully if they have not visited a secured page prior to authenticating. This is a shortcut for calling {@link #defaultSuccessUrl(String)}.
Specifies where users will go after authenticating successfully if they have not visited a secured page prior to authenticating or {@code alwaysUse} is true. This is a shortcut for calling {@link #successHandler(AuthenticationSuccessHandler)}. authentication despite if a protected page had been previously visited
Specifies the URL to validate the credentials.
Specifies a custom {@link AuthenticationDetailsSource}. The default is {@link WebAuthenticationDetailsSource}.
Specifies the {@link AuthenticationSuccessHandler} to be used. The default is {@link SavedRequestAwareAuthenticationSuccessHandler} with no additional properites set.
Equivalent of invoking permitAll(true)
Ensures the urls for {@link #failureUrl(String)} as well as for the {@link HttpSecurityBuilder}, the {@link #getLoginPage} and {@link #getLoginProcessingUrl} are granted access to any user.
The URL to send users if authentication fails. This is a shortcut for invoking {@link #failureHandler(AuthenticationFailureHandler)}. The default is "/login?error". "/login?error").
Specifies the {@link AuthenticationFailureHandler} to use when authentication fails. The default is redirecting to "/login?error" using {@link SimpleUrlAuthenticationFailureHandler} when authentication fails.
<p> Specifies the URL to send users to if login is required. If used with {@link WebSecurityConfigurerAdapter} a default login page will be generated when this attribute is not specified. </p> <p> If a URL is specified or this is not being used in conjuction with {@link WebSecurityConfigurerAdapter}, users are required to process the specified URL to generate a login page. </p>
Gets the Authentication Filter
Gets the login page
Gets the URL to submit an authentication request to (i.e. where username/password must be submitted)
Gets the URL to send users to if authentication fails
Updates the default values for authentication.
Sets the loginPage and updates the {@link AuthenticationEntryPoint}.
Gets the {@link UrlMapping} added by subclasses in {@link #chainRequestMatchers(java.util.List)}. May be empty. {@link #chainRequestMatchers(java.util.List)}
Adds a {@link UrlMapping} added by subclasses in {@link #chainRequestMatchers(java.util.List)} and resets the unmapped {@link RequestMatcher}'s.
Marks the {@link RequestMatcher}'s as unmapped and then calls {@link #chainRequestMatchersInternal(List)}. else to the {@link RequestMatcher}
Adds a {@link UrlMapping} added by subclasses in {@link #chainRequestMatchers(java.util.List)} at a particular index.
Creates the mapping of {@link RequestMatcher} to {@link Collection} of {@link ConfigAttribute} instances {@link ConfigAttribute} instances. Cannot be null.
Allows setting the {@link AccessDecisionManager}. If none is provided, a default {@link AccessDecisionManager} is created.
Allows setting if the {@link FilterSecurityInterceptor} should be only applied once per request (i.e. if the filter intercepts on a forward, should it be applied again). {@link FilterSecurityInterceptor} should be only applied once per request
Creates the default {@code AccessDecisionManager}
If currently null, creates a default {@link AccessDecisionManager} using {@link #createDefaultAccessDecisionManager(HttpSecurityBuilder)}. Otherwise returns the {@link AccessDecisionManager}.
Creates the {@link FilterSecurityInterceptor}
Sets the key to identify tokens created for anonymous authentication. Default is a secure randomly generated key. is a secure randomly generated key. authentication
Sets the principal for {@link Authentication} objects of anonymous users authentication
Sets the {@link org.springframework.security.core.Authentication#getAuthorities()} for anonymous users {@link org.springframework.security.core.Authentication#getAuthorities()} for anonymous users authentication
Sets the {@link org.springframework.security.core.Authentication#getAuthorities()} for anonymous users {@link org.springframework.security.core.Authentication#getAuthorities()} for anonymous users (i.e. "ROLE_ANONYMOUS") authentication
Sets the {@link AuthenticationProvider} used to validate an anonymous user. If this is set, no attributes on the {@link AnonymousConfigurer} will be set on the {@link AuthenticationProvider}. an anonymous user. Default is {@link AnonymousAuthenticationProvider} authentication
Sets the {@link AnonymousAuthenticationFilter} used to populate an anonymous user. If this is set, no attributes on the {@link AnonymousConfigurer} will be set on the {@link AnonymousAuthenticationFilter}. populate an anonymous user. authentication
Sets the {@link ChannelProcessor} instances to use in {@link ChannelDecisionManagerImpl}
Return the {@link SecurityBuilder} when done using the {@link SecurityConfigurer}. This is useful for method chaining.
Specify the {@link CsrfTokenRepository} to use. The default is an {@link HttpSessionCsrfTokenRepository}.
Specify the {@link RequestMatcher} to use for determining when CSRF should be applied. The default is to ignore GET, HEAD, TRACE, OPTIONS and process all other requests.
<p> Allows specifying {@link HttpServletRequest} that should not use CSRF Protection even if they match the {@link #requireCsrfProtectionMatcher(RequestMatcher)}. </p> <p> The following will ensure CSRF protection ignores: </p> <ul> <li>Any GET, HEAD, TRACE, OPTIONS (this is the default)</li> <li>We also explicitly state to ignore any request that starts with "/sockjs/"</li> </ul> <pre> http </pre>
Gets the final {@link RequestMatcher} to use by combining the {@link #requireCsrfProtectionMatcher(RequestMatcher)} and any {@link #ignore()}.
Creates the {@link AccessDeniedHandler} from the result of {@link #getDefaultAccessDeniedHandler(HttpSecurityBuilder)} and {@link #getInvalidSessionStrategy(HttpSecurityBuilder)}. If {@link #getInvalidSessionStrategy(HttpSecurityBuilder)} is non-null, then a {@link DelegatingAccessDeniedHandler} is used in combination with {@link InvalidSessionAccessDeniedHandler} and the {@link #getDefaultAccessDeniedHandler(HttpSecurityBuilder)}. Otherwise, only {@link #getDefaultAccessDeniedHandler(HttpSecurityBuilder)} is used.
Shortcut to specify the {@link AccessDeniedHandler} to be used is a specific error page
Specifies the {@link AccessDeniedHandler} to be used
Sets the {@link AuthenticationEntryPoint} to be used. <p> If no {@link #authenticationEntryPoint(AuthenticationEntryPoint)} is specified, then {@link #defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)} will be used. The first {@link AuthenticationEntryPoint} will be used as the default is no matches were found. </p> <p> If that is not provided defaults to {@link Http403ForbiddenEntryPoint}. </p>
Sets a default {@link AuthenticationEntryPoint} to be used which prefers being invoked for the provided {@link RequestMatcher}. If only a single default {@link AuthenticationEntryPoint} is specified, it will be what is used for the default {@link AuthenticationEntryPoint}. If multiple default {@link AuthenticationEntryPoint} instances are configured, then a {@link DelegatingAuthenticationEntryPoint} will be used. {@link AuthenticationEntryPoint}
Gets any explicitly configured {@link AuthenticationEntryPoint}
Gets the {@link AccessDeniedHandler} that is configured.
Gets the {@link AuthenticationEntryPoint} according to the rules specified by {@link #authenticationEntryPoint(AuthenticationEntryPoint)} {@link AuthenticationEntryPoint}
Gets the {@link RequestCache} to use. If one is defined using {@link #requestCache(org.springframework.security.web.savedrequest.RequestCache)}, then it is used. Otherwise, an attempt to find a {@link RequestCache} shared object is made. If that fails, an {@link HttpSessionRequestCache} is used
Allows customization of the {@link SecurityExpressionHandler} to be used. The default is {@link DefaultWebSecurityExpressionHandler} customization.
Adds an {@link ObjectPostProcessor} for this class. customizations
Allows registering multiple {@link RequestMatcher} instances to a collection of {@link ConfigAttribute} instances {@link ConfigAttribute} instances {@link RequestMatcher} instances
Creates a new instance
Negates the following expression. customization
Shortcut for specifying URLs require a particular role. If you do not want to have "ROLE_" automatically inserted see {@link #hasAuthority(String)}. start with "ROLE_" as this is automatically inserted. customization
Shortcut for specifying URLs require any of a number of roles. If you do not want to have "ROLE_" automatically inserted see {@link #hasAnyAuthority(String...)} start with "ROLE_" as this is automatically inserted. customization
Specify that URLs require a particular authority. customization
Specify that URLs requires any of a number authorities. "ROLE_USER","ROLE_ADMIN" would mean either "ROLE_USER" or "ROLE_ADMIN" is required). customization
Specify that URLs requires a specific IP Address or <a href= >subnet</a>. (i.e. 192.168.0/24) customization
Specify that URLs are allowed by anyone. customization
Specify that URLs are allowed by anonymous users. customization
Specify that URLs are allowed by users that have been remembered. customization
Specify that URLs are not allowed by anyone. customization
Specify that URLs are allowed by any authenticated user. customization
Specify that URLs are allowed by users who have authenticated and were not "remembered". customization
Allows specifying that URLs are secured by an arbitrary expression "hasRole('ROLE_USER') and hasRole('ROLE_SUPER')") customization
Creates a new instance
<p> Specifies the URL to send users to if login is required. If used with {@link WebSecurityConfigurerAdapter} a default login page will be generated when this attribute is not specified. </p> <p> If a URL is specified or this is not being used in conjuction with {@link WebSecurityConfigurerAdapter}, users are required to process the specified URL to generate a login page. In general, the login page should create a form that submits a request with the following requirements to work with {@link UsernamePasswordAuthenticationFilter}: </p> <ul> <li>It must be an HTTP POST</li> <li>It must be submitted to {@link #loginProcessingUrl(String)}</li> <li>It should include the username as an HTTP parameter by the name of {@link #usernameParameter(String)}</li> <li>It should include the password as an HTTP parameter by the name of {@link #passwordParameter(String)}</li> </ul> <h2>Example login.jsp</h2> Login pages can be rendered with any technology you choose so long as the rules above are followed. Below is an example login.jsp that can be used as a quick start when using JSP's or as a baseline to translate into another view technology. <pre> <!-- loginProcessingUrl should correspond to FormLoginConfigurer#loginProcessingUrl. Don't forget to perform a POST --> &lt;c:url value="/login" var="loginProcessingUrl"/&gt; &lt;form action="${loginProcessingUrl}" method="post"&gt; &lt;/form&gt; </pre> <h2>Impact on other defaults</h2> Updating this value, also impacts a number of other default values. For example, the following are the default values when only formLogin() was specified. <ul> <li>/login GET - the login form</li> <li>/login POST - process the credentials and if valid authenticate the user</li> <li>/login?error GET - redirect here for failed authentication attempts</li> <li>/login?logout GET - redirect here after successfully logging out</li> </ul> If "/authenticate" was passed to this method it update the defaults as shown below: <ul> <li>/authenticate GET - the login form</li> <li>/authenticate POST - process the credentials and if valid authenticate the user </li> <li>/authenticate?error GET - redirect here for failed authentication attempts</li> <li>/authenticate?logout GET - redirect here after successfully logging out</li> </ul> "/login")
The HTTP parameter to look for the username when performing authentication. Default is "username". performing authentication
The HTTP parameter to look for the password when performing authentication. Default is "password". performing authentication
Gets the HTTP parameter that is used to submit the username.
Gets the HTTP parameter that is used to submit the password.
Adds a {@link HeaderWriter} instance
Configures the {@link XContentTypeOptionsHeaderWriter} which inserts the <a href= >X-Content-Type-Options</a>: <pre> X-Content-Type-Options: nosniff </pre>
Removes the X-XSS-Protection header.
Allows customizing the {@link HeadersConfigurer}
Ensures that Content Type Options is enabled
<strong>Note this is not comprehensive XSS protection!</strong> <p> Allows customizing the {@link XXssProtectionHeaderWriter} which adds the <a href= >X-XSS-Protection header</a> </p>
If false, will not specify the mode as blocked. In this instance, any content will be attempted to be fixed. If true, the content will be replaced with "#".
If true, the header value will contain a value of 1. For example: <pre> X-XSS-Protection: 1 </pre> or if {@link XXssProtectionHeaderWriter#setBlock(boolean)} of the given {@link XXssProtectionHeaderWriter} is true <pre> X-XSS-Protection: 1; mode=block </pre> If false, will explicitly disable specify that X-XSS-Protection is disabled. For example: <pre> X-XSS-Protection: 0 </pre>
Disables X-XSS-Protection header (does not include it)
Allows completing configuration of Strict Transport Security and continuing configuration of headers.
Ensures the X-XSS-Protection header is enabled if it is not already.
Allows customizing the {@link CacheControlHeadersWriter}. Specifically it adds the following headers: <ul> <li>Cache-Control: no-cache, no-store, max-age=0, must-revalidate</li> <li>Pragma: no-cache</li> <li>Expires: 0</li> </ul>
Disables Cache Control
Ensures the Cache Control headers are enabled if they are not already.
Allows customizing the {@link HstsHeaderWriter} which provides support for <a (HSTS)</a>.
<p> Sets the value (in seconds) for the max-age directive of the Strict-Transport-Security header. The default is one year. </p> <p> This instructs browsers how long to remember to keep this domain as a known HSTS Host. See <a additional details. </p> domain as a known HSTS Host.
Sets the {@link RequestMatcher} used to determine if the "Strict-Transport-Security" should be added. If true the header is added, else the header is not added. By default the header is added when {@link HttpServletRequest#isSecure()} returns true.
<p> If true, subdomains should be considered HSTS Hosts too. The default is true. </p> <p> 6.1.2</a> for additional details. </p>
Disables Strict Transport Security
Ensures that Strict-Transport-Security is enabled if it is not already
Allows customizing the {@link XFrameOptionsHeaderWriter}.
Specify to DENY framing any content from this application.
<p> Specify to allow any request that comes from the same origin to frame this application. For example, if the application was hosted on example.com, then example.com could frame the application, but evil.com could not frame the application. </p>
Prevents the header from being added to the response.
Allows continuing customizing the headers configuration.
Enables FrameOptionsConfig if it is not already enabled.
Clears all of the default headers from the response. After doing so, one can add headers back. For example, if you only want to use Spring Security's cache control you can use the following: <pre> http.headers().defaultsDisabled().cacheControl(); </pre>
Creates the {@link HeaderWriter}
Gets the {@link HeaderWriter} instances and possibly initializes with the defaults.
Creates a new instance
Allows easily changing the realm, but leaving the remaining defaults in place. If {@link #authenticationEntryPoint(AuthenticationEntryPoint)} has been invoked, invoking this method will result in an error.
The {@link AuthenticationEntryPoint} to be populated on {@link BasicAuthenticationFilter} in the event that authentication fails. The default to use {@link BasicAuthenticationEntryPoint} with the realm "Spring Security Application".
Specifies a custom {@link AuthenticationDetailsSource} to use for basic authentication. The default is {@link WebAuthenticationDetailsSource}. to use
Specifies roles to use map from the {@link HttpServletRequest} to the {@link UserDetails}. If {@link HttpServletRequest#isUserInRole(String)} returns true, the role is added to the {@link UserDetails}. This method is the equivalent of invoking {@link #mappableAuthorities(Set)}. Multiple invocations of {@link #mappableAuthorities(String...)} will override previous invocations. <p> There are no default roles that are mapped. </p> "ROLE_USER", "ROLE_ADMIN", etc).
Specifies roles to use map from the {@link HttpServletRequest} to the {@link UserDetails} and automatically prefixes it with "ROLE_". If {@link HttpServletRequest#isUserInRole(String)} returns true, the role is added to the {@link UserDetails}. This method is the equivalent of invoking {@link #mappableAuthorities(Set)}. Multiple invocations of {@link #mappableRoles(String...)} will override previous invocations. <p> There are no default roles that are mapped. </p> "USER", "ADMIN", etc).
Specifies roles to use map from the {@link HttpServletRequest} to the {@link UserDetails}. If {@link HttpServletRequest#isUserInRole(String)} returns true, the role is added to the {@link UserDetails}. This is the equivalent of {@link #mappableRoles(String...)}. Multiple invocations of {@link #mappableAuthorities(Set)} will override previous invocations. <p> There are no default roles that are mapped. </p>
Specifies the {@link AuthenticationUserDetailsService} that is used with the {@link PreAuthenticatedAuthenticationProvider}. The default is a {@link PreAuthenticatedGrantedAuthoritiesUserDetailsService}. to use.
Allows specifying the {@link J2eePreAuthenticatedProcessingFilter} to use. If {@link J2eePreAuthenticatedProcessingFilter} is provided, all of its attributes must also be configured manually (i.e. all attributes populated in the {@link JeeConfigurer} are not used). {@link J2eePreAuthenticatedProcessingFilter} to use.
Gets the {@link J2eePreAuthenticatedProcessingFilter} or creates a default instance using the properties provided.
Gets the {@link AuthenticationUserDetailsService} that was specified or defaults to {@link PreAuthenticatedGrantedAuthoritiesUserDetailsService}.
Creates the {@link J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource} to set on the {@link J2eePreAuthenticatedProcessingFilter}. It is populated with a {@link SimpleMappableAttributesRetriever}.
Adds a {@link LogoutHandler}. The {@link SecurityContextLogoutHandler} is added as the last {@link LogoutHandler} by default.
Specifies if {@link SecurityContextLogoutHandler} should clear the {@link Authentication} at the time of logout.
Configures {@link SecurityContextLogoutHandler} to invalidate the {@link HttpSession} at the time of logout. (default), or false otherwise.
The URL that triggers log out to occur (default is "/logout"). If CSRF protection is enabled (default), then the request must also be a POST. This means that by default POST "/logout" is required to trigger a log out. If CSRF protection is disabled, then any HTTP method is allowed. <p> It is considered best practice to use an HTTP POST on any action that changes state (i.e. log out) to protect against <a you really want to use an HTTP GET, you can use <code>logoutRequestMatcher(new AntPathRequestMatcher(logoutUrl, "GET"));</code> </p>
The RequestMatcher that triggers log out to occur. In most circumstances users will use {@link #logoutUrl(String)} which helps enforce good practices. occur.
The URL to redirect to after logout has occurred. The default is "/login?logout". This is a shortcut for invoking {@link #logoutSuccessHandler(LogoutSuccessHandler)} with a {@link SimpleUrlLogoutSuccessHandler}.
A shortcut for {@link #permitAll(boolean)} with <code>true</code> as an argument.
Allows specifying the names of cookies to be removed on logout success. This is a shortcut to easily invoke {@link #addLogoutHandler(LogoutHandler)} with a {@link CookieClearingLogoutHandler}.
Sets the {@link LogoutSuccessHandler} to use. If this is specified, {@link #logoutSuccessUrl(String)} is ignored. has been logged out.
Grants access to the {@link #logoutSuccessUrl(String)} and the {@link #logoutUrl(String)} for every user.
Gets the {@link LogoutSuccessHandler} if not null, otherwise creates a new {@link SimpleUrlLogoutSuccessHandler} using the {@link #logoutSuccessUrl(String)}.
Returns true if the logout success has been customized via {@link #logoutSuccessUrl(String)} or {@link #logoutSuccessHandler(LogoutSuccessHandler)}.
Gets the logoutSuccesUrl or null if a {@link #logoutSuccessHandler(LogoutSuccessHandler)} was configured.
Gets the {@link LogoutHandler} instances that will be used.
Creates the {@link LogoutFilter} using the {@link LogoutHandler} instances, the {@link #logoutSuccessHandler(LogoutSuccessHandler)} and the {@link #logoutUrl(String)}.
Allows specifying the {@link PortMapper} instance.
Adds a port mapping
Gets the {@link PortMapper} to use. If {@link #portMapper(PortMapper)} was not invoked, builds a {@link PortMapperImpl} using the port mappings specified with {@link #http(int)}.
Creates a new instance
Maps the given HTTP port to the provided HTTPS port and vice versa.
Allows specifying how long (in seconds) a token is valid for
Whether the cookie should be flagged as secure or not. Secure cookies can only be sent over an HTTPS connection and thus cannot be accidentally submitted over HTTP where they could be intercepted. <p> By default the cookie will be secure if the request is secure. If you only want to use remember-me over HTTPS (recommended) you should set this property to {@code true}. {@code false} to disable their use.
Specifies the {@link UserDetailsService} used to look up the {@link UserDetails} when a remember me token is valid. The default is to use the {@link UserDetailsService} found by invoking {@link HttpSecurity#getSharedObject(Class)} which is set when using {@link WebSecurityConfigurerAdapter#configure(AuthenticationManagerBuilder)}. Alternatively, one can populate {@link #rememberMeServices(RememberMeServices)}.
Specifies the {@link PersistentTokenRepository} to use. The default is to use {@link TokenBasedRememberMeServices} instead.
Sets the key to identify tokens created for remember me authentication. Default is a secure randomly generated key.
The HTTP parameter used to indicate to remember the user at time of login.
The name of cookie which store the token for remember me authentication. Defaults to 'remember-me'.
Allows control over the destination a remembered user is sent to when they are successfully authenticated. By default, the filter will just allow the current request to proceed, but if an {@code AuthenticationSuccessHandler} is set, it will be invoked and the {@code doFilter()} method will return immediately, thus allowing the application to redirect the user to a specific URL, regardless of what the original request was for. returning from {@code doFilter()}.
Specify the {@link RememberMeServices} to use.
Returns the HTTP parameter used to indicate to remember the user at time of login.
Gets the {@link RememberMeServices} or creates the {@link RememberMeServices}.
Creates the {@link RememberMeServices} to use when none is provided. The result is either {@link PersistentTokenRepository} (if a {@link PersistentTokenRepository} is specified, else {@link TokenBasedRememberMeServices}.
Creates {@link TokenBasedRememberMeServices}
Creates {@link PersistentTokenBasedRememberMeServices}
Gets the {@link UserDetailsService} to use. Either the explicitly configure {@link UserDetailsService} from {@link #userDetailsService(UserDetailsService)} or a shared object from {@link HttpSecurity#getSharedObject(Class)}.
Gets the key to use for validating remember me tokens. Either the value passed into {@link #key(String)}, or a secure random string if none was specified.
Allows explicit configuration of the {@link RequestCache} to be used. Defaults to try finding a {@link RequestCache} as a shared object. Then falls back to a {@link HttpSessionRequestCache}.
Specifies the shared {@link SecurityContextRepository} that is to be used
Setting this attribute will inject the {@link SessionManagementFilter} with a {@link SimpleRedirectInvalidSessionStrategy} configured with the attribute value. When an invalid session ID is submitted, the strategy will be invoked, redirecting to the configured URL.
Defines the URL of the error page which should be shown when the SessionAuthenticationStrategy raises an exception. If not set, an unauthorized (402) error code will be returned to the client. Note that this attribute doesn't apply if the error occurs during a form-based login, where the URL for authentication failure will take precedence.
If set to true, allows HTTP sessions to be rewritten in the URLs when using {@link HttpServletResponse#encodeRedirectURL(String)} or {@link HttpServletResponse#encodeURL(String)}, otherwise disallows HTTP sessions to be included in the URL. This prevents leaking information to external domains. rewritten into the URLs, else false (default)
Allows specifying the {@link SessionCreationPolicy} null.
Allows explicitly specifying the {@link SessionAuthenticationStrategy}. The default is to use {@link SessionFixationProtectionStrategy}. If restricting the maximum number of sessions is configured, then {@link CompositeSessionAuthenticationStrategy} delegating to {@link ConcurrentSessionControlAuthenticationStrategy}, {@link SessionFixationProtectionStrategy} (optional), and {@link RegisterSessionAuthenticationStrategy} will be used.
Adds an additional {@link SessionAuthenticationStrategy} to be used within the {@link CompositeSessionAuthenticationStrategy}.
Controls the maximum number of sessions for a user. The default is to allow any number of users.
Invokes {@link #postProcess(Object)} and sets the {@link SessionAuthenticationStrategy} for session fixation.
Specifies that a new session should be created, but the session attributes from the original {@link HttpSession} should not be retained.
Specifies that a new session should be created and the session attributes from the original {@link HttpSession} should be retained.
Specifies that the Servlet container-provided session fixation protection should be used. When a session authenticates, the Servlet 3.1 method {@code HttpServletRequest#changeSessionId()} is called to change the session ID and retain all session attributes. Using this option in a Servlet 3.0 or older container results in an {@link IllegalStateException}.
Specifies that no session fixation protection should be enabled. This may be useful when utilizing other mechanisms for protecting against session fixation. For example, if application container session fixation protection is already in use. Otherwise, this option is not recommended.
The URL to redirect to if a user tries to access a resource and their session has been expired due to too many sessions for the current user. The default is to write a simple error message to the response.
If true, prevents a user from authenticating when the {@link #maximumSessions(int)} has been reached. Otherwise (default), the user who authenticates is allowed access and an existing user's session is expired. The user's who's session is forcibly expired is sent to {@link #expiredUrl(String)}. The advantage of this approach is if a user accidentally does not log out, there is no need for an administrator to intervene or wait till their session expires. authentication, else false (default)
Controls the {@link SessionRegistry} implementation used. The default is {@link SessionRegistryImpl} which is an in memory implementation.
Used to chain back to the {@link SessionManagementConfigurer}
Gets the {@link InvalidSessionStrategy} to use. If {@link #invalidSessionUrl} is null, returns null otherwise {@link SimpleRedirectInvalidSessionStrategy} is used.
Gets the {@link SessionCreationPolicy}. Can not be null.
Returns true if the {@link SessionCreationPolicy} allows session creation, else false
Returns true if the {@link SessionCreationPolicy} is stateless
Gets the customized {@link SessionAuthenticationStrategy} if {@link #sessionAuthenticationStrategy(SessionAuthenticationStrategy)} was specified. Otherwise creates a default {@link SessionAuthenticationStrategy}.
Returns true if the number of concurrent sessions per user should be restricted.
Creates the default {@link SessionAuthenticationStrategy} for session fixation
The StandardInterceptUrlRegistry is what users will interact with after applying the {@link UrlAuthorizationConfigurer}.
Adds a mapping of the {@link RequestMatcher} instances to the {@link ConfigAttribute} instances. provided {@link ConfigAttribute} instances by the {@link RequestMatcher} instances
Creates a String for specifying a user requires a role. automatically (i.e. USER, ADMIN, etc). It should not start with ROLE_
Creates a String for specifying that a user requires one of many roles. etc). Each role should not start with ROLE_ since it is automatically prepended already.
Creates a String for specifying that a user requires one of many authorities ROLE_USER, ROLE_ADMIN, etc).
Creates a new instance {@link ConfigAttribute} instances.
Specifies a user requires a role. automatically (i.e. USER, ADMIN, etc). It should not start with ROLE_ the {@link UrlAuthorizationConfigurer} for further customization
Specifies that a user requires one of many roles. USER, etc). Each role should not start with ROLE_ since it is automatically prepended already.
Specifies a user requires an authority.
Specifies that a user requires one of many authorities (i.e. ROLE_USER, ROLE_ADMIN, etc).
Specifies that an anonymous user is allowed access
Specifies that the user must have the specified {@link ConfigAttribute}'s
Allows specifying the entire {@link X509AuthenticationFilter}. If this is specified, the properties on {@link X509Configurer} will not be populated on the {@link X509AuthenticationFilter}.
Specifies the {@link AuthenticationDetailsSource}
Shortcut for invoking {@link #authenticationUserDetailsService(AuthenticationUserDetailsService)} with a {@link UserDetailsByNameServiceWrapper}.
Specifies the {@link AuthenticationUserDetailsService} to use. If not specified, the shared {@link UserDetailsService} will be used to create a {@link UserDetailsByNameServiceWrapper}. {@link AuthenticationUserDetailsService} to use
Specifies the regex to extract the principal from the certificate. If not specified, the default expression from {@link SubjectDnX509PrincipalExtractor} is used. certificate (i.e. "CN=(.*?)(?:,|$)").
Maps any {@link Message} to a security expression.
Maps any {@link Message} that has a null SimpMessageHeaderAccessor destination header (i.e. CONNECT, CONNECT_ACK, HEARTBEAT, UNSUBSCRIBE, DISCONNECT, DISCONNECT_ACK, OTHER)
Maps a {@link List} of {@link SimpDestinationMessageMatcher} instances.
Maps a {@link List} of {@link SimpDestinationMessageMatcher} instances without regard to the {@link SimpMessageType}. If no destination is found on the Message, then the Matcher returns false. {@link org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher} from. Uses {@link MessageSecurityMetadataSourceRegistry#simpDestPathMatcher(PathMatcher)} .
Maps a {@link List} of {@link SimpDestinationMessageMatcher} instances that match on {@code SimpMessageType.MESSAGE}. If no destination is found on the Message, then the Matcher returns false. {@link org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher} from. Uses {@link MessageSecurityMetadataSourceRegistry#simpDestPathMatcher(PathMatcher)}.
Maps a {@link List} of {@link SimpDestinationMessageMatcher} instances that match on {@code SimpMessageType.SUBSCRIBE}. If no destination is found on the Message, then the Matcher returns false. {@link org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher} from. Uses {@link MessageSecurityMetadataSourceRegistry#simpDestPathMatcher(PathMatcher)}.
Maps a {@link List} of {@link SimpDestinationMessageMatcher} instances. If no destination is found on the Message, then the Matcher returns false. {@link SimpMessageType} is not considered for matching. {@link org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher} from. Uses {@link MessageSecurityMetadataSourceRegistry#simpDestPathMatcher(PathMatcher)}.
The {@link PathMatcher} to be used with the {@link MessageSecurityMetadataSourceRegistry#simpDestMatchers(String...)}. The default is to use the default constructor of {@link AntPathMatcher}. customization.
Determines if the {@link #simpDestPathMatcher(PathMatcher)} has been explicitly set.
Maps a {@link List} of {@link MessageMatcher} instances to a security expression. instances
The {@link SecurityExpressionHandler} to be used. The default is to use {@link DefaultMessageSecurityExpressionHandler}. customization.
Allows subclasses to create creating a {@link MessageSecurityMetadataSource}. <p> This is not exposed so as not to confuse users of the API, which should never invoke this method. </p>
Allows determining if a mapping was added. <p> This is not exposed so as not to confuse users of the API, which should never need to invoke this method. </p>
Creates a new instance constraint
Shortcut for specifying {@link Message} instances require a particular role. If you do not want to have "ROLE_" automatically inserted see {@link #hasAuthority(String)}. start with "ROLE_" as this is automatically inserted. customization
Shortcut for specifying {@link Message} instances require any of a number of roles. If you do not want to have "ROLE_" automatically inserted see {@link #hasAnyAuthority(String...)} start with "ROLE_" as this is automatically inserted. customization
Specify that {@link Message} instances require a particular authority. customization
Specify that {@link Message} instances requires any of a number authorities. "ROLE_USER","ROLE_ADMIN" would mean either "ROLE_USER" or "ROLE_ADMIN" is required). customization
Specify that Messages are allowed by anyone. customization
Specify that Messages are allowed by anonymous users. customization
Specify that Messages are allowed by users that have been remembered. customization
Specify that Messages are not allowed by anyone. customization
Specify that Messages are allowed by any authenticated user. customization
Specify that Messages are allowed by users who have authenticated and were not "remembered". customization
Allows specifying that Messages are secured by an arbitrary expression "hasRole('ROLE_USER') and hasRole('ROLE_SUPER')") customization
<p> Determines if a CSRF token is required for connecting. This protects against remote sites from connecting to the application and being able to read/write data over the connection. The default is false (the token is required). </p> <p> Subclasses can override this method to disable CSRF protection </p>
Maps any request.
Maps a {@link List} of {@link org.springframework.security.web.util.matcher.AntPathRequestMatcher} instances. {@link HttpMethod}.
Maps a {@link List} of {@link org.springframework.security.web.util.matcher.AntPathRequestMatcher} instances. {@link HttpMethod}. {@link org.springframework.security.web.util.matcher.AntPathRequestMatcher} from
Maps a {@link List} of {@link org.springframework.security.web.util.matcher.AntPathRequestMatcher} instances that do not care which {@link HttpMethod} is used. {@link org.springframework.security.web.util.matcher.AntPathRequestMatcher} from
Maps a {@link List} of {@link org.springframework.security.web.util.matcher.RegexRequestMatcher} instances. {@link HttpMethod}. {@link org.springframework.security.web.util.matcher.RegexRequestMatcher} from
Create a {@link List} of {@link org.springframework.security.web.util.matcher.RegexRequestMatcher} instances that do not specify an {@link HttpMethod}. {@link org.springframework.security.web.util.matcher.RegexRequestMatcher} from
Associates a list of {@link RequestMatcher} instances with the {@link AbstractConfigAttributeRequestMatcherRegistry}
Create a {@link List} of {@link AntPathRequestMatcher} instances. {@link HttpMethod}. from
Create a {@link List} of {@link AntPathRequestMatcher} instances that do not specify an {@link HttpMethod}. from
Create a {@link List} of {@link RegexRequestMatcher} instances. {@link HttpMethod}. {@link RegexRequestMatcher} from
Create a {@link List} of {@link RegexRequestMatcher} instances that do not specify an {@link HttpMethod}. {@link RegexRequestMatcher} from
Creates a new instance with the provided {@link ObjectPostProcessor}. This post processor must support Object since there are many types of objects that may be post processed.
Creates a new instance with the provided {@link ObjectPostProcessor}. This post processor must support Object since there are many types of objects that may be post processed. {@link SecurityConfigurer}'s when performing apply
Similar to {@link #build()} and {@link #getObject()} but checks the state to determine if {@link #build()} needs to be called first. while building, returns null.
Applies a {@link SecurityConfigurer} to this {@link SecurityBuilder} overriding any {@link SecurityConfigurer} of the exact same class. Note that object hierarchies are not considered.
Gets the shared objects
Performs post processing of an object. The default is to delegate to the {@link ObjectPostProcessor}.
Subclasses must implement this method to build the object that is being returned.
Determines if the object is unbuilt.
Determines if the state is CONFIGURING or later
Gets the object that was built. If it has not been built yet an Exception is thrown.
Return the {@link SecurityBuilder} when done using the {@link SecurityConfigurer}. This is useful for method chaining.
Gets the {@link SecurityBuilder}. Cannot be null.
Adds an {@link ObjectPostProcessor} to be used for this {@link SecurityConfigurerAdapter}. The default implementation does nothing to the object.
Sets the {@link SecurityBuilder} to be used. This is automatically set when using {@link AbstractConfiguredSecurityBuilder#apply(SecurityConfigurerAdapter)}
Adds an {@link ObjectPostProcessor} to use
Populate the AccessDeniedHandler on the {@link CsrfFilter}
Creates the {@link AccessDeniedHandler} from the result of {@link #getDefaultAccessDeniedHandler(HttpSecurityBuilder)} and {@link #getInvalidSessionStrategy(HttpSecurityBuilder)}. If {@link #getInvalidSessionStrategy(HttpSecurityBuilder)} is non-null, then a {@link DelegatingAccessDeniedHandler} is used in combination with {@link InvalidSessionAccessDeniedHandler} and the {@link #getDefaultAccessDeniedHandler(HttpSecurityBuilder)}. Otherwise, only {@link #getDefaultAccessDeniedHandler(HttpSecurityBuilder)} is used. populate on the {@link CsrfFilter}
Checks the filter list for possible errors and logs them
Checks for the common error of having a login page URL protected by the security interceptor
Needed to account for placeholders
Adds the servlet-api integration filter if required
Adds the jaas-api integration filter if required
Parses the intercept-url elements to obtain the map used by channel security. This will be empty unless the <tt>requires-channel</tt> attribute has been used on a URL path.
Creates the {@code SecurityFilterChain} bean from an &lt;http&gt; element.
Creates the internal AuthenticationManager bean which uses either the externally registered (global) one as a parent or the bean specified by "authentication-manager-ref". All the providers registered by this &lt;http&gt; block will be registered with the internal authentication manager.
The default value if the target object is not a ProviderManager is false. We use false because this feature is associated with {@link ProviderManager} not {@link AuthenticationManager}. If the user wants to leverage {@link ProviderManager#setEraseCredentialsAfterAuthentication(boolean)} their original {@link AuthenticationManager} must be a {@link ProviderManager} (we should not magically add this functionality to their implementation since we cannot determine if it should be on or off).
Obtains a user details service for use in RememberMeServices etc. Will return a caching version if available so should not be used for beans which need to separate the two.
Checks the value of an XML attribute which represents a redirect URL. If not empty or starting with "$" (potential placeholder), or starting with "#" (potential SpEL), "/" or "http" it will raise an error.
Will be called if no url attribute is supplied. Registers beans to create an embedded apache directory server.
Check that the schema location declared in the source file being parsed matches the Spring Security version. The old 2.0 schema is not compatible with the 3.1 parser, so it is an error to explicitly use 2.0. <p> There are also differences between 3.0 and 3.1 which are sufficient that we report using 3.0 as an error too. It might be an error to declare spring-security.xsd as an alias, but you are only going to find that out when one of the sub parsers breaks.
<p> Sets the default prefix to be added to {@link RolesAllowed}. For example, if {@code @RolesAllowed("ADMIN")} or {@code @RolesAllowed("ADMIN")} is used, then the role ROLE_ADMIN will be used when the defaultRolePrefix is "ROLE_" (default). </p> <p> If null or empty, then no default role prefix is used. </p>
The specified config attribute is supported if its an instance of a {@link Jsr250SecurityConfig}.
All classes are supported.
Votes according to JSR 250. <p> If no JSR-250 attributes are found, it will abstain, otherwise it will grant or deny access based on the attributes that are found.
Construct the event, passing in the secure object being intercepted.
Construct the event. reason)
~ Methods ========================================================================================================
Construct the event. <code>AccessDecisionManager</code>
~ Methods ========================================================================================================
Construct the event.
~ Methods ========================================================================================================
~ Methods ========================================================================================================
Construct the event, passing in the public secure object.
Parses the supplied expressions as Spring-EL.
Uses a {@link MethodSecurityEvaluationContext} as the <tt>EvaluationContext</tt> implementation.
Creates the root object for expression evaluation.
Sets the {@link AuthenticationTrustResolver} to be used. The default is {@link AuthenticationTrustResolverImpl}. null.
Sets the {@link ParameterNameDiscoverer} to use. The default is {@link DefaultSecurityParameterNameDiscoverer}.
<p> Sets the default prefix to be added to {@link org.springframework.security.access.expression.SecurityExpressionRoot#hasAnyRole(String...)} or {@link org.springframework.security.access.expression.SecurityExpressionRoot#hasRole(String)}. For example, if hasRole("ADMIN") or hasRole("ROLE_ADMIN") is passed in, then the role ROLE_ADMIN will be used when the defaultRolePrefix is "ROLE_" (default). </p> <p> If null or empty, then no default role prefix is used. </p>
Delay the lookup of the {@link ExpressionParser} to prevent SEC-2136
Intended for testing. Don't use in practice as it creates a new parameter resolver for each instance. Use the constructor which takes the resolver, as an argument thus allowing for caching.
Sets the "this" property for use in expressions. Typically this will be the "this" property of the {@code JoinPoint} representing the method invocation which is being protected.
The parameter name of the target argument (must be a Collection) to which filtering will be applied.
Invokes the internal template methods to create {@code StandardEvaluationContext} and {@code SecurityExpressionRoot} objects. suitable root object.
Override to create a custom instance of {@code StandardEvaluationContext}. <p> The returned object will have a {@code SecurityExpressionRootPropertyAccessor} added, allowing beans in the {@code ApplicationContext} to be accessed via expression properties. overridden.
Creates a new instance
Convenience method to access {@link Authentication#getPrincipal()} from {@link #getAuthentication()}
<p> Sets the default prefix to be added to {@link #hasAnyRole(String...)} or {@link #hasRole(String)}. For example, if hasRole("ADMIN") or hasRole("ROLE_ADMIN") is passed in, then the role ROLE_ADMIN will be used when the defaultRolePrefix is "ROLE_" (default). </p> <p> If null or empty, then no default role prefix is used. </p>
Prefixes role with defaultRolePrefix if defaultRolePrefix is non-null and if role does not already start with defaultRolePrefix.
Set the role hierarchy and pre-calculate for every role the set of all reachable roles, i.e. all roles lower in the hierarchy of every given role. Pre-calculation is done for performance reasons (reachable roles can then be calculated in O(1) time). During pre-calculation, cycles in role hierarchy are detected and will cause a <tt>CycleInRoleHierarchyException</tt> to be thrown.
Parse input and build the map for the roles reachable in one step: the higher role will become a key that references a set of the reachable lower roles.
For every higher role from rolesReachableInOneStepMap store all roles that are reachable from it in the map of roles reachable in one or more steps. (Or throw a CycleInRoleHierarchyException if a cycle in the role hierarchy definition is detected)
~ Methods ========================================================================================================
This method should be used to enforce security on a <code>MethodInvocation</code>. {@code AfterInvocationManager}).
Alternative constructor for situations where we want the advisor decoupled from the advice. Instead the advice bean name should be set. This prevents eager instantiation of the interceptor (and hence the AuthenticationManager). See SEC-773, for example. The metadataSourceBeanName is used rather than a direct reference to support serialization via a bean factory lookup. used on the interceptor) serialization)
~ Methods ========================================================================================================
Method that is suitable for user with @Aspect notation.
Method that is suitable for user with traditional AspectJ-code aspects. {@code AspectJCallback} containing a simple {@code return proceed();} statement
Cleans up the work of the <tt>AbstractSecurityInterceptor</tt> after the secure object invocation has been completed. This method should be invoked after the secure object invocation and before afterInvocation regardless of the secure object invocation returning successfully (i.e. it should be done in a finally block).
Completes the work of the <tt>AbstractSecurityInterceptor</tt> after the secure object invocation has been completed. <tt>null</tt>) caller (may be <tt>null</tt>)
Checks the current authentication token and passes it to the AuthenticationManager if {@link org.springframework.security.core.Authentication#isAuthenticated()} returns false or the property <tt>alwaysReauthenticate</tt> has been set to true.
Helper method which generates an exception containing the passed reason, and publishes an event to the application context. <p> Always throws an exception.
Indicates whether the <code>AbstractSecurityInterceptor</code> should ignore the {@link Authentication#isAuthenticated()} property. Defaults to <code>false</code>, meaning by default the <code>Authentication.isAuthenticated()</code> property is trusted and re-authentication will not occur if the principal has already been authenticated. <code>AbstractSecurityInterceptor</code> to disregard the value of <code>Authentication.isAuthenticated()</code> and always re-authenticate the request (defaults to <code>false</code>).
Only {@code AuthorizationFailureEvent} will be published. If you set this property to {@code true}, {@code AuthorizedEvent}s will also be published.
By rejecting public invocations (and setting this property to <tt>true</tt>), essentially you are ensuring that every secure object invocation advised by <code>AbstractSecurityInterceptor</code> has a configuration attribute defined. This is useful to ensure a "fail safe" mode where undeclared secure objects will be rejected and configuration omissions detected early. An <tt>IllegalArgumentException</tt> will be thrown by the <tt>AbstractSecurityInterceptor</tt> if you set this property to <tt>true</tt> and an attempt is made to invoke a secure object that has no configuration attributes. secure objects that have no configuration attributes (by default it is <code>false</code> which treats undeclared secure objects as "public" or unauthorized).
Iterates through all <code>AfterInvocationProvider</code>s and ensures each can support the presented class. <p> If one or more providers cannot support the presented class, <code>false</code> is returned. object class, which requires every one of its <code>AfterInvocationProvider</code>s to support the secure object class
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
Allows the default role prefix of <code>ROLE_</code> to be overridden. May be set to an empty value, although this is usually not desirable.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Constructor ====================================================================================================
Creates the <tt>MapBasedMethodSecurityMetadataSource</tt> from a
Implementation does not support class-level attributes.
Will walk the method inheritance tree to find the most specific declaration applicable.
Add configuration attributes for a secure method. Method names can end or start with <code>*</code> for matching multiple methods.
Add configuration attributes for a secure method. Mapped method names can end or start with <code>*</code> for matching multiple methods. applies to
Adds configuration attributes for a specific method, for example where the method has been matched using a pointcut expression. If a match already exists in the map for the method, then the existing match will be retained, so that if this method is called for a more general pointcut it will not override a more specific one which has already been added. <p> This method should only be called during initialization of the {@code BeanFactory}.
Add configuration attributes for a secure method.
Obtains the configuration attributes explicitly defined against this bean.
Return if the given method name matches the mapped name. The default implementation checks for "xxx" and "xxx" matches.
See {@link org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource#getAttributes(Method, Class)} for the logic of this method. The ordering here is slightly different in that we consider method-specific annotations on an interface before class-level ones.
Iterates through all <code>AccessDecisionVoter</code>s and ensures each can support the presented class. <p> If one or more voters cannot support the presented class, <code>false</code> is returned.
~ Methods ========================================================================================================
This implementation supports only <code>MethodSecurityInterceptor</code>, because it queries the presented <code>MethodInvocation</code>. <code>false</code> otherwise
This concrete implementation simply polls all configured {@link AccessDecisionVoter}s and grants access if any <code>AccessDecisionVoter</code> voted affirmatively. Denies access only if there was a deny vote AND no affirmative votes. <p> If every <code>AccessDecisionVoter</code> abstained from voting, the decision will be based on the {@link #isAllowIfAllAbstainDecisions()} property (defaults to false). </p> being invoked
~ Methods ========================================================================================================
This concrete implementation simply polls all configured {@link AccessDecisionVoter}s and upon completion determines the consensus of granted against denied responses. <p> If there were an equal number of grant and deny votes, the decision will be based on the {@link #isAllowIfEqualGrantedDeniedDecisions()} property (defaults to true). <p> If every <code>AccessDecisionVoter</code> abstained from voting, the decision will be based on the {@link #isAllowIfAllAbstainDecisions()} property (defaults to false). being invoked
~ Methods ========================================================================================================
This concrete implementation polls all configured {@link AccessDecisionVoter}s for each {@link ConfigAttribute} and grants access if <b>only</b> grant (or abstain) votes were received. <p> Other voting implementations usually pass the entire list of <tt>ConfigAttribute</tt>s to the <code>AccessDecisionVoter</code>. This implementation differs in that each <code>AccessDecisionVoter</code> knows only about a single <code>ConfigAttribute</code> at a time. <p> If every <code>AccessDecisionVoter</code> abstained from voting, the decision will be based on the {@link #isAllowIfAllAbstainDecisions()} property (defaults to false). invoked
Constructs an <code>AccessDeniedException</code> with the specified message.
Constructs an <code>AccessDeniedException</code> with the specified message and root cause.
Constructs an <code>AuthorizationServiceException</code> with the specified message.
Constructs an <code>AuthorizationServiceException</code> with the specified message and root cause.
~ Constructors ===================================================================================================
Allows subclasses to perform any additional checks of a returned (or cached) <code>UserDetails</code> for a given authentication request. Generally a subclass will at least compare the {@link Authentication#getCredentials()} with a {@link UserDetails#getPassword()}. If custom logic is needed to compare additional properties of <code>UserDetails</code> and/or <code>UsernamePasswordAuthenticationToken</code>, these should also appear in this method. {@link #retrieveUser(String, UsernamePasswordAuthenticationToken)} or <code>UserCache</code> not be validated (generally a <code>BadCredentialsException</code>, an <code>AuthenticationServiceException</code>)
Creates a successful {@link Authentication} object. <p> Protected so subclasses can override. </p> <p> Subclasses will usually store the original credentials the user supplied (not salted or encoded passwords) in the returned <code>Authentication</code> object. </p> the {@link #isForcePrincipalAsString()} method)
Allows subclasses to actually retrieve the <code>UserDetails</code> from an implementation-specific location, with the option of throwing an <code>AuthenticationException</code> immediately if the presented credentials are incorrect (this is especially useful if it is necessary to bind to a resource as the user in order to obtain or generate a <code>UserDetails</code>). <p> Subclasses are not required to perform any caching, as the <code>AbstractUserDetailsAuthenticationProvider</code> will by default cache the <code>UserDetails</code>. The caching of <code>UserDetails</code> does present additional complexity as this means subsequent requests that rely on the cache will need to still have their credentials validated, even if the correctness of credentials was assured by subclasses adopting a binding-based strategy in this method. Accordingly it is important that subclasses either disable caching (if they want to ensure that this method is the only method that is capable of authenticating a request, as no <code>UserDetails</code> will ever be cached) or ensure subclasses implement {@link #additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)} to compare the credentials of a cached <code>UserDetails</code> with subsequent authentication requests. </p> <p> Most of the time subclasses will not perform credentials inspection in this method, instead performing it in {@link #additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)} so that code related to credentials validation need not be duplicated across two methods. </p> need to perform a binding-based retrieval of the <code>UserDetails</code> the thrown) (generally a <code>BadCredentialsException</code>, an <code>AuthenticationServiceException</code> or <code>UsernameNotFoundException</code>)
By default the <code>AbstractUserDetailsAuthenticationProvider</code> throws a <code>BadCredentialsException</code> if a username is not found or the password is incorrect. Setting this property to <code>false</code> will cause <code>UsernameNotFoundException</code>s to be thrown instead for the former. Note this is considered less secure than throwing <code>BadCredentialsException</code> for both exceptions. <code>UsernameNotFoundException</code>s to be thrown instead of the non-specific <code>BadCredentialsException</code> (defaults to <code>true</code>)
Sets the policy will be used to verify the status of the loaded <tt>UserDetails</tt> <em>before</em> validation of the credentials takes place.
Sets the PasswordEncoder instance to be used to encode and validate passwords. If not set, the password will be compared as plain text. <p> For systems which are already using salted password which are encoded with a previous release, the encoder should be of type {@code org.springframework.security.authentication.encoding.PasswordEncoder}. Otherwise, the recommended approach is to use {@code org.springframework.security.crypto.password.PasswordEncoder}. types.
The source of salts to use when decoding passwords. <code>null</code> is a valid value, meaning the <code>DaoAuthenticationProvider</code> will present <code>null</code> to the relevant <code>PasswordEncoder</code>. <p> Instead, it is recommended that you use an encoder which uses a random salt and combines it with the password field. This is the default approach taken in the {@code org.springframework.security.crypto.password} package. <code>PasswordEncoder</code>
Performs reflection on the passed <code>User</code> to obtain the salt. <p> The property identified by <code>userPropertyToUse</code> must be available from the passed <code>User</code> object. If it is not available, an {@link AuthenticationServiceException} will be thrown. doesn't exist, <tt>user.getUserPropertyToUse()</tt>.
The method name to call to obtain the salt. Can be either a method name or a bean property name. If your <code>UserDetails</code> contains a <code>UserDetails.getSalt()</code> method, you should set this property to "getSalt" or "salt". from the <code>UserDetails</code>
~ Methods ========================================================================================================
The encoded password is normally returned as Hex (32 char) version of the hash bytes. Setting this property to true will cause the encoded pass to be returned as Base64 text, which will consume 24 characters.
Used by subclasses to extract the password and salt from a merged <code>String</code> created using {@link #mergePasswordAndSalt(String,Object,boolean)}. <p> The first element in the returned array is the password. The second element is the salt. The salt array element will always be present, even if no salt was found in the <code>mergedPasswordSalt</code> argument. </p> salt
Used by subclasses to generate a merged password and salt <code>String</code>. <P> The generated password will be in the form of <code>password{salt}</code>. </p> <p> A <code>null</code> can be passed to either method, and will be handled correctly. If the <code>salt</code> is <code>null</code> or empty, the resulting generated password will simply be the passed <code>password</code>. The <code>toString</code> method of the <code>salt</code> will be used to represent the salt. </p>
~ Methods ========================================================================================================
Calculates the hash of password (and salt bytes, if supplied) and returns a base64 encoded concatenation of the hash and salt, prefixed with {SHA} (or {SSHA} if salt was used).
Checks the validity of an unencoded password against an encoded one in the form "{SSHA}sQuQF8vj8Eg2Y1hPdh3bkQhCKQBgjhQI". the encoded password.
Returns the hash prefix or null if there isn't one.
Encodes the rawPass using an MD4 message digest. If a salt is specified it will be merged with the password before encoding. encodeHashAsBase64 is enabled.
Takes a previously encoded password and compares it with a raw password after mixing in the salt and encoding that value.
The digest algorithm to use Supports the named <a Message Digest Algorithms</a> in the Java environment.
Convenience constructor for specifying the algorithm and whether or not to enable base64 encoding
Encodes the rawPass using a MessageDigest. If a salt is specified it will be merged with the password before encoding. encodeHashAsBase64 is enabled.
Get a MessageDigest instance for the given algorithm. Throws an IllegalArgumentException if <i>algorithm</i> is unknown
Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
Sets the number of iterations for which the calculated hash value should be "stretched". If this is greater than one, the initial digest is calculated, the digest function will be called repeatedly on the result for the additional number of iterations. password/salt value. Defaults to 1.
Constant time comparison to prevent against timing attacks.
~ Methods ========================================================================================================
Demerges the previously {@link #encodePassword(String, Object)}<code>String</code>. <P> The resulting array is guaranteed to always contain two elements. The first is the password, and the second is the salt. </p> <P> Throws an exception if <code>null</code> or an empty <code>String</code> is passed to the method. </p>
Indicates whether the password comparison is case sensitive. <P> Defaults to <code>false</code>, meaning an exact case match is required. </p>
Initializes the ShaPasswordEncoder for SHA-1 strength
Initialize the ShaPasswordEncoder with a given SHA stength as supported by the JVM EX: <code>ShaPasswordEncoder encoder = new ShaPasswordEncoder(256);</code> initializes with SHA-256
~ Constructors ===================================================================================================
Getters for the <code>Authentication</code> request that caused the event. Also available from <code>super.getSource()</code>.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
Getter for the <code>Class</code> that generated this event. This can be useful for generating additional logging information.
The Authentication object is stored as the ApplicationEvent 'source'.
Pre-casted method that returns the 'source' of the event.
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
Creates a new instance with only a defaultConfiguration. Any configuration name will result in defaultConfiguration being returned. {@link #getAppConfigurationEntry(String)}. Can be <code>null</code>.
Creates a new instance with a mapping of login context name to an array of {@link AppConfigurationEntry}s. is an Array of {@link AppConfigurationEntry}s that should be used.
Creates a new instance with a mapping of login context name to an array of {@link AppConfigurationEntry}s along with a default configuration that will be used if no mapping is found for the given login context name. is an Array of {@link AppConfigurationEntry}s that should be used. {@link #getAppConfigurationEntry(String)}. Can be <code>null</code>.
Validates the required properties are set. In addition, if {@link #setCallbackHandlers(JaasAuthenticationCallbackHandler[])} has not been called with valid handlers, initializes to use {@link JaasNameCallbackHandler} and {@link JaasPasswordCallbackHandler}.
Attempts to login the user given the Authentication objects principal and credential 'disabled' accounts. This method only throws a AuthenticationServiceException, with the message of the LoginException that will be thrown, should the loginContext.login() method fail.
Creates the LoginContext to be used for authentication. <code>null</code>).
Publishes the {@link JaasAuthenticationFailedEvent}. Can be overridden by subclasses for different functionality
Publishes the {@link JaasAuthenticationSuccessEvent}. Can be overridden by subclasses for different functionality.
Returns the AuthorityGrannter array that was passed to the {@link #setAuthorityGranters(AuthorityGranter[])} method, or null if it none were ever set.
Set the AuthorityGranters that should be consulted for role names to be granted to the Authentication.
Returns the current JaasAuthenticationCallbackHandler array, or null if none are set.
Set the JAASAuthentcationCallbackHandler array to handle callback objects generated by the LoginContext.login method.
Set the loginContextName, this name is used as the index to the configuration specified in the loginConfig property.
Sets the Configuration to use for Authentication. {@link #createLoginContext(CallbackHandler)} is called.
~ Methods ========================================================================================================
Hook method for configuring Jaas.
Loops through the login.config.url.1,login.config.url.2 properties looking for the login configuration. If it is not set, it will be set to the last available login.config.url.X property.
Set the JAAS login configuration file. Reference</a>
If set, a call to {@code Configuration#refresh()} will be made by {@code #configureJaas(Resource) } method. Defaults to {@code true}. be useful in some environments.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
If the callback passed to the 'handle' method is an instance of NameCallback, the JaasNameCallbackHandler will call, callback.setName(authentication.getPrincipal().toString()).
If the callback passed to the 'handle' method is an instance of PasswordCallback, the JaasPasswordCallbackHandler will call, callback.setPassword(authentication.getCredentials().toString()).
Abort the authentication process by forgetting the Spring Security <code>Authentication</code>. should be ignored.
Authenticate the <code>Subject</code> (phase two) by adding the Spring Security <code>Authentication</code> to the <code>Subject</code>'s principals. should be ignored.
Authenticate the <code>Subject</code> (phase one) by extracting the Spring Security <code>Authentication</code> from the current <code>SecurityContext</code>. <code>LoginModule</code> should be ignored.
Log out the <code>Subject</code>. should be ignored.
Constructs a <code>RemoteAuthenticationException</code> with the specified message and no root cause.
Creates a token with the supplied array of authorities. represented by this authentication object.
~ Methods ========================================================================================================
Checks the {@code credentials}, {@code principal} and {@code details} objects, invoking the {@code eraseCredentials} method on any which implement {@link CredentialsContainer}.
Constructs a <code>AccountExpiredException</code> with the specified message.
Constructs a <code>AccountExpiredException</code> with the specified message and root cause.
~ Methods ========================================================================================================
Always returns an empty <code>String</code>
Constructs an <code>AuthenticationCredentialsNotFoundException</code> with the specified message.
Constructs an <code>AuthenticationCredentialsNotFoundException</code> with the specified message and root cause.
Constructs an <code>AuthenticationServiceException</code> with the specified message.
Constructs an <code>AuthenticationServiceException</code> with the specified message and root cause.
~ Methods ========================================================================================================
Constructs a <code>BadCredentialsException</code> with the specified message.
Constructs a <code>BadCredentialsException</code> with the specified message and root cause.
Constructs a <code>CredentialsExpiredException</code> with the specified message.
Constructs a <code>CredentialsExpiredException</code> with the specified message and root cause.
Constructs a <code>DisabledException</code> with the specified message.
Constructs a <code>DisabledException</code> with the specified message and root cause.
Constructs an <code>InsufficientAuthenticationException</code> with the specified message.
Constructs an <code>InsufficientAuthenticationException</code> with the specified message and root cause.
Constructs a <code>LockedException</code> with the specified message.
Constructs a <code>LockedException</code> with the specified message and root cause.
Attempts to authenticate the passed {@link Authentication} object. <p> The list of {@link AuthenticationProvider}s will be successively tried until an <code>AuthenticationProvider</code> indicates it is capable of authenticating the type of <code>Authentication</code> object passed. Authentication will then be attempted with that <code>AuthenticationProvider</code>. <p> If more than one <code>AuthenticationProvider</code> supports the passed <code>Authentication</code> object, only the first <code>AuthenticationProvider</code> tried will determine the result. No subsequent <code>AuthenticationProvider</code>s will be tried.
Copies the authentication details from a source Authentication object to a destination one, provided the latter does not already have one set.
If set to, a resulting {@code Authentication} which implements the {@code CredentialsContainer} interface will have its {@link CredentialsContainer#eraseCredentials() eraseCredentials} method called before it is returned from the {@code authenticate()} method. memory. Defaults to {@literal true}.
Constructs a <code>ProviderNotFoundException</code> with the specified message.
~ Constructors ===================================================================================================
This constructor can be safely used by any code that wishes to create a <code>UsernamePasswordAuthenticationToken</code>, as the {@link #isAuthenticated()} will return <code>false</code>.
This constructor should only be used by <code>AuthenticationManager</code> or <code>AuthenticationProvider</code> implementations that are satisfied with producing a trusted (i.e. {@link #isAuthenticated()} = <code>true</code>) authentication token.
Creates a new {@link AbstractDelegatingSecurityContextSupport} that uses the specified {@link SecurityContext}. {@link DelegatingSecurityContextRunnable} and each {@link DelegatingSecurityContextCallable} or null to default to the current {@link SecurityContext}.
Creates a new {@link DelegatingSecurityContextCallable} with a specific {@link SecurityContext}. the specified {@link SecurityContext}. Cannot be null. {@link Callable}. Cannot be null.
Creates a new {@link DelegatingSecurityContextCallable} with the {@link SecurityContext} from the {@link SecurityContextHolder}. {@link SecurityContext}. Cannot be null.
Creates a {@link DelegatingSecurityContextCallable} and with the given {@link Callable} and {@link SecurityContext}, but if the securityContext is null will defaults to the current {@link SecurityContext} on the {@link SecurityContextHolder} the specified {@link SecurityContext}. Cannot be null. {@link Callable}. If null, defaults to {@link SecurityContextHolder#getContext()}
Creates a new {@link DelegatingSecurityContextExecutor} that uses the specified {@link SecurityContext}. {@link DelegatingSecurityContextRunnable} or null to default to the current {@link SecurityContext}
Creates a new {@link DelegatingSecurityContextExecutor} that uses the current {@link SecurityContext} from the {@link SecurityContextHolder} at the time the task is submitted.
Creates a new {@link DelegatingSecurityContextExecutorService} that uses the specified {@link SecurityContext}. be null. {@link DelegatingSecurityContextRunnable} and each {@link DelegatingSecurityContextCallable}.
Creates a new {@link DelegatingSecurityContextExecutorService} that uses the current {@link SecurityContext} from the {@link SecurityContextHolder}. null.
Creates a new {@link DelegatingSecurityContextRunnable} with a specific {@link SecurityContext}. {@link SecurityContext}. Cannot be null. {@link Runnable}. Cannot be null.
Creates a new {@link DelegatingSecurityContextRunnable} with the {@link SecurityContext} from the {@link SecurityContextHolder}. {@link SecurityContext}. Cannot be null.
Factory method for creating a {@link DelegatingSecurityContextRunnable}. establishing a {@link SecurityContext} on the {@link SecurityContextHolder}. Cannot have null. delegate {@link Runnable}. If null, the current {@link SecurityContext} from the {@link SecurityContextHolder} will be used.
Creates a new {@link DelegatingSecurityContextScheduledExecutorService} that uses the specified {@link SecurityContext}. delegate to. Cannot be null. {@link DelegatingSecurityContextRunnable} and each {@link DelegatingSecurityContextCallable}.
Creates a new {@link DelegatingSecurityContextScheduledExecutorService} that uses the current {@link SecurityContext} from the {@link SecurityContextHolder}. null.
Adds a new SmartApplicationListener to use. null.
Map the given array of attributes to Spring Security GrantedAuthorities.
Preprocess the given map to convert all the values to GrantedAuthority collections
Convert the given value to a collection of Granted Authorities
Convert the given value to a collection of Granted Authorities, adding the result to the given result collection.
Check whether all properties have been set to correct values.
Map the given list of string attributes one-to-one to Spring Security GrantedAuthorities.
Map the given role one-on-one to a Spring Security GrantedAuthority, optionally doing case conversion and/or adding a prefix.
Creates a mapping of the supplied authorities based on the case-conversion and prefix settings. The mapping will be one-to-one unless duplicates are produced during the conversion. If a default authority has been set, this will also be assigned to each mapping.
Sets the prefix which should be added to the authority name (if it doesn't already exist) {@code AccessDecisionVoter}.
Whether to convert the authority value to upper case in the mapping.
Whether to convert the authority value to lower case in the mapping.
Sets a default authority to be assigned to all users
Creates a array of GrantedAuthority objects from a comma-separated string representation (e.g. "ROLE_A, ROLE_B, ROLE_C").
Converts an array of GrantedAuthority objects to a Set. GrantedAuthority.getAuthority()
~ Methods ========================================================================================================
Explicitly clears the context value from the current thread.
Obtain the current <code>SecurityContext</code>.
Primarily for troubleshooting purposes, this method shows how many times the class has re-initialized its <code>SecurityContextHolderStrategy</code>. {@link #setStrategyName(String)} to switch to an alternate strategy.
Associates a new <code>SecurityContext</code> with the current thread of execution.
Changes the preferred strategy. Do <em>NOT</em> call this method more than once for a given JVM, as it will re-initialize the strategy and adversely affect any existing threads using the old strategy. used.
Allows retrieval of the context strategy. See SEC-1188.
Delegates the creation of a new, empty context to the configured strategy.
Gets the parameter names or null if not found. or Constructor)
Finds the parameter name from the provided {@link Annotation}s or null if it could not find it. The search is done by looking at the value property of the {@link #annotationClassesToUse}.
Creates a new instance with only the default {@link ParameterNameDiscoverer} instances.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
Refreshes the internal lastRequest to the current date and time.
~ Methods ========================================================================================================
sent to the client)
defaults to 256)
Allows the Pseudo Random Number Generator (PRNG) algorithm to be nominated. Defaults to "SHA1PRNG".
Allows the user to specify a resource which will act as a seed for the {@link SecureRandom} instance. Specifically, the resource will be read into an {@link InputStream} and those bytes presented to the {@link SecureRandom#setSeed(byte[])} method. Note that this will simply supplement, rather than replace, the existing seed. As such, it is always safe to set a seed using this method (it never reduces randomness).
Returns an SHA digest. caught.
Calculates the SHA digest and returns the value as a <code>byte[]</code>.
Calculates the SHA digest and returns the value as a hex string.
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
Allows subclasses to add their own granted authorities to the list to be returned in the <tt>UserDetails</tt>. <code>authoritiesByUsername</code> mapping
Executes the SQL <tt>usersByUsernameQuery</tt> and returns a list of UserDetails objects. There should normally only be one matching user.
Loads authorities by executing the SQL from <tt>authoritiesByUsernameQuery</tt>.
Loads authorities by executing the SQL from <tt>groupAuthoritiesByUsernameQuery</tt>.
Can be overridden to customize the creation of the final UserDetailsObject which is returned by the <tt>loadUserByUsername</tt> method. loading queries.
Allows the default query string used to retrieve authorities based on username to be overridden, if default table or column names need to be changed. The default query is {@link #DEF_AUTHORITIES_BY_USERNAME_QUERY}; when modifying this query, ensure that all returned columns are mapped back to the same column names as in the default query.
Allows the default query string used to retrieve group authorities based on username to be overridden, if default table or column names need to be changed. The default query is {@link #DEF_GROUP_AUTHORITIES_BY_USERNAME_QUERY}; when modifying this query, ensure that all returned columns are mapped back to the same column names as in the default query.
Allows a default role prefix to be specified. If this is set to a non-empty value, then it is automatically prepended to any roles read in from the db. This may for example be used to add the <tt>ROLE_</tt> prefix expected to exist in role names (by default) by some other Spring Security classes, in the case that the prefix is not already present in the db.
If <code>true</code> (the default), indicates the {@link #getUsersByUsernameQuery()} returns a username in response to a query. If <code>false</code>, indicates that a primary key is used instead. If set to <code>true</code>, the class will use the database-derived username in the returned <code>UserDetails</code>. If <code>false</code>, the class will use the {@link #loadUserByUsername(String)} derived username in the returned <code>UserDetails</code>. username <code>String</code>, or <code>false</code> if the mapping returns a database primary key.
Allows the default query string used to retrieve users based on username to be overridden, if default table or column names need to be changed. The default query is {@link #DEF_USERS_BY_USERNAME_QUERY}; when modifying this query, ensure that all returned columns are mapped back to the same column names as in the default query. If the 'enabled' column does not exist in the source database, a permanent true value for this column may be returned by using a query similar to <pre> &quot;select username,password,'true' as enabled from users where username = ?&quot; </pre>
Enables loading of authorities (roles) from the authorities table. Defaults to true
Enables support for group authorities. Defaults to false
~ Methods ========================================================================================================
Set all authorities for this user.
Set all authorities for this user from String values. It will create the necessary {@link GrantedAuthority} objects.
~ Methods ========================================================================================================
Calls the more complex constructor with all boolean arguments set to {@code true}.
Construct the <code>User</code> with the details required by {@link org.springframework.security.authentication.dao.DaoAuthenticationProvider}. <code>DaoAuthenticationProvider</code> <code>DaoAuthenticationProvider</code> expired presented the correct username and password and the user is enabled. Not null. a parameter or as an element in the <code>GrantedAuthority</code> collection
Constructs an empty wrapper for compatibility with Spring Security 2.0.x's method of using a setter.
Constructs a new wrapper using the supplied {@link org.springframework.security.core.userdetails.UserDetailsService} as the service to delegate to.
Check whether all required properties have been set.
Get the UserDetails object from the wrapped UserDetailsService implementation
Set the wrapped UserDetailsService implementation
Constructs a <code>UsernameNotFoundException</code> with the specified message.
Constructs a {@code UsernameNotFoundException} with the specified message and root cause.
Constructs an {@code AuthenticationException} with the specified message and root cause.
Constructs an {@code AuthenticationException} with the specified message and no root cause.
Returns a comparable value for a qualifier. This method takes into account the ordering of known qualifiers then unknown qualifiers with lexical ordering. just returning an Integer with the index here is faster, but requires a lot of if/then/else to check for -1 or QUALIFIERS.size and then resort to lexical ordering. Most comparisons are decided by the first character, so this is still fast. If more characters are needed then it requires a lexical sort anyway.
Performs version checks
Perform version checks with specific min Spring Version
Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ UserDetailsManager implementation ==============================================================================
~ GroupManager implementation ====================================================================================
Optionally sets the UserCache if one is in use in the application. This allows the user to be removed from the cache after updates have taken place to avoid stale data.
Creates a new {@link DelegatingSecurityContextSchedulingTaskExecutor} that uses the specified {@link SecurityContext}. delegate to. Cannot be null. {@link DelegatingSecurityContextRunnable} and {@link DelegatingSecurityContextCallable}
Creates a new {@link DelegatingSecurityContextSchedulingTaskExecutor} that uses the current {@link SecurityContext}. Cannot be null.
Creates a new {@link DelegatingSecurityContextAsyncTaskExecutor} that uses the specified {@link SecurityContext}. Cannot be null. {@link DelegatingSecurityContextRunnable} and {@link DelegatingSecurityContextCallable}
Creates a new {@link DelegatingSecurityContextAsyncTaskExecutor} that uses the current {@link SecurityContext}. Cannot be null.
Creates a new {@link DelegatingSecurityContextTaskExecutor} that uses the specified {@link SecurityContext}. null. {@link DelegatingSecurityContextRunnable}
Creates a new {@link DelegatingSecurityContextTaskExecutor} that uses the current {@link SecurityContext} from the {@link SecurityContextHolder}. null.
~ Methods ======================================================================================================== Attempts to locate the specified field on the class.
Returns the value of a (nested) field on a bean. Intended for testing.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
Generates a <code>MethodInvocation</code> for specified <code>methodName</code> on the passed object, using the <code>args</code> to locate the method. empty) problem
Generates a <code>MethodInvocation</code> for the specified <code>methodName</code> on the passed class. If a method with this name, taking no arguments does not exist, it will check through the declared methods on the class, until one is found matching the supplied name. If more than one method name matches, an <tt>IllegalArgumentException</tt> will be raised. <code>Method</code> problem
Generates a <code>MethodInvocation</code> for specified <code>methodName</code> on the passed class, using the <code>args</code> to locate the method. <code>Method</code> signature problem
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
In order to reproduce the bug for SEC-2150, we must have a proxy object that implements TargetSourceAware and implements our annotated interface.
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
This is an explicit test for SEC-2056. It is intentionally ignored since this test is not deterministic and {@link #testUserNotFoundEncodesPassword()} ensures that SEC-2056 is fixed.
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
Returns the lowercase string, followed by security environment information. was on the <code>SecurityContext</code> at the time of method invocation, and a boolean indicating if the <code>Authentication</code> object is authenticated or not
Returns the uppercase string, followed by security environment information. was on the <code>SecurityContext</code> at the time of method invocation, and a boolean indicating if the <code>Authentication</code> object is authenticated or not
Delegates through to the {@link #makeLowerCase(String)} method.
Encode a byte array using bcrypt's slightly-modified base64 encoding scheme. Note that this is <strong>not</strong> compatible with the standard MIME-base64 encoding.
Look up the 3 bits base64-encoded by the specified character, range-checking against conversion table
Decode a string encoded using bcrypt's base64 scheme to a byte array. Note that this is *not* compatible with the standard MIME-base64 encoding.
Blowfish encipher a single 64-bit block encoded as two 32-bit halves
Cycically extract a word of key material
Initialise the Blowfish key schedule
Key the Blowfish cipher
Perform the "enhanced key schedule" step described by Provos and Mazieres in
Perform the central password hashing step in the bcrypt scheme
Hash a password using the OpenBSD bcrypt scheme
Generate a salt for use with the BCrypt.hashpw() method factor therefore increases as 2**log_rounds.
Generate a salt for use with the BCrypt.hashpw() method, selecting a reasonable default for the number of hashing rounds to apply
Check that a plaintext password matches a previously hashed one
Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
Returns one of the _SOMETHING_DECODABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED and URL_SAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
<p> Encodes up to three bytes of the array <var>source</var> and writes the resulting four Base64 bytes to <var>destination</var>. The source and destination arrays can be manipulated anywhere along their length by specifying <var>srcOffset</var> and <var>destOffset</var>. This method does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 3 for the <var>source</var> array or <var>destOffset</var> + 4 for the <var>destination</var> array. The actual number of significant bytes in your array is given by <var>numSigBytes</var>. </p> <p> This is the lowest level of the encoding methods with all possible parameters. </p>
Decodes four bytes from array <var>source</var> and writes the resulting bytes (up to three of them) to <var>destination</var>. The source and destination arrays can be manipulated anywhere along their length by specifying <var>srcOffset</var> and <var>destOffset</var>. This method does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 4 for the <var>source</var> array or <var>destOffset</var> + 3 for the <var>destination</var> array. This method returns the actual number of bytes that were converted from the Base64 encoding. <p> This is the lowest level of the decoding methods with all possible parameters. </p> not enough room in the array.
Low-level access to decoding ASCII characters in the form of a byte array. <strong>Ignores GUNZIP option, if it's set.</strong> This is not generally a recommended method, although it is used internally as part of the decoding process. Special case: if len = 0, an empty array is returned. Still, if you need more speed and reduced memory footprint (and aren't gzipping), consider this method.
Get the bytes of the String in UTF-8 encoded form.
Decode the bytes in UTF-8 form into a String.
internal helpers
Generates a SecretKey.
Constructs a new Cipher.
Initializes the Cipher for use.
Initializes the Cipher for use.
Invokes the Cipher to perform encryption or decryption (depending on the initialized mode).
Creates a standard password-based bytes encryptor using 256 bit AES encryption with Galois Counter Mode (GCM). Derives the secret key using PKCS #5's PBKDF2 (Password-Based Key Derivation Function #2). Salts the password to prevent dictionary attacks against the key. The provided salt is expected to be hex-encoded; it should be random and at least 8 bytes in length. Also applies a random 16 byte initialization vector to ensure each encrypted message will be unique. Requires Java 6. not be shared key (instead of GCM)
Creates a standard password-based bytes encryptor using 256 bit AES encryption. Derives the secret key using PKCS #5's PBKDF2 (Password-Based Key Derivation Function #2). Salts the password to prevent dictionary attacks against the key. The provided salt is expected to be hex-encoded; it should be random and at least 8 bytes in length. Also applies a random 16 byte initialization vector to ensure each encrypted message will be unique. Requires Java 6. not be shared key
Creates a text encryptor that uses "stronger" password-based encryption. Encrypted text is hex-encoded. not be shared
Creates a text encryptor that uses "standard" password-based encryption. Encrypted text is hex-encoded. not be shared
Creates an encryptor for queryable text strings that uses standard password-based encryption. Uses a 16-byte all-zero initialization vector so encrypting the same data results in the same encryption result. This is done to allow encrypted data to be queried against. Encrypted text is hex-encoded. not be shared secret key
Creates a text encryptor that performs no encryption. Useful for developer testing environments where working with plain text strings is desired for simplicity.
Create a {@link BytesKeyGenerator} that uses a {@link SecureRandom} to generate keys of 8 bytes in length.
Create a {@link BytesKeyGenerator} that uses a {@link SecureRandom} to generate keys of a custom length.
Create a {@link BytesKeyGenerator} that returns a single, shared {@link SecureRandom} key of a custom length.
Creates a {@link StringKeyGenerator} that hex-encodes {@link SecureRandom} keys of 8 bytes in length. The hex-encoded string is keyLength * 2 characters in length.
Creates a secure random key generator using the defaults.
Creates a secure random key generator with a custom key length.
Create a new Digester.
Get the singleton {@link NoOpPasswordEncoder}.
Constructs a standard password encoder with no additional secret value.
Constructs a standard password encoder with a secret value which is also included in the password hash.
internal helpers
Constant time comparison to prevent against timing attacks.
Combine the individual byte arrays into one array.
Extract a sub array of bytes out of the byte array.
Creates a new instance that always uses the same {@link Authentication} object.
Reproduces the NPE mentioned in SEC-484 where a sessionId is removed from the set of sessions before it is removed from the list of sessions for a principal. getAllSessions(principal, false) then finds the sessionId in the principal's session list but reads null for the SessionInformation with the same Id. Note that this is not guaranteed to produce the error but is a good testing point. Increasing the number of sessions makes a failure more likely, but slows the test considerably. Inserting temporary sleep statements in SessionRegistryClassImpl will also help.
Security-specific utility methods
Main class to allow server to be started from gradle script
ClassPathResource ldifs = new ClassPathResource("test-server.ldif"); if (!ldifs.getFile().exists()) { throw new IllegalStateException("Ldif file not found: " + ldifs.getFile().getAbsolutePath()); DirContext ctx = getContextSource().getReadWriteContext(); // First of all, make sure the database is empty. Name startingPoint = new DistinguishedName("dc=springframework,dc=org"); try { clearSubContexts(ctx, startingPoint); LdifFileLoader loader = new LdifFileLoader(server.getService().getAdminSession(), ldifs.getFile().getAbsolutePath()); loader.execute(); } finally { ctx.close(); } } private void clearSubContexts(DirContext ctx, Name name) throws NamingException { NamingEnumeration<Binding> enumeration = null; try { enumeration = ctx.listBindings(name); while (enumeration.hasMore()) { Binding element = enumeration.next(); DistinguishedName childName = new DistinguishedName(element.getName()); childName.prepend((DistinguishedName) name); try { ctx.destroySubcontext(childName); } catch (ContextNotEmptyException e) { clearSubContexts(ctx, childName); ctx.destroySubcontext(childName); } } } catch(NameNotFoundException ignored) { } catch (NamingException e) { e.printStackTrace(); } finally { try { enumeration.close(); } catch (Exception ignored) { } } }
By default, a failed authentication (LDAP error 49) will result in a {@code BadCredentialsException}. <p> If this property is set to {@code true}, the exception message from a failed bind attempt will be parsed for the AD-specific error code and a {@link CredentialsExpiredException}, {@link DisabledException}, {@link AccountExpiredException} or {@link LockedException} will be thrown for the corresponding codes. All other codes will result in the default {@code BadCredentialsException}. the AD error code.
The LDAP filter string to search for the user being authenticated. Occurrences of {0} are replaced with the {@code username@domain}. <p> Defaults to: {@code (&(objectClass=user)(userPrincipalName= 0}))} </p>
Creates the final {@code Authentication} object which will be returned from the {@code authenticate} method. <tt>UserDetailsContextMapper</tt>.
Determines whether the supplied password will be used as the credentials in the successful authentication token. If set to false, then the password will be {@code UserDetailsContextMapper}. Often it will not be possible to read the password from the directory, so defaults to true.
Allows a custom strategy to be used for creating the <tt>UserDetails</tt> which will be stored as the principal in the <tt>Authentication</tt> returned by the {@link #createSuccessfulAuthentication(org.springframework.security.authentication.UsernamePasswordAuthenticationToken, org.springframework.security.core.userdetails.UserDetails)} method. simple <tt>LdapUserDetailsMapper</tt>.
Provides access to the injected {@code UserDetailsContextMapper} strategy for use by subclasses.
Create an initialized instance with the {@link ContextSource} provided.
Builds list of possible DNs for the user, worked out from the <tt>userDnPatterns</tt> property. set.
Sets the user attributes which will be retrieved from the directory.
Sets the pattern which will be used to supply a DN for the user. The pattern should be the name relative to the root DN. The pattern argument {0} will contain the username. An example would be "cn={0},ou=people". username to a DN.
Create an initialized instance using the {@link BaseLdapPathContextSource} provided. operations will be performed.
Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN. The default implementation just reports the failure to the debug logger.
Create an instance with the supplied authenticator and authorities populator implementations. to be used by this provider for authenticating users. user after they've been authenticated.
Creates an instance with the supplied authenticator and a null authorities populator. In this case, the authorities must be mapped from the user context.
~ Methods ========================================================================================================
Escape a value for use in a filter.
LDAP Encodes a value for use with a DN. Escapes for LDAP, not JNDI! <br/> Escapes:<br/> ' ' [space] - "\ " [if first or last] <br/> '#' [hash] - "\#" <br/> ',' [comma] - "\," <br/> ';' [semicolon] - "\;" <br/> '= [equals] - "\=" <br/> '+' [plus] - "\+" <br/> '&lt;' [less than] - "\&lt;" <br/> '&gt;' [greater than] - "\&gt;" <br/> '"' [double quote] - "\"" <br/> '\' [backslash] - "\\" <br/>
Decodes a value. Converts escaped chars to ordinary chars. space last.
~ Constructors ===================================================================================================
Get the principals of the logged in user, in this case the distinguished name.
Creates a non-critical (request) control.
Creates a (request) control.
Retrieves the ASN.1 BER encoded value of the LDAP control. The request value for this control is always empty.
Returns the OID of the Password Policy Control ("1.3.6.1.4.1.42.2.27.8.5.1").
Returns whether the control is critical for the client.
Creates an instance of PasswordPolicyResponseControl if the passed control is a response control of this type. Attributes of the result are filled with the correct values (e.g. error code).
Decodes the Ber encoded control data. The ASN.1 value of the control data is: <pre> </pre>
Returns the unchanged value of the response control. Returns the unchanged value of the response control as byte array.
Returns the graceLoginsRemaining.
Returns the timeBeforeExpiration.
Checks whether an error is present.
Checks whether a warning is present.
Determines whether an account locked error has been returned.
Create a textual representation containing error and warning messages, if any are present.
~ Constructors ===================================================================================================
Return the LdapUserDetails containing the user's information directory entry
Sets the corresponding property on the {@link SearchControls} instance used in the search.
If true then searches the entire subtree as identified by context, if false (the default) then only searches the level identified by the context. SearchControls.SUBTREE_SCOPE rather than SearchControls.ONELEVEL_SCOPE.
The time to wait before the search fails; the default is zero, meaning forever.
Specifies the attributes that will be returned as part of the search. <p> null indicates that all attributes will be returned. An empty array indicates no attributes are returned. returned. Can be null.
Constructor for group search scenarios. <tt>userRoleAttributes</tt> may still be set as a property. the root DN of the context factory. If null, no search will be performed.
This method should be overridden if required to obtain any additional roles for the given user (on top of those obtained from the standard search implemented by this class). search
Obtains the authorities for the user who's directory entry is represented by the supplied LdapUserDetails object.
Convert the role to uppercase
The default role which will be assigned to all users.
Sets the prefix which will be prepended to the values loaded from the directory. Defaults to "ROLE_" for compatibility with <tt>RoleVoter</tt>.
If set to true, a subtree scope search will be performed. If false a single-level search is used. <tt>groupSearchBase</tt>.
Sets the corresponding property on the underlying template, avoiding specific issues with Active Directory.
Returns the current LDAP template. Method available so that classes extending this can override the template used
Returns the attribute name of the LDAP attribute that will be mapped to the role name Method available so that classes extending this can override
Returns the search filter configured for this populator Method available so that classes extending this can override
Returns the role prefix used by this populator Method available so that classes extending this can override
Returns true if role names are converted to uppercase Method available so that classes extending this can override
Returns the default role Method available so that classes extending this can override
Returns the search controls Method available so that classes extending this can override the search controls used
Constructs an LdapAuthority that has a role and a DN but no other attributes
Constructs an LdapAuthority with the given role, DN and other LDAP attributes
Returns the LDAP attributes
Returns the DN for this LDAP authority
Returns the values for a specific attribute
Returns the first attribute value for a specified attribute
Adds the authority to the list, unless it is already there, in which case it is ignored
Default context mapper used to create a set of roles from a list of attributes
Changes the password for the current user. The username is obtained from the security context. <p> If the old password is supplied, the update will be made by rebinding as the user, thus modifying the password using the user's permissions. If <code>oldPassword</code> is null, the update will be attempted using a standard read/write context supplied by the context source. </p>
Creates a DN from a group name.
Sets the name of the multi-valued attribute which holds the DNs of users who are members of a group. <p> Usually this will be <tt>uniquemember</tt> (the default value) or <tt>member</tt>. </p> members.
~ Methods ========================================================================================================
Extension point to allow customized creation of the user's password from the attribute stored in the directory.
Creates a GrantedAuthority from a role attribute. Override to customize authority object creation. <p> The default implementation converts string attributes to roles, making use of the <tt>rolePrefix</tt> and <tt>convertToUpperCase</tt> properties. Non-String attributes are ignored. </p> if this attribute should be ignored.
Determines whether role field values will be converted to upper case when loaded. The default is true.
The name of the attribute which contains the user's password. Defaults to "userPassword".
The names of any attributes in the user's entry which represent application roles. These will be converted to <tt>GrantedAuthority</tt>s and added to the list in the returned LdapUserDetails object. The attribute values must be Strings by default.
The prefix that should be applied to the role names
Constructor for group search scenarios. <tt>userRoleAttributes</tt> may still be set as a property. the root DN of the
Performs the nested group search searches
Returns the attribute names that this populator has been configured to retrieve Value can be null, represents fetch all attributes
Sets the attribute names to retrieve for each ldap groups. Null means retrieve all
How far should a nested search go. Depth is calculated in the number of levels we search up for parent groups.
How far should a nested search go. Depth is calculated in the number of levels we search up for parent groups.
Assembles the Distinguished Name that should be used the given username.
Create and initialize an instance which will connect to the supplied LDAP URL. If you want to use more than one server for fail-over, rather use the {@link #DefaultSpringSecurityContextSource(List, String)} constructor.
Create and initialize an instance which will connect of the LDAP Spring Security Context Source. It will connect to any of the provided LDAP server URLs. well, given that Spring Security is able to connect to the server. Note that these <b>URLs must not include the base DN</b>! <pre> dc=company,dc=com </pre>
Builds a Spring LDAP-compliant Provider URL string, i.e. a space-separated list of LDAP servers with their base DNs. As the base DN must be identical for all servers, it needs to be supplied only once. <pre> </pre> . LDAPS URLs may be used as well, given that Spring Security is able to connect to the server. <pre> dc=company,dc=com </pre>
~ Methods ========================================================================================================
Obtains the part of a DN relative to a supplied base context. <p> If the DN is "cn=bob,ou=people,dc=springframework,dc=org" and the base context name is "ou=people,dc=springframework,dc=org" it would return "cn=bob". </p>
Gets the full dn of a name by prepending the name of the context it is relative to. If the name already contains the base name, it is returned unaltered.
Works out the root DN for an LDAP URL. <p> has the root DN "dc=springframework,dc=org". </p>
Parses the supplied LDAP URL. invalid.
~ Constructors ===================================================================================================
Performs an LDAP compare operation of the value of an attribute for a particular directory entry.
Composes an object from the attributes of the given DN. directory entry.
Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search. Note that one directory entry may have several values for the attribute. Intended for role searches and similar scenarios. in all the matching entries.
Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search. Note that one directory entry may have several values for the attribute. Intended for role searches and similar scenarios. entries. The attribute name is the key for each set of values. In addition each map contains the DN as a String with the key predefined key {@link #DN_KEY}.
Returns the DN for the context representing this LDAP record. By default this is using {@link javax.naming.Context#getNameInNamespace()} instead of {@link org.springframework.ldap.core.DirContextAdapter#getDn()} since the latter returns a partial DN if a base has been specified.
Extracts String values for a specified attribute name and places them in the map representing the ldap record If a value is not of type String, it will derive it's value from the {@link Object#toString()}
Performs a search, with the requirement that the search shall return a single directory entry, and uses the supplied mapper to create the object from that entry. <p> Ignores <tt>PartialResultException</tt> if thrown, for compatibility with Active Directory (see {@link LdapTemplate#setIgnorePartialResultException(boolean)}). source. search returns more than one result.
Internal method extracted to avoid code duplication in AD search.
We need to make sure the search controls has the return object flag set to true, in order for the search to return DirContextAdapter instances.
Sets the search controls which will be used for search operations by the template. template.
~ Methods ========================================================================================================
SEC-303. Non-retrieved role attribute causes NullPointerException
Create a {@link MessageSecurityMetadataSource} that uses {@link MessageMatcher} mapped to Spring Expressions. Each entry is considered in order and only the first match is used. For example: <pre> </pre> <p> If our destination is "/public/hello", it would match on "/public/**" and on "/**". However, only "/public/**" would be used since it is the first entry. That means that a destination of "/public/hello" will be mapped to "permitAll". <p> For a complete listing of expressions see {@link MessageSecurityExpressionRoot} that are turned into an Expression using {@link DefaultMessageSecurityExpressionHandler#getExpressionParser()}
Create a {@link MessageSecurityMetadataSource} that uses {@link MessageMatcher} mapped to Spring Expressions. Each entry is considered in order and only the first match is used. For example: <pre> </pre> <p> If our destination is "/public/hello", it would match on "/public/**" and on "/**". However, only "/public/**" would be used since it is the first entry. That means that a destination of "/public/hello" will be mapped to "permitAll". </p> <p> For a complete listing of expressions see {@link MessageSecurityExpressionRoot} </p> that are turned into an Expression using {@link DefaultMessageSecurityExpressionHandler#getExpressionParser()}
Creates a new instance
Creates a new instance
Obtains the specified {@link Annotation} on the specified {@link MethodParameter}. {@link MethodParameter}
Creates a new instance using the header of the name {@link SimpMessageHeaderAccessor#USER_HEADER}.
Creates a new instance that uses the specified header to obtain the {@link Authentication}. {@link Authentication}. Cannot be null.
Allows setting the Authentication used for anonymous authentication. Default is: <pre> new AnonymousAuthenticationToken(&quot;key&quot;, &quot;anonymous&quot;, AuthorityUtils.createAuthorityList(&quot;ROLE_ANONYMOUS&quot;)); </pre> be null.
Creates a new instance
Creates a new instance
Matches every {@link Message}
Creates a new instance
<p> Creates a new instance with the specified pattern, null {@link SimpMessageType} (matches any type), and a {@link AntPathMatcher} created from the default constructor. <p> The mapping matches destinations despite the using the following rules: <ul> <li>? matches one character</li> <li>* matches zero or more characters</li> <li>** matches zero or more 'directories' in a path</li> </ul> <p> Some examples: <ul> <li>{@code com/t?st.jsp} - matches {@code com/test} but also {@code com/tast} or {@code com/txst}</li> <li>{@code com/*suffix} - matches all files ending in {@code suffix} in the {@code com} directory</li> <li>{@code com/&#42;&#42;/test} - matches all destinations ending with {@code test} underneath the {@code com} path</li> </ul>
<p> Creates a new instance with the specified pattern and {@link PathMatcher}.
<p> Creates a new instance with the specified pattern, {@link SimpMessageType}, and {@link PathMatcher}. {@link SimpMessageType} should be matched.
<p> Creates a new instance with the specified pattern, {@code SimpMessageType.SUBSCRIBE}, and {@link PathMatcher}.
<p> Creates a new instance with the specified pattern, {@code SimpMessageType.MESSAGE}, and {@link PathMatcher}.
Creates a new instance be null.
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
The attribute name
The attribute type Identifier (a URI).
The "required" flag for the attribute when used with an authentication request. Defaults to "false".
The requested count for the attribute when it is used as part of an authentication request. Defaults to 1.
The values obtained from an attribute exchange.
~ Constructors ===================================================================================================
Builds the <tt>return_to</tt> URL that will be sent to the OpenID service provider. By default returns the URL of the current request.
Reads the <tt>claimedIdentityFieldName</tt> from the submitted request.
Maps the <tt>return_to url</tt> to a realm, for example: <pre> </pre> If no mapping is provided then the returnToUrl will be parsed to extract the protocol, hostname and port followed by a trailing slash. This means that
The name of the request parameter containing the OpenID identity, as submitted from the initial login form.
Specifies any extra parameters submitted along with the identity field which should be appended to the {@code return_to} URL which is assembled by {@link #buildReturnToUrl}. default to the parameter name used by the {@code RememberMeServices} obtained from the parent class (if one is set).
Performs URL encoding with UTF-8
Handles the creation of the final <tt>Authentication</tt> object which will be returned by the provider. <p> The default implementation just creates a new OpenIDAuthenticationToken from the original, but with the UserDetails as the principal and including the authorities loaded by the UserDetailsService.
Used to load the {@code UserDetails} for the authenticated OpenID user.
Used to load the {@code UserDetails} for the authenticated OpenID user.
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
<tt>UserDetailsService</tt> used by the <tt>OpenIDAuthenticationProvider</tt>.
Returns 'null' always, as no credentials are processed by the OpenID provider.
Returns the <tt>principal</tt> value.
~ Constructors ===================================================================================================
which should be fetched for that pattern.
Iterates through the patterns stored in the map and returns the list of attributes defined for the first match. If no match is found, returns an empty list.
Set the redirectUrl to be returned by beginConsumption
Set the token to be returned by endConsumption
Counts the number of occurrences of {@code c} in {@code s}.
Test method for 'org.springframework.security.authentication.openid.OpenIDAuthenticationProvider.authenticate(Authentication)'
Test method for 'org.springframework.security.authentication.openid.OpenIDAuthenticationProvider.authenticate(Authentication)'
Test method for 'org.springframework.security.authentication.openid.OpenIDAuthenticationProvider.authenticate(Authentication)'
Test method for 'org.springframework.security.authentication.openid.OpenIDAuthenticationProvider.authenticate(Authentication)'
Test method for 'org.springframework.security.authentication.openid.OpenIDAuthenticationProvider.authenticate(Authentication)'
Test method for 'org.springframework.security.authentication.openid.OpenIDAuthenticationProvider.supports(Class)'
Test method for 'org.springframework.security.authentication.openid.OpenIDAuthenticationProvider.authenticate(Authentication)'
Test method for 'org.springframework.security.authentication.openid.OpenIDAuthenticationProvider.supports(Class)'
Allows to inject an own JNDI context factory.
(non-Javadoc) org.springframework.security.remoting.dns.DnsResolver#resolveServiceEntry(java. lang.String, java.lang.String)
(non-Javadoc) org.springframework.security.remoting.dns.DnsResolver#resolveServiceIpAddress(java .lang.String, java.lang.String)
This method is needed, so that we can use only one DirContext for resolveServiceIpAddress().
This method is needed, so that we can use only one DirContext for resolveServiceIpAddress().
Provided so subclasses can perform additional configuration if required (eg set additional request headers for non-security related information etc).
Called every time a HTTP invocation is made. <p> Simply allows the parent to setup the connection, and then adds an <code>Authorization</code> HTTP header property that will be used for BASIC authentication. </p> <p> The <code>SecurityContextHolder</code> is used to obtain the relevant principal and credentials. </p>
Constructs the object, storing the principal and credentials extracted from the client-side security context.
Invoked on the server-side. <p> The transmitted principal and credentials will be used to create an unauthenticated {@code Authentication} instance for processing by the {@code AuthenticationManager}.
Creates the server-side authentication request object.
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
Locates the first <code>Contact</code> of the exact name specified. <p> Uses the {@link ContactManager#getAll()} method.
Constructor to use to represent a root element. A root element has an id of -1.
Constructor to use to represent a non-root element.
it won't include separators)
Creates a directory for the user, and a series of sub-directories. The root directory is the parent for the user directory. The sub-directories are "confidential" and "shared". The ROLE_USER will be given read and write access to "shared".
Allows subclass to add permissions. completed a GrantedAuthority, else it is a username)
Executes recursive SQL as needed to build a full Directory hierarchy of objects
Creates an authority with a specific bit representation. It's important that this doesn't change as it will be used in the database. The enum ordinal is less reliable as the enum may be reordered or have new roles inserted which would change the ordinal values.
Indicate that this provider only supports PreAuthenticatedAuthenticationToken (sub)classes.
Pre-registration constructor. Assigns the user the "NEW_USER" role only.
Post-registration constructor
Implementation of {@code UserDetailsService}. We only need this to satisfy the {@code RememberMeServices} requirements.
Implementation of {@code AuthenticationUserDetailsService} which allows full access to the submitted {@code Authentication} object. Used by the OpenIDAuthenticationProvider.
Minimal constructor
read data
persist data
attach clean
Required constructor
Default constructor
Full constructor
Make an authorization decision by considering all &lt;authorize&gt; tag attributes. The following are valid combinations of attributes: <ul> <li>access</li> <li>url, method</li> </ul> The above combinations are mutually exclusive and evaluated in the given order.
Make an authorization decision based on a Spring EL expression. See the "Expression-Based Access Control" chapter in Spring Security for details on what expressions can be used.
Allows the {@code EvaluationContext} to be customized for variable lookup etc.
Make an authorization decision based on the URL and HTTP method attributes. True is returned if the user is allowed to access the given URL as defined.
~ Methods ========================================================================================================
Allows test cases to override where application context obtained from. by Spring's <code>WebApplicationContextUtils</code>
~ Methods ========================================================================================================
resets local state
Set HTML escaping for this tag, as boolean value.
Return the HTML escaping setting for this tag, or the default setting if not overridden.
Invokes the base class {@link AbstractAuthorizeTag#authorize()} method to decide if the body of the tag should be skipped or not.
Default processing of the end tag returning EVAL_PAGE.
Returns EVAL_BODY_INCLUDE if the authorized flag is true or UI security has been disabled. Otherwise returns SKIP_BODY.
Convenience mechanism for specifying the username. The default is "user". If {@link #username()} is specified it will be used instead of {@link #value()}
Clears the {@link SecurityContext} from {@link TestSecurityContextHolder} and {@link SecurityContextHolder}.
Gets the {@link SecurityContext} from {@link TestSecurityContextHolder}.
Sets the {@link SecurityContext} on {@link TestSecurityContextHolder} and {@link SecurityContextHolder}.
Gets the default {@link SecurityContext} by delegating to the {@link SecurityContextHolder}
Creates a request (including any necessary {@link CsrfToken}) that will submit a form based login to POST "/login".
Creates a request (including any necessary {@link CsrfToken}) that will submit a form based login to POST {@code loginProcessingUrl}.
Creates a logout request.
Creates a logout request (including any necessary {@link CsrfToken}) to the specified {@code logoutUrl}
Specifies the logout URL to POST to. Defaults to "/logout".
Specifies the URL to POST to. Default is "/login"
The HTTP parameter to place the username. Default is "username". "username".
The HTTP parameter to place the password. Default is "password". "password".
The value of the password parameter. Default is "password".
The value of the username parameter. Default is "user".
Specify both the password parameter name and the password. "password".
Specify both the password parameter name and the password. "username".
Creates a DigestRequestPostProcessor that enables easily adding digest based authentication to a request.
Populates the provided X509Certificate instances on the request. {@link org.springframework.test.web.servlet.request.RequestPostProcessor} to use.
Finds an X509Cetificate using a resoureName and populates it on the request. {@link org.springframework.test.web.servlet.request.RequestPostProcessor} to use.
Creates a {@link RequestPostProcessor} that will automatically populate a valid {@link CsrfToken} in the request.
Creates a {@link RequestPostProcessor} that can be used to ensure that the resulting request is ran with the user in the {@link TestSecurityContextHolder}.
Establish a {@link SecurityContext} that has a {@link UsernamePasswordAuthenticationToken} for the {@link Authentication#getPrincipal()} and a {@link User} for the {@link UsernamePasswordAuthenticationToken#getPrincipal()}. All details are declarative and do not require that the user actually exists. <p> The support works by associating the user to the HttpServletRequest. To associate the request to the SecurityContextHolder you need to ensure that the SecurityContextPersistenceFilter is associated with the MockMvc instance. A few ways to do this are: </p> <ul> <li>Invoking apply {@link SecurityMockMvcConfigurers#springSecurity()}</li> <li>Adding Spring Security's FilterChainProxy to MockMvc</li> <li>Manually adding {@link SecurityContextPersistenceFilter} to the MockMvc instance may make sense when using MockMvcBuilders standaloneSetup</li> </ul>
Establish a {@link SecurityContext} that has a {@link UsernamePasswordAuthenticationToken} for the {@link Authentication#getPrincipal()} and a custom {@link UserDetails} for the {@link UsernamePasswordAuthenticationToken#getPrincipal()}. All details are declarative and do not require that the user actually exists. <p> The support works by associating the user to the HttpServletRequest. To associate the request to the SecurityContextHolder you need to ensure that the SecurityContextPersistenceFilter is associated with the MockMvc instance. A few ways to do this are: </p> <ul> <li>Invoking apply {@link SecurityMockMvcConfigurers#springSecurity()}</li> <li>Adding Spring Security's FilterChainProxy to MockMvc</li> <li>Manually adding {@link SecurityContextPersistenceFilter} to the MockMvc instance may make sense when using MockMvcBuilders standaloneSetup</li> </ul>
Establish a {@link SecurityContext} that uses the specified {@link Authentication} for the {@link Authentication#getPrincipal()} and a custom {@link UserDetails}. All details are declarative and do not require that the user actually exists. <p> The support works by associating the user to the HttpServletRequest. To associate the request to the SecurityContextHolder you need to ensure that the SecurityContextPersistenceFilter is associated with the MockMvc instance. A few ways to do this are: </p> <ul> <li>Invoking apply {@link SecurityMockMvcConfigurers#springSecurity()}</li> <li>Adding Spring Security's FilterChainProxy to MockMvc</li> <li>Manually adding {@link SecurityContextPersistenceFilter} to the MockMvc instance may make sense when using MockMvcBuilders standaloneSetup</li> </ul>
Establish a {@link SecurityContext} that uses an {@link AnonymousAuthenticationToken}. This is useful when a user wants to run a majority of tests as a specific user and wishes to override a few methods to be anonymous. For example: <pre> <code> public class SecurityTests { </code> </pre>
Establish the specified {@link SecurityContext} to be used. <p> This works by associating the user to the {@link HttpServletRequest}. To associate the request to the {@link SecurityContextHolder} you need to ensure that the {@link SecurityContextPersistenceFilter} (i.e. Spring Security's FilterChainProxy will typically do this) is associated with the {@link MockMvc} instance. </p>
Convenience mechanism for setting the Authorization header to use HTTP Basic with the given username and password. This method will automatically perform the necessary Base64 encoding.
(non-Javadoc) #postProcessRequest (org.springframework.mock.web.MockHttpServletRequest)
Instead of using the {@link CsrfToken} as a request parameter (default) will populate the {@link CsrfToken} as a header.
Populates an invalid token value on the request.
Configures the username to use
Configures the password to use
Configures the realm to use
Computes the <code>response</code> portion of a Digest authentication header. Both the server and user agent should compute the <code>response</code> independently. Provided as a static method to simplify the coding of user agents.
Saves the specified {@link Authentication} into an empty {@link SecurityContext} using the {@link SecurityContextRepository}.
Saves the {@link SecurityContext} using the {@link SecurityContextRepository}
Creates a new instance with the given username
Specify the roles of the user to authenticate as. This method is similar to {@link #authorities(GrantedAuthority...)}, but just not as flexible. {@link #ROLE_PREFIX} it will automatically be prepended. This means by default {@code roles("ROLE_USER")} and {@code roles("USER")} are equivalent.
Populates the user's {@link GrantedAuthority}'s. The default is ROLE_USER.
Populates the user's password. The default is "password"
Creates a new {@link User}
{@link ResultMatcher} that verifies that a specified user is authenticated.
{@link ResultMatcher} that verifies that no user is authenticated.
Specifies the expected username
Specifies the expected {@link SecurityContext}
Specifies the expected {@link Authentication}
Specifies the expected principal
Specifies the expected {@link Authentication#getName()}
Specifies the {@link Authentication#getAuthorities()}
Specifies the {@link Authentication#getAuthorities()}
Creates a new instance with the provided {@link javax.servlet.Filter}
Configures the MockMvcBuilder for use with Spring Security. Specifically the configurer adds the Spring Bean named "springSecurityFilterChain" as a Filter. It will also ensure that the TestSecurityContextHolder is leveraged for each request by applying {@link org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors#testSecurityContext()} use
Configures the MockMvcBuilder for use with Spring Security. Specifically the configurer adds the provided Filter. It will also ensure that the TestSecurityContextHolder is leveraged for each request by applying {@link org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors#testSecurityContext()} use
Gets the {@link SecurityContextRepository} for the specified {@link HttpServletRequest}. If one is not found, a default {@link HttpSessionSecurityContextRepository} is used. {@link SecurityContextRepository} {@link HttpServletRequest}
Sets the {@link SecurityContextRepository} for the specified {@link HttpServletRequest}. {@link SecurityContextRepository}
Gets the {@link CsrfTokenRepository} for the specified {@link HttpServletRequest}. If one is not found, the default {@link HttpSessionCsrfTokenRepository} is used. {@link CsrfTokenRepository} {@link HttpServletRequest}
Sets the {@link CsrfTokenRepository} for the specified {@link HttpServletRequest}. {@link CsrfTokenRepository}
The username to be used. The default is rob
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
Sets the strategy to be used for redirecting to the required channel URL. A {@code DefaultRedirectStrategy} instance will be used if not set.
Creates a new instance.
Takes a specific IP address or a range using the IP/Netmask (e.g. 192.168.1.0/24 or 202.24.0.0/14). come.
Sets the internal request map from the supplied map. The key elements should be of type {@link RequestMatcher}, which. The path stored in the key will depend on the type of the supplied UrlMatcher.
~ Methods ========================================================================================================
Method that is actually called by the filter chain. Simply delegates to the {@link #invoke(FilterInvocation)} method.
Indicates whether once-per-request handling will be observed. By default this is <code>true</code>, meaning the <code>FilterSecurityInterceptor</code> will only execute once-per-request. Sometimes users may wish it to execute more than once per request, such as when JSP forwards are being used and filter security is desired on each included fragment of the HTTP request. <code>false</code> if <code>FilterSecurityInterceptor</code> will enforce authorizations for each and every fragment of the HTTP request.
The error page to use. Must begin with a "/" and is interpreted relative to the current context root. limitations
~ Constructors ===================================================================================================
Determines whether the user represented by the supplied <tt>Authentication</tt> object is allowed to invoke the supplied URI. be used)
Determines whether the user represented by the supplied <tt>Authentication</tt> object is allowed to invoke the supplied URI, with the given . <p> Note the default implementation of <tt>FilterInvocationSecurityMetadataSource</tt> disregards the <code>contextPath</code> when evaluating which secure object metadata applies to a given request URI, so generally the <code>contextPath</code> is unimportant unless you are using a custom <code>FilterInvocationSecurityMetadataSource</code>. will be used). be used in evaluation whether access should be granted.
Creates a new instance {@link AccessDeniedHandler} that should be used. Each is considered in the order they are specified and only the first {@link AccessDeniedHandler} is ued. if none of the handlers matches.
Initialize the {@code HttpStatusLogoutSuccessHandler} with a user-defined {@link HttpStatus}.
Initialize the {@code HttpStatusLogoutSuccessHandler} with the default {@link HttpStatus#OK}.
Implementation of {@link LogoutSuccessHandler#onLogoutSuccess(HttpServletRequest, HttpServletResponse, Authentication)}. Sets the status on the {@link HttpServletResponse}.
Constructor which takes a <tt>LogoutSuccessHandler</tt> instance to determine the target destination after logging out. The list of <tt>LogoutHandler</tt>s are intended to perform the actual logout functionality (such as clearing the security context, invalidating the session, etc.).
~ Methods ========================================================================================================
Allow subclasses to modify when a logout should take place.
Requires the request to be passed in.
Causes the {@link HttpSession} to be invalidated when this {@link LogoutHandler} is invoked. Defaults to true. (default) or false if it should not be.
If true, removes the {@link Authentication} from the {@link SecurityContext} to prevent issues with concurrent requests. from the {@link SecurityContext} (default) or false if the {@link Authentication} should not be removed.
Check that all required properties have been set.
Obtains the list of user roles based on the current user's JEE roles. The {@link javax.servlet.http.HttpServletRequest#isUserInRole(String)} method is called for each of the values in the {@code j2eeMappableRoles} set to determine if that role should be assigned to the user. making the request.
Builds the authentication details object.
Return the J2EE user name.
For J2EE container-based authentication there is no generic way to retrieve the credentials, as such this method returns a fixed dummy value.
Loads the web.xml file using the configured <tt>ResourceLoader</tt> and parses the role-name elements from it, using these as the set of <tt>mappableAttributes</tt>.
Get the security name for the given subject.
Get the current RunAs subject.
Get the WebSphere group names for the given subject.
Public constructor which overrides the default AuthenticationDetails class to be used.
Return the WebSphere user name.
Get a list of Granted Authorities based on the current user's WebSphere groups.
groups to authorities
Sets the regular expression which will by used to extract the user name from the certificate's Subject DN. <p> It should contain a single group; for example the default expression "CN=(.*?)(?:,|$)" matches the common name field. So "CN=Jimi Hendrix, OU=..." will give a user name of "Jimi Hendrix". <p> The matches are case insensitive. So "emailAddress=(.?)," will match "EMAILADDRESS=jimi@hendrix.org, CN=..." giving a user name "jimi@hendrix.org"
Try to authenticate a pre-authenticated user with Spring Security if the user has not yet been authenticated.
Determines if the current principal has changed. The default implementation tries <ul> <li>If the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is a String, the {@link Authentication#getName()} is compared against the pre authenticated principal</li> <li>Otherwise, the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is compared against the {@link Authentication#getPrincipal()} </ul> <p> Subclasses can override this method to determine when a principal has changed. </p>
Do the actual authentication for a pre-authenticated user.
Puts the <code>Authentication</code> instance returned by the authentication manager into the secure context.
Ensures the authentication object in the secure context is set to null when authentication fails. <p> Caches the failure exception as a request attribute
If set to {@code true}, any {@code AuthenticationException} raised by the {@code AuthenticationManager} will be swallowed, and the request will be allowed to proceed, potentially using alternative authentication mechanisms. If {@code false} (the default), authentication failure will result in an immediate exception. failed authentication.
If set, the pre-authenticated principal will be checked on each request and compared against the name of the current <tt>Authentication</tt> object. A check to determine if {@link Authentication#getPrincipal()} is equal to the principal will also be performed. If a change is detected, the user will be reauthenticated.
If <tt>checkForPrincipalChanges</tt> is set, and a change of principal is detected, determines whether any existing session should be invalidated before proceeding to authenticate the new principal. session. Defaults to <tt>true</tt>.
Authenticate the given PreAuthenticatedAuthenticationToken. <p> If the principal contained in the authentication object is null, the request will be ignored to allow other providers to authenticate it.
Set the AuthenticatedUserDetailsService to be used to load the {@code UserDetails} for the authenticated user.
If true, causes the provider to throw a BadCredentialsException if the presented authentication request is invalid (contains a null principal or credentials). Otherwise it will just return null. Defaults to false.
Sets the strategy which will be used to validate the loaded <tt>UserDetails</tt> object for the user. Defaults to an {@link AccountStatusUserDetailsChecker}.
Constructor used for an authentication request. The {@link org.springframework.security.core.Authentication#isAuthenticated()} will return <code>false</code>.
Constructor used for an authentication response. The {@link org.springframework.security.core.Authentication#isAuthenticated()} will return <code>true</code>.
Get the credentials
Get the principal
Get a UserDetails object based on the user name contained in the given token, and the GrantedAuthorities as returned by the GrantedAuthoritiesContainer implementation as returned by the token.getDetails() method.
Creates the final <tt>UserDetails</tt> object. Can be overridden to customize the contents.
Read and returns the header named by {@code principalRequestHeader} from the request. {@code exceptionIfHeaderMissing} is set to {@code true}.
Credentials aren't usually applicable, but if a {@code credentialsRequestHeader} is set, this will be read and used as the credentials value. Otherwise a dummy value will be used.
Defines whether an exception should be raised if the principal header is missing. Defaults to {@code true}. behaviour and allow the request to proceed if no header is found.
Template implementation which locates the Spring Security cookie, decodes it into a delimited array of tokens and submits it to subclasses for processing via the <tt>processAutoLoginCookie</tt> method. <p> The returned username is then used to load the UserDetails object for the user, which in turn is used to create a valid authentication token.
Locates the Spring Security remember me cookie in the request and returns its value. The cookie is searched for by name and also by matching the context path to the cookie path.
Creates the final <tt>Authentication</tt> object returned from the <tt>autoLogin</tt> method. <p> By default it will create a <tt>RememberMeAuthenticationToken</tt> instance. <tt>AuthenticationDetailsSource</tt> will use this to build the details property of the returned object. This will be stored as the principal.
Decodes the cookie and splits it into a set of token strings using the ":" delimiter.
Inverse operation of decodeCookie.
{@inheritDoc} <p> Examines the incoming request and checks for the presence of the configured "remember me" parameter. If it's present, or if <tt>alwaysRemember</tt> is set to true, calls <tt>onLoginSucces</tt>. </p>
Allows customization of whether a remember-me login has been requested. The default is to return true if <tt>alwaysRemember</tt> is set or the configured parameter name has been included in the request and is set to the value "true". additional information indicating that a persistent login is desired. has been requested.
Called from autoLogin to process the submitted persistent login cookie. Subclasses should validate the cookie and perform any additional management required. validated successfully. invalid for some other reason. cookie couldn't be found (for example if the user has been removed from the system).
Sets the cookie on the response. By default a secure cookie will be used if the connection is secure. You can set the {@code useSecureCookie} property to {@code false} to override this. If you set it to {@code true}, the cookie will always be flagged as secure. If Servlet 3.0 is used, the cookie will be marked as HttpOnly.
Implementation of {@code LogoutHandler}. Default behaviour is to call {@code cancelCookie()}.
Sets the name of the parameter which should be checked for to see if a remember-me has been requested during a login request. This should be the same name you assign to the checkbox in your login form.
Whether the cookie should be flagged as secure or not. Secure cookies can only be sent over an HTTPS connection and thus cannot be accidentally submitted over HTTP where they could be intercepted. <p> By default the cookie will be secure if the request is secure. If you only want to use remember-me over HTTPS (recommended) you should set this property to {@code true}. {@code false} to disable their use.
Sets the strategy to be used to validate the {@code UserDetails} object obtained for the user when processing a remember-me cookie to automatically log in a user. allow it to be rejected if account should not be allowed to authenticate (if it is locked, for example). Defaults to a {@code AccountStatusUserDetailsChecker} instance.
Loads the token data for the supplied series identifier. If an error occurs, it will be reported and null will be returned (since the result should just be a failed persistent login). occurred.
Intended for convenience in debugging. Will create the persistent_tokens database table when the class is initialized during the initDao method.
Locates the presented cookie data in the token repository, using the series id. If the data compares successfully with that in the persistent store, a new token is generated and stored with the same series. The corresponding cookie value is set on the response. to the submitted cookie, or if the token in the persistent store has expired. token is different from the one presented.
Creates a new persistent login token with a new series number, stores the data in the persistent token repository and adds the corresponding cookie to the response.
Constructs a {@code RememberMeAuthenticationException} with the specified message and root cause.
Constructs an {@code RememberMeAuthenticationException} with the specified message and no root cause.
Called if a remember-me token is presented and successfully authenticated by the {@code RememberMeServices} {@code autoLogin} method and the {@code AuthenticationManager}.
Called if the {@code AuthenticationManager} rejects the authentication object returned from the {@code RememberMeServices} {@code autoLogin} method. This method will not be called when no remember-me token is present in the request and {@code autoLogin} reurns null.
Allows control over the destination a remembered user is sent to when they are successfully authenticated. By default, the filter will just allow the current request to proceed, but if an {@code AuthenticationSuccessHandler} is set, it will be invoked and the {@code doFilter()} method will return immediately, thus allowing the application to redirect the user to a specific URL, regardless of whatthe original request was for. {@code doFilter()}.
Calculates the digital signature to be put in the cookie. Default value is MD5 ("username:tokenExpiryTime:password:key")
Calculates the validity period in seconds for a newly generated remember-me login. After this period (from the current time) the remember-me login will be considered expired. This method allows customization based on request parameters supplied with the login or information in the <tt>Authentication</tt> object. The default value is just the token validity period property, <tt>tokenValiditySeconds</tt>. <p> The returned value will be used to work out the expiry time of the token and will also be used to set the <tt>maxAge</tt> property of the cookie. See SEC-485.
Called when a user is newly authenticated. <p> If a session already exists, and matches the session Id from the client, a new session will be created, and the session attributes copied to it (if {@code migrateSessionAttributes} is set). If the client's requested session Id is invalid, nothing will be done, since there is no need to change the session Id if it doesn't match the current session. <p> If there is no session, no action is taken unless the {@code alwaysCreateSession} property is set, in which case a session will be created if one doesn't already exist.
Called when the session has been changed and the old attributes have been migrated to the new session. Only called if a session existed to start with. Allows subclasses to plug in additional behaviour. <p> The default implementation of this method publishes a {@link SessionFixationProtectionEvent} to notify the application that the session ID has changed. If you override this method and still wish these events to be published, you should call {@code super.onSessionChange()} within your overriding method.
Sets the {@link ApplicationEventPublisher} to use for submitting {@link SessionFixationProtectionEvent}. The default is to not submit the {@link SessionFixationProtectionEvent}. null.
(non-Javadoc) org.springframework.security.web.authentication.session.SessionAuthenticationStrategy #onAuthentication(org.springframework.security.core.Authentication, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
authenticated session is changed.
In addition to the steps from the superclass, the sessionRegistry will be updated with the new session information.
Method intended for use by subclasses to override the maximum number of sessions that are permitted for a particular authentication. The default implementation simply returns the <code>maximumSessions</code> value for the bean.
Allows subclasses to customise behaviour when too many sessions are detected. the principal have
Sets the <tt>exceptionIfMaximumExceeded</tt> property, which determines whether the user should be prevented from opening more sessions than allowed. If set to <tt>true</tt>, a <tt>SessionAuthenticationException</tt> will be raised which means the user authenticating will be prevented from authenticating. if set to <tt>false</tt>, the user that has already authenticated will be forcibly logged out.
Sets the <tt>maxSessions</tt> property. The default value is 1. Use -1 for unlimited sessions. open simultaneously.
Sets the {@link MessageSource} used for reporting errors back to the user when the user has exceeded the maximum number of authentications.
authenticated session is changed.
Constructs a new session fixation protection event.
Getter for the session ID before it was changed.
Getter for the session ID after it was changed.
Called to extract the existing attributes from the session, prior to invalidating it. If {@code migrateAttributes} is set to {@code false}, only Spring Security attributes will be retained. All application attributes will be discarded. <p> You can override this method to control exactly what is transferred to the new session. session
{@code extractAttributes}
Defines whether attributes should be migrated to a new session or not. Has no effect if you override the {@code extractAttributes} method. <p> Attributes used by Spring Security (to store cached requests, for example) will still be retained by default, even if you set this value to {@code false}. transferred to the new, authenticated session.
Switch user context event constructor
~ Methods ========================================================================================================
Attempt to switch to another user. If the user does not exist or is not active, return null. another user, <code>null</code> otherwise.
Attempt to exit from an already switched user. otherwise. <code>Authentication</code> associated with this request.
Create a switch user token that contains an additional <tt>GrantedAuthority</tt> that contains the original <code>Authentication</code> object.
Find the original <code>Authentication</code> object from the current user's granted authorities. A successfully switched user should have a <code>SwitchUserGrantedAuthority</code> that contains the original source user <code>Authentication</code> object. otherwise.
Checks the request URI for the presence of <tt>exitUserUrl</tt>. otherwise.
Checks the request URI for the presence of <tt>switchUserUrl</tt>. otherwise.
Sets the authentication data access object. information for the user that is being switched to.
Set the URL to respond to exit user processing.
Set the URL to respond to switch user processing.
Sets the URL to go to after a successful switch / exit user request. Use {@link #setSuccessHandler(AuthenticationSuccessHandler) setSuccessHandler} instead if you need more customized behaviour.
Used to define custom behaviour on a successful switch or exit user. <p> Can be used instead of setting <tt>targetUrl</tt>.
Sets the URL to which a user should be redirected if the switch fails. For example, this might happen because the account they are attempting to switch to is invalid (the user doesn't exist, account is locked etc). <p> If not set, an error message will be written to the response. <p> Use {@link #setFailureHandler(AuthenticationFailureHandler) failureHandler} instead if you need more customized behaviour.
Used to define custom behaviour when a switch fails. <p> Can be used instead of setting <tt>switchFailureUrl</tt>.
subclasses (may be null if SwitchUserFilter should not fine-tune the authorities)
Allows the parameter containing the username to be customized.
Strips any content after the ';' in the request URI
~ Constructors ===================================================================================================
Returns the original user associated with a successful user switch.
Creates an instance which will authenticate against the supplied {@code AuthenticationManager} and which will ignore failed authentication attempts, allowing the request to proceed down the filter chain.
Creates an instance which will authenticate against the supplied {@code AuthenticationManager} and use the supplied {@code AuthenticationEntryPoint} to handle authentication failures. Typically an instance of {@link BasicAuthenticationEntryPoint}.
Decodes the header into a username and password. Base64
~ Methods ========================================================================================================
If you set this property, the Authentication object, which is created after the successful digest authentication will be marked as <b>authenticated</b> and filled with the authorities loaded by the UserDetailsService. It therefore will not be re-authenticated by your AuthenticationProvider. This means, that only the password of the user is checked, but not the flags like isEnabled() or isAccountNonExpired(). You will save some time by enabling this flag, as otherwise your UserDetailsService will be called twice. A more secure option would be to introduce a cache around your UserDetailsService, but if you don't use these flags, you can also safely enable this option.
Computes the <code>response</code> portion of a Digest authentication header. Both the server and user agent should compute the <code>response</code> independently. Provided as a static method to simplify the coding of user agents. the correct format. False if it is plain text.
Takes an array of <code>String</code>s, and for each element removes any instances of <code>removeCharacter</code>, and splits the element based on the <code>delimiter</code>. A <code>Map</code> is then generated, with the left of the delimiter providing the key, and the right of the delimiter providing the value. <p> Will trim both the key and value before adding to the <code>Map</code>. </p> attempting the split operation (typically the quotation mark symbol) or <code>null</code> if no removal should occur the array to process was null or empty
Splits a <code>String</code> at the first instance of the delimiter. <p> Does not include the delimiter in the response. </p> being after the delimiter (neither element includes the delimiter)
Constructs a <code>NonceExpiredException</code> with the specified message.
Constructs a <code>NonceExpiredException</code> with the specified message and root cause.
Creates a new instance determine if authentication is required. Cannot be null.
Invokes the {@link #requiresAuthentication(HttpServletRequest, HttpServletResponse) requiresAuthentication} method to determine whether the request is for authentication and should be handled by this filter. If it is an authentication request, the {@link #attemptAuthentication(HttpServletRequest, HttpServletResponse) attemptAuthentication} will be invoked to perform the authentication. There are then three possible outcomes: <ol> <li>An <tt>Authentication</tt> object is returned. The configured {@link SessionAuthenticationStrategy} will be invoked (to handle any session-related behaviour such as creating a new session to protect against session-fixation attacks) followed by the invocation of {@link #successfulAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, Authentication)} method</li> <li>An <tt>AuthenticationException</tt> occurs during authentication. The {@link #unsuccessfulAuthentication(HttpServletRequest, HttpServletResponse, AuthenticationException) unsuccessfulAuthentication} method will be invoked</li> <li>Null is returned, indicating that the authentication process is incomplete. The method will then return immediately, assuming that the subclass has done any necessary work (such as redirects) to continue the authentication process. The assumption is that a later request will be received by this method where the returned <tt>Authentication</tt> object is not null. </ol>
Indicates whether this filter should attempt to process a login request for the current invocation. <p> It strips any parameters from the "path" section of the request URL (such as the before matching against the <code>filterProcessesUrl</code> property. <p> Subclasses may override for special requirements, such as Tapestry integration. <code>false</code> otherwise.
Performs actual authentication. <p> The implementation should do one of the following: <ol> <li>Return a populated authentication token for the authenticated user, indicating successful authentication</li> <li>Return null, indicating that the authentication process is still in progress. Before returning, the implementation should perform any additional work required to complete the process.</li> <li>Throw an <tt>AuthenticationException</tt> if the authentication process fails</li> </ol> redirect as part of a multi-stage authentication process (such as OpenID).
Default behaviour for unsuccessful authentication. <ol> <li>Clears the {@link SecurityContextHolder}</li> <li>Stores the exception in the session (if it exists or <tt>allowSesssionCreation</tt> is set to <tt>true</tt>)</li> <li>Informs the configured <tt>RememberMeServices</tt> of the failed login</li> <li>Delegates additional behaviour to the {@link AuthenticationFailureHandler}.</li> </ol>
Sets the URL that determines if authentication is required
Indicates if the filter chain should be continued prior to delegation to {@link #successfulAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, Authentication)} , which may be useful in certain environment (such as Tapestry applications). Defaults to <code>false</code>.
The session handling strategy which will be invoked immediately after an authentication request is successfully processed by the <tt>AuthenticationManager</tt>. Used, for example, to handle changing of the session identifier to prevent session fixation attacks. is used.
Sets the strategy used to handle a successful authentication. By default a {@link SavedRequestAwareAuthenticationSuccessHandler} is used.
Invokes the configured {@code RedirectStrategy} with the URL returned by the {@code determineTargetUrl} method. <p> The redirect will not be performed if the response has already been committed.
Builds the target URL according to the logic defined in the main class Javadoc.
Supplies the default target Url that will be used if no saved request is found or the {@code alwaysUseDefaultTargetUrl} property is set to true. If not set, defaults to {@code /}.
Supplies the default target Url that will be used if no saved request is found in the session, or the {@code alwaysUseDefaultTargetUrl} property is set to true. If not set, defaults to {@code /}. It will be treated as relative to the web-app's context path, and should include the leading <code>/</code>. Alternatively, denote a fully-qualified URL and this is also supported.
If <code>true</code>, will always redirect to the value of {@code defaultTargetUrl} (defaults to <code>false</code>).
If this property is set, the current request will be checked for this a parameter with this name and the value used as the target URL if present. URL. Defaults to null.
Allows overriding of the behaviour when redirecting to a target URL.
If set to {@code true} the {@code Referer} header will be used (if available). Defaults to {@code false}.
Creates a filter with a principal named "anonymousUser" and the single authority "ROLE_ANONYMOUS".
EntryPoint which is used when no RequestMatcher returned true
Creates a new instance {@link AuthenticationFailureHandler} that should be used. Each is considered in the order they are specified and only the first {@link AuthenticationFailureHandler} is ued. This parameter cannot specify null or empty. be used if none of the handlers matches. This parameter cannot specify null.
Sets the map of exception types (by name) to URLs. class, with the corresponding failure URL as the value. valid.
Always returns a 403 error code to the client.
Creates a new instance.
relative to the web-app context path (include a leading {@code /}) or an absolute URL.
Allows subclasses to modify the login form URL that should be applicable for a given request.
Performs the redirect (or forward) to the login form URL.
Builds a URL to redirect the supplied request to HTTPS. Used to redirect the current request to HTTPS, before doing a forward to the login page.
Set to true to force login form access to be via https. If this value is true (the default is false), and the incoming request for the protected resource which triggered the interceptor was not already <code>https</code>, then the client will first be redirected to an https URL, even if <tt>serverSideRedirect</tt> is set to <tt>true</tt>.
Tells if we are to do a forward to the {@code loginFormUrl} using the {@code RequestDispatcher}, instead of a 302 redirect. (the default) if {@code loginFormUrl} is set to an absolute value.
~ Methods ========================================================================================================
Performs the redirect or forward to the {@code defaultFailureUrl} if set, otherwise returns a 401 error code. <p> If redirecting or forwarding, {@code saveException} will be called to cache the exception for use in the target view.
Caches the {@code AuthenticationException} for use in view rendering. <p> If {@code forwardToDestination} is set to true, request scope will be used, otherwise it will attempt to store the exception in the session. If there is no session and {@code allowSessionCreation} is {@code true} a session will be created. Otherwise the exception will not be stored.
The URL which will be used as the failure destination.
If set to <tt>true</tt>, performs a forward to the failure destination URL instead of a redirect. Defaults to <tt>false</tt>.
Constructor which sets the <tt>defaultTargetUrl</tt> property of the base class. successful authentication.
Calls the parent class {@code handle()} method to forward or redirect to the target URL, and then calls {@code clearAuthenticationAttributes()} to remove any leftover session data.
Removes temporary authentication-related data which may have been stored in the session during the authentication process.
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
Enables subclasses to override the composition of the password, such as by including additional values and a separator. <p> This might be used for example if a postcode/zipcode was required in addition to the password. A delimiter such as a pipe (|) should be used to separate the password and extended value(s). The <code>AuthenticationDao</code> will need to generate the expected password in a corresponding manner. </p> request token to the <code>AuthenticationManager</code>
Enables subclasses to override the composition of the username, such as by including additional values and a separator. request token to the <code>AuthenticationManager</code>
Provided so that subclasses may configure what is put into the authentication request's details property. set
Sets the parameter name which will be used to obtain the username from the login request.
Sets the parameter name which will be used to obtain the password from the login request..
Defines whether only HTTP POST requests will be allowed by this filter. If set to true, and an authentication request is received which is not a POST request, an exception will be raised immediately and authentication will not be attempted. The <tt>unsuccessfulAuthentication()</tt> method will be called as if handling a failed authentication. <p> Defaults to <tt>true</tt> but may be overridden by subclasses.
Records the remote address and will also set the session Id if a session already exists (it won't create one).
Indicates the TCP/IP address the authentication request was received from.
Indicates the <code>HttpSession</code> id the authentication request was received from.
Creates a new {@link SecurityContextCallableProcessingInterceptor} with the specified {@link SecurityContext}. {@link SecurityContextHolder} in {@link #preProcess(NativeWebRequest, Callable)}. Cannot be null.
Find a unique {@code WebApplicationContext} for this web app: either the root web app context (preferred) or a unique {@code WebApplicationContext} among the registered {@code ServletContext} attributes (typically coming from a single {@code DispatcherServlet} in the current web application). <p>Note that {@code DispatcherServlet}'s exposure of its context can be controlled through its {@code publishContext} property, which is {@code true} by default but can be selectively switched to only publish a single context despite multiple {@code DispatcherServlet} registrations in the web app.
Copy of {@link #findWebApplicationContext(ServletContext)} for compatibility with spring framework 4.1.x.
Creates a new instance that assumes the Spring Security configuration is loaded by some other means than this class. For example, a user might create a {@link ContextLoaderListener} using a subclass of {@link AbstractContextLoaderInitializer}.
Creates a new instance that will instantiate the {@link ContextLoaderListener} with the specified classes.
Override this if {@link HttpSessionEventPublisher} should be added as a listener. This should be true, if session management has specified a maximum number of sessions.
Registers the springSecurityFilterChain
Inserts the provided {@link Filter}s before existing {@link Filter}s using default generated names, {@link #getSecurityDispatcherTypes()}, and {@link #isAsyncSecuritySupported()}.
Inserts the provided {@link Filter}s after existing {@link Filter}s using default generated names, {@link #getSecurityDispatcherTypes()}, and {@link #isAsyncSecuritySupported()}.
Registers the provided {@link Filter}s using default generated names, {@link #getSecurityDispatcherTypes()}, and {@link #isAsyncSecuritySupported()}. before other {@link Filter}s. Otherwise, will insert the {@link Filter}s after other {@link Filter}s.
Registers the provided filter using the {@link #isAsyncSecuritySupported()} and {@link #getSecurityDispatcherTypes()}. other {@link Filter}
Returns the {@link DelegatingFilterProxy#getContextAttribute()} or null if the parent {@link ApplicationContext} should be used. The default behavior is to use the parent {@link ApplicationContext}. <p> If {@link #getDispatcherWebApplicationContextSuffix()} is non-null the {@link WebApplicationContext} for the Dispatcher will be used. This means the child {@link ApplicationContext} is used to look up the springSecurityFilterChain bean. </p> parent {@link ApplicationContext} should be used
Determines how a session should be tracked. By default, {@link SessionTrackingMode#COOKIE} is used. <p> Note that {@link SessionTrackingMode#URL} is intentionally omitted to help fixation attacks</a>. {@link SessionTrackingMode#SSL} is omitted because SSL configuration is required for this to work. </p> <p> Subclasses can override this method to make customizations. </p>
Return the &lt;servlet-name&gt; to use the DispatcherServlet's {@link WebApplicationContext} to find the {@link DelegatingFilterProxy} or null to use the parent {@link ApplicationContext}. <p> For example, if you are using AbstractDispatcherServletInitializer or AbstractAnnotationConfigDispatcherServletInitializer and using the provided Servlet name, you can return "dispatcher" from this method to use the DispatcherServlet's {@link WebApplicationContext}. </p> {@link WebApplicationContext} or null (default) to use the parent {@link ApplicationContext}.
Invoked before the springSecurityFilterChain is added.
Invoked after the springSecurityFilterChain is added.
Get the {@link DispatcherType} for the springSecurityFilterChain.
Determine if the springSecurityFilterChain should be marked as supporting asynch. Default is true.
Gets the security context for the current request (if available) and returns it. <p> If the session is null, the context object is null or the context object stored in the session is not an instance of {@code SecurityContext}, a new context object will be generated and returned.
By default, calls {@link SecurityContextHolder#createEmptyContext()} to obtain a new context (there should be no context present in the holder when this method is called). Using this approach the context creation strategy is decided by the {@link SecurityContextHolderStrategy} in use. The default implementations will return a new <tt>SecurityContextImpl</tt>.
If set to true (the default), a session will be created (if required) to store the security context if it is determined that its contents are different from the default empty context value. <p> Note that setting this flag to false does not prevent this class from storing the security context. If your application (or another filter) creates a session, then the security context will still be stored for an authenticated user.
Allows the use of session identifiers in URLs to be disabled. Off by default. the response wrapper and prevent the use of <tt>jsessionid</tt> parameters.
Allows the session attribute name to be customized for this repository instance. stored. Defaults to {@link #SPRING_SECURITY_CONTEXT_KEY}.
Takes the parameters required to call <code>saveContext()</code> successfully in addition to the request and the response object we are wrapping. in place before the filter chain executed. If this is true, and the session is found to be null, this indicates that it was invalidated during the request and a new session will now be created. only be stored if it or its contents changed during the request.
Invoke this method to disable invoking {@link OnCommittedResponseWrapper#onResponseCommitted()} when the {@link javax.servlet.http.HttpServletResponse} is committed. This can be useful in the event that Async Web Requests are made.
Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written.
Calls <code>onResponseCommmitted()</code> with the current contents as long as {@link #disableOnResponseCommitted()()} was not invoked.
preventing the use of URL rewriting to add the session identifier as a URL parameter.
Invoke this method to disable automatic saving of the {@link SecurityContext} when the {@link HttpServletResponse} is committed. This can be useful in the event that Async Web Requests are made which may no longer contain the {@link SecurityContext} on it.
Tells if the response wrapper has called <code>saveContext()</code> because of this wrapper.
Creates a new instance
Specifies a {@link RequestMatcher} that is used to determine if CSRF protection should be applied. If the {@link RequestMatcher} returns true for a given request, then CSRF protection is applied. <p> The default is to apply CSRF protection for any HTTP method other than GET, HEAD, TRACE, OPTIONS. </p> CSRF protection should be applied.
Specifies a {@link AccessDeniedHandler} that should be used when CSRF protection fails. <p> The default is to use AccessDeniedHandlerImpl with no arguments. </p>
Creates a new instance
Clears the {@link CsrfToken} javax.servlet.http.HttpServletResponse, org.springframework.security.core.Authentication)
Creates a new instance parametername).
(non-Javadoc) org.springframework.security.web.csrf.CsrfTokenRepository#saveToken(org.springframework .security.web.csrf.CsrfToken, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
Sets the {@link HttpServletRequest} parameter name that the {@link CsrfToken} is expected to appear on
Sets the header name that the {@link CsrfToken} is expected to appear on and the header that the response will contain the {@link CsrfToken}.
Sets the {@link HttpSession} attribute name that the {@link CsrfToken} is stored in
Checks whether a path is normalized (doesn't contain path traversal sequences like "./", "/../" or "/.")
Constructs a request object wrapping the given request.
Removes path parameters from each path segment in the supplied path and truncates sequences of multiple '/' characters to a single '/'. request '/' characters truncated, or null if the supplied path was null.
{@link RequestDispatcher} from the original {@link HttpServletRequest}.
Sets the HTTP parameter used to retrieve the value for the origin that is allowed from. The value of the parameter should be a valid URL. The default parameter name is "x-frames-allow-from".
Creates a new instance pattern matches, the domain will be allowed, else denied.
Creates a new instance
Creates an instance with {@link XFrameOptionsMode#DENY}
Creates a new instance {@link XFrameOptionsMode#ALLOW_FROM}, use {@link #XFrameOptionsHeaderWriter(AllowFromStrategy)} instead.
Creates a new instance with {@link XFrameOptionsMode#ALLOW_FROM}. is.
Gets the mode for the X-Frame-Options header value. For example, DENY, SAMEORIGIN, ALLOW-FROM. Cannot be null.
Creates a new instance
Creates a new instance delegateHeaderWriter will be invoked. {@link RequestMatcher} returns true.
(non-Javadoc) org.springframework.security.web.headers.HeaderWriter#writeHeaders(javax.servlet .http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
Creates a new instance
(non-Javadoc) .servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
Sets the {@link RequestMatcher} used to determine if the "Strict-Transport-Security" should be added. If true the header is added, else the header is not added. By default the header is added when {@link HttpServletRequest#isSecure()} returns true.
<p> Sets the value (in seconds) for the max-age directive of the Strict-Transport-Security header. The default is one year. </p> <p> This instructs browsers how long to remember to keep this domain as a known HSTS 6.1.1</a> for additional details. </p> domain as a known HSTS Host.
<p> If true, subdomains should be considered HSTS Hosts too. The default is true. </p> <p> for additional details. </p>
Creates a new instance
Creates a new instance with a single header
Creates a new instance
Create a new instance
If true, will contain a value of 1. For example: <pre> X-XSS-Protection: 1 </pre> or if {@link #setBlock(boolean)} is true <pre> X-XSS-Protection: 1; mode=block </pre> If false, will explicitly disable specify that X-XSS-Protection is disabled. For example: <pre> X-XSS-Protection: 0 </pre>
If false, will not specify the mode as blocked. In this instance, any content will be attempted to be fixed. If true, the content will be replaced with "#".
Creates a new instance
Gets the name of the header. Cannot be <code>null</code>.
Gets the values of the header. Cannot be null, empty, or contain null values.
Creates a new instance. {@link HttpServletResponse}.
<p> Attempts to obtain and run as a JAAS <code>Subject</code> using {@link #obtainSubject(ServletRequest)}. </p> <p> If the <code>Subject</code> is <code>null</code> and <tt>createEmptySubject</tt> is <code>true</code>, an empty, writeable <code>Subject</code> is used. This allows for the <code>Subject</code> to be populated at the time of login. If the <code>Subject</code> is <code>null</code>, the <code>FilterChain</code> continues with no additional processing. If the <code>Subject</code> is not <code>null</code> , the <code>FilterChain</code> is ran with {@link Subject#doAs(Subject, PrivilegedExceptionAction)} in conjunction with the <code>Subject</code> obtained. </p>
<p> Obtains the <code>Subject</code> to run as or <code>null</code> if no <code>Subject</code> is available. </p> <p> The default implementation attempts to obtain the <code>Subject</code> from the <code>SecurityContext</code>'s <code>Authentication</code>. If it is of type <code>JaasAuthenticationToken</code> and is authenticated, the <code>Subject</code> is returned from it. Otherwise, <code>null</code> is returned. </p> available.
Sets <code>createEmptySubject</code>. If the value is <code>true</code>, and {@link #obtainSubject(ServletRequest)} returns <code>null</code>, an empty, writeable <code>Subject</code> is created instead. Otherwise no <code>Subject</code> is used. The default is <code>false</code>.
~ Methods ========================================================================================================
Determines if the current request matches the <code>DefaultSavedRequest</code>. <p> All URL arguments are considered but not cookies, locales, headers or parameters.
Indicates the URL that the user agent used for this request.
Return an Enumeration over the values of the specified Collection.
Return an Enumeration over the values returned by the specified Iterator.
Return an Enumeration over the values of the specified Map.
Tests if this enumeration contains more elements. one more element to provide, <code>false</code> otherwise
Returns the next element of this enumeration if this enumeration has at least one more element to provide.
Formats a specified date to HTTP format. If local format is not <code>null</code>, it's used instead. format will be used)
Gets the current date in HTTP format.
Parses date with given formatters.
Tries to parse the given date as an HTTP date. If local format list is not <code>null</code>, it's used instead. , HTTP formats are used.
Stores the current request, provided the configuration properties allow it.
Allows selective use of saved requests for a subset of requests. By default any request will be cached by the {@code saveRequest} method. <p> If set, only matching requests will be cached. should be cached.
If <code>true</code>, indicates that it is permitted to store the target URL and exception information in a new <code>HttpSession</code> (the default). In situations where you do not wish to unnecessarily create <code>HttpSession</code>s - because the user agent will know the failed URL, such as with BASIC or Digest authentication - you may wish to set this property to <code>false</code>.
~ Constructors ===================================================================================================
<p> Sets the {@link AuthenticationEntryPoint} used when integrating {@link HttpServletRequest} with Servlet 3 APIs. Specifically, it will be used when {@link HttpServletRequest#authenticate(HttpServletResponse)} is called and the user is not authenticated. </p> <p> If the value is null (default), then the default container behavior will be be retained when invoking {@link HttpServletRequest#authenticate(HttpServletResponse)} </p> invoking {@link HttpServletRequest#authenticate(HttpServletResponse)} if the user is not authenticated.
<p> Sets the {@link AuthenticationManager} used when integrating {@link HttpServletRequest} with Servlet 3 APIs. Specifically, it will be used when {@link HttpServletRequest#login(String, String)} is invoked to determine if the user is authenticated. </p> <p> If the value is null (default), then the default container behavior will be retained when invoking {@link HttpServletRequest#login(String, String)}. </p> {@link HttpServletRequest#login(String, String)}
<p> Sets the {@link LogoutHandler}s used when integrating with {@link HttpServletRequest} with Servlet 3 APIs. Specifically it will be used when {@link HttpServletRequest#logout()} is invoked in order to log the user out. So long as the {@link LogoutHandler}s do not commit the {@link HttpServletResponse} (expected), then the user is in charge of handling the response. </p> <p> If the value is null (default), the default container behavior will be retained when invoking {@link HttpServletRequest#logout()}. </p> {@link HttpServletRequest#logout()}.
~ Methods ========================================================================================================
Returns true if the Servlet 3 APIs are detected.
Creates a new instance with {@link AuthenticationTrustResolverImpl}.
Creates a new instance null. if no prefix.
Obtain the current active <code>Authentication</code>
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
Handles the HttpSessionEvent by publishing a {@link HttpSessionCreatedEvent} to the application appContext.
Handles the HttpSessionEvent by publishing a {@link HttpSessionDestroyedEvent} to the application appContext.
Creates a new instance
Sets the strategy which will be invoked instead of allowing the filter chain to prceed, if the user agent requests an invalid session Id. If the property is not set, no action will be taken. {@link SimpleRedirectInvalidSessionStrategy}.
The handler which will be invoked if the <tt>AuthenticatedSessionStrategy</tt> raises a <tt>SessionAuthenticationException</tt>, indicating that the user is not allowed to be authenticated for this session (typically because they already have too many sessions open).
Determines whether a new session should be created before redirecting (to avoid possible looping issues where the same session ID is sent with the redirected request). Alternatively, ensure that the configured URL does not pass through the {@code SessionManagementFilter}.
Creates a new instance
Creates a matcher with the specific pattern which will match all HTTP methods in a case insensitive manner.
Creates a matcher with the supplied pattern and HTTP method in a case insensitive manner. the incoming request doesn't have the same method.
Creates a matcher with the supplied pattern which will match the specified Http method the incoming request doesn't doesn't have the same method.
Returns true if the configured pattern (and HTTP-Method) match those of the supplied request. against the {@code servletPath} + {@code pathInfo} of the request.
Provides a save way of obtaining the HttpMethod from a String. If the method is invalid, returns null.
Subclasses can override this methode if they want to use a different EL root context
Takes a specific IP address or a range specified using the IP/Netmask (e.g. 192.168.1.0/24 or 202.24.0.0/14). come.
Creates an instance {@link RequestMatcher} return true
If set to true, matches on exact {@link MediaType}, else uses {@link MediaType#isCompatibleWith(MediaType)}.
Set the {@link MediaType} to ignore from the {@link ContentNegotiationStrategy}. This is useful if for example, you want to match on {@link MediaType#APPLICATION_JSON} but want to ignore {@link MediaType#ALL}. {@link ContentNegotiationStrategy}
Creates a new instance
Creates a new instance
Creates a case-sensitive {@code Pattern} instance to match against the request.
As above, but allows setting of whether case-insensitive matching should be used. {@link Pattern#CASE_INSENSITIVE} flag set.
Performs the match of the request URL ({@code servletPath + pathInfo + queryString} ) against the compiled pattern. If the query string is present, a question mark will be prepended.
Creates a new instance that will match if a header by the name of {@link #expectedHeaderName} is present. In this instance, the value does not matter. request will match. Cannot be null.
Creates a new instance that will match if a header by the name of {@link #expectedHeaderName} is present and if the {@link #expectedHeaderValue} is non-null the first value is the same. matter
Default extractor for {@link Throwable} instances.
Default extractor for {@link InvocationTargetException} instances.
Comparator to order classes ascending according to their hierarchy relation. If two classes have a hierarchical relation, the "higher" class is considered to be greater by this comparator.<br> For hierarchically unrelated classes their fully qualified name will be compared.
Creates a new <code>ThrowableAnalyzer</code> instance.
Registers a <code>ThrowableCauseExtractor</code> for the specified type. <i>Can be used in subclasses overriding {@link #initExtractorMap()}.</i> <code>null</code>)
Initializes associations between <code>Throwable</code>s and <code>ThrowableCauseExtractor</code>s. The default implementation performs the following registrations: <ul> <li>{@link #DEFAULT_EXTRACTOR} for {@link Throwable}</li> <li>{@link #INVOCATIONTARGET_EXTRACTOR} for {@link InvocationTargetException}</li> </ul><br> Subclasses overriding this method are encouraged to invoke the super method to perform the default registrations. They can register additional extractors as required. <p> Note: An extractor registered for a specific type is applicable for that type <i>and all subtypes thereof</i>. However, extractors registered to more specific types are guaranteed to be resolved first. So in the default case InvocationTargetExceptions will be handled by {@link #INVOCATIONTARGET_EXTRACTOR} while all other throwables are handled by {@link #DEFAULT_EXTRACTOR}.
Determines the cause chain of the provided <code>Throwable</code>. The returned array contains all throwables extracted from the stacktrace, using the registered {@link ThrowableCauseExtractor extractors}. The elements of the array are ordered: The first element is the passed in throwable itself. The following elements appear in their order downward the stacktrace. <p> Note: If no {@link ThrowableCauseExtractor} is registered for this instance then the returned array will always only contain the passed in throwable.
Extracts the cause of the given throwable using an appropriate extractor.
Returns the first throwable from the passed in array that is assignable to the provided type. A returned instance is safe to be cast to the specified type. <p> If the passed in array is null or empty this method returns <code>null</code>. subclass of <code>Throwable</code>
Verifies that the provided throwable is a valid subclass of the provided type (or of the type itself). If <code>expectdBaseType</code> is <code>null</code>, no check will be performed. <p> Can be used for verification purposes in implementations of {@link ThrowableCauseExtractor extractors}. <code>null</code> or its type is not assignable to <code>expectedBaseType</code>
~ Methods ========================================================================================================
Obtains the full URL the client used to make the request. <p> Note that the server port will not be shown if it is the default server port for HTTP or HTTPS (80 and 443 respectively).
Obtains the web application-specific fragment of the request URL. <p> Under normal spec conditions, <pre> requestURI = contextPath + servletPath + pathInfo </pre> But the requestURI is not decoded, whereas the servletPath and pathInfo are (SEC-1255). This method is typically used to return a URL for matching against secured paths, hence the decoded form is used in preference to the requestURI for building the returned value. But this method may also be called using dummy request objects which just have the requestURI and contextPatth set, for example, so it will fall back to using those.
Obtains the web application-specific fragment of the URL.
Returns true if the supplied URL starts with a "/" or is absolute.
Decides if a URL is absolute based on whether it contains a valid scheme name, as defined in RFC 1738.
Redirects the response to the supplied URL. <p> If <tt>contextRelative</tt> is set, the redirect value will be the value after the request context path. Note that this will result in the loss of protocol information (HTTP or HTTPS), so will cause problems if a redirect is being performed to change to HTTPS, for example.
If <tt>true</tt>, causes any redirection URLs to be calculated minus the protocol and context path (defaults to <tt>false</tt>).
Returns the first filter chain matching the supplied URL.
Convenience method, mainly for testing.
applied to incoming requests.
Used (internally) to specify a validation strategy for the filters in each configured chain. initialization to check the {@code FilterChainProxy} instance.
Sets the "firewall" implementation which will be used to validate and wrap (or potentially reject) the incoming requests. The default implementation should be satisfactory for most requirements.
~ Static fields ==================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
Indicates the URL that the user agent used for this request. <p> The returned URL does <b>not</b> reflect the port number determined from a {@link org.springframework.security.web.PortResolver}.
Obtains the web application-specific fragment of the URL.
~ Constructors ===================================================================================================
Returns the translated (Integer -&gt; Integer) version of the original port mapping specified via setHttpsPortMapping()
Set to override the default HTTP port to HTTPS port mappings of 80:443, and 8080:8443. In a Spring XML ApplicationContext, a definition would look something like this: <pre> &lt;property name="portMappings"&gt; &lt;/property&gt; </pre> each entry the key is the string representation of an integer HTTP port number, and the value is the string representation of the corresponding integer HTTPS port number. values, each representing an integer port number in the range 1-65535 for that mapping.
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
Create an authentication manager which returns the passed in object.
Builds an X.509 certificate. In human-readable form it is: <pre> Certificate: Data: Signature Algorithm: sha1WithRSAEncryption </pre>
Builds an X.509 certificate with a subject DN where the CN field is at the end of the line. The actual DN line is: <pre> L=Cupertino,C=US,ST=CA,OU=Java Software,O=Sun Microsystems\, Inc,CN=Duke </pre>
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Methods ========================================================================================================
Creates a new </code>{@link ObjectAssert}</code>.
Some of these may be unrealistic values, but we can't be sure because of the inconsistency in the spec.
~ Helper Methods ====================================================================================================
SEC-830. Assume we have a request to /someUrl?action=foo (the saved request) and then RequestDispatcher.forward() it to /someUrl?action=bar. What should action parameter be before and during the forward?
~ Methods ========================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
~ Constructors ===================================================================================================
~ Methods ========================================================================================================
The display name of the consumer.
The display name of the consumer.
The name of the resource that this consumer can be granted access to.
The name of the resource that this consumer can be granted access to.
The description of the resource that this consumer can be granted access to.
The description of the resource that this consumer can be granted access to.
Id of the photo.
Id of the photo.
The resource URL.
The resource URL.
Name of the photo.
Name of the photo.
The id of the user to whom the photo belongs.
The id of the user to whom the photo belongs.
Service to load client details (optional) for auto approval checks.
Create a new PhotoServiceUser
The unique username for the user
The name of the user
Base 64
URL-safe versions with no padding chars
UTF-8 encoding/decoding. Using a charset rather than `String.getBytes` is less forgiving and will raise an exception for invalid data.
Substitute for Scala's Array.concat()
val keyLength = key.getEncoded.length * 8
Creates a token from an encoded token string.
Validates a signature contained in the 'crypto' segment.
Allows retrieval of the full token.
Whether to support the plain text signature method.
Whether to support the plain text signature method.
Whether to support HMAC-SHA1 signature method.
Whether to support HMAC-SHA1 signature method.
Whether to support RSA-SHA1 signature method.
Whether to support RSA-SHA1 signature method.
The password encoder to use for the plain-text password signature method.
The password encoder to use for the plain-text password signature method.
Construct a HMAC-SHA1 signature method with the given HMAC-SHA1 key.
The name of this HMAC-SHA1 signature method ("HMAC-SHA1").
Sign the signature base string. The signature is the digest octet string, first base64-encoded per RFC2045, section 6.8, then URL-encoded per OAuth Parameter Encoding.
Verify the signature of the given signature base string. The signature is verified by generating a new request signature octet string, and comparing it to the signature provided by the Consumer, first URL-decoded per Parameter Encoding, then base64-decoded per RFC2045 section 6.8. The signature is generated using the request parameters as provided by the Consumer, and the Consumer Secret and Token Secret as stored by the Service Provider.
The secret key.
Construct a plain text signature method with the given plain-text secret.
The name of this plain text signature method ("PLAINTEXT").
The signature is the same as the secret.
Validates that the signature is the same as the secret.
The secret.
Create an RSA public key secret with the given private and public key value. The value of the private key is assumed to be the PKCS#8-encoded bytes of the private key. The value of the public key is assumed to be the X509-encoded bytes of the public key.
Create an RSA public key secret with the given private and public key.  The values are assumed to be the Base64-encoded values of the bytes of the keys, X509-encoded for the public key and PKCS#8-encoded for the private key.
Construct an RSA public key secret with the given public key. The private key will be null.
Create an RSA public key secret with the given public key value.  The value is assumed to be the X509-encoded bytes of the public key. The private key will be null.
Create an RSA public key secret with the given public key value.  The value is assumed to be the Base64-encoded value of the X509-encoded bytes of the public key. The private key will be null.
Create an RSA public key secret with the given X509 certificate. The private key will be null.
Creates a public key from the X509-encoded value of the given bytes.
Creates a private key from the PKCS#8-encoded value of the given bytes.
Utility method for decoding a base-64-encoded string.
The private key.
The public key.
Construct a RSA-SHA1 signature method with the given RSA-SHA1 public/private key pair.
Construct a RSA-SHA1 signature method with the given RSA-SHA1 private key.  This constructor is to be used by the consumer (who has access to its own private key).
Construct a RSA-SHA1 signature method with the given RSA-SHA1 public key.  This constructor is to be used by the provider (who has access to the public key of the consumer).
The name of this RSA-SHA1 signature method ("RSA-SHA1").
The Signature Base String is signed using the Consumer’s RSA private key per RFC3447 section 8.2.1, where K is the Consumer’s RSA private key, M the Signature Base String, and S is the result signature octet string: {@code S = RSASSA-PKCS1-V1_5-SIGN (K, M) } oauth_signature is set to S, first base64-encoded per RFC2045 section 6.8, then URL-encoded per Parameter Encoding.
The private key.
Encode the specified value.
Decode the specified value.
Splits a <code>String</code> at the first instance of the delimiter. Does not include the delimiter in the response.
Takes an array of <code>String</code>s, and for each element removes any instances of <code>removeCharacter</code>, and splits the element based on the <code>delimiter</code>. A <code>Map</code> is then generated, with the left of the delimiter providing the key, and the right of the delimiter providing the value. Will trim both the key and value before adding to the <code>Map</code>.
Splits a given string on the given separator character, skips the contents of quoted substrings when looking for separators. Introduced for use in DigestProcessingFilter (see SEC-506). This was copied and modified from commons-lang StringUtils
Attempts to find the place in the filter chain to insert the spring security oauth filters. Currently, these filters are inserted after the ExceptionTranslationFilter.
Read a resource.
Create a configured URL.  If the HTTP method to access the resource is "POST" or "PUT" and the "Authorization" header isn't supported, then the OAuth parameters will be expected to be sent in the body of the request. Otherwise, you can assume that the given URL is ready to be used without further work.
Internal use of configuring the URL for protected access, the resource details already having been loaded.
Finds a valid header value that is valid for the OAuth header.
Get the consumer token with the given parameters and URL. The determination of whether the retrieved token is an access token depends on whether a request token is provided.
Loads the OAuth parameters for the given resource at the given URL and the given token. These parameters include any query parameters on the URL since they are included in the signature. The oauth parameters are NOT encoded.
URL-encode a value.
URL-decode a token.
Open a connection to the given URL.
Selects a proxy for the given URL.
Get the signature base string for the specified parameters. It is presumed the parameters are NOT OAuth-encoded.
The protected resource details service.
The URL stream handler factory for connections to an OAuth resource.
The nonce factory.
The signature factory to use.
The proxy selector to use.
The connection timeout (default 60 seconds).
The connection timeout.
The read timeout (default 60 seconds).
The read timeout.
Any additional OAuth parameters to send with the OAuth request.
Any additional OAuth parameters to send with the OAuth request.
The support logic to use.
The support logic to use.
Check the given exception for the resource that needs authorization. If the exception was not thrown because a resource needed authorization, then rethrow the exception.
Get the callback URL for the specified request.
Get the URL to which to redirect the user for authorization of protected resources.
Common logic for OAuth failed. (Note that the default logic doesn't pass the failure through so as to not mess with the current authentication.)
The oauth failure handler.
The oauth failure handler.
The token services.
The token services.
Set the message source.
The OAuth consumer support.
The OAuth consumer support.
The default request attribute into which the OAuth access tokens are stored.
The default request attribute into which the OAuth access tokens are stored.
The port resolver.
The port resolver.
The remember-me services.
The remember-me services.
The throwable analyzer.
The throwable analyzer.
The redirect strategy.
The redirect strategy.
Loads the access token dependencies for the given request. This will be a set of {@link ProtectedResourceDetails#getId() resource ids} for which an OAuth access token is required.
The filter invocation definition source.
The filter invocation definition source.
Whether to require the current authentication to be authenticated.
Whether to require the current authentication to be authenticated.
The id of the resource to which this token applies.
The id of the resource to which this token applies.
The value of the token.
The value of the token.
The token secret.
The token secret.
Whether this is an OAuth access token.
Whether this is an OAuth access token.
Any additional parameters for the consumer token.
Any additional parameters for the consumer token.
The config attribute is supported if it's an instance of {@link org.springframework.security.oauth.provider.attributes.ConsumerSecurityConfig}.
Votes on giving access to the specified authentication based on the security attributes.
The content type of the response.
The content type of the response.
Whether to require 1.0a support.
Whether to require 1.0a support.
Parse the OAuth header parameters. The parameters will be oauth-decoded.
Get the supported OAuth parameters. The default implementation supports only the OAuth core parameters.
Normalize the URL for use in the signature. The OAuth spec says the URL protocol and host are to be lower-case, and the query and fragments are to be stripped.
Loads the significant parameters (name-to-value map) that are to be used to calculate the signature base string. The parameters will be encoded, per the spec section 9.1.
The configured base URL for this OAuth provider for the given HttpServletRequest. Default implementation return getBaseUrl() + request URI.
The configured base URL for this OAuth provider.
The configured base URL for the OAuth provider.
By default, OAuth parameters are adequate if a consumer key is present.
Create the details for the authentication request.
Whether to allow the specified HTTP method.
Validate the signature of the request given the authentication request.
Logic executed on valid signature. The security context can be assumed to hold a verified, authenticated {@link org.springframework.security.oauth.provider.ConsumerAuthentication} Default implementation continues the chain.
Logic to be performed on a new timestamp.  The default behavior expects that the timestamp should not be new.
Common logic for OAuth failed.
Whether this filter is configured to process the specified request.
Whether to skip processing for the specified request.
The authentication entry point.
The consumer details service.
The nonce services.
Get the OAuth token services.
The URL for which this filter will be applied.
The URL for which this filter will be applied.
The OAuth provider support.
The OAuth signature method factory.
Whether to ignore missing OAuth credentials.
Whether to ignore missing OAuth credentials.
The allowed set of HTTP methods.
Whether to allow all methods.
Whether to allow all methods.
The authentication handler.
The authentication handler.
Create the OAuth token for the specified consumer key.
The name of the request parameter that supplies the token id.
The name of the request parameter that supplies the token id.
The verifier services to use.
The name of the request parameter that supplies the callback URL.
The name of the request parameter that supplies the callback URL.
Set the timestamp validity window (in seconds).
The timestamp validity window (in seconds).
The interval at which to schedule cleanup. (&lt;= 0 for never).
The interval at which to schedule cleanup.
The consumer key associated with this oauth token.
The consumer key associated with this oauth token.
The callback url associated with this token.
The callback url associated with this token.
The verifier string for this token.
The verifier string for this (access) token.
The authentication of the user who granted the access token.
The authentication of the user who granted the access token.
Timestamp associated with this token.
Timestamp associated with this token.
Initialze these token services. If no random generator is set, one will be created.
Whether the auth token is expired.
Logic for handling event firing of a removed token.
Logic for handling event firing of a created token.
The length of the token secret in bytes, before being base64-encoded.
The length of the token secret in bytes, before being base64-encoded.
The random value generator used to create token secrets.
The random value generator used to create token secrets.
The validity (in seconds) of the unauthenticated request token.
The validity (in seconds) of the unauthenticated request token.
The validity (in seconds) of the access token.
The validity (in seconds) of the access token.
The collection of lifecycle listeners for these services.
Convert these random bytes to a verifier string. The length of the byte array can be {@link #setVerifierLengthBytes(int) configured}. Default implementation mods the bytes to fit into the ASCII letters 1-9, A-Z, a-z .
The verifier length in bytes, before being encoded to a string.
The verifier length in bytes, before being encoded to a string.
The consumer key.
The consumer key.
The name of the consumer.
The name of the consumer.
The signature secret.
The signature secret.
The base authorities for this consumer.
The base authorities for this consumer.
The name of the resource.
The name of the resource.
The description of the resource.
The description of the resource.
Whether this consumer is required to obtain an authenticated oauth token.
Whether this consumer is required to obtain an authenticated oauth token.
The credentials.
The credentials of this authentication.
The principal ({@link #getConsumerDetails() consumer details}).
The consumer details.
Get the oauth parameters supplied in the request.
The name of this principal is the consumer key.
Whether the signature has been validated.
Whether the signature has been validated.
The signature.
The signature method.
The signature base string.
The OAuth token.
Default implementation returns the user authentication associated with the auth token, if the token is provided. Otherwise, the consumer authentication is returned. authenticate the request (for example, in the case of 2-legged OAuth).
Constructor for the HttpURLConnection.
Reference to a CheckTokenServices that can validate an OAuth2AccessToken
A rest template to be used to obtain an access token.
Redirect the user according to the specified exception.
Calculate the current URI given the request.
Construct an error handler that can deal with OAuth2 concerns before handling the error in the default fashion.
Construct an error handler that can deal with OAuth2 concerns before delegating to acustom handler.
Splits a <code>String</code> at the first instance of the delimiter.<p>Does not include the delimiter in the response.</p>
Takes an array of <code>String</code>s, and for each element removes any instances of <code>removeCharacter</code>, and splits the element based on the <code>delimiter</code>. A <code>Map</code> is then generated, with the left of the delimiter providing the key, and the right of the delimiter providing the value.<p>Will trim both the key and value before adding to the <code>Map</code>.</p>
Splits a given string on the given separator character, skips the contents of quoted substrings when looking for separators. Introduced for use in DigestProcessingFilter (see SEC-506). <p> This was copied and modified from commons-lang StringUtils </p>
Description of the parameters required to be submitted for approval. Map from the name of the parameter to its description.
The uri to which the user is to be redirected.
The request parameters that are to be appended to the uri.
The key to the state to preserve.
The key to the state to preserve.
Some state that needs to be preserved and set up in the security context when the user returns.
The state that needs to be preserved and set up in the security context when the user returns.
The resource type to use when obtaining an access token. The value provided must be a concrete implementation of {@link OAuth2ProtectedResourceDetails}. An instance will be constructed by the test framework and used to set up an OAuth2 authentication context. The strategy used for instantiating the value provided might vary depending on the consumer. Defaults to the value of {@link resource()} if not provided.
Create a new client that can inject an Environment into its protected resource details. for the duration of a test
Create a new client that can inject a {@link TestAccounts} instance into its protected resource details. for the duration of a test client
Create a new client that knows how to create its protected resource with no externalization help. Typically it will use resource details which accept an instance of the current test case (downcasting it from Object). For example <pre> static class MyClientDetailsResource extends ClientCredentialsProtectedResourceDetails { public MyClientDetailsResource(Object target) { </pre> for the duration of a test
Get the current access token. Should be available inside a test method as long as a resource has been setup with {@link OAuth2ContextConfiguration &#64;OAuth2ContextConfiguration}.
Flag to say that the use of state parameter is mandatory.
A custom enhancer for the authorization request
Prefix for scope approval parameters.
Flag to signal that the current URI (if set) in the request should be used in preference to the pre-established redirect URI.
Flag to signal that the current URI (if set) in the request should be used in preference to the pre-established redirect URI.
The URI to which the user is to be redirected to authorize an access token.
The URI to which the user is to be redirected to authorize an access token.
The redirect URI that has been pre-established with the server. If present, the redirect URI will be omitted from the user authorization request because the server doesn't need to know it.
The redirect URI that has been pre-established with the server. If present, the redirect URI will be omitted from the user authorization request because the server doesn't need to know it.
Extract a redirect uri from the resource and/or the current request.
Token services for long-term persistence of access tokens.
Obtain a new access token for the specified resource using the refresh token.
The current URI that is being handled on the client.
The authorization code for this context.
A custom enhancer for the access token request
Set the request factory that this template uses for obtaining {@link ClientHttpRequest HttpRequests}.
Strategy for extracting an Authorization header from an access token and the request details. Defaults to the simple form "TOKEN_TYPE TOKEN_VALUE".
Flag to determine whether a request that has an existing access token, and which then leads to an AccessTokenRequiredException should be retried (immediately, once). Useful if the remote server doesn't recognize an old token which is stored in the client, but is happy to re-grant it.
Acquire or renew an access token for the current context if necessary. This method will be called automatically when a request is executed (and the result is cached), but can also be called as a standalone method to pre-populate the token.
The OAuth2 error code.
The HTTP error code associated with this error.
Get any additional information associated with this error.
Add some additional information with this OAuth error.
Creates the appropriate subclass of OAuth2Exception given the errorCode.
Creates an {@link OAuth2Exception} from a Map&lt;String,String&gt;.
Parses a string parameter value into a set of strings.
Formats a set of string values into a format appropriate for sending as a single-valued form value.
Extract a map from a query string.
Compare 2 sets and check that one contains all members of the other.
Create a generator with the default length (6).
Create a generator of random strings of the length provided
Convert these random bytes to a verifier string. The length of the byte array can be {@link #setLength(int) configured}. The default implementation mods the bytes to fit into the ASCII letters 1-9, A-Z, a-z .
The length of string to generate.
The instant the token expires.
Create an access token from the value provided.
Copy constructor for access token.
The token value.
The instant the token expires.
Convenience method for checking expiration
The token type, as introduced in draft 11 of the OAuth 2 spec. The spec doesn't define (yet) that the valid token types are, but says it's required so the default will just be "undefined".
The token type, as introduced in draft 11 of the OAuth 2 spec.
The refresh token associated with the access token, if any.
The refresh token associated with the access token, if any.
The scope of the token.
The scope of the token.
Additional information that token granters would like to add to the token, e.g. to support new token types.
Additional information that token granters would like to add to the token, e.g. to support new token types. If the values in the map are primitive then remote communication is going to always work. It should also be safe to use maps (nested if desired), or something that is explicitly serializable by Jackson.
Explicitly disable the approval store, even if one would normally be added automatically (usually when JWT is not used). Without an approval store the user can only be asked to approve or deny a grant without any more granular decisions.
The AuthenticationManager for the password grant.
N.B. this method is not part of the public API. To set up a custom ClientDetailsService please use {@link AuthorizationServerConfigurerAdapter#configure(ClientDetailsServiceConfigurer)}.
Adds a new custom authentication filter for the TokenEndpoint. Filters will be set upstream of the default BasicAuthenticationFilter.
Sets a new list of custom authentication filters for the TokenEndpoint. Filters will be set upstream of the default BasicAuthenticationFilter.
Flag to indicate that only token-based authentication is allowed on these resources.
The prefix applied to incoming parameters that signal approval or denial of a scope.
Requires the authorization request to be explicitly approved, including all individual scopes, and the user to be authenticated. A scope that was requested in the authorization request can be approved by sending a request parameter <code>scope.&lt;scopename&gt;</code> equal to "true" or "approved" (otherwise it will be assumed to have been denied). The {@link ApprovalStore} will be updated to reflect the inputs.
Basic implementation just requires the authorization request to be explicitly approved and the user to be authenticated.
Extract the OAuth bearer token from a header.
Records the access token value and remote address and will also set the session Id if a session already exists (it won't create one).
The access token value used to authenticate the request (normally in an authorization header).
The access token type used to authenticate the request (normally in an authorization header).
Indicates the <code>HttpSession</code> id the authentication request was received from.
The authentication details obtained by decoding the access token if available.
The authentication details obtained by decoding the access token if available.
Expects the incoming authentication request to have a principal value that is an access token value (e.g. from an authorization header). Loads an authentication from the {@link ResourceServerTokenServices} and checks that the resource id is contained in the {@link AuthorizationRequest} (if one is specified). Also copies authentication details over from the input to the output (e.g. typically so that the access token value and request details can be reported later).
Flag to say that this filter guards stateless resources (default true). Set this to true if the only way the resource can be accessed is with a token. If false then an incoming cookie can populate the security context and allow access to a caller that isn't an OAuth2 client.
We need explicit approval from the user.
We can grant a token and return it with implicit approval.
Flag to indicate that requested URIs will match if they are a subdomain of the registered value.
Grant types that are permitted to have a redirect uri.
Whether the requested redirect URI "matches" the specified redirect URI. For a URL, this implementation tests if the user requested redirect starts with the registered redirect, so it would have the same host and root path if it is an HTTP URL. The port is not matched. <p> For other (non-URL) cases, such as for some implicit clients, the redirect_uri must be an exact match.
Check if host matches the registered value.
Attempt to match one of the registered URIs to the that of the requested one.
Whether the requested redirect URI "matches" the specified redirect URI. This implementation tests strict equality.
Custom mappings for framework endpoint paths. The keys in the map are the default framework endpoint path, e.g. "/oauth/authorize", and the values are the desired runtime paths.
The name of the request parameter that distinguishes a call to approve an authorization. Default is {@link OAuth2Utils#USER_OAUTH_APPROVAL}.
An authentication entry point that can handle unsuccessful authentication. Defaults to an {@link OAuth2AuthenticationEntryPoint}.
A source of authentication details for requests that result in authentication.
If the incoming request contains user credentials in headers or parameters then extract them here into an Authentication token that can be validated later. This implementation only recognises password grant requests and extracts the username and password.
Allow subclasses to manipulate the response before it is rendered. {@link #setExceptionTranslator(WebResponseExceptionTranslator) exception translator}.
Check if any scope decisions have been denied in the current context and throw an exception if so. This method automatically wraps any expressions when using {@link OAuth2MethodSecurityExpressionHandler} or {@link OAuth2WebSecurityExpressionHandler}. OAuth2Example usage: <pre> access = &quot;#oauth2.hasScope('read') or (#oauth2.hasScope('other') and hasRole('ROLE_USER'))&quot; </pre> Will automatically be wrapped to ensure that explicit errors are propagated rather than a generic error when returning false: <pre> access = &quot;#oauth2.throwOnError(#oauth2.hasScope('read') or (#oauth2.hasScope('other') and hasRole('ROLE_USER'))&quot; </pre> N.B. normally this method will be automatically wrapped around all your access expressions. You could use it explicitly to get more control, or if you have registered your own <code>ExpressionParser</code> you might need it.
Check if the OAuth2 client (not the user) has the role specified. To check the user's roles see {@link #clientHasRole(String)}.
Check if the OAuth2 client (not the user) has one of the roles specified. To check the user's roles see {@link #clientHasAnyRole(String...)}.
Check if the current OAuth2 authentication has one of the scopes specified.
Check if the current OAuth2 authentication has one of the scopes specified.
Check if the current OAuth2 authentication has one of the scopes matching a specified regex expression. <pre> access = &quot;#oauth2.hasScopeMatching('.*_admin:manage_scopes')))&quot; </pre>
Check if the current OAuth2 authentication has one of the scopes matching a specified regex expression. <pre> access = &quot;#oauth2.hasAnyScopeMatching('admin:manage_scopes','.*_admin:manage_scopes','.*_admin:read_scopes')))&quot; </pre>
Deny access to oauth requests, so used for example to only allow web UI users to access a resource.
Permit access to oauth requests, so used for example to only allow machine clients to access a resource.
Check if the current authentication is acting on behalf of an authenticated user.
Check if the current authentication is acting as an authenticated client application not on behalf of a user.
Flag to indicate that scopes should be interpreted as valid authorities. No scopes will be granted to a user unless they are permitted as a granted authority to that user.
The number of tokens to store before flushing expired tokens. Defaults to 1000.
The interval (count of token inserts) between flushing expired tokens.
Convenience method for super admin users to remove all tokens (useful for testing, not really in production)
Get the verification key for the token signatures.
Sets the JWT signing key. It can be either a simple MAC key or an RSA key. RSA keys should be in OpenSSH format, as produced by <tt>ssh-keygen</tt>.
The key used for verifying signatures produced by this class. This is not used but is returned from the endpoint to allow resource servers to obtain the key. For an HMAC key it will be the same value as the signing key and does not need to be set. For and RSA key, it should be set to the String representation of the public key, in a standard format (e.g. OpenSSH keys)
Create a JwtTokenStore with this token enhancer (should be shared with the DefaultTokenServices if used).
ApprovalStore to be used to validate and restrict refresh tokens.
Converter for the part of the data in the token representing a user.
Flag to indicate the the grant type should be included in the converted token.
Initialize these token services. If no random generator is set, one will be created.
Create a refreshed authentication.
The access token validity period in seconds
The refresh token validity period in seconds
Is a refresh token supported for this client (or the global setting if {@link #setClientDetailsService(ClientDetailsService) clientDetailsService} is not set.
An access token enhancer that will be applied to a new token before it is saved in the token store.
The validity (in seconds) of the refresh token. If less than or equal to zero then the tokens will be non-expiring.
The default validity (in seconds) of the access token. Zero or negative for non-expiring tokens. If a client details service is set the validity period will be read from he client, defaulting to this value if not defined by the client.
Whether to support the refresh token.
Whether to reuse refresh tokens (until expired).
The persistence strategy for token storage.
An authentication manager that will be used (if provided) to check the user authentication when a token is refreshed.
The client details service to use for looking up clients (if necessary). Optional if the access token expiry is set globally via {@link #setAccessTokenValiditySeconds(int)}.
Optional {@link UserDetailsService} to use when extracting an {@link Authentication} from the incoming map.
Default value for authorities if an Authentication is being created and the input has no data for authorities. will be unauthenticated.
Loop over the {@link #setTokenEnhancers(List) delegates} passing the result into the next member of the chain. org.springframework.security.oauth2.provider.OAuth2Authentication)
ClientDetailsService for looking up clients by ID.
Flag to determine the behaviour on access denied. If set then we throw an {@link InsufficientScopeException} instead of returning {@link AccessDecisionVoter#ACCESS_DENIED}. This is unconventional for an access decision voter because it vetos the other voters in the chain, but it enables us to pass a message to the caller with information about the required scope.
Flag to signal that when there is no user authentication client authorities are to be treated as scopes.
The name of the config attribute that can be used to deny access to OAuth2 client. Defaults to <code>DENY_OAUTH</code>.
This implementation supports any type of class, because it does not query the presented secure object.
Allows the default role prefix of <code>SCOPE_</code> to be overridden. May be set to an empty value, although this is usually not desirable.
Full constructor.
Convenience constructor for unit tests, where client ID and scope are often the only needed fields.
Convenience method to set resourceIds and authorities on this request by inheriting from a ClientDetails object.
Set the scope value. If the collection contains only a single scope value, this method will parse that value into a collection using {@link OAuth2Utils#parseParameterList}.
Set the Request Parameters on this authorization request, which represent the original request parameters and should never be changed during processing. The map passed in is wrapped in an unmodifiable map instance.
Warning: most clients should use the individual properties of this class, such as {{@link #getScope()} or { {@link #getClientId()}, rather than retrieving values from this map.
Construct an OAuth 2 authentication. Since some grant types don't require user authentication, the user authentication may be null.
Convenience method to check if there is a user associated with this token, or just a client application.
The authorization request containing details of the client application.
The user authentication.
Update the request parameters and return a new object with the same properties except the parameters.
Update the scope and create a new request. All the other properties are the same (including the request parameters).
If this request was for an access token to be refreshed, then the {@link TokenRequest} that led to the refresh <i>may</i> be available here if it is known.
Tries to discover the grant type requested for the token associated with this request.
Full constructor. Sets this TokenRequest's requestParameters map to an unmodifiable version of the one provided.
Set the scope value. If the collection contains only a single scope value, this method will parse that value into a collection using {@link OAuth2Utils#parseParameterList}.
Set the Request Parameters on this authorization request, which represent the original request parameters and should never be changed during processing. The map passed in is wrapped in an unmodifiable map instance.
NB: This used to test expiring refresh tokens. That test has been moved to sub-classes since not all stores support the functionality
Set the protocol to use for http requests.
Java 7 and up have Socket implemented as Closeable, whereas Java6 did not have this inheritance.
SECG 2.3.4 Octet String to ECPoint
SECG 2.3.3 ECPoint to Octet String
Creates this event with given {@code name} and exception {@code chainer}. Allocates a new {@link java.util.concurrent.locks.Lock Lock} object for this event.
Creates this event with given {@code name}, exception {@code chainer}, and associated {@code lock}.
Sets this event to be {@code true}. Short for {@code set(true)}.
Clear this event. A cleared event {@code !isSet()}.
Deliver the error {@code t} (after chaining) to any present or future waiters.
Await this event to have a definite {@code true} or {@code false} value.
Await this event to have a definite {@code true} or {@code false} value, for {@code timeout} duration.
Await this event to have a definite {@code true} or {@code false} value, for {@code timeout} duration. <p/> If the definite value is not available when the timeout expires, returns {@code false}.
Acquire the lock associated with this event.
Release the lock associated with this event.
Creates this promise with given {@code name} and exception {@code chainer}. Allocates a new {@link java.util.concurrent.locks.Lock lock} object for this promise.
Creates this promise with given {@code name}, exception {@code chainer}, and associated {@code lock}.
Set this promise's value to {@code val}. Any waiters will be delivered this value.
Queues error that will be thrown in any waiting thread or any thread that attempts to wait on this promise hereafter.
Clears this promise by setting its value and queued exception to {@code null}.
Wait indefinitely for this promise's value to be deliver.
Wait for {@code timeout} duration for this promise's value to be deliver.
Wait for {@code timeout} duration for this promise's value to be deliver. <p/> If the value is not deliver by the time the timeout expires, returns {@code null}.
Acquire the lock associated with this promise.
Release the lock associated with this promise.
Constructs a {@link Base64.InputStream} in either ENCODE or DECODE mode. <p/> Valid options: <p/> <pre> ENCODE or DECODE: Encode or Decode as data is read. DO_BREAK_LINES: break lines at 76 characters </pre> <p/> Example: <code>new Base64.InputStream( in, Base64.DECODE )</code>
Constructs a {@link Base64.OutputStream} in either ENCODE or DECODE mode. <p/> Valid options: <p/> <pre> ENCODE or DECODE: Encode or Decode as data is read. DO_BREAK_LINES: don't break lines at 76 characters </pre> <p/> Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>
Method added by PHIL. [Thanks, PHIL. -Rob] This pads the buffer without closing the stream.
Resumes encoding of the stream. May be helpful if you need to embed a piece of base64-encoded data in a stream.
Suspends encoding of the stream. May be helpful if you need to embed a piece of base64-encoded data in a stream.
Low-level access to decoding ASCII characters in the form of a byte array. <strong>Ignores GUNZIP option, if it's set.</strong> This is not generally a recommended method, although it is used internally as part of the decoding process. Special case: if len = 0, an empty array is returned. Still, if you need more speed and reduced memory footprint (and aren't gzipping), consider this method.
Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.
Convenience method for reading a base64-encoded file and decoding it. <p/> <p> As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to next it. </p>
Convenience method for decoding data to a file. <p/> <p> As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to next it. </p>
Attempts to decode Base64 data and deserialize a Java Object within. Returns <tt>null</tt> if there was an error.
Performs Base64 encoding on the <code>raw</code> ByteBuffer, writing it to the <code>encoded</code> ByteBuffer. This is an experimental feature. Currently it does not pass along any options (such as {@link #DO_BREAK_LINES} or {@link #GZIP}.
Performs Base64 encoding on the <code>raw</code> ByteBuffer, writing it to the <code>encoded</code> CharBuffer. This is an experimental feature. Currently it does not pass along any options (such as {@link #DO_BREAK_LINES} or {@link #GZIP}.
Encodes a byte array into Base64 notation. Does not GZip-compress data.
Encodes a byte array into Base64 notation. <p> Example options: <p/> <pre> GZIP: gzip-compresses object before encoding it. DO_BREAK_LINES: break lines at 76 characters </pre> <p> Example: <code>encodeBytes( myData, Base64.GZIP )</code> or <p> Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code> <p/> <p/> <p> As of v 2.3, if there is an error with the GZIP stream, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to next it. </p>
Encodes a byte array into Base64 notation. Does not GZip-compress data. <p/> <p> As of v 2.3, if there is an error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to next it. </p>
Similar to {@link #encodeBytes(byte[])} but returns a byte array instead of instantiating a String. This is more efficient if you're working with I/O streams and have large data sets to encode.
Similar to {@link #encodeBytes(byte[], int, int, int)} but returns a byte array instead of instantiating a String. This is more efficient if you're working with I/O streams and have large data sets to encode.
Convenience method for reading a binary file and base64-encoding it. <p/> <p> As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to next it. </p>
Serializes an object and returns the Base64-encoded version of that serialized object. <p/> <p> As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to next it. </p> <p/> The object is not GZip-compressed before being encoded.
Serializes an object and returns the Base64-encoded version of that serialized object. <p/> <p> As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to next it. </p> <p/> The object is not GZip-compressed before being encoded. <p/> Example options: <p/> <pre> GZIP: gzip-compresses object before encoding it. DO_BREAK_LINES: break lines at 76 characters </pre> <p/> Example: <code>encodeObject( myObj, Base64.GZIP )</code> or <p/> Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>
Convenience method for encoding data to a file. <p/> <p> As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to next it. </p>
Decodes four bytes from array <var>source</var> and writes the resulting bytes (up to three of them) to <var>destination</var>. The source and destination arrays can be manipulated anywhere along their length by specifying <var>srcOffset</var> and <var>destOffset</var>. This method does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 4 for the <var>source</var> array or <var>destOffset</var> + 3 for the <var>destination</var> array. This method returns the actual number of bytes that were converted from the Base64 encoding. <p> This is the lowest level of the decoding method with all possible parameters. </p>
Encodes up to the first three bytes of array <var>threeBytes</var> and returns a four-byte array in Base64 notation. The actual number of significant bytes in your array is given by <var>numSigBytes</var>. The array <var>threeBytes</var> needs only be as big as <var>numSigBytes</var>. Code can reuse a byte array by passing a four-byte array as <var>b4</var>.
<p> Encodes up to three bytes of the array <var>source</var> and writes the resulting four Base64 bytes to <var>destination</var>. The source and destination arrays can be manipulated anywhere along their length by specifying <var>srcOffset</var> and <var>destOffset</var>. This method does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 3 for the <var>source</var> array or <var>destOffset</var> + 4 for the <var>destination</var> array. The actual number of significant bytes in your array is given by <var>numSigBytes</var>. </p> <p> This is the lowest level of the encoding method with all possible parameters. </p>
Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
Returns one of the _SOMETHING_DECODABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED and URL_SAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
Resets this buffer. The object becomes ready for reuse.
Compact this {@link SSHPacket}
Read an SSH boolean byte
Puts an SSH boolean value
Read a byte from the buffer
Read an SSH byte-array
Writes Java byte-array as an SSH byte-array
Read an SSH multiple-precision integer
Reads an SSH string
Reads an SSH string
Gives a readable snapshot of the buffer in hex. This is useful for debugging.
Check whether some part or whole of two byte arrays is equal, for <code>length</code> bytes starting at some offset.
Get a hexadecimal representation of a byte array starting at <code>offset</code> index for <code>len</code> bytes, with each octet separated by a space.
Get the hexadecimal representation of a byte array.
Get the hexadecimal representation of a byte array starting at <code>offset</code> index for <code>len</code> bytes.
Notify all {@code notifiables} of given {@code error}.
Creates an object by picking a factory from {@code factories} that is identified by {@code name} from a list of named {@code factories}. Uses the first match.
Retrieve a particular factory as identified by {@code name} from a list of named {@code factories}. Returns the first match.
Get a comma-delimited string containing the factory names from the given list of {@code factories}.
SSH identifier for RSA keys
SSH identifier for DSA keys
SSH identifier for ECDSA keys
Computes the fingerprint for a public key, in the standard SSH format, e.g. "4b:69:6c:72:6f:79:20:77:61:73:20:68:65:72:65:21"
Creates a new instance of {@link KeyAgreement} with the given algorithm.
Creates a new instance of {@link KeyFactory} with the given algorithm.
Creates a new instance of {@link KeyPairGenerator} with the given algorithm.
Create a new instance of {@link Mac} with the given algorithm.
Create a new instance of {@link MessageDigest} with the given algorithm.
Get the identifier for the registered security provider.
Attempts registering BouncyCastle as security provider if it has not been previously attempted and returns whether the registration succeeded.
Specifies the JCE security provider that should be used.
Constructs new buffer for the specified SSH packet and reserves the needed space (5 bytes) for the packet header.
Reads an SSH byte and returns it as {@link Message}
Writes a byte indicating the SSH message identifier
Start listening for incoming connections and forward to remote host as a channel.
Send a signal to the remote command.
Create from the string representation used when the signal is received as part of an SSH packet.
First 2 args are standard; the others can be parsed from a CHANNEL_OPEN packet.
Calls the listener with the new channel in a separate thread.
Creates this forward with address as {@code ""} and specified {@code port}.
Creates this forward with specified {@code address} and port as {@code 0}.
Creates this forward with specified {@code address} and {@code port} number.
Request forwarding from the remote host on the specified {@link Forward}. Forwarded connections will be handled by supplied {@code listener}. <p/> If {@code forward} specifies as 0, the returned forward will have the correct port number as informed by remote host.
Request cancellation of some forwarding.
Create with a {@link SocketAddress} this listener will forward to.
Stop handling {@code x11} channel open requests. De-registers itself with connection layer.
Called when all I/O streams should be closed. Subclasses can override but must call super.
Called when EOF has been received. Subclasses can override but must call super.
Request opening this channel from remote end.
Create with an associated {@link Transport}.
Divide the path into {@code PathComponents(parent, name)} while making sure {@code name != "." && name != ".."}
Create a new digest using the given algorithm and block size. The initialization and creation of the underlying {@link MessageDigest} object will be done in the {@link #init()} method.
Create a new instance of a MD5 digest
Create a new instance of a SHA1 digest
Create a new instance of a SHA256 digest
Create a new instance of a SHA384 digest
Create a new instance of a SHA384 digest
TODO want to figure out why BouncyCastle does not work.
Append a single entry
Returns advised number of bytes that should be made available in decoderBuffer before the method should be called again.
Adds {@code len} bytes from {@code b} to the decoder buffer. When a packet has been successfully decoded, hooks in to {@link SSHPacketHandler#handle} of the {@link SSHPacketHandler} this decoder was initialized with. <p/> Returns the number of bytes expected in the next call in order to decode the packet length, and if the packet length has already been decoded; to decode the payload. This number is accurate and should be taken to heart.
Encode a buffer into the SSH binary protocol per the current algorithms.
Add a callback for host key verification. <p/> Any of the {@link HostKeyVerifier} implementations added this way can deem a host key to be acceptable, allowing key exchange to successfuly complete. Otherwise, a {@link TransportException} will result during key exchange.
Returns the session identifier computed during key exchange.
Starts key exchange by sending a {@code SSH_MSG_KEXINIT} packet. Key exchange needs to be done once mandatorily after initializing the {@link Transport} for it to be usable and may be initiated at any later point e.g. if {@link Transport#getConfig() algorithms} have changed and should be renegotiated.
Sends SSH_MSG_KEXINIT and sets the {@link #kexInitSent} event.
Tries to validate host key with all the host key verifiers known to this instance ( {@link #hostVerifiers})
Private method used while putting new keys into use that will resize the key used to initialize the cipher to the needed length.
See Sec. 7.2. "Output from Key Exchange", RFC 4253
Reads the identification string from the SSH server. This is the very first string that is sent upon connection by the server. It takes the form of, e.g. "SSH-2.0-OpenSSH_ver". <p/> Several concerns are taken care of here, e.g. verifying protocol version, correct line endings as specified in RFC and such. <p/> This is not efficient but is only done once.
Sends a service request for the specified service
Got an SSH_MSG_UNIMPLEMENTED, so lets see where we're at and act accordingly.
Attempts to detect how a key file is encoded. <p/> Return values are consistent with the {@code NamedFactory} implementations in the {@code keyprovider} package.
Read and store the separate public key provided alongside the private key
Converts a passphrase into a key, by following the convention that PuTTY uses. <p/> <p/> This is used to decrypt the private key when it's encrypted.
Verify the MAC.
Decrypt private key
Skips an integer without reading it.
Reads the next integer.
Builds a {@link SSHPacket} containing the fields common to all authentication method. Method-specific fields can further be put into this buffer.
Initialize this method with the provider for public and private key.
Builds SSH_MSG_USERAUTH_REQUEST packet.
Send SSH_MSG_USERAUTH_REQUEST containing the signature.
Blank out a character array
Download a file from {@code sourcePath} on the connected host to {@code targetPath} locally.
e.g. "C0644" -> 0644; "D0755" -> 0755
Upload a local file from {@code localFile} to {@code targetPath} on the remote host.
Default constructor. Initializes this object using {@link DefaultConfig}.
Constructor that allows specifying a {@code config} to be used.
Add a {@link HostKeyVerifier} which will be invoked for verifying host key during connection establishment and future key exchanges.
Add a {@link AlgorithmsVerifier} which will be invoked for verifying negotiated algorithms.
Add a {@link HostKeyVerifier} that will verify any host that's able to claim a host key with the given {@code fingerprint}, e.g. {@code "4b:69:6c:72:6f:79:20:77:61:73:20:68:65:72:65:21"}
Authenticate {@code username} using the supplied {@code methods}.
Authenticate {@code username} using the {@code "password"} authentication method and as a fallback basic challenge-response authentication.
Authenticate {@code username} using the {@code "password"} authentication method and as a fallback basic challenge-response authentication.. The {@code password} array is blanked out after use.
Authenticate {@code username} using the {@code "publickey"} authentication method, with keys from some common locations on the file system. This method relies on {@code ~/.ssh/id_rsa} and {@code ~/.ssh/id_dsa}. <p/> This method does not provide a way to specify a passphrase.
Authenticate {@code username} using the {@code "publickey"} authentication method. <p/> {@link KeyProvider} instances can be created using any of the of the {@code loadKeys()} method provided in this class. In case multiple {@code keyProviders} are specified; authentication is attempted in order as long as the {@code "publickey"} authentication method is available.
Authenticate {@code username} using the {@code "publickey"} authentication method. <p/> {@link KeyProvider} instances can be created using any of the {@code loadKeys()} method provided in this class. In case multiple {@code keyProviders} are specified; authentication is attempted in order as long as the {@code "publickey"} authentication method is available.
Authenticate {@code username} using the {@code "publickey"} authentication method, with keys from one or more {@code locations} in the file system. <p/> In case multiple {@code locations} are specified; authentication is attempted in order as long as the {@code "publickey"} authentication method is available. If there is an error loading keys from any of them (e.g. file could not be read, file format not recognized) that key file it is ignored. <p/> This method does not provide a way to specify a passphrase.
Authenticate {@code username} using the {@code "gssapi-with-mic"} authentication method, given a login context for the peer GSS machine and a list of supported OIDs. <p/> Supported OIDs should be ordered by preference as the SSH server will choose the first OID that it also supports. At least one OID is required
Creates a {@link KeyProvider} from supplied {@link KeyPair}.
Returns a {@link KeyProvider} instance created from a location on the file system where an <em>unencrypted</em> private key file (does not require a passphrase) can be found. Simply calls {@link #loadKeys(String, PasswordFinder)} with the {@link PasswordFinder} argument as {@code null}.
Utility function for createing a {@link KeyProvider} instance from given location on the file system. Creates a one-off {@link PasswordFinder} using {@link PasswordUtils#createOneOff(char[])}, and calls {@link #loadKeys(String, PasswordFinder)}.
Creates a {@link KeyProvider} instance from given location on the file system. Currently only PKCS8 format private key files are supported (OpenSSH uses this format). <p/>
Convenience method for creating a {@link KeyProvider} instance from a {@code location} where an <i>encrypted</i> key file is located. Calls {@link #loadKeys(String, char[])} with a character array created from the supplied {@code passphrase} string.
Creates a {@link KeyProvider} instance from passed strings. Currently only PKCS8 format private key files are supported (OpenSSH uses this format). <p/>
Attempts loading the user's {@code known_hosts} file from the default locations, i.e. {@code ~/.ssh/known_hosts} and {@code ~/.ssh/known_hosts2} on most platforms. Adds the resulting {@link OpenSSHKnownHosts} object as a host key verifier. <p/> For finer control over which file is used, see {@link #loadKnownHosts(File)}.
Adds a {@link OpenSSHKnownHosts} object created from the specified location as a host key verifier.
Create a {@link LocalPortForwarder} that will listen based on {@code parameters} using the bound {@code serverSocket} and forward incoming connections to the server; which will further forward them to {@code host:port}. <p/> The returned forwarder's {@link LocalPortForwarder#listen() listen()} method should be called to actually start listening, this method just creates an instance.
Register a {@code listener} for handling forwarded X11 channels. Without having done this, an incoming X11 forwarding will be summarily rejected. <p/> It should be clarified that multiple listeners for X11 forwarding over a single SSH connection are not supported (and don't make much sense). So a subsequent call to this method is only going to replace the registered {@code listener}.
Does key re-exchange.
Adds {@code zlib} compression to preferred compression algorithms. There is no guarantee that it will be successfully negotiatied. <p/> If the client is already connected renegotiation is done; otherwise this method simply returns (and compression will be negotiated during connection establishment).
Do key exchange.
Creates a DSA private key.
Creates a DSA public key.
Creates an RSA private key.
Creates an RSA public key.
Returns the current velocity. TODO: Approximate a sane result for older platform versions. Right now this will return 0 for platforms earlier than ICS. This is acceptable at the moment only since it is only used for EdgeEffect, which is also only present in ICS+, and ScrollerCompat is not public. negative.
Stops the animation. Contrary to {@link #forceFinished(boolean)}, aborting the animating cause the scroller to move to the final x and y position
Set a fixed number of columns for this grid. Space will be divided evenly among all columns, respecting the item margin between columns. The default is 2. (If it were 1, perhaps you should be using a {@link android.widget.ListView ListView}.)
Set a minimum column width for
Set the margin between items in pixels. This margin is applied both vertically and horizontally.
Return the first adapter position with a view currently attached as a child view of this grid.
Important: this method will leave offscreen views attached if they are required to maintain the invariant that child view with index i is always the view corresponding to position mFirstPosition + i.
Measure and layout all currently visible children.
Should be called with mPopulating set to true
Should be called with mPopulating set to true
for debug purposes
Return a LayoutRecord for the given position
Obtain a populated view from the adapter. If optScrap is non-null and is not reused it will be placed in the recycle bin.
Clear all state because the grid will be used for a completely different set of data.
Reset all internal state to be at the top of the grid.
Scroll the list so the first visible position in the grid is the first item in the adapter.
Sets the height of the shadow drawable in pixels.
Notify that the sticky attribute has been added or removed from one or more views in the View hierarchy
Checks that passed reference is not null, throws {@link NullPointerException} with passed message if reference is null
Checks that passed string is not null and not empty, throws {@link NullPointerException} or {@link IllegalStateException} with passed message if string is null or empty.
thanks Retrofit for that piece of code
Throws RuntimeException if RxJava is not available
Creates new {@link GroupOperationResults}
Checks that element annotated with {@link StorIOColumnMeta} satisfies all required conditions
Gets number of rows that were deleted.
Checks whether particular object was deleted.
Checks whether particular object was NOT deleted.
Creates new builder for {@link PreparedDelete}.
Creates builder for {@link PreparedDeleteByQuery}.
Creates builder for {@link PreparedDeleteCollectionOfObjects}.
Creates builder for {@link PreparedDeleteObject}.
Creates builder for {@link PreparedPutContentValues}.
Checks whether result of Put Operation was "insert". {@link com.pushtorefresh.storio.contentresolver.StorIOContentResolver}, {@code false} otherwise.
Checks whether result of Put Operation was NOT "insert". into {@link com.pushtorefresh.storio.contentresolver.StorIOContentResolver}, {@code false} if something was inserted.
Checks whether result of Put Operation was "update". {@link com.pushtorefresh.storio.contentresolver.StorIOContentResolver}, {@code false} if it was "insert" or {@code 0} rows were updated (for example: your custom {@link PutResolver} may check that there is already stored row with same columns, so no insert will be done, and no actual update should be performed). But also, keep in mind, that {@link DefaultPutResolver} will return same value that will return {@link android.content.ContentResolver}.
Checks whether result of Put Operation was NOT "update". in {@link com.pushtorefresh.storio.contentresolver.StorIOContentResolver}, {@code false} if something was updated.
Returns number of inserts from all {@link #results()}.
Returns number of updates from all {@link #results()}.
Please use {@link com.pushtorefresh.storio.contentresolver.queries.DeleteQuery.Builder} instead of constructor.
Please use {@link com.pushtorefresh.storio.contentresolver.queries.InsertQuery.Builder} instead of constructor.
Please use {@link com.pushtorefresh.storio.contentresolver.queries.Query.Builder} instead of constructor.
Please use {@link com.pushtorefresh.storio.contentresolver.queries.UpdateQuery.Builder} instead of constructor.
Creates {@link Changes} container with info about changes.
leave default constructor for AutoGenerated code!
This is just class with Meta Data, we don't need instances
This is just class with Meta Data, we don't need instances
Checks whether particular object was deleted
Checks whether particular object was NOT deleted
Checks whether result of Put Operation was "insert". {@link com.pushtorefresh.storio.sqlite.StorIOSQLite}, {@code false} otherwise.
Checks whether result of Put Operation was NOT "insert". {@link com.pushtorefresh.storio.sqlite.StorIOSQLite}, {@code false} if something was inserted.
Checks whether result of Put Operation was "update". {@link com.pushtorefresh.storio.sqlite.StorIOSQLite}, {@code false} if it was "insert" or {@code 0} rows in database were updated (for example: your custom {@link PutResolver} may check that there is already stored row with same columns, so no insert will be done, and no actual update should be performed). But also, keep in mind, that {@link DefaultPutResolver} will return same value that will return {@link android.database.sqlite.SQLiteDatabase}, which will return {@code 1} even if all columns were same.
Checks whether result of Put Operation was NOT "update". {@link com.pushtorefresh.storio.sqlite.StorIOSQLite}, {@code false} if something was updated.
Please use {@link com.pushtorefresh.storio.sqlite.queries.DeleteQuery.Builder} instead of constructor.
Please use {@link com.pushtorefresh.storio.sqlite.queries.InsertQuery.Builder} instead of constructor.
Please use {@link com.pushtorefresh.storio.sqlite.queries.Query.Builder} instead of constructor.
Gets distinct option. <p> True if you want each row to be unique, false otherwise.
Please use {@link com.pushtorefresh.storio.sqlite.queries.RawQuery.Builder} instead of constructor.
Please use {@link com.pushtorefresh.storio.sqlite.queries.UpdateQuery.Builder} instead of constructor.
Returns timeout of assertion for {@link #awaitNextExpectedValue()}.
Asserts that next expected value was received.
Asserts that all expected values were received.
Checks that new received value is expected.
Checks that behavior of the {@link Observable} is good
Returns true if field executed is set (has been assigned a value) and false otherwise
Returns true if field execute_ms_avg is set (has been assigned a value) and false otherwise
Performs a deep copy on <i>other</i>.
Returns true if field task_start is set (has been assigned a value) and false otherwise
Returns true if field task_end is set (has been assigned a value) and false otherwise
Performs a deep copy on <i>other</i>.
Performs a deep copy on <i>other</i>.
Returns true if field executor_info is set (has been assigned a value) and false otherwise
Performs a deep copy on <i>other</i>.
Performs a deep copy on <i>other</i>.
Performs a deep copy on <i>other</i>.
Performs a deep copy on <i>other</i>.
Performs a deep copy on <i>other</i>.
Returns true if field num_executors is set (has been assigned a value) and false otherwise
Performs a deep copy on <i>other</i>.
Returns true if field initial_status is set (has been assigned a value) and false otherwise
Returns true if field supervisor_id is set (has been assigned a value) and false otherwise
Returns true if field executors is set (has been assigned a value) and false otherwise
Get the integer value of this enum value, as defined in the Thrift IDL.
Find a the enum type by its integer value, as defined in the Thrift IDL.
Gets all the topologies which needs scheduling.
Does the topology need scheduling? A topology needs scheduling if one of the following conditions holds: <ul> <li>Although the topology is assigned slots, but is squeezed. i.e. the topology is assigned less slots than desired.</li> <li>There are unassigned executors in this topology</li> </ul>
Gets a executor -> component-id map which needs scheduling in this topology.
Gets a component-id -> executors map which needs scheduling in this topology.
Get all the used ports of this supervisor.
Return the available ports of this supervisor.
Return all the available slots on this supervisor.
get the unassigned executors of the topology.
Gets the number of workers assigned to this topology.
Assign the slot to the executors for this topology.
Gets all the available slots in the cluster.
Free the specified slot.
free the slots.
Checks the specified slot is occupied.
get the current assignment for the topology.
Get a specific supervisor with the <code>nodeId</code>
Get all the supervisors on the specified <code>host</code>.
Get all the assignments.
Get all the supervisors.
Assign the slot to executors.
Release the slot occupied by this assignment.
Does this slot occupied by this assignment?
Return the executors covered by this assignments
permit() method is invoked for each incoming Thrift request
Constructor based on a JAAS configuration For digest, you should have a pair of user name and password defined.
This method is invoked by SASL for authentication challenges
Construct a JAAS configuration object per storm configuration file
Construct a transport plugin per storm configuration
Get a request context associated with current thread
client address
Set remote subject explicitly
Retrieve client subject associated with this request context
The primary principal associated current subject
request ID of this request
Invoked once immediately after construction
All subclass must implement this method
Get the full name of the user.
We will let Thrift to apply default transport factory
Connect to the specified server via framed transport
Is ThriftServer listening to requests?
Produce a blowfish key to be used in "Storm jar" command
Emits a new tuple to the specified output stream with the given message ID. When Storm detects that this tuple has been fully processed, or has failed to be fully processed, the spout will receive an ack or fail callback respectively with the messageId as long as the messageId was not null. If the messageId was null, Storm will not track the tuple and no callback will be received. The emitted values must be immutable.
Emits a new tuple to the default output stream with the given message ID. When Storm detects that this tuple has been fully processed, or has failed to be fully processed, the spout will receive an ack or fail callback respectively with the messageId as long as the messageId was not null. If the messageId was null, Storm will not track the tuple and no callback will be received. The emitted values must be immutable.
Emits a tuple to the default output stream with a null message id. Storm will not track this message so ack and fail will never be called for this tuple. The emitted values must be immutable.
Emits a tuple to the specified output stream with a null message id. Storm will not track this message so ack and fail will never be called for this tuple. The emitted values must be immutable.
Emits a tuple to the specified task on the specified output stream. This output stream must have been declared as a direct stream, and the specified task must use a direct grouping on this stream to receive the message. The emitted values must be immutable.
Emits a tuple to the specified task on the default output stream. This output stream must have been declared as a direct stream, and the specified task must use a direct grouping on this stream to receive the message. The emitted values must be immutable.
Emits a tuple to the specified task on the specified output stream. This output stream must have been declared as a direct stream, and the specified task must use a direct grouping on this stream to receive the message. The emitted values must be immutable. <p> Because no message id is specified, Storm will not track this message so ack and fail will never be called for this tuple.</p>
Emits a tuple to the specified task on the default output stream. This output stream must have been declared as a direct stream, and the specified task must use a direct grouping on this stream to receive the message. The emitted values must be immutable. <p> Because no message id is specified, Storm will not track this message so ack and fail will never be called for this tuple.</p>
pass in componentToSortedTasks for the case of running tons of tasks in single executor
Emits a new tuple to a specific stream with a single anchor. The emitted values must be immutable.
Emits a new unanchored tuple to the specified stream. Because it's unanchored, if a failure happens downstream, this new tuple won't affect whether any spout tuples are considered failed or not. The emitted values must be immutable.
Emits a new tuple to the default stream anchored on a group of input tuples. The emitted values must be immutable.
Emits a new tuple to the default stream anchored on a single tuple. The emitted values must be immutable.
Emits a new unanchored tuple to the default stream. Beacuse it's unanchored, if a failure happens downstream, this new tuple won't affect whether any spout tuples are considered failed or not. The emitted values must be immutable.
Emits a tuple directly to the specified task id on the specified stream. If the target bolt does not subscribe to this bolt using a direct grouping, the tuple will not be sent. If the specified output stream is not declared as direct, or the target bolt subscribes with a non-direct grouping, an error will occur at runtime. The emitted values must be immutable.
Emits a tuple directly to the specified task id on the specified stream. If the target bolt does not subscribe to this bolt using a direct grouping, the tuple will not be sent. If the specified output stream is not declared as direct, or the target bolt subscribes with a non-direct grouping, an error will occur at runtime. Note that this method does not use anchors, so downstream failures won't affect the failure status of any spout tuples. The emitted values must be immutable.
Emits a tuple directly to the specified task id on the default stream. If the target bolt does not subscribe to this bolt using a direct grouping, the tuple will not be sent. If the specified output stream is not declared as direct, or the target bolt subscribes with a non-direct grouping, an error will occur at runtime. The emitted values must be immutable. <p>The default stream must be declared as direct in the topology definition. See OutputDeclarer#declare for how this is done when defining topologies in Java.</p>
Emits a tuple directly to the specified task id on the default stream. If the target bolt does not subscribe to this bolt using a direct grouping, the tuple will not be sent. If the specified output stream is not declared as direct, or the target bolt subscribes with a non-direct grouping, an error will occur at runtime. The emitted values must be immutable. <p>The default stream must be declared as direct in the topology definition. See OutputDeclarer#declare for how this is done when defining topologies in Java.</p> <p>Note that this method does not use anchors, so downstream failures won't affect the failure status of any spout tuples.</p>
Register a IMetric instance. Storm will then call getValueAndReset on the metric every timeBucketSizeInSecs and the returned value is sent to all metrics consumers. You must call this during IBolt::prepare or ISpout::open.
Convinience method for registering ReducedMetric.
Convinience method for registering CombinedMetric.
Gets all the task ids that are running in this worker process (including the task for this task).
add mock data for the spout.
Returns the position of the specified field.
Returns true if this contains the specified name of the field.
Caches until consumerStarted is called, upon which the cache is flushed to the consumer
returns void if the event should continue, false if the event should not be done
Validates the given field.
Validates a power of 2.
return false if can't increment anymore
return false if can't increment anymore TODO: DRY this code up with what's in ChainedAggregatorImpl
for reporting errors
has the streamid/outputFields of the node it's doing the partitioning on
given processornodes and static state nodes
map from batchgroupid to coordspec
map from stream name to batch id
index and fieldIndex are precomputed, delegates built up over many operations using persistent data structures
Assumes edge contains an index
automatically turn it into a batch spout, should take parameters as to how much to batch
returns null if it's not a drpc group
We will retry connection with exponential back-off policy
# of milliseconds to wait per exponential back-off policy
Enqueue a task message to be sent to server
Take all enqueued messages from queue
gracefully close this client. We will send all existing requests, and then invoke close_n_release() method
close_n_release() is invoked after all messages have been sent.
establish a server with a binding port
establish a connection to a remote server
terminate this context
private constructor
Return a control message per an encoded status code
encode the current Control Message into a channel buffer
try to add a TaskMessage to a batch
Has this batch used up allowed buffer size
true if this batch doesn't have any messages
# of msgs in this batch
create a buffer containing the encoding of this batch
write a TaskMessage into a stream Each TaskMessage is encoded as: task ... short(2) len ... int(4) payload ... byte[]
Each ControlMessage is encoded as: code (<0) ... short(2) Each TaskMessage is encoded as: task (>=0) ... short(2) len ... int(4) payload ... byte[]
enqueue a received message
fetch a message from message queue synchronously (flags != 1) or asynchronously (flags==1)
register a newly created channel
close a channel
close all channels, and release resources
Retrieve a request from message queue, and send to server
Construct a new instance based on the provided {@link Tuple}. <p/> This method expects the object to be ranked in the first field (index 0) of the provided tuple, and the number of occurrences of the object (its count) in the second field (index 1). Any further fields in the tuple will be extracted and tracked, too. These fields can be accessed via {@link RankableObjectWithFields#getFields()}.
Copy constructor.
The returned defensive copy is only "somewhat" defensive.  We do, for instance, return a defensive copy of the enclosing List instance, and we do try to defensively copy any contained Rankable objects, too.  However, the contract of {@link storm.starter.tools.Rankable#copy()} does not guarantee that any Object's embedded within a Rankable will be defensively copied, too.
Removes ranking entries that have a count of zero.
Creates a (defensive) copy of itself.
Return the current (total) counts of all tracked objects, then advance the window. <p/> Whenever this method is called, we consider the counts of the current sliding window to be available to and successfully processed "upstream" (i.e. by the caller). Knowing this we will start counting any subsequent objects within the next "chunk" of the sliding window.
Reset the slot count of any tracked objects to zero for the given slot.
Remove any object from the counter whose total count is zero (to free up memory).
Identical to lookup3, except initval is biased by -(length&lt;&lt;2). This is equivalent to leaving out the length factor in the initial state. {@code lookup3ycs(k, offset, length, initval) == lookup3(k,offset,length,initval-(length<<2))} and {@code lookup3ycs(k, offset, length, initval+(length<<2)) == lookup3(k,offset,length,initval)}
Generates 64 bit hash from byte array with default seed value.
Generates 64 bit hash from byte array of the given length and seed.
Computes the position of the first set bit of the last Long.SIZE-k bits
Merges estimators to produce an estimator for their combined streams
<p> For cardinalities less than 4.25M, obyCount provides a LinearCounting Builder (see LinearCounting.Builder.onePercentError() ) using only the space required to provide estimates within 1% of the actual cardinality, up to ~65k. </p> <p> For cardinalities greater than 4.25M, an AdaptiveCounting builder is returned that allocates ~65KB and provides estimates with a Gaussian error distribution with an average error of 0.5% and a standard deviation of 0.5% </p>
Default constructor Exact counts up to 1000, estimation done with default Builder
Deserialization constructor
Switch from exact counting to estimation
Create a new HyperLogLog instance using the specified standard deviation.
Create a new HyperLogLog instance.  The log2m parameter defines the accuracy of the counter.  The larger the log2m the better the accuracy. <p/> accuracy = 1.04/sqrt(2^log2m)
Add all the elements of the other set to this set. <p/> This operation does not imply a loss of precision.
required for Externalizable
This constructor is private to prevent behavior change for ambiguous usages. (Legacy support).
This constructor disables the sparse set.  If the counter is likely to exceed the sparse set thresholds than using this constructor will help avoid the breached.
Basic constructor for creating a instance that supports sparse and normal representations. The values of {@code p} and {@code sp} define the precision of the Normal and Sparse set representations for the data structure.  {@code p} must be a value between 4 and {@code sp} and {@code sp} must be less than 32.
Constructor to support instances serialized with the legacy sparse encoding scheme.
for constructing a sparse mode hllp
for constructing a normal mode hllp
Converts the mode of this estimator from 'sparse' to 'normal'. <p/> Each member of the set has its longer 'sparse precision (sp)' length idx truncated to length p and the associated run length is placed into a register. Collisions are resolved by merely taking the max.
Encode the sp length idx and, if necessary, the run length. <p/> Start with the 64 bit hash as x. <p/> Find all the bits that belong in the first sp (roughly 25) bits. (This is idx') Get rid of the first p (roughly 18) bits of those. (Those were idx (not prime)) <p/> If all the remaining bits are zero then we are going to need to find and encode the full run length of leading zeros, but this only happens once in 2 ^ (sp - p) or roughly 2 ^ 7 times. <p/> If at least one of them is not zero, then since the run length is determined by bits after p and the idx' contains the first (sp - p) bits of those, then just by putting idx' in the encoding, we will also be giving it all the information it needs to find the run length. <p/> The relationship looks like this: <p/> *******************************************************   <- hashed length of bits | p bits = idx ||     look for leading zeros here     | |      sp bits = idx'     | | all 0s? | <p/> If we have idx', we could theoretically scan it (as per zeroTest) when unencoding and therefore know whether to look for the extra run length information. However, for now we have followed the authors of the paper and put this information in a flag bit at the end of the encoding. <p/> Based on this flag, we know whether to adjust for the missing run length bits. We could also use this flag to compress all the zeros in "| all 0s? |", but saving a byte or so once in 128 times is less than the 120 bits spent on the flag elsewhere. Of course, after compression, the losses are not quite so large either way. <p/> The encoding scheme now looks like: <p/> ********************************* <- smaller length of bits (half, but not to scale) | empty ||       sp bits     ||F| |  p bits  || has 1 ||0| <p/> <p/> or if the run length was needed (ie 'all 0s?' was indeed all 0s): <p/> |      sp bits    || run len ||F| |  p bits ||  0s  |           |1| <p/> <p/> The other notable encoding feature is the inversion of the run length, which just lets the lists be sorted in a convenient way. (Could alternatively sort in reverse, and use descending deltas).
More of less the opposite of the encoding function but just for getting out run lengths.
Get the idx' from an encoding.
Returns the idx from an encoding (note this is idx and not idx prime).
Batch merges the sparse set with the temporary list. Usually called when the temporary list fills up, but may also be needed when suddenly converting to normal or producing a cardinality estimate. <p/> It works very similarly to the merge part of merge sort with some key differences: We don't care about the kind of order the idxs appear in, only that they are in SOME order. This is because we only need to be sure that we detect when they are the same. So if idx: '001' appears first and idx: '002' appears last, that is fine as long as that behavior is the same for both lists. <p/> We do not allow duplicate entries (we are making a set after all), and collisions are resolved by run length. However, most of the time the run length will be the same if two idx' are the same. Only in the 1 in ~128 chance case of 'all 0s?' will they differ. Because the rest of the encoding is the same we can do comparisons without extracting the run length and because of our earlier inversion trick, the highest run length duplicates will appear first. So we take those and ignore any that follow with the same idx'.
Eats up the inferior duplicates from the temp list
Merge this HLL++ instance with another! The power of friends! This works very similarly to the merge with temp list function. However, in this case, both lists will need their own delta decoding and neither will have to worry about consuming duplicates.
Script-esque function that handles preparing to and executing merging the sparse set and the temp list. Set up the delta encoding, sort the temp list, merge the lists, blow up the temp list. The temp set grows in size at a rate proportional to the current size of the sparse set. The size ratio of the temp set to the sparse set is determined by {@link #SPARSE_SET_TEMP_SET_RATIO}. The temp set will not grow unless it is currently smaller by 1/2 of the target size.
Add all the elements of the other set to this set. <p/> If possible, the sparse mode is protected. A switch to the normal mode is triggered only if the resulting set exceed the threshold. <p/> This operation does not imply a loss of precision.
For debug purposes
Returns a LinearCounting.Builder that generates an LC estimator which keeps estimates below 1% error on average and has a low likelihood of saturation (0.7%) for any stream with cardinality less than maxCardinality
Builds Linear Counter with arbitrary standard error and maximum expected cardinality. <p/> This method is more compute intensive than {@link #onePercentError(int)} as it is perform solving precision inequality in runtime. Therefore, {@link #onePercentError(int)} should be used whenever possible.
Runs binary search to find minimum bit mask length that holds precision inequality.
Computes the position of the first set bit of the last Integer.SIZE-k bits
Merges count min sketches to produce a count min sketch for their combined streams
Given the number of buckets that can be used per element, return the optimal number of hash functions in order to minimize the false positive rate.
Given a maximum tolerable false positive probability, compute a Bloom specification which will give less than the specified false positive rate, but minimize the number of buckets per element and the number of hash functions used.  Because bandwidth (and therefore total bitvector size) is considered more expensive than computing power, preference is given to minimizing buckets per element rather than number of hash functions. less than specified by the function call.
Calculate the probability of a false positive given the specified number of inserted elements.
This version is only used by the deserializer.
Returns the length of the input.
Returns the current contents of the buffer. Data is only valid to {@link #getLength()}.
Returns the length of the valid data currently in the buffer.
Murmur is faster than an SHA-based approach and provides as-good collision resistance.  The combinatorial generation approach described in does prove to work in actual tests, and is obviously faster than performing further iterations of murmur.
Iteratres through all groups in the tree.
Iterates through all of the Groups in this tree in ascending order of means specified Group.
Restore P2 at node and upward the spine. Note that P2 can vanish at some nodes sideways as a result of this. We'll fix that later in compressFully when needed.
Restore P2 at seedNode and guarantee that no new violations of P2 appeared.
For debugging purposes.
A histogram structure that will record a sketch of a distribution.
Adds a sample to a histogram.
Returns the number of samples represented in this histogram.  If you want to know how many centroids are being used, try centroids().size().
Sets up so that all centroids will record all data assigned to them.  For testing only, really.
Returns an upper bound on the number bytes that will be required to represent this histogram.
Returns an upper bound on the number of bytes that will be required to represent this histogram in the tighter representation.
Outputs a histogram as bytes using a particularly cheesy encoding.
Reads a histogram from a byte buffer
Retrieve top k items
For de-serialization
This method might be better described as "byte array to int array" or "data input to int array"
Append to head of list
Prepend to tail of list
Encodes a value using the variable-length encoding from Google Protocol Buffers</a>. It uses zig-zag encoding to efficiently encode signed values. If values are known to be nonnegative, {@link #writeUnsignedVarLong(long, DataOutput)} should be used.
Encodes a value using the variable-length encoding from Google Protocol Buffers</a>. Zig-zag is not used, so input must not be negative. If values can be negative, use {@link #writeSignedVarLong(long, DataOutput)} instead. This method treats negative input as like a large unsigned value.
<p/> This one does not use streams and is much faster. Makes a single object each time, and that object is a primitive array.
test that the hash of the UTF-16 encoded Java String is equal to the hash of the unicode code points
run with -mx1G
Builds estimates of the CDF of a bunch of data points and checks that the centroids are accurately positioned.  Accuracy is assessed in terms of the estimated CDF which is much more stringent than checking position of quantiles with a single value for desired accuracy.
<p>{@code RandomStringUtils} instances should NOT be constructed in standard programming. Instead, the class should be used as {@code RandomStringUtils.random(5);}.</p> <p/> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
<p>Creates a random string whose length is the number of characters specified.</p> <p/> <p>Characters will be chosen from the set of all characters.</p>
<p>Creates a random string whose length is the number of characters specified.</p> <p/> <p>Characters will be chosen from the set of characters whose ASCII value is between {@code 32} and {@code 126} (inclusive).</p>
<p>Creates a random string whose length is the number of characters specified.</p> <p/> <p>Characters will be chosen from the set of alphabetic characters.</p>
<p>Creates a random string whose length is the number of characters specified.</p> <p/> <p>Characters will be chosen from the set of alpha-numeric characters.</p>
<p>Creates a random string whose length is the number of characters specified.</p> <p/> <p>Characters will be chosen from the set of numeric characters.</p>
<p>Creates a random string whose length is the number of characters specified.</p> <p/> <p>Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.</p>
<p>Creates a random string based on a variety of options, using default source of randomness.</p> <p/> <p>This method has exactly the same semantics as {@link #random(int, int, int, boolean, boolean, char[], Random)}, but instead of using an externally supplied source of randomness, it uses the internal static {@link Random} instance.</p>
<p>Creates a random string based on a variety of options, using supplied source of randomness.</p> <p/> <p>If start and end are both {@code 0}, start and end are set to {@code ' '} and {@code 'z'}, the ASCII printable characters, will be used, unless letters and numbers are both {@code false}, in which case, start and end are set to {@code 0} and {@code Integer.MAX_VALUE}. <p/> <p>If set is not {@code null}, characters between start and end are chosen.</p> <p/> <p>This method accepts a user-supplied {@link Random} instance to use as a source of randomness. By seeding a single {@link Random} instance with a fixed seed and using it for each call, the same random sequence of strings can be generated repeatedly and predictably.</p>
<p>Creates a random string whose length is the number of characters specified.</p> <p/> <p>Characters will be chosen from the set of characters specified by the string, must not be empty. If null, the set of all characters is used.</p>
<p>Creates a random string whose length is the number of characters specified.</p> <p/> <p>Characters will be chosen from the set of characters specified.</p>
Most of the styling has been kept in styles.xml and made accessible though attributes defined in attrs.xml. For this reason, the sample app has to rely on 'getTheme().applyStyle(....)' when 'cbShowExtendedBg' & 'cbShowSingleMonthPerPosition' are checked/unchecked. In practical usage, this will not be required since the options that are set inside this method will already be defined in xml. You can skip reading into this method and the styles it makes use of.
Validates & returns SublimePicker options
Re-evaluates the state based on checked/unchecked options - toggles visibility of RadioButtons based on activated/deactivated pickers - updates TextView labels accordingly. This is also a sample app only method & can be skipped.
Show date, time & recurrence options that have been selected
Applies a StyleSpan to the supplied text
You can also override 'formatDate(Date)' & 'formatTime(Date)' to supply custom formatters.
Set activity callback
Initializes state for this layout
Updates 'ButtonBarBgDrawable' when the picker is switched. This is required because 'SublimeDatePicker' and 'SublimeTimePicker' have different header-partition widths.
Returns whether switcher button is being used in this layout
Used when the pickers are switched
Disables the positive button as and when the user selected options become invalid.
Sets the currently selected date to the specified timestamp. Jumps immediately to the new date. To animate to the new date, use {@link #setDate(long, boolean, boolean)}.
Handles changes to date range.
Sets the listener to call when the user selects a day.
Sets all the required fields for the list view. Override this method to set a different list view behavior.
This moves to the specified time in the view. If the time is not already in range it will move the list so that the first of the month containing the time is at the top of the view. If the new time is already in view the list will not be scrolled unless forceScroll is true. This time may optionally be highlighted as selected as well.
Sets the month displayed at the top of this view based on time. Override to add custom events when the title is changed.
Gets the position of the view that is most prominently displayed within the list view.
Attempts to return the date that has accessibility focus. has focus.
Attempts to restore accessibility focus to a given date. No-op if {@code day} is {@code null}.
Updates the selected day and related parameters.
Sets up the text and style properties for painting.
Sets all the parameters for displaying this week. Parameters have a default value and will only update if a new value is included, except for focus month, which will always default to no focus month if no value is passed in. The only required parameter is the week start.
Draws the month days.
Calculates the day that the given x position is in, accounting for week number. Returns the day or -1 if the position wasn't in a day.
Called when the user clicks on a day. Handles callbacks to the {@link OnDayClickListener} if one is set.
has focus
Clears accessibility focus within the view. No-op if the view does not contain accessibility focus.
Attempts to restore accessibility focus to the specified date. {@code true} if the date received focus
Calculates the bounding rectangle of a given time object.
Generates a description for a given time object. Since this description will be spoken, the components are ordered by descending specificity as DAY MONTH YEAR.
Compute the array representing the order of Month / Day / Year views in their layout. Will be used for I18N purpose as the order of them depends on the Locale.
Update scroll position - this is needed when the datepicker is initialized in 'View.GONE' visibility state TODO: needs some work. Depending on 'mCurrentView', the other picker does not hold its position
If the newly selected month / year does not contain the currently selected day number, change the selected day number to the last day of the selected month or year.
Constructor called from {@link DatePicker#onSaveInstanceState()}
suppress unused and hiding
Updates this drawable's drawn portion based on the supplied Picker. Valid candidates for the supplied Picker are {SublimeDatePicker, SublimeTimePicker}.
initialize dimensions
Called when 'WeekButton' checked state changes
Set state without animation
Animate between 'on' & 'off' state
Constructs a RectEvaluator that modifies and returns <code>reuseRect</code> in #evaluate(float, android.graphics.RectF, android.graphics.Rect) calls. The value returned from #evaluate(float, android.graphics.RectF, android.graphics.Rect) should not be cached because it will change over time as the object is reused on each call.
Use 'LayoutTransition'
Set the Picker that will be shown when 'SublimePicker' is displayed
Activate pickers
Provide initial date parameters
Set date range Pass '-1L' for 'minDate'/'maxDate' for default
Provide initial time parameters
Provide initial Recurrence-rule
Verifies if the supplied options are valid
Gets a calendar for locale bootstrapped with the value of a given calendar.
Converts one of the Calendar.SUNDAY constants to the SU, MO, etc. constants.  btw, I think we should switch to those here too, to get rid of this function, if possible.
Converts one of the SU, MO, etc. constants to the Calendar.SUNDAY constants.  btw, I think we should switch to those here too, to get rid of this function, if possible.
Converts one of the internal day constants (SU, MO, etc.) to the two-letter string representing that constant.
Determines whether this rule specifies a simple monthly rule by weekday, such as "FREQ=MONTHLY;BYDAY=3TU" (the 3rd Tuesday of every month). Negative days, e.g. "FREQ=MONTHLY;BYDAY=-1TU" (the last Tuesday of every month), will cause "false" to be returned. Rules that fire every week, such as "FREQ=MONTHLY;BYDAY=TU" (every Tuesday of every month) will cause "false" to be returned.  (Note these are usually expressed as WEEKLY rules, and hence are uncommon.)
Determines whether two integer arrays contain identical elements. The native implementation over-allocated the arrays (and may have stuff left over from a previous run), so we can't just check the arrays -- the separately-maintained count field also matters.  We assume that a null array will have a count of zero, and that the array can hold as many elements as the associated count indicates. TODO: replace this with Arrays.equals() when the old parser goes away.
Resets parser-modified fields to their initial state.  Does not alter startDate. The original parser always set all of the "count" fields, "wkst", and "until", essentially allowing the same object to be used multiple times by calling parse(). It's unclear whether this behavior was intentional.  For now, be paranoid and preserve the existing behavior by resetting the fields. We don't need to touch the integer arrays; they will either be ignored or overwritten.  The "startDate" field is not set by the parser, so we ignore it here.
Parses an rfc2445 recurrence rule string into its component pieces.  Attempting to parse malformed input will result in an EventRecurrence.InvalidFormatException.
Parses an integer, with range-checking.
Parses a comma-separated list of integers, with range-checking.
parses [int]weekday, putting the pieces into parallel array entries
Converts day of week to a String.
Converts EventRecurrence's day of week to DateUtil's day of week.
TODO don't lose data when getting data that our UI can't handle
Initialize UI
TODO Test and update for Right-to-Left
Update the "Repeat for N events" end option with the proper string values based on the value that has been entered for N.
Called by SublimePicker to initialize state & provide callback
Controls the visibility of recurrence options menu & recurrence option creator
Utility for creating API-specific bg drawables
Constructor called from {@link SublimeRecurrencePicker#onSaveInstanceState()}
Syncs state
Wrapper for 'setChecked(boolean)' that does not trigger state-animation
State-dependent text-colors
Sets the current hour in 24-hour time.
Sets the current hour.
Returns the current hour in 24-hour time.
Returns minutes in 0-59 range
Draw the 12 text values at the positions specified by the textGrid parameters.
Set whether in keyboard mode or not.
Propagate the time change
The time separator is defined in the Unicode CLDR and cannot be supposed to be ":". <p/> <p/> We pass the correct "skeleton" depending on 12 or 24 hours view and then extract the separator as the character which is just after the hour marker in the returned pattern.
Try to start keyboard mode with the specified key.
Get the currently-entered time, as integer values of the hours and minutes typed. minutes, and the third will be either AM or PM.
Get first day of week as android.text.format.Time constant.
Get first day of week as java.util.Calendar constant.
Converts the day of the week from android.text.format.Time to java.util.Calendar
Returns material styled button bg
Button bg for API version < Lollipop
Base button shape
Drawable for icons in 'ButtonLayout'
Icon bg for API versions < Lollipop
Base icon bg shape
Creates a drawable with the supplied color and corner radii
Listener for recurrence picker
Handle ok, cancel & switch button click events
Called before 'RecurrencePicker' is shown
'mHiddenPicker' retains the Picker that was active before 'RecurrencePicker' was shown. On its dismissal, we have an option to show either 'DatePicker' or 'TimePicker'. 'mHiddenPicker' helps identify the correct option.
Constructor called from {@link SublimePicker#onSaveInstanceState()}
Grabs the database version from the manifest.
Grabs the domain name of the model classes from the manifest.
Grabs the name of the database file specified in the manifest.
Grabs the debug flag from the manifest.
get all the dex path
get all the classes name in "classes.dex", "classes2.dex", ....
Converts a given CamelCasedString to UPPER_CASE_UNDER_SCORE.
Maps a Java Field object to the database's column name.
Maps a Java Class to the name of the class.
Per issue #106 on Github, this method won't be called in any real Android device. This method is used purely in emulated process environments such as an emulator or Robolectric Android mock.
Helper method that asserts a CamelCaseString is converted to UPPER_CASE_UNDER_SCORE.
Set the adapter to the listview Automativally hide the progressbar Set the refresh to false If adapter is empty, then the emptyview is shown
Show the progressbar
Hide the progressbar and show the listview
Set the listener when refresh is triggered and enable the SwipeRefreshLayout
Set the colors for the SwipeRefreshLayout states
Hide the progressbar
Hide the listview
Set the scroll listener for the listview
Set the onItemClickListener for the listview
Sets the More listener
Enable/Disable the More event
Remove the moreListener
Enables or disables (pauses or resumes) watching for swipe-to-dismiss gestures.
Returns an {@link AbsListView.OnScrollListener} to be added to the {@link ListView} using {@link ListView#setOnScrollListener(AbsListView.OnScrollListener)}. If a scroll listener is already assigned, the caller should still pass scroll changes through to this listener. This will ensure that this {@link SwipeDismissListViewTouchListener} is paused during list view scrolling.</p>
Constructs a new swipe-to-dismiss touch listener for the given list view.
Returns an {@link android.widget.AbsListView.OnScrollListener} to be added to the {@link android.widget.ListView} using {@link android.widget.ListView#setOnScrollListener(android.widget.AbsListView.OnScrollListener)}. If a scroll listener is already assigned, the caller should still pass scroll changes through to this listener. This will ensure that this {@link SwipeDismissRecyclerViewTouchListener} is paused during list view scrolling.</p>
bind a view with a specific {@link SwipeLayout.OnRevealListener}
bind multiple views with an {@link SwipeLayout.OnRevealListener}.
the dispatchRevealEvent method may not always get accurate position, it makes the view may not always get the event when the view is totally show( fraction = 1), so , we need to calculate every time.
prevent bottom view get any touch event. Especially in LayDown mode.
if the ViewGroup children want to handle this event.
if the view (v) wants to handle this event.
if working in {@link android.widget.AdapterView}, we should response {@link android.widget.Adapter} isEnable(int position).
set the drag distance, it will force set the bottom view's width or height via this value.
There are 2 diffirent show mode. {@link SwipeLayout.ShowMode}.PullOut and {@link SwipeLayout.ShowMode}.LayDown.
get the open status. Open , Close or Middle.
Process the surface release event.
process bottom (PullOut mode) hand release event.
process bottom (LayDown mode) hand release event.
smoothly open surface.
smoothly close surface.
close surface
a helper function to compute the Rect area that surface will hold in.
Implement this method to customize the AbsListView
Set the layout manager to the recycler
Set the adapter to the recycler Automatically hide the progressbar Set the refresh to false If adapter is empty, then the emptyview is shown
Remove the adapter from the recycler
Hide the progressbar and show the recycler
Set the colors for the SwipeRefreshLayout states
Hide the recycler
Set the scroll listener for the recycler
Add the onItemTouchListener for the recycler
Remove the onItemTouchListener for the recycler
Creates a new ToolTip without any values.
Set the text to show. Has no effect when a content View is set using setContentView().
Set the text resource id to show. Has no effect when a content View is set using setContentView().
Set the text resource id to show and the custom typeface for that view. Has no effect when a content View is set using setContentView().
Set the color of the ToolTip. Default is white.
Set the text color of the ToolTip. Default is white.
Set a custom content View for the ToolTip. This will cause any text that has been set to be ignored.
Set the animation type for the ToolTip. Defaults to {@link AnimationType#FROM_MASTER_VIEW}.
Set to show a shadow below the ToolTip.
Set to NOT show a shadow below the ToolTip.
Shows a {@link ToolTipView} based on given {@link ToolTip} at the proper location relative to given {@link View}.
**EXPERIMENTAL**</p> Shows a {@link ToolTipView} based on given {@link ToolTip} at the proper location relative to the {@link View} with given resource id.</p>NOTE: This method will throw a {@link ViewNotFoundRuntimeException} if the View is not found. You can choose to ignore this by catching the ViewNotFoundRuntimeException.
Get and set
"De-parcel object
"De-parcel object
Handle user click
Low pass filter
Return the amount the svg and the png differ, from 0 -> 1. Because of differences in anti-aliasing and so on some pixels will differ between png sample svg.
Steps the animation
Sets the zoom information for this android drawer, which will also reset the drift animation.
Sets the width of the screen (which will not be the same as the width of the wallpaper).
Create a new android drawer.
Sets the background color by component.
Sets the background color as a packed int. Note that the alpha channel is ignored.
Convenience method to get a Picture object from an SVG.
Sets a new android config.
Runs an animation on this android.
Gets an animation by type.
Removes an animation by type.
Constructs an arm path based on the arm scaling information in both the X and Y dimensions.
Gets the current antenna angle from the ambient antennae animation object.
Computes new scaling information based on changes to the android's dimensions, assets or zoom information.
Advance the animations one frame.
Actually draw the android to a canvas.
Set the dimensions for this drawer (used when rescaling).
Start a random animation to the android.
Make the anroid shrug.
Make the anroid nod.
Make the anroid tilt its head.
Make the anroid twitch its antennae.
Make the anroid blink.
Make the android wave.
Construct a new asset database.
Scans and builds lists of all available assets, by type.
Builds up a list of accessories.
Load a list of assets of a type.
Loads an SVG file for a given asset.
Loads an SVG file for a given resource.
Returns a list of all accessory assets.
Loads the SVG for an accessory.
Creates a random android configuration.
Create a new key frame interpolator with the specified starting and stopping points.
Add a key frame to this interpolator. Add them in chronological order!
Gesture detector to detect single taps.
Gets a randomly-generated android.
Gets a random background color, ensuring it isn't the same as the last color.
Draw one frame of the animation. This method gets called repeatedly by posting a delayed Runnable. You can do any drawing you want in here. This example draws a wireframe cube.
Posts a draw event to the handler.
Specify the zoom information.
Starts a default left exit animation.
Starts a default right exit animation.
When the object rotates it's width becomes bigger. The maximum width is at 45 degrees. <p/> The below method calculates the width offset of the rotation.
Performs a linear regression on the data points <tt>(y[i], x[i])</tt>.
Returns the <em>y</em>-intercept &alpha; of the best of the best-fit line <em>y</em> = &alpha; + &beta; <em>x</em>.
Returns the slope &beta; of the best of the best-fit line <em>y</em> = &alpha; + &beta; <em>x</em>.
Returns the coefficient of determination <em>R</em><sup>2</sup>.
Returns the standard error of the estimate for the intercept.
Returns the standard error of the estimate for the slope.
Returns the expected response <tt>y</tt> given the value of the predictor
Returns a string representation of the simple linear regression model. including the best-fit line and the coefficient of determination <em>R</em><sup>2</sup>
A shortcut method to set both the listeners and the adapter.
Set the top view and add the fling listener
Our animation depend on type of current work of refreshing. We should to do different things when it's end of refreshing
Draw wind on loading animation
We need a special value for different part of animation
On drawing we should check current part of animation
Get part of animation duration
Sets up a cheat sheet (tooltip) for the given view by setting its {@link View.OnLongClickListener}. When the view is long-pressed, a {@link Toast} with the view's {@link View#getContentDescription() content description} will be shown either above (default) or below the view (if there isn't room above it).
Sets up a cheat sheet (tooltip) for the given view by setting its {@link View.OnLongClickListener}. When the view is long-pressed, a {@link Toast} with the given text will be shown either above (default) or below the view (if there isn't room above it).
Removes the cheat sheet for the given view by removing the view's {@link View.OnLongClickListener}.
Internal helper method to show the cheat sheet toast.
validate incoming line/ring values, != 0 is bad
check+update line byte incoming status
check+update line byte outgoing status
Generates a hash code for a string. This function uses the ELF hashing algorithm as reprinted in Andrew Binstock, "Hashing Rehashed," Dr. Dobb's Journal, April 1996.
does the set work, used by xht_set and xht_store
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
Creates the default factory implementation. <!-- begin-user-doc --> <!-- end-user-doc -->
Creates an instance of the factory. <!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
Creates an instance of the model <b>Package</b>, registered with {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package package URI value. <p>Note: the correct way to create the package is via the static factory method {@link #init init()}, which also performs initialization of the package, or returns the registered package, if one already exists. <!-- begin-user-doc --> <!-- end-user-doc -->
Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends. <p>This method is used to initialize {@link JsonPackage#eINSTANCE} when that field is accessed. Clients should not invoke it directly. Instead, they should simply access that field to obtain the package. <!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
Creates the meta-model objects for the package.  This method is guarded to have no affect on any invocation but its first. <!-- begin-user-doc --> <!-- end-user-doc -->
Complete the initialization of the package and its meta-model.  This method is guarded to have no affect on any invocation but its first. <!-- begin-user-doc --> <!-- end-user-doc -->
Initializes the annotations for <b>JsonMetadata</b>. <!-- begin-user-doc --> <!-- end-user-doc -->
Creates an instance of the adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
Creates a new adapter for an object of class '{@link java.util.Map.Entry <em>EString To Any Simple Type Map</em>}'. <!-- begin-user-doc --> This default implementation returns null so that we can easily ignore cases; it's useful to ignore a case when inheritance will catch all the cases anyway. <!-- end-user-doc -->
Creates a new adapter for an object of class '{@link org.eclipse.emf.json.model.JsObject <em>Js Object</em>}'. <!-- begin-user-doc --> This default implementation returns null so that we can easily ignore cases; it's useful to ignore a case when inheritance will catch all the cases anyway. <!-- end-user-doc -->
Creates a new adapter for the default case. <!-- begin-user-doc --> This default implementation returns null. <!-- end-user-doc -->
Creates an instance of the switch. <!-- begin-user-doc --> <!-- end-user-doc -->
Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result. <!-- begin-user-doc --> <!-- end-user-doc -->
Returns the result of interpreting the object as an instance of '<em>EString To Any Simple Type Map</em>'. <!-- begin-user-doc --> This implementation returns null; returning a non-null result will terminate the switch. <!-- end-user-doc -->
Returns the result of interpreting the object as an instance of '<em>Js Object</em>'. <!-- begin-user-doc --> This implementation returns null; returning a non-null result will terminate the switch. <!-- end-user-doc -->
Returns the result of interpreting the object as an instance of '<em>EObject</em>'. <!-- begin-user-doc --> This implementation returns null; returning a non-null result will terminate the switch, but this is the last case anyway. <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
Creates an instance of the factory. <!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
Creates an instance of the model <b>Package</b>, registered with {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package package URI value. <p>Note: the correct way to create the package is via the static factory method {@link #init init()}, which also performs initialization of the package, or returns the registered package, if one already exists. <!-- begin-user-doc --> <!-- end-user-doc -->
Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends. <p>This method is used to initialize {@link TelehashPackage#eINSTANCE} when that field is accessed. Clients should not invoke it directly. Instead, they should simply access that field to obtain the package. <!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
<!-- begin-user-doc --> <!-- end-user-doc -->
Creates an instance of the adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
The switch that delegates to the <code>createXXX</code> methods. <!-- begin-user-doc --> <!-- end-user-doc -->
Creates a new adapter for an object of class '{@link org.telehash.model.Telex <em>Telex</em>}'. <!-- begin-user-doc --> This default implementation returns null so that we can easily ignore cases; it's useful to ignore a case when inheritance will catch all the cases anyway. <!-- end-user-doc -->
Creates a new adapter for an object of class '{@link org.telehash.model.TapRule <em>Tap Rule</em>}'. <!-- begin-user-doc --> This default implementation returns null so that we can easily ignore cases; it's useful to ignore a case when inheritance will catch all the cases anyway. <!-- end-user-doc -->
Creates a new adapter for an object of class '{@link org.telehash.model.Line <em>Line</em>}'. <!-- begin-user-doc --> This default implementation returns null so that we can easily ignore cases; it's useful to ignore a case when inheritance will catch all the cases anyway. <!-- end-user-doc -->
Creates an instance of the switch. <!-- begin-user-doc --> <!-- end-user-doc -->
Returns the result of interpreting the object as an instance of '<em>Telex</em>'. <!-- begin-user-doc --> This implementation returns null; returning a non-null result will terminate the switch. <!-- end-user-doc -->
Returns the result of interpreting the object as an instance of '<em>Tap Rule</em>'. <!-- begin-user-doc --> This implementation returns null; returning a non-null result will terminate the switch. <!-- end-user-doc -->
Returns the result of interpreting the object as an instance of '<em>Line</em>'. <!-- begin-user-doc --> This implementation returns null; returning a non-null result will terminate the switch. <!-- end-user-doc -->
Calculate the first different bit position between two hashes.
Check a line's status. True if open, false if ringing.
Update status of all lines, removing stale ones.
Rigourous Test :-)
Test stuff in the JSON that isn't mapped
Whether methods on this class/method are enabled.
Whether methods on this class/method are enabled.
Whether methods on this class/method are enabled.
Whether methods on this class/method are enabled.
Whether methods on this class/method are enabled.
Whether methods on this class/method are enabled.
Whether methods on this class/method are enabled.
Whether methods on this class/method are enabled.
Whether methods on this class/method are enabled.
Whether methods on this class/method are enabled.
If true, the annotated method will be run after the test class is instantiated and before the test method is invoked.
Whether methods on this class/method are enabled.
The name of this DataProvider.
Whether methods on this class/method are enabled.
The maximum number of milliseconds this test should take. If it hasn't returned after this time, it will be marked as a FAIL.
Delegation method for creating the list of <CODE>ITestMethod</CODE>s to be analysed.
but without its class
Find the value of an annotation, starting with the annotation found on the method, then the class and then parent classes until we either find a non-default value or we reach the top of the hierarchy (Object).
Find the value of a String[] annotation. The difference with the findInherited method above is that TestNG aggregates String[] values across hierarchies. For example, of the method annotation has { "a", "b" } and the class has { "c" }, the returned value will be { "a", "b", "c" }.
Creates a new invoker instance which can be used to call the specified {@code listenerMethod} on any number of {@link IInvokedMethodListener}s.
Asserts that two object arrays are equal. If they are not, an {@link AssertionError} is thrown with the given message. If <code>expecteds</code> and <code>actuals</code> are <code>null</code>, they are considered equal.
Asserts that two object arrays are equal. If they are not, an {@link AssertionError} is thrown. If <code>expected</code> and <code>actual</code> are <code>null</code>, they are considered equal.
Asserts that two byte arrays are equal. If they are not, an {@link AssertionError} is thrown with the given message.
Asserts that two byte arrays are equal. If they are not, an {@link AssertionError} is thrown.
Asserts that two char arrays are equal. If they are not, an {@link AssertionError} is thrown with the given message.
Asserts that two char arrays are equal. If they are not, an {@link AssertionError} is thrown.
Asserts that two short arrays are equal. If they are not, an {@link AssertionError} is thrown with the given message.
Asserts that two short arrays are equal. If they are not, an {@link AssertionError} is thrown.
Asserts that two int arrays are equal. If they are not, an {@link AssertionError} is thrown with the given message.
Asserts that two int arrays are equal. If they are not, an {@link AssertionError} is thrown.
Asserts that two long arrays are equal. If they are not, an {@link AssertionError} is thrown with the given message.
Asserts that two long arrays are equal. If they are not, an {@link AssertionError} is thrown.
Asserts that two double arrays are equal. If they are not, an {@link AssertionError} is thrown with the given message.
Asserts that two double arrays are equal. If they are not, an {@link AssertionError} is thrown.
Asserts that two float arrays are equal. If they are not, an {@link AssertionError} is thrown with the given message.
Asserts that two float arrays are equal. If they are not, an {@link AssertionError} is thrown.
Asserts that two object arrays are equal. If they are not, an {@link AssertionError} is thrown with the given message. If <code>expecteds</code> and <code>actuals</code> are <code>null</code>, they are considered equal.
Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's dimension that was not equal
Asserts that two arrays are equal, according to the criteria defined by the concrete subclass. If they are not, an {@link AssertionError} is thrown with the given message. If <code>expecteds</code> and <code>actuals</code> are <code>null</code>, they are considered equal.
Create one worker per node and execute them.
Parallel execution of the <code>tasks</code>. The startup is synchronized so this method emulates a load test.
Returns a readable name of the current executing thread.
already treated this class.
Constructs a <code>BaseTestMethod</code> TODO cquezel JavaDoc.
TODO cquezel JavaDoc.
Compares two ITestNGMethod by date.
Add a class loader to the searchable loaders.
Hide constructor.
Tries to load the specified class using the context ClassLoader or if none, than from the default ClassLoader. This method differs from the standard class loading methods in that it does not throw an exception if the class is not found but returns null instead.
For the given class, returns the method annotated with &#64;Factory or null if none is found. This method does not search up the superclass hierarchy. If more than one method is @Factory annotated, a TestNGException is thrown.
Extract all callable methods of a class and all its super (keeping in mind the Java access rules).
Create an instance for the given class.
Class.getEnclosingClass() only exists on JDK5, so reimplementing it here.
Find the best constructor given the parameters found on the annotation
Returns the Class object corresponding to the given name. The name may be of the following form: <ul> <li>A class name: "org.testng.TestNG"</li> <li>A class file name: "/testng/src/org/testng/TestNG.class"</li> <li>A class source name: "d:\testng\src\org\testng\TestNG.java"</li> </ul>
This method is used to figure out when is the right time to invoke afterGroups methods.
Define a comparator for the nodes of this graph, which will be used to order the free nodes when they are asked.
Add a node to the graph.
Add an edge between two nodes.
Set the status for a set of nodes.
Set the status for a node.
expected exceptions
in one of the valid sorts.
Remove a node from a list of nodes and update the list of predecessors for all the remaining nodes.
Marks the current <code>TestResult</code> as skipped and invokes the listeners.
Is the <code>IConfiguration</code> marked as alwaysRun.
Record internally the failure of a Configuration, so that we can determine later if @Test should be skipped.
method or false if at least one of these methods failed.
Creates a token for tracking a unique invocation of a method on an instance. Is used when configFailurePolicy=continue.
Effectively invokes a configuration method on all passed in instances. TODO: Should change this method to be more like invokeMethod() so that we can handle calls to {@code IInvokedMethodListener} better.
pass both paramValues and paramIndex to be thread safe in case parallel=true + dataprovider.
The array of methods contains @BeforeMethods if isBefore if true, @AfterMethods otherwise.  This function removes all the methods that should not be run at this point because they are either firstTimeOnly or lastTimeOnly and we haven't reached the current invocationCount yet
invokeTestMethods() eventually converge here to invoke a single @Test method. <p/> This method is responsible for actually invoking the method. It decides if the invocation must be done: <ul> <li>through an <code>IHookable</code></li> <li>directly (through reflection)</li> <li>in a separate thread (in case it needs to timeout) </ul> <p/> This method is also responsible for invoking @BeforeGroup, @BeforeMethod, @AfterMethod, @AfterGroup if it is the case for the passed in @Test method.
Filter all the beforeGroups methods and invoke only those that apply to the current test method
Gets an array of parameter values returned by data provider or the ones that are injected based on parameter type. The method also checks for {@code NoInjection} annotation
Invokes a method that has a specified threadPoolSize.
To reduce thread contention and also to correctly handle thread-confinement this method invokes the @BeforeGroups and @AfterGroups corresponding to the current @Test method.
Checks to see of the test method has certain dependencies that prevents TestNG from executing it
An exception was thrown by the test, determine if this method should be marked as a failure or as failure_but_within_successPercentage
TODO: move this from here as it is directly called from TestNG
Collect all the methods that belong to the included groups and exclude all the methods that belong to an excluded group.
Extracts the map of groups and their corresponding methods from the <code>classes</code>.
Only used if a group is missing to flag an error on that method expression groupRegExp.  methods[] is the list of all the methods we are choosing from and method is the method that owns the dependsOnGroups statement (only used if a group is missing to flag an error on that method).
expression groupRegExp.  methods[] is the list of all the methods we are choosing from.
Collects and orders test or configuration methods
Finds TestNG methods that the specified TestNG method depends upon
Finds method based on regex and TestNGMethod. If regex doesn't represent the class name, uses the TestNG method's class name.
Extracts the unique list of <code>ITestNGMethod</code>s.
Look in map for a class that is a superclass of methodClass
Look in map for a class that is a subclass of methodClass
Fix the methodsDependedUpon to make sure that @Configuration methods respect inheritance (before methods are invoked in the order Base first and after methods are invoked in the order Child first) need to be sorted base class first and subclass last). false otherwise (subclass methods first, base classes last).
Given a list of methods belonging to the same class hierarchy, orders them from the base class to the child (if true) or from child to base class (if false)
Invokes the <code>run</code> method of the <code>IHookable</code>.
Invokes a method on a separate thread in order to allow us to timeout the invocation. It uses as implementation an <code>Executor</code> and a <code>CountDownLatch</code>.
Creates the parameters needed for constructing a test class instance.
Creates the parameters needed for the specified <tt>@Configuration</tt> <code>Method</code>.
picked from the property file
Find the data provider info (data provider name and class) on either @Test(dataProvider),
Find a method that has a @DataProvider(name=name)
If the method has parameters, fill them in. Either by using a @DataProvider if any was provided, or by looking up <parameters> in testng.xml method.
If numbers is empty, return parameters, otherwise, return a subset of parameters whose ordinal number match these found in numbers.
Loads a Properties file.
Returns the properties loaded.
true for the method "tm".
Invoke the @BeforeClass methods if not done already
Invoke the @AfterClass methods if not done already
or on a superclass).
Constructs a <code>TestNGMethod</code>
Hide constructor for utility class.
Splits the given String s into tokens where the separator is either the space character or the comma character. For example, if s is "a,b, c" this method returns {"a", "b", "c"}
Writes the content of the sb string to the file named filename in outDir encoding the output as UTF-8. If outDir does not exist, it is created.
Writes the content of the sb string to the file named filename in outDir. If outDir does not exist, it is created.
Open a BufferedWriter for the specified file. If output directory doesn't exist, it is created. If the output file exists, it is deleted. The output file is created in any case.
class groups
class groups
class groups
class groups
Logs the the message to System.out if level is greater than or equal to TestRunner.getVerbose(). The message is logged as: <pre> </pre>
of instances. public static int calculateInvokedMethodCount(IResultMap map) { }
Tokenize the string using the separator.
If the file name contains special characters like *,/,\ and so on, exception will be thrown and report file will not be created.<br> Special characters are platform specific and they are not same for example on Windows and Macintosh. * is not allowed on Windows, but it is on Macintosh.<br> In order to have the same behavior of testng on the all platforms, characters like * will be replaced on all platforms whether they are causing the problem or not.
Make sure that either we have an instance or if not, that the method is static
Returns the string representation of the specified object, transparently handling null references and arrays.
The main entry point to convert an XmlSuite into YAML. This method is allowed to be used by external tools (e.g. Eclipse).
Starts a test run. Analyzes the command line arguments and runs the given test suite.
Returns the Test corresponding to the given suite. This is a template method, subclasses override runFailed(), clearStatus().
Retrieve a logger named according to the value of the pClass.getName() parameter. If the named logger already exists, then the existing instance will be returned. Otherwise, a new instance is created. By default, loggers do not have a set level but inherit it from their nearest ancestor with a set level.
Check whether this logger is enabled for the TRACE Level.
Log a message object with the TRACE level. This method first checks if this logger is TRACE enabled. If this logger is TRACE enabled, then it converts the message object (passed as parameter) to a string by invoking toString(). WARNING Note that passing a Throwable to this method will print the name of the Throwable but no stack trace. To print a stack trace use the trace(Object, Throwable) form instead.
Log a message object with the TRACE level including the stack trace of the Throwable t passed as parameter. See Logger.trace(Object) form for more detailed information.
Check whether this logger is enabled for the DEBUG Level.
Log a message object with the DEBUG level. See Logger.trace(Object) form for more detailed information.
Log a message object with the DEBUG level including the stack trace of the Throwable t passed as parameter. See Logger.trace(Object, Throwable) form for more detailed information.
Check whether this logger is enabled for the INFO Level.
Log a message object with the INFO level. See Logger.trace(Object) form for more detailed information.
Log a message object with the WARN level including the stack trace of the Throwable t passed as parameter. See Logger.trace(Object, Throwable) form for more detailed information.
Log a message object with the WARN level. See Logger.trace(Object) form for more detailed information.
Log a message object with the ERROR level including the stack trace of the Throwable t passed as parameter. See Logger.trace(Object, Throwable) form for more detailed information.
Log a message object with the ERROR level. See Logger.trace(Object) form for more detailed information.
Log a message object with the DEBUG level including the stack trace of the Throwable t passed as parameter. See Logger.trace(Object, Throwable) form for more detailed information.
Log a message object with the FATAL level. See Logger.trace(Object) form for more detailed information.
Log a message object with the FATAL level including the stack trace of the Throwable t passed as parameter. See Logger.trace(Object, Throwable) form for more detailed information.
Returns the level associated to the current class. The level is obtain by searching for a logger in the "testng-logging.properties" resource. For example, if class is "org.testng.TestNG" the the following loggers are searched in this order: <ol> <li>"org.testng.TestNG"</li> <li>"org.testng"</li> <li>"org"</li> <li>The root level</li> </ol>
Logs the message to System.out of debug is on.
This method is for debugging purpose only. property file would be.
Makes sure the default debug value is false.
Makes sure the debug value can be turned on and actualls logs something.
Makes sure the debug value can be turned off and logs nothing.
Makes sure an illegal debug value throws an exception.
Tests that the root logger's default level is WARN and that loggers do not log bellow this level and do log in the correct stream for levels equal to and above WARN.
Test setting the root logger level
Test setting the root logger to an illegal level value throws an exception.
Test setting a user logger level
Test setting a user logger to an illegal level value throws an exception
Tests setting a partial logger name (a hierarchy scope)
Run all tests. (very crusty ...)
Creates a listener for an {@link org.testng.xml.XmlSuite} result.
Should called by the {@link IWorkerAdapter} implementation when a remote suite result is ready.
Start listening to a test run. Start a server connection that the RemoteTestRunner can connect to.
Requests to stop the remote test run.
protected InputStream m_receiverInputStream;
Implementation according to JDK5 String.replace(CharSequence,CharSequence)
Implementation according to JDK5 String.replace(CharSequence,CharSequence)
Starts the connection.
Shutsdown the connection to the remote test listener.
private String readMessage(BufferedReader in) throws IOException { }
This constructor is used by the Eclipse client to initialize a result message based on what was received over the network.
This constructor is used by RemoteTestNG to initialize a result message from an ITestResult.
Override by the plugin if you need to configure differently the <code>TestRunner</code> (usually this is needed if different listeners/reporters are needed). <b>Note</b>: you don't need to worry about the wiring listener, because it is added automatically.
Creates a new suite dispatcher.
Dispatch test suites
Creates a new suite dispatcher.
Invoked in client mode.  In this case, wait for a connection on the given port, run the XmlSuite we received and return the SuiteRunner created to run it.
Finds topmost position of the test method in the stack, or top of stack if <code>method</code> is not in it.
Finds topmost position of the test method in the stack, or top of stack if <code>method</code> is not in it.
Creates a table showing the highlights of each test method with links to the method details
Creates a section showing known results for each method
Starts and defines columns result summary table
Since the methods will be sorted chronologically, we want to return the ITestNGMethod from the invoked methods.
Starts HTML stream
Finishes HTML stream
Writes a summary of all the test scenarios.
Writes the scenario summary for the results of a given state for a single test.
Writes the details for all test scenarios.
Writes the scenario details for the results of a given state for a single test.
Writes the details for an individual test scenario.
Writes a TH element with the specified contents and CSS class names.
Writes a TD element with the specified contents.
Writes a TD element with the specified contents and CSS class names.
Writes an arbitrary HTML element with the specified contents and CSS class names.
Orders test results by class name and then by method name (in lexicographic order).
Groups test results by method and then by class.
Formats an array of groups for display.
Generate testng-failed.xml
on the parameter methods
TODO:  we might want to make that more flexible in the future, but for now, hardcode the file name
Overridable by subclasses to create different directory names (e.g. with timestamps).
Add the time of the configuration method to this test method. The only problem with this method is that the timing of a test method might not be added to the time of the same configuration method that ran before it but since they should all be equivalent, this should never be an issue.
generate the XML report given what we know from all the test results
Reset all member variables for next test.
Generate the main index.html file that lists all the suites and their result
Generate a HTML color based on the class of the method
Generate information about methods and groups
Writes a property file for each suite result.
implements ITestListener
Default constructor
Create VerboseReporter with custom prefix
Print out test summary
Log meaningful message for passed in arguments. Message itself is of form: $status: "$suiteName" - $methodDeclaration ($actualArguments) finished in $x ms ($run of $totalRuns)
Add started-at, finished-at and duration-ms attributes to the <suite> tag
TODO: This is not the smartest way to implement the config
to start the generation. This constructor will not insert an <?xml prologue.
document. to start the generation.
to start the generation.
Set the xml version and encoding for this document.
Set the doctype for this document.
Push a new tag.  Its value is stored and will be compared against the parameter passed to pop().
Pop the last pushed element without verifying it if matches the previously pushed tag.
Pop the last pushed element and throws an AssertionError if it doesn't match the corresponding tag that was pushed earlier.
Add a required element to the current tag.  An opening and closing tag will be generated even if value is null.
Add an optional String element to the current tag.  If value is null, nothing is added.
Add an optional Boolean element to the current tag.  If value is null, nothing is added.
Add an empty element tag (e.g. <foo/>)
Add a CDATA tag.
Writes the specified ISuiteResult in the given XMLStringBuffer. Please consider that depending on the settings in the <code>config</code> property it might generate an additional XML file with the actual content and only reference the file with an <code>url</code> attribute in the passed XMLStringBuffer.
Generate tag. An opening and closing tag will be generated even if value is null.
Appends the attributes to result. The attributes are added on a single line as: key1="value1" key2="value2" ... (a space is added before the first key)
Set the max number of time the method needs to be retried.
Return the current counter value
Parse the <define> tag.
Try to find a @ParentSetter. If this fails, try to find a constructor that takes the parent as a parameter. If this fails, use the default constructor.
private List<Pair<Method, ? extends Annotation>> }
private Method findSetter(Object object, String name) { }
Constructs a <code>LaunchSuite</code>
Returns the temporary state.
Constructs a <code>ExistingSuite</code> based on an existing file
Constructs a <code>CustomizedSuite</code> TODO cquezel JavaDoc.
TODO cquezel JavaDoc
Saves the content of the string buffer to the specified file.
Constructs a <code>MethodsSuite</code> TODO cquezel JavaDoc.
Constructs a <code>Parser</code> to use the inputStream as the source of the xml test suite to parse. unknown.
Creates a parser that will try to find the DEFAULT_FILENAME from the jar. found in the classpath.
If false, don't try to load the classes during the parsing.
Returns an input stream on the resource named DEFAULT_FILENAME. found in the classpath. private static InputStream getInputStream(String fileName) throws FileNotFoundException { }
Parses the TestNG test suite and returns the corresponding XmlSuite, and possibly, other XmlSuite that are pointed to by <suite-files> tags. if the default testng.xml file is not found.
Parse <suite-file>
Parse <suite>
Parse <define>
Parse <script>
Parse <test>
Parse <classes>
Parse <listeners>
Parse <listener>
Parse <packages>
Parse <method-selectors>
Parse <selector-class>
Parse <method-selector>
Parse <run>
Parse <group>
Note that this attribute does not come from the XML file, it's calculated internally and represents the order in which this class was found in its &lt;test&gt; tag.  It's used to calculate the ordering of the classes when preserve-order is true.
the inherited parameters as well, call {@code getAllParameters()}.
For YAML
For YAML
Tries to load a <code>SAXParserFactory</code> by trying in order the following: <tt>com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl</tt> (SUN JDK5) <tt>org.apache.crimson.jaxp.SAXParserFactoryImpl</tt> (SUN JDK1.4) and last <code>SAXParserFactory.newInstance()</code>.
Tests if the current <code>SAXParserFactory</code> supports DTD validation.
Returns the parallel mode.
Sets the parallel mode
Sets the configuration failure policy.
Returns the configuration failure policy.
Returns the verbose.
Set the verbose.
Returns the test.
Returns the tests.
For YAML
Returns the method selectors.
Sets the method selectors.
Updates the list of parameters that apply to this XML suite. This method should be invoked any time there is a change in the state of this suite that would affect the parameter list.<br> NOTE: Currently being invoked after a parent suite is added or if parameters for this suite are updated.
Sets parameters.
Gets the parameters that apply to tests in this suite.<br> Set of parameters for a suite is appended with parameters from parent suite. Also, parameters from this suite override the same named parameters from parent suite.
Returns the parameter defined in this suite only.
Set the thread count.
Sets the JUnit compatibility flag.
For YAML
Sets the XML packages.
Returns the XML packages.
For YAML
For YAML
Logs to System.out.
Sets the timeout.
Returns the timeout.
Returns the timeout as a long value specifying the default value to be used if no timeout was specified. no timeout was specified.
Sets the suite files.
Returns the suite files.
Used to debug equals() bugs.
The DTD sometimes forces certain attributes to receive a default value. Such a value is considered equal to another one if that other one is null.
Note: do not modify the returned value, use {@link #addIncludedGroup(String)}.
Note: do not modify the returned value, use {@link #addExcludedGroup(String)}.
Constructs a <code>XmlTest</code> and adds it to suite's list of tests.
Returns the suite this test is part of.
For YAML
For YAML
Sets the XML Classes.
For YAML
Convenience method to cache the ordering numbers for methods.
Note that this attribute does not come from the XML file, it's calculated internally and represents the order in which this test tag was found in its &lt;suite&gt; tag.  It's used to calculate the ordering of the tests when preserve-test-order is true.
Don't add this property if it's equal to its default value.
Protect constructor since it is a static only class
Asserts that a condition is true. If it isn't, an AssertionError, with the given message, is thrown.
Asserts that a condition is true. If it isn't, an AssertionError is thrown.
Asserts that a condition is false. If it isn't, an AssertionError, with the given message, is thrown.
Asserts that a condition is false. If it isn't, an AssertionError is thrown.
Fails a test with the given message and wrapping the original exception.
Fails a test with no message.
Asserts that two objects are equal. If they are not, an AssertionError, with the given message, is thrown.
Differs from {@link #assertEquals(Object, Object, String)} by not taking arrays into special consideration hence comparing them by reference. Intended to be called directly to test equality of collections content.
Asserts that two objects are equal. If they are not, an AssertionError is thrown.
Asserts that two Strings are equal. If they are not, an AssertionError, with the given message, is thrown.
Asserts that two Strings are equal. If they are not, an AssertionError is thrown.
Asserts that two doubles are equal concerning a delta.  If they are not, an AssertionError, with the given message, is thrown.  If the expected value is infinity then the delta value is ignored.
Asserts that two doubles are equal concerning a delta. If they are not, an AssertionError is thrown. If the expected value is infinity then the delta value is ignored.
Asserts that two floats are equal concerning a delta. If they are not, an AssertionError, with the given message, is thrown.  If the expected value is infinity then the delta value is ignored.
Asserts that two floats are equal concerning a delta. If they are not, an AssertionError is thrown. If the expected value is infinity then the delta value is ignored.
Asserts that two longs are equal. If they are not, an AssertionError, with the given message, is thrown.
Asserts that two longs are equal. If they are not, an AssertionError is thrown.
Asserts that two booleans are equal. If they are not, an AssertionError, with the given message, is thrown.
Asserts that two booleans are equal. If they are not, an AssertionError is thrown.
Asserts that two bytes are equal. If they are not, an AssertionError, with the given message, is thrown.
Asserts that two bytes are equal. If they are not, an AssertionError is thrown.
Asserts that two chars are equal. If they are not, an AssertionFailedError, with the given message, is thrown.
Asserts that two chars are equal. If they are not, an AssertionError is thrown.
Asserts that two shorts are equal. If they are not, an AssertionFailedError, with the given message, is thrown.
Asserts that two shorts are equal. If they are not, an AssertionError is thrown.
Asserts that two ints are equal. If they are not, an AssertionFailedError, with the given message, is thrown.
Asserts that two ints are equal. If they are not, an AssertionError is thrown.
Asserts that an object isn't null. If it is, an AssertionError is thrown.
Asserts that an object isn't null. If it is, an AssertionFailedError, with the given message, is thrown.
Asserts that an object is null. If it is not, an AssertionError, with the given message, is thrown.
Asserts that an object is null. If it is not, an AssertionFailedError, with the given message, is thrown.
Asserts that two objects refer to the same object. If they do not, an AssertionFailedError, with the given message, is thrown.
Asserts that two objects refer to the same object. If they do not, an AssertionError is thrown.
Asserts that two objects do not refer to the same objects. If they do, an AssertionError, with the given message, is thrown.
Asserts that two objects do not refer to the same object. If they do, an AssertionError is thrown.
Asserts that two collections contain the same elements in the same order. If they do not, an AssertionError is thrown.
Asserts that two collections contain the same elements in the same order. If they do not, an AssertionError, with the given message, is thrown.
Asserts that two iterators return the same elements in the same order. If they do not, an AssertionError is thrown. Please note that this assert iterates over the elements and modifies the state of the iterators.
Asserts that two iterators return the same elements in the same order. If they do not, an AssertionError, with the given message, is thrown. Please note that this assert iterates over the elements and modifies the state of the iterators.
Asserts that two iterables return iterators with the same elements in the same order. If they do not, an AssertionError is thrown.
Asserts that two iterables return iterators with the same elements in the same order. If they do not, an AssertionError, with the given message, is thrown.
Asserts that two arrays contain the same elements in the same order. If they do not, an AssertionError, with the given message, is thrown.
Asserts that two arrays contain the same elements in no particular order. If they do not, an AssertionError, with the given message, is thrown.
Asserts that two arrays contain the same elements in the same order. If they do not, an AssertionError is thrown.
Asserts that two arrays contain the same elements in no particular order. If they do not, an AssertionError is thrown.
Asserts that two sets are equal.
Assert set equals
Asserts that two maps are equal.
Asserts that {@code runnable} throws an exception of type {@code throwableClass} when executed and returns the exception. If {@code runnable} does not throw an exception, an {@link AssertionError} is thrown. If it throws the wrong type of exception, an {@code AssertionError} is thrown describing the mismatch; the exception that was actually thrown can be obtained by calling {@link AssertionError#getCause}.
Asserts that a condition is true. If it isn't it throws an AssertionFailedError with the given message.
Asserts that a condition is true. If it isn't it throws an AssertionFailedError.
Asserts that a condition is false. If it isn't it throws an AssertionFailedError with the given message.
Asserts that a condition is false. If it isn't it throws an AssertionFailedError.
Asserts that two objects are equal. If they are not an AssertionFailedError is thrown with the given message.
Asserts that two objects are equal. If they are not an AssertionFailedError is thrown.
Asserts that two Strings are equal.
Asserts that two doubles are equal concerning a delta.  If they are not an AssertionFailedError is thrown with the given message.  If the expected value is infinity then the delta value is ignored.
Asserts that two doubles are equal concerning a delta. If the expected value is infinity then the delta value is ignored.
Asserts that two floats are equal concerning a delta. If they are not an AssertionFailedError is thrown with the given message.  If the expected value is infinity then the delta value is ignored.
Asserts that two floats are equal concerning a delta. If the expected value is infinity then the delta value is ignored.
Asserts that two longs are equal. If they are not an AssertionFailedError is thrown with the given message.
Asserts that two longs are equal.
Asserts that two booleans are equal. If they are not an AssertionFailedError is thrown with the given message.
Asserts that two booleans are equal.
Asserts that two bytes are equal. If they are not an AssertionFailedError is thrown with the given message.
Asserts that two bytes are equal.
Asserts that two chars are equal. If they are not an AssertionFailedError is thrown with the given message.
Asserts that two chars are equal.
Asserts that two shorts are equal. If they are not an AssertionFailedError is thrown with the given message.
Asserts that two shorts are equal.
Asserts that two ints are equal. If they are not an AssertionFailedError is thrown with the given message.
Asserts that two ints are equal.
Asserts that an object isn't null.
Asserts that an object isn't null. If it is an AssertionFailedError is thrown with the given message.
Asserts that an object is null.
Asserts that an object is null.  If it is not an AssertionFailedError is thrown with the given message.
Asserts that two objects refer to the same object. If they are not an AssertionFailedError is thrown with the given message.
Asserts that two objects refer to the same object. If they are not the same an AssertionFailedError is thrown.
Asserts that two objects refer to the same object. If they are not an AssertionFailedError is thrown with the given message.
Asserts that two objects refer to the same object. If they are not the same an AssertionFailedError is thrown.
Remove the method from this map and returns true if it is the last of its class.
Turns the output of a JUnit 4 @Parameters style data provider into one that is suitable for TestNG's @DataProvider.
Protect constructor since it is a static only class
Asserts that a {@code tstvalue} is a proper directory. If it isn't, an AssertionError, with the given message, is thrown.
Asserts that a {@code tstvalue} is a proper file. If it isn't, an AssertionError, with the given message, is thrown.
Asserts that a {@code tstvalue} is a file of exactly {@code expected} characters or a directory of exactly {@code expected} entries. If it isn't, an AssertionError, with the given message, is thrown.
Asserts that a {@code tstvalue} is a file of at least {@code expected} characters or a directory of at least {@code expected} entries. If it isn't, an AssertionError, with the given message, is thrown.
Asserts that a {@code tstvalue} is a file of at most {@code expected} characters or a directory of at most {@code expected} entries. If it isn't, an AssertionError, with the given message, is thrown.
Asserts that a {@code tstvalue} is readable. If it isn't, an AssertionError, with the given message, is thrown.
Asserts that a {@code tstvalue} is writeable. If it isn't, an AssertionError, with the given message, is thrown.
Asserts that a {@code tstvalue} is readable and writeable. If it isn't, an AssertionError, with the given message, is thrown.
Formats failure for file assertions
String representation of what sort of file {@code path} is.
String representation of what sort of file {@code path} is.
The default method interceptor which sorts methods by instances (i.e. by class).
Erase the content of all the output generated so far.
Log the passed string to the HTML reports
Log the passed string to the HTML reports if the current verbosity is equal or greater than the one passed in parameter. If logToStandardOut is true, the string will also be printed on standard out. out too
Log the passed string to the HTML reports.  If logToStandardOut is true, the string will also be printed on standard out. out too
Log the passed string to the HTML reports if the current verbosity is equal or greater than the one passed in parameter
Creates a reporter based on the current configuration
Flag if the current exception marks a skipped method (<tt>true</tt>) or a failure (<tt>false</tt>). By default Subclasses should override this method in order to provide smarter behavior.
Subclasses may use this method to reduce the printed stack trace. This method keeps only the last frame. <b>Important</b>: after calling this method the preserved internally and can be restored called {@link #restoreStackTrace}.
Restores the original exception stack trace after a previous call to {@link #reduceStackTrace()}.
transient private IAnnotationTransformer m_annotationTransformer = null;
Implement <suite parallel="tests">. Since this kind of parallelism happens at the suite level, we need a special code path to execute it.  All the other parallelism strategies are implemented at the test level in TestRunner#createParallelWorkers (but since this method deals with just one <test> tag, it can't implement <suite parallel="tests">, which is why we're doing it here).
Registers ISuiteListeners interested in reporting the result of the current suite.
Runs a suite
Create the test methods that belong to this class (rejects all those that belong to a different class).
Default constructor. Setting also usage of default listeners/reporters.
Used by maven2 to have 0 output of any kind come out of testng. should be added to tests.
Sets the output directory where the reports will be created.
If this method is passed true before run(), the default listeners will not be used. <ul> <li>org.testng.reporters.TestHTMLReporter <li>org.testng.reporters.JUnitXMLReporter <li>org.testng.reporters.XMLReporter </ul>
Sets a jar containing a testng.xml file.
Sets the path to the XML file in the test jar file.
If the XmlSuite contains at least one test named as testNames, return an XmlSuite that's made only of these tests, otherwise, return the original suite.
Define the number of threads in the thread pool.
Set the test classes to be run by this TestNG object.  This method will create a dummy suite that will wrap these classes called "Command Line Test". <p/> If used together with threadCount, parallel, groups, excludedGroups than this one must be set first.
Given a string com.example.Foo.f1, return an array where [0] is the class and [1] is the method.
in parameter.
Set the suites file names to be run by this TestNG object. This method tries to load and parse the specified TestNG suite xml files. If a file is missing, it is ignored. <pre> TestNG tng = new TestNG(); List<String> suites = Lists.newArrayList(); suites.add("c:/tests/testng1.xml"); suites.add("c:/tests/testng2.xml"); tng.setTestSuites(suites); tng.run(); </pre>
Specifies the XmlSuite objects to run.
Define which groups will be excluded from this run.
Define which groups will be included from this run.
Define which listeners to user for this run. ITestListener or IReporter
Sets the level of verbosity. This value will override the value specified in the test suites. Actually, this is a lie:  you can specify -1 and this will put TestNG in debug mode (no longer slicing off stack traces and all).
Using reflection to remain Java 5 compliant.
Before suites are executed, do a sanity check to ensure all required conditions are met. If not, throw an exception to stop test execution
Ensure that two XmlTest within the same XmlSuite don't have the same name
Ensure that two XmlSuite don't have the same name Otherwise will be clash in SuiteRunnerMap See issue #302
Run TestNG.
This needs to be public for maven2, for now..At least until an alternative mechanism is found.
the suite, the verbose level on the TestNG object, or 1.
Recursively runs suites. Runs the children suites before running the parent suite. This is done so that the results for parent suite can reflect the combined results of the children suites.
Populates the dynamic graph with the reverse hierarchy of suites. Edges are added pointing from child suite runners to parent suite runners, hence making parent suite runners dependent on all the child suite runners
Creates the {@code SuiteRunner}s and populates the suite runner map with this information SuiteRunner as value. This is updated as part of this method call
Creates a suite runner and configures its initial state
The TestNG entry point for command line execution.
<B>Note</B>: this method is not part of the public API and is meant for internal usage only.
Configure the TestNG instance based on the command line parameters.
This method is invoked by Maven's Surefire, only remove it once Surefire has been modified to no longer call it.
Only run the specified tests from the suite.
Specify if this run should be in Master-Slave mode as Master
Specify if this run should be in Master-Slave mode as slave
Specify if this run should be made in JUnit mode
Specify if this run should be made in mixed mode
Double check that the command line parameters are valid.
Sets the policy for whether or not to ever invoke a configuration method again after it has failed once. Possible values are defined in {@link XmlSuite}.  The default value is {@link XmlSuite#SKIP}.
Used to test ServiceClassLoader
Used to test ServiceClassLoader
Used to test ServiceClassLoader
Ant task settings
Sets the flag to log the command line. When verbose is set to true the command line parameters are stored in a temporary file stored in the user's default temporary file directory. The file created is prefixed with "testng".
Sets the flag to write on <code>System.out</code> the Ant Environment properties.
Sets te flag to write on <code>System.out</code> the system properties.
The directory to invoke the VM in.
Sets a particular JVM to be used. Default is 'java' and is solved by <code>Runtime.exec()</code>.
Set the timeout value (in milliseconds). <p>If the tests are running for more than this value, the tests will be canceled. </p>
Adds an environment variable; used when forking.
Adds path to classpath used for tests.
Adds a path to the bootclasspath.
Set the classpath to be used when running the Java class
Classpath to use, by reference.
Sets the suite runner class to invoke
Sets the suite name
Sets the test name
TestNG settings
TestNG settings
Sets the test output directory
Sets the test jar
Executes the target, if any, that user designates executing before failing the test
Executes the command line as a new process.
Creates or returns the already created <CODE>CommandlineJava</CODE>.
watchdog instance.
Returns the list of files corresponding to the resource collection
Returns the list of files corresponding to the fileset
Adds double quotes to the command line argument if it contains spaces.
Creates a string representation of the path.
Add the referenced property set as system properties for the TestNG JVM.
Create an ITestNGMethod for @code{method} based on @code{existingMethod}, which needs to belong to the same class.
Initialize meta groups
Calculate the transitive closure of all the MetaGroups
The main entry method for TestRunner. This is where all the hard work is done: - Invoke configuration methods - Invoke test methods - Catch exceptions - Collect results - Invoke listeners - etc...
Before run preparements.
Main method that create a graph of methods and then pass it to the graph executor to run them.
Apply the method interceptor (if applicable) to the list of methods.
Create workers for parallel="classes" and similar cases.
@@@ remove this
Logs the beginning of the {@link #beforeRun()} .
Trigger the start/finish event.
Creates a {@code TimeBombedSkipException} using the <tt>expirationDate</tt>. The format used for date comparison is <tt>yyyy/MM/dd</tt>
Creates a {@code TimeBombedSkipException} using the <tt>expirationDate</tt>. The <tt>format</tt> parameter wiil be used for performing the time comparison.
Creates a {@code TimeBombedSkipException} using the <tt>date</tt> in the format <tt>yyyy/MM/dd</tt>.
Creates a {@code TimeBombedSkipException} using the <tt>date</tt> in the specified format <tt>format</tt>. The same format is used when performing the time comparison.
Creates a {@code TimeBombedSkipException} using the <tt>date</tt> in the specified format <tt>inFormat</tt>. The <tt>outFormat</tt> will be used to perform the time comparison and display.
@ Configuration(beforeTestClass = true)
in this test, our default constructor sets s to a value that will cause a failure the valid test instances should come from the factory
protected TestNG run(Class[] classes, String outputDir) { }
public void tearDown() { }
public SmokeSuite() this("SmokeSuite");
public void test1() { } public void test2() { }
Will be invoked with 42 by the factory.
This comment line should be preserved
value = "java.lang.NullPointerException java.lang.NumberFormatException"
This key should be preserved dependsOnMethods = "expectedExceptions" timeOut="3000" value = "java.lang.NullPointerException java.lang.NumberFormatException"
In non-parallel mode, we should only have one thread id for the two methods invoked on B.
public void f() { } public void after() { }
Make sure that the topological order is preserved and that if the TestNG runner is configured to run n threads, the dependent methods are using these n threads.
private LoggingAssert m_assert = new LoggingAssert();
public void ac() { }
Used for instanceCount testing, when we need to look inside the TestResult to count the various SUCCESS/FAIL/FAIL_BUT_OK
that matched the regexp Note that the size() of the returned valuewill always be equal to result.size() at the end of this function.
Deletes all files and subdirectories under dir. If a deletion fails, the method stops attempting to delete and returns false.
Compare a list of ITestResult with a list of String method names,
Private constructor to disable instantiation.
Returns the output directory as specified for the current test.
This key should be preserved dependsOnMethods = "expectedExceptions" timeOut="3000" unrecognised="futureProof" value = "java.lang.NullPointerException java.lang.NumberFormatException"
Constructs an empty list.
Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.
Returns the first element in this list.
Returns the last element in this list.
Removes and returns the first element from this list.
Removes and returns the last element from this list.
Inserts the specified element at the beginning of this list.
Appends the specified element to the end of this list. <p/> <p>This method is equivalent to {@link #add}.
Appends the specified element to the end of this list. <p/> <p>This method is equivalent to {@link #addLast}.
Removes all of the elements from this list.
Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index <tt>i</tt> such that <tt>(o==null&nbsp;?&nbsp;isCancelled(i)==null&nbsp;:&nbsp;o.equals(isCancelled(i)))</tt>, or -1 if there is no such index. this list, or -1 if this list does not contain the element
Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index <tt>i</tt> such that <tt>(o==null&nbsp;?&nbsp;isCancelled(i)==null&nbsp;:&nbsp;o.equals(isCancelled(i)))</tt>, or -1 if there is no such index. this list, or -1 if this list does not contain the element
Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.  The behavior of this operation is undefined if the specified collection is modified while the operation is in progress.  (Note that this will occur if the specified collection is this list, and it's nonempty.)
Returns <tt>true</tt> if this list contains the specified element. More formally, returns <tt>true</tt> if and only if this list contains at least one element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
Removes the first occurrence of the specified element from this list, if it is present.  If this list does not contain the element, it is unchanged.  More formally, removes the element with the lowest index <tt>i</tt> such that <tt>(o==null&nbsp;?&nbsp;isCancelled(i)==null&nbsp;:&nbsp;o.equals(isCancelled(i)))</tt> (if such an element exists).  Returns <tt>true</tt> if this list contained the specified element (or equivalently, if this list changed as a result of the call).
Returns the number of elements in this list.
Returns an array containing all of the elements in this list in proper sequence (from first to last element). <p/> <p>The returned array will be "safe" in that no references to it are maintained by this list.  (In other words, this method must allocate a new array).  The caller is thus free to modify the returned array. <p/> <p>This method acts as bridge between array-based and collection-based APIs. in proper sequence
Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.  If the list fits in the specified array, it is returned therein.  Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. <p/> <p>If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the list is onUpdate to <tt>null</tt>. (This is useful in determining the length of the list <i>only</i> if the caller knows that the list does not contain any null elements.) <p/> <p>Like the {@link #toArray()} method, this method acts as bridge between array-based and collection-based APIs.  Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. <p/> <p>Suppose <tt>x</tt> is a list known to contain only strings. The following code can be used to dump the list into a newly allocated array of <tt>String</tt>: <p/> <pre> Note that <tt>toArray(new Object[0])</tt> is identical in function to <tt>toArray()</tt>.
Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).
Inserts all of the elements in the specified collection into this list, starting at the specified position.  Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices).  The new elements will appear in the list in the order that they are returned by the specified collection's iterator.
Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list. Obeys the general contract of <tt>List.listIterator(int)</tt>.<p> <p/> The list-iterator is <i>fail-fast</i>: if the list is structurally modified at any time after the Iterator is created, in any way except through the list-iterator's own <tt>remove</tt> or <tt>add</tt> methods, the list-iterator will throw a <tt>ConcurrentModificationException</tt>.  Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. sequence), starting at the specified position in the list
Removes the element at the specified position in this list.  Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.
Returns the indexed entry.
Retrieves, but does not remove, the head (first element) of this list.
Retrieves, but does not remove, the head (first element) of this list.
Retrieves and removes the head (first element) of this list
Retrieves and removes the head (first element) of this list.
Adds the specified element as the tail (last element) of this list.
Inserts the specified element at the front of this list.
Inserts the specified element at the end of this list.
Retrieves, but does not remove, the first element of this list, or returns <tt>null</tt> if this list is empty. if this list is empty
Retrieves, but does not remove, the last element of this list, or returns <tt>null</tt> if this list is empty. if this list is empty
Retrieves and removes the first element of this list, or returns <tt>null</tt> if this list is empty. this list is empty
Retrieves and removes the last element of this list, or returns <tt>null</tt> if this list is empty. this list is empty
Pushes an element onto the stack represented by this list.  In other words, inserts the element at the front of this list. <p/> <p>This method is equivalent to {@link #addFirst}.
Pops an element from the stack represented by this list.  In other words, removes and returns the first element of this list. <p/> <p>This method is equivalent to {@link #removeFirst()}. of the stack represented by this list)
Removes the first occurrence of the specified element in this list (when traversing the list from head to tail).  If the list does not contain the element, it is unchanged.
Removes the last occurrence of the specified element in this list (when traversing the list from head to tail).  If the list does not contain the element, it is unchanged.
Returns a shallow copy of this <tt>LinkedList</tt>. (The elements themselves are not cloned.)
Save the state of this <tt>LinkedList</tt> instance to a stream (that is, serialize it). contains) is emitted (int), followed by all of its elements (each an Object) in the proper order.
Reconstitute this <tt>LinkedList</tt> instance from a stream (that is deserialize it).
Returns the length that the specified CharSequence would have if spaces and control characters were trimmed from the start and end, as by {@link String#trim}.
By contract, parameter "block" must not have any line breaks
Draws and/or measures a uniform run of text on a single line. No span of interest should start or end in the middle of this run (if not drawing, character spans that don't affect metrics can be ignored). Neither should the run direction change in the middle of the run. <p/> <p>The x position is the leading edge of the text. In a right-to-left paragraph, this will be to the right of the text to be drawn. Paint should not have an Align value other than LEFT or positioning will isCancelled confused. <p/> <p>On return, workPaint will reflect the original paint plus any modifications made by character styles on the run. <p/> <p>The returned width is signed and will be < 0 if the paragraph direction is right-to-left.
Returns the advance widths for a uniform left-to-right run of text with no style changes in the middle of the run. If any style is replacement text, the first character will isCancelled the width of the replacement and the remaining characters will isCancelled a width of 0.
Renders and/or measures a directional run of text on a single line. Unlike {@link #drawUniformRun}, this can render runs that cross style boundaries.  Returns the signed advance width, if requested. <p/> <p>The x position is the leading edge of the text. In a right-to-left paragraph, this will be to the right of the text to be drawn. Paint should not have an Align value other than LEFT or positioning will isCancelled confused. <p/> <p>This optimizes for unstyled text and so workPaint might not be modified by this call. <p/> <p>The returned advance width will be < 0 if the paragraph direction is right-to-left.
Draws a unidirectional run of text on a single line, and optionally returns the signed advance.  Unlike drawDirectionalRun, the paragraph direction and run direction can be different. package
Draws a run of text on a single line, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. <p/> This method considers style information in the text (e.g. even when text is an instance of {@link android.text.Spanned}, this method correctly draws the text). See also {@link android.graphics.Canvas#drawText(CharSequence, int, int, float, float, Paint)} and {@link android.graphics.Canvas#drawRect(float, float, float, float, Paint)}.
Returns the width of a run of left-to-right text on a single line, considering style information in the text (e.g. even when text is an instance of {@link android.text.Spanned}, this method correctly measures the width of the text).
for (ISurfaceAnimation animation : animations) animation.setText(text);
Generates string of "`" char Not effective on large sizes
params are in pixels
params are in pixels
Overrides all previously set paint properties
Assert that ProGuard has run and obfuscated a library type. This implicitly also tests the embedded ProGuard rules in the library are correct since currently ProGuard fails without them.
-- post from background
-- post events to empty bus
-- post event to subscribers
-- register and unregister subscribers
Multiple bus instances can call this method, when an event needs to be dispatched to given subscriber in a background thread. <p>This method can be called in any thread
-- methods called from handler
-- inner lifecycle implementation
Use this method to get a bus instance bound to the given context. If instance does not yet exist in the context, a new instance will be created. Otherwise existing instance gets returned. <p>Bus instance can be bound to a context. <p>If you need a singleton instance existing only once for the whole application, provide application context here. This option can be chosen for <code>Activity</code> to <code>Service</code> communication. <p> If you need a bus instance per <code>Activity</code>, you have to provide activity context in there. This option is perfect for <code>Activity</code> to <code>Fragment</code> or <code>Fragment</code> to <code>Fragment</code> communication. <p> Bus instance gets destroyed when your context is destroyed.
-- public api
-- wireable implementation
-- delayed events
Returns true if we have enough samples and more than 3/4 of those samples are accelerating.
Set color to apply to the progress bar. Automatically enables usage of the custom color. Use {@link #setProgressBarColorEnabled(boolean)} to disable and re-enable the custom color usage. <p/> The best way to apply a color is to load the color from resources: {@code setProgressBarColor(getResources().getColor(R.color.your_color_name))}.
Enable or disable the use of a custom progress bar color. You can set what color to use with {@link #setProgressBarColor(int)}, which also automatically enables custom color usage.
Set Text to show to tell the user that a refresh is currently in progress.
Get a PullToRefreshAttacher for this Activity. If there is already a PullToRefreshAttacher attached to the Activity, the existing one is returned, otherwise a new instance is created. This version of the method will use default configuration options for everything.
Get a PullToRefreshAttacher for this Activity. If there is already a PullToRefreshAttacher attached to the Activity, the existing one is returned, otherwise a new instance is created.
Add a view which will be used to initiate refresh requests and a listener to be invoked when a refresh is started. This version of the method will try to find a handler for the view from the built-in view delegates.
Add a view which will be used to initiate refresh requests, along with a delegate which knows how to handle the given view, and a listener to be invoked when a refresh is started.
Remove a view which was previously used to initiate refresh requests.
Clear all views which were previously used to initiate refresh requests.
This method should be called by your Activity's or Fragment's onConfigurationChanged method.
Call this when your refresh is complete and this view should reset itself (header view will be hidden). This is the equivalent of calling <code>setRefreshing(false)</code>.
Set a {@link HeaderViewListener} which is called when the visibility state of the Header View has changed.
Set the {@link PullToRefreshAttacher} to be used with this layout. The view which is added to this layout will automatically be added as a refreshable-view in the attacher.
Returns the individual undo message for this item shown in the popup dialog.
Constructs a new swipe-to-dismiss touch listener for the given list view. she would like to dismiss one or more list items.
Enables or disables (pauses or resumes) watching for swipe-to-dismiss gestures.
Sets the time in milliseconds after which the undo popup automatically disappears.
Sets the offset, in dips, of the x position of the undo popup.
Sets the offset, in dips, of the y position of the undo popup.
Sets the Gravity controlling the placement of the undo popup.
Sets the directions in which a list item can be swiped to delete. By default this is set to {@link SwipeDirection#BOTH} so that an item can be swiped into both directions.
Sets the string shown in the undo popup. This will only show if the {@link Undoable} returned by the {@link OnDismissCallback} returns {@code null} from its {@link Undoable#getTitle()} method.
Sets the string shown in the undo popup, when {@link UndoMode} is set to {@link UndoMode#MULTI_UNDO} or {@link UndoMode#COLLAPSED_UNDO} and multiple deletions has been stored for undo. If this string contains one {@code %d} inside, this will be filled by the numbers of stored undos.
Discard all stored undos and hide the undo popup dialog.
Returns an {@link android.widget.AbsListView.OnScrollListener} to be added to the {@link ListView} using {@link ListView#setOnScrollListener(android.widget.AbsListView.OnScrollListener)}. If a scroll listener is already assigned, the caller should still pass scroll changes through to this listener. This will ensure that this {@link SwipeDismissListViewTouchListener} is paused during list view scrolling.</p>
Changes text in the popup depending on stored undos.
Creates a new instance.
Creates a sharing {@link Intent}.
Copies a private raw resource content to a publicly readable file such that the latter can be shared with other applications.
Create a new instance of MyFragment that will be initialized with the given arguments.
Parse attributes during inflation from a view hierarchy into the arguments we handle.
During creation, if arguments have been supplied to the fragment then parse those out.
Create the view for this fragment, using the arguments given to it.
Create a new instance of MyDialogFragment, providing "num" as an argument.
Helper function to show the details of a selected item, either by displaying a fragment in-place in the current UI, or starting a whole new activity in which it is displayed.
Create a new instance of DetailsFragment, initialized to show the text at 'index'.
Update fragment visibility when check boxes are changed.
Update fragment visibility based on current check box state.
This is the thread that will do our work.  It sits in a loop running the progress up until it has reached the top, then stops and waits.
API for our UI to restart the progress thread.
Perform alphabetical comparison of application entry objects.
This is where the bulk of our work is done.  This function is called in a background thread and should generate a new set of data to be published by the loader.
Called when there is new data to deliver to the client.  The super class will take care of delivering it; the implementation here just adds a little more logic.
Handles a request to start the Loader.
Handles a request to stop the Loader.
Handles a request to cancel a load.
Handles a request to completely reset the Loader.
Helper function to take care of releasing resources associated with an actively loaded data set.
Populate new items in the list.
Global provider initialization.
Create a new instance of CountingFragment, providing "num" as an argument.
need a public empty constructor for framework to instantiate
Get the stored key - secret pair for authenticating the user
Store the key - secret pair for an authenticated user.
Clear the stored keys, either because they are bad, or user has requested
Returns the client associated with the passed in token does not switch the client
FOR TESTING ONLY, DO NOT USE IN APPLICATION
FOR TESTING ONLY, DO NOT USE IN APPLICATION
FOR TESTING ONLY, DO NOT USE IN APPLICATION
FOR TESTING ONLY, DO NOT USE IN APPLICATION
Retrieves the sort selection by its id, default to PRIORITY_DESC if no matching sort is found
TODO need a better solution (TaskFormatter?) here
Returns the fully extended priority order: A - Z, None, Completed
Calculates the cursor position when a string changes based on the cursor position prior to the change
This method returns a String representing the relative date by comparing the Calendar being passed in to the date / time that it is right now.
This method returns a String representing the relative date by comparing the Date being passed in to the date / time that it is right now.
Inserts a given string into another padding it with spaces. Is aware if the insertion point has a space on either end and does not add extra spaces.
Inserts a given string into another padding it with spaces. Is aware if the insertion point has a space on either end and does not add extra spaces. If the string-to-insert is already present (and not part of another word) we return the original string unchanged.
Checks the passed in string to see if it is null or an empty string
Checks the passed in string to see if it is null, empty, or blank; where 'blank' is defined as consisting entirely of whitespace.
Handle help message
Returns true if the left drawer is shown.
Are we currently pushing or pulling remote data?
If we previously tried to push and failed, then attempt to push again now. Otherwise, pull.
Check network status, then push.
Check network status, then pull.
Do asynchronous push with gui changes. Do availability check first.
Do an asynchronous pull from remote. Check network availability before calling this.
Accessor methods for preference keys go here
Accessor methods for preference values go here
Returns the most recent version to have successfully run upgrade tasks. Returns 0 if upgrade tasks have never been run.
Store the current application version so that we know when we have been upgraded.
Utility methods go here
Handle "add task" action.
Handle "refresh/download" action.
Handle clear filter click
Priority descending should list all of the tasks with the primary sort on Priority (A -> Z, None, Completed) and the secondary sort on Line ID ascending.
ID descending sort is simply the line ID in descending order.
Programmatically build up the view hierarchy to avoid the need for resources.
remove the configurator from its parent and clean up springs and listeners
reload the springs from the registry and update the UI
update the position of the seekbars based on the spring value;
Remove all elements from the list.
Create an Android {@link com.facebook.rebound.SpringLooper} for the detected Android platform.
create a new BaseSpringSystem
check if the system is idle
create a spring with a random uuid for its name.
get a spring by name
return all the springs in the simulator
Registers a Spring to this BaseSpringSystem so it can be iterated if active.
Deregisters a Spring from this BaseSpringSystem, so it won't be iterated anymore. The Spring should not be used anymore after doing this.
update the springs in the system
loop the system until idle
it has reached a state where it needs to be iterated. This will add the spring to the list of active springs on this system and start the iteration if the system was idle before this call.
create a new spring
Destroys this Spring, meaning that it will be deregistered from its BaseSpringSystem so it won't be iterated anymore and will clear its set of listeners. Do not use the Spring after calling this, doing so may just cause an exception to be thrown.
get the unique id for this spring
set the config class
retrieve the spring config for this spring
Set the displaced value to determine the displacement for the spring from the rest value. This value is retained and used to calculate the displacement ratio. This also updates the start value of the Spring.
Get the displacement value from the last time setCurrentValue was called.
Get the current
get the displacement of the springs current value from its rest value.
get the displacement from rest for a given physics state
set the rest value to determine the displacement for the spring
get the rest value used for determining the displacement of the spring
set the velocity on the spring in pixels per second
get the velocity of the spring
Sets the speed at which the spring should be considered at rest.
Returns the speed at which the spring should be considered at rest in pixels per second
set the threshold of displacement from rest below which the spring should be considered at rest
get the threshold of displacement from rest below which the spring should be considered at rest
Force the spring to clamp at its end value to avoid overshooting the target value.
Check if overshoot clamping is enabled.
Check if the spring is overshooting beyond its target.
advance the physics simulation in SOLVER_TIMESTEP_SEC sized chunks to fulfill the required realTimeDelta. The math is inlined inside the loop since it made a huge performance impact when there are several springs being advanced.
Check if this spring should be advanced by the system.  * The rule is if the spring is currently at rest and it was at rest in the previous advance, the system can skip this spring
Check if the spring was at rest in the prior iteration. This is used for ensuring the ending callbacks are fired as the spring comes to a rest.
check if the current state is at rest
Set the spring to be at rest by making its end value equal to its current value and setting velocity to 0.
linear interpolation between the previous and current physics state based on the amount of timestep remaining after processing the rendering delta time in timestep sized chunks.
add a listener
remove a listener
remove all of the listeners
This method checks to see that the current spring displacement value is equal to the input, accounting for the spring's rest displacement threshold. value, accounting for threshold
constructor for the SpringConfig
A helper to make creating a SpringConfig easier with values mapping to the Origami values.
constructor for the SpringConfigRegistry
add a SpringConfig to the registry
remove a specific SpringConfig from the registry
retrieve all SpringConfig in the registry
clear all SpringConfig in the registry
Set the BaseSpringSystem that the SpringLooper will call back to.
Create a new SpringSystem providing the appropriate constructor parameters to work properly in an Android environment.
Map a value within a given range to another range.
Clamp a value to be within the provided range.
As the mCurrentSequence will be incremented by one after called PlayInSequence
Check Overlay
Check onClickListener and Overlay
Show an event in the LogCat view, for debugging
Convenient method to obtain screen width in pixel
Convenient method to obtain screen height in pixel
Set background color
Set to true if you want to block all user input to pass through this overlay, set to false if you want to allow user input under the overlay
Set enter animation
Set exit animation
Set onClickListener for the Overlay
Set color
Set gravity
sets the parent TourGuide that will run this Sequence
This might not be useful, but who knows.. maybe someone needs it
TODO: this is an uncompleted feature, make it private first This is intended to be used to disable the button, so people cannot click on in during a Tour, instead, people can only click on Next button or Overlay to proceed
Set title text
Set description text
Set text color
Set exit animation Set the gravity, the setGravity is centered relative to the targeted button
Set if you want to have setShadow
Static builder
Setter for the animation to be used
Sets which motion type is motionType
Sets the duration
Sets the overlay
Set the toolTip
Set the Pointer
Clean up the tutorial that is added to the activity
Sequence related method
Private methods TODO: move into Pointer
TODO: move into Pointer
Sets the type of changing animation that will be run, one of {@link #CHANGE_BEHAVIOR_KEEP}, {@link #CHANGE_BEHAVIOR_OUT}, {@link #CHANGE_BEHAVIOR_IN}, and {@link #CHANGE_BEHAVIOR_OUT_IN}.
Returns the type of changing animation that will be run. {@link #CHANGE_BEHAVIOR_IN}, or {@link #CHANGE_BEHAVIOR_OUT_IN}.
Sets the type of fading animation that will be run, one of {@link #FADE_BEHAVIOR_CROSSFADE} and {@link #FADE_BEHAVIOR_REVEAL}.
Returns the fading behavior of the animation.
Sets the type of resizing behavior that will be used during the transition animation, one of {@link #RESIZE_BEHAVIOR_NONE} and {@link #RESIZE_BEHAVIOR_SCALE}.
Returns the resizing behavior of the animation.
Create a new empty ArrayMap.  The default capacity of an array map is 0, and will grow once items are added to it.
Special fast path for appending items to the end of the array without validation. The array must already be large enough to contain the item.
------------------------------------------------------------------------ Interop with traditional Java containers.  Not as efficient as using specialized collection APIs. ------------------------------------------------------------------------
Remove all keys in the array map that do <b>not</b> exist in the given collection.
Constructs a RectEvaluator that modifies and returns <code>reuseRect</code> in {@link #evaluate(float, android.graphics.Rect, android.graphics.Rect)} calls. The value returned from {@link #evaluate(float, android.graphics.Rect, android.graphics.Rect)} should not be cached because it will change over time as the object is reused on each call.
Change the visibility of the View without triggering any other changes. This is important for transitions, where visibility changes should not adjust focus or trigger a new layout. This is only used when the visibility has already been changed and we need a transient value during an animation. When the animation completes, the original visibility value is always restored.
Sets the minimum arc along the circle between two points aligned near horizontally. When start and end points are close to horizontal, the calculated center point of the circle will be far from both points, giving a near straight path between the points. By setting a minimum angle, this forces the center point to be closer and give an exaggerated curve to the path. <p>The default value is 0.</p>
Returns the minimum arc along the circle between two points aligned near horizontally. When start and end points are close to horizontal, the calculated center point of the circle will be far from both points, giving a near straight path between the points. By setting a minimum angle, this forces the center point to be closer and give an exaggerated curve to the path. <p>The default value is 0.</p>
Sets the minimum arc along the circle between two points aligned near vertically. When start and end points are close to vertical, the calculated center point of the circle will be far from both points, giving a near straight path between the points. By setting a minimum angle, this forces the center point to be closer and give an exaggerated curve to the path. <p>The default value is 0.</p>
Returns the minimum arc along the circle between two points aligned near vertically. When start and end points are close to vertical, the calculated center point of the circle will be far from both points, giving a near straight path between the points. By setting a minimum angle, this forces the center point to be closer and give an exaggerated curve to the path. <p>The default value is 0.</p>
Sets the maximum arc along the circle between two points. When start and end points have close to equal x and y differences, the curve between them is large. This forces the curved path to have an arc of at most the given angle. <p>The default value is 70 degrees.</p>
Returns the maximum arc along the circle between two points. When start and end points have close to equal x and y differences, the curve between them is large. This forces the curved path to have an arc of at most the given angle. <p>The default value is 70 degrees.</p>
Constructs an AutoTransition object, which is a TransitionSet which first fades out disappearing targets, then moves and resizes existing targets, and finally fades in appearing targets.
When <code>resizeClip</code> is true, ChangeBounds resizes the view using the clipBounds instead of changing the dimensions of the view during the animation. When <code>resizeClip</code> is false, ChangeBounds resizes the View by changing its dimensions. <p>When resizeClip is set to true, the clip bounds is modified by ChangeBounds. Therefore, {@link android.transition.ChangeClipBounds} is not compatible with ChangeBounds in this mode.</p>
Returns true when the ChangeBounds will resize by changing the clip bounds during the view animation or false when bounds are changed. The default value is false. view animation or false when bounds are changed. The default value is false.
Setting this flag tells ChangeBounds to track the before/after parent of every view using this transition. The flag is not enabled by default because it requires the parent instances to be the same in the two scenes or else all parents must use ids to allow the transition to determine which parents are the same. transitions between different parents.
Returns whether changes to parent should use an overlay or not. When the parent change doesn't use an overlay, it affects the transforms of the child. The default value is <code>true</code>. <p>Note: when Overlays are not used when a parent changes, a view can be clipped when it moves outside the bounds of its parent. Setting {@link android.view.ViewGroup#setClipChildren(boolean)} and {@link android.view.ViewGroup#setClipToPadding(boolean)} can help. Also, when Overlays are not used and the parent is animating its location, the position of the child view will be relative to its parent's final position, so it may appear to "jump" at the beginning.</p> inside the scene root's overlay or <code>false</code> if a parent change only affects the transform of the transitioning view.
Sets whether changes to parent should use an overlay or not. When the parent change doesn't use an overlay, it affects the transforms of the child. The default value is <code>true</code>. <p>Note: when Overlays are not used when a parent changes, a view can be clipped when it moves outside the bounds of its parent. Setting {@link android.view.ViewGroup#setClipChildren(boolean)} and {@link android.view.ViewGroup#setClipToPadding(boolean)} can help. Also, when Overlays are not used and the parent is animating its location, the position of the child view will be relative to its parent's final position, so it may appear to "jump" at the beginning.</p> inside the scene root's overlay or <code>false</code> if a parent change only affects the transform of the transitioning view.
Returns whether parent changes will be tracked by the ChangeTransform. If parent changes are tracked, then the transform will adjust to the transforms of the different parents. If they aren't tracked, only the transforms of the transitioning view will be tracked. Default is true.
Sets whether parent changes will be tracked by the ChangeTransform. If parent changes are tracked, then the transform will adjust to the transforms of the different parents. If they aren't tracked, only the transforms of the transitioning view will be tracked. Default is true.
Sets the speed at which transition propagation happens, relative to the duration of the Transition. A <code>propagationSpeed</code> of 1 means that a View centered farthest from the epicenter and View centered at the epicenter will have a difference in start delay of approximately the duration of the Transition. A speed of 2 means the start delay difference will be approximately half of the duration of the transition. A value of 0 is illegal, but negative values will invert the propagation.
Constructs a Fade transition that will fade targets in and/or out, according to the value of fadingMode.
Utility method to handle creating and running the Animator.
Constructs a PatternPathMotion with a straight-line pattern.
Creates a PatternPathMotion with the Path defining a pattern of motion between two coordinates. The pattern will be translated, rotated, and scaled to fit between the start and end points. The pattern must not be empty and must have the end point differ from the start point.
Returns the Path defining a pattern of motion between two coordinates. The pattern will be translated, rotated, and scaled to fit between the start and end points. The pattern must not be empty and must have the end point differ from the start point.
Sets the Path defining a pattern of motion between two coordinates. The pattern will be translated, rotated, and scaled to fit between the start and end points. The pattern must not be empty and must have the end point differ from the start point.
Returns a Scene described by the resource file associated with the given <code>layoutId</code> parameter. If such a Scene has already been created, that same Scene will be returned. This caching of layoutId-based scenes enables sharing of common scenes between those created in code and those referenced by {@link TransitionManager} XML resource files.
Constructs a Scene with no information about how values will change when this scene is applied. This constructor might be used when a Scene is created with the intention of being dynamically configured, through setting {@link #setEnterAction(Runnable)} and possibly {@link #setExitAction(Runnable)}.
Constructs a Scene which, when entered, will remove any children from the sceneRoot container and will inflate and add the hierarchy specified by the layoutId resource file. <p/> <p>This method is hidden because layoutId-based scenes should be
Constructs a Scene which, when entered, will remove any children from the sceneRoot container and add the layout object as a new child of that container.
You can use {@link #Scene(ViewGroup, View)}.
Gets the root of the scene, which is the root of the view hierarchy affected by changes due to this scene, and which will be animated when this scene is entered.
Exits this scene, if it is the current scene on the scene's {@link #getSceneRoot() scene root}. The current scene is set when {@link #enter() entering} a scene. Exiting a scene runs the {@link #setExitAction(Runnable) exit action} if there is one.
Enters this scene, which entails changing all values that are specified by this scene. These may be values associated with a layout view group or layout resource file which will now be added to the scene root, or it may be values changed by an {@link #setEnterAction(Runnable)} enter action}, or a combination of the these. No transition will be run when the scene is entered. To get transition behavior in scene changes, use one of the methods in {@link TransitionManager} instead.
Set the scene that the given view is in. The current scene is set only on the root view of a scene, not for every view in that hierarchy. This information is used by Scene to determine whether there is a previous scene which should be exited before the new scene is entered.
Gets the current {@link android.transition.Scene} set on the given view. A scene is set on a view only if that view is the scene root. no Scene is currently set.
Scenes that are not defined with layout resources or hierarchies, or which need to perform additional steps after those hierarchies are changed to, should set an enter action, and possibly an exit action as well. An enter action will cause Scene to call back into application code to do anything else the application needs after transitions have captured pre-change values and after any other scene changes have been applied, such as the layout (if any) being added to the view hierarchy. After this method is called, Transitions will be played.
Scenes that are not defined with layout resources or hierarchies, or which need to perform additional steps after those hierarchies are changed to, should set an enter action, and possibly an exit action as well. An exit action will cause Scene to call back into application code to do anything the application needs to do after applicable transitions have captured pre-change values, but before any other scene changes have been applied, such as the new layout (if any) being added to the view hierarchy. After this method is called, the next scene will be entered, including a call to {@link #setEnterAction(Runnable)} if an enter action is set.
by the layoutId passed into {@link #getSceneForLayout(android.view.ViewGroup, int, android.content.Context)}. This is called by TransitionManager to determine whether it is safe for views from this scene to be removed from their parents when the scene is exited, which is used by {@link Fade} to fade these views out (the views must be removed from their parent in order to add them to the overlay for fading purposes). If a Scene is not based on a resource file, then the impact of removing views arbitrarily is unknown and should be avoided.
Sets the side that is used to calculate the transition propagation. If the transitioning View is visible in the start of the transition, then it will transition sooner when closer to the side and later when farther. If the view is not visible in the start of the transition, then it will transition later when closer to the side and sooner when farther from the edge. The default is {@link Gravity#BOTTOM}.
Sets the speed at which transition propagation happens, relative to the duration of the Transition. A <code>propagationSpeed</code> of 1 means that a View centered at the side set in {@link #setSide(int)} and View centered at the opposite edge will have a difference in start delay of approximately the duration of the Transition. A speed of 2 means the start delay difference will be approximately half of the duration of the transition. A value of 0 is illegal, but negative values will invert the propagation.
Constructor using the default {@link Gravity#BOTTOM} slide edge direction.
Constructor using the provided slide edge direction.
Perform inflation from XML and apply a class-specific base style from a theme attribute or style resource. This constructor of Transition allows subclasses to use their own base style when they are inflating.
Sets the duration of this transition. By default, there is no duration the transition will have its own specified duration. If the duration of a Transition is set, that duration will override the Animator duration.
Returns the duration set on this transition. If no duration has been set, the returned value will be negative, indicating that resulting animators will retain their own durations. set, otherwise returns a negative number.
Sets the startDelay of this transition. By default, there is no delay the transition will have its own specified startDelay. If the delay of a Transition is set, that delay will override the Animator delay.
Returns the startDelay set on this transition. If no startDelay has been set, the returned value will be negative, indicating that resulting animators will retain their own startDelays. been set, otherwise returns a negative number.
Sets the interpolator of this transition. By default, the interpolator will have its own specified interpolator. If the interpolator of a Transition is set, that interpolator will override the Animator interpolator.
Returns the interpolator set on this transition. If no interpolator has been set, the returned value will be null, indicating that resulting animators will retain their own interpolators. returns null.
Returns the set of property names used stored in the {@link TransitionValues} object passed into {@link #captureStartValues(TransitionValues)} that this transition cares about for the purposes of canceling overlapping animations. When any transition is started on a given scene root, all transitions currently running on that same scene root are checked to see whether the properties on which they based their animations agree with the end values of the same properties in the new transition. If the end values are not equal, then the old animation is canceled since the new transition will start a new animation to these new values. If the values are equal, the old animation is allowed to continue and no new animation is started for that transition. <p/> <p>A transition does not need to override this method. However, not doing so will mean that the cancellation logic outlined in the previous paragraph will be skipped for that transition, possibly leading to artifacts as old transitions and new transitions on the same targets run in parallel, animating views toward potentially different end values.</p> {@link TransitionValues}. The default implementation returns <code>null</code>.
This method creates an animation that will be run for this transition given the information in the startValues and endValues structures captured earlier for the start and end scenes. Subclasses of Transition should override this method. The method should only be called by the transition system; it is not intended to be called from external classes. <p/> <p>This method is called by the transition's parent (all the way up to the topmost Transition in the hierarchy) with the sceneRoot and start/end values that the transition may need to set up initial target values and construct an appropriate animation. For example, if an overall Transition is a {@link TransitionSet} consisting of several child transitions in sequence, then some of the child transitions may want to set initial values on target views prior to the overall Transition commencing, to put them in an appropriate state for the delay between that start and the child Transition start time. For example, a transition that fades an item in may wish to set the starting alpha value to 0, to avoid it blinking in prior to the transition actually starting the animation. This is necessary because the scene change that triggers the Transition will automatically set the end-scene on all target views, so a Transition that wants to animate from a different value should set that value prior to returning from this method.</p> <p/> <p>Additionally, a Transition can perform logic to determine whether the transition needs to run on the given target and start/end values. For example, a transition that resizes objects on the screen may wish to avoid running for views which are not present in either the start or end scenes.</p> <p/> <p>If there is an animator created and returned from this method, the transition mechanism will apply any applicable duration, startDelay, and interpolator to that animation and start it. A return value of <code>null</code> indicates that no animation should run. The default implementation returns null.</p> <p/> <p>The method is called for every applicable target object, which is stored in the {@link TransitionValues#view} field.</p> overall transition for this scene change. A null value means no animation should be run.
Sets the order in which Transition matches View start and end values. <p> The default behavior is to match first by {@link android.view.View#getTransitionName()}, then by View instance, then by {@link android.view.View#getId()} and finally by its item ID if it is in a direct child of ListView. The caller can choose to have only some or all of the values of {@link #MATCH_INSTANCE}, {@link #MATCH_NAME}, {@link #MATCH_ITEM_ID}, and {@link #MATCH_ID}. Only the match algorithms supplied will be used to determine whether Views are the the same in both the start and end Scene. Views that do not match will be considered as entering or leaving the Scene. </p>
Match start/end values by View instance. Adds matched values to mStartValuesList and mEndValuesList and removes them from unmatchedStart and unmatchedEnd.
Match start/end values by Adapter item ID. Adds matched values to mStartValuesList and mEndValuesList and removes them from unmatchedStart and unmatchedEnd, using startItemIds and endItemIds as a guide for which Views have unique item IDs.
Match start/end values by Adapter view ID. Adds matched values to mStartValuesList and mEndValuesList and removes them from unmatchedStart and unmatchedEnd, using startIds and endIds as a guide for which Views have unique IDs.
Match start/end values by Adapter transitionName. Adds matched values to mStartValuesList and mEndValuesList and removes them from unmatchedStart and unmatchedEnd, using startNames and endNames as a guide for which Views have unique transitionNames.
Adds all values from unmatchedStart and unmatchedEnd to mStartValuesList and mEndValuesList, assuming that there is no match between values in the list.
This method, essentially a wrapper around all calls to createAnimator for all possible target views, is called with the entire set of start/end values. The implementation in Transition iterates through these lists and calls {@link #createAnimator(ViewGroup, TransitionValues, TransitionValues)} with each set of start/end values on this transition. The TransitionSet subclass overrides this method and delegates it to each of its children in succession.
Internal utility method for checking whether a given view/id is valid for this transition, where "valid" means that either the Transition has no target/targetId list (the default, in which cause the transition should act on all views in the hiearchy), or the given view is in the target list or the view id is in the targetId list. If the target parameter is null, then the target list is not checked (this is in the case of ListView items, where the views are ignored and only the ids are used).
This is called internally once all animations have been set up by the transition hierarchy.
Adds the id of a target view that this Transition is interested in animating. By default, there are no targetIds, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetIds constrains the Transition to only listen for, and act on, views with these IDs. Views with different IDs, or no IDs whatsoever, will be ignored. <p/> <p>Note that using ids to specify targets implies that ids should be unique within the view hierarchy underneath the scene root.</p> Returning the same object makes it easier to chain calls during construction, such as <code>transitionSet.addTransitions(new Fade()).addTarget(someId);</code>
Adds the transitionName of a target view that this Transition is interested in animating. By default, there are no targetNames, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetNames constrains the Transition to only listen for, and act on, views with these transitionNames. Views with different transitionNames, or no transitionName whatsoever, will be ignored. <p>Note that transitionNames should be unique within the view hierarchy.</p> Returning the same object makes it easier to chain calls during construction, such as <code>transitionSet.addTransitions(new Fade()).addTarget(someName);</code>
Adds the Class of a target view that this Transition is interested in animating. By default, there are no targetTypes, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetTypes constrains the Transition to only listen for, and act on, views with these classes. Views with different classes will be ignored. <p>Note that any View that can be cast to targetType will be included, so if targetType is <code>View.class</code>, all Views will be included.</p> Returning the same object makes it easier to chain calls during construction, such as <code>transitionSet.addTransitions(new Fade()).addTarget(ImageView.class);</code>
Removes the given targetName from the list of transitionNames that this Transition is interested in animating. Returning the same object makes it easier to chain calls during construction, such as <code>transitionSet.addTransitions(new Fade()).removeTargetName(someName);</code>
Removes the given targetId from the list of ids that this Transition is interested in animating. Returning the same object makes it easier to chain calls during construction, such as <code>transitionSet.addTransitions(new Fade()).removeTargetId(someId);</code>
Whether to add the given id to the list of target ids to exclude from this transition. The <code>exclude</code> parameter specifies whether the target should be added to or removed from the excluded list. <p/> <p>Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, {@link Spinner}).</p>
Whether to add the given transitionName to the list of target transitionNames to exclude from this transition. The <code>exclude</code> parameter specifies whether the target should be added to or removed from the excluded list. <p>Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded by their id, their instance reference, their transitionName, or by the Class of that view (eg, {@link Spinner}).</p> current list of excluded targets.
Whether to add the children of the given id to the list of targets to exclude from this transition. The <code>exclude</code> parameter specifies whether the children of the target should be added to or removed from the excluded list. Excluding children in this way provides a simple mechanism for excluding all children of specific targets, rather than individually excluding each child individually. <p/> <p>Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, {@link Spinner}).</p>
Whether to add the given target to the list of targets to exclude from this transition. The <code>exclude</code> parameter specifies whether the target should be added to or removed from the excluded list. <p/> <p>Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, {@link Spinner}).</p>
Whether to add the children of given target to the list of target children to exclude from this transition. The <code>exclude</code> parameter specifies whether the target should be added to or removed from the excluded list. <p/> <p>Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, {@link Spinner}).</p>
Utility method to manage the boilerplate code that is the same whether we are excluding targets or their children.
Whether to add the given type to the list of types to exclude from this transition. The <code>exclude</code> parameter specifies whether the target type should be added to or removed from the excluded list. <p/> <p>Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, {@link Spinner}).</p>
Whether to add the given type to the list of types whose children should be excluded from this transition. The <code>exclude</code> parameter specifies whether the target type should be added to or removed from the excluded list. <p/> <p>Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, {@link Spinner}).</p>
Sets the target view instances that this Transition is interested in animating. By default, there are no targets, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targets constrains the Transition to only listen for, and act on, these views. All other views will be ignored. <p/> <p>The target list is like the {@link #addTarget(int) targetId} list except this list specifies the actual View instances, not the ids of the views. This is an important distinction when scene changes involve view hierarchies which have been inflated separately; different views may share the same id but not actually be the same instance. If the transition should treat those views as the same, then {@link #addTarget(int)} should be used instead of {@link #addTarget(View)}. If, on the other hand, scene changes involve changes all within the same view hierarchy, among views which do not necessarily have ids set on them, then the target list of views may be more convenient.</p> Returning the same object makes it easier to chain calls during construction, such as <code>transitionSet.addTransitions(new Fade()).addTarget(someView);</code>
Removes the given target from the list of targets that this Transition is interested in animating. Returning the same object makes it easier to chain calls during construction, such as <code>transitionSet.addTransitions(new Fade()).removeTarget(someView);</code>
Removes the given target from the list of targets that this Transition is interested in animating. Returning the same object makes it easier to chain calls during construction, such as <code>transitionSet.addTransitions(new Fade()).removeTarget(someType);</code>
Returns the list of target IDs that this transition limits itself to tracking and animating. If the list is null or empty for {@link #getTargetIds()}, {@link #getTargets()}, {@link #getTargetNames()}, and {@link #getTargetTypes()} then this transition is not limited to specific views, and will handle changes to any views in the hierarchy of a scene change.
Returns the list of target views that this transition limits itself to tracking and animating. If the list is null or empty for {@link #getTargetIds()}, {@link #getTargets()}, {@link #getTargetNames()}, and {@link #getTargetTypes()} then this transition is not limited to specific views, and will handle changes to any views in the hierarchy of a scene change.
Returns the list of target transitionNames that this transition limits itself to tracking and animating. If the list is null or empty for {@link #getTargetIds()}, {@link #getTargets()}, {@link #getTargetNames()}, and {@link #getTargetTypes()} then this transition is not limited to specific views, and will handle changes to any views in the hierarchy of a scene change.
To be removed before L release.
Returns the list of target transitionNames that this transition limits itself to tracking and animating. If the list is null or empty for {@link #getTargetIds()}, {@link #getTargets()}, {@link #getTargetNames()}, and {@link #getTargetTypes()} then this transition is not limited to specific views, and will handle changes to any views in the hierarchy of a scene change.
Recursive method that captures values for the given view and the hierarchy underneath it. false otherwise
Clear valuesMaps for specified start/end state
Recursive method which captures values for an entire view hierarchy, starting at some root view. Transitions without targetIDs will use this method to capture values for all possible views. will also be captured, recursively down to the leaf nodes. otherwise.
This method can be called by transitions to get the TransitionValues for any particular view during the transition-playing process. This might be necessary, for example, to query the before/after state of related views for a given transition.
Find the matched start or end value for a given View. This is only valid after playTransition starts. For example, it will be valid in {@link #createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues)}, but not in {@link #captureStartValues(TransitionValues)}. on viewInStart or null if there is no match for the given view.
Pauses this transition, sending out calls to {@link TransitionListener#onTransitionPause(Transition)} to all listeners and pausing all running animators started by this transition.
Resumes this transition, sending out calls to {@link TransitionListener#onTransitionPause(Transition)} to all listeners and pausing all running animators started by this transition.
Called by TransitionManager to play the transition. This calls createAnimators() to set things up and create all of the animations and then runAnimations() to actually start the animations.
Returns whether or not the transition should create an Animator, based on the values captured during {@link #captureStartValues(TransitionValues)} and {@link #captureEndValues(TransitionValues)}. The default implementation compares the property values returned from {@link #getTransitionProperties()}, or all property values if {@code getTransitionProperties()} returns null. Subclasses may override this method to provide logic more specific to the transition implementation.
This is a utility method used by subclasses to handle standard parts of setting up and running an Animator: it sets the {@link #getDuration() duration} and the {@link #getStartDelay() startDelay}, starts the animation, and, when the animator ends, calls {@link #end()}.
This method is called automatically by the transition and TransitionSet classes prior to a Transition subclass starting; subclasses should not need to call it directly.
This method is called automatically by the Transition and TransitionSet classes when a transition finishes, either because a transition did nothing (returned a null Animator from {@link Transition#createAnimator(ViewGroup, TransitionValues, TransitionValues)}) or because the transition returned a valid Animator and end() was called in the onAnimationEnd() callback of the AnimatorListener.
This method cancels a transition that is currently running.
Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end.
Sets the callback to use to find the epicenter of a Transition. A null value indicates that there is no epicenter in the Transition and onGetEpicenter() will return null. Transitions like {@link Explode} use a point or Rect to orient the direction of travel. This is called the epicenter of the Transition and is typically centered on a touched View. The {@link Transition.EpicenterCallback} allows a Transition to dynamically retrieve the epicenter during a Transition.
Returns the callback used to find the epicenter of the Transition. Transitions like {@link Explode} use a point or Rect to orient the direction of travel. This is called the epicenter of the Transition and is typically centered on a touched View. The {@link Transition.EpicenterCallback} allows a Transition to dynamically retrieve the epicenter during a Transition.
Returns the epicenter as specified by the {@link Transition.EpicenterCallback} or null if no callback exists. {@link Transition.EpicenterCallback} or null if no callback exists.
Sets the algorithm used to calculate two-dimensional interpolation. <p> </p> <p> <pre> {@code &lt;changeBounds> &lt;/changeBounds> </pre> <p>or</p> <pre> {@code &lt;changeBounds> &lt;arcMotion android:minimumHorizontalAngle="15" &lt;/changeBounds> </pre>
Returns the algorithm object used to interpolate along two dimensions. This is typically used to determine the View motion between two points. <p> <pre> {@code &lt;changeBounds> &lt;/changeBounds>} </pre> <p>or</p> <pre> {@code &lt;changeBounds> &lt;arcMotion android:minimumHorizontalAngle="15" &lt;/changeBounds>} </pre>
Sets the method for determining Animator start delays. When a Transition affects several Views like {@link Explode} or {@link Slide}, there may be a desire to have a "wave-front" effect such that the Animator start delay depends on position of the View. The TransitionPropagation specifies how the start delays are calculated.
Returns the {@link TransitionPropagation} used to calculate Animator start delays. When a Transition affects several Views like {@link Explode} or {@link Slide}, there may be a desire to have a "wave-front" effect such that the Animator start delay depends on position of the View. The TransitionPropagation specifies how the start delays are calculated. delays. This is null by default.
Captures TransitionPropagation values for the given view and the hierarchy underneath it.
Sets the shared element names -- a mapping from a name at the start state to a different name at the end state.
Returns the name of this Transition. This name is used internally to distinguish between different transitions to determine when interrupting transitions overlap. For example, a ChangeBounds running on the same target view as another ChangeBounds should determine whether the old transition is animating to different end values and should be canceled in favor of the new transition. <p/> <p>By default, a Transition's name is simply the value of {@link Class#getName()}, but subclasses are free to override and return something different.</p>
Add the specified item to the list, returning the resulting list. The returned list can either the be same list passed in or, if that list was null, the new list that was created. <p/> Note that the list holds unique items; if the item already exists in the list, the list is not modified.
Remove the specified item from the list, returning the resulting list. The returned list can either the be same list passed in or, if that list becomes empty as a result of the remove(), the new list was created.
Obtains the TransitionInflater from the given context.
Loads a {@link Transition} object from a resource
Loads a {@link TransitionManager} object from a resource
Transition loading
TransitionManager loading
Sets the transition to be used for any scene change for which no other transition is explicitly set. The initial value is an {@link AutoTransition} instance.
Gets the current default transition. The initial value is an {@link AutoTransition} instance.
Sets a specific transition to occur when the given scene is entered.
Sets a specific transition to occur when the given pair of scenes is exited/entered.
Returns the Transition for the given scene being entered. The result depends not only on the given scene, but also the scene which the {@link Scene#getSceneRoot() sceneRoot} of the Scene is currently in. Transition was specified for this scene change, the default transition will be used instead.
This is where all of the work of a transition/scene-change is orchestrated. This method captures the start values for the given transition, exits the current Scene, enters the new scene, captures the end values for the transition, and finally plays the resulting values-populated transition.
Change to the given scene, using the appropriate transition for this particular scene change (as specified to the TransitionManager, or the default if no such transition exists).
Convenience method to simply change to the given scene using the default transition for TransitionManager.
Convenience method to simply change to the given scene using the given transition. <p/> <p>Passing in <code>null</code> for the transition parameter will result in the scene changing without any transition running, and is equivalent to calling {@link Scene#exit()} on the scene root's current scene, followed by {@link Scene#enter()} on the scene specified by the <code>scene</code> parameter.</p>
Convenience method to animate, using the default transition, to a new scene defined by all changes within the given scene root between calling this method and the next rendering frame. Equivalent to calling {@link #beginDelayedTransition(ViewGroup, Transition)} with a value of <code>null</code> for the <code>transition</code> parameter.
Convenience method to animate to a new scene defined by all changes within the given scene root between calling this method and the next rendering frame. Calling this method causes TransitionManager to capture current values in the scene root and then post a request to run a transition on the next frame. At that time, the new values in the scene root will be captured and changes will be animated. There is no need to create a Scene; it is implied by changes which take place between calling this method and the next frame when the transition begins. <p/> <p>Calling this method several times before the next frame (for example, if unrelated code also wants to make dynamic changes and run a transition on the same scene root), only the first call will trigger capturing values and exiting the current scene. Subsequent calls to the method with the same scene root during the same frame will be ignored.</p> <p/> <p>Passing in <code>null</code> for the transition parameter will cause the TransitionManager to use its default transition.</p>
Ends all pending and ongoing transitions on the specified scene root.
Returns is transition animations enabled. Animations was disabled for Android versions < 4.0
Sets the play order of this set's child transitions.
Returns the ordering of this TransitionSet. By default, the value is {@link #ORDERING_TOGETHER}. time, {@link #ORDERING_SEQUENTIAL} if they will play in sequence.
Adds child transition to this set. The order in which this child transition is added relative to other child transitions that are added, in addition to the {@link #getOrdering() ordering} property, determines the order in which the transitions are started. <p/> <p>If this transitionSet has a {@link #getDuration() duration} set on it, the child transition will inherit that duration. Transitions are assumed to have a maximum of one transitionSet parent.</p>
Adds child transition to array
Returns the number of child transitions in the TransitionSet.
Returns the child Transition at the specified position in the TransitionSet.
Removes the specified child transition from this set.
Sets up listeners for each of the child transitions. This is used to determine when this transition set is finished (all child transitions must finish first).
Creates a View using the bitmap copy of <code>view</code>. If <code>view</code> is large, the copy will use a scaled bitmap of the given view.
Get a copy of bitmap of given drawable, return null if intrinsic size is zero
Creates a Bitmap of the given view, using the Matrix matrix to transform to the local coordinates. <code>matrix</code> will be modified during the bitmap creation. <p>If the bitmap is large, it will be scaled uniformly down to at most 1MB size.</p>
Creates an animator that can be used for x and/or y translations. When interrupted, it sets a tag to keep track of the position so that it may be continued from position. a previous interruption, in which case it moves from the current position to (endX, endY).
Changes the transition to support appearing and/or disappearing Views, depending on <code>mode</code>.
Returns whether appearing and/or disappearing Views are supported. Returns whether appearing and/or disappearing Views are supported. A combination of
Returns whether the view is 'visible' according to the given values object. This is determined by testing the same properties in the values object that are used to determine whether the object is appearing or disappearing in the {@link Transition#createAnimator(ViewGroup, TransitionValues, TransitionValues)} method. This method can be called by, for example, subclasses that want to know whether the object is visible in the same way that Visibility determines it for the actual animation. false otherwise.
The default implementation of this method calls {@link #onAppear(ViewGroup, View, TransitionValues, TransitionValues)}. Subclasses should override this method or {@link #onAppear(ViewGroup, View, TransitionValues, TransitionValues)}. if they need to create an Animator when targets appear. The method should only be called by the Visibility class; it is not intended to be called from external classes. overall transition for this scene change. A null value means no animation should be run.
The default implementation of this method returns a null Animator. Subclasses should override this method to make targets appear with the desired transition. The method should only be called from {@link #onAppear(ViewGroup, TransitionValues, int, TransitionValues, int)}. overall transition for this scene change. A null value means no animation should be run.
Subclasses should override this method or {@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)} if they need to create an Animator when targets disappear. The method should only be called by the Visibility class; it is not intended to be called from external classes. <p> The default implementation of this method attempts to find a View to use to call {@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)}, based on the situation of the View in the View hierarchy. For example, if a View was simply removed from its parent, then the View will be added into a {@link android.view.ViewGroupOverlay} and passed as the <code>view</code> parameter in {@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)}. If a visible View is changed to be {@link View#GONE} or {@link View#INVISIBLE}, then it can be used as the <code>view</code> and the visibility will be changed to {@link View#VISIBLE} for the duration of the animation. However, if a View is in a hierarchy which is also altering its visibility, the situation can be more complicated. In general, if a view that is no longer in the hierarchy in the end scene still has a parent (so its parent hierarchy was removed, but it was not removed from its parent), then it will be left alone to avoid side-effects from improperly removing it from its parent. The only exception to this is if the previous {@link Scene} was {@link Scene#getSceneForLayout(ViewGroup, int, android.content.Context) created from a layout resource file}, then it is considered safe to un-parent the starting scene view in order to make it disappear.</p> overall transition for this scene change. A null value means no animation should be run.
The default implementation of this method returns a null Animator. Subclasses should override this method to make targets disappear with the desired transition. The method should only be called from {@link #onDisappear(ViewGroup, TransitionValues, int, TransitionValues, int)}. overall transition for this scene change. A null value means no animation should be run.
Returns {@link android.view.View#getVisibility()} for the View at the time the values were captured. were captured.
Returns the View's center x coordinate, relative to the screen, at the time the values were captured. were captured.
Returns the View's center y coordinate, relative to the screen, at the time the values were captured. were captured.
not important if Type.USER or Type.DEVICE
not really necessary but required for 100% test coverage
writing data and version should fail for an undefined storage type
checks the database size by querying the given {@param contentUri}
checks the database size by querying the given {@param contentUri}
checks the database size by querying the given {@param contentUri}
registers a listener which gets called when a tray preference is changed, added, or removed. This may be called even if a preference is set to its existing value. <p> The listener gets called on the same Looper you call this method. Registering it on the main tread causes the listener to call on the main thread, too.</p> <p> <strong>Caution:</strong> The storage does not store a strong reference to the listener. You must store a strong reference to the listener, or it will be susceptible to garbage collection. We recommend you keep a reference to the listener in the instance data of an object that will exist as long as you need the listener.</p> <p> don't forget to unregister the listener when no longer needed in {@link #unregisterOnTrayPreferenceChangeListener(OnTrayPreferenceChangeListener)}</p>
unregisters the previously registered callback
imports all data from an old storage. Use this if you have changed the module name <p> Call this in {@link #onCreate(int)}. The created and updated fields of the old {@link TrayItem}s will be lost. The old data gets deleted completely.
logs a warning that warns that the given value for the given key is null and null is only supported when reading it as a String and not other java primitives
{@link Preferences} allows access to a storage with unfriendly util functions like versioning and migrations of data
Called when this Preference is created for the first time. This is where the initial migration from other data source should happen.
works inverse to the {@link #onUpgrade(int, int)} method
Called when the Preference needs to be upgraded. Use this to migrate data in this Preference over time. <p> Once the version in the constructor is increased the next constructor call to this Preference will trigger an upgrade.
Changes the version of this preferences. checks for version changes and calls the correct handling methods. <pre> <ul> <li>{@link #onCreate(int)} when there is no previous version</li> <li>{@link #onUpgrade(int, int)} for an increasing version</li> <li>{@link #onDowngrade(int, int)} for a decreasing version</li> </ul> </pre> compareable to the mechanism in  {@link android.database.sqlite.SQLiteOpenHelper#getWritableDatabase()} package
Null-safe equivalent of {@code a.equals(b)}. Taken from {@link Objects#equals(Object, Object)} API level 19+ protected
Customize the log tag for your application, so that other apps using Tray don't mix their logs with yours. <p> Enable the log property for your tag before starting your app: <p> {@code adb shell setprop log.tag.&lt;tag&gt;}
Indicates where the data internally gets stored and how the backup is handled for the data
Creates a content observer.
{@link android.content.ContentResolver}
clear the data inside the preference and all evidence this preference has ever existed <p> also cleans internal information like the version for this preference
combines selection a and selection b to (a) AND (b). handles all cases if a or b are <code>null</code> or <code>""</code>
alternative arguments for {@link #extendSelectionArgs(String[], List)}
combines the selectionArgs analog to the selection itself with {@link #extendSelection(String, String)}. <p> <code>[a, b] , [c] -&gt; [a, b ,c]</code>
Tries to insert the values. If it fails because the item already exists it tries to update the item.
checks the uri for the backup param. default is that
use this only for tests and not in production
clears <b>all</b> Preferences saved. Module independent. Erases all preference data
clears <b>all</b> {@link TrayPreferences} but the modules stated.
saves the value into the database.
saves the value into the database combined with a previousKey.
wipes all data, including meta data for the preferences like the current version number.
clears stated modules.
clears <b>all</b> saved preferences. Module independent. <b>Erases everything</b>.
clears <b>all</b> saved preferences, but the stated modules.
Builds a list of all preferences saved in all modules.
clears <b>all</b> saved preferences. Module independent. <b>Erases everything</b>.
example how to import shared preferences
logging wrapper for: example how to import shared preferences
reads data from shared preferences and tray and prints the values. This happens in a different process
increases the number in shared preferences and tray. This happens in a different process
write remote, get notified here with the listeners <p> check logcat to see what happens
resets the startup count and restarts the activity
Extract URLs, @mentions, lists and #hashtag from a given text/tweet.
Extract @username references from Tweet text. A mention is an occurance of @username anywhere in a Tweet.
Extract @username references from Tweet text. A mention is an occurance of @username anywhere in a Tweet.
Extract a @username reference from the beginning of Tweet text. A reply is an occurance of @username at the beginning of a Tweet, preceded by 0 or more spaces. null if this is not a reply.
Extract URL references from Tweet text.
Extract URL references from Tweet text.
Extract #hashtag references from Tweet text.
Extract #hashtag references from Tweet text.
Extract $cashtag references from Tweet text.
Extract $cashtag references from Tweet text.
Modify Unicode-based indices of the entities to UTF-16 based indices. In UTF-16 based indices, Unicode supplementary characters are counted as two characters. This method requires that the list of entities be in ascending order by start index.
Modify UTF-16-based indices of the entities to Unicode-based indices. In Unicode-based indices, Unicode supplementary characters are counted as single characters. This method requires that the list of entities be in ascending order by start index.
character index.
point index.
Create a new HitHighlighter object.
Surround the <code>hits</code> in the provided <code>text</code> with an HTML tag. This is used with offsets from the search API to support the highlighting of query terms.
Format the current <code>highlightTag</code> by adding &lt; and >. If <code>closeTag</code> is <code>true</code> then the tag returned will include a <code>/</code> to signify a closing tag.
Get the current HTML tag used for phrase highlighting.
Set the current HTML tag used for phrase highlighting.
Creates a new asynchronous task. This constructor must be invoked on the UI thread.
Returns <tt>true</tt> if this task was cancelled before it completed normally. If you are calling {@link #cancel(boolean)} on the task, the value returned by this method should be checked periodically from {@link #doInBackground(Object[])} to end the task as soon as possible.
<p> Attempts to cancel execution of this task. This attempt will fail if the task has already completed, already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when <tt>cancel</tt> is called, this task should never run. If the task has already started, then the <tt>mayInterruptIfRunning</tt> parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task. </p> <p/> <p> Calling this method will result in {@link #onCancelled(Object)} being invoked on the UI thread after {@link #doInBackground(Object[])} returns. Calling this method guarantees that {@link #onPostExecute(Object)} is never invoked. After invoking this method, you should check the value returned by {@link #isCancelled()} periodically from {@link #doInBackground(Object[])} to finish the task as early as possible. </p> because it has already completed normally; <tt>true</tt> otherwise
Executes the task with the specified parameters. The task returns itself (this) so that the caller can keep a reference to it. <p/> <p/> Note: this function schedules the task on a queue for a single background thread or pool of threads depending on the platform version. When first introduced, AsyncTasks were executed serially on a single background thread. Starting with {@link android.os.Build.VERSION_CODES#DONUT}, this was changed to a pool of threads allowing multiple tasks to operate in parallel. Starting {@link android.os.Build.VERSION_CODES#HONEYCOMB}, tasks are back to being executed on a single thread to avoid common application errors caused by parallel execution. If you truly want parallel execution, you can use the {@link #executeOnExecutor} version of this method with {@link #THREAD_POOL_EXECUTOR}; however, see commentary there for warnings on its use. <p/> <p/> This method must be invoked on the UI thread.
Executes the task with the specified parameters. The task returns itself (this) so that the caller can keep a reference to it. <p/> <p/> This method is typically used with {@link #THREAD_POOL_EXECUTOR} to allow multiple tasks to run in parallel on a pool of threads managed by AsyncTask, however you can also use your own {@link Executor} for custom behavior. <p/> <p/> <em>Warning:</em> Allowing multiple tasks to run in parallel from a thread pool is generally <em>not</em> what one wants, because the order of their operation is not defined. For example, if these tasks are used to modify any state in common (such as writing a file due to a button click), there are no guarantees on the order of the modifications. Without careful work it is possible in rare cases for the newer version of the data to be over-written by an older one, leading to obscure data loss and stability issues. Such changes are best executed in serial; to guarantee such work is serialized regardless of platform version you can use this function with {@link #DEFAULT_EXECUTOR}. <p/> <p/> This method must be invoked on the UI thread.
Convenience version of {@link #execute(Object...)} for use with a simple Runnable object. See {@link #execute(Object[])} for more information on the order of execution.
This method can be invoked from {@link #doInBackground} to publish updates on the UI thread while the background computation is still running. Each call to this method will trigger the execution of {@link #onProgressUpdate} on the UI thread. <p/> {@link #onProgressUpdate} will note be called if the task has been canceled.
Will be null if no cached entry exists
Warning: SYNCHRONOUS call. This exists just so we can get the screename after a sign in
HACKALERT: This exists only so that we can accurately reflect the mIsFavorited value immediately after we set the value. For reasoning, see here: "This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet."
Find the given status ID in a list via a binary search. Assumes the list is sorted.
TODO: Look at this and ensure there aren't savings to be had
/ TODO: This is probably too C++ ish. Will come back to this later...
TODO: This is pretty hacky, just so the callback can be instantiated outside the class
return the markup for a status, which replaces t.co/ links with the visible links
public static String getStatusMarkup(String status, URLEntity[] urlEntities) { String result = null; if (urlEntities.length > 0) { int lastEnd = -1; for (int i = 0; i < urlEntities.length; i++) { URLEntity urlEntity = urlEntities[i]; int start = urlEntity.getStart(); int end = urlEntity.getEnd(); int statusLength = status.length(); // TODO: Problem with this tweet: keep an eye on this solution if (end > statusLength) { int diff = end - statusLength; start -= diff; end -= diff; } if (start > 0) { if (result == null) { result = status.substring(0, start); } else if (lastEnd > -1) { if (lastEnd < start) { result += status.substring(lastEnd, start); } else { // TODO: Handle this, such as for id 179136028555231232 } } } String link = "<a href=\"" + urlEntity.getExpandedURL() + "\">" + urlEntity.getDisplayURL() + "</a>"; result += link; String after; if (i == urlEntities.length - 1) { if (end <= statusLength) { after = status.substring(end, statusLength); } else { after = ""; // should never get here } } else { after = status.substring(end, urlEntities[i+1].getStart()); } result += after; lastEnd = end; } } else { result = status; } return result; }
Get the current app version
Parse a the release tag and appends it to the changelog builder
CSS style for the html
Get the changelog in html code, this will be shown in the dialog's webview
Returns change log in HTML format
Call to show the change log dialog
Get the current app version
Given 1234567890, return "1,234,567,890"
This method convets dp unit to equivalent device specific value in pixels. device
This method converts device specific pixels to device independent pixels.
Close the {@link Closeable} ignoring any {@link IOException}
Get a temporary file with a fixed (=known in advance) file name directory
Get a temporary file with a unique file name directory
Override if necessary
If we are the current lane, add this offset to async requests so they get dealt with first
Used as a bit of a hack to prevent the Compose Tweet view enabling when coming back from the ActionBar Search
The number of items in the list is determined by the number of speeches in our array.
Since the data comes from an array, just returning the index is sufficent to get at the data. If we were using a more complex data structure, we would return whatever object represents one row in the list.
Use the array index as a unique id.
public void assignContactFromEmail(String emailAddress) { assignContactFromEmail(emailAddress, true);
Checks if the status supplied belongs to the user or not by comparing the IDs between the ID of the current AccountDescriptor and the User ID of the status
Make a TweetFeedItemView to hold each row.
private final GetOAuthAccessTokenCallback mGetOAuthAccessTokenCallback =
Returns true if the image dimensions are aligned with the orientation of the device.
Deprecated. Use {@link #getRefreshableView()} from now on.
Get the Wrapped Refreshable View. Anything returned here has already been added to the content view.
Whether Pull-to-Refresh is enabled
Returns whether the widget has disabled scrolling on the Refreshable View while refreshing.
Returns whether the Widget is currently in the Refreshing state
By default the Widget disabled scrolling on the Refreshable View while refreshing. This method can change this behaviour.
Mark the current Refresh as complete. Will Reset the UI and hide the Refreshing View
Set OnRefreshListener for the Widget
A mutator to enable/disable Pull-to-Refresh for the current View
Set Text to show when the Widget is being pulled, and will refresh when released
Set Text to show when the Widget is being Pulled
Set Text to show when the Widget is refreshing
Sets the Widget to be in the refresh state. The UI will be updated to show the 'Refreshing' view.
Actions a Pull Event change
XXX From libcore.io.IoUtils
XXX From libcore.io.IoUtils
XXX From libcore.io.Streams
Called after a cache miss to compute a value for the corresponding key. Returns the computed value or null if no value can be computed. The default implementation returns null. <p/> <p>The method is called without synchronization: other threads may access the cache while this method is executing. <p/> <p>If a value for {@code key} exists in the cache when this method returns, the created value will be released with {@link #entryRemoved} and discarded. This can occur when multiple threads request the same key at the same time (causing multiple values to be created), or when one thread calls {@link #put} while another is creating a value for the same key.
Returns the size of the entry for {@code key} and {@code value} in user-defined units.  The default implementation returns 1 so that size is the number of entries and max size is the maximum number of entries. <p/> <p>An entry's size must not change while it is in the cache.
Download and shrink an Image located at a specified URL, and display it in the provided {@link ImageView}.
Clear out cached images.
Clear out all cached images older than a week. The same as calling cleanup(context, CACHE_DURATION_ONE_WEEK);
Returns the underlying {@link BitmapDrawable}.
heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); // Re-measure if we went beyond our maximum size. if (mParent.mMaxTabWidth > 0 && getMeasuredWidth() > mParent.mMaxTabWidth) { super.onMeasure(MeasureSpec.makeMeasureSpec(mParent.mMaxTabWidth, MeasureSpec.EXACTLY), heightMeasureSpec); } }
Default constructor override
Default constructor when inflating from XML file
Register listener to receive resize notifications
Reset the text to the original size
Resize the text size with specified width and height
Set the text size of the text paint object and use a static layout to render text off screen before measuring
Return list item layout resource passed to the ArrayAdapter.
Called from DSLVFragment.onActivityCreated(). Override to set a different adapter.
Called in onCreateView. Override this to provide a custom DragSortController.
This method performs the various animations available in the AndroidAnimator library.
A dummy implementation of the {@link com.marshalchen.common.demoofui.easyandroidanimations.AnimationListFragment.Callbacks} interface that does nothing. Used only when this fragment is not attached to an activity.
This listener, along with the setSepiaLayer method below, show a possible use case of the OnFoldListener provided with the FoldingLayout. This is a fun extra addition to the demo showing what kind of visual effects can be applied to the child of the FoldingLayout by setting the layer type to hardware. With a hardware layer type applied to the child, a paint object can also be applied to the same layer. Using the concatenation of two different color matrices (above), a color filter was created which simulates a sepia effect on the layer.
A listener for scrolling changes in the seekbar. The anchor point of the folding view is updated every time the seekbar stops tracking touch events. Every time the anchor point is updated, the folding view is restored to a default unfolded state.
Animates the folding view inwards (to a completely folded state) from its current state and then back out to its original state.
Creates a new ExpandableListItemAdapter with the specified list, or an empty list if items == null.
Set the custom {@link com.google.samples.apps.iosched.ui.widget.SlidingTabLayout.TabColorizer} to be used. If you only require simple custmisation then you can use {@link #setSelectedIndicatorColors(int...)} to achieve similar effects.
Set the {@link android.support.v4.view.ViewPager.OnPageChangeListener}. When using {@link com.google.samples.apps.iosched.ui.widget.SlidingTabLayout} you are required to set any {@link android.support.v4.view.ViewPager.OnPageChangeListener} through this method. This is so that the layout can update it's scroll position correctly.
A common adapter modification or reset mechanism. As with ListAdapter, calling notifyDataSetChanged() will trigger the RecyclerView to update the view. However, this method will not trigger any of the RecyclerView animation features.
Inserting a new item at the head of the list. This uses a specialized RecyclerView method, notifyItemInserted(), to trigger any enabled item animations in addition to updating the view.
Inserting a new item at the head of the list. This uses a specialized RecyclerView method, notifyItemRemoved(), to trigger any enabled item animations in addition to updating the view.
Set the number of columns the layout manager will use. This will trigger a layout update.
Rather than continuously checking how many views we can fit based on scroll offsets, we simplify the math by computing the visible grid as what will initially fit on screen, plus one.
Return the overall column index of this position in the global layout
Return the overall row index of this position in the global layout
Mapping between child view indices and adapter data positions helps fill the proper views during scrolling.
Draw dividers underneath each child view
Draw dividers at each expected grid interval
Draw dividers to the right of each child view
What good method is to access resideMenu？
private final Transformation mTransformation;
It doesn't matter the color of the icons, but they must have solid colors
Provide a suitable constructor (depends on the kind of dataset)
A dummy implementation of the {@link StickGridItemListFragment.Callbacks} interface that does nothing. Used only when this fragment is not attached to an activity.
private EnhancedListAdapter(List<String> mItems) { this.mItems = mItems;
is null or its length is 0
get last element of the target element, before the first one that match the target element front to back <ul> <li>if array is empty, return defaultValue</li> <li>if target element is not exist in array, return defaultValue</li> <li>if target element exist in array and its index is not 0, return the last element</li> <li>if target element exist in array and its index is 0, return the last one in array if isCircle is true, else return defaultValue</li> </ul>
get next element of the target element, after the first one that match the target element front to back <ul> <li>if array is empty, return defaultValue</li> <li>if target element is not exist in array, return defaultValue</li> <li>if target element exist in array and not the last one in array, return the next element</li> <li>if target element exist in array and the last one in array, return the first one in array if isCircle is true, else return defaultValue</li> </ul>
compare two object <li>if both are null, return true</li> <li>return actual.{@link Object#equals(Object)}</li> </ul>
convert long array to Long array
convert Long array to long array
convert int array to Integer array
convert Integer array to int array
Print all items of HashMap
Print all items of HashMap,avoid ConcurrentModificationExceptions
get the version name which defines in AndroidManifest.xml
get the version code which defines in AndroidManifest.xml
Format the int number as your want
Launch a new activity. You will not receive any information about when the activity exits.
Launch a new activity with two pairs of extended String type data.
Launch a new activity with one pair of extended String type data.
Launch a new activity with one Parcelable data.
Launch a new activity with ArrayList data.
Launch a new activity with one ArrayList data and one pair of String data.
Retrieve a String value from the preferences.
See also {@link #getSharedPreferences(android.content.Context, String, String)}
Set a String value in the preferences editor, to be written back once commit() or apply() are called.
Set a String value in the preferences editor with a HashMap<String, String> parameter
Judge if a variable of String or String[] is null or ""
Judge if a variable of byte[] is not null and the length of it is above 1
Judge if the size of a  map is above 1
Judge if the size of a  list is above 1
Judge if the Object is null
Judge if the Objects are all defined.
Check if the service is running
Compare two object if v1 > v2 return 1 if v1 is not null, v2 is null return 1 if v1 = v2, return 0 if v1 is null, v2 is null return 0 if v1 < v2, return -1 if v1 is null, v2 is not null  return -1
Collect Device info
Save Info to files
Set visibility of the view which in message's obj visibility to GONE
Set visibility of the view which in message's obj visibility to INVISIBLE
Set visibility of the view which in message's obj visibility to VISIBLE
Send an empty message which default what value is 0
Send an empty message containing only the what value.
Pushes a message onto the end of the message queue after all pending messages before the current time. The message contains what value and object.
Pushes a message onto the end of the message queue after all pending messages before the current time. The message contains what value and a bundle with key and a String value.
Pushes a message onto the end of the message queue after all pending messages before the current time. The message contains what value and a bundle with key and a int value.
Enqueue a message into the message queue after all pending messages before (current time + delayMillis). The message contains what value and a bundle with key and a String value.
Enqueue a message into the message queue after all pending messages before (current time + delayMillis). The message contains what value and a bundle with key and a int value.
Sends a Message containing only the what value, to be delivered after the specified amount of time elapses.
Enqueue a message containing what value and object into the message queue after all pending messages before (current time + delayMillis).
Pushes a message containing bundle onto the end of the message queue after all pending messages before the current time.
Get Unicode Length. Chinese word  accounted for two bytes.
Convert InputStream To String
Decode Html String
Convert byte[] to Hex String
Judge if the ArrayList<String> contains the String variable This method judges  trim String.
Judge if the ArrayList<String> contains the String variable
Open a database which is used for reading only. If the database is not exists,the method will create a database from the assets{@link #copyDatabase(android.content.Context, java.io.File, String)}.
Open a database which is used for both reading and writing. If the database is not exists,the method will create a database from the assets{@link #copyDatabase(android.content.Context, java.io.File, String)}.
Set if the greendao will log the resulting SQL command and the passed values when calling one of the build methods. Like this you can compare if you actually get what you expected. It might also help to copy generated SQL into some SQLite database explorer and execute it with the values.
Executes the query and returns the result as a list containing all entities loaded into memory.
Executes the query and returns the result as a list that lazy loads the entities on first access. Entities are cached, so accessing the same entity more than once will not result in loading an entity from the underlying cursor again.Make sure to close it to close the underlying cursor.
Creates a repeatable Query object based on the given raw SQL where you can pass any WHERE clause and arguments.
Insert an entity into the table associated with a concrete DAO.
Deletes the given entity from the database. Currently, only single value PK entities are supported.
Deletes the given entities in the database using a transaction.
Deletes all matching entities without detaching them from the identity scope (aka session/cache). Note that this method may lead to stale entity objects in the session cache. Stale entities may be returned when loaded by their primary key, but not using queries.
Read file to String
Read file to String with default charset 'UTF-8'
Create New File
Append file using FileOutputStream
Append file using FileWriter
Append file using RandomAccessFile
Copy file
Copy File from InputStream
If {@code append} is true and the file already exists, it will be appended to; otherwise it will be truncated. The file will be created if it does not exist.
If the file already exists, it will be truncated. The file will be created if it does not exist.
Write file with InputStream
write file
write file, the bytes will be written to the begin of the file
Write file
Copy file
Get only the file name without extension
Get  the file name with extension
Get folder name from the filepath
Get extension of the file
Create Folder
Indicates if the file represents a file exists.
Indicates if the file represents a directory exists.
Delete the File no matter it's a file or folder.If the file path is a folder,this method will delete all the file in the folder.
Get size of the file
Get file which from assets
Get file which from Raw
install according conditions <ul> <li>if system application or rooted, see {@link #installSilent(Context, String)}</li> <li>else see {@link #installNormal(Context, String)}</li> </ul>
install package normal by system intent
install package silent by root <ul> <strong>Attentions:</strong> <li>Don't call this on the ui thread, it may costs some times.</li> <li>You should add <strong>android.permission.INSTALL_PACKAGES</strong> in manifest, so no need to request root permission, if you are system app.</li> <li>Default pm install params is "-r".</li> </ul> {@link PackageUtils}.INSTALL_FAILED_*. same to {@link PackageManager}.INSTALL_
install package silent by root <ul> <strong>Attentions:</strong> <li>Don't call this on the ui thread, it may costs some times.</li> <li>You should add <strong>android.permission.INSTALL_PACKAGES</strong> in manifest, so no need to request root permission, if you are system app.</li> </ul> {@link PackageUtils}.INSTALL_FAILED_*. same to {@link PackageManager}.INSTALL_
uninstall according conditions <ul> <li>if system application or rooted, see {@link #uninstallSilent(Context, String)}</li> <li>else see {@link #uninstallNormal(Context, String)}</li> </ul>
uninstall package normal by system intent
uninstall package and clear data of app silent by root
uninstall package silent by root <ul> <strong>Attentions:</strong> <li>Don't call this on the ui thread, it may costs some times.</li> <li>You should add <strong>android.permission.DELETE_PACKAGES</strong> in manifest, so no need to request root permission, if you are system app.</li> </ul> <li>{@link #DELETE_SUCCEEDED} means uninstall success</li> <li>{@link #DELETE_FAILED_INTERNAL_ERROR} means internal error</li> <li>{@link #DELETE_FAILED_INVALID_PACKAGE} means package name error</li> <li>{@link #DELETE_FAILED_PERMISSION_DENIED} means permission denied</li>
whether context is system application
whether packageName is system application
whether packageName is system application <li>if packageManager is null, return false</li> <li>if package name is null or is empty, return false</li> <li>if package name not exit, return false</li> <li>if package name exit, but not system app, return false</li> <li>else return true</li> </ul>
whether the app whost package's name is packageName is on the top of the stack <ul> <strong>Attentions:</strong> <li>You should add <strong>android.permission.GET_TASKS</strong> in manifest</li> </ul> stack
get app version code
get system install location<br/> can be set by System Menu Setting->Storage->Prefered install location
get params for pm install location
start InstalledAppDetails Activity
read boolean
write boolean
Read a HashMap from a Parcel, class of key and value are both String
Write a HashMap to a Parcel, class of key and value are both String
Write a HashMap to a Parcel, class of key is String, class of Value can parcelable
Write a HashMap to a Parcel, class of key and value can parcelable both
Set the default preference name.
Put string to preferences
Put string to preferences with custom preference
Get string from preferences with "" as default value
Get string from custom preferences with "" as default value
Get string from custom preferences with custom default value
Put int to preferences
Put int to preferences with custom preference
Get int from preferences with 0 as default value
Get int from custom preferences with 0 as default value
Get int from custom preferences with custom default value
Put long to preferences
Put long to preferences with custom preference
get long preferences name that is not a long
Get long from custom preferences with 0 as default value
Get long from custom preferences with custom default value
Put float to preferences
Put float to preferences with custom preference
Get float from preferences with 0 as default value
Get int from custom preferences with 0 as default value
Get float from custom preferences with custom default value
Put boolean to preferences
Put boolean to preferences with custom preference
Get boolean from preferences with false as default value
Get boolean from custom preferences with false as default value
Get boolean from custom preferences with custom default value
check whether has root permission
execute shell command, default return result msg
execute shell commands, default return result msg
execute shell command
execute shell commands
Unzip file
Unzip file using InputStream unzipfileStream
Gzip file.
Unzip a gzip file with default output file path.
Unzip a gzip file.
Zip a file.
Send a DEBUG log message.
Send an INFO log message.
Send a WARN log message.
Send an ERROR log message.
Set if the Logs print log or not
Get LogWriter Singleton Instance
Init LogWriter
Log a verbose message with optional format args.
Log a verbose exception and a message with optional format args.
Log a debug message with optional format args.
Log a debug exception and a message with optional format args.
Log an info message with optional format args.
Log an info exception and a message with optional format args.
Log a warning message with optional format args.
Log a warning exception and a message with optional format args.
Log an error message with optional format args.
Log an error exception and a message with optional format args.
Set a one-time tag for use on the next logging call.
Add a new logging tree.
Remove a planted tree.
Remove all planted trees.
A {@link com.marshalchen.common.commonUtils.logUtils.Timber.Tree} that delegates to all planted trees in the {@link #FOREST forest}.
A webview setting which enable JavaScript ,DomStorage and file access.
Forces sync manager to sync now
Get a historical list of webview
Get the latest url of webview
Check if the device has connected network.
Check the network is Wifi or not
Shake the view for whole direction
Shake the view from left to right
Hide soft keyboard method.
Hide soft keyboard by click。
Converte dp to pixels
Converting pixels to dp
Converte dp to pixels
Expand a view which has already collapsed
Collapse a view which has already expanded
Pop a simple alertdialog which only shows title,message and "OK" button
Set the activity to be full screen
Set activity to be portrait
Lock the screen orientation as the current state
Unlock the screen orientation
Get height of the device
Get height of status bar
Get height of the top
Gray Image
Create watermark picture
Picture compose.
Zoom bitmap using Matrix
Save bitmap to a .png file
Save bitmap to a .jpeg file
Revert image file to a square with custom size
Revert image file to a square with width and height equal 1000
Revert image file to custom size
Convert a View to Bitmap using view.getDrawingCache()
Convert a View to Bitmap using view.draw(new Canvas(bitmap))
<p>Encodes up to three bytes of the array <var>source</var> and writes the resulting four Base64 bytes to <var>destination</var>. The source and destination arrays can be manipulated anywhere along their getStringUnicodeLength by specifying <var>srcOffset</var> and <var>destOffset</var>. This method does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 3 for the <var>source</var> array or <var>destOffset</var> + 4 for the <var>destination</var> array. The actual number of significant bytes in your array is given by <var>numSigBytes</var>.</p> <p>This is the lowest level of the encoding methods with all possible parameters.</p>
Decodes four bytes from array <var>source</var> and writes the resulting bytes (up to three of them) to <var>destination</var>. The source and destination arrays can be manipulated anywhere along their getStringUnicodeLength by specifying <var>srcOffset</var> and <var>destOffset</var>. This method does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 4 for the <var>source</var> array or <var>destOffset</var> + 3 for the <var>destination</var> array. This method returns the actual number of bytes that were converted from the Base64 encoding. <p>This is the lowest level of the decoding methods with all possible parameters.</p>
Constructs a {@link com.marshalchen.common.commonUtils.urlUtils.Base64.InputStream} in DECODE mode.
Constructs a {@link com.marshalchen.common.commonUtils.urlUtils.Base64.InputStream} in either ENCODE or DECODE mode. <p> Valid options:<pre> ENCODE or DECODE: Encode or Decode as data is read. DO_BREAK_LINES: break lines at 76 characters </pre> <p> Example: <code>new Base64.InputStream( in, Base64.DECODE )</code>
Constructs a {@link com.marshalchen.common.commonUtils.urlUtils.Base64.OutputStream} in ENCODE mode.
Constructs a {@link com.marshalchen.common.commonUtils.urlUtils.Base64.OutputStream} in either ENCODE or DECODE mode. <p> Valid options:<pre> ENCODE or DECODE: Encode or Decode as data is read. DO_BREAK_LINES: don't break lines at 76 characters </pre> <p> Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>
Get the MD5 of the String
Get the SHA1 of the String
Get the MD5 of the file
Revert byte to hex
Revert hex byte to byte array
Revert hex String to byte array.
Check if the file's MD5 is equals to the string of MD5 which you provide.
Get X509 Certificate
Build SSLSocketFactory using certificate file from assets.
Send https request with certificate file in assets.
Perform a HTTP GET request with {@link com.loopj.android.http.RequestParams}
Perform a HTTP POST request with {@link com.loopj.android.http.RequestParams}
Perform a HTTP GET request with cookie which generate by own context
Perform a HTTP GET request with cookies which are defined in hashmap
Perform a HTTP POST request with cookie which generate by own context
Perform a HTTP POST request with cookies which are defined in hashmap
To get the true url. If you want to use some relative url,you should override this method.
To get the url with params.
Upload files with {@link com.loopj.android.http.SyncHttpClient}
Upload file with {@link com.loopj.android.http.SyncHttpClient}
Return the user-visible SDK version of the framework
Base64-encode the given data and return a newly allocated String with the result.
Base64-encode the given data and return a newly allocated byte[] with the result.
Decode the Base64-encoded data in input and return the data in a new byte array. The padding '=' characters at the end are considered optional, but if any are present, there must be the correct number of them.
Decode the Base64-encoded data in input and return the data in a new byte array. The padding '=' characters at the end are considered optional, but if any are present, there must be the correct number of them.
Encrypt the message with TripleDES
Decrypt the message with TripleDES
Get default ImageLoaderConfiguration
Get default ImageLoaderConfiguration and you can choose the ImageLoader will write log or not.
Get default ImageLoaderConfiguration.Builder,and you can easily change the builder.
Return default DisplayImageOptions
Return default DisplayImageOptions.Builder
If need to use custom {@link android.widget.AbsListView.OnScrollListener}, pass it to {@link #attachToListView(android.widget.AbsListView, com.marshalchen.common.ui.FloatingActionButtonWithListView.FloatingActionButton.FabOnScrollListener)}
Make sure wrong direction method is not called when stopping scrolling and finger moved a little to opposite direction.
<code>newScrollY</code> position might not be correct if: <ul> <li><code>firstVisibleItem</code> is different than <code>mPreviousFirstVisibleItem</code></li> <li>list has rows of different height</li> </ul> <p/> It's necessary to track if row did not change, so events {@link ScrollDirectionListener#onScrollUp()} or {@link ScrollDirectionListener#onScrollDown()} could be fired with confidence
Will be incorrect if rows has changed and if list has rows of different heights <p/> So when measuring scroll direction, it's necessary to ignore this value if first visible row is different than previously calculated.
Overwrites behaviour of pressed state circle animation even when using {@link #animatePressedState(com.marshalchen.common.ui.materialmenu.MaterialMenuDrawable.IconState)}
Call from {@link android.app.Activity#onSaveInstanceState(android.os.Bundle)} to store current icon state
Call from {@link android.app.Activity#onPostCreate(android.os.Bundle)} to restore icon state
Accessor methods
set corner radius in px
set corner radius in dip
set border width in px
set border width in dip
set border color
Sets the property of this field (singleLine, to automatically resize the text to fit its constraints.
If true, the text will automatically be resized to fit its constraints; if false, it will act like a normal TextView.
Set the amount of precision used to calculate the correct text size to fit within it's bounds. Lower precision is more precise and takes more time.
Re size the font so the specified text fits in the text box assuming the text box is the specified width.
Recursive binary search to find the best size for the text
Override the Scroller instance with our own class so we can change the duration
This method will be invoked when the current page is scrolled, either as part of a programmatically initiated smooth scroll or a user initiated touch scroll. If you override this method you must call through to the superclass implementation (e.g. super.onPageScrolled(position, offset, offsetPixels)) before onPageScrolled returns.
Erases the signature.
Called when replaying history to ensure the dirty region includes all points.
Resets the dirty region when the motion event occurs.
Set size of the inner circle
Set size of the outer circle
Set color of the inner circle
Set color of the outer circle
Set color of the progress text
Set color of circle of expanding progress
Set width of the outer circle line
Set size of the progress text
get maximum value of progress
set current progress
Cancel updating progress task
Sets the gravity for the FAB
Sets the margins for the FAB in dp
Sets the FAB drawable
Sets the FAB color
Sets the FAB size in dp
The calculation (value * scale + 0.5f) is a widely used to convert to dps to pixel units based on density scale see developer.android.com (Supporting Multiple Screen Sizes)
Show the label using an animation
Hide the label using an animation
Helper method to convert dips to pixels.
Remove the view and return true is a view has been removed.
Sets the animation speed. The lower the value, the faster the animation will be displayed.
Sets the pause between animations
Sets a custom interpolator for the animation.
Starts the configured marquee effect.
Disables the animations.
The constructor for the ProgressWheel
this screeshots form
init AdapterView like ListView,GridView and so on;or init ScrollView
header refreshing
footer refreshing
Resets the list to a normal state after a refresh.
Set a text to represent when the list was last updated.
set headerRefreshListener
Get the shape of the current animation's highlight mask. One of {@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskShape#LINEAR} or {@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskShape#RADIAL}
Set the shape of the animation's highlight mask. One of {@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskShape#LINEAR} or {@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskShape#RADIAL}
Get the angle at which the highlight mask is animated. One of: <ul> <li>{@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskAngle#CW_0} which animates left to right,</li> <li>{@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskAngle#CW_90} which animates top to bottom,</li> <li>{@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskAngle#CW_180} which animates right to left, or</li> <li>{@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskAngle#CW_270} which animates bottom to top</li> </ul>
Set the angle of the highlight mask animation. One of: <ul> <li>{@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskAngle#CW_0} which animates left to right,</li> <li>{@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskAngle#CW_90} which animates top to bottom,</li> <li>{@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskAngle#CW_180} which animates right to left, or</li> <li>{@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskAngle#CW_270} which animates bottom to top</li> </ul>
Set the dropoff of the animation's highlight mask, which defines the size of the highlight's fading edge. <p/> It is the relative distance from the center at which the highlight mask's opacity is 0 i.e it is fully transparent. For a linear mask, the distance is relative to the center towards the edges. For a radial mask, the distance is relative to the center towards the circumference. So a dropoff of 0.5 on a linear mask will create a band that is half the size of the corresponding edge (depending on the {@link com.marshalchen.common.ui.ShimmerFrameLayout.MaskAngle}), centered in the layout.
Hide the toast, if any.
It shows the SwipeRefreshLayout progress
It shows the SwipeRefreshLayout progress
Enables swipe gesture
Disables swipe gesture. It prevents manual gestures but keeps the option tu show refreshing programatically.
reset the view to default status
start to animate
Let hover show.
Let hover view dismiss. Notice: only when hover view status is appeared, then, this may work.
get currently hover status.
set background blur duration.
set background blur radius.
bind a hover view with BlurLayout.
Sets whether or not touching the BlurLayout will trigger the Hover View and blur effect
This animation hides the view by scaling its Y property to mimic the "pulling of blinds". On animation end, the view is restored to its original state and is set to <code>View.INVISIBLE</code>.
This animation causes the view to fade in and fade out a customizable number of times.
This animation causes the view to bounce by translating up and down for a customizable number of times before returning to its original position.
This animation creates a bitmap of the view, divides them into customizable number of X and Y parts and translates the parts away from the center of the view to mimic an explosion. The number of parts can vary from 1x2 to 3x3. The view is set to invisible and added back for reuse.
The available matrices are <code>MATRIX_1X2</code>, <code>MATRIX_1X3</code>, <code>MATRIX_2X1</code>, <code>MATRIX_2X2</code> , <code>MATRIX_2X3</code>, <code>MATRIX_3X1</code>, <code>MATRIX_3X2</code> and <code>MATRIX_3X3</code>.
The available matrices are <code>MATRIX_1X2</code>, <code>MATRIX_1X3</code>, <code>MATRIX_2X1</code>, <code>MATRIX_2X2</code> , <code>MATRIX_2X3</code>, <code>MATRIX_3X1</code>, <code>MATRIX_3X2</code> and <code>MATRIX_3X3</code>.
This animation fades the view in by animating its alpha property from 0 to 1.
This animation fades the view out by animating its alpha property to 0. On animation end, the view is restored to its original state and is set to <code>View.INVISIBLE</code>.
This animation causes the view to flip horizontally by a customizable number of degrees and at a customizable pivot point.
In order to flip to the left, the number of degrees should be negative and vice versa.
The available pivot points are <code>PIVOT_CENTER</code>, <code>PIVOT_LEFT</code> and <code>PIVOT_RIGHT</code>.
The available pivot points are <code>PIVOT_CENTER</code>, <code>PIVOT_LEFT</code> and <code>PIVOT_RIGHT</code>.
This animation causes the view to flip horizontally to reveal another user-provided view at the back of the original view. On animation end, the original view is restored to its original state and is set to <code>View.INVISIBLE</code>.
The available pivot points to flip are <code>PIVOT_CENTER</code>, <code>PIVOT_LEFT</code> and <code>PIVOT_RIGHT</code>.
The available pivot points to flip are <code>PIVOT_CENTER</code>, <code>PIVOT_LEFT</code> and <code>PIVOT_RIGHT</code>.
The available flip directions are <code>DIRECTION_LEFT</code> and <code>DIRECTION_RIGHT</code>.
The available flip directions are <code>DIRECTION_LEFT</code> and <code>DIRECTION_RIGHT</code>.
This animation causes the view to flip vertically by a customizable number of degrees and at a customizable pivot point.
In order to flip down, the number of degrees should be negative and vice versa.
The available pivot points are <code>PIVOT_CENTER</code>, <code>PIVOT_TOP</code> and <code>PIVOT_BOTTOM</code>.
The available pivot points are <code>PIVOT_CENTER</code>, <code>PIVOT_TOP</code> and <code>PIVOT_BOTTOM</code>.
This animation causes the view to flip vertically to reveal another user-provided view at the back of the original view. On animation end, the original view is restored to its original state and is set to <code>View.INVISIBLE</code>.
The available flip directions are <code>DIRECTION_UP</code> and <code>DIRECTION_DOWN</code>.
The available flip directions are <code>DIRECTION_UP</code> and <code>DIRECTION_DOWN</code>.
This animation folds out the view for a customizable number of folds, orientation and at a customizable anchor factor. On animation end, the view is restored to its original state and is set to <code>View.INVISIBLE</code>.
The available orientations are <code>Orientation.HORIZONTAL</code> and <code>Orientation.VERTICAL</code>.
The available orientations are <code>Orientation.HORIZONTAL</code> and <code>Orientation.VERTICAL</code>.
The available anchor factors range from 0 to 1. For example, in order to anchor the fold at the top, the anchor factor should be 0.
The available anchor factors range from 0 to 1. For example, in order to anchor the fold at the top, the anchor factor should be 0.
Throws an exception if the number of views added to this layout exceeds one.
Sets the fold factor of the folding view and updates all the corresponding matrices and values to account for the new fold factor. Once that is complete, it redraws itself with the new fold.
This method is called in order to update the fold's orientation, anchor point and number of folds. This creates the necessary setup in order to prepare the layout for a fold with the specified parameters. Some of the dimensions required for the folding transformation are also acquired here. After this method is called, it will be in a completely unfolded state by default.
Calculates the transformation matrices used to draw each of the separate folding segments from this view.
This animation makes use of a translucent box to overlay the view before animating its alpha property to mimic the highlighting of the view.
This class allows multiple Combinable objects to be animated in parallel.
This method adds this Combinable object to an ArrayList.
This method overrides the <code>setInterpolator()</code> methods of all the parallel animations.
This method overrides the <code>setDuration()</code> methods of all the parallel animations.
This animation translates the view within its parent view and according to the ArrayList<Point> provided by the user. The values of X and Y in each Point must be in the range of 0-100. Note: The status bar and action bar are not taken into consideration for the translation.
The available anchor points at which to translate the view are <code>ANCHOR_CENTER</code>, <code>ANCHOR_TOP_LEFT</code>, <code>ANCHOR_TOP_RIGHT</code>, <code>ANCHOR_BOTTOM_LEFT</code> and <code>ANCHOR_BOTTOM_RIGHT</code>.
The available anchor points at which to translate the view are <code>ANCHOR_CENTER</code>, <code>ANCHOR_TOP_LEFT</code>, <code>ANCHOR_TOP_RIGHT</code>, <code>ANCHOR_BOTTOM_LEFT</code> and <code>ANCHOR_BOTTOM_RIGHT</code>.
This animation scales down and fades in the view.
This animation scales up and fades out the view. On animation end, the view is restored to its original state and is set to <code>View.INVISIBLE</code>.
This animation rotates the view by a customizable number of degrees and at a customizable pivot point.
In order to rotate anti-clockwise, the number of degrees should be negative.
The available pivot points are <code>PIVOT_CENTER</code>, <code>PIVOT_TOP_LEFT</code>, <code>PIVOT_TOP_RIGHT</code>, <code>PIVOT_BOTTOM_LEFT</code> and <code>PIVOT_BOTTOM_RIGHT</code>.
The available pivot points are <code>PIVOT_CENTER</code>, <code>PIVOT_TOP_LEFT</code>, <code>PIVOT_TOP_RIGHT</code>, <code>PIVOT_BOTTOM_LEFT</code> and <code>PIVOT_BOTTOM_RIGHT</code>.
This animation scales in the view from 0 to 1.
This animation scales out the view from 1 to 0. On animation end, the view is restored to its original state and is set to <code>View.INVISIBLE</code>.
This animation causes the view to shake from left to right for a customizable number of times before returning to its original position.
This animation causes the view to slide in from the borders of the screen.
The available directions to slide in from are <code>DIRECTION_LEFT</code> , <code>DIRECTION_RIGHT</code>, <code>DIRECTION_TOP</code> and <code>DIRECTION_BOTTOM</code>.
The available directions to slide in from are <code>DIRECTION_LEFT</code> , <code>DIRECTION_RIGHT</code>, <code>DIRECTION_TOP</code> and <code>DIRECTION_BOTTOM</code>.
This animation causes the view to slide in underneath from its own borders.
This animation causes the view to slide out to the borders of the screen. On animation end, the view is restored to its original state and is set to <code>View.INVISIBLE</code>.
This animation causes the view to slide out underneath to its own borders. On animation end, the view is restored to its original state and is set to <code>View.INVISIBLE</code>.
This animation transfers the view to another view provided by the user through scaling and translation. The view is scaled to the same size and is translated to the same position as the destination view.
This animation folds in the view for a customizable number of folds, orientation and at a customizable anchor factor.
The available anchor factors range from 0 to 1. For example, in order to anchor the fold on the left, the anchor factor should be 0.
The available anchor factors range from 0 to 1. For example, in order to anchor the fold on the left, the anchor factor should be 0.
Creates a ImageBrightnessFilter that adds a given amount to red, green and blue. The amount that should be added to red, green and blue.
Creates a ColourMatrixFilter with the given matrix as the multiplicand and the given intensity as the percentage of the colorMatrix product that should be factor into the output. The 4x4 matrix that will be multiplied by a rgba vector of each pixel. The percentage of the of the colorMatrix and pixel product that should factor into the output.
Creates an ImageContrastFilter that will adjust contrast by a given amount. The amount of contrast.
Creates a ImageExposureFilter with the given adjustment to exposure. The amount of exposure.
Creates a ImageGammaFilter with the given gamma adjustment value. The gamma adjustment value.
Creates a HueFilter that adjusts the hue of input image by a given number of radians. The amount the hue should be adjusted in radians.
Creates a ImageLevelsFilter with the given min, gamma, max input levels and min and max output levels. The minimum level of the input image. The maximum level of the input image. The gamma adjust value. The minimum level of the output image. The maximum level of the output image.
Creates a RGBFilter which sets each pixel in the given image to a new color specified by the multiplication constants for each of red, green and blue. The constant float value to multiply all red values by. The constant float value to multiply all green values by. The constant float value to multiply all blue values by.
Creates an ImageSaturationFilter with a given saturation adjustment value. The saturation adjustment value.
The convolution filter that should be applied to each pixel in the input texture. The width of the convolution filter. The height of the convolution filter.
Creates a ImageGammaFilter with the given gamma adjustment value. The gamma adjustment value.
Creates a CompositeFilter with the default {@link com.marshalchen.common.uimodule.imageprocessing.filter.BasicFilter} shaders that takes in a given number of inputs The number of inputs that this filter expects
Creates a CompositeMultiPixelFilter with the default {@link com.marshalchen.common.uimodule.imageprocessing.filter.BasicFilter} shaders that takes in a given number of inputs The number of inputs that this filter expects
Creates a GenericFilter with the BasicFilter shaders.
Adds an integer value parameter to the shader. The uniform name that is used in the shader to reference this value. The value that should be used for this name.
Adds an float value parameter to the shader. The uniform name that is used in the shader to reference this value. The value that should be used for this name.
Adds an vec2 value parameter to the shader. The uniform name that is used in the shader to reference this value. The value that should be used for this name.
Adds an vec3 value parameter to the shader. The uniform name that is used in the shader to reference this value. The value that should be used for this name.
Adds an vec4 value parameter to the shader. The uniform name that is used in the shader to reference this value. The value that should be used for this name.
Adds an mat3 value parameter to the shader. The uniform name that is used in the shader to reference this value. The value that should be used for this name.
Adds an mat4 value parameter to the shader. The uniform name that is used in the shader to reference this value. The value that should be used for this name.
Adds an float array value parameter to the shader. The uniform name that is used in the shader to reference this value. The value that should be used for this name.
Sets the fragment shader to be used for this program. If this is changed during filter processing, it will be updated on the next drawing pass. The fragment shader to use.
Sets the vertex shader to be used for this program. If this is changed during filter processing, it will be updated on the next drawing pass. The vertex shader to use.
Creates a GroupFilter with any number of initial filters or filter graphs.
Creates a MultiInputFilter with any number of initial filters or filter graphs that produce a set number of textures which can be used by this filter. The number of inputs of this filter.  For example, if the fragment shader of this filter requires three input textures, then this would be set to three.
Removes all currently registered filters from filter location list.
Registers the given filter in the next available texture location. An output filter which passes its output to this filter.
Registers the given filter in the given texture location. An output filter which passes its output to this filter. The texture location that this filter should pass its output to. This location must be in [0,numOfInputs).
Creates a MultiInputPixelFilter that passes the texel width and height information to the shaders and accepts a given textures as input. The number of input textures used by the fragment shader.
Creates a MultiPixelRender that passes the texel width and height information to the shaders.
This method takes in a bitmap and binds it to an opengl texture.  This method can only be called if there is an active opengl context. a bitmap to turn into an opengl texture an opengl texture with the given bitmap
Creates a CameraPreviewInput which captures the camera preview with all the default camera parameters and settings.
Closes and releases the camera for other applications to use. Should be called when the pause is called in the activity.
Re-initializes the camera and starts the preview again. Should be called when resume is called in the activity.
Creates a GLTextureOutputRenderer which initially has an empty list of targets.
Adds the given target to the list of targets that this renderer sends its output to. The target which should be added to the list of targets that this renderer sends its output to.
Returns the object used to lock the target list.  Iterating over or changing the target list should be done in a synchronized block that is locked using the object return. the object which is used to lock the target list
Returns a list of all the targets that this renderer should send its output to.  Iterating over or changing this list should be done in a synchronized block, locked using the object returned from getLockObject().
Removes the given target from the list of targets that this renderer sends its output to. The target which should be removed from the list of targets that this renderer sends its output to.
Creates a GLImageToTextureRenderer using the given bitmap as the image input. The bitmap which contains the image.
Creates a GLImageToTextureRenderer using the given resourceId as the image input. All future images must also come from the same context. The context in which the resourceId exists. The resource id of the image which should be processed.
Creates a GLImageToTextureRenderer using the given file path to the image input. The file path to the image to load.
Returns the height of the current image being output.
Returns the width of the current image being output.
Sets the image being output by this renderer to the given bitmap. The bitmap which contains the image.
Sets the image being output by this renderer to the image loaded from the given id. The resource id of the new image to be output by this renderer.
Sets the image being output by this renderer to the image loaded from the given file path. The file path to the image to load.
Creates a VideoResourceInput which captures the camera preview with all the default camera parameters and settings. The context which contains the given resource id. The resource id that points to the video that should be displayed
Sets the video to a new video source. The id must be from the same context as the previous id. The id that points to the video resource
Returns whether or not the video is currently playing. Whether or not the video is currently playing.
Starts the video player if the opengl context has initialized the video already.  Otherwise, starts the video once the opengl context has been initialized.
Stops the video
Creates a JPGFileEndpoint that writes to disk on the given file path and may or may not also write to the camera roll. An activity context. Can be null if storeToMedia is false. Whether or not it should also be written to the camera roll. The file path and name of the file that the image should be written to. Whether or not a new image should be written for each input change.
Creates a JPGFileEndpoint that writes to disk on the given file path and may or may not also write to the camera roll. An activity context. Can be null if storeToMedia is false. Whether or not it should also be written to the camera roll. The file path and name of the file that the image should be written to. Whether or not a new image should be written for each input change.
Creates a GLTextureToScreenRenderer. If it is not set to full screen mode, the reference to the render context is allowed to be null. A reference to the GLSurfaceView.Renderer that contains the OpenGL context. Whether or not to use the input filter size as the render size or to render full screen.
Creates a FastImageProcessingPipeline with the initial state as paused and having no rootRenderer.
Adds a given filter to the list of filters to have its resources removed next time this pipeline receives an opengl context.  The filter will still be usable and will recreate all of the destroyed opengl objects next time it is used in the pipeline.
Adds a root node of graph of filters that the pipeline will process and draw to the given endpoints of the graph. A root node (input node) of the graph of filters and endpoints.
Returns the height of GLSurfaceView on the screen.
Returns the width of GLSurfaceView on the screen.
Pauses the rendering of the graph. This method should be called before the alteration of the filter graph; however, altering the filter graph without pauses should still work.
Removes a root node of graph of filters that the pipeline will process and draw to the given endpoints of the graph. A root node (input node) of the graph of filters and endpoints.
Starts the rendering of the graph. If this is called before a root node renderer has been added, it will do nothing.
Creates a new view which can be used for fast image processing.
Sets the FastImageProcessingPipeline that will do the rendering for this view.
Returns the current width the GLRenderer is rendering at.
Returns the current height the GLRenderer is rendering at.
Rotates the renderer clockwise by 90 degrees a given number of times. The number of times this renderer should be rotated clockwise by 90 degrees.
Rotates the renderer counter-clockwise by 90 degrees a given number of times. The number of times this renderer should be rotated counter-clockwise by 90 degrees.
Sets the render size of the renderer to the given width and height. This also prevents the size of the renderer from changing automatically when one of the source(s) of the renderer has a size change.  If the renderer has been rotated an odd number of times, the width and height will be swapped. The width at which the renderer should draw at. The height at which the renderer should draw at.
Re-initializes the filter on the next drawing pass.
Draws the given texture using OpenGL and the given vertex and fragment shaders. Calling of this method is handled by the {@link com.marshalchen.common.uimodule.imageprocessing.FastImageProcessingPipeline} or other filters and should not be called manually.
Cleans up the opengl objects for this renderer.  Must be called with opengl context. Normally called by {@link com.marshalchen.common.uimodule.imageprocessing.FastImageProcessingPipeline}.
Sets the background colour for this GLRenderer to the given colour in rgba space. The red component of the colour. The green component of the colour. The blue component of the colour. The alpha component of the colour.
Returns the red component of the background colour currently set for this GLRenderer. The red component of the background colour.
Sets only the red component of the background colour currently set for this GLRenderer. The red component to set as the background colour.
Returns the green component of the background colour currently set for this GLRenderer. The green component of the background colour.
Sets only the green component of the background colour currently set for this GLRenderer. The green component to set as the background colour.
Returns the blue component of the background colour currently set for this GLRenderer. The blue component of the background colour.
Sets only the blue component of the background colour currently set for this GLRenderer. The blue component to set as the background colour.
Returns the alpha component of the background colour currently set for this GLRenderer. The alpha component of the background colour.
Sets only the alpha component of the background colour currently set for this GLRenderer. The alpha component to set as the background colour.
Appends three jumping dots to the end of a TextView text. <p/> This implies that the animation will by default be a wave. <p/> If the TextView has no text, the resulting TextView text will consist of the three dots only. <p/> The TextView text is cached to the current value at this time and set again in the {@link #build()} method, so any change to the TextView text done in the meantime will be lost. This means that <b>you should do all changes to the TextView text <i>before</i> you begin using this builder.</b> <p/> Call the {@link #build()} method once you're done to get the resulting {@link JumpingBeans}.
Appends three jumping dots to the end of a TextView text. <p/> This implies that the animation will by default be a wave. <p/> If the TextView has no text, the resulting TextView text will consist of the three dots only. <p/> The TextView text is cached to the current value at this time and set again in the {@link #build()} method, so any change to the TextView text done in the meantime will be lost. This means that <b>you should do all changes to the TextView text <i>before</i> you begin using this builder.</b> <p/> Call the {@link #build()} method once you're done to get the resulting {@link JumpingBeans}.
Sets the fraction of the animation loop time spent actually animating. The rest of the time will be spent "resting". The default value is {@link JumpingBeans#DEFAULT_ANIMATION_DUTY_CYCLE}.
Sets the jumping loop duration. The default value is {@link JumpingBeans#DEFAULT_LOOP_DURATION}.
Combine all of the options that have been set and return a new {@link JumpingBeans} instance. <p/> Remember to call the {@link #stopJumping()} method once you're done using the JumpingBeans (that is, when you detach the TextView from the view tree, you hide it, or the parent Activity/Fragment goes in the paused status). This will allow to release the animations and free up memory and CPU that would be otherwise wasted.
Sets the {@link com.marshalchen.common.uimodule.kenburnsview.TransitionGenerator} to be used in animations.
Sets the {@link android.view.animation.Interpolator} for each transition generated.
Create a new ContextualUndoAdapter based on given parameters.
Create a new ContextualUndoAdapter based on given parameters. Will automatically remove the swiped item after autoDeleteTimeMillis milliseconds.
This method should be called in your {@link android.app.Activity}'s {@link android.app.Activity#onSaveInstanceState(android.os.Bundle)} to remember dismissed statuses.
This method should be called in your {@link android.app.Activity#onRestoreInstanceState(android.os.Bundle)} to remember dismissed statuses.
Animate the item at given position away and show the undo {@link android.view.View}.
Cancels the count down, and removes any item that was swiped away, without animating. Will cause {@link com.marshalchen.common.uimodule.listviewanimations.itemmanipulation.swipedismiss.contextualundo.ContextualUndoAdapter.DeleteItemCallback#deleteItem(int)} to be called.
Removes any item that was swiped away, animating the removal (collapsing the item). {@link com.marshalchen.common.uimodule.listviewanimations.itemmanipulation.swipedismiss.contextualundo.ContextualUndoAdapter.DeleteItemCallback#deleteItem(int)} to be called.
Cancel the count down. This will not cause the {@link com.marshalchen.common.uimodule.listviewanimations.itemmanipulation.swipedismiss.contextualundo.ContextualUndoAdapter.DeleteItemCallback#deleteItem(int)} to be called. Use {@link #removePendingItem()} for that instead.
Create a new SwipeDismissAdapter.
Factory to allow override of dismiss data
Here you can manage dismissed View.
Create a new {@link AnimateAdditionAdapter} with given {@link android.widget.BaseAdapter}.
Insert an item at given index. Will show an entrance animation for the new item if the newly added item is visible. Will also call {@link com.marshalchen.common.uimodule.listviewanimations.itemmanipulation.AnimateAdditionAdapter.Insertable#add(int, Object)} of the root {@link android.widget.BaseAdapter}.
Insert items at given indexes. Will show an entrance animation for the new items if the newly added item is visible. Will also call {@link com.marshalchen.common.uimodule.listviewanimations.itemmanipulation.AnimateAdditionAdapter.Insertable#add(int, Object)} of the root {@link android.widget.BaseAdapter}.
Create a new AnimateDismissAdapter based on the given {@link android.widget.BaseAdapter}.
Animate dismissal of the items at given positions.
Creates a new ExpandableListItemAdapter with an empty list.
Creates a new {@link ExpandableListItemAdapter} with the specified list, or an empty list if items == null.
Creates a new ExpandableListItemAdapter with an empty list. Uses given layout resource for the view; titleParentResId and contentParentResId should be identifiers for ViewGroups within that layout.
Creates a new ExpandableListItemAdapter with the specified list, or an empty list if items == null. Uses given layout resource for the view; titleParentResId and contentParentResId should be identifiers for ViewGroups within that layout.
Set the resource id of the child {@link android.view.View} contained in the View returned by {@link #getTitleView(int, android.view.View, android.view.ViewGroup)} that will be the actuator of the expand / collapse animations.<br> If there is no View in the title View with given resId, a {@link NullPointerException} is thrown.</p> Default behavior: the whole title View acts as the actuator.
Set the maximum number of items allowed to be expanded. When the (limit+1)th item is expanded, the first expanded item will collapse.
Set the {@link com.marshalchen.common.uimodule.listviewanimations.itemmanipulation.ExpandCollapseListener} that should be notified of expand / collapse events.
Indicates if the item at the specified position is expanded.
Return the title view at the specified position.
Return the content view at the specified position.
Return the content parent at the specified position.
Expand the view at given position. Will do nothing if the view is already expanded.
Collapse the view at given position. Will do nothing if the view is already collapsed.
Toggle the {@link android.view.View} at given position, ignores header or footer Views.
Insert an item into the queue at given index. Will directly call {@link com.marshalchen.common.uimodule.listviewanimations.itemmanipulation.AnimateAdditionAdapter.Insertable#add(int, Object)} if there are no active index-item pairs. Otherwise, the pair will be queued.
Clears the active states and inserts any pending pairs if applicable.
Clear the active state for given index. Will insert any pending pairs if this call leads to a state where there are no active pairs.
Inserts pending items into the Insertable, and adds them to the active positions (correctly managing position shifting). Clears the pending items.
Returns a collection of currently active indexes.
Returns a {@code List} of {@code Pair}s with the index and items that are pending to be inserted, in the order they were requested.
Call this method to reset animation status on all views. The next time {@link #notifyDataSetChanged()} is called on the base adapter, all views will animate again. Will also call {@link #setShouldAnimate(boolean)} with a value of true.
Set whether to animate the {@link android.view.View}s or not.
Get the delay in milliseconds before the first animation should start. Defaults to {@value #INITIALDELAYMILLIS}.
Set the delay in milliseconds before the first animation should start. Defaults to {@value #INITIALDELAYMILLIS}.
Get the delay in milliseconds before an animation of a view should start. Defaults to {@value #DEFAULTANIMATIONDELAYMILLIS}.
Get the duration of the animation in milliseconds. Defaults to {@value #DEFAULTANIMATIONDURATIONMILLIS}.
Get the position within the adapter's dataset for the view, where view is an adapter item or a descendant of an adapter item. Unlike {@link android.widget.AdapterView#getPositionForView(android.view.View)}, returned position will reflect the position of the item given view is representing, by subtracting the header views count. correspond to a list item (or it is not visible).
Listens for long clicks on any items in the listview. When a cell has been selected, the hover cell is created and set up.
Stores a reference to the views above and below the item currently corresponding to the hover cell. It is important to note that if this item is either at the top or bottom of the list, mAboveItemId or mBelowItemId may be invalid.
Retrieves the view in the list corresponding to itemId
Retrieves the position in the list corresponding to itemId
This method determines whether the hover cell has been shifted far enough to invoke a cell swap. If so, then the respective cell swap candidate is determined and the data set is changed. Upon posting a notification of the data set change, a layout is invoked to place the cells in the right place. Using a ViewTreeObserver and a corresponding OnPreDrawListener, we can offset the cell being swapped to where it previously was and then animate it to its new position.
Resets all the appropriate fields to a default state while also animating the hover cell back to its correct location.
Resets all the appropriate fields to a default state.
This TypeEvaluator is used to animate the BitmapDrawable back to its final location when the user lifts his finger by modifying the BitmapDrawable's bounds.
Determines whether this listview is in a scrolling state invoked by the fact that the hover cell is out of the bounds of the listview;
This method is in charge of determining if the hover cell is above or below the bounds of the listview. If so, the listview does an appropriate upward or downward smooth scroll so as to reveal new items.
This scroll listener is added to the listview in order to handle cell swapping when the cell is either at the top or bottom edge of the listview. If the hover cell is at either edge of the listview, the listview will begin scrolling. As scrolling takes place, the listview continuously checks if new cells became visible and determines whether they are potential candidates for a cell swap.
Set the {@link com.marshalchen.common.uimodule.listviewanimations.widget.DynamicListView.OnItemMovedListener} to be notified when an item is dropped.
Creates a new ArrayAdapter with an empty {@code List} .
Creates a new {@link ArrayAdapter} using given {@code List} , or an empty {@code List}  if objects == null.
Creates a new {@link ArrayAdapter}, using (a copy of) given {@code List} , or an empty {@code List}  if objects = null.
Appends all of the elements in the specified collection to the end of the {@code List} , in the order that they are specified.
Inserts the objects in the specified collection at the specified location in this List. The objects are added in the order that they specified.
Removes all elements at the specified locations in the {@code List} .
If the adapter's list-view is hosted inside a parent(/grand-parent/etc) that can scroll horizontally, horizontal swipes won't work, because the parent will prevent touch-events from reaching the list-view. Call this method with the value 'true' to fix this behavior. Note that this will prevent the parent from scrolling horizontally when the user touches anywhere in a list-item.
If the adapter's list-view is hosted inside a parent(/grand-parent/etc) that can scroll horizontally, horizontal swipes won't work, because the parent will prevent touch-events from reaching the list-view. If a list-item view has a child with the given resource-ID, the user can still swipe the list-item by touching that child. If the user touches an area outside that child (but inside the list-item view), then the swipe will not happen and the parent will do its job instead (scrolling horizontally).
setImageBitmap calls through to this method
scale and start to pan the image background
stop current panning
Clean-up the resources attached to this object. This needs to be called when the ImageView is no longer used. A good example is from {@link android.view.View#onDetachedFromWindow()} or from {@link android.app.Activity#onDestroy()}. This is automatically called if you are using {@link PanningView}.
Set's the ImageView's ScaleType to Matrix.
Custom methods
start screen capture with no delay
start screen capture after "delay" milliseconds, so the previous activity's state recover to normal state, such as button click, list item click,wait them to normal state so we can make a good screen capture
Set a drawable to use as a shadow cast by the right pane onto the left pane during opening/closing.
Set a drawable to use as a shadow cast by the right pane onto the left pane during opening/closing.
if you are using the default indicator, this method will help you to set the shape of indicator, there are two kind of shapes you  can set, oval and rect.
Set Indicator style.
if you are using the default indicator , this method will help you to set the selected status and the unselected status color.
set the visibility of indicator.
clear self means unregister the dataset observer and remove all the child views(indicators).
bind indicator with viewpagerEx.
redraw the indicators.
since we used a adapter wrapper, so we can't getCount directly from wrapper.
the placeholder image when loading image from url or file.
determine whether remove the image which failed to download or load from file
if you set errorDisappear false, this will set a error placeholder image.
the description of a slider image.
set a url as a image that preparing to load
set a file as a image that will to load
set a slider image click listener
When you want to implement your own slider view, please call this method in the end in `getView()` method
set a listener to get a message , if load error.
when you have some extra information, please put it in this bundle.
If the position offset of a fragment is less than negative one or greater than one, returning true will set the visibility of the fragment to {@link android.view.View#GONE}. Returning false will force the fragment to {@link android.view.View#VISIBLE}.
Indicates if the default animations of the view pager should be used.
Called each {@link #transformPage(android.view.View, float)} before {{@link #onTransform(android.view.View, float)} is called.
Called each {@link #transformPage(android.view.View, float)} call after {@link #onTransform(android.view.View, float)} is finished.
End delegation
Set a listener that will be invoked whenever the page changes or is incrementally scrolled. See {@link com.marshalchen.common.uimodule.slider.Tricks.ViewPagerEx.OnPageChangeListener}.
Set a {@link com.marshalchen.common.uimodule.slider.Tricks.ViewPagerEx.PageTransformer} that will be called for each attached page whenever the scroll position is changed. This allows the application to apply custom property transformations to each page, overriding the default sliding look and feel. <p><em>Note:</em> Prior to Android 3.0 the property animation APIs did not exist. As a result, setting a PageTransformer prior to Android 3.0 (API 11) will have no effect.</p>
Like {@link android.view.View#scrollBy}, but scroll smoothly instead of immediately.
{@link com.marshalchen.common.uimodule.slider.Indicators.PagerIndicator} shape, rect or oval.
start auto cycle.
pause auto cycle.
set the duration between two slider changes. the duration value must >= 500
stop the auto circle
when paused cycle, this method can weak it up.
set ViewPager transformer.
set the duration between two slider changes.
set a preset viewpager transformer by id.
set preset PagerTransformer via the name of transforemer.
Inject your custom animation into PageTransformer, you can know more details in {@link com.marshalchen.common.uimodule.slider.Animations.BaseAnimationInterface}, and you can see a example in {@link com.marshalchen.common.uimodule.slider.Animations.DescriptionAnimation}
pretty much right? enjoy it. :-D
Set the visibility of the indicators.
get the {@link com.marshalchen.common.uimodule.slider.Indicators.PagerIndicator} instance. You can manipulate the properties of the indicator.
get the current item position
get current slider.
remove  the slider at the position. Notice: It's a not perfect method, a very small bug still exists.
remove all the sliders. Notice: It's a not perfect method, a very small bug still exists.
Start the animation with the first color. Calls progressiveStart(0)
Start the animation from a given color.
Finish the animation by animating the remaining sections.
change dip value to pixel value for certain screen size
change View to Bitmap Object
compute sample size you want
compute bitmap initial sample size
Enable edge tracking for the selected edges of the parent view. The callback's {@link ViewDragHelper.Callback#onEdgeTouched(int, int)} and {@link ViewDragHelper.Callback#onEdgeDragStarted(int, int)} methods will only be invoked for edges for which edge tracking has been enabled.
Convert a translucent themed Activity {@link android.R.attr#windowIsTranslucent} to a fullscreen opaque Activity. <p> Call this whenever the background of a translucent Activity has changed to become opaque. Doing so will allow the {@link android.view.Surface} of the Activity behind to be released. <p> This call has no effect on non-translucent activities or on activities with the {@link android.R.attr#windowIsFloating} attribute.
Convert a translucent themed Activity {@link android.R.attr#windowIsTranslucent} back from opaque to translucent following a call to {@link #convertActivityFromTranslucent(android.app.Activity)} . <p> Calling this allows the Activity behind this one to be seen again. Once all such Activities have been redrawn <p> This call has no effect on non-translucent activities or on activities with the {@link android.R.attr#windowIsFloating} attribute.
Called to determine the Z-order of child views. <code>index</code>
Set the max velocity that will be detected as having a magnitude greater than zero in pixels per second. Callback methods accepting a velocity will be clamped appropriately.
Enable edge tracking for the selected edges of the parent view. The callback's {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#onEdgeTouched(int, int)} and {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#onEdgeDragStarted(int, int)} methods will only be invoked for edges for which edge tracking has been enabled.
Capture a specific child view for dragging within the parent. The callback will be notified but {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#tryCaptureView(android.view.View, int)} will not be asked permission to capture this view.
{@link #INVALID_POINTER}.
initiate a drag
Animate the view <code>child</code> to the given (left, top) position. If this method returns true, the caller should invoke {@link #continueSettling(boolean)} on each subsequent frame to continue the motion until it returns false. If this method returns false there is no further work to do to complete the movement. <p> This operation does not count as a capture event, though {@link #getCapturedView()} will still report the sliding view while the slide is in progress. </p> {@link #continueSettling(boolean)} calls
Settle the captured view at the given (left, top) position. The appropriate velocity from prior motion will be taken into account. If this method returns true, the caller should invoke {@link #continueSettling(boolean)} on each subsequent frame to continue the motion until it returns false. If this method returns false there is no further work to do to complete the movement. {@link #continueSettling(boolean)} calls
Settle the captured view at the given (left, top) position. {@link #continueSettling(boolean)} calls
Check if this event as provided to the parent view's onInterceptTouchEvent should cause the parent to intercept the touch event stream. onInterceptTouchEvent
Check if any of the edges specified were initially touched in the currently active gesture. If there is no currently active gesture this method will return false. current gesture
Check if any of the edges specified were initially touched by the pointer with the specified ID. If there is no currently active gesture or if there is no pointer with the given ID currently down this method will return false. current gesture
Determine if the currently captured view is under the given point in the parent view's coordinate system. If there is no captured view this method will return false. otherwise
Determine if the supplied view is under the given point in the parent view's coordinate system. otherwise
Find the topmost child under the given point within the parent view's coordinate system. The child order is determined using {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#getOrderedChildIndex(int)}
get default AnimationController
initial an AnimationController with a listener
configure the velocity of animation
set velocity of animation
usd for get drawable from color
fetch drawable resources from attrs, drop them to conf, AFTER the size has been confirmed
return a REFERENCE of configuration, it is suggested that not to change that
setup zone for thumb to move
calculate the alpha value for on layer
return the status based on position of thumb
calculate wave track
Constructor called from {@link android.widget.ProgressBar#onSaveInstanceState()}
Restores the specified sub action view to its final state, accoding to the current actionType Should be called after an animation finishes.
Attaches it to the Activity content view with specified LayoutParams.
Detaches it from the Activity content view.
Constructor that takes the parameters collected using {@link com.marshalchen.common.uimodule.circularfloatingactionmenu.FloatingActionMenu.Builder}
Create a crop Intent builder with source image
Set output URI where the cropped image will be saved
Set fixed aspect ratio for crop area
Crop area with fixed 1:1 aspect ratio
Set maximum crop size
Send the crop Intent!
Retrieve URI for cropped image, as set in the Intent builder
Retrieve error that caused crop to fail
Utility method that starts an image picker since that often precedes a crop
TODO This should use the decode/crop/encode single step API so that the whole (possibly large) Bitmap doesn't need to be read into memory
Pan the displayed image to make sure the cropping rectangle is visible.
If the cropping rectangle's size changed significantly, change the view's center and scale according to the cropping rectangle.
Fall back to naive method for darkening outside crop area
Determines which edges are hit by touching at (x, y)
Grows the cropping rectangle by (dx, dy) in image space
Grows the cropping rectangle by (dx, dy) in image space.
Returns the cropping rectangle in image space with specified scale
Maps the cropping rectangle from image space to screen space
This function changes bitmap, reset base matrix according to the size of the bitmap, and optionally reset the supplementary matrix
Center as much as possible in one or both axis.  Centering is defined as follows:  if the image is scaled down below the view's dimensions then center it (literally).  If the image is scaled larger than the view and is translated out of view then translate it back into view (i.e. eliminate black bars).
Get the scale factor out of the matrix.
Setup the base matrix so that the image is centered and scaled properly.
Combine the base matrix and the supp matrix to make the final matrix
Sets the coordinate of the Edge. The coordinate will represent the x-coordinate for LEFT and RIGHT Edges and the y-coordinate for TOP and BOTTOM edges.
Add the given number of pixels to the current coordinate position of this Edge.
Gets the coordinate of the Edge
Sets the Edge to the given x-y coordinate but also adjusting for snapping to the image bounds and parent view border constraints.
Adjusts this Edge position such that the resulting window will have the given aspect ratio.
Returns whether or not you can re-scale the image based on whether any edge would be out of bounds. Checks all the edges for a possibility of jumping out of bounds.
Returns whether the new rectangle would be out of bounds.
Snap this Edge to the given image boundaries.
Returns the potential snap offset of snaptoRect, without changing the coordinate.
Snap this Edge to the given View boundaries.
Gets the current width of the crop window.
Gets the current height of the crop window.
Determines if this Edge is outside the inner margins of the given bounding rectangle. The margins come inside the actual frame by SNAPRADIUS amount; therefore, determines if the point is outside the inner "margin" frame.
Determines if this Edge is outside the image frame of the given bounding rectangle.
Get the resulting x-position of the left edge of the crop window given the handle's position and the image's bounding box and snap radius.
Get the resulting x-position of the right edge of the crop window given the handle's position and the image's bounding box and snap radius.
Get the resulting y-position of the top edge of the crop window given the handle's position and the image's bounding box and snap radius.
Get the resulting y-position of the bottom edge of the crop window given the handle's position and the image's bounding box and snap radius.
Public Methods
Updates the crop window by directly setting the Edge coordinates.
Gets the Edges associated with this handle (i.e. the Edges that should be moved when this handle is dragged). This is used when we are not maintaining the aspect ratio.
Gets the Edges associated with this handle as an ordered Pair. The <code>primary</code> Edge in the pair is the determining side. This method is used when we need to maintain the aspect ratio.
Gets the aspect ratio of the resulting crop window if this handle were dragged to the given point.
Informs the CropOverlayView of the image's position relative to the ImageView. This is necessary to call in order to draw the crop window.
Resets the crop overlay view.
Sets the guidelines for the CropOverlayView to be either on, off, or to show when resizing the application.
Sets whether the aspect ratio is fixed or not; true fixes the aspect ratio, while false allows it to be changed.
Sets the X value of the aspect ratio; is defaulted to 1.
Sets the Y value of the aspect ratio; is defaulted to 1.
Sets all initial values, but does not call initCropWindow to reset the views. Used once at the very start to initialize the attributes.
Private Methods
Set the initial crop window size and position. This is dependent on the size and position of the image being cropped.
Indicates whether the crop window is small enough that the guidelines should be shown. Public because this function is also used to determine if the center handle should be focused.
Handles a {@link android.view.MotionEvent#ACTION_DOWN} event.
Handles a {@link android.view.MotionEvent#ACTION_UP} or {@link android.view.MotionEvent#ACTION_CANCEL} event.
Handles a {@link android.view.MotionEvent#ACTION_MOVE} event.
Calculates the aspect ratio given a rectangle.
Calculates the x-coordinate of the left edge given the other sides of the rectangle and an aspect ratio.
Calculates the y-coordinate of the top edge given the other sides of the rectangle and an aspect ratio.
Calculates the x-coordinate of the right edge given the other sides of the rectangle and an aspect ratio.
Calculates the y-coordinate of the bottom edge given the other sides of the rectangle and an aspect ratio.
Calculates the width of a rectangle given the top and bottom edges and an aspect ratio.
Calculates the height of a rectangle given the left and right edges and an aspect ratio.
Gets the default target radius (in pixels). This is the radius of the circular area that can be touched in order to activate the handle.
Determines which, if any, of the handles are pressed given the touch coordinates, the bounding box, and the touch radius.
Calculates the offset of the touch point from the precise location of the specified handle.
Determines if the specified coordinate is in the target touch zone for a corner handle.
Determines if the specified coordinate is in the target touch zone for a horizontal bar handle.
Determines if the specified coordinate is in the target touch zone for a vertical bar handle.
Determines if the specified coordinate falls anywhere inside the given bounds.
Determines if the cropper should focus on the center handle or the side handles. If it is a small image, focus on the center handle so the user can move it. If it is a large image, focus on the side handles so user can grab them. Corresponds to the appearance of the RuleOfThirdsGuidelines.
Gets the rectangular position of a Bitmap if it were placed inside a View with scale type set to {@link android.widget.ImageView#ScaleType #CENTER_INSIDE}.
Helper that does the work of the above functions. Gets the rectangular position of a Bitmap if it were placed inside a View with scale type set to {@link android.widget.ImageView#ScaleType #CENTER_INSIDE}.
Creates the Paint object for drawing the crop window border.
Creates the Paint object for drawing the crop window guidelines.
Creates the Paint object for drawing the translucent overlay outside the crop window.
Creates the Paint object for drawing the corners of the border
Returns the value of the corner thickness
Returns the value of the line thickness of the border
Returns the integer of the imageResource
Sets a Bitmap as the content of the CropImageView.
Sets a Bitmap and initializes the image rotation according to the EXIT data. <p> The EXIF can be retrieved by doing the following: <code>ExifInterface exif = new ExifInterface(path);</code>
Sets a Drawable as the content of the CropImageView.
Gets the cropped image based on the current crop window.
Gets the crop window's position relative to the source Bitmap (not the image displayed in the CropImageView).
Sets whether the aspect ratio is fixed or not; true fixes the aspect ratio, while false allows it to be changed.
Sets the guidelines for the CropOverlayView to be either on, off, or to show when resizing the application.
Sets the both the X and Y values of the aspectRatio.
Rotates image by the specified number of degrees clockwise. Cycles from 0 to 360 degrees.
Determines the specs for the onMeasure function. Calculates the width or height depending on the mode.
Init the Calligraphy Config file. Each time you call this you set a new default. Of course setting this multiple times during runtime could have undesired effects.
Init only the custom attribute to lookup.
Define the default font and the custom attribute to lookup globally.
Uses the default configuration from {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig} Remember if you are defining default in the {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig} make sure this is initialised before the activity is created.
Override the default AttributeId, this will always take the custom attribute defined here and ignore the one set in {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig}. Remember if you are defining default in the {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig} make sure this is initialised before the activity is created.
Applies a custom typeface span to the text.
Applies a Typeface to a TextView, its recommend you don't call this multiple times, as this adds a TextWatcher.
Tries to pull the Custom Attribute directly from the TextView.
Tries to pull the Font Path from the View Style as this is the next decendent after being defined in the View's xml.
Tries to pull the Font Path from the Text Appearance.
Last but not least, try to pull the Font Path from the Theme, which is defined.
A helper loading a custom font.
A helper loading custom spans so we don't have to keep creating hundreds of spans.
Calls {@link #DragSortController(DragSortListView, int)} with a 0 drag handle id, FLING_RIGHT_REMOVE remove mode, and ON_DOWN drag init. By default, sorting is enabled, and removal is disabled.
By default, sorting is enabled, and removal is disabled. the drag handle in a list item.
Set how a drag is initiated. Needs to be one of {@link ON_DOWN}, {@link ON_DRAG}, or {@link ON_LONG_PRESS}.
Enable/Disable list item sorting. Disabling is useful if only item removal is desired. Prevents drags in the vertical direction. item sorting.
One of {@link CLICK_REMOVE}, {@link FLING_RIGHT_REMOVE}, {@link FLING_LEFT_REMOVE}, {@link SLIDE_RIGHT_REMOVE}, or {@link SLIDE_LEFT_REMOVE}.
Enable/Disable item removal without affecting remove mode.
Set the resource id for the View that represents the drag handle in a list item.
Set the resource id for the View that represents the fling handle in a list item.
Set the resource id for the View that represents click removal button.
Sets flags to restrict certain motions of the floating View based on DragSortController settings (such as remove mode). Starts the drag on the DragSortListView.
Get the position to start dragging based on the ACTION_DOWN MotionEvent. This function simply calls {@link #dragHandleHitPosition(android.view.MotionEvent)}. Override to change drag handle behavior; this function is called internally when an ACTION_DOWN event is detected. detected; MISS if unsuccessful.
Checks for the touch of an item's drag handle (specified by {@link #setDragHandleId(int)}), and returns that item's position if a drag handle touch was detected. touched; MISS if unsuccessful.
Resets list-cursor mapping.
Remove unnecessary mappings from sparse array.
Get the Cursor position mapped to by the provided list position (given all previously handled drag-sort operations).
Get the current order of Cursor positions presented by the list.
Get the list position mapped to by the provided Cursor position. If the provided Cursor position has been removed by a drag-sort, this returns {@link #REMOVED}.
Defines the scroll speed during a drag-scroll. User can provide their own; this default is a simple linear profile where scroll speed increases linearly as the floating View nears the top/bottom of the ListView.
Usually called from a FloatViewManager. The float alpha will be reset to the xml-defined value every time a drag is stopped.
Set maximum drag scroll speed in positions/second. Only applies if using default ScrollSpeedProfile.
As opposed to {@link android.widget.ListView#getAdapter()}, which returns a heavily wrapped ListAdapter (DragSortListView wraps the input ListAdapter {\emph and} ListView wraps the wrapped one).
Add item height at position if doesn't already exist.
Get the shuffle edge for item at position when top of item is at y-coord top. Assumes that current item heights are consistent with current float view location and thus expanded positions and slide fraction. i.e. Should not be called between update of expanded positions/slide fraction and layoutChildren. calculates this height. the given view of the list; that is, for when top of item at position has y-coord of given `top`). If floating View (treated as horizontal line) is dropped immediately above this line, it lands in position-1. If dropped immediately below this line, it lands in position.
Removes an item from the list and animates the removal. this is a position in your input ListAdapter).
Move an item, bypassing the drag-sort process. Simply calls through to {@link com.marshalchen.common.uimodule.dragSortListView.DragSortListView.DropListener#drop(int, int)}. this is a position in your input ListAdapter). this is a position in your input ListAdapter).
Cancel a drag. Calls {@link #stopDrag(boolean, boolean)} with <code>true</code> as the first argument.
Removes dragged item from the list. Calls RemoveListener.
Stop a drag in progress. Pass <code>true</code> if you would like to remove the dragged item from the list. a registered RemoveListener, if one exists. Otherwise, calls the DropListener, if one exists. no floating View.
Set the width of each drag scroll region by specifying a fraction of the ListView height. 0.5f.
Set the width of each drag scroll region by specifying a fraction of the ListView height. Capped at 0.5f. Capped at 0.5f.
Sets layout param height, gravity, and visibility  on wrapped item.
Start a drag of item at <code>position</code> using the registered FloatViewManager. Calls through to {@link #startDrag(int, android.view.View,int,int,int)} after obtaining the floating View from the FloatViewManager. floating View. For example, set <code>dragFlags |= ~{@link #DRAG_NEG_X}</code> to allow dragging the floating View in all directions except off the screen to the left. left edge of the floating View (i.e. touch-x minus float View left). top edge of the floating View (i.e. touch-y minus float View top). <code>startDrag</code> will fail if we are not currently in a touch event, there is no registered FloatViewManager, or the FloatViewManager returns a null View.
Start a drag of item at <code>position</code> without using a FloatViewManager. floating View. For example, set <code>dragFlags |= ~{@link #DRAG_NEG_X}</code> to allow dragging the floating View in all directions except off the screen to the left. left edge of the floating View (i.e. touch-x minus float View left). top edge of the floating View (i.e. touch-y minus float View top). <code>startDrag</code> will fail if we are not currently in a touch event, <code>floatView</code> is null, or there is a drag in progress.
Sets float View location based on suggested values and constraints set in mDragFlags.
Allows for easy toggling between a DragSortListView and a regular old ListView. If enabled, items are draggable, where the drag init mode determines how items are lifted (see {@link setDragInitMode(int)}). If disabled, items cannot be dragged. item dragging
This better reorder your ListAdapter! DragSortListView does not do this for you; doesn't make sense to. Make sure {@link android.widget.BaseAdapter#notifyDataSetChanged()} or something like it is called in your implementation. Furthermore, if you have a choiceMode other than none and the ListAdapter does not return true for {@link android.widget.ListAdapter#hasStableIds()}, you will need to call {@link #moveCheckState(int, int)} to move the check boxes along with the list items.
Probably a no-brainer, but make sure that your remove listener calls {@link android.widget.BaseAdapter#notifyDataSetChanged()} or something like it. When an item removal occurs, DragSortListView relies on a redraw of all the items to recover invisible views and such. Strictly speaking, if you remove something, your dataset has changed...
Completely custom scroll speed profile. Default increases linearly with position and is constant in time. Create your own by implementing {@link com.marshalchen.common.uimodule.dragSortListView.DragSortListView.DragScrollProfile}.
Use this to move the check state of an item from one position to another in a drop operation. If you have a choiceMode which is not none, this method must be called when the order of items changes in an underlying adapter which does not have stable IDs (see {@link android.widget.ListAdapter#hasStableIds()}). This is because without IDs, the ListView has no way of knowing which items have moved where, and cannot update the check state accordingly. <p> A word of warning about a "feature" in Android that you may run into when dealing with movable list items: for an adapter that <em>does</em> have stable IDs, ListView will attempt to locate each item based on its ID and move the check state from the item's old position to the new position — which is all fine and good (and removes the need for calling this function), except for the half-baked approach. Apparently to save time in the naive algorithm used, ListView will only search for an ID in the close neighborhood of the old position. If the user moves an item too far (specifically, more than 20 rows away), ListView will give up and just force the item to be unchecked. So if there is a reasonable chance that the user will move items more than 20 rows away from the original position, you may wish to use an adapter with unstable IDs and call this method manually instead.
Use this when an item has been deleted, to move the check state of all following items up one step. If you have a choiceMode which is not none, this method must be called when the order of items changes in an underlying adapter which does not have stable IDs (see {@link android.widget.ListAdapter#hasStableIds()}). This is because without IDs, the ListView has no way of knowing which items have moved where, and cannot update the check state accordingly. See also further comments on {@link #moveCheckState(int, int)}.
Constructor with default behavior as per {@link CursorAdapter#CursorAdapter(android.content.Context, android.database.Cursor, boolean)}; it is recommended you not use this, but instead {@link #ResourceCursorAdapter(android.content.Context, int, android.database.Cursor, int)}. When using this constructor, {@link #FLAG_REGISTER_CONTENT_OBSERVER} will always be set.
Standard constructor. as per {@link CursorAdapter#CursorAdapter(android.content.Context, android.database.Cursor, int)}.
Standard constructor. as per {@link CursorAdapter#CursorAdapter(android.content.Context, android.database.Cursor, int)}.
Returns the {@link com.marshalchen.common.uimodule.dragSortListView.SimpleDragSortCursorAdapter.ViewBinder} used to bind data to views.
Called by bindView() to set the text for a TextView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to a TextView. Intended to be overridden by Adapters that need to filter strings retrieved from the database.
Create a map from an array of strings to an array of column-id integers in cursor c. If c is null, the array will be discarded.
Returns the individual undo message for this undo. This will be displayed in the undo window, beside the undo button. The default implementation returns {@code null}, what will lead in a default message to be displayed in the undo window. Don't call the super method, when overriding this method.
Enables the <i>Swipe to Dismiss</i> feature for this list. This allows users to swipe out an list item element to delete it from the list. Every time the user swipes out an element {@link com.marshalchen.common.uimodule.enhanceListView.EnhancedListView.OnDismissCallback#onDismiss(com.marshalchen.common.uimodule.enhanceListView.EnhancedListView, int)} of the given {@link com.marshalchen.common.uimodule.enhanceListView.EnhancedListView} will be called. To enable <i>undo</i> of the deletion, return an {@link com.marshalchen.common.uimodule.enhanceListView.EnhancedListView.Undoable} from {@link com.marshalchen.common.uimodule.enhanceListView.EnhancedListView.OnDismissCallback#onDismiss(com.marshalchen.common.uimodule.enhanceListView.EnhancedListView, int)}. Return {@code null}, if you don't want the <i>undo</i> feature enabled. Read the README file or the demo project for more detailed samples.
Disables the <i>Swipe to Dismiss</i> feature for this list.
Sets the callback to be called when the user dismissed an item from the list (either by swiping it out - with <i>Swipe to Dismiss</i> enabled - or by deleting it with {@link #delete(int)}). You must call this, before you call {@link #delete(int)} or {@link #enableSwipeToDismiss()} otherwise you will get an {@link IllegalStateException}.
Sets the callback to be called when the user is swiping an item from the list.
Sets the undo style of this list. See the javadoc of {@link com.marshalchen.common.uimodule.enhanceListView.EnhancedListView.UndoStyle} for a detailed explanation of the different styles. The default style (if you never call this method) is {@link com.marshalchen.common.uimodule.enhanceListView.EnhancedListView.UndoStyle#SINGLE_POPUP}.
Sets the time in milliseconds after which the undo popup automatically disappears. The countdown will start when the user touches the screen. If you want to start the countdown immediately when the popups appears, call {@link #setRequireTouchBeforeDismiss(boolean)} with {@code false}.
Sets whether another touch on the view is required before the popup counts down to dismiss the undo popup. By default this is set to {@code true}.
Sets the directions in which a list item can be swiped to delete. By default this is set to {@link com.marshalchen.common.uimodule.enhanceListView.EnhancedListView.SwipeDirection#BOTH} so that an item can be swiped into both directions. <p> <b>Note:</b> This method requires the <i>Swipe to Dismiss</i> feature enabled. Use {@link #enableSwipeToDismiss()} to enable the feature.
Sets the id of the view, that should be moved, when the user swipes an item. Only the view with the specified id will move, while all other views in the list item, will stay where they are. This might be usefull to have a background behind the view that is swiped out, to stay where it is (and maybe explain that the item is going to be deleted). If you never call this method (or call it with 0), the whole view will be swiped. Also if there is no view in a list item, with the given id, the whole view will be swiped. <p> <b>Note:</b> This method requires the <i>Swipe to Dismiss</i> feature enabled. Use {@link #enableSwipeToDismiss()} to enable the feature.
Discard all stored undos and hide the undo popup dialog. This method must be called in {@link android.app.Activity#onStop()}. Otherwise {@link com.marshalchen.common.uimodule.enhanceListView.EnhancedListView.Undoable#discard()} might not be called for several items, what might break your data consistency.
Delete the list item at the specified position. This will animate the item sliding out of the list and then collapsing until it vanished (same as if the user slides out an item). <p> NOTE: If you are using list headers, be aware, that the position argument must take care of them. Meaning 0 references the first list header. So if you want to delete the first list item, you have to pass the number of list headers as {@code position}. Most of the times that shouldn't be a problem, since you most probably will evaluate the position which should be deleted in a way, that respects the list headers.
Slide out a view to the right or left of the list. After the animation has finished, the view will be dismissed by calling {@link #performDismiss(android.view.View, android.view.View, int)}.
Animate the dismissed list item to zero-height and fire the dismiss callback when all dismissed list item animations have completed.
Changes the text of the undo popup. If more then one item can be undone, the number of deleted items will be shown. If only one deletion can be undone, the title of this deletion (or a default string in case the title is {@code null}) will be shown.
Changes the label of the undo button.
Checks whether the delta of a swipe indicates, that the swipe is in the correct direction, regarding the direction set via {@link #setSwipeDirection(com.marshalchen.common.uimodule.enhanceListView.EnhancedListView.SwipeDirection)}
Constructor required for XML inflation.
Set the bitmap config for the animation, default is ARGB_8888, which provides the best quality with large peak memory consumption.
Request the animator to update display if the pageView has been preloaded. <p/> If the pageView is being used in the animation or its content has been buffered, the animator forcibly reloads it. <p/> The reloading process is a bit heavy for an active page, so please don't invoke it too frequently for an active page. The cost is trivial for inactive pages.
Force the animator reload all preloaded pages
-------------------------------------------------------------------------------------------------------------------- internal exposed properties & methods
draw top/left half
draw top/left half shadow
draw bottom/right half
draw bottom/right half shadow
will draw a shade if flipping on the previous(top/left) half and a shine if flipping on the next(bottom/right) half
Enable a hardware layer for the view.
Hint that there is a next page will do nothing if there is no next page
Hint that there is a previous page will do nothing if there is no previous page
The OnFlipListener will notify you when a page has been fully turned.
The OnOverFlipListener will notify of over flipping. This is a great listener to have when implementing pull-to-refresh
Set the overflip mode of the flipview. GLOW is the standard seen in all andriod lists. RUBBER_BAND is more like iOS lists which list you flip past the first/last page but adding friction, like a rubber band.
Fold rotation value in degrees
Translation preserving middle line splitting
Setting shading to use during fold rotation. Should be called before {@link #setAdapter(android.widget.BaseAdapter)}
Starting unfold animation for given views
The animation to run on the items being removed
Call the OnItemClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.
Returns the FreeFlowItem instance of a view at position if that view is visible or null if thats not currently visible
Notifies the attached observers that the underlying data has been changed and any View reflecting the data set should refresh itself.
Called to inform the Container that the underlying data on the adapter has changed (more items added/removed). Note that this won't update the views if the adapter's data objects are the same but the values in those objects have changed. To update those call {@code notifyDataSetChanged}
The heart of the system. Calls the layout to get the frames needed, decides which view should be kept in focus if view transitions are going to happen and then kicks off animation changes if things have changed
Copies the frames from one LinkedHashMap into another. The items are cloned cause we modify the rectangles of the items as they are moving
Adds a view based on the current viewport. If we can get a view from the ViewPool, we dont need to construct a new instance, else we will based on the View class returned by the <code>Adapter</code>
Does all the necessary work right before a view is about to be laid out.
Sets the layout on the Container. If a previous layout was already applied, this causes the views to animate to the new layout positions. Scroll positions will also be reset.
Stops the scrolling immediately
Resets all Runnables that are checking on various statuses
Computes the Rectangle that defines the ViewPort. The Container tries to keep the view at the top left of the old layout visible in the new layout.
Returns the actual frame for a view as its on stage. The FreeFlowItem's frame object always represents the position it wants to be in but actual frame may be different based on animation etc.
Returns the <code>FreeFlowItem</code> representing the data passed in IF that item is being rendered in the Container.
TODO: This should be renamed to layoutInvalidated, since the layout isn't changed
This method is called by the <code>LayoutAnimator</code> instance once all transition animations have been completed.
Sets the adapter for the this CollectionView.All view pools will be cleared at this point and all views on the stage will be cleared
The Viewport defines the rectangular "window" that the container is actually showing of the entire view.
The Viewport defines the rectangular "window" that the container is actually showing of the entire view.
Will move viewport to viewPortX and viewPortY values
Controls whether the edge glows are enabled or not
Defines the choice behavior for the Container allowing multi-select etc.
Perform a quick, in-place update of the checked or activated state on all visible item views. This should only be called when a valid choice mode is active.
Updates the internal ArrayMap keeping track of checked states. Will not update the check UI.
Returns the percentage of width scrolled. The values range from 0 to 1
Returns the percentage of height scrolled. The values range from 0 to 1
A utility method for debugging lifecycle events and putting them in the log messages
Returns the list of FreeFlowItems that will be added because they are present in the new Layout that the FreeFlowContainer is transitioning to. The views representing these items are already placed on the stage before the LayoutAnimator is called.
Returns the list of FreeFlowItems that are not present in the current viewport of the layout that the FreeFlowContainer is transitioning to, and needs to be removed. The views represnting the FreeFlowItems in this list are still on the stage when the LayoutAnimator is given control if you want to animate the removal. You don't have to call removeView on these items, the FreeFlowContainer will do that when the animator relinquishes control by calling the {@link com.marshalchen.common.uimodule.freeflow.core.FreeFlowContainer#onLayoutChangeAnimationsCompleted(FreeFlowLayoutAnimator anim)}
Returns all the items that will move when the layouts change (not added or removed). The returned item is a Pair: the first item representing the FreeFlowItem that represents the view being moved and the second the Rect it is moving from. To get a reference to the view thats moving, you can call item.view on the FreeFlowItem. To get a reference to the Rect its moving to, call item.frame.
Only single touches for the time being
All gesture detectors need to be called through this method to be able to detect gestures. This method delegates work to handler methods (handleStartProgressEvent, handleInProgressEvent) implemented in extending classes.
Returns {@code true} if a gesture is currently in progress.
Return the time difference in milliseconds between the previous accepted GestureDetector event and the current GestureDetector event.
Return the event time of the current GestureDetector event being processed.
Determine (multi)finger focal point (a.k.a. center point between all fingers)
Return the rotation difference from the previous rotate event to the current event.
Return the distance in pixels from the previous shove event to the current event.
Return the current distance between the two pointers forming the gesture in progress.
Return the previous distance between the two pointers forming the gesture in progress.
MotionEvent has no getRawX(int) method; simulate it pending future API approval.
MotionEvent has no getRawY(int) method; simulate it pending future API approval.
Check if we have a sloppy gesture. Sloppy gestures can happen if the edge of the user's hand is touching the screen, for example.
Set the default text size to a given unit and value. See {@link android.util.TypedValue} for the possible dimension units. <p/> <p>Example: to set the text size to 14px, use setTextSize(TypedValue.COMPLEX_UNIT_PX, 14);</p>
Set the {@link android.view.Gravity} used to position text within the title strip. Only the vertical gravity component is used.
Set a listener that will be invoked whenever the page changes or is incrementally scrolled. See {@link com.marshalchen.common.uimodule.modifysys.ViewPager.OnPageChangeListener}.
Set a {@link com.marshalchen.common.uimodule.modifysys.ViewPager.PageTransformer} that will be called for each attached page whenever the scroll position is changed. This allows the application to apply custom property transformations to each page, overriding the default sliding look and feel. <p><em>Note:</em> Prior to Android 3.0 the property animation APIs did not exist. As a result, setting a PageTransformer prior to Android 3.0 (API 11) will have no effect.</p>
Sets the forward tilt offset dimension, allowing for the image to be centered while the phone is "naturally" tilted forwards.
Converts sensor data to yaw, pitch, and roll
There are situations where an activity will start a different application with an intent. In these situations call this method right before leaving the app.
There are situations where we don't want call the AppLock on activities (sharing items to out app for example).
Default App lock is available on Android-v14 or higher.
Convenience method used to extend the default timeout. There are situations where an activity will start a different application with an intent. In these situations call this method right before leaving the app.
Check if we need to show the lock screen at startup
use the method to set up the activity which residemenu need to show;
set the menu background picture;
the visiblity of shadow under the activity view;
add a single items;
set the menu items by array list;
get the menu items;
if you need to do something on the action of closing or opening menu, set the listener here.
we need the call the method before the menu show, because the padding of activity can't get at the moment of onCreateView();
show the reside menu;
close the reslide menu;
return the flag of menu status;
a helper method to build scale down animation;
a helper method to build scale up animation;
if there ware some view you don't want reside menu to intercept their touch event,you can use the method to set.
remove the view from ignored view list;
clear the ignored view list;
if the motion evnent was relative to the view which in ignored view list,return true;
set the icon color;
set the title with resource
set the title with string;
Return the view which represents the spinner on the ActionBar, or null if there isn't one
Return the view which represents the title on the ActionBar, or null if there isn't one
Return the view which represents the overflow action item on the ActionBar, or null if there isn't one
Empty implementation of OnShowcaseViewEventListener such that null checks aren't needed
Creates a {@link android.graphics.Rect} which represents the area the showcase covers. Used to calculate where best to place the text
Override the standard button click event
Create the {@link ShowcaseView} and show it.
Set the title text shown on the ShowcaseView.
Set the target of the showcase.
Set the style of the ShowcaseView. See the sample app for example styles.
Set a listener which will override the button clicks. <p/> Note that you will have to manually hide the ShowcaseView
Don't make the ShowcaseView block touches on itself. This doesn't block touches in the showcased area. <p/> By default, the ShowcaseView does block touches
Make this ShowcaseView hide when the user touches outside the showcased area. This enables {@link #doNotBlockTouches()} as well. <p/> By default, the ShowcaseView doesn't hide on touch.
Set the ShowcaseView to only ever show once.
Set whether the text should be centred in the screen, or left-aligned (which is the default).
Change the position of the ShowcaseView's button from the default bottom-right position.
Set the duration of the fading in and fading out of the ShowcaseView
Calculates the best place to position text
Gets the current scrolling percentage. [0, 1] range.
Sets the scroll position for this view.
Gets the credits roll text tilting angle, on the X axis.
Sets the credits roll text tilting angle, on the X axis.
Gets the end scrolling multiplier value.
Sets the end scrolling multiplier value. This value is multiplied by the available height of the View (that is, {@link #getHeight()} less the top/bottom paddings) and used to offset the end scrolling point. Adjust this to have the text scrolling end in the desired position. Depending on the angle value, you may need to set this to 2, 3 or more to have the text get scrolled completely out of view.
Gets the virtual camera's distance from the text, on the Z axis (depth).
Sets the virtual camera's distance from the text, on the Z axis (depth). <p/> The default distance is <code>0</code>. You can increase it to "zoom out" from the text, or decrease to "zoom in" to the text.
init drop down style, only init once
init on bottom style, only init once
set whether auto load when on bottom
get whether show footer loading progress bar when loading
set whether show footer loading progress bar when loading
get isShowFooterWhenNoMore
set isShowFooterWhenNoMore
get footer button
drop down begin, adjust view status
on drop down loading, you can call it by manual, but you should manual call onBottomComplete at the same time.
drop down complete, restore view status
set header second text
on bottom begin, adjust view status
on bottom loading, you can call it by manual, but you should manual call onBottomComplete at the same time.
on bottom load complete, restore view status
set second position visible(index is 1), because first position is header layout
set whether has more. if hasMore is false, onBottm will not be called when listView scroll to bottom
get whether has more
get header layout view
get footer layout view
get rate about drop down distance and header padding top when drop down
set rate about drop down distance and header padding top when drop down
get min distance which header can release to loading
set min distance which header can release to loading
get header default text, default is R.string.drop_down_list_header_default_text
set header default text, default is R.string.drop_down_list_header_default_text
get header pull text, default is R.string.drop_down_list_header_pull_text
set header pull text, default is R.string.drop_down_list_header_pull_text
get header release text, default is R.string.drop_down_list_header_release_text
set header release text, default is R.string.drop_down_list_header_release_text
get header loading text, default is R.string.drop_down_list_header_loading_text
set header loading text, default is R.string.drop_down_list_header_loading_text
get footer default text, default is R.string.drop_down_list_footer_default_text
set footer default text, default is R.string.drop_down_list_footer_default_text
get footer loading text, default is R.string.drop_down_list_footer_loading_text
set footer loading text, default is R.string.drop_down_list_footer_loading_text
get footer no more text, default is R.string.drop_down_list_footer_no_more_text
set footer no more text, default is R.string.drop_down_list_footer_no_more_text
set header status to {@link #HEADER_STATUS_CLICK_TO_LOAD}
set header status to {@link #HEADER_STATUS_DROP_DOWN_TO_LOAD}
set header status to {@link #HEADER_STATUS_RELEASE_TO_LOAD}
set header status to {@link #HEADER_STATUS_LOADING}
adjust header padding according to motion event
reset header padding
measure header layout
get attrs
Instantiates a new holo circular progress bar.
Gets the current rotation.
Gets the marker rotation.
Sets the wheel size.
updates the paint of the background
updates the paint of the marker
updates the paint of the progress and the thumb to give them a new visual style
similar to {@link }
gives the current progress of the ProgressBar. Value between 0..1 if you set the progress to >1 you'll get progress % 1 as return value
Gets the progress color.
Sets the marker enabled.
Sets the marker progress.
Sets the progress.
Sets the progress background color.
Sets the progress color.
Sets a listener which gets call on item expand or collapse
Gets the duration of the collapse animation in ms. Default is 330ms. Override this method to change the default.
Set's the Animation duration for the Expandable animation
Check's if any position is currently Expanded To collapse the open item @see collapseLastOpen
Performs either COLLAPSE or EXPAND animation on the target view
Closes the current open item. If it is current visible it will be closed with an animation.
Utility methods to read and write a bitset from and to a Parcel
Initializes expand collapse animation, has two types, collapse (1) and expand (0).
Collapses the currently open view.
Registers a OnItemClickListener for this listview which will expand the item by default. Any other OnItemClickListener will be overriden. To undo call setOnItemClickListener(null) Important: This method call setOnItemClickListener, so the value will be reset
Constructor used to make the EMPTY_STATE singleton
Constructor called by derived classes when creating their ListSavedState objects
Constructor used when reading from a parcel. Reads the state of the superclass.
Add a fixed view to appear at the top of the list. If addHeaderView is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. <p/> NOTE: Call this before calling setAdapter. This is so ListView can wrap the supplied cursor with one that will also account for header and footer views.
Add a fixed view to appear at the bottom of the list. If addFooterView is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. <p/> NOTE: Call this before calling setAdapter. This is so ListView can wrap the supplied cursor with one that will also account for header and footer views.
Removes a previously-added footer view.
Starts a scroll that moves the difference between y and our last motions y if it's a movement that represents a big enough scroll.
move our views by deltaY - what's the incrementalDeltaY?
As we move and scroll and recycle views we want to fill the gap created with new views
Override to tell filling flow to continue to fill up as we have space.
Override to tell filling flow to continue to fill up as we have space.
Put a specific item at a specific location on the screen and then build up and down from there. visible area.
Gets a view either a new view an unused view?? or a recycled view and adds it to our children
Measures a child view in the list. Should call
Get a view and have it show the data associated with the specified position. This is called when we have already discovered that the view is not available for reuse in the recycle bin. The only choices left are converting an old view or making a new one.
Override to position the child as you so wish
Override to offset the child as you so wish
Override to set you custom listviews child to a specific left location
Override to set you custom listviews child to a specific top location
Override to set you custom listviews child to a bottom top location
Notify any scroll listeners of our current touch mode
Dump any currently saved views with transient state.
Finish the removal of any views that skipped the scrap heap.
Move all views remaining in mActiveViews to mScrapViews.
Constructor called from {@link android.widget.AbsListView#onSaveInstanceState()}
Constructor called from {@link #CREATOR}
Constructor called from {@link #CREATOR}
Grid padding is applied to the list item rows but not the header and footer
Our mColumnTops and mColumnBottoms need to be re-built up to the mSyncPosition - the following layout request will then layout the that position and then fillUp and fillDown appropriately.
GridItemRecord UTILS
Here we're making sure that all grid view items are width MATCH_PARENT and height WRAP_CONTENT. That's what this grid is designed for
Constructor called from {@link #CREATOR}
Counts the number of items that would be need to fill out the last row in the group of items with the given header.
Set the adapter id for this header so we can easily pull it later.
Gets the header at an item position. However, the position must be that of a HeaderFiller.
Get the currently stickied header.
If set to true, headers will ignore horizontal padding.
Set close animation for promoted actions
Set close animation for single button
Set open animation for single button
GETTERS AND SETTERS
GETTERS AND SETTERS text size
text paint
link paint
text content
text colour
link click listener
line height
page height
Creates a new ripple.
Draws the ripple centered at (0,0) using the specified paint.
Returns the maximum bounds of the ripple relative to the ripple center.
Specifies the starting position relative to the drawable bounds. No-op if the ripple has already entered.
Starts the enter animation.
Starts the exit animation.
Jump all animations to their end state. The caller is responsible for removing the ripple from the list of animating ripples.
Cancels all animations. The caller is responsible for removing the ripple from the list of animating ripples.
Creates a new ripple.
Cancel all animations. The caller is responsible for removing the ripple from the list of animating ripples.
Creates a new ripple drawable with the specified ripple color and optional content and mask drawables.
Attempts to start an enter animation for the active hotspot. Fails if there are too many animating ripples.
Attempts to start an exit animation for the active hotspot. Fails if there is no active hotspot.
Cancels and removes the active ripple, all exiting ripples, and the background. Nothing will be drawn after this method is called.
Notifies all the animating ripples that the hotspot bounds have changed.
Creates an active hotspot at the specified location.
Removes a ripple from the exiting ripple list.
Sets the maximum ripple radius in pixels. The default value of {@link #RADIUS_AUTO} defines the radius as the distance from the center of the drawable bounds (or hotspot bounds, if specified) to a corner.
Utility method to determine whether the given point, in local coordinates, is inside the view, where the area of the view is expanded by the slop factor. This method is called while processing touch-move events to determine if the event is still within the view.
switch between expansion and shrinkage
refers to {@link LayoutAnimationController#getDelayForView(android.view.View view)}
Constructor to use when building a TranslateAnimation from code
Must be linked to the original lifecycle.
Apply custom down scale factor. <p/> By default down scale factor is set to {@link com.marshalchen.common.uimodule.blurdialogfragment.BlurDialogEngine#BLUR_DOWN_SCALE_FACTOR} <p/> Higher down scale factor will increase blurring speed but reduce final rendering quality.
Apply custom blur radius. <p/> By default blur radius is set to {@link com.marshalchen.common.uimodule.blurdialogfragment.BlurDialogEngine#BLUR_RADIUS}
default constructor as needed
Enable or disable debug mode.
Set the down scale factor used by the {@link BlurDialogEngine}
Set the blur radius used by the {@link BlurDialogEngine}
default constructor as needed
We make a fake ImageView with width and height MATCH_PARENT. This ImageView will host the blurred snapshot/bitmap.
Snapshots the specified layout and scale it using scaleBitmap() function then we blur the scaled bitmap with the preferred blur radius. Finally, we post it to our fake {@link android.widget.ImageView}.
Sets the custom Outline provider on API>=21. Does nothing on API<21
Our DiscreteSeekBar implementation uses a circular drawable on API < 21 because we don't set it as Background, but draw it ourselves
As our DiscreteSeekBar implementation uses a circular drawable on API < 21 we want to use the same method to set its bounds as the Ripple's hotspot bounds.
Sets the TextView text direction attribute when possible
We want the Floater to be full-width because the contents will be moved from side to side. We may/should change this in the future to use just the PARENT View width and/or pass it in the constructor
This will start the closing animation of the Marker and call onClosingComplete when finished
FORCE the popup window to be removed. You typically calls this when the parent view is being removed from the window to avoid a Window Leak
I'm NOT completely sure how all this bitwise things work...
Sets the current Indicator formatter string
Sets the current {@link com.marshalchen.common.uimodule.discreteseekbar.DiscreteSeekBar.NumericTransformer}
Retrieves the current {@link com.marshalchen.common.uimodule.discreteseekbar.DiscreteSeekBar.NumericTransformer}
Sets the maximum value for this DiscreteSeekBar if the supplied argument is smaller than the Current MIN value, the MIN value will be set to MAX-1 <p/> <p> Also if the current progress is out of the new range, it will be set to MIN </p>
Sets the minimum value for this DiscreteSeekBar if the supplied argument is bigger than the Current MAX value, the MAX value will be set to MIN+1 <p> Also if the current progress is out of the new range, it will be set to MIN </p>
Sets the current progress for this DiscreteSeekBar The supplied argument will be capped to the current MIN-MAX range
Get the current progress
Sets a listener to receive notifications of changes to the DiscreteSeekBar's progress level. Also provides notifications of when the DiscreteSeekBar shows/hides the bubble indicator.
public void reset() { resetPrivate(); int curr = getCurrentItem(); onPageScrolled(curr, 0.0f, 0); private void resetPrivate() { for (int i = 0; i < getChildCount(); i++) { View v = getChildAt(i); //			ViewHelper.setRotation(v, -ViewHelper.getRotation(v)); //			ViewHelper.setRotationX(v, -ViewHelper.getRotationX(v)); //			ViewHelper.setRotationY(v, -ViewHelper.getRotationY(v)); //			ViewHelper.setTranslationX(v, -ViewHelper.getTranslationX(v)); //			ViewHelper.setTranslationY(v, -ViewHelper.getTranslationY(v)); ViewHelper.setRotation(v, 0); ViewHelper.setRotationX(v, 0); ViewHelper.setRotationY(v, 0); ViewHelper.setTranslationX(v, 0); ViewHelper.setTranslationY(v, 0); ViewHelper.setAlpha(v, 1.0f); ViewHelper.setScaleX(v, 1.0f); ViewHelper.setScaleY(v, 1.0f); ViewHelper.setPivotX(v, 0); ViewHelper.setPivotY(v, 0); logState(v, "Child " + i);
Default constructor
Allows to change PhotoViewAttacher within range of single instance
Helper method that simply checks the Matrix, and then displays the result
Helper method that maps the supplied Matrix to the current Drawable
Helper method that 'unpacks' a Matrix and returns the required value
Resets the Matrix back to FIT_CENTER, and then displays it.s
Calculate Matrix for FIT_CENTER
Create an Android {@link SpringLooper} for the detected Android platform.
Creates a reentrant set of callbacks.
Returns an immutable set of Callbacks.
Add a listener
Remove a listener
Gets a count of all listeners.
Clears all listeners
Some SVG unit conversions.  This is approximate
Elliptical arc implementation based on the SVG specification notes
Process a list of transforms foo(n,n,n...) bar(n,n,n..._ ...) delims are whitespace or ,'s
Called when replaying history to ensure the dirty region includes all mPoints.
Animate items that are deleted entirely and items that move out of bounds.
Animate items that just appeared and items that move within the screen.
get progress text color
get progress text size
Set the text in the progress bar Doesn't invalidate the view
Sets the image scale type according to {@link android.widget.ImageView.ScaleType}.
Defines if the percent text should be shown or not. To modify the text checkout {@link #setPercentStyle(com.marshalchen.common.uimodule.square_progressbar.utils.PercentStyle)}.
Returns the {@link com.marshalchen.common.uimodule.square_progressbar.utils.PercentStyle} of the percent text. Maybe returns the default value, check {@link #setPercentStyle(com.marshalchen.common.uimodule.square_progressbar.utils.PercentStyle)} fo that.
Both date parameters must be non-null and their {@link java.util.Date#getTime()} must not return 0. Time of day will be ignored.  For instance, if you pass in {@code minDate} as 11/16/2012 5:15pm and {@code maxDate} as 11/16/2013 4:30am, 11/16/2012 will be the first selectable date and 11/15/2013 will be the last selectable date ({@code maxDate} is exclusive). <p/> This will implicitly set the {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode} to {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode#SINGLE}.  If you want a different selection mode, use {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.FluentInitializer#inMode(com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode)} on the {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.FluentInitializer} this method returns. <p/> The calendar will be constructed using the given locale. This means that all names (months, days) will be in the language of the locale and the weeks start with the day specified by the locale.
Both date parameters must be non-null and their {@link java.util.Date#getTime()} must not return 0. Time of day will be ignored.  For instance, if you pass in {@code minDate} as 11/16/2012 5:15pm and {@code maxDate} as 11/16/2013 4:30am, 11/16/2012 will be the first selectable date and 11/15/2013 will be the last selectable date ({@code maxDate} is exclusive). <p/> This will implicitly set the {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode} to {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode#SINGLE}.  If you want a different selection mode, use {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.FluentInitializer#inMode(com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode)} on the {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.FluentInitializer} this method returns. <p/> The calendar will be constructed using the default locale as returned by {@link java.util.Locale#getDefault()}. If you wish the calendar to be constructed using a different locale, use {@link #init(java.util.Date, java.util.Date, java.util.Locale)}.
Override the {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode} from the default ({@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode#SINGLE}).
Set an initially-selected date.  The calendar will scroll to that date if it's not already visible.
Set multiple selected dates.  This will throw an {@link IllegalArgumentException} if you pass in multiple dates and haven't already called {@link #inMode(com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode)}.
This method should only be called if the calendar is contained in a dialog, and it should only be called once, right after the dialog is shown (using {@link android.content.DialogInterface.OnShowListener} or {@link android.app.DialogFragment#onStart()}).
This method should only be called if the calendar is contained in a dialog, and it should only be called when the screen has been rotated and the dialog should be re-measured.
Returns a string summarizing what the client sent us for init() params.
Clears out the hours/minutes/seconds/millis of a Calendar.
Select a new date.  Respects the {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode} this CalendarPickerView is configured with: if you are in {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode#SINGLE}, the previously selected date will be un-selected.  In {@link com.marshalchen.common.uimodule.timessquare.CalendarPickerView.SelectionMode#MULTIPLE}, the new date will be added to the list of selected dates. <p/> If the selection was made (selectable date, in range), the view will scroll to the newly selected date if it's not already visible.
Return cell and month-index (for scrolling) for a given Date.
Set a listener to react to user selection of a disabled date.
Set a listener used to discriminate between selectable and unselectable dates. Set this to disable arbitrary dates as they are rendered. <p/> Important: set this before you call {@link #init(java.util.Date, java.util.Date)} methods.  If called afterwards, it will not be consistently applied.
Draw all the events of a particular day.
Draw the name of the event on top of the event rectangle.
Gets more events of one/more month(s) if necessary. This method is called when the user is scrolling the week view. The week view stores the events of three months: the visible month, the previous month, the next month.
Sorts the events in ascending order.
Calculates the left and right positions of each events. This comes handy specially if events are overlapping.
Expands all the events to maximum possible width. The events will try to occupy maximum space available horizontally.
Checks if two events overlap.
Checks if time1 occurs after (or at the same time) time2.
Deletes the events of the months that are too far away from the current month.
Get the number of visible days in a week.
Set the number of visible days in a week.
Set the first day of the week. First day of the week is used only when the week view is first drawn. It does not of any effect after user starts scrolling horizontally. <p> </p> {@link java.util.Calendar#MONDAY}, {@link java.util.Calendar#TUESDAY}, {@link java.util.Calendar#WEDNESDAY}, {@link java.util.Calendar#THURSDAY}, {@link java.util.Calendar#FRIDAY}.
Set the length of the day name displayed in the header row. Example of short day names is 'M' for 'Monday' and example of long day names is 'Mon' for 'Monday'. {@link com.alamkanak.weekview.WeekView#LENGTH_LONG}.
Show today on the week view.
Show a specific day on the week view.
Refreshes the view and loads the events again.
Checks if an integer array contains a particular value.
Converts an int (0-23) to time string (e.g. 12 PM).
Checks if two times are on the same day.
Get the day name of a given date.
Initializes the event for week view.
Print all items of HashMap(Notice:The value should be or can be convert to String)
Pop a simple alertdialog
compare two object
get Unicode Length
Create and/or open a database that will be used for reading and writing.
Create and/or open a database that will be used for reading only.
Create Folder
Delete File
Delete the File no matter it's a file or folder.If the file is a folder,this method will delete all the file in the folder.
append file using FileOutputStream
append file using FileWriter
append file using RandomAccessFile
copy file
read file
write file, the string will be written to the begin of the file
write file, the string list will be written to the begin of the file
copy file
read file to string list, a element of list is a line
get file name from path, not include suffix <p/> <pre> </pre>
get file name from path, include suffix <p/> <pre> </pre>
get folder name from path <p/> <pre> </pre>
get suffix of file from path <p/> <pre> </pre>
Creates the directory named by the trailing filename of this file, including the complete directory path required to create this directory. <br/> <br/> <ul> <strong>Attentions:</strong> <li>makeDirs("C:\\Users\\Trinea") can only create users folder</li> <li>makeFolder("C:\\Users\\Trinea\\") can create Trinea folder</li> </ul> the directories can not be created. <ul> <li>if {@link FileUtils#getFolderName(String)} return null, return false</li> <li>if target directory already exists, return true</li> <li>return {@link java.io.File#}</li> </ul>
Indicates if this file represents a file on the underlying file system.
Indicates if this file represents a directory on the underlying file system.
delete file or directory <ul> <li>if path is null or empty, return true</li> <li>if path not exist, return true</li> <li>if path exist, delete recursion. return true</li> <ul>
get file size <ul> <li>if path is null or empty, return -1</li> <li>if path exist and it is a file, return file size, else return -1</li> <ul>
install according conditions <ul> <li>if system application or rooted, see {@link #installSilent(android.content.Context, String)}</li> <li>else see {@link #installNormal(android.content.Context, String)}</li> </ul>
install package silent by root <ul> <strong>Attentions:</strong> <li>Don't call this on the ui thread, it may costs some times.</li> <li>You should add <strong>android.permission.INSTALL_PACKAGES</strong> in manifest, so no need to request root permission, if you are system app.</li> <li>Default pm install params is "-r".</li> </ul>
install package silent by root <ul> <strong>Attentions:</strong> <li>Don't call this on the ui thread, it may costs some times.</li> <li>You should add <strong>android.permission.INSTALL_PACKAGES</strong> in manifest, so no need to request root permission, if you are system app.</li> </ul>
uninstall according conditions <ul> <li>if system application or rooted, see {@link #uninstallSilent(android.content.Context, String)}</li> <li>else see {@link #uninstallNormal(android.content.Context, String)}</li> </ul>
uninstall package silent by root <ul> <strong>Attentions:</strong> <li>Don't call this on the ui thread, it may costs some times.</li> <li>You should add <strong>android.permission.DELETE_PACKAGES</strong> in manifest, so no need to request root permission, if you are system app.</li> </ul>
whether the app whost package's name is packageName is on the top of the stack <ul> <strong>Attentions:</strong> <li>You should add <strong>android.permission.GET_TASKS</strong> in manifest</li> </ul>
put string preferences
get string preferences name that is not a string
get string preferences this name that is not a string
put int preferences
get int preferences name that is not a int
get int preferences this name that is not a int
put long preferences
get long preferences this name that is not a long
put float preferences
get float preferences name that is not a float
get float preferences this name that is not a float
put boolean preferences
get boolean preferences, default is false name that is not a boolean
get boolean preferences this name that is not a boolean
get an asset using ACCESS_STREAMING mode. This provides access to files that have been bundled with an application as assets -- that is, files placed in to the "assets" directory.
get content from a raw resource. This can only be used with resources whose value is the name of an asset files -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources.
same to {@link ResourceUtils#getFileFromAssets(android.content.Context, String)}, but return type is List<String>
same to {@link ResourceUtils#getFileFromRaw(android.content.Context, int)}, but return type is List<String>
Used to extract and return the extension of a given file. file.
Used to extract the filename without its extension. extension.
Update Files via Multipart
Get image from newwork
Get image from newwork
Get data from stream
delete all the wrap of String
The method is to get the Default UniversalImageLoader config
TODO This should use the decode/crop/encode single step API so that the whole (possibly large) Bitmap doesn't need to be read into memory
Creates a CompositeFilter with the default {@link BasicFilter} shaders that takes in a given number of inputs The number of inputs that this filter expects
Creates a CompositeMultiPixelFilter with the default {@link BasicFilter} shaders that takes in a given number of inputs The number of inputs that this filter expects
Draws the given texture using OpenGL and the given vertex and fragment shaders. Calling of this method is handled by the {@link FastImageProcessingPipeline} or other filters and should not be called manually.
Cleans up the opengl objects for this renderer.  Must be called with opengl context. Normally called by {@link FastImageProcessingPipeline}.
Appends three jumping dots to the end of a TextView text. <p/> This implies that the animation will by default be a wave. <p/> If the TextView has no text, the resulting TextView text will consist of the three dots only. <p/> The TextView text is cached to the current value at this time and set again in the {@link #build()} method, so any change to the TextView text done in the meantime will be lost. This means that <b>you should do all changes to the TextView text <i>before</i> you begin using this builder.</b> <p/> Call the {@link #build()} method once you're done to get the resulting {@link com.marshalchen.common.uimodule.jumpingbeans.JumpingBeans}.
Appends three jumping dots to the end of a TextView text. <p/> This implies that the animation will by default be a wave. <p/> If the TextView has no text, the resulting TextView text will consist of the three dots only. <p/> The TextView text is cached to the current value at this time and set again in the {@link #build()} method, so any change to the TextView text done in the meantime will be lost. This means that <b>you should do all changes to the TextView text <i>before</i> you begin using this builder.</b> <p/> Call the {@link #build()} method once you're done to get the resulting {@link com.marshalchen.common.uimodule.jumpingbeans.JumpingBeans}.
Sets the fraction of the animation loop time spent actually animating. The rest of the time will be spent "resting". The default value is {@link com.marshalchen.common.uimodule.jumpingbeans.JumpingBeans#DEFAULT_ANIMATION_DUTY_CYCLE}.
Sets the jumping loop duration. The default value is {@link com.marshalchen.common.uimodule.jumpingbeans.JumpingBeans#DEFAULT_LOOP_DURATION}.
Combine all of the options that have been set and return a new {@link com.marshalchen.common.uimodule.jumpingbeans.JumpingBeans} instance. <p/> Remember to call the {@link #stopJumping()} method once you're done using the JumpingBeans (that is, when you detach the TextView from the view tree, you hide it, or the parent Activity/Fragment goes in the paused status). This will allow to release the animations and free up memory and CPU that would be otherwise wasted.
Create a new {@link com.marshalchen.common.uimodule.listviewanimations.itemmanipulation.AnimateAdditionAdapter} with given {@link android.widget.BaseAdapter}.
Creates a new {@link com.marshalchen.common.uimodule.listviewanimations.itemmanipulation.ExpandableListItemAdapter} with the specified list, or an empty list if items == null.
Creates a new {@link com.marshalchen.common.uimodule.listviewanimations.ArrayAdapter} using given {@code List} , or an empty {@code List}  if objects == null.
Creates a new {@link com.marshalchen.common.uimodule.listviewanimations.ArrayAdapter}, using (a copy of) given {@code List} , or an empty {@code List}  if objects = null.
Loads an {@link com.marshalchen.common.uimodule.nineoldandroids.animation.Animator} object from a resource
Creates a new animation whose parameters come from the specified context and attributes set.
Sets up the given animation to play at the same time as the animation supplied in the {@link com.marshalchen.common.uimodule.nineoldandroids.animation.AnimatorSet#play(Animator)} call that created this <code>Builder</code> object. {@link com.marshalchen.common.uimodule.nineoldandroids.animation.AnimatorSet#play(Animator)} method starts.
Sets up the given animation to play when the animation supplied in the {@link com.marshalchen.common.uimodule.nineoldandroids.animation.AnimatorSet#play(Animator)} call that created this <code>Builder</code> object ends. {@link com.marshalchen.common.uimodule.nineoldandroids.animation.AnimatorSet#play(Animator)} method ends.
Sets up the given animation to play when the animation supplied in the {@link com.marshalchen.common.uimodule.nineoldandroids.animation.AnimatorSet#play(Animator)} call that created this <code>Builder</code> object to start when the animation supplied in this method call ends. {@link com.marshalchen.common.uimodule.nineoldandroids.animation.AnimatorSet#play(Animator)} method to play.
Sets up the animation supplied in the {@link com.marshalchen.common.uimodule.nineoldandroids.animation.AnimatorSet#play(Animator)} call that created this <code>Builder</code> object to play when the given amount of time elapses. animation starts.
This function returns the calculated in-between value for a color given integers that represent the start and end values in the four bytes of the 32-bit int. Each channel is separately linearly interpolated and the resulting calculated values are recombined into the return value. separate bytes of the parameter separate bytes of the parameter result, derived by separating the start and end values into separate color channels and interpolating each one separately, recombining the resulting values in the same way.
Constructs a Keyframe object with the given time. The value at this time will be derived from the target object when the animation first starts (note that this implies that keyframes with no initial value must be used as part of an {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ObjectAnimator}). The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes. of time elapsed of the overall animation duration.
Constructs a Keyframe object with the given time. The value at this time will be derived from the target object when the animation first starts (note that this implies that keyframes with no initial value must be used as part of an {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ObjectAnimator}). The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes. of time elapsed of the overall animation duration.
Constructs a Keyframe object with the given time. The value at this time will be derived from the target object when the animation first starts (note that this implies that keyframes with no initial value must be used as part of an {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ObjectAnimator}). The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes. of time elapsed of the overall animation duration.
Indicates whether this keyframe has a valid value. This method is called internally when an {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ObjectAnimator} first starts; keyframes without values are assigned values at that time by deriving the value for the property from the target object.
Gets the type of keyframe. This information is used by ValueAnimator to determine the type of {@link com.marshalchen.common.uimodule.nineoldandroids.animation.TypeEvaluator} to use when calculating values between keyframes. The type is based on the type of Keyframe created.
Sets the property that will be animated. Property objects will take precedence over properties specified by the {@link #setPropertyName(String)} method. Animations should be set up to use one or the other, not both.
Private utility constructor that initializes the target object and property being animated.
Constructs and returns an ObjectAnimator that animates between int values. A single value implies that that value is the one being animated to. Two values imply a starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).
Constructs and returns an ObjectAnimator that animates between float values. A single value implies that that value is the one being animated to. Two values imply a starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).
Constructs and returns an ObjectAnimator that animates between Object values. A single value implies that that value is the one being animated to. Two values imply a starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation). provide the necessary interpolation between the Object values to derive the animated value.
Internal utility constructor, used by the factory methods to set the property.
Constructs and returns a PropertyValuesHolder with a given property and set of int values.
Constructs and returns a PropertyValuesHolder with a given property and set of float values.
Constructs and returns a PropertyValuesHolder with a given property and set of Object values. This variant also takes a TypeEvaluator because the system cannot automatically interpolate between objects of unknown type. provide the necessary interpolation between the Object values to derive the animated value.
Constructs and returns a PropertyValuesHolder object with the specified property name and set of values. These values can be of any type, but the type should be consistent so that an appropriate {@link android.animation.TypeEvaluator} can be found that matches the common type. <p>If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling a getter function on the object. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ObjectAnimator}, and with a getter function derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has no way of determining what the value should be. can be the actual property name to be used when using a ObjectAnimator object, or just a name used to get animated values, such as if this object is used with an ValueAnimator object.
Constructs and returns a PropertyValuesHolder object with the specified property and set of values. These values can be of any type, but the type should be consistent so that an appropriate {@link android.animation.TypeEvaluator} can be found that matches the common type. <p>If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling the property's {@link android.util.Property#get(Object)} function. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction with {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ObjectAnimator}, since otherwise PropertyValuesHolder has no way of determining what the value should be.
Set the animated values for this object to this set of ints. If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling a getter function on the object. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ObjectAnimator}, and with a getter function derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has no way of determining what the value should be.
Set the animated values for this object to this set of floats. If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling a getter function on the object. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ObjectAnimator}, and with a getter function derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has no way of determining what the value should be.
Set the animated values for this object to this set of Objects. If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling a getter function on the object. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ObjectAnimator}, and with a getter function derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has no way of determining what the value should be.
Sets the property that will be animated. <p>Note that if this PropertyValuesHolder object is used with ObjectAnimator, the property must exist on the target object specified in that ObjectAnimator.</p>
Sets a listener that is sent update events throughout the life of an animation.
The most recent value calculated by this <code>ValueAnimator</code> when there is just one property being animated. This value is only sensible while the animation is running. The main purpose for this read-only property is to retrieve the value from the <code>ValueAnimator</code> during a call to {@link AnimatorUpdateListener#onAnimationUpdate(com.marshalchen.common.uimodule.nineoldandroids.animation.ValueAnimator)}, which is called during each animation frame, immediately after the value is calculated. the single property being animated. If there are several properties being animated (specified by several PropertyValuesHolder objects in the constructor), this function returns the animated value for the first of those objects.
The most recent value calculated by this <code>ValueAnimator</code> for <code>propertyName</code>. The main purpose for this read-only property is to retrieve the value from the <code>ValueAnimator</code> during a call to {@link AnimatorUpdateListener#onAnimationUpdate(com.marshalchen.common.uimodule.nineoldandroids.animation.ValueAnimator)}, which is called during each animation frame, immediately after the value is calculated. by this <code>ValueAnimator</code>.
The type evaluator to be used when calculating the animated values of this animation. The system will automatically assign a float or int evaluator based on the type of <code>startValue</code> and <code>endValue</code> in the constructor. But if these values are not one of these primitive types, or if different evaluation is desired (such as is necessary with int values that represent colors), a custom evaluator needs to be assigned. For example, when running an animation on color values, the {@link com.marshalchen.common.uimodule.nineoldandroids.animation.ArgbEvaluator} should be used to get correct RGB color interpolation. <p>If this ValueAnimator has only one set of values being animated between, this evaluator will be used for that set. If there are several sets of values being animated, which is the case if PropertyValuesHOlder objects were set on the ValueAnimator, then the evaluator is assigned just to the first PropertyValuesHolder object.</p>
This factory method creates and returns a Property given the <code>class</code> and <code>name</code> parameters, where the <code>"name"</code> parameter represents either: <ul> </ul> <p>If either of the get/is method alternatives is found on the class, but an appropriate <code>setName()</code> method is not found, the <code>Property</code> will be {@link #isReadOnly() readOnly}. Calling the {@link #set(Object, Object)} method on such a property is allowed, but will have no effect.</p> <p>If neither the methods nor the field are found on the class a {@link com.marshalchen.common.uimodule.nineoldandroids.util.NoSuchPropertyException} exception will be thrown.</p>
A constructor that takes an identifying name and {@link #getType() type} for the property.
Returns true if the {@link #set(Object, Object)} method does not set the value on the target object (in which case the {@link #set(Object, Object) set()} method should throw a {@link com.marshalchen.common.uimodule.nineoldandroids.util.NoSuchPropertyException} exception). This may happen if the Property wraps functionality that allows querying the underlying value but not setting it. For example, the {@link #of(Class, Class, String)} factory method may return a Property with name "foo" for an object that has only a <code>getFoo()</code> or <code>isFoo()</code> method, but no matching <code>setFoo()</code> method.
Sets the value on <code>object</code> which this property represents. If the method is unable to set the value on the target object it will throw an {@link UnsupportedOperationException} exception.
Returns the name for this property.
Returns the type for this property.
For given property name 'name', look for getName/isName method or 'name' field. Also look for setName method (optional - could be readonly). Failing method getters and field results in throwing NoSuchPropertyException. "get" and "is to search for the appropriate methods. If the get/is methods are not found, the constructor will search for a field with that exact name.
Utility method to check whether the type of the underlying field/method on the target object matches the type of the Property. The extra checks for primitive types are because generics will force the Property type to be a class, whereas the type of the underlying method/field will probably be a primitive type instead. Accept float as matching Float, etc.
Create a proxy to allow for modifying post-3.0 view properties on all pre-3.0 platforms. <strong>DO NOT</strong> wrap your views if you are using {@code ObjectAnimator} as it will handle that itself.
This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.
The mechanism by which the user can request several properties that are then animated together works by posting this Runnable to start the underlying Animator. Every time a property animation is requested, we cancel any previous postings of the Runnable and re-post it. This means that we will only ever run the Runnable (and thus start the underlying animator) after the caller is done setting the properties that should be animated together.
Removes the given property from being animated as a part of this PropertyBundle. If the property was a part of this bundle, it returns true to indicate that it was, in fact, canceled. This is an indication to the caller that a cancellation actually occurred. has therefore been canceled.
Constructor, called by View. This is private by design, as the user should only get a ViewPropertyAnimator by calling View.animate().
Sets the duration for the underlying animator that animates the requested properties. By default, the animator uses the default value for ValueAnimator. Calling this method will cause the declared value to be used instead. cannot be negative.
Returns the current duration of property animations. If the duration was set on this object, that value is returned. Otherwise, the default value of the underlying Animator is returned.
Starts the underlying Animator for a set of properties. We use a single animator that simply runs from 0 to 1, and then use that fractional value to set each property value accordingly.
Utility function, called by the various x(), y(), etc. methods. This stores the constant name for the property along with the from/delta values that will be used to calculate and set the property during the animation. This structure is added to the pending animations, awaiting the eventual start() of the underlying animator. A Runnable is posted to start the animation, and any pending such Runnable is canceled (which enables us to end up starting just one animator for all of the properties specified at one time).
Utility function, called by the various xBy(), yBy(), etc. methods. This method is just like animateProperty(), except the value is an offset from the property's current value, instead of an absolute "to" value.
Utility function, called by animateProperty() and animatePropertyBy(), which handles the details of adding a pending animation and posting the request to start the animation.
This method handles setting the property values directly in the View object's fields. propertyConstant tells it which property should be set, value is the value to set the property to.
This method gets the value of the named property from the View object.
Constructor, called by View. This is private by design, as the user should only get a ViewPropertyAnimator by calling View.animate().
Clean-up the resources attached to this object. This needs to be called when the ImageView is no longer used. A good example is from {@link android.view.View#onDetachedFromWindow()} or from {@link android.app.Activity#onDestroy()}. This is automatically called if you are using {@link com.marshalchen.common.uimodule.panningview.PanningView}.
Empty implementation of OnShowcaseViewEventListener such that null checks aren't needed
Create the {@link com.marshalchen.common.uimodule.showcaseview.ShowcaseView} and show it.
Sets the image of the {@link com.marshalchen.common.uimodule.square_progressbar.SquareProgressBar}. Must be a valid ressourceId.
Sets the progress of the {@link com.marshalchen.common.uimodule.square_progressbar.SquareProgressBar}. If opacity is selected then here it sets it. See {@link #setOpacity(boolean)} for more information.
Sets the colour of the {@link com.marshalchen.common.uimodule.square_progressbar.SquareProgressBar} to a predefined android holo color. <br/> <b>Examples:</b> <ul> <li>holo_blue_bright</li> <li>holo_blue_dark</li> <li>holo_blue_light</li> <li>holo_green_dark</li> <li>holo_green_light</li> <li>holo_orange_dark</li> <li>holo_orange_light</li> <li>holo_purple</li> <li>holo_red_dark</li> <li>holo_red_light</li> </ul>
Sets the colour of the {@link com.marshalchen.common.uimodule.square_progressbar.SquareProgressBar}. YOu can give it a hex-color string like <i>#C9C9C9</i>.
This sets the colour of the {@link com.marshalchen.common.uimodule.square_progressbar.SquareProgressBar} with a RGB colour.
This sets the colour of the {@link com.marshalchen.common.uimodule.square_progressbar.SquareProgressBar} with a RGB colour. Works when used with <code>android.graphics.Color.rgb(int, int, int)</code>
This sets the width of the {@link com.marshalchen.common.uimodule.square_progressbar.SquareProgressBar}.
Defines if the percent text should be shown or not. To modify the text checkout {@link #setPercentStyle(PercentStyle)}.
Returns an {@link android.widget.AbsListView.OnScrollListener} to be added to the {@link android.widget.ListView} using {@link android.widget.ListView#setOnScrollListener(android.widget.AbsListView.OnScrollListener)}. If a scroll listener is already assigned, the caller should still pass scroll changes through to this listener. This will ensure that this {@link SwipeDismissListViewTouchListener} is paused during list view scrolling.</p>
Convert a translucent themed Activity {@link android.R.attr#windowIsTranslucent} back from opaque to translucent following a call to {@link #convertActivityFromTranslucent()} <p> Calling this allows the Activity behind this one to be seen again. Once all such Activities have been redrawn <p> This call has no effect on non-translucent activities or on activities with the {@link android.R.attr#windowIsFloating} attribute.
Enable edge tracking for the selected edges of the parent view. The callback's {@link com.marshalchen.common.uimodule.swipeback.ViewDragHelper.Callback#onEdgeTouched(int, int)} and {@link com.marshalchen.common.uimodule.swipeback.ViewDragHelper.Callback#onEdgeDragStarted(int, int)} methods will only be invoked for edges for which edge tracking has been enabled.
Capture a specific child view for dragging within the parent. The callback will be notified but {@link com.marshalchen.common.uimodule.swipeback.ViewDragHelper.Callback#tryCaptureView(android.view.View, int)} will not be asked permission to capture this view.
Find the topmost child under the given point within the parent view's coordinate system. The child order is determined using {@link com.marshalchen.common.uimodule.swipeback.ViewDragHelper.Callback#getOrderedChildIndex(int)}
bind a view with a specific {@link com.marshalchen.common.uimodule.swipelayout.SwipeLayout.OnRevealListener}
bind multiple views with an {@link com.marshalchen.common.uimodule.swipelayout.SwipeLayout.OnRevealListener}.
There are 2 diffirent show mode. {@link com.marshalchen.common.uimodule.swipelayout.SwipeLayout.ShowMode}.PullOut and {@link com.marshalchen.common.uimodule.swipelayout.SwipeLayout.ShowMode}.LayDown.
Sets the anchor values used by this ViewGroup if it's children do not have anchor values supplied directly (via LayoutParams)
Copy constructor
Creates a new set of layout parameters with the specified values.
Sets the scale (0-1) of the ZoomPanLayout
Retrieves the current scale of the ZoomPanLayout
Constructor to use when creating a ZoomPanLayout from code.  Inflating from XML is not currently supported.
Determines whether the ZoomPanLayout should limit it's minimum scale to no less than what would be required to fill it's container
Set minimum and maximum scale values for this ZoomPanLayout. Note that if {@link } is set to true, the minimum value set here will be ignored Default values are 0 and 1.
Sets the size (width and height) of the ZoomPanLayout as it should be rendered at a scale of 1f (100%)
Returns the base (un-scaled) width
Returns the base (un-scaled) height
Returns the scaled width
Returns the scaled height
Requests a redraw
Returns whether the ZoomPanLayout is currently being flung
Returns the single child of the ZoomPanLayout, a ViewGroup that serves as an intermediary container
Returns the minimum distance required to start a drag operation, in pixels.
Returns the minimum distance required to start a drag operation, in pixels.
Returns the minimum distance required to start a pinch operation, in pixels.
Returns the minimum distance required to start a pinch operation, in pixels.
Adds a GestureListener to the ZoomPanLayout, which will receive gesture events
Removes a GestureListener from the ZoomPanLayout
Adds a ZoomPanListener to the ZoomPanLayout, which will receive events relating to zoom and pan actions
Removes a ZoomPanListener from the ZoomPanLayout
Scrolls the ZoomPanLayout to the x and y values specified by {@param point} Point
Scrolls and centers the ZoomPanLayout to the x and y values specified by {@param point} Point
Scrolls the ZoomPanLayout to the x and y values specified by {@param point} Point using scrolling animation
Scrolls and centers the ZoomPanLayout to the x and y values specified by {@param point} Point using scrolling animation
<i>This method is experimental</i> Scroll and scale to match passed Rect as closely as possible. The widget will attempt to frame the Rectangle, so that it's contained within the viewport, if possible.
Set the scale of the ZoomPanLayout while maintaining the current center point
Scales the ZoomPanLayout with animated progress
if the taps occurred within threshold, it's a double tap
if the touch event has traveled past threshold since the finger first when down, it's not a tap
sugar to calculate distance between 2 Points, because android.graphics.Point is horrible
Executes the task with the specified parameters. The task returns itself (this) so that the caller can keep a reference to it. <p>This method is typically used with {@link #THREAD_POOL_EXECUTOR} to allow multiple tasks to run in parallel on a pool of threads managed by AsyncTask, however you can also use your own {@link java.util.concurrent.Executor} for custom behavior. <p><em>Warning:</em> Allowing multiple tasks to run in parallel from a thread pool is generally <em>not</em> what one wants, because the order of their operation is not defined.  For example, if these tasks are used to modify any state in common (such as writing a file due to a button click), there are no guarantees on the order of the modifications. Without careful work it is possible in rare cases for the newer version of the data to be over-written by an older one, leading to obscure data loss and stability issues.  Such changes are best executed in serial; to guarantee such work is serialized regardless of platform version you can use this function with {@link #}. <p>This method must be invoked on the UI thread.
Set the tile selection method, defaults to {@link TileSetSelectorMinimalUpScale}
DEBUG: needed?  maybe use ZPL's width and height...?
"pads" the viewport by the number of pixels passed.  e.g., setPadding( 100 ) instructs the DetailManager to interpret it's actual viewport offset by 100 pixels in each direction (top, left, right, bottom), so more tiles will qualify for "visible" status when intersections are calculated.
get back the point coordinates *not* scaled (for markers, callouts, etc, that handle scale internally)
work from end of list - match the last one added (equivalant to z-index)
TODO: register local broadcast receiver to destroy the cache during onDestroy of containing Activity
access omitted deliberately - need package level access for the TileRenderHandler
render tasks (invoked in asynctask's thread)
package level access so it can be invoked by the render task
package level access so it can be invoked by the render task
package level access
Constructor to use when creating a TileView from code.  Inflating from XML is not currently supported.
Register an event listener callback object for this TileView. Note this is method adds a listener to an array of listeners, and does not set a single listener member a single listener.
Removes a TileViewEventListener object from those listening to this TileView.
Request that the current tile set is re-examined and re-drawn. The request is added to a queue and is not guaranteed to be processed at any particular time, and will never be handled immediately.
Notify the TileView that it may stop rendering tiles.  The rendering thread will be sent an interrupt request, but no guarantee is provided when the request will be responded to.
Enables or disables tile image caching (in-memory and on-disk)
Sets a custom class to perform the decode operation when tile bitmaps are requested. By default, a BitmapDecoder implementation is provided that renders bitmaps from the context's Assets, but alternative implementations could be used that fetch images via HTTP, or from the SD card, or resources, SVG, etc. This signature is identical to calling setTileDecoder and setDownsampleDecoder with the same decoder instance as the parameter. {@link BitmapDecoderHttp} is an example of such an implementation.
Sets a custom class to perform the decode operation when tile bitmaps are requested for tile images only. By default, a BitmapDecoder implementation is provided that renders bitmaps from the context's Assets, but alternative implementations could be used that fetch images via HTTP, or from the SD card, or resources, SVG, etc. {@link BitmapDecoderHttp} is an example of such an implementation.
Sets a custom class to perform the decode operation when tile bitmaps are requested for downsample images only. By default, a BitmapDecoder implementation is provided that renders bitmaps from the context's Assets, but alternative implementations could be used that fetch images via HTTP, or from the SD card, or resources, SVG, etc. {@link BitmapDecoderHttp} is an example of such an implementation.
Get the {@link TileSetSelector} implementation currently used to select tile sets.
Set the tile selection method, defaults to {@link TileSetSelectorMinimalUpScale} Implement the {@link TileSetSelector} interface to customize how tile sets are selected.
Defines whether tile bitmaps should be rendered using an AlphaAnimation
Define the duration (in milliseconds) for each tile transition.
Register a tile set to be used for a particular detail level. Each tile set to be used must be registered using this method, and at least one tile set must be registered for the TileView to render any tiles.
Clear all previously registered zoom levels.  This method is experimental.
While the detail level is locked (after this method is invoked, and before unlockDetailLevel is invoked), the DetailLevel will not change, and the current DetailLevel will be scaled beyond the normal bounds.  Normally, during any scale change the details manager searches for the DetailLevel with a registered scale closest to the defined scale.  While locked, this does not occur.
Unlocks a DetailLevel locked with lockDetailLevel
pads the viewport by the number of pixels passed.  e.g., setViewportPadding( 100 ) instructs the TileView to interpret it's actual viewport offset by 100 pixels in each direction (top, left, right, bottom), so more tiles will qualify for "visible" status when intersections are calculated.
Define a custom parser to manage String file names representing image tiles
Register a set of offset points to use when calculating position within the TileView. Any type of coordinate system can be used (any type of lat/lng, percentile-based, etc), and all positioned are calculated relatively.  If relative bounds are defined, position parameters received by TileView methods will be translated to the the appropriate pixel value. To remove this process, use undefineRelativeBounds
Unregisters arbitrary bounds and coordinate system.  After invoking this method, TileView methods that receive position method parameters will use pixel values, relative to the TileView's registered size (at 1.0d scale)
Translate a relative x and y position into a Point object with x and y values populated as pixel values, relative to the size of the TileView.
Translate a List of relative x and y positions (double array... { x, y } into Point objects with x and y values populated as pixel values, relative to the size of the TileView.
Divides a number by the current scale value, effectively flipping scaled values.  This can be useful when determining a relative position or dimension from a real pixel value.
Scrolls (instantly) the TileView to the x and y positions provided.
Scrolls (instantly) the TileView to the x and y positions provided, then centers the viewport to the position.
Scrolls (with animation) the TIelView to the relative x and y positions provided.
Scrolls (with animation) the TileView to the x and y positions provided, then centers the viewport to the position.
Scales and moves TileView so that each of the passed points is visible.
Markers added to this TileView will have anchor logic applied on the values provided here. E.g., setMarkerAnchorPoints(-0.5f, -1.0f) will have markers centered horizontally, positioned vertically to a value equal to - 1 * height. Note that individual markers can be assigned specific anchors - this method applies a default value to all markers added without specifying anchor values.
Add a marker to the the TileView.  The marker can be any View. No LayoutParams are required; the View will be laid out using WRAP_CONTENT for both width and height, and positioned based on the parameters
Removes a marker View from the TileView's view tree.
Moves an existing marker to another position.
Scroll the TileView so that the View passed is centered in the viewport
Register a MarkerEventListener.  Unlike standard touch events attached to marker View's (e.g., View.OnClickListener), MarkerEventListeners do not consume the touch event, so will not interfere with scrolling.  While the event is dispatched from a Tap event, it's routed though a hit detection API to trigger the listener.
Removes a MarkerEventListener from the TileView's registry.
Add a callout to the the TileView.  The callout can be any View. No LayoutParams are required; the View will be laid out using WRAP_CONTENT for both width and height, and positioned based on the parameters Callout views will always be positioned at the top of the view tree (at the highest z-index), and will always be removed during any touch event that is not consumed by the callout View.
Removes a callout View from the TileView's view tree.
Register a HotSpot that should fire an listener when a touch event occurs that intersects that rectangle. The HotSpot moves and scales with the TileView.
Remove a HotSpot registered with addHotSpot
Register a HotSpotEventListener with the TileView.  This listener will fire if any hotspot's region intersects a Tap event.
Remove a HotSpotEventListener from the TileView's registry.
Register a Path and Paint that will be drawn on a layer above the tiles, but below markers. This Path's will be scaled with the TileView, but will always be as wide as the stroke set for the Paint.
Removes a DrawablePath from the TileView's registry.  This path will no longer be drawn by the TileView.
Returns the Paint instance used by default.  This can be modified for future Path paint operations.
Clear bitmap image files, appropriate for Activity.onPause
Clear bitmap image files, appropriate for Activity.onPause (mirror for .clear)
Clear tile image files and remove all views, appropriate for Activity.onDestroy References to TileView should be set to null following invocations of this method.
Restore visible state (generally after a call to .clear() Appropriate for Activity.onResume
Request the TileView reevaluate tile sets, rendered tiles, samples, invalidates, etc
let the zoom manager know what tiles to show based on our position and dimensions
tell the tile renderer to not start any more tasks, but it can continue with any that are already running
------------------------------------------------------------------------------------ Private Listeners ------------------------------------------------------------------------------------
Fires when a ACTION_DOWN event is raised from the TileView
Fires when a ACTION_UP event is raised from the TileView
Fires while the TileView is being dragged
Fires when a user double-taps the TileView
Fires when a user taps the TileView
Fires while a user is pinching the TileView
Fires when a user starts a pinch action
Fires when a user completes a pinch action
Fires when a user initiates a fling action
Fires when a fling action has completed
Fires when the TileView's scale has updated
Fires when the TileView's scroll position has updated
Fires when a zoom action starts (typically through a pinch of double-tap action, or by programmatic animated zoom methods.
Fires when a zoom action ends (typically through a pinch of double-tap action, or by programmatic animated zoom methods.
Fires when the TileView should start using a new DetailLevel
Fires when the rendering thread has started to update the visible tiles.
Fires when the rendering thread has completed updating the visible tiles, but before cleanup
Create a Scroller with the default duration and interpolator.
The amount of friction applied to flings. The default value is {@link android.view.ViewConfiguration#getScrollFriction}.
Force the finished field to a particular value.
Returns the start X offset in the scroll.
Returns the start Y offset in the scroll.
Returns where the scroll will end. Valid only for "fling" scrolls.
Extend the scroll animation. This allows a running animation to scroll further and longer, when used with {@link #setFinalX(int)} or {@link #setFinalY(int)}.
Sets the final position (X) for this scroller.
Sets the final position (Y) for this scroller.
Checks whether the given position is placed just after the item in the first lane of the layout taking items spans into account.
Checks whether the given position is placed at the start of a layout lane.
Checks whether the given position is placed at the end of a layout lane.
Computes the offsets based on the vertical and horizontal spacing values. The spacing computation has to ensure that the lane sizes are the same after applying the offsets. This means we have to shift the spacing unevenly across items depending on their position in the layout.
Register a callback to be invoked when an item in the RecyclerView has been clicked.
Register a callback to be invoked when an item in the RecyclerView has been clicked and held.
Returns the number of items currently selected. This will only be valid if the choice mode is not {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#NONE} (default). <p>To determine the specific items that are currently selected, use one of the <code>getChecked*</code> methods.
Returns the checked state of the specified position. The result is only valid if the choice mode has been set to {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#SINGLE} or {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#MULTIPLE}.
Returns the currently checked item. The result is only valid if the choice mode has been set to {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#SINGLE}.
Returns the set of checked items in the list. The result is only valid if the choice mode has not been set to {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#NONE}.
Returns the set of checked items ids. The result is only valid if the choice mode has not been set to {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#NONE} and the adapter has stable IDs.
Sets the checked state of the specified position. The is only valid if the choice mode has been set to {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#SINGLE} or {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#MULTIPLE}.
Clears any choices previously set.
Returns the current choice mode.
Defines the choice behavior for the List. By default, Lists do not have any choice behavior ({@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#NONE}). By setting the choiceMode to {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#SINGLE}, the List allows up to one item to  be in a chosen state. By setting the choiceMode to {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#MULTIPLE}, the list allows any number of items to be chosen. {@link com.marshalchen.common.uimodule.twowayview.ItemSelectionSupport.ChoiceMode#MULTIPLE}
Encodes a string into Base64 format. No blanks or line breaks are inserted.
Encodes a byte array into Base 64 format and breaks the output into lines of 76 characters. This method is compatible with <code>sun.misc.BASE64Encoder.encodeBuffer(byte[])</code>.
Encodes a byte array into Base 64 format and breaks the output into lines.
Encodes a byte array into Base64 format. No blanks or line breaks are inserted in the output.
Decodes a string from Base64 format. No blanks or line breaks are allowed within the Base64 encoded input data.
Decodes a byte array from Base64 format and ignores line separators, tabs and blanks. CR, LF, Tab and Space characters are ignored in the input data. This method is compatible with <code>sun.misc.BASE64Decoder.decodeBuffer(String)</code>.
Decodes a byte array from Base64 format. No blanks or line breaks are allowed within the Base64 encoded input data.
Parse out a charset from a content type header.
Set the HttpClient implementation to use for every synchronous request
Set the asynchronous AbstractHttpAsyncClient implementation to use for every asynchronous request
Set a proxy
Set the ObjectMapper implementation to use for Response to Object binding
Set the connection timeout and socket timeout
Set the concurrency levels
Clear default headers
Close the asynchronous client and its event loop. Use this method to close all the threads and allow an application to exit.
Bitmap scaling will use smart/sane values to limit the maximum dimension of the bitmap during decode. This will prevent any dimension of the bitmap from being larger than the dimensions of the device itself. Doing this will conserve memory.
Bitmap scaling will use smart/sane values to limit the maximum dimension of the bitmap during decode. This will prevent any dimension of the bitmap from being larger than the dimensions of the device itself. Doing this will conserve memory.
Download and shrink an Image located at a specified URL, and display it in the provided {@link ImageView} once it finishes loading.
Remove a url from the cache
kill this zombie, forever.
turn a stream into a string
Starts the activity, using the supplied driver instance.
Returns the currently-bound USB device.
Sets the size of the internal buffer used to exchange data with the USB stack for read operations.  Most users should not need to change this.
Sets the size of the internal buffer used to exchange data with the USB stack for write operations.  Most users should not need to change this.
Filter FTDI status bytes from buffer
Adds or updates a (vendor, product) pair in the table.
Returns the driver for the given (vendor, product) pair, or {@code null} if no match.
Finds and builds all possible {@link UsbSerialDriver UsbSerialDrivers} from the currently-attached {@link UsbDevice} hierarchy. This method does not require permission from the Android USB system, since it does not open any of the devices.
Probes a single device for a compatible driver.
Creates a new instance with no listener.
Creates a new instance with the provided listener.
VectAlign commandLine main
Print the help message
Create commandLine options
Return the number of arguments expected for a specific command
Check if the given node sequences are equivalent (in terms of incremental graphic commands). //FIXME this is an approximated method
Transform the input list. Expand (eventually) compressed element and create extra copy if needed.
Simplify eventually useless nodes
Create a VectorDrawable sequence from a list of nodes
Check if file is an SVG
Parse path elements of an SVG file into a single big path sequence.
Align two VectorDrawable sequences in order to make them <i>morphable</i>
###### DEBUG ###### ###################
Reverses ongoing animations or starts pending animations in reverse. <p> NOTE: Only works of all animations are ValueAnimators.
Parses a {@link android.graphics.PorterDuff.Mode} from a tintMode attribute's enum value.
Constructs an Outline with a copy of the data in src.
Sets the outline to be empty.
Returns whether the Outline is empty. <p> Outlines are empty when constructed, or if {@link #setEmpty()} is called, until a setter method is called
Returns whether the outline can be used to clip a View. <p> Currently, only Outlines that can be represented as a rectangle, circle, or round rect support clipping.
Sets the alpha represented by the Outline - the degree to which the producer is guaranteed to be opaque over the Outline's shape. <p> An alpha value of <code>0.0f</code> either represents completely transparent content, or content that isn't guaranteed to fill the shape it publishes. <p> Content producing a fully opaque (alpha = <code>1.0f</code>) outline is assumed by the drawing system to fully cover content beneath it, meaning content beneath may be optimized away.
Returns the alpha represented by the Outline.
Replace the contents of this Outline with the contents of src.
Sets the Outline to the rounded rect defined by the input rect, and corner radius.
Convenience for {@link #setRect(int, int, int, int)}
Sets the Outline to the rounded rect defined by the input rect, and corner radius. <p> Passing a zero radius is equivalent to calling {@link #setRect(int, int, int, int)}
Convenience for {@link #setRoundRect(int, int, int, int, float)}
Creates a new animation whose parameters come from the specified context and attributes set.
Setup the Animator to achieve path morphing.
Setup ObjectAnimator's property or values from pathData.
Create a PathDataEvaluator that reuses <code>nodeArray</code> for every evaluate() call. Caution must be taken to ensure that the value returned from {@link android.animation.ValueAnimator#getAnimatedValue()} is not cached, modified, or used across threads. The value will be modified on each <code>evaluate()</code> call.
Same as {@link MorphButton#setState(MorphButton.MorphState, boolean)} with no animation
Apply tint to the drawable
Apply tint to all foreground drawables
Apply tint to our background drawable
Constructor called from {@link CompoundButton#onSaveInstanceState()}
Controls how the image should be resized or moved to match the size of this ImageView.
Makes sure that the size of scrapViews does not exceed the size of activeViews. (This can happen if an adapter does not recycle its views).
<p> {@link #getView}. Each type represents a set of views that can be converted in {@link #getView}. If the adapter always returns the same type of View for all items, this method should return 1. </p> <p> This method will only be called when when the adapter is set on the the {@link AdapterView}. </p>
specified item. Argument potentially used by subclasses.
If the position offset of a fragment is less than negative one or greater than one, returning true will set the fragment alpha to 0f. Otherwise fragment alpha is always defaulted to 1f.
Called each {@link #transformPage(android.view.View, float)} before {{@link #onTransform(android.view.View, float)}. <p> The default implementation attempts to reset all view properties. This is useful when toggling transforms that do not modify the same page properties. For instance changing from a transformation that applies rotation to a transformation that fades can inadvertently leave a fragment stuck with a rotation or with some degree of applied alpha.
Same as {@link Math#min(double, double)} without double casting, zero closest to infinity handling, or NaN support.
In case of self signed certificates on Server. Two things needs to be taken care 1)Authenticate to the HTTPS server using a private key. 2)Validate the identity of the HTTPS server against a list of trusted certificates
Creates SSLContext and initialises with the IgnoreTrustManager to trust all secured server. Basically ignoring the trust to connect to server.
If you want to add more trusted certificates ( if self signed) for different sites, you should use EasyX509TrustManager and create a instance with corresponding KeyStore and then add to the SSLContext.
Constructor for EasyX509TrustManager.
If Request is MultiPartRequest type, then set MultipartEntity in the httpRequest object.
Creates a new request. indicates no parameters will be posted along with request.
Constructor which defaults to <code>GET</code> if <code>jsonRequest</code> is <code>null</code>, <code>POST</code> otherwise.
If prioirty set use it,else returned NORMAL
Dont forget to cancel the request when the UI is not visible.
The endpoint is for demo.Please use your correct endpoint to test Secured Http request.
Don't instantiate this class directly, use {@link #getInstance(android.support.v4.app.FragmentManager, float)}.
Find and return an existing BitmapCache stored in a {@link RetainFragment}, if not found a new one is created using the supplied params and saved to a {@link RetainFragment}.
Initialize the cache.
Clears the memory cache.
Sets the memory cache size based on a percentage of the max available VM memory. Eg. setting percent to 0.2 would set the memory cache to one fifth of the available memory. Throws {@link IllegalArgumentException} if percent is < 0.05 or > .8. memCacheSize is stored in kilobytes instead of bytes as this will eventually be passed to construct a LruCache which takes an int in its constructor. This value should be chosen carefully based on a number of factors Refer to the corresponding Android Training class for more discussion:
Get the size in bytes of a bitmap in a BitmapDrawable. Note that from Android 4.4 (KitKat) onward this returns the allocated memory size of the bitmap which can be larger than the actual bitmap data byte count (in the case it was re-used).
Locate an existing instance of this Fragment or if not found, create and add it using FragmentManager.
Constructs a new ImageLoader with a default LruCache implementation
Issues a bitmap request with the given URL if that image is not available in the cache, and returns a bitmap container that contains all of the data relating to the request (as well as the default image if the requested image is not available).
Set a {@link Resources} instance if you need to support resource uris for loading images
Set a {@link ContentResolver} instance if you need to support content uris for loading images
The real guts of parseNetworkResponse. Broken out for readability. This version is for reading a Bitmap from Video
The real guts of parseNetworkResponse. Broken out for readability. This version is for reading a Bitmap from file
The real guts of parseNetworkResponse. Broken out for readability. This version is for reading a Bitmap from resource
The real guts of parseNetworkResponse. Broken out for readability. This version is for reading a Bitmap from resource
Creates an ImageLoader with Bitmap memory cache.
Starts processing requests on the {@link RequestQueue}.
Stops processing requests on the {@link RequestQueue}.
Clears {@link Cache}.
Flushed {@link Cache} and clears {@link ImageCache}.
Closes {@link Cache}.
A default placeholder image while the image is being fetched and loaded.
A default placeholder image while the image is being fetched and loaded.
Don't instantiate this class directly, use {@link #getInstance(android.support.v4.app.FragmentManager, float)}.
Initializes the DiskBasedCache by scanning for all files currently in the specified root directory. Creates the root directory if necessary.
Waits until the cache is ready and loaded
Waits until the specified cache key is ready and loaded.
Returns true if the cache is 100% loaded.
Returns the total size of the cache
Create a set of image cache parameters that can be provided to
Create a set of image cache parameters
Sets the memory cache size based on a percentage of the max available VM memory. Eg. setting percent to 0.2 would set the memory cache to one fifth of the available memory. Throws {@link IllegalArgumentException} if percent is < 0.01 or > .8. memCacheSize is stored in kilobytes instead of bytes as this will eventually be passed to construct a LruCache which takes an int in its constructor. This value should be chosen carefully based on a number of factors Refer to the corresponding Android Training class for more discussion:
Flushed {@link Cache} and clears {@link com.android.volley.toolbox.ImageCache}.
the specified error object.
Determines whether the error is related to network
Determines whether the error is related to server
Handles the server error, tries to determine whether to show a stock message or to show a message retrieved from the server.
Returns the last committed value as a string, or null if no value has been committed.
Returns a new unbuffered output stream to write the value at {@code index}. If the underlying output stream encounters errors when writing to the filesystem, this edit will be aborted when {@link #commit} is called. The returned output stream does not throw IOExceptions.
Commits this edit so it is visible to readers. This releases the edit lock so another edit may be started on the same key.
Returns the degrees in clockwise. Values are 0, 90, 180, or 270.
Calculate an inSampleSize for use in a {@link BitmapFactory.Options} object when decoding bitmaps using the decode* methods from {@link BitmapFactory}. This implementation calculates the closest inSampleSize that is a power of 2 and will result in the final decoded bitmap having a width and height equal to or larger than the requested width and height.
Create a bitmap from a local URI
Wrapper around {@link BitmapFactory#decodeStream(InputStream, Rect, BitmapFactory.Options)} that returns {@code null} on {@link OutOfMemoryError}.
Wrapper around {@link BitmapFactory#decodeStream(InputStream, Rect, BitmapFactory.Options)} that returns {@code null} on {@link OutOfMemoryError}. decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)
Gets the image bounds
Create a new InputStream. The caller of this method must be able to read the input stream starting from the beginning.
Construct a new wrapper for an InputStream. <p/> If <code>autoAdvance</code> is true, behavior is undefined if you call {@link #get(int)} or {@link #has(int)} with an index N, then some arbitrary time later call {@link #get(int)} or {@link #has(int)} with an index M < N. The wrapper may return the right value, if the buffer happens to still contain index M, but more likely it will throw an {@link IllegalStateException}. <p/> If <code>autoAdvance</code> is false, you must be diligent and call {@link #advanceTo(int)} at the appropriate times to ensure that the internal buffer is not unnecessarily resized and reallocated.
Attempt to get byte at the requested index from the wrapped input stream. If the internal buffer contains the requested index, return immediately. If the index is less than the head of the buffer, or the index is greater or equal to the size of the wrapped input stream, a runtime exception is thrown. <p/> If the index is not in the internal buffer, but it can be requested from the input stream, {@link #fill(int)} will be called first, and the byte at the index returned. <p/> You should always call {@link #has(int)} with the same index, unless you are sure that no exceptions will be thrown as described above. <p/> Consider calling {@link #advanceTo(int)} if you know that you will never request a lesser index in the future.
Attempt to return whether the requested index is within the size of the wrapped input stream. One side effect is {@link #fill(int)} will be called. <p/> If this method returns true, it is guaranteed that {@link #get(int)} with the same index will not fail. That means that if the requested index is within the size of the wrapped input stream, but the index is less than the head of the internal buffer, a runtime exception is thrown. <p/> See {@link #get(int)} for caveats. A lot of the same warnings about exceptions and <code>advanceTo()</code> apply. the index is beyond the size.
Attempts to advance the head of the buffer to the requested index. If the index is less than the head of the buffer, the internal state will not be changed. <p/> Advancing does not fill the internal buffer. The next {@link #get(int)} or {@link #has(int)} call will fill the buffer.
Attempt to fill the internal buffer fully. The buffer will be modified such that the requested index will always be in the buffer. If the index is less than the head of the buffer, a runtime exception is thrown. <p/> If the requested index is already in bounds of the buffer, then the buffer will just be filled. <p/> Otherwise, if <code>autoAdvance</code> was set to true in the constructor, {@link #advanceTo(int)} will be called with the requested index, and then the buffer filled. If <code>autoAdvance</code> was set to false, we allocate a single larger buffer of a least multiple-of-two size that can contain the requested index. The elements in the old buffer are copied over to the head of the new buffer. Then the entire buffer is filled. input stream ends before we reach the index.
Modify the internal buffer so that all the bytes are shifted towards the head by <code>i</code>. In other words, the byte at index <code>i</code> will now be at index <code>0</code>. Bytes from a lesser index are tossed.
Calculate the least power of two greater than or equal to the input.
Constructs a new {@code LineReader} with the specified charset and the default capacity.
Constructs a new {@code LineReader} with the specified capacity and charset.
Reads new input data into the buffer. Call only with pos == end or end == -1, depending on the desired outcome if the function throws.
Begins systrace tracing for a given tag. No-op on unsupported platform versions.
Ends systrace tracing for the most recently begun section. No-op on unsupported platform versions.
Creates a new GET request.
Creates a new request with the given method.
Creates a new request with the given method.
Set listener for tracking download progress
Make a request and return a parsed object from JSON.
Creates a new request with the given method.
Creates a new GET request.
Creates a new request. indicates no parameters will be posted along with request.
Creates a new request with the given method.
Add a parameter to be sent in the multipart request
Add a file to be uploaded in the multipart request
Initialize a multipart request param with the value and content type
Get all the multipart params for this request
Get all the files to be uploaded for this request
Get the protocol charset
Creates a new request with the given method.
Creates a new GET request.
Tells that this entity is not streaming.
Default "ISO-8859-1" charset is used.
Visible for testing. Allows injection of a mock AccountManager.
Called before the request is executed using the underlying HttpClient. <p> Overwrite in subclasses to augment the request. </p>
Extracts a {@link Cache.Entry} from a {@link NetworkResponse}. Cache-control headers are ignored. SoftTtl == 3 mins, ttl == 24 hours.
Extracts a {@link Cache.Entry} from a {@link NetworkResponse}. Cache-control headers are ignored. SoftTtl == 3 mins, ttl == 24 hours.
Retrieve a charset from headers or the defaultCharset if none can be found.
Perform a multipart request on a connection
Initializes an {@link HttpEntity} from the given {@link HttpURLConnection}.
Equivalent to calling {@link #get(String, ImageListener, int, int, ScaleType)} with {@code Scaletype == ScaleType.CENTER_INSIDE}.
Set a {@link ContentResolver} instance if you need to support content uris for loading images
Creates a default instance of the worker pool and calls {@link com.android.volley.RequestTickle#start()} on it.
Creates a default instance of the worker pool and calls {@link RequestTickle#start()} on it.
Free all resources held by this view. The view is on its way to be collected and will not be reused.
Binds a bitmap to the view.
Returns the bound photo data if set. Otherwise, {@code null}.
Returns the bound drawable. May be {@code null} if no drawable is bound.
Gets video data associated with this item. Returns {@code null} if this is not a video.
Returns {@code true} if the photo represents a video. Otherwise, {@code false}.
Returns {@code true} if the video is ready to play. Otherwise, {@code false}.
Returns {@code true} if a photo has been bound. Otherwise, {@code false}.
Hides the photo info portion of the header. As a side effect, this automatically enables or disables image transformations [eg zoom, pan, etc...] depending upon the value of fullScreen. If this is not desirable, enable / disable image transformations manually.
Enable or disable cropping of the displayed image. Cropping can only be enabled <em>before</em> the view has been laid out. Additionally, once cropping has been enabled, it cannot be disabled.
Gets a bitmap of the cropped region. If cropping is not enabled, returns {@code null}.
Resets the image transformation to its original value.
Rotates the image 90 degrees, clockwise.
Rotates the image 90 degrees, counter clockwise.
Rotates the image 90 degrees, counter clockwise.
Get Rotation of the image.
Forces a fixed height for this view.
Enable or disable image transformations. When transformations are enabled, this view consumes all touch events.
Configures the bounds of the photo. The photo will always be scaled to fit center.
Generates the initial transformation matrix for drawing. Additionally, it sets the minimum and maximum scale values.
Returns the currently applied scale factor for the image. <p> NOTE: This method overwrites any values stored in {@link #mValues}.
Scales the image while keeping the aspect ratio. The given scale is capped so that the resulting scale of the image always remains between {@link #mMinScale} and {@link #mMaxScale}. The scaled image is never allowed to be outside of the viewable area. If the image is smaller than the viewable area, it will be centered.
Translates the image. This method will not allow the image to be translated outside of the visible area.
Snaps the image so it touches all edges of the view.
Rotates the image, either instantly or gradually
Initializes the header and any static values
Starts the animation. There is no target scale bounds check.
Stops the animation in place. It does not snap the image to its final zoom.
Stops the animation in place. It does not snap the image to its final translation.
Stops the animation in place. It does not snap the image to its final rotation.
Adds the specified request to the global queue, if tag is specified then it is used else Default TAG is used.
Adds the specified request to the global queue using the Default TAG.
Cancels all pending requests by the specified TAG, it is important to specify a TAG so that the pending/ongoing requests can be cancelled.
Creates a new request with the given URL and error listener.  Note that the normal response listener is not provided here as delivery of responses is provided by subclasses, who have a better idea of how to deliver an already-parsed response.
Creates a new request with the given method (one of the values from {@link Method}), URL, priority, error listener and retry policy.  Note that the normal response listener is not provided here as delivery of responses is provided by subclasses, who have a better idea of how to deliver an already-parsed response.
Add any request headers here
Returns a Map of POST parameters to be used for this request, or null if a simple GET should be used.  Can throw {@link AuthFailureError} as authentication may be required to provide these values. <p>Note that only one of getPostParams() and getPostBody() can return a non-null value.</p>
Returns which encoding should be used when converting POST parameters returned by {@link #getPostParams()} into a raw POST body. <p>This controls both encodings: <ol> </ol>
Returns the raw POST body to be sent.
Sets the parameters to be added to the request body in case of a POST or PUT request, or appended to the URL in case of GET request
Sets the priority for this request
Gets the thread pool size.
Remove a RequestFinishedListener. Has no effect if listener was not previously added.
Creates the worker pool. Processing will not begin until {@link #start()} is called.
Cancel the request.
Returns instance of ImageLoader initialized with {@see FakeImageCache} which effectively means that no memory caching is used. This is useful for images that you know that will be show only once.
Called by the ViewPager child fragments to load images via the one ImageFetcher
Factory method to generate a new instance of the fragment given an image number.
Sets the item height. Useful for when we know the column width so the height can be set to match.
Parse the KeyStoke found within '<' and '>' tags. For example: <Insert> <Left> <S-Home> <A-X> <M-Left>
Create a state for an operator which supports a "whole line" mode by repeating the operator character. For example, ">>" shifts the current line.
Create a state for an operator which supports a "whole line" mode by repeating the last operator charactor or all operator characters. <p> For example, "g~~" as well as "g~g~" change the case of the current line.
Creates an instance which accepts all keys. Not compatible with any kind of wrapping state. (e.g. {@link CountingState})
Copy character or specialkey from source but use different modifiers.
Remaps the given keystrokes.
Removes the mapping of the given keystrokes if it exists.
Removes all mappings from this keymap.
Currently active keymap. Cannot be null.
Get the active key group, used for groups of which the length can not be predicted. Should never be null, and the value should not matter - only equality. <p> Currently only used for the CountConsumingState to know if we encountered a second digit.
Returns the activated buffer. This can be null.
Whether the option is local, default or global scope.
Parse user-defined line definition with optional +/- modifiers. In the definition <range>,<range><operation> this is one of the two <range>s.  This method doesn't care if its the start or end we're defining.
Parse the line definition (minus any modifiers) and return the corresponding Position.
Search for the provided string and return its Position. Start searching from the current cursor position.
Parse the modifiers defined after the lineDef. This takes an incoming startOffset and increments or decrements it.
Returns the line absolute number. Starting at 0
Offset of the first character on the line.
Length of this line, <em>excluding</em> the newline delimiter.
Offset of the newline delimiter or possibly the last position in the editor.
Gets the first number in the string with respect to the base. In decimal mode, it handles negative numbers. NOTE: Special note on Java Regular Expressions - I had a hell
Numbers can come in a variety of formats. Since we just want to know which is bigger (if it parses at all), BigDecimal should suffice for just about any number. TODO: It would be handy if we could parse numbers bigger than a double.
Returns a {@link LineRange} for the entire file. <p><b>NOTE</b>: the very last line is not used as endLine if it is empty, this to implement a behavior similar to Vim where the global command does not put text after the last newline.
Returns a line range for a single line. To and From are set based on current cursor pos.
Returns a line range for a single line. To and From are set at the start of the line.
Returns a line range where both positions are included.
Calculates a line range based on the from and to position of the selection.
Returns a {@link LineRange} wrapping the given text region. <p><b>NOTE</b>: the very last line (the one rightBound is in) is not used as endLine if no characters are selected or if it is empty.
TODO: make private and use appropriate static methods
Returns a TextRange spanning the lines the <code>from</code> and <code>to</code> {@link Position}s are on. The right bound is after the newline of that last line or is at the end of the file.
Only for debugging.
Utility method to calculate the visual offset of each character in a string starting from the beginning of the string and taking the variable width of a tab in account. The newline chars are ignored, but one extra offset is added to know where the line ends visually. character offset in the string.
Grab the word currently under the cursor. If wholeWord, end at nearest whitespace. Otherwise, use Options.KEYWORDS values.
Replaces all combinations of newline characters in a string with another string.
Calculates an offset position. Line breaks are not counted.
Vim doesn't start a delimited range on a newline or end a range on an empty line (try 'vi{' while within a function for proof).
Tries to work around AltGr madness if we detect that AltGr was pressed. If you did press Ctrl + Alt or Alt and hit this function, then check the state provider. This function should be called as a fallback when remaps and default bindings failed to find a match. <p> Examples for different Operating Systems when AltGr + Q is pressed (@ key on German keybord): <ul> <li>Windows SWT sends Ctrl + Alt + @.</li> <li>Mac OSX SWT sends Alt + @.</li> <li>Linux SWT passes just @.</li> </ul>
Adds a (possibly negative) offset to a Position, then checks that the position didn't run into newline sequence or is past the last character. Windows endlines (CR LF) are notorious as they will make Eclipse puke. This function will also account for the end of the text and the start of the text.
Check to see if the cursor is on a pre-processor conditional
Search backwards for the 'if' or 'ifdef' that corresponds to the 'endif' under the cursor.  We can basically ignore all 'else' and 'elif' we may run into.
Find the next pre-processor line at the same depth as the conditional under the cursor.  Depths are modified with each 'if' and 'endif', which means 'else' and 'elif' are at the (depth + 1) of what we would usually look for.
skip over escaped delimiters
Given a word defined in the TextContent object bounded by startingIndex and endingIndex, return the endingIndex that defines the end of the word without the last newline. <p> This deletes a single newline followed by arbitrary whitespace.  It does not remove multiple newlines, or whitespace without newlines
Given the characters in buffer ending at offset, return the number of rightmost whitespace characters
Given the characters in buffer ending at offset, return the number of rightmost newline characters
Checks if the cursor is inside a match in which case we should select this first.
Override and return true to clip messages when displaying messages. Normally word-wrapping is enabled by default.
Puts a number of spaces into a StringBuilder for later retrieval based on the spaces and tabs between beginIndent and endIndent.
Convert spaces into tab characters if we pass &lt;tabstop&gt; characters. Note that this is far more complex than for InsertShiftWidth, in this case we need to make sure we align to tabstops as a tab to the right of a character might be 3 characters wide in the UI.
Calculates text block from too positions in text.
Returns text block content for the block specified by range.
Executes this command. This may have some side effects.
This constructor is used by the 'gf' command
This constructor is used by the command-line ':find' command And also the visual verson of the 'gf' command
Take a long line and split it on word boundaries closest to textwidth. Note that this may result in multiple lines.  Each new line will share the same indentation and comment character as the first.
Finds the most appropriate whitespace character on which we can break the text line. (or put differently: how many indent and comment characters there are before text)
This constructor is used when we're modifying the text of an existing CommentedLine.  No need to re-parse all the pieces.
Starting at cursor position 'index', find the bounds for the closest hex number directly below or to the right of 'index' (if any).  Return null if no hex number found.  Hex is defined by a string of hex digits (0-9,a-f,A-F) preceded by '0x' or '0X'.
Starting at cursor position 'index', find the bounds for the closest number directly below or to the right of 'index' (if any).  Return null if no number found.  Handles both decimal and octal.  Octal is defined by a leading '0' and no digits greater than 7.  All other sequence of digits are treated as decimal.
Check to see if any of the digits in this string are greater than 7. If they are, this string can't be treated as octal.
Perform the actual increment (or decrement) on this string.
Starting at startIndex, find the first number. Then, find the end of that first number (first non-numeric character after the number).  Return the index of the end of that number.
Starting at startIndex, find the first hex number. Then, find the end of that hex number (first non-hex character after the number).  Return the index of the end of that hex number.
Starting with number character at startIndex, move backwards until we find where this number started.  Return the index where the number starts.
Find the first hex digit after '0x' starting at startIndex.
Parse the desired operation to perform on this range.
Moves the cursor to the given position and centers the cursor line if it is not inside the viewport.
Start or stop macro recording mode. When starting, delegate to {@link RecordMacroMode#enterMode(ModeSwitchHint...)} to initialize the mode, then wait for input of the macro name.
This is where the action happens.
Vim doesn't start a delimited range on a newline or end a range on an empty line (try 'vi{' while within a function for proof).  So, define the range for delimiters to include the character on one end but stop at the newline boundary at the other end.  This is to handle the difference between 'i' and 'a' for delimited text objects.
Selection which remembers the positions of the caret when it was first created. Can be used for inclusive selection or exclusive.
Converts a {@link TextRange} into a proper selection with from / to corrected in case of "inclusive" selection.
Selection with caret position after the selection or on first character. Should only be used for an exclusive selection!
Patterns can have any non-word character as a delimiter. For example, "/pattern/", "_pattern_", or ":pattern:". Find the first non-word character in the string and see if it has a match.  If it does, return that string.
According to Vim behavior, sorting by number will look at the FIRST OCCURRENCE of contiguous number string on a line. The following return true: NOTE: These will match to the very FIRST occurrence of a number in their set. If it finds one, then we return true.
Switch to previous buffer if no count is given.
Switch to the buffer with the given id or target code.
Account for the possibility that we're in front of a tag (indentation) or inside an opening or closing tag.
Search backwards for XML tags.  Push every close tag, pop every open tag. If we get the open tag we're looking for without a matching close tag, we're inside that tag.
Search forwards for XML tags.  Push every open tag, pop every close tag. If we get a close tag without an open tag, we're inside that tag.
Search for the next XML tag after start.  Can either be an open tag or close tag.  We'll let the calling method figure out what to do with it.
Search for the previous XML tag before start.  Can either be an open tag or close tag.  We'll let the calling method figure out what to do with it.
Returns the current parser, or <tt>null</tt> if command line mode is inactive.
Appends typed characters to the internal buffer. Deletes a char from the buffer on press of the backspace key. Parses and executes the buffer on press of the return key. Clears the buffer on press of the escape key. Up/down arrows handle command line history.
Runs all exit logic, like switching to normal mode and saving the selection. Implementors may override this function to do custom exit logic.
We've changed modes.  Fetch the history for this mode.
User has committed a command (hit 'enter').  Add it to the history.
The user entered a couple keys then started scrolling through the command history.  Those keys aren't actually part of the history (not committed yet) but they're treated as the first item in the history.
Get the previous entry in the history that starts with whatever the user had entered before scrolling through the history.
Get the next entry in the history that starts with whatever the user had entered before scrolling through the history. found to match.
The substitution feature (:s/foo/bar/g) is complicated. There are lots of nuances to it.  This method attempts to keep it all contained here.
Parses the :b[uffer] command more or less like Vim would do. Vim accepts anything from <code>b</code> to <code>buffer</code> as a buffer switch command, and it is equally liberal with spaces after the command. For example, <code>:b1</code> or <code>:bu#</code> are just as valid as <code>:b 1</code> or <code>:buffer #</code>.
Adds a {@link Command} to the evaluator list by wrapping it.
Check to see if this partial name matches exactly one command name.  If it does, return the full name of that command.  If no match is found, or if multiple matches are found, return null. For example, getNameFromPartial("tabprev") returns "tabprevious"
Adds all actions from other EvaluatorMapping. Current actions *aren't* overridden by new ones.
Given a partial file path, return the closest match
Create a {@link Search} instance based on the given parameters and configuration.
Parses the (partial) buffer and returns only the keyword part.
this is a hook method which is called when command execution is done
Go through the entire file and build a list of all lines that start with the same prefix as this line (at the cursor position).
Create a Command which repeats the last editing operation.
If there are <softTabStop> number of spaces before the cursor delete that many spaces as if it was a single tab character.
This method only exists for ReplaceMode to override it. I know, I know, it's a horrible hack.  I couldn't find a way for smartInsert to know when Eclipse is in overwrite mode though.  So, if we're in InsertMode, perform the virtual insert.  If we're in ReplaceMode, the ReplaceMode class will handle the insert (by actually performing a replace).
Check if a ' special key' should be handled by {@link #handleVirtualStroke(KeyStroke)}. <p> This code could be rolled into {@link #handleVirtualStroke(KeyStroke)} if really wanted, though in that case it should return a boolean.
this is public just for test purposes (Mockito spy as self)
Note from Kevin: This method is a major source of frustration for me. It has to handle the following scenarios but I can't unit test them: - multi-character mapping completed in InsertMode and NormalMode - multi-character mapping *not* completed in InsertMode and NormalMode - "nmap zx gg" and type 'zt' - "imap jj <ESC>" and type 'jk' - display pending character in InsertMode - and delete pending character when mapping completed - don't move cursor when not completing a multi-character mapping while inside parentheses - "for(int j=0)"  when 'j' is part of a mapping ("imap jj <ESC>") - (Eclipse moves the cursor on me in its "Smart Insert" mode with auto-closing parentheses) - single-character mapping in InsertMode (perform mapping but don't display pending character)
Adds a key stroke to the playlist. May be called by commands.
Adds a list of keystrokes to the playlist. May be called by commands.
Executes what is in the playlist. Should only be called by the parent {@link EditorAdaptor}. (This method is now public rather than package-private just so we can support the 'normal' command, see ":help normal")
Starts recording of a macro with the given name.
Stops the recording process and stores the macro in a register.
Notifies the recorder that the given key was pressed.
blank lines act as a word
blank lines act as a word
TODO: I don't like Vim's p behaviour for P with text -- make compatibility optional and THEN test it
TODO: deactivate repaint selectively and test it Command checkIt = new CountIgnoringNonRepeatableCommand() { public void execute(EditorAdaptor editorAdaptor) { } }; CommandBasedMode normalMode = (CommandBasedMode) mode; normalMode.executeCommand(checkIt);
Reads an external file into a String, converting the newlines to {@link VimConstants#REGISTER_NEWLINE}
Case-sensitive search only.
Test replace stub.
adds / removes the listener and sets the actions "checked" status accordingly.
Stores information about the child and returns the NestedEditorpartInfo for the child.
Whether this editor is a simple AbstractTextEditor without any nested parts.
Buffer ID managing code
Initialize default configuration where it needs to be overridden by environment.
Loaded on Eclipse start
Lookup the specified marker recursively starting at @a resource. Use @a ResourcesPlugin.getWorkspace().getRoot() to find the marker globally.
Creates a global bookmark for the specified position.
Finds an editor associated with the specified mark.
Open the current file in gvim to perform any operations Vrapper doesn't support. The cursor will be in the exact same position in gvim as it was in Vrapper.  As soon as you save and close gvim, the file will be reloaded.
Create a new (empty) file at the location specified.
Similar to getFilePathMatch, except only return directories.
Perform tab-completion on a path. Given a partial file path, return the next possible match.
Find the first file or directory whose path contains 'prefix' after any previous value 'previous'.  Start in 'startDir' and recurse if necessary.
Open file with default Eclipse editor.  File may be found under any of the directories within 'paths'.
Open file with default Eclipse editor.
Given a list of paths, replace any paths ending in '**' with all subdirectories within that path.  Expanded directories are inserted in place to preserve ordering of the path items. I'm returning a List simply because I don't have a need to convert it back to an array.
The '**' wildcard should be expanded to represent all subdirectories of its parent.  Take the 'path' variable (which should end in '**') and expand out all its corresponding directories.
We're using Eclipse's (Java's) Regex engine for search/replace. However, a lot of people are used to Vim's syntax for regex. So, check for Vim regex syntax and map to Eclipse's (Java's) syntax where possible. \< and \> =  \b   = word boundary (Feature pending... add support for 'magic' and 'very magic')
Makes sure that the prompt characters don't get erased when selected.
If part subclasses a class whose name is contained by element's subclassAttrName attribute, then return instance of gizmoClassName, otherwise return <code>null</code>.
Finds left and right boundaries of an argument at the specified position. If successful @ref getLeftBound() will point to the left argument delimiter and @ref getRightBound() will point to the right argument delimiter. Use @ref AdjustForInner or @ref AdjustForOuter to fix the boundaries based on the type of text object.
Skip left delimiter character and any following whitespace.
Exclude left bound character for the first argument, include the right bound character and any following whitespace.
Detects if current position is inside a quoted string and adjusts left and right bounds to the boundaries of the string.
Skip over S-expression considering priorities when unbalanced.
Find a pair of brackets surrounding (leftBracket..rightBracket) block.
Finds unmatched open bracket starting at @a leftBracket.
Finds unmatched close bracket starting at @a rightBracket.
Applies replacements specified in the parsed XML output. <?xml version='1.0'?> <replacements xml:space='preserve'> <replacement offset='451' length='0'> </replacement> <replacement offset='474' length='1'> </replacement> </replacements>
Find all editor inputs (read files) for the specified editor stack.
Get the template from which the user starts editing. Can be based on previous value of delimited text.
TODO: Don't respond with a mime type that violates the request's Accept header
Value to set for HTTP Server header, or null to ensure the header is blank.
cache control-aware
Lists all files and directories relative to the classpath entry (jar or folder) containing clazz, directly under subdirectory. <p/> If clazz org.webbitserver.Foo is in folder /some/path/org/webbitserver/Foo.clazz, will list files in /some/path/$subdirectory <br /> If clazz org.webbitserver.Foo is in jar /some/path/webbit.jar, will list files in /some/path/webbit.jar:$subdirectory
Override this method to customize thread name.
Replaces characters in input which may open up cross-site scripting (XSS) attacks with XSS-safe equivalents. Follows escaping rules from
See JavaDoc for ExecutorService
Stops tracking this channel for staleness. This happens for WebSockets and EventSource connections.
Returns a new {@link WebServer} object, which runs on the provided port.
Returns a new {@link WebServer} object, which runs on the provided port and adds the executor to the List of executor services to be called when the server is running. it is assumed that the user supplied executor will provide only a single thread.
Returns a new {@link WebServer} object, adding the executor to the list of executor services, running on the stated socket address and accessible from the provided public URI. it is assumed that the user supplied executor will provide only a single thread.
You wouldn't have thought it was that convoluted, but it is.
Create stubbed request.
Send stub request to handler, and return a stubbed response for inspection.
Write text file to FileSystem.
Mkdir on disk
this is to clean up all frames from device memory buffer which causes initial frames to be completely blank (black images)
Start underlying frames refresher.
Determines if device should fail when requested image size is different than actually received.
Get timeout for image acquisition.
Set timeout for image acquisition.
Update underlying memory buffer and fetch new frame.
Return camera devices.
Configure SLF4J.
Construct a BoxBlurFilter.
Set whether to premultiply the alpha channel.
Get whether to premultiply the alpha channel.
Blur and transpose a block of ARGB pixels.
Set the horizontal size of the blur. Minimum hRadius value is 0.
Get the horizontal size of the blur.
Set the vertical size of the blur. Minimal vRadius value is 0.
Get the vertical size of the blur.
Set both the horizontal and vertical sizes of the blur. Minimum value is 0.
Get the size of the blur.
Set the number of iterations the blur is performed. Minimum value is 0.
Get the number of iterations the blur is performed.
Premultiply a block of pixels
Premultiply a block of pixels
Clamp a value to an interval.
A convenience method for getting ARGB pixels from an image. This tries to avoid the performance penalty of BufferedImage.getRGB unmanaging the image.
Construct a FlipFilter which flips horizontally and vertically.
Construct a FlipFilter.
Set the filter operation.
Get the filter operation.
Convert {@link BufferedImage} to byte array.
Get operating system.
Create new notification.
Webcam class.
Asynchronously start new thread which will notify all webcam listeners about the new image available.
Open the webcam in blocking (synchronous) mode.
Open the webcam in either blocking (synchronous) or non-blocking (asynchronous) mode. If the non-blocking mode is enabled the DefaultDelayCalculator is used for calculating delay between two image fetching.
Open the webcam in either blocking (synchronous) or non-blocking (asynchronous) mode.The difference between those two modes lies in the image acquisition mechanism.<br> <br> In blocking mode, when user calls {@link #getImage()} method, device is being queried for new image buffer and user have to wait for it to be available.<br> <br> In non-blocking mode, there is a special thread running in the background which constantly fetch new images and cache them internally for further use. This cached instance is returned every time when user request new image. Because of that it can be used when timeing is very important, because all users calls for new image do not have to wait on device response. By using this mode user should be aware of the fact that in some cases, when two consecutive calls to get new image are executed more often than webcam device can serve them, the same image instance will be returned. User should use {@link #isImageNew()} method to distinguish if returned image is not the same as the previous one. <br> The background thread uses implementation of DelayCalculator interface to calculate delay between two image fetching. Custom implementation may be specified as parameter of this method. If the non-blocking mode is enabled and no DelayCalculator is specified, DefaultDelayCalculator will be used.
Close the webcam.
Return underlying webcam device. Depending on the driver used to discover devices, this method can return instances of different class. By default {@link WebcamDefaultDevice} is returned when no external driver is used.
Completely dispose capture device. After this operation webcam cannot be used any more and full reinstantiation is required.
TRansform image using image transformer. If image transformer has not been set, this method return instance passed in the argument, without any modifications.
Is webcam open?
Get current webcam resolution in pixels.
Return list of supported view sizes. It can differ between vary webcam data sources.
Set custom resolution. If you are using this method you have to make sure that your webcam device can support this specific resolution.
Set new view size. New size has to exactly the same as one of the default sized or exactly the same as one of the custom ones.
Capture image from webcam and return it. Will return image object or null if webcam is closed or has been already disposed by JVM.<br> <br> <b>IMPORTANT NOTE!!!</b><br> <br> There are two possible behaviors of what webcam should do when you try to get image and webcam is actually closed. Normally it will return null, but there is a special flag which can be statically set to switch all webcams to auto open mode. In this mode, webcam will be automatically open, when you try to get image from closed webcam. Please be aware of some side effects! In case of multi-threaded applications, there is no guarantee that one thread will not try to open webcam even if it was manually closed in different thread.
Get RAW image ByteBuffer. It will always return buffer with 3 x 1 bytes per each pixel, where RGB components are on (0, 1, 2) and color space is sRGB.<br> <br> <b>IMPORTANT!</b><br> Some drivers can return direct ByteBuffer, so there is no guarantee that underlying bytes will not be released in next read image operation. Therefore, to avoid potential bugs you should convert this ByteBuffer to bytes array before you fetch next image.
If the underlying device implements Configurable interface, specified parameters are passed to it. May be called before the open method or later in dependence of the device implementation.
Is webcam ready to be read.
Get list of webcams to use. This method will wait predefined time interval for webcam devices to be discovered. By default this time is set to 1 minute.
Get list of webcams to use. This method will wait given time interval for webcam devices to be discovered. Time argument is given in milliseconds.
Get list of webcams to use. This method will wait given time interval for webcam devices to be discovered.
Will discover and return first webcam available in the system.
Get webcam name (device name). The name of device depends on the value returned by the underlying data source, so in some cases it can be human-readable value and sometimes it can be some strange number.
Add webcam listener.
Removes webcam listener.
Return webcam driver. Perform search if necessary.<br> <br> <b>This method is not thread-safe!</b>
Set new video driver to be used by webcam.<br> <br> <b>This method is not thread-safe!</b>
Set new video driver class to be used by webcam. Class given in the argument shall extend {@link WebcamDriver} interface and should have public default constructor, so instance can be <br> <b>This method is not thread-safe!</b>
Reset webcam driver.<br> <br> <b>This method is not thread-safe!</b>
Register new webcam video driver.
<b>CAUTION!!!</b><br> <br> This is experimental feature to be used mostly in in development phase. After you set handle term signal to true, and fetch capture devices, Webcam Capture API will listen for TERM signal and try to close all devices after it has been received. <b>This feature can be unstable on some systems!</b>
Is TERM signal handler enabled.
Switch all webcams to auto open mode. In this mode, each webcam will be automatically open whenever user will try to get image from instance which has not yet been open. Please be aware of some side effects! In case of multi-threaded applications, there is no guarantee that one thread will not try to open webcam even if it was manually closed in different thread.
Is auto open mode enabled. Auto open mode will will automatically open webcam whenever user will try to get image from instance which has not yet been open. Please be aware of some side effects! In case of multi-threaded applications, there is no guarantee that one thread will not try to open webcam even if it was manually closed in different thread.
Add new webcam discovery listener.
Remove discovery listener
Return discovery service.
Return discovery service without creating it if not exists.
Return image transformer.
Set image transformer.
Return webcam lock.
Shutdown webcam framework. This method should be used <b>ONLY</b> when you are exiting JVM, but please <b>do not invoke it</b> if you really don't need to.
Return webcam with given name or null if no device with given name has been found. Please note that specific webcam name may depend on the order it was connected to the USB port (e.g. /dev/video0 vs /dev/video1).
This constructor is used internally to create new deallocator for the given devices array.
Store devices to be deallocated when TERM signal has been received.
Create new webcam discovery event.
Return the webcam which has been found or removed.
Return event type (webcam connected / disconnected)
Get list of devices used by webcams.
Scan for newly added or already removed webcams.
Stop discovery service.
Start discovery service.
Is discovery service running?
Webcam discovery service will be automatically started if it's enabled, otherwise, when set to disabled, it will never start, even when user try to run it.
Find webcam driver. Scan packages to search drivers specified in the argument.
Scans all classes accessible from the context class loader which belong to the given package and subpackages.
Recursive method used to find all classes in a given directory and subdirectories.
Webcam event.
Return image acquired by webcam. This method will return not-null object <b>only</b> in case new image acquisition event. For all other events, it will simply return null.
Return event type.
Creates global webcam lock.
Lock webcam.
Completely disable locking mechanism. After this method is invoked, the lock will not have any effect on the webcam runtime.
Unlock webcam.
Check if webcam is locked.
Create motion detector. Will open webcam if it is closed.
Create motion detector. Will open webcam if it is closed. Uses WebcamMotionDetectorDefaultAlgorithm for motion detection.
Create motion detector with default parameter inertia = 0. Uses WebcamMotionDetectorDefaultAlgorithm for motion detection.
Create motion detector with default parameters - threshold = 25, inertia = 0.
Will notify all attached motion listeners.
Add motion listener.
Removes motion listener.
Motion check interval in milliseconds. After motion is detected, it's valid for time which is equal to value of 2 * interval.
Sets pixelThreshold to the underlying detector algorithm, but only if the algorithm is (or extends) WebcamMotionDetectorDefaultAlgorithm
Sets areaThreshold to the underlying detector algorithm, but only if the algorithm is (or extends) WebcamMotionDetectorDefaultAlgorithm
Set motion inertia (time when motion is valid). If no value specified this is set to 2 * interval. To reset to default value, {@link #clearInertia()} method must be used.
Reset inertia time to value calculated automatically on the base of interval. This value will be set to 2 * interval.
Get attached webcam object.
Get percentage fraction of image covered by motion. 0 means no motion on image and 100 means full image covered by spontaneous motion.
Get motion center of gravity. When no motion is detected this value points to the image center.
Creates default motion detector algorithm.
Set pixel intensity difference threshold above which pixel is classified as "moved". Minimum value is 0 and maximum is 255. Default value is 10. This value is equal for all RGB components difference.
Set percentage fraction of detected motion area threshold above which it is classified as "moved". Minimum value for this is 0 and maximum is 100, which corresponds to full image covered by spontaneous motion.
Clamp a value to the range 0..255
Set the minimum range between each point detected
Get the current minimum range between each point
Set the max amount of points that can be detected at one time
Get the current max amount of points that can be detected at one time
Returns the currently stored points that have been detected
Create detected motion event.
Get percentage fraction of image covered by motion. 0 is no motion on image, and 100 is full image covered by motion.
Returns last image before the motion. Instance is shared among the listeners, so if you need to change the image, create a copy.
Returns image with the motion detected. Instance is shared among the listeners, so if you need to change the image, create a copy.
Repaint scheduler schedule panel updates.
Start repainter. Can be invoked many times, but only first call will take effect.
Stop repainter. Can be invoked many times, but only first call will take effect.
Perform single panel area update (repaint newly obtained image).
Creates webcam panel and automatically start webcam.
Creates new webcam panel which display image from camera in you your Swing application.
Creates new webcam panel which display image from camera in you your Swing application. If panel size argument is null, then image size will be used. If you would like to fill panel area with image even if its size is different, then you can use {@link WebcamPanel#setFillArea(boolean)} method to configure this.
Set new painter. Painter is a class which pains image visible when
Get painter used to draw image in webcam panel.
Open webcam and start rendering.
Stop rendering and close webcam.
Repaint panel in Swing asynchronous manner.
Pause rendering.
Resume rendering.
Is frequency limit enabled?
Enable or disable frequency limit. Frequency limit should be used for <b>all IP cameras working in pull mode</b> (to save number of HTTP requests). If true, images will be fetched in configured time intervals. If false, images will be fetched as fast as camera can serve them.
Get rendering frequency in FPS (equivalent to Hz).
Set rendering frequency (in Hz or FPS). Minimum frequency is 0.016 (1 frame per minute) and maximum is 25 (25 frames per second).
Is displaying of some debug information enabled.
Display some debug information on image surface.
This method return true in case if camera FPS is set to be displayed on panel surface. Default value returned is false.
This method is to control if camera FPS should be displayed on the webcam panel surface.
This method will return true in case when panel is configured to display image size. The string will be printed in the right bottom corner of the panel surface.
Configure panel to display camera image size to be displayed.
Turn on/off antialiasing.
Is webcam panel repainting starting.
Is webcam panel repainting started.
This method returns the current draw mode, mainly used by custom painters
This method sets the drawmode
Indicates whether the panel is in an error state
Hints for rendering, mainly used for custom painters
Get default painter used to draw panel.
This method returns true if image mirroring is enabled. The default value is false.
Decide whether or not the image from webcam painted on panel surface will be mirrored. The image from camera itself is not modified.
Return {@link Webcam} used by this panel.
Process task.
Process single webcam task.
Get resolution size.
Create new shutdown hook instance.
Process task by processor thread.
Construct new webcam updater using DefaultDelayCalculator.
Construct new webcam updater.
Start updater.
Stop updater.
Return currently available image. This method will return immediately while it was been called after camera has been open. In case when there are parallel threads running and there is a possibility to call this method in the opening time, or before camera has been open at all, this method will block until webcam return first image. Maximum blocking time will be 10 seconds, after this time method will return null.
Return current FPS number. It is calculated in real-time on the base of how often camera serve new image.
Capture image as BYteBuffer.
Get resource bundle for specific class.
Get rendering frequency in FPS (equivalent to Hz).
Set rendering frequency (in Hz or FPS). Minimum frequency is 0.016 (1 frame per minute) and maximum is 25 (25 frames per second).
Image will be resized to fill panel area if true. If false then image will be rendered as it was obtained from webcam instance.
Get value of fill area setting. Image will be resized to fill panel area if true. If false then image will be rendered as it was obtained from webcam instance.
Create GStreamer webcam device.
Initialize webcam device.
Use GStreamer to get all possible resolutions.
This method will send HTTP HEAD request to the camera URL to check whether it's online or offline. It's online when this request succeed and it's offline if any exception occurs or response code is 404 Not Found.
Register IP camera.
Register new IP camera device.
Is device registered?
Is device with given name registered?
Is device with given URL registered?
Unregister IP camera.
Run discovery service once if device has been removed to trigger disconnected webcam discovery event and keep webcams list up-to-date.
Unregister IP camera with given name.
Get all registered IP cameras.
Removes all registered devices.
The callable to query single IP camera device.
Set new scan interval. Value must be given in milliseconds and shall not be negative.
Set discovery scanning possible.
Set new scan timeout. This value cannot be less than 1000 milliseconds (which equals 1 second).
Get player control.
Get video format for size.
Get suitable video format to use (the largest one by default, but this can be easily changed).
Copy bytes from a large (over 2GB) InputStream to an OutputStream.
Create video device from file.
Get video resolutions from {@link ImageFormat}.
Get memory converter for given width-height tuple.
Use width and height to create map key.
Converts {@link Memory} into {@link BufferedImage}.
Get capture device protocol. This will be: <ul> </ul>
Initialize natives.
Initialize natives. If argument is true the natives are being loaded. In case of false this method do nothing. It's used mostly in unit tests.
Converts media list itemn into webcam device.
Creates media player factory.
Set new scan interval. Value must be positive number. If negative or zero is used, then the corresponding getter will return default scan interval value.
Cause there may be one or more image in the frame,so we need an Stream listener here to get all the image
Convert a {@link BufferedImage} of any type, to {@link BufferedImage} of a specified type. If the source image is the same type as the target type, then original image is returned, otherwise new image of the correct type is created and the content of the source image is copied into the new image.
Create the shell.
Return the <code>isValid</code> flag for this session without any expiration check.
Return the names of all currently defined session attributes as an array of Strings.  If there are no defined attributes, a zero-length array is returned.
Get new session class to be used in the doLoad() method.
Invalidate all sessions that have expired.
Return the descriptive short name of this Manager implementation.
Creates a new TooManyActiveSessionsException.
Gets the maximum number of sessions allowed by the session manager.
Creates a new StringManager for a given package. This is a private method and all access to it is arbitrated by the static getManager method call so that only one StringManager per package will be created.
Get a string from the underlying resource bundle and format it with the given set of arguments.
Identify the Locale this StringManager is associated with
Get the StringManager for a particular package. If a manager for a package already exists, it will be reused, else a new StringManager will be created and returned.
Get the StringManager for a particular package and Locale. If a manager for a package/Locale combination already exists, it will be reused, else a new StringManager will be created and returned.
Retrieve the StringManager for a list of Locales. The first StringManager found will be returned.
<p>Checks if a CharSequence is whitespace, empty ("") or null.</p> <pre> StringUtils.isBlank(null)      = true StringUtils.isBlank("")        = true StringUtils.isBlank(" ")       = true StringUtils.isBlank("bob")     = false StringUtils.isBlank("  bob  ") = false </pre>
<p>Checks if a CharSequence is not empty (""), not null and not whitespace only.</p> <pre> StringUtils.isNotBlank(null)      = false StringUtils.isNotBlank("")        = false StringUtils.isNotBlank(" ")       = false StringUtils.isNotBlank("bob")     = true StringUtils.isNotBlank("  bob  ") = true </pre> not empty and not null and not whitespace
<p>Checks if a CharSequence is empty ("") or null.</p> <pre> StringUtils.isEmpty(null)      = true StringUtils.isEmpty("")        = true StringUtils.isEmpty(" ")       = false StringUtils.isEmpty("bob")     = false StringUtils.isEmpty("  bob  ") = false </pre> <p>NOTE: This method changed in Lang version 2.0. It no longer trims the CharSequence. That functionality is available in isBlank().</p>
<p>Checks if a CharSequence is not empty ("") and not null.</p> <pre> StringUtils.isNotEmpty(null)      = false StringUtils.isNotEmpty("")        = false StringUtils.isNotEmpty(" ")       = true StringUtils.isNotEmpty("bob")     = true StringUtils.isNotEmpty("  bob  ") = true </pre>
pojo -> xml
This method is a part of the {@link AccessibilityService} lifecycle and is called after the system has successfully bound to the service. If is convenient to use this method for setting the {@link AccessibilityServiceInfo}.
Sets the {@link AccessibilityServiceInfo} that describes this service. <p> Note: You can call this method any time but the info will be picked up after
Sets the {@link AccessibilityServiceInfo} for this service if the latter is properly set and there is an {@link IAccessibilityServiceConnection} to the AccessibilityManagerService.
Creates a new instance.
Updates the properties that an AccessibilitySerivice can change dynamically.
The settings activity name. <p> </p>
Whether this service can retrieve the current window's content. <p> </p>
Description of the accessibility service. <p> </p>
Returns the string representation of a feedback type. For example, {@link #FEEDBACK_SPOKEN} is represented by the string FEEDBACK_SPOKEN.
Returns the string representation of a flag. For example, {@link #DEFAULT} is represented by the string DEFAULT.
Cast an IBinder object into an android.accessibilityservice.IAccessibilityServiceConnection interface, generating a proxy if needed.
Finds an {@link AccessibilityNodeInfo} by accessibility id.
Finds {@link AccessibilityNodeInfo}s by View text. The match is case insensitive containment. The search is performed in the window whose id is specified and starts from the View whose accessibility id is specified.
Finds {@link AccessibilityNodeInfo}s by View text. The match is case insensitive containment. The search is performed in the currently active window and start from the root View in the window.
Finds an {@link AccessibilityNodeInfo} by View id. The search is performed in the currently active window and starts from the root View in the window.
Performs an accessibility action on an {@link AccessibilityNodeInfo}.
Cast an IBinder object into an android.accessibilityservice.IEventListener interface, generating a proxy if needed.
Adds an account of the specified accountType. account must support, may be null will contain either: <ul> <li> {@link AccountManager#KEY_INTENT}, or <li> {@link AccountManager#KEY_ACCOUNT_NAME} and {@link AccountManager#KEY_ACCOUNT_TYPE} of the account that was added, or <li> {@link AccountManager#KEY_ERROR_CODE} and {@link AccountManager#KEY_ERROR_MESSAGE} to indicate an error </ul> network error
Set the result that is to be sent as the result of the request that caused this Activity to be launched. If result is null or this method is never called then the request will be canceled.
Gets an AccountManager instance associated with a Context. The {@link Context} will be used as long as the AccountManager is active, so make sure to use a {@link Context} whose lifetime is commensurate with any listeners registered to {@link #addOnAccountsUpdatedListener} or similar methods. <p>It is safe to call this method from the main thread. <p>No permission is required to call this method.
Gets the saved password associated with the account. This is intended for authenticators and related code; applications should get an auth token instead. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS} and to have the same UID as the account's authenticator.
Gets the user data named by "key" associated with the account. This is intended for authenticators and related code to store arbitrary metadata along with accounts.  The meaning of the keys and values is up to the authenticator for the account. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS} and to have the same UID as the account's authenticator.
Lists the currently registered authenticators. <p>It is safe to call this method from the main thread. <p>No permission is required to call this method.
Lists all accounts of any type registered on the device. Equivalent to getAccountsByType(null). <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#GET_ACCOUNTS}.
Lists all accounts of a particular type.  The account type is a string token corresponding to the authenticator and useful domain of the account.  For example, there are types corresponding to Google and Facebook.  The exact string token to use will be published somewhere associated with the authenticator in question. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#GET_ACCOUNTS}.
Finds out whether a particular account has all the specified features. Account features are authenticator-specific string tokens identifying boolean account properties.  For example, features are used to tell whether Google accounts have a particular service (such as Google Calendar or Google Talk) enabled.  The feature names and their meanings are published somewhere associated with the authenticator in question. <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#GET_ACCOUNTS}. true if the account exists and has all of the specified features.
Lists all accounts of a type which have certain features.  The account type identifies the authenticator (see {@link #getAccountsByType}). Account features are authenticator-specific string tokens identifying boolean account properties (see {@link #hasFeatures}). <p>Unlike {@link #getAccountsByType}, this method calls the authenticator, which may contact the server or do other work to check account features, so the method returns an {@link AccountManagerFuture}. <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#GET_ACCOUNTS}.
Adds an account directly to the AccountManager.  Normally used by sign-up wizards associated with authenticators, not directly by applications. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS} and to have the same UID as the added account's authenticator.
Removes an account from the AccountManager.  Does nothing if the account does not exist.  Does not delete the account from the server. The authenticator may have its own policies preventing account deletion, in which case the account will not be deleted. <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
Removes an auth token from the AccountManager's cache.  Does nothing if the auth token is not currently in the cache.  Applications must call this method when the auth token is found to have expired or otherwise become invalid for authenticating requests.  The AccountManager does not validate or expire cached auth tokens otherwise. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#MANAGE_ACCOUNTS} or {@link android.Manifest.permission#USE_CREDENTIALS}
Gets an auth token from the AccountManager's cache.  If no auth token is cached for this account, null will be returned -- a new auth token will not be generated, and the server will not be contacted. Intended for use by the authenticator, not directly by applications. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS} and to have the same UID as the account's authenticator.
Sets or forgets a saved password.  This modifies the local copy of the password used to automatically authenticate the user; it does not change the user's account password on the server.  Intended for use by the authenticator, not directly by applications. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS} and have the same UID as the account's authenticator.
Forgets a saved password.  This erases the local copy of the password; it does not change the user's account password on the server. Has the same effect as setPassword(account, null) but requires fewer permissions, and may be used by applications or management interfaces to "sign out" from an account. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#MANAGE_ACCOUNTS}
Sets one userdata key for an account.  Intended by use for the authenticator to stash state for itself, not directly by applications. The meaning of the keys and values is up to the authenticator. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS} and to have the same UID as the account's authenticator.
Adds an auth token to the AccountManager cache for an account. If the account does not exist then this call has no effect. Replaces any previous auth token for this account and auth token type. Intended for use by the authenticator, not directly by applications. <p>It is safe to call this method from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS} and to have the same UID as the account's authenticator.
This convenience helper synchronously gets an auth token with {@link #getAuthToken(Account, String, boolean, AccountManagerCallback, Handler)}. <p>This method may block while a network request completes, and must never be made from the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#USE_CREDENTIALS}.
Gets an auth token of the specified type for a particular account, prompting the user for credentials if necessary.  This method is intended for applications running in the foreground where it makes sense to ask the user directly for a password. <p>If a previously generated auth token is cached for this account and type, then it is returned.  Otherwise, if a saved password is available, it is sent to the server to generate a new auth token. Otherwise, the user is prompted to enter a password. <p>Some authenticators have auth token <em>types</em>, whose value is authenticator-dependent.  Some services use different token types to access different functionality -- for example, Google uses different auth tokens to access Gmail and Google Calendar for the same account. <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#USE_CREDENTIALS}. <ul> <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted </ul> (Other authenticator-specific values may be returned.)  If an auth token could not be fetched, {@link AccountManagerFuture#getResult()} throws: <ul> <li> {@link AuthenticatorException} if the authenticator failed to respond <li> {@link OperationCanceledException} if the operation is canceled for <li> {@link IOException} if the authenticator experienced an I/O problem </ul> If the account is no longer present on the device, the return value is authenticator-dependent.  The caller should verify the validity of the account before requesting an auth token.
Gets an auth token of the specified type for a particular account, optionally raising a notification if the user must enter credentials. This method is intended for background tasks and services where the user should not be immediately interrupted with a password prompt. <p>If a previously generated auth token is cached for this account and type, then it is returned.  Otherwise, if a saved password is available, it is sent to the server to generate a new auth token. Otherwise, an {@link Intent} is returned which, when started, will prompt the user for a password.  If the notifyAuthFailure parameter is set, a status bar notification is also created with the same Intent, alerting the user that they need to enter a password at some point. <p>In that case, you may need to wait until the user responds, which could take hours or days or forever.  When the user does respond and supply a new password, the account manager will broadcast the {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent, which applications can use to try again. <p>If notifyAuthFailure is not set, it is the application's responsibility to launch the returned Intent at some point. Either way, the result from this call will not wait for user action. <p>Some authenticators have auth token <em>types</em>, whose value is authenticator-dependent.  Some services use different token types to access different functionality -- for example, Google uses different auth tokens to access Gmail and Google Calendar for the same account. <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#USE_CREDENTIALS}. <ul> <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted </ul> (Other authenticator-specific values may be returned.)  If the user must enter credentials, the returned Bundle contains only {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt. If an error occurred, {@link AccountManagerFuture#getResult()} throws: <ul> <li> {@link AuthenticatorException} if the authenticator failed to respond <li> {@link OperationCanceledException} if the operation is canceled for <li> {@link IOException} if the authenticator experienced an I/O problem </ul> If the account is no longer present on the device, the return value is authenticator-dependent.  The caller should verify the validity of the account before requesting an auth token.
Asks the user to add an account of a specified type.  The authenticator for this account type processes this request with the appropriate user interface.  If the user does elect to create a new account, the account name is returned. <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#MANAGE_ACCOUNTS}. <ul> <li> {@link #KEY_ACCOUNT_NAME} - the name of the account created <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account </ul> If no activity was specified, the returned Bundle contains only {@link #KEY_INTENT} with the {@link Intent} needed to launch the actual account creation process.  If an error occurred, {@link AccountManagerFuture#getResult()} throws: <ul> <li> {@link AuthenticatorException} if no authenticator was registered for <li> {@link OperationCanceledException} if the operation was canceled for <li> {@link IOException} if the authenticator experienced an I/O problem </ul>
Confirms that the user knows the password for an account to make extra sure they are the owner of the account.  The user-entered password can be supplied directly, otherwise the authenticator for this account type prompts the user with the appropriate interface.  This method is intended for applications which want extra assurance; for example, the phone lock screen uses this to let the user unlock the phone with an account password if they forget the lock pattern. <p>If the user-entered password matches a saved password for this account, the request is considered valid; otherwise the authenticator verifies the password (usually by contacting the server). <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#MANAGE_ACCOUNTS}. <ul> <li> {@link #KEY_ACCOUNT_NAME} - the name of the account created <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account <li> {@link #KEY_BOOLEAN_RESULT} - true to indicate success </ul> If no activity or password was specified, the returned Bundle contains only {@link #KEY_INTENT} with the {@link Intent} needed to launch the password prompt.  If an error occurred, {@link AccountManagerFuture#getResult()} throws: <ul> <li> {@link AuthenticatorException} if the authenticator failed to respond <li> {@link OperationCanceledException} if the operation was canceled for <li> {@link IOException} if the authenticator experienced an I/O problem </ul>
Asks the user to enter a new password for an account, updating the saved credentials for the account.  Normally this happens automatically when the server rejects credentials during an auth token fetch, but this can be invoked directly to ensure we have the correct credentials stored. <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#MANAGE_ACCOUNTS}. <ul> <li> {@link #KEY_ACCOUNT_NAME} - the name of the account created <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account </ul> If no activity was specified, the returned Bundle contains only {@link #KEY_INTENT} with the {@link Intent} needed to launch the password prompt.  If an error occurred, {@link AccountManagerFuture#getResult()} throws: <ul> <li> {@link AuthenticatorException} if the authenticator failed to respond <li> {@link OperationCanceledException} if the operation was canceled for <li> {@link IOException} if the authenticator experienced an I/O problem </ul>
Offers the user an opportunity to change an authenticator's settings. These properties are for the authenticator in general, not a particular account.  Not all authenticators support this method. <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#MANAGE_ACCOUNTS}. <ul> <li> {@link AuthenticatorException} if no authenticator was registered for <li> {@link OperationCanceledException} if the operation was canceled for <li> {@link IOException} if the authenticator experienced an I/O problem </ul>
This convenience helper combines the functionality of {@link #getAccountsByTypeAndFeatures}, {@link #getAuthToken}, and {@link #addAccount}. <p>This method gets a list of the accounts matching the specified type and feature set; if there is exactly one, it is used; if there are more than one, the user is prompted to pick one; if there are none, the user is prompted to add one.  Finally, an auth token is acquired for the chosen account. <p>This method may be called from any thread, but the returned {@link AccountManagerFuture} must not be used on the main thread. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#MANAGE_ACCOUNTS}. <ul> <li> {@link #KEY_ACCOUNT_NAME} - the name of the account <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted </ul> If an error occurred, {@link AccountManagerFuture#getResult()} throws: <ul> <li> {@link AuthenticatorException} if no authenticator was registered for <li> {@link OperationCanceledException} if the operation was canceled for <li> {@link IOException} if the authenticator experienced an I/O problem </ul>
Returns an intent to an {@link Activity} that prompts the user to choose from a list of accounts. The caller will then typically start the activity by calling <code>startActivityWithResult(intent, ...);</code>. <p> On success the activity returns a Bundle with the account name and type specified using keys {@link #KEY_ACCOUNT_NAME} and {@link #KEY_ACCOUNT_TYPE}. <p> The most common case is to call this with one account type, e.g.: <p> <pre>  newChooseAccountsIntent(null, null, new String[]{"com.google"}, false, null, null, null, null);</pre> selected one, according to the caller's definition of selected. shown. If not specified then this field will not limit the displayed accounts. both to filter the shown accounts and to filter the list of account types that are shown when adding an account. it is only shown when there is more than one account from which to choose accounts chooser screen rather than the default authTokenType parameter requiredFeatures parameter parameter
BroadcastReceiver that listens for the LOGIN_ACCOUNTS_CHANGED_ACTION intent so that it can read the updated list of accounts and send them to the listener in mAccountsUpdatedListeners.
Adds an {@link OnAccountsUpdateListener} to this instance of the {@link AccountManager}.  This listener will be notified whenever the list of accounts on the device changes. <p>As long as this listener is present, the AccountManager instance will not be garbage-collected, and neither will the {@link Context} used to retrieve it, which may be a large Activity instance.  To avoid memory leaks, you must remove this listener before then.  Normally listeners are added in an Activity or Service's {@link Activity#onCreate} and removed in {@link Activity#onDestroy}. <p>It is safe to call this method from the main thread. <p>No permission is required to call this method.
Removes an {@link OnAccountsUpdateListener} previously registered with {@link #addOnAccountsUpdatedListener}.  The listener will no longer receive notifications of account changes. <p>It is safe to call this method from the main thread. <p>No permission is required to call this method.
This should only be called by system code. One should only call this after the service has started.
find the component name for the authenticator and initiate a bind if no authenticator or the bind fails then return false, otherwise return true
Searches array of arguments for the specified string
Succeeds if any of the specified permissions are granted.
Allow callers with the given uid permission to get credentials for account/authTokenType. <p> Although this is public it can only be accessed via the AccountManagerService object which is in the system. This means we don't need to protect it with permissions.
Don't allow callers with the given uid permission to get credentials for account/authTokenType. <p> Although this is public it can only be accessed via the AccountManagerService object which is in the system. This means we don't need to protect it with permissions.
This assumes that the caller has already checked that the account is not already present.
A constructor for a full AuthenticatorDescription
A factory method for creating an AuthenticatorDescription that can be used as a key to identify the authenticator by its type.
Returns the hashcode of the type only.
Compares the type only, suitable for key comparisons.
Sends the result or a {@link AccountManager#ERROR_CODE_CANCELED} error if a result isn't present.
Cast an IBinder object into an android.accounts.IAccountAuthenticator interface, generating a proxy if needed.
prompts the user for account information and adds the result to the IAccountManager
prompts the user for the credentials of the account
gets the password by either prompting the user or querying the IAccountManager
Gets the user-visible label of the given authtoken type.
prompts the user for a new password and writes it to the IAccountManager
launches an activity that lets the user edit and set the properties for an authenticator
returns a Bundle where the boolean value BOOLEAN_RESULT_KEY is set if the account has the specified features
Gets whether or not the account is allowed to be removed.
Cast an IBinder object into an android.accounts.IAccountAuthenticatorResponse interface, generating a proxy if needed.
Cast an IBinder object into an android.accounts.IAccountManager interface, generating a proxy if needed.
Cast an IBinder object into an android.accounts.IAccountManagerResponse interface, generating a proxy if needed.
Loads an {@link Animator} object from a resource
Constructs a LayoutTransition object. By default, the object will listen to layout events on any ViewGroup that it is set on and will run default animations for each type of layout event.
Sets the duration to be used by all animations of this transition object. If you want to set the duration of just one of the animations in particular, use the {@link #setDuration(int, long)} method. should last.
Sets the start delay on one of the animation objects used by this transition. The <code>transitionType</code> parameter determines the animation whose start delay is being set. {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the animation whose start delay is being set.
Gets the start delay on one of the animation objects used by this transition. The <code>transitionType</code> parameter determines the animation whose start delay is returned. {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the animation whose start delay is returned.
Sets the duration on one of the animation objects used by this transition. The <code>transitionType</code> parameter determines the animation whose duration is being set. {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the animation whose duration is being set.
Gets the duration on one of the animation objects used by this transition. The <code>transitionType</code> parameter determines the animation whose duration is returned. {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the animation whose duration is returned.
Sets the length of time to delay between starting each animation during one of the CHANGE animations. animation in the sequence.
Tets the length of time to delay between starting each animation during one of the CHANGE animations. animation in the sequence.
Sets the interpolator on one of the animation objects used by this transition. The <code>transitionType</code> parameter determines the animation whose interpolator is being set. {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the animation whose duration is being set.
Gets the interpolator on one of the animation objects used by this transition. The <code>transitionType</code> parameter determines the animation whose interpolator is returned. {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the animation whose duration is being set.
Sets the animation used during one of the transition types that may run. Any Animator object can be used, but to be most useful in the context of layout transitions, the animation should either be a ObjectAnimator or a AnimatorSet of animations including PropertyAnimators. Also, these ObjectAnimator objects should be able to get and set values on their target objects automatically. For example, a ObjectAnimator that animates the property "left" is able to set and get the <code>left</code> property from the View objects being animated by the layout transition. The transition works by setting target objects and properties dynamically, according to the pre- and post-layoout values of those objects, so having animations that can handle those properties appropriately will work best for custom animation. The dynamic setting of values is only the case for the CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with the values they have. <p>It is also worth noting that any and all animations (and their underlying PropertyValuesHolder objects) will have their start and end values set according to the pre- and post-layout values. So, for example, a custom animation on "alpha" as the CHANGE_APPEARING animation will inherit the real value of alpha on the target object (presumably 1) as its starting and ending value when the animation begins. Animations which need to use values at the beginning and end that may not match the values queried when the transition begins may need to use a different mechanism than a standard ObjectAnimator object.</p> {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the animation whose duration is being set. animation will be run for the specified transitionType.
Gets the animation used during one of the transition types that may run. {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the animation whose duration is being set.
This function sets up animations on all of the views that change during layout. For every child in the parent, we create a change animation of the appropriate type (appearing or disappearing) and ask it to populate its start values from its target view. We add layout listeners to all child views and listen for changes. For those views that change, we populate the end values for those animations and start them. Animations are not run on unchanging views. transition is occuring because an item is being added to or removed from the parent.
This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will cause the default changing animation to be run on the parent hierarchy as well. This allows containers of transitioning views to also transition, which may be necessary in situations where the containers bounds change between the before/after states and may clip their children during the transition animations. For example, layouts with wrap_content will adjust their bounds according to the dimensions of their children. <p>The default changing transitions animate the bounds and scroll positions of the target views. These are the animations that will run on the parent hierarchy, not the custom animations that happen to be set on the transition. This allows custom behavior for the children of the transitioning container, but uses standard behavior of resizing/rescrolling on any changing parents. transitioning views should also be animated during the transition. Default value is true.
Utility function called by runChangingTransition for both the children and the parent hierarchy.
Starts the animations set up for a CHANGING transition. We separate the setup of these animations from actually starting them, to avoid side-effects that starting the animations may have on the properties of the affected objects. After setup, we tell the affected parent that this transition should be started. The parent informs its ViewAncestor, which then starts the transition after the current layout/measurement phase, just prior to drawing the view hierarchy.
Ends the animations that are set up for a CHANGING transition. This is a variant of startChangingAnimations() which is called when the window the transition is playing in is not visible. We need to make sure the animations put their targets in their end states and that the transition finishes to remove any mid-process state (such as isRunning()).
Returns true if animations are running which animate layout-related properties. This essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING animations are running, since these animations operate on layout-related properties. running.
Returns true if any of the animations in this transition are currently running.
Cancels the currently running transition. Note that we cancel() the changing animations but end() the visibility animations. This is because this method is currently called in the context of starting a new transition, so we want to move things from their mid- transition positions, but we want them to have their end-transition visibility.
Cancels the specified type of transition. Note that we cancel() the changing animations but end() the visibility animations. This is because this method is currently called in the context of starting a new transition, so we want to move things from their mid- transition positions, but we want them to have their end-transition visibility.
This method runs the animation that makes an added item appear.
This method runs the animation that makes a removed item disappear.
This method is called by ViewGroup when a child view is about to be added to the container. This callback starts the process of a transition; we grab the starting values, listen for changes to all of the children of the container, and start appropriate animations.
This method is called by ViewGroup when a child view is about to be added to the container. This callback starts the process of a transition; we grab the starting values, listen for changes to all of the children of the container, and start appropriate animations.
This method is called by ViewGroup when a child view is about to be removed from the container. This callback starts the process of a transition; we grab the starting values, listen for changes to all of the children of the container, and start appropriate animations.
This method is called by ViewGroup when a child view is about to be removed from the container. This callback starts the process of a transition; we grab the starting values, listen for changes to all of the children of the container, and start appropriate animations.
Add a listener that will be called when the bounds of the view change due to layout processing.
Remove a listener for layout changes.
Gets the current list of listeners for layout changes.
Constructs and returns a PropertyValuesHolder object with the specified property and set of values. These values can be of any type, but the type should be consistent so that an appropriate {@link android.animation.TypeEvaluator} can be found that matches the common type. <p>If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling the property's {@link android.util.Property#get(Object)} function. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction with {@link ObjectAnimator}, since otherwise PropertyValuesHolder has no way of determining what the value should be.
Constructor. this device admin's component.
Return the .apk package that implements this device admin.
Return the class name of the receiver component that implements this device admin.
Return the raw information about the receiver implementing this device admin.  Do not modify the returned object.
Return the component of the receiver that implements this device admin.
Load the user-displayed label for this device admin. resources.
Load user-visible description associated with this device admin. resources.
Load the user-displayed icon for this device admin. resources.
Returns whether this device admin would like to be visible to the user, even when it is not enabled.
Return true if the device admin has requested that it be able to use the given policy control.  The possible policy identifier inputs are: {@link #USES_POLICY_LIMIT_PASSWORD}, {@link #USES_POLICY_WATCH_LOGIN}, {@link #USES_POLICY_RESET_PASSWORD}, {@link #USES_POLICY_FORCE_LOCK}, {@link #USES_POLICY_WIPE_DATA}, {@link #USES_POLICY_EXPIRE_PASSWORD}, {@link #USES_ENCRYPTED_STORAGE}, {@link #USES_POLICY_DISABLE_CAMERA}.
Return the XML tag name for the given policy identifier.  Valid identifiers are as per {@link #usesPolicy(int)}.  If the given identifier is not known, null is returned.
Used to package this object into a {@link Parcel}.
Retrieve the DevicePolicyManager interface for this administrator to work with the system.
Retrieve the ComponentName describing who this device administrator is, for use in {@link DevicePolicyManager} APIs that require the administrator to identify itself.
Called when the user has asked to disable the administrator, as a result of receiving {@link #ACTION_DEVICE_ADMIN_DISABLE_REQUESTED}, giving you a chance to present a warning message to them.  The message is returned as the result; if null is returned (the default implementation), no message will be displayed. being disabled; if null is returned, no message is displayed.
Return true if the given administrator component is currently active (enabled) in the system.
Return a list of all currently active device administrator's component names.  Note that if there are no administrators than null may be returned.
Remove a current administration component.  This can only be called by the application that owns the administration component; if you try to remove someone else's component, a security exception will be thrown.
Returns true if an administrator has been granted a particular device policy.  This can be used to check if the administrator was activated under an earlier set of policies, but requires additional policies after an upgrade. an active administrator, or an exception will be thrown.
Called by an application that is administering the device to set the password restrictions it is imposing.  After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set.  Note that the current password will remain until the user has set a new one, so the change does not take place immediately.  To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value. <p>Quality constants are ordered so that higher values are more restrictive; thus the highest requested quality constant (between the policy set here, the user's preference, and any other considerations) is the one that is in effect. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown. {@link #PASSWORD_QUALITY_UNSPECIFIED}, {@link #PASSWORD_QUALITY_SOMETHING}, {@link #PASSWORD_QUALITY_NUMERIC}, {@link #PASSWORD_QUALITY_ALPHABETIC}, {@link #PASSWORD_QUALITY_ALPHANUMERIC} or {@link #PASSWORD_QUALITY_COMPLEX}.
Retrieve the current minimum password quality for all admins or a particular one. all admins.
Called by an application that is administering the device to set the minimum allowed password length.  After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set.  Note that the current password will remain until the user has set a new one, so the change does not take place immediately.  To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value.  This constraint is only imposed if the administrator has also requested either {@link #PASSWORD_QUALITY_NUMERIC}, {@link #PASSWORD_QUALITY_ALPHABETIC} {@link #PASSWORD_QUALITY_ALPHANUMERIC}, or {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown. means there is no restriction.
Retrieve the current minimum password length for all admins or a particular one. all admins.
Called by an application that is administering the device to set the minimum number of upper case letters required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value. This constraint is only imposed if the administrator has also requested {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 0. <p> The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown.
Retrieve the current number of upper case letters required in the password for all admins or a particular one. This is the same value as set by {#link {@link #setPasswordMinimumUpperCase(ComponentName, int)} and only applies when the password quality is {@link #PASSWORD_QUALITY_COMPLEX}.
Called by an application that is administering the device to set the minimum number of lower case letters required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value. This constraint is only imposed if the administrator has also requested {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 0. <p> The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown.
Retrieve the current number of lower case letters required in the password for all admins or a particular one. This is the same value as set by {#link {@link #setPasswordMinimumLowerCase(ComponentName, int)} and only applies when the password quality is {@link #PASSWORD_QUALITY_COMPLEX}.
Called by an application that is administering the device to set the minimum number of letters required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value. This constraint is only imposed if the administrator has also requested {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 1. <p> The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown.
Retrieve the current number of letters required in the password for all admins or a particular one. This is the same value as set by {#link {@link #setPasswordMinimumLetters(ComponentName, int)} and only applies when the password quality is {@link #PASSWORD_QUALITY_COMPLEX}.
Called by an application that is administering the device to set the minimum number of numerical digits required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value. This constraint is only imposed if the administrator has also requested {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 1. <p> The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown.
Retrieve the current number of numerical digits required in the password for all admins or a particular one. This is the same value as set by {#link {@link #setPasswordMinimumNumeric(ComponentName, int)} and only applies when the password quality is {@link #PASSWORD_QUALITY_COMPLEX}.
Called by an application that is administering the device to set the minimum number of symbols required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value. This constraint is only imposed if the administrator has also requested {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 1. <p> The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown.
Retrieve the current number of symbols required in the password for all admins or a particular one. This is the same value as set by {#link {@link #setPasswordMinimumSymbols(ComponentName, int)} and only applies when the password quality is {@link #PASSWORD_QUALITY_COMPLEX}.
Called by an application that is administering the device to set the minimum number of non-letter characters (numerical digits or symbols) required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value. This constraint is only imposed if the administrator has also requested {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 0. <p> The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown.
Retrieve the current number of non-letter characters required in the password for all admins or a particular one. This is the same value as set by {#link {@link #setPasswordMinimumNonLetter(ComponentName, int)} and only applies when the password quality is {@link #PASSWORD_QUALITY_COMPLEX}.
Called by an application that is administering the device to set the length of the password history. After setting this, the user will not be able to enter a new password that is the same as any password in the history. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value. This constraint is only imposed if the administrator has also requested either {@link #PASSWORD_QUALITY_NUMERIC}, {@link #PASSWORD_QUALITY_ALPHABETIC}, or {@link #PASSWORD_QUALITY_ALPHANUMERIC} with {@link #setPasswordQuality}. <p> The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown.
Called by a device admin to set the password expiration timeout. Calling this method will restart the countdown for password expiration for the given admin, as will changing the device password (for all admins). <p>The provided timeout is the time delta in ms and will be added to the current time. For example, to have the password expire 5 days from now, timeout would be 5 * 86400 * 1000 = 432000000 ms for timeout. <p>To disable password expiration, a value of 0 may be used for timeout. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_EXPIRE_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown.
Get the password expiration timeout for the given admin. The expiration timeout is the recurring expiration timeout provided in the call to {@link #setPasswordExpirationTimeout(ComponentName, long)} for the given admin or the aggregate of all policy administrators if admin is null.
Get the current password expiration time for the given admin or an aggregate of all admins if admin is null. If the password is expired, this will return the time since the password expired as a negative number.  If admin is null, then a composite of all expiration timeouts is returned - which will be the minimum of all timeouts.
Retrieve the current password history length for all admins or a particular one. all admins.
Return the maximum password length that the device supports for a particular password quality.
Determine whether the current password the user has set is sufficient to meet the policy requirements (quality, minimum length) that have been requested. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown. else false.
Retrieve the number of times the user has failed at entering a password since that last successful password entry. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} to be able to call this method; if it has not, a security exception will be thrown.
Setting this to a value greater than zero enables a built-in policy that will perform a device wipe after too many incorrect device-unlock passwords have been entered.  This built-in policy combines watching for failed passwords and wiping the device, and requires that you request both {@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} and {@link DeviceAdminInfo#USES_POLICY_WIPE_DATA}}. <p>To implement any other policy (e.g. wiping data for a particular application only, erasing or revoking credentials, or reporting the failure to a server), you should implement {@link DeviceAdminReceiver#onPasswordFailed(Context, android.content.Intent)} instead.  Do not use this API, because if the maximum count is reached, the device will be wiped immediately, and your callback will not be invoked. device will wipe its data.
Retrieve the current maximum number of login attempts that are allowed before the device wipes itself, for all admins or a particular one. all admins.
Force a new device unlock password (the password needed to access the entire device, not for individual accounts) on the user.  This takes effect immediately. The given password must be sufficient for the current password quality and length constraints as returned by {@link #getPasswordQuality(ComponentName)} and {@link #getPasswordMinimumLength(ComponentName)}; if it does not meet these constraints, then it will be rejected and false returned.  Note that the password may be a stronger quality (containing alphanumeric characters when the requested quality is only numeric), in which case the currently active quality will be increased to match. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_RESET_PASSWORD} to be able to call this method; if it has not, a security exception will be thrown. not acceptable for the current constraints.
Called by an application that is administering the device to set the maximum time for user activity until the device will lock.  This limits the length that the user can set.  It takes effect immediately. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_FORCE_LOCK} to be able to call this method; if it has not, a security exception will be thrown. A value of 0 means there is no restriction.
Retrieve the current maximum time to unlock for all admins or a particular one. all admins.
Make the device lock immediately, as if the lock screen timeout has expired at the point of this call. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_FORCE_LOCK} to be able to call this method; if it has not, a security exception will be thrown.
Ask the user date be wiped.  This will cause the device to reboot, erasing all user data while next booting up.  External storage such as SD cards will not be erased. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_WIPE_DATA} to be able to call this method; if it has not, a security exception will be thrown.
Called by an application that is administering the device to set the global proxy and exclusion list. <p> The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_SETS_GLOBAL_PROXY} to be able to call this method; if it has not, a security exception will be thrown. Only the first device admin can set the proxy. If a second admin attempts to set the proxy, the {@link ComponentName} of the admin originally setting the proxy will be returned. If successful in setting the proxy, null will be returned. The method can be called repeatedly by the device admin alrady setting the proxy to update the proxy and exclusion list.
Returns the component name setting the global proxy.
Called by an application that is administering the device to request that the storage system be encrypted. <p>When multiple device administrators attempt to control device encryption, the most secure, supported setting will always be used.  If any device administrator requests device encryption, it will be enabled;  Conversely, if a device administrator attempts to disable device encryption while another device administrator has enabled it, the call to disable will fail (most commonly returning {@link #ENCRYPTION_STATUS_ACTIVE}). <p>This policy controls encryption of the secure (application data) storage area.  Data written to other storage areas may or may not be encrypted, and this policy does not require or control the encryption of any other storage areas. There is one exception:  If {@link android.os.Environment#isExternalStorageEmulated()} is {@code true}, then the directory returned by {@link android.os.Environment#getExternalStorageDirectory()} must be written to disk within the encrypted storage area. <p>Important Note:  On some devices, it is possible to encrypt storage without requiring the user to create a device PIN or Password.  In this case, the storage is encrypted, but the encryption key may not be fully secured.  For maximum security, the administrator should also require (and check for) a pattern, PIN, or password. {@link #ENCRYPTION_STATUS_UNSUPPORTED}, {@link #ENCRYPTION_STATUS_INACTIVE}, or {@link #ENCRYPTION_STATUS_ACTIVE}.  This is the value of the requests;  Use {@link #getStorageEncryptionStatus()} to query the actual device state.
Called by an application that is administering the device to determine the requested setting for secure storage. this will return the requested encryption setting as an aggregate of all active administrators.
Called by an application that is administering the device to determine the current encryption status of the device. Depending on the returned status code, the caller may proceed in different ways.  If the result is {@link #ENCRYPTION_STATUS_UNSUPPORTED}, the storage system does not support encryption.  If the result is {@link #ENCRYPTION_STATUS_INACTIVE}, use {@link #ACTION_START_ENCRYPTION} to begin the process of encrypting or decrypting the storage.  If the result is {@link #ENCRYPTION_STATUS_ACTIVATING} or {@link #ENCRYPTION_STATUS_ACTIVE}, no further action is required. {@link #ENCRYPTION_STATUS_UNSUPPORTED}, {@link #ENCRYPTION_STATUS_INACTIVE}, {@link #ENCRYPTION_STATUS_ACTIVATING}, or{@link #ENCRYPTION_STATUS_ACTIVE}.
Called by an application that is administering the device to disable all cameras on the device.  After setting this, no applications will be able to access any cameras on the device. <p>The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA} to be able to call this method; if it has not, a security exception will be thrown.
Determine whether or not the device's cameras have been disabled either by the current admin, if specified, or all admins. have disabled the camera
Returns the DeviceAdminInfo as defined by the administrator's package info & meta-data
Cast an IBinder object into an android.app.admin.IDevicePolicyManager interface, generating a proxy if needed.
Construct a helper for backing up / restoring the files at the given absolute locations within the file system.
Based on oldState, determine which of the files from the application's data directory need to be backed up, write them to the data stream, and fill in newState with the state as it exists now.
Restore one absolute file entity from the restore stream
The application is being asked to write any data changed since the last time it performed a backup operation. The state data recorded during the last backup pass is provided in the <code>oldState</code> file descriptor. If <code>oldState</code> is <code>null</code>, no old state is available and the application should perform a full backup. In both cases, a representation of the final backup state after this pass should be written to the file pointed to by the file descriptor wrapped in <code>newState</code>. <p> Each entity written to the {@link android.app.backup.BackupDataOutput} <code>data</code> stream will be transmitted over the current backup transport and stored in the remote data set under the key supplied as part of the entity.  Writing an entity with a negative data size instructs the transport to delete whatever entity currently exists under that key from the remote data set.
Write an entire file as part of a full-backup operation.  The file's contents will be delivered to the backup destination along with the metadata necessary to place it with the proper location and permissions on the device where the data is restored.
Scan the dir tree (if it actually exists) and process each entry we find.  If the 'excludes' parameter is non-null, it is consulted each time a new file system entity is visited to see whether that entity (and its subtree, if appropriate) should be omitted from the backup process.
Handle the data delivered via the given file descriptor during a full restore operation.  The agent is given the path to the file's original location as well as its size and metadata. <p> The file descriptor can only be read for {@code size} bytes; attempting to read more data has undefined behavior. <p> The default implementation creates the destination file/directory and populates it with the data from the file descriptor, then sets the file's access mode and modification time to match the restore arguments.
Only specialized platform agents should overload this entry point to support restores to crazy non-app locations.
Add a helper for a given data subset to the agent's configuration.  Each helper must have a prefix string that is unique within this backup agent's set of helpers.
Extract the next entity header from the restore stream.  After this method return success, the {@link #getKey()} and {@link #getDataSize()} methods can be used to inspect the entity that is now available for processing.
Report the key associated with the current entity in the restore stream
Report the size in bytes of the data associated with the current entity in the restore stream.
Read a record's raw data from the restore stream.  The record's header must first have been processed by the {@link #readNextHeader()} method.  Multiple calls to this method may be made in order to process the data in chunks; not all of it must be read in a single call.  Once all of the raw data for the current entity has been read, further calls to this method will simply return zero.
Consume the current entity's data without extracting it into a buffer for further processing.  This allows a {@link android.app.backup.BackupAgent} to efficiently discard obsolete or otherwise uninteresting records during the restore operation.
Read one byte of entity data from the stream, returning it as an integer value.  If more than {@link #size()} bytes of data are read from the stream, the output of this method is undefined.
Read up to {@code size} bytes of data into a byte array, beginning at position {@code offset} within the array. within the array. data exists within the entity to fulfill this request, only as much data will be read as is available. data has already been read.
Read enough entity data into a byte array to fill the array. have sufficient data to fill the array, then the contents of the remainder of the array will be undefined. data has already been read.
Report the key string associated with this entity within the backup data set. {@link BackupDataInput#getKey()} on the underlying {@link BackupDataInput}.
Report the total number of bytes of data available for the current entity. {@link BackupDataInput#getDataSize()} on the underlying {@link BackupDataInput}.
Mark the beginning of one record in the backup data stream. This must be called before {@link #writeEntityData}.
Write a chunk of data under the current entity to the backup transport.
Constructs a BackupManager object through which the application can communicate with the Android backup system.
Notifies the Android backup system that your application wishes to back up new changes to its data.  A backup operation using your application's {@link android.app.backup.BackupAgent} subclass will be scheduled when you call this method.
Convenience method for callers who need to indicate that some other package needs a backup pass.  This can be useful in the case of groups of packages that share a uid. <p> This method requires that the application hold the "android.permission.BACKUP" permission if the package named in the argument does not run under the same uid as the caller.
Restore the calling application from backup.  The data will be restored from the current backup dataset if the application has stored data there, or from the dataset used during the last full device setup operation if the current backup dataset has no matching data.  If no backup data exists for this application in either source, a nonzero value will be returned. <p>If this method returns zero (meaning success), the OS will attempt to retrieve a backed-up dataset from the remote transport, instantiate the application's backup agent, and pass the dataset to the agent's {@link android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()} method. operation. This must not be null.
Begin the process of restoring data from backup.  See the {@link android.app.backup.RestoreSession} class for documentation on that process.
Construct a helper to manage backup/restore of entire files within the application's data directory hierarchy.
Based on <code>oldState</code>, determine which of the files from the application's data directory need to be backed up, write them to the data stream, and fill in <code>newState</code> with the state as it exists now. When <code>oldState</code> is <code>null</code>, all the files will be backed up. <p> This should only be called directly from within the {@link BackupAgentHelper} implementation. See {@link android.app.backup.BackupAgent#onBackup(ParcelFileDescriptor, BackupDataOutput, ParcelFileDescriptor)} for a description of parameter meanings.
Restore one record [representing a single file] from the restore dataset. <p> This should only be called directly from within the {@link BackupAgentHelper} implementation.
Check the parameters so the native code doesn't have to throw all the exceptions since it's easier to do that from Java.
Copy data from a socket to the given File location on permanent storage.  The modification time and access mode of the resulting file will be set if desired. If the {@code type} parameter indicates that the result should be a directory, the socket parameter may be {@code null}; even if it is valid, no data will be read from it in this case. <p> If the {@code mode} argument is negative, then the resulting output file will not have its access mode or last modification time reset as part of this operation.
Cast an IBinder object into an android.app.backup.IBackupManager interface, generating a proxy if needed.
Tell the system service that the caller has made changes to its data, and therefore needs to undergo an incremental backup pass. Any application can invoke this method for its own package, but only callers who hold the android.permission.BACKUP permission may invoke it for arbitrary packages.
Erase all backed-up data for the given package from the storage destination. Any application can invoke this method for its own package, but only callers who hold the android.permission.BACKUP permission may invoke it for arbitrary packages.
Notifies the Backup Manager Service that an agent has become available.  This method is only invoked by the Activity Manager.
Notify the Backup Manager Service that an agent has unexpectedly gone away. This method is only invoked by the Activity Manager.
Notify the Backup Manager Service that an application being installed will need a data-restore pass.  This method is only invoked by the Package Manager.
Enable/disable the backup service entirely.  When disabled, no backup or restore operations will take place.  Data-changed notifications will still be observed and collected, however, so that changes made while the mechanism was disabled will still be backed up properly if it is enabled at some point in the future. <p>Callers must hold the android.permission.BACKUP permission to use this method.
Enable/disable automatic restore of application data at install time.  When enabled, installation of any package will involve the Backup Manager.  If data exists for the newly-installed package, either from the device's current [enabled] backup dataset or from the restore set used in the last wholesale restore operation, that data will be supplied to the new package's restore agent before the package is made generally available for launch. <p>Callers must hold  the android.permission.BACKUP permission to use this method. false, this facility will be disabled.
Indicate that any necessary one-time provisioning has occurred. <p>Callers must hold the android.permission.BACKUP permission to use this method.
Report whether the backup mechanism is currently enabled. <p>Callers must hold the android.permission.BACKUP permission to use this method.
Set the device's backup password.  Returns {@code true} if the password was set successfully, {@code false} otherwise.  Typically a failure means that an incorrect current password was supplied. <p>Callers must hold the android.permission.BACKUP permission to use this method.
Reports whether a backup password is currently set.  If not, then a null or empty "current password" argument should be passed to setBackupPassword(). <p>Callers must hold the android.permission.BACKUP permission to use this method.
Schedule an immediate backup attempt for all pending updates.  This is primarily intended for transports to use when they detect a suitable opportunity for doing a backup pass.  If there are no pending updates to be sent, no action will be taken.  Even if some updates are pending, the transport will still be asked to confirm via the usual requestBackupTime() method. <p>Callers must hold the android.permission.BACKUP permission to use this method.
Write a full backup of the given package to the supplied file descriptor. The fd may be a socket or other non-seekable destination.  If no package names are supplied, then every application on the device will be backed up to the output. <p>This method is <i>synchronous</i> -- it does not return until the backup has completed. <p>Callers must hold the android.permission.BACKUP permission to use this method.
Restore device content from the data stream passed through the given socket.  The data stream must be in the format emitted by fullBackup(). <p>Callers must hold the android.permission.BACKUP permission to use this method.
Confirm that the requested full backup/restore operation can proceed.  The system will not actually perform the operation described to fullBackup() / fullRestore() unless the UI calls back into the Backup Manager to confirm, passing the correct token.  At the same time, the UI supplies a callback Binder for progress notifications during the operation. <p>The password passed by the confirming entity must match the saved backup or full-device encryption password in order to perform a backup.  If a password is supplied for restore, it must match the password used when creating the full backup dataset being used for restore. <p>Callers must hold the android.permission.BACKUP permission to use this method.
Identify the currently selected transport.  Callers must hold the android.permission.BACKUP permission to use this method.
Request a list of all available backup transports' names.  Callers must hold the android.permission.BACKUP permission to use this method.
Specify the current backup transport.  Callers must hold the android.permission.BACKUP permission to use this method. of {@link BackupManager.TRANSPORT_GOOGLE} or {@link BackupManager.TRANSPORT_ADB}. name is not one of the currently available transports, no change is made to the current transport setting and the method returns null.
Get the configuration Intent, if any, from the given transport.  Callers must hold the android.permission.BACKUP permission in order to use this method. UI supplied by the transport.  If the transport has no configuration UI, it should return {@code null} here.
Get the destination string supplied by the given transport.  Callers must hold the android.permission.BACKUP permission in order to use this method. verbatim by the Settings UI as the summary text of the "configure..." item.
Begin a restore session.  Either or both of packageName and transportID may be null.  If packageName is non-null, then only the given package will be considered for restore.  If transportID is null, then the restore will use the current active transport. <p> This method requires the android.permission.BACKUP permission <i>except</i> when transportID is null and packageName is the name of the caller's own package.  In that case, the restore session returned is suitable for supporting the BackupManager.requestRestore() functionality via RestoreSession.restorePackage() without requiring the app to hold any special permission.
Notify the backup manager that a BackupAgent has completed the operation corresponding to the given token. {@hide}
Cast an IBinder object into an android.app.backup.IFullBackupRestoreObserver interface, generating a proxy if needed.
Notification: a full backup operation has begun.
Notification: the system has begun backing up the given package.
Notification: the full backup operation has ended.
Notification: a restore-from-full-backup operation has begun.
Notification: the system has begun restore of the given package.
Notification: the restore-from-full-backup operation has ended.
The user's window of opportunity for confirming the operation has timed out.
Cast an IBinder object into an android.app.backup.IRestoreObserver interface, generating a proxy if needed.
Supply a list of the restore datasets available from the current transport.  This method is invoked as a callback following the application's use of the {@link android.app.backup.IRestoreSession.getAvailableRestoreSets} method. describing all of the available datasets that are candidates for restoring to the current device.  If no applicable datasets exist, {@code result} will be {@code null}.
The restore operation has begun. this restore operation.
An indication of which package is being restored currently, out of the total number provided in the {@link #restoreStarting(int numPackages)} callback. This method is not guaranteed to be called. to the restoreStarting() callback, of the package now being restored.
The restore operation has completed. as a whole failed.
Cast an IBinder object into an android.app.backup.IRestoreSession interface, generating a proxy if needed.
Ask the current transport what the available restore sets are. method will be called to supply the results of the transport's lookup. result callback if this method returned zero.
Restore the given set onto the device, replacing the current data of any app contained in the restore set with the data previously backed up. <p>Callers must hold the android.permission.BACKUP permission to use this method. progress callbacks if this method returned zero. the restore set that should be used. progress callbacks during the restore operation.
Restore select packages from the given set onto the device, replacing the current data of any app contained in the set with the data previously backed up. <p>Callers must hold the android.permission.BACKUP permission to use this method. progress callbacks if this method returned zero. the restore set that should be used. progress callbacks during the restore operation. the contents of the actual back-end dataset named by {@code token}, only applications mentioned in this list will have their data restored.
Restore a single application from backup.  The data will be restored from the current backup dataset if the given package has stored data there, or from the dataset used during the last full device setup operation if the current backup dataset has no matching data.  If no backup data exists for this package in either source, a nonzero value will be returned. progress callbacks if this method returned zero. not the name of the caller's own package, then the android.permission.BACKUP permission must be held. progress callbacks during the restore operation.
End this restore session.  After this method is called, the IRestoreSession binder is no longer valid. <p><b>Note:</b> The caller <i>must</i> invoke this method to end the restore session, even if {@link getAvailableRestoreSets} or {@link performRestore} failed.
Ask the current transport what the available restore sets are. be called on the application's main thread in order to supply the results of the restore set lookup by the backup transport.  This parameter must not be null. method will only be called if this method returned zero.
End this restore session.  After this method is called, the RestoreSession object is no longer valid. <p><b>Note:</b> The caller <i>must</i> invoke this method to end the restore session, even if {@link #restorePackage(String, RestoreObserver)} failed.
Nonpublic implementation here
Binder calls into this object just enqueue on the main-thread handler
Parcelable implementation
Construct a helper for backing up and restoring the {@link android.content.SharedPreferences} under the given names. back up
Backs up the configured {@link android.content.SharedPreferences} groups.
Restores one entity from the restore data stream to its proper shared preferences file store.
Construct a helper for backing up / restoring the files at the given absolute locations within the file system.
Restore one absolute file entity from the restore stream.  If we're restoring the magic wallpaper file, take specific action to determine whether it is suitable for the current device.
Return the intent that started this activity.
Change the intent returned by {@link #getIntent}.  This holds a reference to the given intent; it does not copy it.  Often used in conjunction with {@link #onNewIntent}.
Return the application that owns this activity.
Is this activity embedded inside of another activity?
Return the parent activity if this view is an embedded child.
Retrieve the window manager for showing custom windows.
Retrieve the current {@link android.view.Window} for the activity. This can be used to directly access parts of the Window API that are not available through Activity/Screen.
Calls {@link android.view.Window#getCurrentFocus} on the Window of this Activity to return the currently focused view.
Called when the activity is starting.  This is where most initialization should go: calling {@link #setContentView(int)} to inflate the activity's UI, using {@link #findViewById} to programmatically interact with widgets in the UI, calling {@link #managedQuery(android.net.Uri , String[], String, String[], String)} to retrieve cursors for data being displayed, etc. <p>You can call {@link #finish} from within this function, in which case onDestroy() will be immediately called without any of the rest of the activity lifecycle ({@link #onStart}, {@link #onResume}, {@link #onPause}, etc) executing. <p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
The hook for {@link ActivityThread} to restore the state of this activity. Calls {@link #onSaveInstanceState(android.os.Bundle)} and {@link #restoreManagedDialogs(android.os.Bundle)}.
This method is called after {@link #onStart} when the activity is being re-initialized from a previously saved state, given here in <var>savedInstanceState</var>.  Most implementations will simply use {@link #onCreate} to restore their state, but it is sometimes convenient to do it here after all of the initialization has been done or to allow subclasses to decide whether to use your default implementation.  The default implementation of this method performs a restore of any view state that had previously been frozen by {@link #onSaveInstanceState}. <p>This method is called between {@link #onStart} and {@link #onPostCreate}.
Restore the state of any saved managed dialogs.
Called when activity start-up is complete (after {@link #onStart} and {@link #onRestoreInstanceState} have been called).  Applications will generally not implement this method; it is intended for system classes to do final initialization after application code has run. <p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
Called after {@link #onCreate} &mdash; or after {@link #onRestart} when the activity had been stopped, but is now again being displayed to the user.  It will be followed by {@link #onResume}. <p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
Called after {@link #onStop} when the current activity is being re-displayed to the user (the user has navigated back to it).  It will be followed by {@link #onStart} and then {@link #onResume}. <p>For activities that are using raw {@link Cursor} objects (instead of creating them through {@link #managedQuery(android.net.Uri , String[], String, String[], String)}, this is usually the place where the cursor should be requeried (because you had deactivated it in {@link #onStop}. <p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
Called after {@link #onRestoreInstanceState}, {@link #onRestart}, or {@link #onPause}, for your activity to start interacting with the user. This is a good place to begin animations, open exclusive-access devices (such as the camera), etc. <p>Keep in mind that onResume is not the best indicator that your activity is visible to the user; a system window such as the keyguard may be in front.  Use {@link #onWindowFocusChanged} to know for certain that your activity is visible to the user (for example, to resume a game). <p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
Called when activity resume is complete (after {@link #onResume} has been called). Applications will generally not implement this method; it is intended for system classes to do final setup after application resume code has run. <p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
The hook for {@link ActivityThread} to save the state of this activity. Calls {@link #onSaveInstanceState(android.os.Bundle)} and {@link #saveManagedDialogs(android.os.Bundle)}.
Called to retrieve per-instance state from an activity before being killed so that the state can be restored in {@link #onCreate} or {@link #onRestoreInstanceState} (the {@link Bundle} populated by this method will be passed to both). <p>This method is called before an activity may be killed so that when it comes back some time in the future it can restore its state.  For example, if activity B is launched in front of activity A, and at some point activity A is killed to reclaim resources, activity A will have a chance to save the current state of its user interface via this method so that when the user returns to activity A, the state of the user interface can be restored via {@link #onCreate} or {@link #onRestoreInstanceState}. <p>Do not confuse this method with activity lifecycle callbacks such as {@link #onPause}, which is always called when an activity is being placed in the background or on its way to destruction, or {@link #onStop} which is called before destruction.  One example of when {@link #onPause} and {@link #onStop} is called and not this method is when a user navigates back from activity B to activity A: there is no need to call {@link #onSaveInstanceState} on B because that particular instance will never be restored, so the system avoids calling it.  An example when {@link #onPause} is called and not {@link #onSaveInstanceState} is when activity B is launched in front of activity A: the system may avoid calling {@link #onSaveInstanceState} on activity A if it isn't killed during the lifetime of B since the state of the user interface of A will stay intact. <p>The default implementation takes care of most of the UI per-instance state for you by calling {@link android.view.View#onSaveInstanceState()} on each view in the hierarchy that has an id, and by saving the id of the currently focused view (all of which is restored by the default implementation of {@link #onRestoreInstanceState}).  If you override this method to save additional information not captured by each individual view, you will likely want to call through to the default implementation, otherwise be prepared to save all of the state of each view yourself. <p>If called, this method will occur before {@link #onStop}.  There are no guarantees about whether it will occur before or after {@link #onPause}.
Save the state of any managed dialogs.
Called as part of the activity lifecycle when an activity is going into the background, but has not (yet) been killed.  The counterpart to {@link #onResume}. <p>When activity B is launched in front of activity A, this callback will be invoked on A.  B will not be created until A's {@link #onPause} returns, so be sure to not do anything lengthy here. <p>This callback is mostly used for saving any persistent state the activity is editing, to present a "edit in place" model to the user and making sure nothing is lost if there are not enough resources to start the new activity without first killing this one.  This is also a good place to do things like stop animations and other things that consume a noticeable mount of CPU in order to make the switch to the next activity as fast as possible, or to close resources that are exclusive access such as the camera. <p>In situations where the system needs more memory it may kill paused processes to reclaim resources.  Because of this, you should be sure that all of your state is saved by the time you return from this function.  In general {@link #onSaveInstanceState} is used to save per-instance state in the activity and this method is used to store global persistent data (in content providers, files, etc.) <p>After receiving this call you will usually receive a following call to {@link #onStop} (after the next activity has been resumed and displayed), however in some cases there will be a direct call back to {@link #onResume} without going through the stopped state. <p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
Generate a new thumbnail for this activity.  This method is called before pausing the activity, and should draw into <var>outBitmap</var> the imagery for the desired thumbnail in the dimensions of that bitmap.  It can use the given <var>canvas</var>, which is configured to draw into the bitmap, for rendering if desired. <p>The default implementation returns fails and does not draw a thumbnail; this will result in the platform creating its own thumbnail if needed.
Generate a new description for this activity.  This method is called before pausing the activity and can, if desired, return some textual description of its current state to be displayed to the user. <p>The default implementation returns null, which will cause you to inherit the description from the previous activity.  If all activities return null, generally the label of the top activity will be used as the description.
Called when you are no longer visible to the user.  You will next receive either {@link #onRestart}, {@link #onDestroy}, or nothing, depending on later user activity. <p>Note that this method may never be called, in low memory situations where the system does not have enough memory to keep your activity's process running after its {@link #onPause} method is called. <p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
Perform any final cleanup before an activity is destroyed.  This can happen either because the activity is finishing (someone called {@link #finish} on it, or because the system is temporarily destroying this instance of the activity to save space.  You can distinguish between these two scenarios with the {@link #isFinishing} method. <p><em>Note: do not count on this method being called as a place for saving data! For example, if an activity is editing data in a content provider, those edits should be committed in either {@link #onPause} or {@link #onSaveInstanceState}, not here.</em> This method is usually implemented to free resources like threads that are associated with an activity, so that a destroyed activity does not leave such things around while the rest of its application is still running.  There are situations where the system will simply kill the activity's hosting process without calling this method (or any others) in it, so it should not be used to do things that are intended to remain around after the process goes away. <p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
Called by the system when the device configuration changes while your activity is running.  Note that this will <em>only</em> be called if you have selected configurations you would like to handle with the {@link android.R.attr#configChanges} attribute in your manifest.  If any configuration change occurs that is not selected to be reported by that attribute, then instead of reporting it the system will stop and restart the activity (to have it launched with the new configuration). <p>At the time that this function has been called, your Resources object will have been updated to return resource values matching the new configuration.
If this activity is being destroyed because it can not handle a configuration parameter being changed (and thus its {@link #onConfigurationChanged(Configuration)} method is <em>not</em> being called), then you can use this method to discover the set of changes that have occurred while in the process of being destroyed.  Note that there is no guarantee that these will be accurate (other changes could have happened at any time), so you should only use this as an optimization hint. changing, as defined by the {@link android.content.res.Configuration} class.
Called by the system, as part of destroying an activity due to a configuration change, when it is known that a new instance will immediately be created for the new configuration.  You can return any object you like here, including the activity instance itself, which can later be retrieved by calling {@link #getLastNonConfigurationInstance()} in the new activity instance. <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB} or later, consider instead using a {@link Fragment} with {@link Fragment#setRetainInstance(boolean) Fragment.setRetainInstance(boolean}.</em> <p>This function is called purely as an optimization, and you must not rely on it being called.  When it is called, a number of guarantees will be made to help optimize configuration switching: <ul> <li> The function will be called between {@link #onStop} and {@link #onDestroy}. <li> A new instance of the activity will <em>always</em> be immediately created after this one's {@link #onDestroy()} is called.  In particular, <em>no</em> messages will be dispatched during this time (when the returned object does not have an activity to be associated with). <li> The object you return here will <em>always</em> be available from the {@link #getLastNonConfigurationInstance()} method of the following activity instance as described there. </ul> <p>These guarantees are designed so that an activity can use this API to propagate extensive state from the old to new activity instance, from loaded bitmaps, to network connections, to evenly actively running threads.  Note that you should <em>not</em> propagate any data that may change based on the configuration, including any data loaded from resources such as strings, layouts, or drawables. <p>The guarantee of no message handling during the switch to the next activity simplifies use with active objects.  For example if your retained state is an {@link android.os.AsyncTask} you are guaranteed that its call back functions (like {@link android.os.AsyncTask#onPostExecute}) will not be called from the call here until you execute the next instance's {@link #onCreate(Bundle)}.  (Note however that there is of course no such guarantee for {@link android.os.AsyncTask#doInBackground} since that is running in a separate thread.) next activity instance. {@link Fragment#setRetainInstance(boolean)} instead; this is also available on older platforms through the Android compatibility package.
Retrieve the non-configuration instance data that was previously returned by {@link #onRetainNonConfigurationChildInstances()}.  This will be available from the initial {@link #onCreate} and {@link #onStart} calls to the new instance, allowing you to extract any useful dynamic state from the previous instance. <p>Note that the data you retrieve here should <em>only</em> be used as an optimization for handling configuration changes.  You should always be able to handle getting a null pointer back, and an activity must still be able to restore itself to its previous state (through the normal {@link #onSaveInstanceState(Bundle)} mechanism) even if this function returns null. {@link #onRetainNonConfigurationChildInstances()}
This method is similar to {@link #onRetainNonConfigurationInstance()} except that it should return either a mapping from  child activity id strings to arbitrary objects, or null.  This method is intended to be used by Activity framework subclasses that control a set of child activities, such as ActivityGroup.  The same guarantees and restrictions apply as for {@link #onRetainNonConfigurationInstance()}.  The default implementation returns null.
Return the FragmentManager for interacting with fragments associated with this activity.
Finds a view that was identified by the id attribute from the XML that was processed in {@link #onCreate}.
Retrieve a reference to this activity's ActionBar.
Creates a new ActionBar, locates the inflated ActionBarView, initializes the ActionBar with the view, and sets mActionBar.
Set the activity content from a layout resource.  The resource will be inflated, adding all top-level views to the activity.
Set the activity content to an explicit view.  This view is placed directly into the activity's view hierarchy.  It can itself be a complex view hierarchy.  When calling this method, the layout parameters of the specified view are ignored.  Both the width and the height of the view are set by default to {@link ViewGroup.LayoutParams#MATCH_PARENT}. To use your own layout parameters, invoke {@link #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)} instead.
Set the activity content to an explicit view.  This view is placed directly into the activity's view hierarchy.  It can itself be a complex view hierarchy.
Add an additional content view to the activity.  Added after any existing ones in the activity -- existing views are NOT removed.
Sets whether this activity is finished when touched outside its window's bounds.
Select the default key handling for this activity.  This controls what will happen to key events that are not otherwise handled.  The default mode ({@link #DEFAULT_KEYS_DISABLE}) will simply drop them on the floor. Other modes allow you to launch the dialer ({@link #DEFAULT_KEYS_DIALER}), execute a shortcut in your options menu without requiring the menu key be held down ({@link #DEFAULT_KEYS_SHORTCUT}), or launch a search ({@link #DEFAULT_KEYS_SEARCH_LOCAL} and {@link #DEFAULT_KEYS_SEARCH_GLOBAL}). <p>Note that the mode selected here does not impact the default handling of system keys, such as the "back" and "menu" keys, and your activity and its views always get a first chance to receive and handle all application keys.
Called when a key was pressed down and not handled by any of the views inside of the activity. So, for example, key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses. <p>If the focused view didn't want this event, this method is called. <p>The default implementation takes care of {@link KeyEvent#KEYCODE_BACK} by calling {@link #onBackPressed()}, though the behavior varies based on the application compatibility mode: for {@link android.os.Build.VERSION_CODES#ECLAIR} or later applications, it will set up the dispatch to call {@link #onKeyUp} where the action will be performed; for earlier applications, it will perform the action immediately in on-down, as those versions of the platform behaved. <p>Other additional default key handling may be performed if configured with {@link #setDefaultKeyMode}. further, or <code>false</code> to indicate that you have not handled this event and it should continue to be propagated.
Default implementation of {@link KeyEvent.Callback#onKeyLongPress(int, KeyEvent) KeyEvent.Callback.onKeyLongPress()}: always returns false (doesn't handle the event).
Called when a key was released and not handled by any of the views inside of the activity. So, for example, key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses. <p>The default implementation handles KEYCODE_BACK to stop the activity and go back. further, or <code>false</code> to indicate that you have not handled this event and it should continue to be propagated.
Default implementation of {@link KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent) KeyEvent.Callback.onKeyMultiple()}: always returns false (doesn't handle the event).
Called when the activity has detected the user's press of the back key.  The default implementation simply finishes the current activity, but you can override this to do whatever you want.
Called when a key shortcut event is not handled by any of the views in the Activity. Override this method to implement global key shortcuts for the Activity. Key shortcuts can also be implemented by setting the {@link MenuItem#setShortcut(char, char) shortcut} property of menu items.
Called when a touch screen event was not handled by any of the views under it.  This is most useful to process touch events that happen outside of your window bounds, where there is no view to receive it. The default implementation always returns false.
Called when the trackball was moved and not handled by any of the views inside of the activity.  So, for example, if the trackball moves while focus is on a button, you will receive a call here because buttons do not normally do anything with trackball events.  The call here happens <em>before</em> trackball movements are converted to DPAD key events, which then get sent back to the view hierarchy, and will be processed at the point for things like focus navigation. The default implementation always returns false.
Called when a generic motion event was not handled by any of the views inside of the activity. <p> Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events.  The {@link MotionEvent#getSource() source} of the motion event specifies the class of input that was received.  Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. </p><p> Generic motion events with source class {@link android.view.InputDevice#SOURCE_CLASS_POINTER} are delivered to the view under the pointer.  All other generic motion events are delivered to the focused view. </p><p> See {@link View#onGenericMotionEvent(MotionEvent)} for an example of how to handle this event. </p> The default implementation always returns false.
Returns true if this activity's <em>main</em> window currently has window focus. Note that this is not the same as the view itself having focus.
Called to process key events.  You can override this to intercept all key events before they are dispatched to the window.  Be sure to call this implementation for key events that should be handled normally.
Called to process a key shortcut event. You can override this to intercept all key shortcut events before they are dispatched to the window.  Be sure to call this implementation for key shortcut events that should be handled normally.
Called to process touch screen events.  You can override this to intercept all touch screen events before they are dispatched to the window.  Be sure to call this implementation for touch screen events that should be handled normally.
Called to process trackball events.  You can override this to intercept all trackball events before they are dispatched to the window.  Be sure to call this implementation for trackball events that should be handled normally.
Called to process generic motion events.  You can override this to intercept all generic motion events before they are dispatched to the window.  Be sure to call this implementation for generic motion events that should be handled normally.
Default implementation of {@link android.view.Window.Callback#onCreatePanelView} for activities. This simply returns null so that all panel sub-windows will have the default menu behavior.
Default implementation of {@link android.view.Window.Callback#onCreatePanelMenu} for activities.  This calls through to the new {@link #onCreateOptionsMenu} method for the {@link android.view.Window#FEATURE_OPTIONS_PANEL} panel, so that subclasses of Activity don't need to deal with feature codes.
Default implementation of {@link android.view.Window.Callback#onPreparePanel} for activities.  This calls through to the new {@link #onPrepareOptionsMenu} method for the {@link android.view.Window#FEATURE_OPTIONS_PANEL} panel, so that subclasses of Activity don't need to deal with feature codes.
Default implementation of {@link android.view.Window.Callback#onMenuItemSelected} for activities.  This calls through to the new {@link #onOptionsItemSelected} method for the {@link android.view.Window#FEATURE_OPTIONS_PANEL} panel, so that subclasses of Activity don't need to deal with feature codes.
Default implementation of {@link android.view.Window.Callback#onPanelClosed(int, Menu)} for activities. This calls through to {@link #onOptionsMenuClosed(Menu)} method for the {@link android.view.Window#FEATURE_OPTIONS_PANEL} panel, so that subclasses of Activity don't need to deal with feature codes. For context menus ({@link Window#FEATURE_CONTEXT_MENU}), the {@link #onContextMenuClosed(Menu)} will be called.
Declare that the options menu has changed, so should be recreated. The {@link #onCreateOptionsMenu(Menu)} method will be called the next time it needs to be displayed.
Initialize the contents of the Activity's standard options menu.  You should place your menu items in to <var>menu</var>. <p>This is only called once, the first time the options menu is displayed.  To update the menu every time it is displayed, see {@link #onPrepareOptionsMenu}. <p>The default implementation populates the menu with standard system menu items.  These are placed in the {@link Menu#CATEGORY_SYSTEM} group so that they will be correctly ordered with application-defined menu items. Deriving classes should always call through to the base implementation. <p>You can safely hold on to <var>menu</var> (and any items created from it), making modifications to it as desired, until the next time onCreateOptionsMenu() is called. <p>When you add items to the menu, you can implement the Activity's {@link #onOptionsItemSelected} method to handle them there.
Prepare the Screen's standard options menu to be displayed.  This is called right before the menu is shown, every time it is shown.  You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents. <p>The default implementation updates the system menu items based on the activity's state.  Deriving classes should always call through to the base class implementation.
This hook is called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected).
Programmatically opens the options menu. If the options menu is already open, this method does nothing.
Progammatically closes the options menu. If the options menu is already closed, this method does nothing.
Registers a context menu to be shown for the given view (multiple views can show the context menu). This method will set the {@link OnCreateContextMenuListener} on the view to this activity, so {@link #onCreateContextMenu(ContextMenu, View, ContextMenuInfo)} will be called when it is time to show the context menu.
Prevents a context menu to be shown for the given view. This method will remove the {@link OnCreateContextMenuListener} on the view.
Programmatically opens the context menu for a particular {@code view}. The {@code view} should have been added via {@link #registerForContextMenu(View)}.
Programmatically closes the most recently opened context menu, if showing.
This hook is called whenever the context menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected).
Creates an exception to throw if a user passed in a dialog id that is unexpected.
This hook is called when the user signals the desire to start a search. <p>You can use this function as a simple way to launch the search UI, in response to a menu item, search button, or other widgets within your activity. Unless overidden, calling this function is the same as calling {@link #startSearch startSearch(null, false, null, false)}, which launches search for the current activity as specified in its manifest, see {@link SearchManager}. <p>You can override this function to force global search, e.g. in response to a dedicated search key, or to block search entirely (by simply returning false).
This hook is called to launch the search UI. <p>It is typically called from onSearchRequested(), either directly from Activity.onSearchRequested() or from an overridden version in any given Activity.  If your goal is simply to activate search, it is preferred to call onSearchRequested(), which may have been overriden elsewhere in your Activity.  If your goal is to inject specific data such as context data, it is preferred to <i>override</i> onSearchRequested(), so that any callers to it will benefit from the override. pre-entered text in the search query box. any further typing will replace it.  This is useful for cases where an entire pre-formed query is being inserted.  If false, the selection point will be placed at the end of the inserted query.  This is useful when the inserted query is text that the user entered, and the user would expect to be able to keep typing.  <i>This parameter is only meaningful if initialQuery is a non-empty string.</i> context here, in order to improve quality or specificity of its own searches.  This data will be returned with SEARCH intent(s).  Null if no extra data is required. defined by the application (which is usually defined as a local search).  If no default search is defined in the current application or activity, global search will be launched. If true, this will always launch a platform-global (e.g. web-based) search instead.
Similar to {@link #startSearch}, but actually fires off the search query after invoking the search dialog.  Made available for testing purposes. context here, in order to improve quality or specificity of its own searches.  This data will be returned with SEARCH intent(s).  Null if no extra data is required.
Request that key events come to this activity. Use this if your activity has no views with focus, but the activity still wants a chance to process key events.
Enable extended window features.  This is a convenience for calling {@link android.view.Window#requestFeature getWindow().requestFeature()}.
Convenience for calling {@link android.view.Window#setFeatureDrawableResource}.
Convenience for calling {@link android.view.Window#setFeatureDrawableUri}.
Convenience for calling {@link android.view.Window#setFeatureDrawable(int, Drawable)}.
Convenience for calling {@link android.view.Window#setFeatureDrawableAlpha}.
Convenience for calling {@link android.view.Window#getLayoutInflater}.
Returns a {@link MenuInflater} with this context.
Launch an activity for which you would like a result when it finished. When this activity exits, your onActivityResult() method will be called with the given requestCode. Using a negative requestCode is the same as calling {@link #startActivity} (the activity is not launched as a sub-activity). <p>Note that this method should only be used with Intent protocols that are defined to return a result.  In other protocols (such as {@link Intent#ACTION_MAIN} or {@link Intent#ACTION_VIEW}), you may not get the result when you expect.  For example, if the activity you are launching uses the singleTask launch mode, it will not run in your task and thus you will immediately receive a cancel result. <p>As a special case, if you call startActivityForResult() with a requestCode >= 0 during the initial onCreate(Bundle savedInstanceState)/onResume() of your activity, then your window will not be displayed until a result is returned back from the started activity.  This is to avoid visible flickering when redirecting to another activity. <p>This method throws {@link android.content.ActivityNotFoundException} if there was no Activity found to run the given Intent.
Like {@link #startActivityForResult(Intent, int)}, but allowing you to use a IntentSender to describe the activity to be started.  If the IntentSender is for an activity, that activity will be started as if you had called the regular {@link #startActivityForResult(Intent, int)} here; otherwise, its associated action will be executed (such as sending a broadcast) as if you had called {@link IntentSender#sendIntent IntentSender.sendIntent} on it. intent parameter to {@link IntentSender#sendIntent}. would like to change. <var>flagsMask</var>
Like {@link #startActivity(Intent)}, but taking a IntentSender to start; see {@link #startIntentSenderForResult(IntentSender, int, Intent, int, int, int)} for more information. intent parameter to {@link IntentSender#sendIntent}. would like to change. <var>flagsMask</var>
A special variation to launch an activity only if a new activity instance is needed to handle the given Intent.  In other words, this is just like {@link #startActivityForResult(Intent, int)} except: if you are using the {@link Intent#FLAG_ACTIVITY_SINGLE_TOP} flag, or singleTask or singleTop {@link android.R.styleable#AndroidManifestActivity_launchMode launchMode}, and the activity that handles <var>intent</var> is the same as your currently running activity, then a new instance is not needed.  In this case, instead of the normal behavior of calling {@link #onNewIntent} this function will return and you can handle the Intent yourself. <p>This function can only be called from a top-level activity; if it is called from a child activity, a runtime exception will be thrown.
Special version of starting an activity, for use when you are replacing other activity components.  You can use this to hand the Intent off to the next Activity that can handle it.  You typically call this in {@link #onCreate} with the Intent returned by {@link #getIntent}. correct behavior, this must be the same as the Intent that started your own activity; the only changes you can make are to the extras inside of it. to start: true if there was a next activity to start, false if there wasn't.  In general, if true is returned you will then want to call finish() on yourself.
This is called when a child activity of this one calls its {@link #startActivity} or {@link #startActivityForResult} method. <p>This method throws {@link android.content.ActivityNotFoundException} if there was no Activity found to run the given Intent.
This is called when a Fragment in this activity calls its {@link Fragment#startActivity} or {@link Fragment#startActivityForResult} method. <p>This method throws {@link android.content.ActivityNotFoundException} if there was no Activity found to run the given Intent.
Like {@link #startActivityFromChild(Activity, Intent, int)}, but taking a IntentSender; see {@link #startIntentSenderForResult(IntentSender, int, Intent, int, int, int)} for more information.
Call immediately after one of the flavors of {@link #startActivity(Intent)} or {@link #finish} to specify an explicit transition animation to perform next. the incoming activity.  Use 0 for no animation. the outgoing activity.  Use 0 for no animation.
Call this to set the result that your activity will return to its caller.
Return the name of the package that invoked this activity.  This is who the data in {@link #setResult setResult()} will be sent to.  You can use this information to validate that the recipient is allowed to receive the data. <p>Note: if the calling activity is not expecting a result (that is it did not use the {@link #startActivityForResult} form that includes a request code), then the calling package will be null.
Return the name of the activity that invoked this activity.  This is who the data in {@link #setResult setResult()} will be sent to.  You can use this information to validate that the recipient is allowed to receive the data. <p>Note: if the calling activity is not expecting a result (that is it did not use the {@link #startActivityForResult} form that includes a request code), then the calling package will be null.
Control whether this activity's main window is visible.  This is intended only for the special case of an activity that is not going to show a UI itself, but can't just finish prior to onResume() because it needs to wait for a service binding or such.  Setting this to false allows you to prevent your UI from being shown during that time. <p>The default value for this is taken from the {@link android.R.attr#windowNoDisplay} attribute of the activity's theme.
Check to see whether this activity is in the process of finishing, either because you called {@link #finish} on it or someone else has requested that it finished.  This is often used in {@link #onPause} to determine whether the activity is simply pausing or completely finishing.
Check to see whether this activity is in the process of being destroyed in order to be recreated with a new configuration. This is often used in {@link #onStop} to determine whether the state needs to be cleaned up or will be passed on to the next instance of the activity via {@link #onRetainNonConfigurationInstance()}. returns true; else returns false.
Cause this Activity to be recreated with a new instance.  This results in essentially the same flow as when the Activity is created due to a configuration change -- the current instance will go through its lifecycle to {@link #onDestroy} and a new instance then created after it.
Call this when your activity is done and should be closed.  The ActivityResult is propagated back to whoever launched you via onActivityResult().
This is called when a child activity of this one calls its {@link #finish} method.  The default implementation simply calls finish() on this activity (the parent), finishing the entire group.
Force finish another activity that you had previously started with {@link #startActivityForResult}.
This is called when a child activity of this one calls its finishActivity().
Create a new PendingIntent object which you can hand to others for them to use to send result data back to your {@link #onActivityResult} callback.  The created object will be either one-shot (becoming invalid after a result is sent back) or multiple (allowing any number of results to be sent through it). associated with the result data when it is returned.  The sender can not modify this value, allowing you to identify incoming results. by the sender. {@link PendingIntent#FLAG_NO_CREATE PendingIntent.FLAG_NO_CREATE}, {@link PendingIntent#FLAG_CANCEL_CURRENT PendingIntent.FLAG_CANCEL_CURRENT}, {@link PendingIntent#FLAG_UPDATE_CURRENT PendingIntent.FLAG_UPDATE_CURRENT}, or any of the flags as supported by {@link Intent#fillIn Intent.fillIn()} to control which unspecified parts of the intent that can be supplied when the actual send happens. parameters.  May return null only if {@link PendingIntent#FLAG_NO_CREATE PendingIntent.FLAG_NO_CREATE} has been supplied.
Change the desired orientation of this activity.  If the activity is currently in the foreground or otherwise impacting the screen orientation, the screen will immediately be changed (possibly causing the activity to be restarted). Otherwise, this will be used the next time the activity is visible. {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
Return the current requested orientation of the activity.  This will either be the orientation requested in its component's manifest, or the last requested orientation given to {@link #setRequestedOrientation(int)}. {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
Return the identifier of the task this activity is in.  This identifier will remain the same for the lifetime of the activity.
Return whether this activity is the root of a task.  The root is the first activity in a task.
Move the task containing this activity to the back of the activity stack.  The activity's order within the task is unchanged.
Returns class name for this activity with the package prefix removed. This is the default name used to read and write settings.
Returns complete component name of this activity.
Retrieve a {@link SharedPreferences} object for accessing preferences that are private to this activity.  This simply calls the underlying {@link #getSharedPreferences(String, int)} method by passing in this activity's class name as the preferences name.
Change the title associated with this activity.  If this is a top-level activity, the title for its window will change.  If it is an embedded activity, the parent can do whatever it wants with it.
Sets the visibility of the progress bar in the title. <p> In order for the progress bar to be shown, the feature must be requested via {@link #requestWindowFeature(int)}.
Sets the visibility of the indeterminate progress bar in the title. <p> In order for the progress bar to be shown, the feature must be requested via {@link #requestWindowFeature(int)}.
Sets whether the horizontal progress bar in the title should be indeterminate (the circular is always indeterminate). <p> In order for the progress bar to be shown, the feature must be requested via {@link #requestWindowFeature(int)}.
Sets the progress for the progress bars in the title. <p> In order for the progress bar to be shown, the feature must be requested via {@link #requestWindowFeature(int)}.
Sets the secondary progress for the progress bar in the title. This progress is drawn between the primary progress (set via {@link #setProgress(int)} and the background. It can be ideal for media scenarios such as showing the buffering progress while the default progress shows the play progress. <p> In order for the progress bar to be shown, the feature must be requested via {@link #requestWindowFeature(int)}.
Suggests an audio stream whose volume should be changed by the hardware volume controls. <p> The suggested audio stream will be tied to the window of this Activity. If the Activity is switched, the stream set here is no longer the suggested stream. The client does not need to save and restore the old suggested stream value in onPause and onResume.
Gets the suggested audio stream whose volume should be changed by the harwdare volume controls.
Runs the specified action on the UI thread. If the current thread is the UI thread, then the action is executed immediately. If the current thread is not the UI thread, the action is posted to the event queue of the UI thread.
Standard implementation of {@link android.view.LayoutInflater.Factory#onCreateView} used when inflating with the LayoutInflater returned by {@link #getSystemService}. This implementation does nothing and is for pre-{@link android.os.Build.VERSION_CODES#HONEYCOMB} apps.  Newer apps should use {@link #onCreateView(View, String, Context, AttributeSet)}.
Standard implementation of {@link android.view.LayoutInflater.Factory2#onCreateView(View, String, Context, AttributeSet)} used when inflating with the LayoutInflater returned by {@link #getSystemService}. This implementation handles <fragment> tags to embed fragments inside of the activity.
Bit indicating that this activity is "immersive" and should not be interrupted by notifications if possible. This value is initially set by the manifest property <code>android:immersive</code> but may be changed at runtime by {@link #setImmersive}.
Adjust the current immersive mode setting. Note that changing this value will have no effect on the activity's {@link android.content.pm.ActivityInfo} structure; that is, if <code>android:immersive</code> is set to <code>true</code> in the application's manifest entry for this activity, the {@link android.content.pm.ActivityInfo#flags ActivityInfo.flags} member will always have its {@link android.content.pm.ActivityInfo#FLAG_IMMERSIVE FLAG_IMMERSIVE} bit set.
Start an action mode.
Give the Activity a chance to control the UI for an action mode requested by the system. <p>Note: If you are looking for a notification callback that an action mode has been started for this activity, see {@link #onActionModeStarted(ActionMode)}.</p>
------------------ Internal API ------------------
Return the approximate per-application memory class of the current device.  This gives you an idea of how hard a memory limit you should impose on your application to let the overall system work best.  The returned value is in megabytes; the baseline Android memory class is 16 (which happens to be the Java heap limit of those devices); some device with more memory may return 24 or even higher numbers.
Return the approximate per-application memory class of the current device when an application is running with a large heap.  This is the space available for memory-intensive applications; most applications should not need this amount of memory, and should instead stay with the {@link #getMemoryClass()} limit.  The returned value is in megabytes. This may be the same size as {@link #getMemoryClass()} on memory constrained devices, or it may be significantly larger on devices with a large amount of available RAM. <p>The is the size of the application's Dalvik heap if it has specified <code>android:largeHeap="true"</code> in its manifest.
Used by persistent processes to determine if they are running on a higher-end device so should be okay using hardware drawing acceleration (which tends to consume a lot more RAM).
Use to decide whether the running device can be considered a "large RAM" device.  Exactly what memory limit large RAM is will vary, but it essentially means there is plenty of RAM to have lots of background processes running under decent loads.
Return a list of the tasks that the user has recently launched, with the most recent being first and older ones after in order. actual number returned may be smaller, depending on how many tasks the user has started and the maximum number the system can remember. of {@link #RECENT_WITH_EXCLUDED} and {@link #RECENT_IGNORE_UNAVAILABLE}. the recent tasks. not hold the {@link android.Manifest.permission#GET_TASKS} permission.
Return a list of the tasks that are currently running, with the most recent being first and older ones after in order.  Note that "running" does not mean any of the task's code is currently loaded or activity -- the task may have been frozen by the system, so that it can be restarted in its previous state when next brought to the foreground. actual number returned may be smaller, depending on how many tasks the user has started. the running tasks. Some thumbnails may not be available at the time of this call. The optional receiver may be used to receive those thumbnails. not hold the {@link android.Manifest.permission#GET_TASKS} permission.
Return a list of the tasks that are currently running, with the most recent being first and older ones after in order.  Note that "running" does not mean any of the task's code is currently loaded or activity -- the task may have been frozen by the system, so that it can be restarted in its previous state when next brought to the foreground. actual number returned may be smaller, depending on how many tasks the user has started. the running tasks. not hold the {@link android.Manifest.permission#GET_TASKS} permission.
Remove some end of a task's activity stack that is not part of the main application.  The selected activities will be finished, so they are no longer part of the main task. to the index of the thumbnail returned by {@link #getTaskThumbnails(int)}.
Completely remove the given task. {@link #REMOVE_TASK_KILL_PROCESS}.
Ask that the task associated with a given task ID be moved to the front of the stack, so it is now visible to the user.  Requires that the caller hold permission {@link android.Manifest.permission#REORDER_TASKS} or a SecurityException will be thrown. {@link RunningTaskInfo} or {@link RecentTaskInfo}. {@link #MOVE_TASK_WITH_HOME}.
Return a list of the services that are currently running. actual number returned may be smaller, depending on how many services are running. the running tasks.
Returns a PendingIntent you can start to show a control panel for the given running service.  If the service does not have a control panel, null is returned.
Returns a list of any processes that are currently in an error condition.  The result will be null if all processes are running properly at this time. current error conditions (it will not return an empty list).  This list ordering is not specified.
Returns a list of application processes installed on external media that are running on the device. This list ordering is not specified.
Returns a list of application processes that are running on the device. running processes (it will not return an empty list).  This list ordering is not specified.
Return information about the memory usage of one or more processes. retrieved. requested pid.
Have the system immediately kill all background processes associated with the given package.  This is the same as the kernel killing those processes to reclaim memory; the system will take care of restarting these processes in the future as needed. <p>You must hold the permission {@link android.Manifest.permission#KILL_BACKGROUND_PROCESSES} to be able to call this method. be killed.
Have the system perform a force stop of everything associated with the given application package.  All processes that share its uid will be killed, all services it has running stopped, all activities removed, etc.  In addition, a {@link Intent#ACTION_PACKAGE_RESTARTED} broadcast will be sent, so that any of its registered alarms can be stopped, notifications removed, etc. <p>You must hold the permission {@link android.Manifest.permission#FORCE_STOP_PACKAGES} to be able to call this method. it allowing them to break other applications by stopping their services, removing their alarms, etc.
Get the device configuration attributes.
Get the preferred density of icons for the launcher. This is used when custom drawables are created (e.g., for shortcuts).
Get the preferred launcher icon size. This is used when custom drawables are created (e.g., for shortcuts).
Returns "true" if the user interface is currently being messed with by a monkey.
Returns "true" if device is running in a test harness.
Returns the launch count of each installed package.
Returns the usage statistics of each installed package.
Cast a Binder object into an activity manager interface, generating a proxy if needed.
Retrieve the system's default/global activity manager.
Convenience for checking whether the system is ready.  For internal use only.
Convenience for sending a sticky broadcast.  For internal use only. If you don't care about permission, use null.
we use token to identify this activity without having to send the activity itself back to the activity manager. (matters more with ipc)
This function exists to make sure all receiver dispatching is correctly ordered, since these are one-way calls and the binder driver applies transaction ordering per object for such calls.
Creates the top level Resources for applications with the given compatibility info. null.
Creates the top level resources for the given package.
if the thread hasn't started yet, we don't have the handler, so just save the messages until we're ready.
Return the Intent that's currently being handled by a BroadcastReceiver on this thread, or null if none.
Instantiate a BackupAgent and tell it that it's alive
Tear down a BackupAgent
Core implementation of stopping an activity.  Note this is a little tricky because the server's meaning of stop is slightly different than our client -- for the server, stop means to save state and give it the result when it is done, but the window may still be visible. For the client, we want to call onStop()/onStart() to indicate when the activity's UI visibillity changes.
package private on purpose
Schedule an alarm.  <b>Note: for timing operations (ticks, timeouts, etc) it is easier and much more efficient to use {@link android.os.Handler}.</b>  If there is already an alarm scheduled for the same IntentSender, it will first be canceled. <p>If the time occurs in the past, the alarm will be triggered immediately.  If there is already an alarm for this Intent scheduled (with the equality of two intents being defined by {@link Intent#filterEquals}), then it will be removed and replaced by this one. <p> The alarm is an intent broadcast that goes to a broadcast receiver that you registered with {@link android.content.Context#registerReceiver} or through the &lt;receiver&gt; tag in an AndroidManifest.xml file. <p> Alarm intents are delivered with a data extra of type int called {@link Intent#EXTRA_ALARM_COUNT Intent.EXTRA_ALARM_COUNT} that indicates how many past alarm events have been accumulated into this intent broadcast.  Recurring alarms that have gone undelivered because the phone was asleep may have a count greater than one when delivered. typically comes from {@link PendingIntent#getBroadcast IntentSender.getBroadcast()}.
Schedule a repeating alarm.  <b>Note: for timing operations (ticks, timeouts, etc) it is easier and much more efficient to use {@link android.os.Handler}.</b>  If there is already an alarm scheduled for the same IntentSender, it will first be canceled. <p>Like {@link #set}, except you can also supply a rate at which the alarm will repeat.  This alarm continues repeating until explicitly removed with {@link #cancel}.  If the time occurs in the past, the alarm will be triggered immediately, with an alarm count depending on how far in the past the trigger time is relative to the repeat interval. <p>If an alarm is delayed (by system sleep, for example, for non _WAKEUP alarm types), a skipped repeat will be delivered as soon as possible.  After that, future alarms will be delivered according to the original schedule; they do not drift over time.  For example, if you have set a recurring alarm for the top of every hour but the phone was asleep from 7:45 until 8:45, an alarm will be sent as soon as the phone awakens, then the next alarm will be sent at 9:00. <p>If your application wants to allow the delivery times to drift in order to guarantee that at least a certain time interval always elapses between alarms, then the approach to take is to use one-time alarms, scheduling the next one yourself when handling each alarm delivery. typically comes from {@link PendingIntent#getBroadcast IntentSender.getBroadcast()}.
Schedule a repeating alarm that has inexact trigger time requirements; for example, an alarm that repeats every hour, but not necessarily at the top of every hour.  These alarms are more power-efficient than the strict recurrences supplied by {@link #setRepeating}, since the system can adjust alarms' phase to cause them to fire simultaneously, avoiding waking the device from sleep more than necessary. <p>Your alarm's first trigger will not be before the requested time, but it might not occur for almost a full interval after that time.  In addition, while the overall period of the repeating alarm will be as requested, the time between any two successive firings of the alarm may vary.  If your application demands very low jitter, use {@link #setRepeating} instead. typically comes from {@link PendingIntent#getBroadcast IntentSender.getBroadcast()}.
Remove any alarms with a matching {@link Intent}. Any alarm, of any type, whose Intent matches this one (as defined by {@link Intent#filterEquals}), will be canceled. IntentSender.
Set the system wall clock time. Requires the permission android.permission.SET_TIME.
Set the system default time zone. Requires the permission android.permission.SET_TIME_ZONE.
Construct an AlertDialog that uses an explicit theme.  The actual style that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as {@link android.R.attr#alertDialogTheme} or one of the constants {@link #THEME_TRADITIONAL}, {@link #THEME_HOLO_DARK}, or {@link #THEME_HOLO_LIGHT}.
Gets one of the buttons used in the dialog. <p> If a button does not exist in the dialog, null will be returned.
Set resId to 0 if you don't want an icon. if you don't want an icon.
Constructor using a context and theme for this builder and the {@link AlertDialog} it creates.  The actual theme that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as {@link android.R.attr#alertDialogTheme} or one of the constants {@link AlertDialog#THEME_TRADITIONAL AlertDialog.THEME_TRADITIONAL}, {@link AlertDialog#THEME_HOLO_DARK AlertDialog.THEME_HOLO_DARK}, or {@link AlertDialog#THEME_HOLO_LIGHT AlertDialog.THEME_HOLO_LIGHT}.
Applications should use this Context for obtaining LayoutInflaters for inflating views that will be used in the resulting dialogs, as it will cause views to be inflated with the correct theme.
Set the resource id of the {@link Drawable} to be used in the title.
Sets the callback that will be called if the dialog is canceled.
Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo
Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener.
Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog.
Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog.
Set a custom view to be the contents of the Dialog, specifying the spacing to appear around that view. If the supplied view is an instance of a {@link ListView} the light background will be used. This is currently hidden because it seems like people should just be able to put padding around the view.
Return the first Application object made in the process. NOTE: Only works on the main thread.
Return the package name of the first .apk loaded into the process. NOTE: Only works on the main thread.
Return the raw interface to the package manager.
Gets the value of an integer core setting.
Create an instance of {@link ApplicationErrorReport} initialized from a parcel.
Return activity in receiverPackage that handles ACTION_APP_ERROR. ACTION_APP_ERROR, or null if not found
Create an instance of CrashInfo initialized from an exception.
Create an instance of CrashInfo initialized from a Parcel.
Save a CrashInfo instance to a parcel.
Dump a CrashInfo instance to a Printer.
Create an instance of AnrInfo initialized from a Parcel.
Save an AnrInfo instance to a parcel.
Dump an AnrInfo instance to a Printer.
Create an instance of BatteryInfo initialized from a Parcel.
Save a BatteryInfo instance to a parcel.
Dump a BatteryInfo instance to a Printer.
Create an instance of RunningServiceInfo initialized from a Parcel.
Save a RunningServiceInfo instance to a parcel.
Dump the report to a Printer.
Cast a Binder object into an application thread interface, generating a proxy if needed.
Main entrypoint; only override if you don't need caching.
Override this to create a new per-Context instance of the service.  getService() will handle locking and caching.
This one's defined separately and given a variable name so it can be re-used by getWallpaperManager(), avoiding a HashMap lookup.
Create a new ApplicationContext from an existing one.  The new one works and operates the same as the one it is copying.
Gets the {@link DatePicker} contained in this dialog.
Sets the current date.
Create a Dialog window that uses the default dialog frame style.
Create a Dialog window that uses a custom dialog style. window. See <a href="{@docRoot}guide/topics/resources/available-resources.html#stylesandthemes">Style and Theme Resources</a> for more information about defining and using styles.  This theme is applied on top of the current theme in <var>context</var>.  If 0, the default dialog theme will be used.
Retrieve the Context this Dialog is running in.
Retrieve the {@link ActionBar} attached to this dialog, if present.
Sets the Activity that owns this dialog. An example use: This Dialog will use the suggested volume control stream of the Activity.
Returns the Activity that owns this Dialog. For example, if {@link Activity#showDialog(int)} is used to show this Dialog, that Activity will be the owner (by default). Depending on how this dialog was created, this may return null.
Start the dialog and display it on screen.  The window is placed in the application layer and opaque.  Note that you should not override this method to do initialization when the dialog is shown, instead implement that in {@link #onStart}.
Hide the dialog, but do not dismiss it.
Dismiss this dialog, removing it from the screen. This method can be invoked safely from any thread.  Note that you should not override this method to do cleanup when the dialog is dismissed, instead implement that in {@link #onStop}.
internal method to make sure mcreated is set properly without requiring users to call through to super in onCreate
Called when the dialog is starting.
Called to tell you that you're stopping.
Saves the state of the dialog into a bundle. The default implementation saves the state of its view hierarchy, so you'll likely want to call through to super if you override this to save additional state.
Restore the state of the dialog from a previously saved bundle. The default implementation restores the state of the dialog's view hierarchy that was saved in the default implementation of {@link #onSaveInstanceState()}, so be sure to call through to super when overriding unless you want to do all restoring of state yourself.
Retrieve the current Window for the activity.  This can be used to directly access parts of the Window API that are not available through Activity/Screen.
Call {@link android.view.Window#getCurrentFocus} on the Window if this Activity to return the currently focused view.
Finds a view that was identified by the id attribute from the XML that was processed in {@link #onStart}.
Set the screen content from a layout resource.  The resource will be inflated, adding all top-level views to the screen.
Set the screen content to an explicit view.  This view is placed directly into the screen's view hierarchy.  It can itself be a complex view hierarhcy.
Add an additional content view to the screen.  Added after any existing ones in the screen -- existing views are NOT removed.
Set the title text for this dialog's window.
Set the title text for this dialog's window. The text is retrieved from the resources with the supplied identifier.
A key was pressed down. <p>If the focused view didn't want this event, this method is called. <p>The default implementation consumed the KEYCODE_BACK to later handle it in {@link #onKeyUp}.
A key was released. <p>The default implementation handles KEYCODE_BACK to close the dialog.
Called when the dialog has detected the user's press of the back key.  The default implementation simply cancels the dialog (only if it is cancelable), but you can override this to do whatever you want.
Called when an key shortcut event is not handled by any of the views in the Dialog. Override this method to implement global key shortcuts for the Dialog. Key shortcuts can also be implemented by setting the {@link MenuItem#setShortcut(char, char) shortcut} property of menu items.
Called when a touch screen event was not handled by any of the views under it. This is most useful to process touch events that happen outside of your window bounds, where there is no view to receive it.
Called when a generic motion event was not handled by any of the views inside of the dialog. <p> Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events.  The {@link MotionEvent#getSource() source} of the motion event specifies the class of input that was received.  Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. </p><p> Generic motion events with source class {@link android.view.InputDevice#SOURCE_CLASS_POINTER} are delivered to the view under the pointer.  All other generic motion events are delivered to the focused view. </p><p> See {@link View#onGenericMotionEvent(MotionEvent)} for an example of how to handle this event. </p> The default implementation always returns false.
It is usually safe to proxy this call to the owner activity's {@link Activity#onCreateOptionsMenu(Menu)} if the client desires the same menu for this Dialog.
It is usually safe to proxy this call to the owner activity's {@link Activity#onPrepareOptionsMenu(Menu)} if the client desires the same menu for this Dialog.
This hook is called when the user signals the desire to start a search.
Request that key events come to this dialog. Use this if your dialog has no views with focus, but the dialog still wants a chance to process key events.
Sets whether this dialog is cancelable with the {@link KeyEvent#KEYCODE_BACK BACK} key.
Sets whether this dialog is canceled when touched outside the window's bounds. If setting to true, the dialog is set to be cancelable if not already set.
Cancel the dialog.  This is essentially the same as calling {@link #dismiss()}, but it will also call your {@link DialogInterface.OnCancelListener} (if registered).
Set a listener to be invoked when the dialog is canceled. <p> This will only be invoked when the dialog is canceled, if the creator needs to know when it is dismissed in general, use {@link #setOnDismissListener}.
Set a message to be sent when the dialog is canceled.
Set a listener to be invoked when the dialog is dismissed.
Sets a listener to be invoked when the dialog is shown.
Set a message to be sent when the dialog is dismissed.
By default, this will use the owner Activity's suggested stream type.
Version of {@link #dismiss()} that uses {@link FragmentTransaction#commitAllowingStateLoss() FragmentTransaction.commitAllowingStateLoss()}.  See linked documentation for further details.
Override to build your own custom Dialog container.  This is typically used to show an AlertDialog instead of a generic Dialog; when doing so, {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)} does not need to be implemented since the AlertDialog takes care of its own content. <p>This method will be called after {@link #onCreate(Bundle)} and before {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}.  The default implementation simply instantiates and returns a {@link Dialog} class. <p><em>Note: DialogFragment own the {@link Dialog#setOnCancelListener Dialog.setOnCancelListener} and {@link Dialog#setOnDismissListener Dialog.setOnDismissListener} callbacks.  You must not set them yourself.</em> To find out about these events, override {@link #onCancel(DialogInterface)} and {@link #onDismiss(DialogInterface)}.</p> or null if this is a freshly created Fragment.
Set the local destination for the downloaded file. Must be a file URI to a path on external storage, and the calling application must have the WRITE_EXTERNAL_STORAGE permission. <p> The downloaded file is not scanned by MediaScanner. But it can be made scannable by calling {@link #allowScanningByMediaScanner()}. <p> By default, downloads are saved to a generated filename in the shared download cache and may be deleted by the system at any time to reclaim space.
Set the local destination for the downloaded file to the system cache dir (/cache). This is only available to System apps with the permission {@link android.Manifest.permission#ACCESS_CACHE_FILESYSTEM}. <p> The downloaded file is not scanned by MediaScanner. But it can be made scannable by calling {@link #allowScanningByMediaScanner()}. <p> Files downloaded to /cache may be deleted by the system at any time to reclaim space.
Set the local destination for the downloaded file to a path within the application's external files directory (as returned by {@link Context#getExternalFilesDir(String)}. <p> The downloaded file is not scanned by MediaScanner. But it can be made scannable by calling {@link #allowScanningByMediaScanner()}.
Set the local destination for the downloaded file to a path within the public external storage directory (as returned by {@link Environment#getExternalStoragePublicDirectory(String)}. The downloaded file is not scanned by MediaScanner. But it can be made scannable by calling {@link #allowScanningByMediaScanner()}.
If the file to be downloaded is to be scanned by MediaScanner, this method should be called before {@link DownloadManager#enqueue(Request)} is called.
Add an HTTP header to be included with the download request.  The header will be added to the end of the list.
Set the title of this download, to be displayed in notifications (if enabled).  If no title is given, a default one will be assigned based on the download filename, once the download starts.
Set a description of this download, to be displayed in notifications (if enabled)
Set the MIME content type of this download.  This will override the content type declared in the server's response.
Control whether a system notification is posted by the download manager while this download is running or when it is completed. If enabled, the download manager posts notifications about downloads through the system {@link android.app.NotificationManager}. By default, a notification is shown only when the download is in progress. It can take the following values: {@link #VISIBILITY_HIDDEN}, {@link #VISIBILITY_VISIBLE}, {@link #VISIBILITY_VISIBLE_NOTIFY_COMPLETED}. If set to {@link #VISIBILITY_HIDDEN}, this requires the permission android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.
Restrict the types of networks over which this download may proceed.  By default, all network types are allowed.
Set whether this download may proceed over a roaming connection.  By default, roaming is allowed.
Set whether this download should be displayed in the system's Downloads UI. True by default.
Include only the downloads with the given IDs.
Include only downloads with status matching any the given status flags.
Controls whether this query includes downloads not visible in the system's Downloads UI.
Change the sort order of the returned Cursor.
Run this query using the given ContentResolver.
Makes this object access the download provider through /all_downloads URIs rather than /my_downloads URIs, for clients that have permission to do so.
Enqueue a new download.  The download will start automatically once the download manager is ready to execute it and connectivity is available. calls related to this download.
Marks the specified download as 'to be deleted'. This is done when a completed download is to be removed but the row was stored without enough info to delete the corresponding metadata from Mediaprovider database. Actual cleanup of this row is done in DownloadService.
Cancel downloads and remove them from the download manager.  Each download will be stopped if it was running, and it will no longer be accessible through the download manager. If there is a downloaded file, partial or complete, it is deleted.
Query the download manager about downloads that have been requested. COLUMN_* constants.
Open a downloaded file for reading.  The download must have completed.
Returns {@link Uri} for the given downloaded file id, if the file is downloaded successfully. otherwise, null is returned. If the specified downloaded file is in external storage (for example, /sdcard dir), then it is assumed to be safe for anyone to read and the returned {@link Uri} corresponds to the filepath on sdcard. otherwise.
Returns {@link Uri} for the given downloaded file id, if the file is downloaded successfully. otherwise, null is returned. If the specified downloaded file is in external storage (for example, /sdcard dir), then it is assumed to be safe for anyone to read and the returned {@link Uri} corresponds to the filepath on sdcard. otherwise.
Restart the given downloads, which must have already completed (successfully or not).  This method will only work when called from within the download manager's process.
Returns maximum size, in bytes, of downloads that may go over a mobile connection; or null if there's no limit there's no limit
Returns recommended maximum size, in bytes, of downloads that may go over a mobile connection; or null if there's no recommended limit.  The user will have the option to bypass this limit. connection; or null if there's no recommended limit.
Adds a file to the downloads database system, so it could appear in Downloads App (and thus become eligible for management by the Downloads App). <p> It is helpful to make the file scannable by MediaScanner by setting the param isMediaScannerScannable to true. It makes the file visible in media managing applications such as Gallery App, which could be a useful purpose of using this API. scanned by MediaScanner appear in the applications used to view media (for example, Gallery app). be managed by the Downloads App and any other app that is used to read it (for example, Gallery app to display the file, if the file contents represent a video/image). This ID is used to make future calls related to this download.
Get the DownloadProvider URI for the download with the given ID.
Get a parameterized SQL WHERE clause to select a bunch of IDs.
Get the selection args for a clause returned by {@link #getWhereClauseForIds(long[])}.
Override this for receiving callbacks when a child has been clicked. <p> {@inheritDoc}
Provide the adapter for the expandable list.
Get the activity's expandable list view widget.  This can be used to get the selection, set the selection, and many other useful functions.
Get the ExpandableListAdapter associated with this activity's ExpandableListView.
Gets the ID of the currently selected group or child.
Gets the position (in packed position representation) of the currently selected group or child. Use {@link ExpandableListView#getPackedPositionType}, {@link ExpandableListView#getPackedPositionGroup}, and {@link ExpandableListView#getPackedPositionChild} to unpack the returned packed position.
Sets the selection to the specified child. If the child is in a collapsed group, the group will only be expanded and child subsequently selected if shouldExpandGroup is set to true, otherwise the method will return false.
Sets the selection to the specified group.
Return the Activity this fragment is currently associated with.
Return the FragmentManager for interacting with fragments associated with this fragment's activity.  Note that this will be non-null slightly before {@link #getActivity()}, during the time from when the fragment is placed in a {@link FragmentTransaction} until it is committed and attached to its activity.
Call {@link Activity#startActivity(Intent)} on the fragment's containing Activity.
Call {@link Activity#startActivityForResult(Intent, int)} on the fragment's containing Activity.
Called when a fragment is first attached to its activity. {@link #onCreate(Bundle)} will be called after this.
Called when a fragment loads an animation.
Called to have the fragment instantiate its user interface view. This is optional, and non-graphical fragments can return null (which is the default implementation).  This will be called between {@link #onCreate(Bundle)} and {@link #onActivityCreated(Bundle)}. <p>If you return a View from here, you will later be called in {@link #onDestroyView} when the view is being released. any views in the fragment, UI should be attached to.  The fragment should not add the view itself, but this can be used to generate the LayoutParams of the view. from a previous saved state as given here.
Get the root view for the fragment's layout (the one returned by {@link #onCreateView}), if provided.
Called when the fragment's activity has been created and this fragment's view hierarchy instantiated.  It can be used to do final initialization once these pieces are in place, such as retrieving views or restoring state.  It is also useful for fragments that use {@link #setRetainInstance(boolean)} to retain their instance, as this callback tells the fragment when it is fully associated with the new activity instance.  This is called after {@link #onCreateView} and before {@link #onStart()}. a previous saved state, this is the state.
Called when a context menu for the {@code view} is about to be shown. Unlike {@link #onCreateOptionsMenu}, this will be called every time the context menu is about to be shown and should be populated for the view (or item inside the view for {@link AdapterView} subclasses, this can be found in the {@code menuInfo})). <p> Use {@link #onContextItemSelected(android.view.MenuItem)} to know when an item has been selected. <p> The default implementation calls up to {@link Activity#onCreateContextMenu Activity.onCreateContextMenu}, though you can not call this implementation if you don't want that behavior. <p> It is not safe to hold onto the context menu after this method returns. {@inheritDoc}
Attach the bread crumbs to their activity.  This must be called once when creating the bread crumbs.
The maximum number of breadcrumbs to show. Older fragment headers will be hidden from view.
Inserts an optional parent entry at the first position in the breadcrumbs. Selecting this entry will result in a call to the specified listener's {@link android.view.View.OnClickListener#onClick(View)} method. A null will result in no action being taken when the parent entry is clicked.
Sets a listener for clicks on the bread crumbs.  This will be called before the default click action is performed.
Set a custom title for the bread crumbs.  This will be the first entry shown at the left, representing the root of the bread crumbs.  If the title is null, it will not be shown.
Returns the number of entries before the backstack, including the title of the current fragment and any custom parent title that was set.
Returns the pre-entry corresponding to the index. If there is a parent and a top entry set, parent has an index of zero and top entry has an index of 1. Returns null if the specified index doesn't exist or is null.
Cast an IBinder object into an android.app.IActivityController interface, generating a proxy if needed.
The system is trying to start an activity.  Return true to allow it to be started as normal, or false to cancel/reject this activity.
The system is trying to return to an activity.  Return true to allow it to be resumed as normal, or false to cancel/reject this activity.
An application process has crashed (in Java).  Return true for the normal error recovery (app crash dialog) to occur, false to kill it immediately.
Early call as soon as an ANR is detected.
An application process is not responding.  Return 0 to show the "app not responding" dialog, 1 to continue waiting, or -1 to kill it immediately.
Cast an IBinder object into an android.app.IActivityPendingResult interface, generating a proxy if needed.
Cast an IBinder object into an android.app.IActivityWatcher interface, generating a proxy if needed.
Cast an IBinder object into an android.app.IAlarmManager interface, generating a proxy if needed.
Cast an IBinder object into an android.app.IBackupAgent interface, generating a proxy if needed.
Request that the app perform an incremental backup.
Restore an entire data snapshot to the application.
Perform a "full" backup to the given file descriptor.  The output file is presumed to be a socket or other non-seekable, write-only data sink.  When this method is called, the app should write all of its files to the output.
Restore a single "file" to the application.  The file was typically obtained from a full-backup dataset.  The agent reads 'size' bytes of file content from the provided file descriptor.
Cast an IBinder object into an android.app.IInstrumentationWatcher interface, generating a proxy if needed.
Cast an IBinder object into an android.app.INotificationManager interface, generating a proxy if needed.
Create and start a new thread in which to run instrumentation.  This new thread will call to {@link #onStart} where you can implement the instrumentation.
This is called whenever the system captures an unhandled exception that was thrown by the application.  The default implementation simply returns false, allowing normal system handling of the exception to take place.
Provide a status report about the application.
Terminate instrumentation of the application.  This will cause the application process to exit, removing this instrumentation from the next time the application is started.
Return the Context of this instrumentation's package.  Note that this is often different than the Context of the application being instrumentated, since the instrumentation code often lives is a different package than that of the application it is running against. See {@link #getTargetContext} to retrieve a Context for the target application.
Returns complete component name of this instrumentation.
Return a Context for the target application being instrumented.  Note that this is often different than the Context of the instrumentation code, since the instrumentation code often lives is a different package than that of the application it is running against. See {@link #getContext} to retrieve a Context for the instrumentation code.
Check whether this instrumentation was started with profiling enabled.
This method will start profiling if isProfiling() returns true. You should only call this method if you set the handleProfiling attribute in the manifest file for this Instrumentation to true.
Stops profiling if isProfiling() returns true.
Force the global system in or out of touch mode.  This can be used if your instrumentation relies on the UI being in one more or the other when it starts. focus mode.
Schedule a callback for when the application's main thread goes idle (has no more events to process).
Synchronously wait for the application to be idle.  Can not be called from the main application thread -- use {@link #start} to execute instrumentation in its own thread.
Execute a call on the application's main thread, blocking until it is complete.  Useful for doing things that are not thread-safe, such as looking at or modifying the view hierarchy.
Start a new activity and wait for it to begin running before returning. In addition to being synchronous, this method as some semantic differences from the standard {@link Context#startActivity} call: the activity component is resolved before talking with the activity manager (its class name is specified in the Intent that this method ultimately starts), and it does not allow you to start activities that run in a different process.  In addition, if the given Intent resolves to multiple activities, instead of displaying a dialog for the user to select an activity, an exception will be thrown. <p>The function returns as soon as the activity goes idle following the call to its {@link Activity#onCreate}.  Generally this means it has gone through the full initialization including {@link Activity#onResume} and drawn and displayed its initial window.
Create a new ActivityMonitor that looks for a particular kind of intent to be started.
Create a new ActivityMonitor that looks for a specific activity class to be started.
Retrieve the filter associated with this ActivityMonitor.
Retrieve the result associated with this ActivityMonitor, or null if none.
Check whether this monitor blocks activity starts (not allowing the actual activity to run) or allows them to execute normally.
Retrieve the number of times the monitor has been hit so far.
Retrieve the most recent activity class that was seen by this monitor.
Block until an Activity is created that matches this monitor, returning the resulting activity.
Block until an Activity is created that matches this monitor, returning the resulting activity or till the timeOut period expires. If the timeOut expires before the activity is started, return null.
Add a new {@link ActivityMonitor} that will be checked whenever an activity is started.  The monitor is added after any existing ones; the monitor will be hit only if none of the existing monitors can themselves handle the Intent.
A convenience wrapper for {@link #addMonitor(ActivityMonitor)} that creates an intent filter matching {@link ActivityMonitor} for you and returns it.
A convenience wrapper for {@link #addMonitor(ActivityMonitor)} that creates a class matching {@link ActivityMonitor} for you and returns it.
Test whether an existing {@link ActivityMonitor} has been hit.  If the monitor has been hit at least <var>minHits</var> times, then it will be removed from the activity monitor list and true returned.  Otherwise it is left as-is and false is returned.
Wait for an existing {@link ActivityMonitor} to be hit.  Once the monitor has been hit, it is removed from the activity monitor list and the first created Activity object that matched it is returned.
Wait for an existing {@link ActivityMonitor} to be hit till the timeout expires.  Once the monitor has been hit, it is removed from the activity monitor list and the first created Activity object that matched it is returned.  If the timeout expires, a null object is returned.
Remove an {@link ActivityMonitor} that was previously added with {@link #addMonitor}.
Execute a particular menu item.
Show the context menu for the currently focused view and executes a particular context menu item.
Sends the key events corresponding to the text to the app being instrumented.
Send a key event to the currently focused window/view and wait for it to be processed.  Finished at some point after the recipient has returned from its event processing, though it may <em>not</em> have completely finished reacting from the event -- for example, if it needs to update its display as a result, it may still be in the process of doing that.
Sends an up and down key event sync to the currently focused window.
Higher-level method for sending both the down and up key events for a particular character key code.  Equivalent to creating both KeyEvent objects by hand and calling {@link #sendKeySync}.  The event appears as if it came from keyboard 0, the built in one.
Dispatch a pointer event. Finished at some point after the recipient has returned from its event processing, though it may <em>not</em> have completely finished reacting from the event -- for example, if it needs to update its display as a result, it may still be in the process of doing that. {@link MotionEvent#obtain(long, long, int, float, float, int)}, be sure to use {@link SystemClock#uptimeMillis()} as the timebase.
Dispatch a trackball event. Finished at some point after the recipient has returned from its event processing, though it may <em>not</em> have completely finished reacting from the event -- for example, if it needs to update its display as a result, it may still be in the process of doing that. {@link MotionEvent#obtain(long, long, int, float, float, int)}, be sure to use {@link SystemClock#uptimeMillis()} as the timebase.
Perform instantiation of the process's {@link Application} object.  The default implementation provides the normal system behavior.
Perform calling of the application's {@link Application#onCreate} method.  The default implementation simply calls through to that method.
Perform instantiation of an {@link Activity} object.  This method is intended for use with unit tests, such as android.test.ActivityUnitTestCase.  The activity will be useable locally but will be missing some of the linkages necessary for use within the sytem. available via {@link Activity#getLastNonConfigurationInstance() Activity.getLastNonConfigurationInstance()}.
Perform instantiation of the process's {@link Activity} object.  The default implementation provides the normal system behavior.
Perform calling of an activity's {@link Activity#onCreate} method.  The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onRestoreInstanceState} method.  The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onPostCreate} method. The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onNewIntent} method.  The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onStart} method.  The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onRestart} method.  The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onResume} method.  The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onStop} method.  The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onPause} method.  The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onPause} method.  The default implementation simply calls through to that method.
Perform calling of an activity's {@link Activity#onUserLeaveHint} method. The default implementation simply calls through to that method.
Starts allocation counting. This triggers a gc and resets the counts.
Stops allocation counting.
If Results already contains Key, it appends Value to the key's ArrayList associated with the key. If the key doesn't already exist in results, it adds the key/value pair to results.
Returns a bundle with the current results from the allocation counting.
Returns a bundle with the counts for various binder counts for this process. Currently the only two that are reported are the number of send and the number of received transactions.
Create a new activity result.  See {@link Activity#setResult} for more information. originating activity, often RESULT_CANCELED or RESULT_OK activity.
Retrieve the result code contained in this result.
Retrieve the data contained in this result.
Execute a startActivity call made by the application.  The default implementation takes care of updating any active {@link ActivityMonitor} objects and dispatches this call to the system activity manager; you can override this to watch for the application to start an activity, and modify what happens when it does. <p>This method returns an {@link ActivityResult} object, which you can use when intercepting application calls to avoid performing the start activity action but still return the result the application is expecting.  To do this, override this method to catch the call to start activity so that it returns a new ActivityResult containing the results you would like the application to see, and don't call up to the super class.  Note that an application is only expecting a result if <var>requestCode</var> is &gt;= 0. <p>This method throws {@link android.content.ActivityNotFoundException} if there was no Activity found to run the given Intent. {@hide}
Like {@link #execStartActivity(Context, IBinder, IBinder, Activity, Intent, int)}, but accepts an array of activities to be started.  Note that active {@link ActivityMonitor} objects only match against the first activity in the array. {@hide}
Like {@link #execStartActivity(Context, IBinder, IBinder, Activity, Intent, int)}, but for calls from a {#link Fragment}. {@hide}
Creates an IntentService.  Invoked by your subclass's constructor.
Sets intent redelivery preferences.  Usually called from the constructor with your preferred semantics. <p>If enabled is true, {@link #onStartCommand(Intent, int, int)} will return {@link Service#START_REDELIVER_INTENT}, so if this process dies before {@link #onHandleIntent(Intent)} returns, the process will be restarted and the intent redelivered.  If multiple Intents have been sent, only the most recent one is guaranteed to be redelivered. <p>If enabled is false (the default), {@link #onStartCommand(Intent, int, int)} will return {@link Service#START_NOT_STICKY}, and if the process dies, the Intent dies along with it.
Cast an IBinder object into an android.app.IProcessObserver interface, generating a proxy if needed.
Cast an IBinder object into an android.app.ISearchManager interface, generating a proxy if needed.
Cast an IBinder object into an android.app.ISearchManagerCallback interface, generating a proxy if needed.
Cast an IBinder object into an android.app.IServiceConnection interface, generating a proxy if needed.
Cast an IBinder object into an android.app.IThumbnailReceiver interface, generating a proxy if needed.
Cast an IBinder object into an android.app.IThumbnailRetriever interface, generating a proxy if needed.
Cast an IBinder object into an android.app.ITransientNotification interface, generating a proxy if needed.
Cast an IBinder object into an android.app.IUiModeManager interface, generating a proxy if needed.
Enables the car mode. Only the system can do this.
Disables the car mode.
Return the current running mode.
Sets the night mode. The mode can be one of: 1 - notnight mode 2 - night mode 3 - automatic mode switching
Gets the currently configured night mode.  Return 1 for notnight, 2 for night, and 3 for automatic mode switching.
Cast an IBinder object into an android.app.IWallpaperManager interface, generating a proxy if needed.
Set the wallpaper.
Set the live wallpaper.
Get the wallpaper.
Get information about a live wallpaper.
Clear the wallpaper.
Sets the dimension hint for the wallpaper. These hints indicate the desired minimum width and height for the wallpaper.
Returns the desired minimum width for the wallpaper.
Returns the desired minimum height for the wallpaper.
Cast an IBinder object into an android.app.IWallpaperManagerCallback interface, generating a proxy if needed.
Called when the wallpaper has changed
Disable the keyguard from showing.  If the keyguard is currently showing, hide it.  The keyguard will be prevented from showing again until {@link #reenableKeyguard()} is called. A good place to call this is from {@link android.app.Activity#onResume()} Note: This call has no effect while any {@link android.app.admin.DevicePolicyManager} is enabled that requires a password.
Reenable the keyguard.  The keyguard will reappear if the previous call to {@link #disableKeyguard()} caused it it to be hidden. A good place to call this is from {@link android.app.Activity#onPause()} Note: This call has no effect while any {@link android.app.admin.DevicePolicyManager} is enabled that requires a password.
isKeyguardLocked Return whether the keyguard is currently locked.
isKeyguardSecure Return whether the keyguard requires a password to unlock.
If keyguard screen is showing or in restricted key input mode (i.e. in keyguard password emergency screen). When in such mode, certain keys, such as the Home key and the right soft keys, don't work.
Returns a Drawable representing the thumbnail of the specified Drawable. The size of the thumbnail is defined by the dimension android.R.dimen.launcher_application_icon_size. This method is not thread-safe and should be invoked on the UI thread only.
Override to call setContentView() with your own content view to customize the list layout.
Return the actual Intent for a specific position in our {@link android.widget.ListView}.
Return the {@link ListItem} for a specific position in our {@link android.widget.ListView}.
Get the base intent to use when running {@link PackageManager#queryIntentActivities(Intent, int)}.
Perform query on package manager for list items.  The default implementation queries for activities.
Perform the query to determine which results to show and return a list of them.
Whether or not to show icons in the list
Create information about a new .apk NOTE: This constructor is called with ActivityThread's lock held, so MUST NOT call back out to the activity manager.
Gets the array of shared libraries that are listed as used by the given package. file name) a fully-qualified path
Combines two arrays (of library names) such that they are concatenated in order but are devoid of duplicates. The result is a single string with the names of the libraries separated by colons, or <code>null</code> if both lists were <code>null</code> or empty.
Setup value for Thread.getContextClassLoader(). If the package will not run in in a VM with other packages, we set the Java context ClassLoader to the PackageInfo.getClassLoader value. However, if this VM can contain multiple packages, we intead set the Java context ClassLoader to a proxy that will warn about the use of Java context ClassLoaders and then fall through to use the system ClassLoader. <p> Note that this is similar to but not the same as the android.content.Context.getClassLoader(). While both context class loaders are typically set to the PathClassLoader used to load the package archive in the single application per VM case, a single Android process may contain several Contexts executing on one thread with their own logical ClassLoaders while the Java context ClassLoader is a thread local. This is why in the case when we have multiple packages per VM we do not set the Java context ClassLoader to an arbitrary but instead warn the user to set their own if we detect that they are using a Java library that expects it to be set.
Create a new LocalActivityManager for holding activities running within the given <var>parent</var>. of one activity resumed
Start a new activity running in the group.  Every activity you start must have a unique string ID associated with it -- this is used to keep track of the activity, so that if you later call startActivity() again on it the same activity object will be retained. <p>When there had previously been an activity started under this id, it may either be destroyed and a new one started, or the current one re-used, based on these conditions, in order:</p> <ul> <li> If the Intent maps to a different activity component than is currently running, the current activity is finished and a new one started. <li> If the current activity uses a non-multiple launch mode (such as singleTop), or the Intent has the {@link Intent#FLAG_ACTIVITY_SINGLE_TOP} flag set, then the current activity will remain running and its {@link Activity#onNewIntent(Intent) Activity.onNewIntent()} method called. <li> If the new Intent is the same (excluding extras) as the previous one, and the new Intent does not have the {@link Intent#FLAG_ACTIVITY_CLEAR_TOP} set, then the current activity will remain running as-is. <li> Otherwise, the current activity will be finished and a new one started. </ul> <p>If the given Intent can not be resolved to an available Activity, this method throws {@link android.content.ActivityNotFoundException}. <p>Warning: There is an issue where, if the Intent does not include an explicit component, we can restore the state for a different activity class than was previously running when the state was saved (if the set of available activities changes between those points). care of adding this window to a view hierarchy, and likewise dealing with removing the old window if the activity has changed.
Destroy the activity associated with a particular id.  This activity will go through the normal lifecycle events and fine onDestroy(), and then the id removed from the group. all state are removed from the group. null if there was none.
Retrieve the Activity that is currently running.
Retrieve the ID of the activity that is currently running.
Return the Activity object associated with a string ID.
Restore a state that was previously returned by {@link #saveInstanceState}.  This adds to the activity group information about all activity IDs that had previously been saved, even if they have not been started yet, so if the user later navigates to them the correct state will be restored. <p>Note: This does <b>not</b> change the current running activity, or start whatever activity was previously running when the state was saved. That is up to the client to do, in whatever way it thinks is best.
Retrieve the state of all activities known by the group.  For activities that have previously run and are now stopped or finished, the last saved state is used.  For the current running activity, its {@link Activity#onSaveInstanceState} is called to retrieve its current state.
Called by the container activity in its {@link Activity#onResume} so that LocalActivityManager can perform the corresponding action on the activities it holds.
Called by the container activity in its {@link Activity#onPause} so that LocalActivityManager can perform the corresponding action on the activities it holds.
Called by the container activity in its {@link Activity#onStop} so that LocalActivityManager can perform the corresponding action on the activities it holds.
Call onRetainNonConfigurationInstance on each child activity and store the results in a HashMap by id.  Only construct the HashMap if there is a non-null object to store.  Note that this does not support nested ActivityGroups. {@hide}
Remove all activities from this LocalActivityManager, performing an {@link Activity#onDestroy} on any that are currently instantiated.
Called by the container activity in its {@link Activity#onDestroy} so that LocalActivityManager can perform the corresponding action on the activities it holds.
Constructs a Notification object with everything set to 0. You might want to consider using {@link Builder} instead.
Unflatten the notification from a parcel.
Flatten this notification from a parcel.
Constructor. Automatically sets the when field to {@link System#currentTimeMillis() System.currentTimeMllis()} and the audio stream to the {@link #STREAM_DEFAULT}.
Set the progress this notification represents, which may be represented as a {@link ProgressBar}.
Supply a {@link PendingIntent} to send when the notification is clicked. If you do not supply an intent, you can now add PendingIntents to individual views to be launched when clicked by calling {@link RemoteViews#setOnClickPendingIntent RemoteViews.setOnClickPendingIntent(int,PendingIntent)}.
An intent to launch instead of posting the notification to the status bar. Only for use with extremely high-priority notifications demanding the user's <strong>immediate</strong> attention, such as an incoming phone call or alarm clock that the user has explicitly set to a particular time. If this facility is used for something else, please give the user an option to turn it off and use a normal notification, as this can be extremely disruptive.
Set the sound to play.  It will play on the default stream.
Set the sound to play.  It will play on the stream you supply.
Set the vibration pattern to use. parameter.
Set the default notification options that will be used. <p> The value should be one or more of the following fields combined with bitwise-or: {@link #DEFAULT_SOUND}, {@link #DEFAULT_VIBRATE}, {@link #DEFAULT_LIGHTS}. <p> For all default values, use {@link #DEFAULT_ALL}.
Combine all of the options that have been set and return a new {@link Notification} object.
Post a notification to be shown in the status bar. If a notification with the same id has already been posted by your application and has not yet been canceled, it will be replaced by the updated information.
Post a notification to be shown in the status bar. If a notification with the same tag and id has already been posted by your application and has not yet been canceled, it will be replaced by the updated information.
Cancel a previously shown notification.  If it's transient, the view will be hidden.  If it's persistent, it will be removed from the status bar.
Cancel all previously shown notifications. See {@link #cancel} for the detailed behavior.
Retrieve a PendingIntent that will start a new activity, like calling {@link Context#startActivity(Intent) Context.startActivity(Intent)}. Note that the activity will be started outside of the context of an existing activity, so you must use the {@link Intent#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK} launch flag in the Intent. the activity. not used). {@link #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags as supported by {@link Intent#fillIn Intent.fillIn()} to control which unspecified parts of the intent that can be supplied when the actual send happens. parameters.  May return null only if {@link #FLAG_NO_CREATE} has been supplied.
Like {@link #getActivity(Context, int, Intent, int)}, but allows an array of Intents to be supplied.  The first Intent in the array is taken as the primary key for the PendingIntent, like the single Intent given to {@link #getActivity(Context, int, Intent, int)}.  Upon sending the resulting PendingIntent, all of the Intents are started in the same way as they would be by passing them to {@link Context#startActivities(Intent[])}. <p class="note"> The <em>first</em> intent in the array will be started outside of the context of an existing activity, so you must use the {@link Intent#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK} launch flag in the Intent.  (Activities after the first in the array are started in the context of the previous activity in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.) </p> <p class="note"> The <em>last</em> intent in the array represents the key for the PendingIntent.  In other words, it is the significant element for matching (as done with the single intent given to {@link #getActivity(Context, int, Intent, int)}, its content will be the subject of replacement by {@link #send(Context, int, Intent)} and {@link #FLAG_UPDATE_CURRENT}, etc. This is because it is the most specific of the supplied intents, and the UI the user actually sees when the intents are started. </p> the activity. not used). {@link #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags as supported by {@link Intent#fillIn Intent.fillIn()} to control which unspecified parts of the intent that can be supplied when the actual send happens. parameters.  May return null only if {@link #FLAG_NO_CREATE} has been supplied.
Retrieve a PendingIntent that will perform a broadcast, like calling {@link Context#sendBroadcast(Intent) Context.sendBroadcast()}. the broadcast. not used). {@link #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags as supported by {@link Intent#fillIn Intent.fillIn()} to control which unspecified parts of the intent that can be supplied when the actual send happens. parameters.  May return null only if {@link #FLAG_NO_CREATE} has been supplied.
Retrieve a PendingIntent that will start a service, like calling {@link Context#startService Context.startService()}.  The start arguments given to the service will come from the extras of the Intent. the service. not used). {@link #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags as supported by {@link Intent#fillIn Intent.fillIn()} to control which unspecified parts of the intent that can be supplied when the actual send happens. parameters.  May return null only if {@link #FLAG_NO_CREATE} has been supplied.
Retrieve a IntentSender object that wraps the existing sender of the PendingIntent
Cancel a currently active PendingIntent.  Only the original application owning an PendingIntent can cancel it.
Perform the operation associated with this PendingIntent. is no longer allowing more intents to be sent through it.
Perform the operation associated with this PendingIntent, allowing the caller to specify information about the Intent to use. Intent.fillIn()} for information on how this is applied to the original Intent. is no longer allowing more intents to be sent through it.
Perform the operation associated with this PendingIntent, allowing the caller to be notified when the send has completed. completed, or null for no callback. should happen.  If null, the callback will happen from the thread pool of the process. is no longer allowing more intents to be sent through it.
Perform the operation associated with this PendingIntent, allowing the caller to specify information about the Intent to use and be notified when the send has completed. <p>For the intent parameter, a PendingIntent often has restrictions on which fields can be supplied here, based on how the PendingIntent was retrieved in {@link #getActivity}, {@link #getBroadcast}, or {@link #getService}. <var>intent</var> is also null. Intent.fillIn()} for information on how this is applied to the original Intent.  Use null to not modify the original Intent. completed, or null for no callback. should happen.  If null, the callback will happen from the thread pool of the process. is no longer allowing more intents to be sent through it.
Perform the operation associated with this PendingIntent, allowing the caller to specify information about the Intent to use and be notified when the send has completed. <p>For the intent parameter, a PendingIntent often has restrictions on which fields can be supplied here, based on how the PendingIntent was retrieved in {@link #getActivity}, {@link #getBroadcast}, or {@link #getService}. <var>intent</var> is also null. Intent.fillIn()} for information on how this is applied to the original Intent.  Use null to not modify the original Intent. completed, or null for no callback. should happen.  If null, the callback will happen from the thread pool of the process. is required to hold.  This is only valid for broadcast intents, and corresponds to the permission argument in {@link Context#sendBroadcast(Intent, String) Context.sendOrderedBroadcast(Intent, String)}. If null, no permission is required. is no longer allowing more intents to be sent through it.
Return the package name of the application that created this PendingIntent, that is the identity under which you will actually be sending the Intent.  The returned string is supplied by the system, so that an application can not spoof its package. none associated with it.
Check to verify that this PendingIntent targets a specific package.
Convenience function for writing either a PendingIntent or null pointer to a Parcel.  You must use this with {@link #readPendingIntentOrNullFromParcel} for later reading it.
Convenience function for reading either a Messenger or null pointer from a Parcel.  You must have previously written the Messenger with {@link #writePendingIntentOrNullToParcel}. been written.
Change the format of the small text showing current and maximum units of progress.  The default is "%1d/%2d". Should not be called during the number is progressing. use "%1d" for the current number and "%2d" for the maximum.  If null, nothing will be shown.
Change the format of the small text showing the percentage of progress. The default is {@link NumberFormat#getPercentInstance() NumberFormat.getPercentageInstnace().} Should not be called during the number is progressing. percentage text.  If null, nothing will be shown.
Returns a single-thread Executor shared by the entire process, creating it if necessary.
Add a runnable to finish (or wait for) a deferred operation started in this context earlier.  Typically finished by e.g. an Activity#onPause.  Used by SharedPreferences$Editor#startCommit(). Note that this doesn't actually start it running.  This is just a scratch set for callers doing async work to keep updated with what's in-flight.  In the common case, caller code (e.g. SharedPreferences) will pretty quickly call remove() after an add().  The only time these Runnables are run is from waitToFinish(), below.
Finishes or waits for async operations to complete. (e.g. SharedPreferences$Editor#startCommit writes) Is called from the Activity base class's onPause(), after BroadcastReceiver's onReceive, after Service command handling, etc.  (so async work is never lost)
Returns true if there is pending work to be done.  Note that the result is out of data as soon as you receive it, so be careful how you use it.
Gets the search suggestion content provider authority.
Gets the name of the package where the suggestion provider lives, or {@code null}.
Gets the component name of the searchable activity.
Checks whether the badge should be a text label.
Checks whether the badge should be an icon.
Checks whether the text in the query field should come from the suggestion intent data.
Checks whether the text in the query field should come from the suggestion title.
Gets the resource id of the description string to use for this source in system search settings, or {@code 0} if none has been specified.
Gets the content provider path for obtaining search suggestions.
Gets the selection for obtaining search suggestions.
Gets the optional intent action for use with these suggestions. This is useful if all intents will have the same action (e.g. {@link android.content.Intent#ACTION_VIEW}) This can be overriden in any given suggestion using the column {@link SearchManager#SUGGEST_COLUMN_INTENT_ACTION}.
Gets the optional intent data for use with these suggestions.  This is useful if all intents will have similar data URIs, but you'll likely need to provide a specific ID as well via the column {@link SearchManager#SUGGEST_COLUMN_INTENT_DATA_ID}, which will be appended to the intent data URI. This can be overriden in any given suggestion using the column {@link SearchManager#SUGGEST_COLUMN_INTENT_DATA}.
Gets the suggestion threshold.
Get the context for the searchable activity.
Creates a context for another activity.
Get the context for the suggestions provider.
Constructor Given a ComponentName, get the searchability info and build a local copy of it.  Use the factory, not this. construct the object.
Create one object using attributeset as input data. construct the object.
Instantiate a new ActionKeyInfo from the data in a Parcel that was previously written with {@link #writeToParcel(Parcel, int)}. positioned at the location in the buffer where it was written.
Gets the key code that this action key info is for.
Gets the action message to use for queries.
Gets the action message to use for suggestions.
Gets the name of the column to get the suggestion action message from.
If any action keys were defined for this searchable activity, look up and return.
Gets search information for the given activity.
Get the metadata for a given activity
Gets the "label" (user-visible name) of this searchable context. This must be read using the searchable Activity's resources.
Gets the resource id of the hint text. This must be read using the searchable Activity's resources.
Gets the icon id specified by the Searchable_icon meta-data entry. This must be read using the searchable Activity's resources.
Checks if the searchable activity wants the voice search button to be shown.
Checks if voice search should start web search.
Checks if voice search should start in-app search.
Gets the resource id of the voice search language model string.
Gets the resource id of the voice prompt text string.
Gets the resource id of the spoken language to recognize in voice search.
The maximum number of voice recognition results to return.
Gets the resource id of replacement text for the "Search" button.
Gets the input type as specified in the searchable attributes. This will default to {@link InputType#TYPE_CLASS_TEXT} if not specified (which is appropriate for free text input).
Gets the input method options specified in the searchable attributes. This will default to {@link EditorInfo#IME_ACTION_GO} if not specified (which is appropriate for a search box).
Checks whether the searchable should be included in global search.
Checks whether this searchable activity should be queried for suggestions if a prefix of the query has returned no results.
Checks whether this searchable activity has auto URL detection turned on.
Instantiates a new SearchableInfo from the data in a Parcel that was previously written with {@link #writeToParcel(Parcel, int)}. positioned at the location in the buffer where it was written.
Constructor - fires it up and makes it look like the search UI.
We recreate the dialog view each time it becomes visible so as to limit the scope of any problems with the contained resources.
Set up the search dialog
Does the rest of the work required to show the search dialog. Called by {@link #show(String, boolean, ComponentName, Bundle)} and
Sets up the search dialog and shows it.
Sets the search dialog to the 'working' state, which shows a working spinner in the right hand size of the text field.
Called after resources have changed, e.g. after screen rotation or locale change.
Update the UI according to the info in the current value of {@link #mSearchable}.
Setup the search "Badge" if requested by mode flags.
Launch a search for the text in the query text field.
Sets the list item selection in the AutoCompleteTextView's ListView.
Sets the text in the query box, updating the suggestions.
Launch search UI. <p>The search manager will open a search widget in an overlapping window, and the underlying activity may be obscured.  The search entry state will remain in effect until one of the following events: <ul> <li>The user completes the search.  In most cases this will launch a search intent.</li> <li>The user uses the back, home, or other keys to exit the search.</li> <li>The application calls the {@link #stopSearch} method, which will hide the search window and return focus to the activity from which it was launched.</li> <p>Most applications will <i>not</i> use this interface to invoke search. The primary method for invoking search is to call {@link android.app.Activity#onSearchRequested Activity.onSearchRequested()} or {@link android.app.Activity#startSearch Activity.startSearch()}. is typically null or empty. any further typing will replace it.  This is useful for cases where an entire pre-formed query is being inserted.  If false, the selection point will be placed at the end of the inserted query.  This is useful when the inserted query is text that the user entered, and the user would expect to be able to keep typing.  <i>This parameter is only meaningful if initialQuery is a non-empty string.</i> context here, in order to improve quality or specificity of its own searches.  This data will be returned with SEARCH intent(s).  Null if no extra data is required. defined by the application (which is usually defined as a local search).  If no default search is defined in the current application or activity, global search will be launched. If true, this will always launch a platform-global (e.g. web-based) search instead.
Starts the global search activity.
Returns a list of installed apps that handle the global search intent.
Gets the name of the global search activity.
Gets the name of the web search activity.
Similar to {@link #startSearch} but actually fires off the search query after invoking the search dialog.  Made available for testing purposes. context here, in order to improve quality or specificity of its own searches.  This data will be returned with SEARCH intent(s).  Null if no extra data is required.
Terminate search UI. <p>Typically the user will terminate the search UI by launching a search or by canceling.  This function allows the underlying application or activity to cancel the search prematurely (for any reason). <p>This function can be safely called at any time (even if no search is active.)
Determine if the Search UI is currently displayed. This is provided primarily for application test purposes.
Set or clear the callback that will be invoked whenever the search UI is dismissed.
Set or clear the callback that will be invoked whenever the search UI is canceled.
Gets information about a searchable activity.
Gets a cursor with search suggestions.
Returns a list of the searchable activities that can be included in global search.
Return the application that owns this service.
Called by the system every time a client explicitly starts the service by calling {@link android.content.Context#startService}, providing the arguments it supplied and a unique integer token representing the start request.  Do not call this method directly. <p>For backwards compatibility, the default implementation calls {@link #onStart} and returns either {@link #START_STICKY} or {@link #START_STICKY_COMPATIBILITY}. <p>If you need your application to run on platform versions prior to API level 5, you can use the following model to handle the older {@link #onStart} callback in that case.  The <code>handleCommand</code> method is implemented by you as appropriate: {@sample development/samples/ApiDemos/src/com/example/android/apis/app/ForegroundService.java start_compatibility} <p class="caution">Note that the system calls this on your service's main thread.  A service's main thread is the same thread where UI operations take place for Activities running in the same process.  You should always avoid stalling the main thread's event loop.  When doing long-running operations, network calls, or heavy disk I/O, you should kick off a new thread, or use {@link android.os.AsyncTask}.</p> as given.  This may be null if the service is being restarted after its process has gone away, and it had previously returned anything except {@link #START_STICKY_COMPATIBILITY}. 0, {@link #START_FLAG_REDELIVERY}, or {@link #START_FLAG_RETRY}. start.  Use with {@link #stopSelfResult(int)}. use for the service's current started state.  It may be one of the constants associated with the {@link #START_CONTINUATION_MASK} bits.
Called when all clients have disconnected from a particular interface published by the service.  The default implementation does nothing and returns false. as given to {@link android.content.Context#bindService Context.bindService}.  Note that any extras that were included with the Intent at that point will <em>not</em> be seen here. {@link #onRebind} method later called when new clients bind to it.
Stop the service, if it was previously started.  This is the same as calling {@link android.content.Context#stopService} for this particular service.
Old version of {@link #stopSelfResult} that doesn't return a result.
Stop the service if the most recent time it was started was <var>startId</var>.  This is the same as calling {@link android.content.Context#stopService} for this particular service but allows you to safely avoid stopping if there is a start request from a client that you haven't yet seen in {@link #onStart}. <p><em>Be careful about ordering of your calls to this function.</em>. If you call this function with the most-recently received ID before you have called it for previously received IDs, the service will be immediately stopped anyway.  If you may end up processing IDs out of order (such as by dispatching them on separate threads), then you are responsible for stopping them in the same order you received them.</p> and the service will be stopped, else false.
Make this service run in the foreground, supplying the ongoing notification to be shown to the user while in this state. By default services are background, meaning that if the system needs to kill them to reclaim more memory (such as to display a large page in a web browser), they can be killed without too much harm.  You can set this flag if killing your service would be disruptive to the user, such as if your service is performing background music playback, so the user would notice if their music stopped playing. <p>If you need your application to run on platform versions prior to API level 5, you can use the following model to call the the older setForeground() or this modern method as appropriate: {@sample development/samples/ApiDemos/src/com/example/android/apis/app/ForegroundService.java foreground_compatibility} {@link NotificationManager#notify(int, Notification) NotificationManager.notify(int, Notification)}.
Remove this service from foreground state, allowing it to be killed if more memory is needed. to {@link #startForeground} will be removed.  Otherwise it will remain until a later call removes it (or the service is destroyed).
Print the Service's state into the given stream.  This gets invoked if you run "adb shell dumpsys activity service <yourservicename>". This is distinct from "dumpsys <servicename>", which only works for named system services and which invokes the {@link IBinder#dump} method on the {@link IBinder} interface registered with ServiceManager. closed for you after you return.
Has the file changed out from under us?  i.e. writes that we didn't instigate.
Returns true if any changes were made
Enqueue an already-committed-to-memory result to be written to disk. They will be written to disk one-at-a-time in the order that they're enqueued. from apply() and this is the runnable to run after the write proceeds.  if null (from a regular commit()), then we're allowed to do this disk write on the main thread (which in addition to reducing allocations and creating a background thread, this has the advantage that we catch them in userdebug StrictMode reports to convert them where possible to apply() ...)
Note: must hold mWritingToDiskLock
Disable some features in the status bar.  Pass the bitwise-or of the DISABLE_* flags. To re-enable everything, pass {@link #DISABLE_NONE}.
Expand the status bar.
Collapse the status bar.
Sets the default tab that is the first tab highlighted.
Returns the {@link TabHost} the activity is using to host its tabs.
Returns the {@link TabWidget} the activity is using to draw the actual tabs.
Force device into car mode, like it had been placed in the car dock. This will cause the device to switch to the car home UI as part of the mode switch.
Turn off special mode if currently in car mode.
Return the current running mode type.  May be one of {@link Configuration#UI_MODE_TYPE_NORMAL Configuration.UI_MODE_TYPE_NORMAL}, {@link Configuration#UI_MODE_TYPE_DESK Configuration.UI_MODE_TYPE_DESK}, or {@link Configuration#UI_MODE_TYPE_CAR Configuration.UI_MODE_TYPE_CAR}, or {@link Configuration#UI_MODE_TYPE_TELEVISION Configuration.UI_MODE_TYPE_TV}.
Sets the night mode.  Changes to the night mode are only effective when the car or desk mode is enabled on a device. <p>The mode can be one of: <ul> <li><em>{@link #MODE_NIGHT_NO}<em> - sets the device into notnight <li><em>{@link #MODE_NIGHT_YES}</em> - sets the device into night mode. </li> <li><em>{@link #MODE_NIGHT_AUTO}</em> - automatic night/notnight switching </ul>
Returns the currently configured night mode. {@link #MODE_NIGHT_AUTO}.  When an error occurred -1 is returned.
Constructor. this wallpaper's component.
Return the .apk package that implements this wallpaper.
Return the class name of the service component that implements this wallpaper.
Return the raw information about the Service implementing this wallpaper.  Do not modify the returned object.
Return the component of the service that implements this wallpaper.
Load the user-displayed label for this wallpaper. resources.
Load the user-displayed icon for this wallpaper. resources.
Load the thumbnail image for this wallpaper. resources.
Return a string indicating the author(s) of this wallpaper.
Return a brief summary of this wallpaper's behavior.
Return the class name of an activity that provides a settings UI for the wallpaper.  You can launch this activity be starting it with an {@link android.content.Intent} whose action is MAIN and with an explicit {@link android.content.ComponentName} composed of {@link #getPackageName} and the class name returned here. <p>A null will be returned if there is no settings activity associated with the wallpaper.
Used to make this class parcelable.
Retrieve a WallpaperManager associated with the given Context.
Retrieve the current system wallpaper; if no wallpaper is set, the system default wallpaper is returned. This is returned as an abstract Drawable that you can install in a View to display whatever wallpaper the user has currently set.
Retrieve the current system wallpaper; if there is no wallpaper set, a null pointer is returned. This is returned as an abstract Drawable that you can install in a View to display whatever wallpaper the user has currently set. null pointer if these is none.
Like {@link #getDrawable()}, but the returned Drawable has a number of limitations to reduce its overhead as much as possible. It will never scale the wallpaper (only centering it if the requested bounds do match the bitmap bounds, which should not be typical), doesn't allow setting an alpha, color filter, or other attributes, etc.  The bounds of the returned drawable will be initialized to the same bounds as the wallpaper, so normally you will not need to touch it.  The drawable also assumes that it will be used in a context running in the same density as the screen (not in density compatibility mode).
Like {@link #getFastDrawable()}, but if there is no wallpaper set, a null pointer is returned. wallpaper or a null pointer if these is none.
Like {@link #getDrawable()} but returns a Bitmap.
Remove all internal references to the last loaded wallpaper.  Useful for apps that want to reduce memory usage when they only temporarily need to have the wallpaper.  After calling, the next request for the wallpaper will require reloading it again from disk.
If the current wallpaper is a live wallpaper component, return the information about that wallpaper.  Otherwise, if it is a static image, simply return null.
Change the current system wallpaper to the bitmap in the given resource. The resource is opened as a raw data stream and copied into the wallpaper; it must be a valid PNG or JPEG image.  On success, the intent {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast. wallpaper.
Change the current system wallpaper to a bitmap.  The given bitmap is converted to a PNG and stored as the wallpaper.  On success, the intent {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast. wallpaper.
Change the current system wallpaper to a specific byte stream.  The give InputStream is copied into persistent storage and will now be used as the wallpaper.  Currently it must be either a JPEG or PNG image.  On success, the intent {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast. wallpaper.
Returns the desired minimum width for the wallpaper. Callers of {@link #setBitmap(android.graphics.Bitmap)} or {@link #setStream(java.io.InputStream)} should check this value beforehand to make sure the supplied wallpaper respects the desired minimum width. If the returned value is <= 0, the caller should use the width of the default display instead. be honored by applications that set the wallpaper but it is not mandatory.
Returns the desired minimum height for the wallpaper. Callers of {@link #setBitmap(android.graphics.Bitmap)} or {@link #setStream(java.io.InputStream)} should check this value beforehand to make sure the supplied wallpaper respects the desired minimum height. If the returned value is <= 0, the caller should use the height of the default display instead. be honored by applications that set the wallpaper but it is not mandatory.
For use only by the current home application, to specify the size of wallpaper it would like to use.  This allows such applications to have a virtual wallpaper that is larger than the physical screen, matching the size of their workspace.
Set the position of the current wallpaper within any larger space, when that wallpaper is visible behind the given window.  The X and Y offsets are floating point numbers ranging from 0 to 1, representing where the wallpaper should be positioned within the screen space.  These only make sense when the wallpaper is larger than the screen. with, as returned by {@link android.view.View#getWindowToken() View.getWindowToken()}.
For applications that use multiple virtual screens showing a wallpaper, specify the step size between virtual screens. For example, if the launcher has 3 virtual screens, it would specify an xStep of 0.5, since the X offset for those screens are 0.0, 0.5 and 1.0
Send an arbitrary command to the current active wallpaper. with, as returned by {@link android.view.View#getWindowToken() View.getWindowToken()}. name to avoid collisions, such as "com.mycompany.wallpaper.DOIT".
Clear the offsets previously associated with this window through {@link #setWallpaperOffsets(IBinder, float, float)}.  This reverts the window to its default state, where it does not cause the wallpaper to scroll from whatever its last offsets were. with, as returned by {@link android.view.View#getWindowToken() View.getWindowToken()}.
Remove any currently set wallpaper, reverting to the system's default wallpaper. On success, the intent {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast. wallpaper.
Start receiving onAppWidgetChanged calls for your AppWidgets.  Call this when your activity becomes visible, i.e. from onStart() in your Activity.
Stop receiving onAppWidgetChanged calls for your AppWidgets.  Call this when your activity is no longer visible, i.e. from onStop() in your Activity.
Get a appWidgetId for a host in the calling process.
Stop listening to changes for this AppWidget.
Remove all records about this host from the AppWidget manager. <ul> <li>Call this when initializing your database, as it might be because of a data wipe.</li> <li>Call this to have the AppWidget manager release all resources associated with your host.  Any future calls about this host will cause the records to be re-allocated.</li> </ul>
Remove all records about all hosts for your package. <ul> <li>Call this when initializing your database, as it might be because of a data wipe.</li> <li>Call this to have the AppWidget manager release all resources associated with your host.  Any future calls about this host will cause the records to be re-allocated.</li> </ul>
Create the AppWidgetHostView for the given widget. The AppWidgetHost retains a pointer to the newly-created View.
Called to create the AppWidgetHostView.  Override to return a custom subclass if you need it.  {@more}
Called when the AppWidget provider for a AppWidget has been upgraded to a new apk.
When we're inflating the initialLayout for a AppWidget, we only allow views that are allowed in RemoteViews.
Create a host view.  Uses default fade animations.
Set the AppWidget that will be displayed by this view.
As of ICE_CREAM_SANDWICH we are automatically adding padding to widgets targeting ICE_CREAM_SANDWICH and higher. The new widget design guidelines strongly recommend that widget developers do not add extra padding to their widgets. This will help achieve consistency among widgets.
Update the AppWidgetProviderInfo for this view, and reset it to the initial layout.
Process a set of {@link RemoteViews} coming in as an update from the AppWidget provider. Will animate into these new views as needed
Process data-changed notifications for the specified view in the specified set of {@link RemoteViews} views.
Build a {@link Context} cloned into another package name, usually for the purposes of reading remote resources.
Prepare the given view to be shown. This might include adjusting {@link FrameLayout.LayoutParams} before inserting.
Inflate and return the default layout requested by AppWidget provider.
Inflate and return a view that represents an error state.
Get the AppWidgetManager instance to use for the supplied {@link android.content.Context Context} object.
Set the RemoteViews to use for the specified appWidgetIds. Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should contain a complete representation of the widget. For performing partial widget updates, see {@link #partiallyUpdateAppWidget(int[], RemoteViews)}. <p> It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider.
Set the RemoteViews to use for the specified appWidgetId. Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should contain a complete representation of the widget. For performing partial widget updates, see {@link #partiallyUpdateAppWidget(int, RemoteViews)}. <p> It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider.
Perform an incremental update or command on the widget(s) specified by appWidgetIds. This update  differs from {@link #updateAppWidget(int[], RemoteViews)} in that the RemoteViews object which is passed is understood to be an incomplete representation of the widget, and hence is not cached by the AppWidgetService. Note that because these updates are not cached, any state that they modify that is not restored by restoreInstanceState will not persist in the case that the widgets are restored using the cached version in AppWidgetService. Use with {@link RemoteViews#showNext(int)}, {@link RemoteViews#showPrevious(int)}, {@link RemoteViews#setScrollPosition(int, int)} and similar commands. <p> It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider.
Perform an incremental update or command on the widget specified by appWidgetId. This update  differs from {@link #updateAppWidget(int, RemoteViews)} in that the RemoteViews object which is passed is understood to be an incomplete representation of the widget, and hence is not cached by the AppWidgetService. Note that because these updates are not cached, any state that they modify that is not restored by restoreInstanceState will not persist in the case that the widgets are restored using the cached version in AppWidgetService. Use with {@link RemoteViews#showNext(int)}, {@link RemoteViews#showPrevious(int)}, {@link RemoteViews#setScrollPosition(int, int)} and similar commands. <p> It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider.
Set the RemoteViews to use for all AppWidget instances for the supplied AppWidget provider. <p> It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. android.content.BroadcastReceiver BroadcastReceiver} provider
Notifies the specified collection view in all the specified AppWidget instances to invalidate their currently data.
Notifies the specified collection view in all the specified AppWidget instance to invalidate it's currently data.
Return a list of the AppWidget providers that are currently installed.
Get the available info about the AppWidget. you don't have access to that appWidgetId, null is returned.
Set the component for a given appWidgetId. <p class="note">You need the APPWIDGET_LIST permission.  This method is to be used by the AppWidget picker.
Binds the RemoteViewsService for a given appWidgetId and intent. The appWidgetId specified must already be bound to the calling AppWidgetHost via {@link android.appwidget.AppWidgetManager#bindAppWidgetId AppWidgetManager.bindAppWidgetId()}.
Unbinds the RemoteViewsService for a given appWidgetId and intent. The appWidgetId specified muse already be bound to the calling AppWidgetHost via {@link android.appwidget.AppWidgetManager#bindAppWidgetId AppWidgetManager.bindAppWidgetId()}.
Get the list of appWidgetIds that have been bound to the given AppWidget provider.
Implements {@link BroadcastReceiver#onReceive} to dispatch calls to the various other methods on AppWidgetProvider. BEGIN_INCLUDE(onReceive)
Unflatten the AppWidgetProviderInfo from a parcel.
Handle Basic commands "ATA".<p> These are single letter commands such as ATA and ATD. Anything following the single letter command ('A' and 'D' respectively) will be passed as 'arg'.<p> For example, "ATDT1234" would result in the call handleBasicCommand("T1234").<p>
Handle Actions command "AT+FOO".<p> Action commands are part of the Extended command syntax, and are typically used to signal an action on "FOO".<p>
Handle Read command "AT+FOO?".<p> Read commands are part of the Extended command syntax, and are typically used to read the value of "FOO".<p>
Handle Set command "AT+FOO=...".<p> Set commands are part of the Extended command syntax, and are typically used to set the value of "FOO". Multiple arguments can be sent.<p> AT+FOO=[<arg1>[,<arg2>[,...]]]<p> Each argument will be either numeric (Integer) or String. handleSetCommand is passed a generic Object[] array in which each element will be an Integer (if it can be parsed with parseInt()) or String.<p> Missing arguments ",," are set to empty Strings.<p> Typically used to set this parameter
Handle Test command "AT+FOO=?".<p> Test commands are part of the Extended command syntax, and are typically used to request an indication of the range of legal values that "FOO" can take.<p> By default we return an OK result, to indicate that this command is at least recognized.<p>
Construct a new AtCommandResult with given result code, and an empty response array.
Construct a new AtCommandResult with result code OK, and the specified single line response.
Add another line to the response.
Add the given result into this AtCommandResult object.<p> Used to combine results from multiple commands in a single command line (command chaining).
Generate the string response ready to send
Append a string to a string builder, joining with a double CRLF. Used to create multi-line AT command replies
Create a new AtParser.<p> No handlers are registered.
Register a Basic command handler.<p> Basic command handlers are later called via their <code>handleBasicCommand(String args)</code> method.
Register an Extended command handler.<p> Extended command handlers are later called via:<ul> <li><code>handleActionCommand()</code> <li><code>handleGetCommand()</code> <li><code>handleSetCommand()</code> <li><code>handleTestCommand()</code> </ul> Only one method will be called for each command processed.
Strip input of whitespace and force Uppercase - except sections inside quotes. Also fixes unmatched quotes (by appending a quote). Double quotes " are the only quotes allowed by V.250
Find a character ch, ignoring quoted sections. Return input.length() if not found.
Break an argument string into individual arguments (comma delimited). Integer arguments are turned into Integer objects. Otherwise a String object is used.
Return the index of the end of character after the last character in the extended command name. Uses the V.250 spec for allowed command names.
Processes an incoming AT command line.<p> This method will invoke zero or one command handler methods for each command in the command line.<p>
Create a BluetoothA2dp proxy object for interacting with the local Bluetooth A2DP service.
Initiate connection to a profile of the remote bluetooth device. <p> Currently, the system supports only 1 connection to the A2DP profile. The API will automatically disconnect connected devices before connecting. <p> This API returns false in scenarios like the profile on the device is already connected or Bluetooth is not turned on. When this API returns true, it is guaranteed that connection state intent for the profile will be broadcasted with the state. Users can get the connection state of the profile from this intent. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
Initiate disconnection from a profile <p> This API will return false in scenarios like the profile on the Bluetooth device is not in connected state etc. When this API returns, true, it is guaranteed that the connection state change intent will be broadcasted with the state. Users can get the disconnection state of the profile from this intent. <p> If the disconnection is initiated by a remote device, the state will transition from {@link #STATE_CONNECTED} to {@link #STATE_DISCONNECTED}. If the disconnect is initiated by the host (local) device the state will transition from {@link #STATE_CONNECTED} to state {@link #STATE_DISCONNECTING} to state {@link #STATE_DISCONNECTED}. The transition to {@link #STATE_DISCONNECTING} can be used to distinguish between the two scenarios. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
Set priority of the profile <p> The device should already be paired. Priority can be one of {@link #PRIORITY_ON} or {@link #PRIORITY_OFF}, <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
Get the priority of the profile. <p> The priority can be any of: {@link #PRIORITY_AUTO_CONNECT}, {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link #PRIORITY_UNDEFINED} <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Check if A2DP profile is streaming music. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Initiate suspend from an A2DP sink. <p> This API will return false in scenarios like the A2DP device is not in connected state etc. When this API returns, true, it is guaranteed that {@link #ACTION_CONNECTION_STATE_CHANGED} intent will be broadcasted with the state. Users can get the state of the A2DP device from this intent. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
Initiate resume from a suspended A2DP sink. <p> This API will return false in scenarios like the A2DP device is not in suspended state etc. When this API returns, true, it is guaranteed that {@link #ACTION_SINK_STATE_CHANGED} intent will be broadcasted with the state. Users can get the state of the A2DP device from this intent. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
This function checks if the remote device is an AVCRP target and thus whether we should send volume keys changes or not.
Allow or disallow incoming connection
Helper for converting a state to a string. For debug use only - strings are not internationalized.
Get a handle to the default local Bluetooth adapter. <p>Currently Android only supports one Bluetooth adapter, but the API could be extended to support more. This will always return the default adapter.
Use {@link #getDefaultAdapter} to get the BluetoothAdapter instance.
Get a {@link BluetoothDevice} object for the given Bluetooth hardware address. <p>Valid Bluetooth hardware addresses must be upper case, in a format such as "00:11:22:33:AA:BB". The helper {@link #checkBluetoothAddress} is available to validate a Bluetooth address. <p>A {@link BluetoothDevice} will always be returned for a valid hardware address, even if this adapter has never seen that device.
Return true if Bluetooth is currently enabled and ready for use. <p>Equivalent to: <code>getBluetoothState() == STATE_ON</code> <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Get the current state of the local Bluetooth adapter. <p>Possible return values are {@link #STATE_OFF}, {@link #STATE_TURNING_ON}, {@link #STATE_ON}, {@link #STATE_TURNING_OFF}. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Turn on the local Bluetooth adapter&mdash;do not use without explicit user action to turn on Bluetooth. <p>This powers on the underlying Bluetooth hardware, and starts all Bluetooth system services. <p class="caution"><strong>Bluetooth should never be enabled without direct user consent</strong>. If you want to turn on Bluetooth in order to create a wireless connection, you should use the {@link #ACTION_REQUEST_ENABLE} Intent, which will raise a dialog that requests user permission to turn on Bluetooth. The {@link #enable()} method is provided only for applications that include a user interface for changing system settings, such as a "power manager" app.</p> <p>This is an asynchronous call: it will return immediately, and clients should listen for {@link #ACTION_STATE_CHANGED} to be notified of subsequent adapter state changes. If this call returns true, then the adapter state will immediately transition from {@link #STATE_OFF} to {@link #STATE_TURNING_ON}, and some time later transition to either {@link #STATE_OFF} or {@link #STATE_ON}. If this call returns false then there was an immediate problem that will prevent the adapter from being turned on - such as Airplane mode, or the adapter is already turned on. <p>Requires the {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission
Turn off the local Bluetooth adapter&mdash;do not use without explicit user action to turn off Bluetooth. <p>This gracefully shuts down all Bluetooth connections, stops Bluetooth system services, and powers down the underlying Bluetooth hardware. <p class="caution"><strong>Bluetooth should never be disabled without direct user consent</strong>. The {@link #disable()} method is provided only for applications that include a user interface for changing system settings, such as a "power manager" app.</p> <p>This is an asynchronous call: it will return immediately, and clients should listen for {@link #ACTION_STATE_CHANGED} to be notified of subsequent adapter state changes. If this call returns true, then the adapter state will immediately transition from {@link #STATE_ON} to {@link #STATE_TURNING_OFF}, and some time later transition to either {@link #STATE_OFF} or {@link #STATE_ON}. If this call returns false then there was an immediate problem that will prevent the adapter from being turned off - such as the adapter already being turned off. <p>Requires the {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission
Returns the hardware address of the local Bluetooth adapter. <p>For example, "00:11:22:AA:BB:CC". <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Get the friendly Bluetooth name of the local Bluetooth adapter. <p>This name is visible to remote Bluetooth devices. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Get the UUIDs supported by the local Bluetooth adapter. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Set the friendly Bluetooth name of the local Bluetooth adapter. <p>This name is visible to remote Bluetooth devices. <p>Valid Bluetooth names are a maximum of 248 bytes using UTF-8 encoding, although many remote devices can only display the first 40 characters, and some may be limited to just 20. <p>If Bluetooth state is not {@link #STATE_ON}, this API will return false. After turning on Bluetooth, wait for {@link #ACTION_STATE_CHANGED} with {@link #STATE_ON} to get the updated value. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
Get the current Bluetooth scan mode of the local Bluetooth adapter. <p>The Bluetooth scan mode determines if the local adapter is connectable and/or discoverable from remote Bluetooth devices. <p>Possible values are: {@link #SCAN_MODE_NONE}, {@link #SCAN_MODE_CONNECTABLE}, {@link #SCAN_MODE_CONNECTABLE_DISCOVERABLE}. <p>If Bluetooth state is not {@link #STATE_ON}, this API will return {@link #SCAN_MODE_NONE}. After turning on Bluetooth, wait for {@link #ACTION_STATE_CHANGED} with {@link #STATE_ON} to get the updated value. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Set the Bluetooth scan mode of the local Bluetooth adapter. <p>The Bluetooth scan mode determines if the local adapter is connectable and/or discoverable from remote Bluetooth devices. <p>For privacy reasons, discoverable mode is automatically turned off after <code>duration</code> seconds. For example, 120 seconds should be enough for a remote device to initiate and complete its discovery process. <p>Valid scan mode values are: {@link #SCAN_MODE_NONE}, {@link #SCAN_MODE_CONNECTABLE}, {@link #SCAN_MODE_CONNECTABLE_DISCOVERABLE}. <p>If Bluetooth state is not {@link #STATE_ON}, this API will return false. After turning on Bluetooth, wait for {@link #ACTION_STATE_CHANGED} with {@link #STATE_ON} to get the updated value. <p>Requires {@link android.Manifest.permission#WRITE_SECURE_SETTINGS} <p>Applications cannot set the scan mode. They should use <code>startActivityForResult( BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE}) </code>instead.
Start the remote device discovery process. <p>The discovery process usually involves an inquiry scan of about 12 seconds, followed by a page scan of each new device to retrieve its Bluetooth name. <p>This is an asynchronous call, it will return immediately. Register for {@link #ACTION_DISCOVERY_STARTED} and {@link #ACTION_DISCOVERY_FINISHED} intents to determine exactly when the discovery starts and completes. Register for {@link BluetoothDevice#ACTION_FOUND} to be notified as remote Bluetooth devices are found. <p>Device discovery is a heavyweight procedure. New connections to remote Bluetooth devices should not be attempted while discovery is in progress, and existing connections will experience limited bandwidth and high latency. Use {@link #cancelDiscovery()} to cancel an ongoing discovery. Discovery is not managed by the Activity, but is run as a system service, so an application should always call {@link BluetoothAdapter#cancelDiscovery()} even if it did not directly request a discovery, just to be sure. <p>Device discovery will only find remote devices that are currently <i>discoverable</i> (inquiry scan enabled). Many Bluetooth devices are not discoverable by default, and need to be entered into a special mode. <p>If Bluetooth state is not {@link #STATE_ON}, this API will return false. After turning on Bluetooth, wait for {@link #ACTION_STATE_CHANGED} with {@link #STATE_ON} to get the updated value. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
Cancel the current device discovery process. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}. <p>Because discovery is a heavyweight procedure for the Bluetooth adapter, this method should always be called before attempting to connect to a remote device with {@link android.bluetooth.BluetoothSocket#connect()}. Discovery is not managed by the  Activity, but is run as a system service, so an application should always call cancel discovery even if it did not directly request a discovery, just to be sure. <p>If Bluetooth state is not {@link #STATE_ON}, this API will return false. After turning on Bluetooth, wait for {@link #ACTION_STATE_CHANGED} with {@link #STATE_ON} to get the updated value.
Return true if the local Bluetooth adapter is currently in the device discovery process. <p>Device discovery is a heavyweight procedure. New connections to remote Bluetooth devices should not be attempted while discovery is in progress, and existing connections will experience limited bandwidth and high latency. Use {@link #cancelDiscovery()} to cancel an ongoing discovery. <p>Applications can also register for {@link #ACTION_DISCOVERY_STARTED} or {@link #ACTION_DISCOVERY_FINISHED} to be notified when discovery starts or completes. <p>If Bluetooth state is not {@link #STATE_ON}, this API will return false. After turning on Bluetooth, wait for {@link #ACTION_STATE_CHANGED} with {@link #STATE_ON} to get the updated value. <p>Requires {@link android.Manifest.permission#BLUETOOTH}.
Return the set of {@link BluetoothDevice} objects that are bonded (paired) to the local adapter. <p>If Bluetooth state is not {@link #STATE_ON}, this API will return an empty set. After turning on Bluetooth, wait for {@link #ACTION_STATE_CHANGED} with {@link #STATE_ON} to get the updated value. <p>Requires {@link android.Manifest.permission#BLUETOOTH}.
Get the current connection state of the local Bluetooth adapter. This can be used to check whether the local Bluetooth adapter is connected to any profile of any other remote Bluetooth Device. <p> Use this function along with {@link #ACTION_CONNECTION_STATE_CHANGED} intent to get the connection state of the adapter. {@link #STATE_CONNECTING} or {@link #STATE_DISCONNECTED}
Get the current connection state of a profile. This function can be used to check whether the local Bluetooth adapter is connected to any remote device for a specific profile. Profile can be one of {@link BluetoothProfile#HEALTH}, {@link BluetoothProfile#HEADSET}, {@link BluetoothProfile#A2DP}. <p>Requires {@link android.Manifest.permission#BLUETOOTH}. <p> Return value can be one of {@link BluetoothProfile#STATE_DISCONNECTED}, {@link BluetoothProfile#STATE_CONNECTING}, {@link BluetoothProfile#STATE_CONNECTED}, {@link BluetoothProfile#STATE_DISCONNECTING}
Returns next random channel, or -1 if we're out
Create a listening, secure RFCOMM Bluetooth socket. <p>A remote device connecting to this socket will be authenticated and communication on this socket will be encrypted. <p>Use {@link BluetoothServerSocket#accept} to retrieve incoming connections from a listening {@link BluetoothServerSocket}. <p>Valid RFCOMM channels are in range 1 to 30. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
Create a listening, secure RFCOMM Bluetooth socket with Service Record. <p>A remote device connecting to this socket will be authenticated and communication on this socket will be encrypted. <p>Use {@link BluetoothServerSocket#accept} to retrieve incoming connections from a listening {@link BluetoothServerSocket}. <p>The system will assign an unused RFCOMM channel to listen on. <p>The system will also register a Service Discovery Protocol (SDP) record with the local SDP server containing the specified UUID, service name, and auto-assigned channel. Remote Bluetooth devices can use the same UUID to query our SDP server and discover which channel to connect to. This SDP record will be removed when this socket is closed, or if this application closes unexpectedly. <p>Use {@link BluetoothDevice#createRfcommSocketToServiceRecord} to connect to this socket from another device using the same {@link UUID}. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Create a listening, insecure RFCOMM Bluetooth socket with Service Record. <p>The link key is not required to be authenticated, i.e the communication may be vulnerable to Man In the Middle attacks. For Bluetooth 2.1 devices, the link will be encrypted, as encryption is mandartory. For legacy devices (pre Bluetooth 2.1 devices) the link will not be encrypted. Use {@link #listenUsingRfcommWithServiceRecord}, if an encrypted and authenticated communication channel is desired. <p>Use {@link BluetoothServerSocket#accept} to retrieve incoming connections from a listening {@link BluetoothServerSocket}. <p>The system will assign an unused RFCOMM channel to listen on. <p>The system will also register a Service Discovery Protocol (SDP) record with the local SDP server containing the specified UUID, service name, and auto-assigned channel. Remote Bluetooth devices can use the same UUID to query our SDP server and discover which channel to connect to. This SDP record will be removed when this socket is closed, or if this application closes unexpectedly. <p>Use {@link BluetoothDevice#createRfcommSocketToServiceRecord} to connect to this socket from another device using the same {@link UUID}. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Create a listening, encrypted, RFCOMM Bluetooth socket with Service Record. <p>The link will be encrypted, but the link key is not required to be authenticated i.e the communication is vulnerable to Man In the Middle attacks. Use {@link #listenUsingRfcommWithServiceRecord}, to ensure an authenticated link key. <p> Use this socket if authentication of link key is not possible. For example, for Bluetooth 2.1 devices, if any of the devices does not have an input and output capability or just has the ability to display a numeric key, a secure socket connection is not possible and this socket can be used. Use {@link #listenUsingInsecureRfcommWithServiceRecord}, if encryption is not required. For Bluetooth 2.1 devices, the link will be encrypted, as encryption is mandartory. For more details, refer to the Security Model section 5.2 (vol 3) of Bluetooth Core Specification version 2.1 + EDR. <p>Use {@link BluetoothServerSocket#accept} to retrieve incoming connections from a listening {@link BluetoothServerSocket}. <p>The system will assign an unused RFCOMM channel to listen on. <p>The system will also register a Service Discovery Protocol (SDP) record with the local SDP server containing the specified UUID, service name, and auto-assigned channel. Remote Bluetooth devices can use the same UUID to query our SDP server and discover which channel to connect to. This SDP record will be removed when this socket is closed, or if this application closes unexpectedly. <p>Use {@link BluetoothDevice#createRfcommSocketToServiceRecord} to connect to this socket from another device using the same {@link UUID}. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Construct an unencrypted, unauthenticated, RFCOMM server socket. Call #accept to retrieve connections to this socket.
Construct an encrypted, RFCOMM server socket. Call #accept to retrieve connections to this socket.
Construct a SCO server socket. Call #accept to retrieve connections to this socket.
Read the local Out of Band Pairing Data <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Get the profile proxy object associated with the profile. <p>Profile can be one of {@link BluetoothProfile#HEALTH}, {@link BluetoothProfile#HEADSET} or {@link BluetoothProfile#A2DP}. Clients must implements {@link BluetoothProfile.ServiceListener} to get notified of the connection status and to get the proxy object.
Close the connection of the profile proxy to the Service. <p> Clients should call this when they are no longer using the proxy obtained from {@link #getProfileProxy}. Profile can be one of  {@link BluetoothProfile#HEALTH}, {@link BluetoothProfile#HEADSET} or {@link BluetoothProfile#A2DP}
Enable control of the Bluetooth Adapter for a single application. <p>Some applications need to use Bluetooth for short periods of time to transfer data but don't want all the associated implications like automatic connection to headsets etc. <p> Multiple applications can call this. This is reference counted and Bluetooth disabled only when no one else is using it. There will be no UI shown to the user while bluetooth is being enabled. Any user action will override this call. For example, if user wants Bluetooth on and the last user of this API wanted to disable Bluetooth, Bluetooth will not be turned off. <p> This API is only meant to be used by internal applications. Third party applications but use {@link #enable} and {@link #disable} APIs. <p> If this API returns true, it means the callback will be called. The callback will be called with the current state of Bluetooth. If the state is not what was requested, an internal error would be the reason. If Bluetooth is already on and if this function is called to turn it on, the api will return true and a callback will be called. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Validate a Bluetooth address, such as "00:43:A8:23:10:F0" <p>Alphabetic characters must be uppercase to be valid.
Return true if the specified service class is supported by this {@link BluetoothClass}. <p>Valid service classes are the public constants in {@link BluetoothClass.Service}. For example, {@link BluetoothClass.Service#AUDIO}.
Return the major device class component of this {@link BluetoothClass}. <p>Values returned from this function can be compared with the public constants in {@link BluetoothClass.Device.Major} to determine which major class is encoded in this Bluetooth class.
Return the (major and minor) device class component of this {@link BluetoothClass}. <p>Values returned from this function can be compared with the public constants in {@link BluetoothClass.Device} to determine which device class is encoded in this Bluetooth class.
Check class bits for possible bluetooth profile support. This is a simple heuristic that tries to guess if a device with the given class bits might support specified profile. It is not accurate for all devices. It tries to err on the side of false positives.
Create a new BluetoothDevice Bluetooth MAC address must be upper case, such as "00:11:22:33:AA:BB", and is validated in this constructor.
Returns the hardware address of this BluetoothDevice. <p> For example, "00:11:22:AA:BB:CC".
Get the friendly Bluetooth name of the remote device. <p>The local adapter will automatically retrieve remote names when performing a device scan, and will cache them. This method just returns the name for this device from the cache. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Get the Bluetooth alias of the remote device. <p>Alias is the locally modified name of a remote device.
Set the Bluetooth alias of the remote device. <p>Alias is the locally modified name of a remote device. <p>This methoid overwrites the alias. The changed alias is saved in the local storage so that the change is preserved over power cycle.
Get the Bluetooth alias of the remote device. If Alias is null, get the Bluetooth name instead.
Start the bonding (pairing) process with the remote device. <p>This is an asynchronous call, it will return immediately. Register for {@link #ACTION_BOND_STATE_CHANGED} intents to be notified when the bonding process completes, and its result. <p>Android system services will handle the necessary user interactions to confirm and complete the bonding process. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
Start the bonding (pairing) process with the remote device using the Out Of Band mechanism. <p>This is an asynchronous call, it will return immediately. Register for {@link #ACTION_BOND_STATE_CHANGED} intents to be notified when the bonding process completes, and its result. <p>Android system services will handle the necessary user interactions to confirm and complete the bonding process. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
Set the Out Of Band data for a remote device to be used later in the pairing mechanism. Users can obtain this data through other trusted channels <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
Cancel an in-progress bonding request started with {@link #createBond}. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
Remove bond (pairing) with the remote device. <p>Delete the link key associated with the remote device, and immediately terminate connections to that device that require authentication and encryption. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
Get the bond state of the remote device. <p>Possible values for the bond state are: {@link #BOND_NONE}, {@link #BOND_BONDING}, {@link #BOND_BONDED}. <p>Requires {@link android.Manifest.permission#BLUETOOTH}.
Get the Bluetooth class of the remote device. <p>Requires {@link android.Manifest.permission#BLUETOOTH}.
Get trust state of a remote device. <p>Requires {@link android.Manifest.permission#BLUETOOTH}.
Set trust state for a remote device. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
Perform a SDP query on the remote device to get the UUIDs supported. This API is asynchronous and an Intent is sent, with the UUIDs supported by the remote end. If there is an error in getting the SDP records or if the process takes a long time, an Intent is sent with the UUIDs that is currently present in the cache. Clients should use the {@link #getUuids} to get UUIDs is SDP is not to be performed.
Create an RFCOMM {@link BluetoothSocket} ready to start a secure outgoing connection to this remote device on given channel. <p>The remote device will be authenticated and communication on this socket will be encrypted. <p> Use this socket only if an authenticated socket link is possible. Authentication refers to the authentication of the link key to prevent man-in-the-middle type of attacks. For example, for Bluetooth 2.1 devices, if any of the devices does not have an input and output capability or just has the ability to display a numeric key, a secure socket connection is not possible. In such a case, use {#link createInsecureRfcommSocket}. For more details, refer to the Security Model section 5.2 (vol 3) of Bluetooth Core Specification version 2.1 + EDR. <p>Use {@link BluetoothSocket#connect} to initiate the outgoing connection. <p>Valid RFCOMM channels are in range 1 to 30. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Create an RFCOMM {@link BluetoothSocket} ready to start a secure outgoing connection to this remote device using SDP lookup of uuid. <p>This is designed to be used with {@link BluetoothAdapter#listenUsingRfcommWithServiceRecord} for peer-peer Bluetooth applications. <p>Use {@link BluetoothSocket#connect} to initiate the outgoing connection. This will also perform an SDP lookup of the given uuid to determine which channel to connect to. <p>The remote device will be authenticated and communication on this socket will be encrypted. <p> Use this socket only if an authenticated socket link is possible. Authentication refers to the authentication of the link key to prevent man-in-the-middle type of attacks. For example, for Bluetooth 2.1 devices, if any of the devices does not have an input and output capability or just has the ability to display a numeric key, a secure socket connection is not possible. In such a case, use {#link createInsecureRfcommSocketToServiceRecord}. For more details, refer to the Security Model section 5.2 (vol 3) of Bluetooth Core Specification version 2.1 + EDR. <p>Hint: If you are connecting to a Bluetooth serial board then try using the well-known SPP UUID 00001101-0000-1000-8000-00805F9B34FB. However if you are connecting to an Android peer then please generate your own unique UUID. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Create an RFCOMM {@link BluetoothSocket} socket ready to start an insecure outgoing connection to this remote device using SDP lookup of uuid. <p> The communication channel will not have an authenticated link key i.e it will be subject to man-in-the-middle attacks. For Bluetooth 2.1 devices, the link key will be encrypted, as encryption is mandatory. For legacy devices (pre Bluetooth 2.1 devices) the link key will be not be encrypted. Use {@link #createRfcommSocketToServiceRecord} if an encrypted and authenticated communication channel is desired. <p>This is designed to be used with {@link BluetoothAdapter#listenUsingInsecureRfcommWithServiceRecord} for peer-peer Bluetooth applications. <p>Use {@link BluetoothSocket#connect} to initiate the outgoing connection. This will also perform an SDP lookup of the given uuid to determine which channel to connect to. <p>The remote device will be authenticated and communication on this socket will be encrypted. <p>Hint: If you are connecting to a Bluetooth serial board then try using the well-known SPP UUID 00001101-0000-1000-8000-00805F9B34FB. However if you are connecting to an Android peer then please generate your own unique UUID. <p>Requires {@link android.Manifest.permission#BLUETOOTH}
Construct an insecure RFCOMM socket ready to start an outgoing connection. Call #connect on the returned #BluetoothSocket to begin the connection. The remote device will not be authenticated and communication on this socket will not be encrypted. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
Construct a SCO socket ready to start an outgoing connection. Call #connect on the returned #BluetoothSocket to begin the connection. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
Check that a pin is valid and convert to byte array. Bluetooth pin's are 1 to 16 bytes of UTF-8 characters.
Create a BluetoothHeadset proxy object.
Close the connection to the backing service. Other public functions of BluetoothHeadset will return default error results once close() has been called. Multiple invocations of close() are ok.
Initiate connection to a profile of the remote bluetooth device. <p> Currently, the system supports only 1 connection to the headset/handsfree profile. The API will automatically disconnect connected devices before connecting. <p> This API returns false in scenarios like the profile on the device is already connected or Bluetooth is not turned on. When this API returns true, it is guaranteed that connection state intent for the profile will be broadcasted with the state. Users can get the connection state of the profile from this intent. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
Start Bluetooth voice recognition. This methods sends the voice recognition AT command to the headset and establishes the audio connection. <p> Users can listen to {@link #ACTION_AUDIO_STATE_CHANGED}. If this function returns true, this intent will be broadcasted with {@link #EXTRA_STATE} set to {@link #STATE_AUDIO_CONNECTING}. <p> {@link #EXTRA_STATE} will transition from {@link #STATE_AUDIO_CONNECTING} to {@link #STATE_AUDIO_CONNECTED} when audio connection is established and to {@link #STATE_AUDIO_DISCONNECTED} in case of failure to establish the audio connection. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Stop Bluetooth Voice Recognition mode, and shut down the Bluetooth audio path. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Check if Bluetooth SCO audio is connected. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Get battery usage hint for Bluetooth Headset service. This is a monotonically increasing integer. Wraps to 0 at Integer.MAX_INT, and at boot. Current implementation returns the number of AT commands handled since boot. This is a good indicator for spammy headset/handsfree units that can keep the device awake by polling for cellular status updates. As a rule of thumb, each AT command prevents the CPU from sleeping for 500 ms
Indicates if current platform supports voice dialing over bluetooth SCO.
Cancel the outgoing connection. Note: This is an internal function and shouldn't be exposed
Accept the incoming connection. Note: This is an internal function and shouldn't be exposed
Create the connect thread for the incoming connection. Note: This is an internal function and shouldn't be exposed
Reject the incoming connection.
Connect to a Bluetooth Headset. Note: This is an internal function and shouldn't be exposed
Disconnect a Bluetooth Headset. Note: This is an internal function and shouldn't be exposed
Set the audio state of the Headset. Note: This is an internal function and shouldn't be exposed
Get the current audio state of the Headset. Note: This is an internal function and shouldn't be exposed
Initiates a SCO channel connection with the headset (if connected). Also initiates a virtual voice call for Handsfree devices as many devices do not accept SCO audio without a call. This API allows the handsfree device to be used for routing non-cellular call audio.
Terminates an ongoing SCO connection and the associated virtual call.
Register an application configuration that acts as a Health SINK. This is the configuration that will be used to communicate with health devices which will act as the {@link #SOURCE_ROLE}. This is an asynchronous call and so the callback is used to notify success or failure if the function returns true. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Register an application configuration that acts as a Health SINK or in a Health SOURCE role.This is an asynchronous call and so the callback is used to notify success or failure if the function returns true. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Unregister an application configuration that has been registered using {@link #registerSinkAppConfiguration} <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Connect to a health device which has the {@link #SOURCE_ROLE}. This is an asynchronous call. If this function returns true, the callback associated with the application configuration will be called. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Connect to a health device which has the {@link #SINK_ROLE}. This is an asynchronous call. If this function returns true, the callback associated with the application configuration will be called. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Disconnect a connected health channel. This is an asynchronous call. If this function returns true, the callback associated with the application configuration will be called. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
Get the file descriptor of the main channel associated with the remote device and application configuration. <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission. <p> Its the responsibility of the caller to close the ParcelFileDescriptor when done.
Create a BluetoothHealth proxy object.
Constructor to register the SINK role
Constructor to register the application configuration.
Return the data type associated with this application configuration.
Return the name of the application configuration.
Return the role associated with this application configuration.
Return the channel type associated with this application configuration.
Callback to inform change in registration state of the health application. <p> This callback is called on the binder thread (not on the UI thread)
Callback to inform change in channel state. <p> Its the responsibility of the implementor of this callback to close the parcel file descriptor when done. This callback is called on the Binder thread (not the UI thread)
Create a BluetoothInputDevice proxy object for interacting with the local Bluetooth Service which handles the InputDevice profile
Initiate connection to a profile of the remote bluetooth device. <p> The system supports connection to multiple input devices. <p> This API returns false in scenarios like the profile on the device is already connected or Bluetooth is not turned on. When this API returns true, it is guaranteed that connection state intent for the profile will be broadcasted with the state. Users can get the connection state of the profile from this intent. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
Return number of bytes available before this stream will block.
Reads a single byte from this stream and returns it as an integer in the range from 0 to 255. Returns -1 if the end of the stream has been reached. Blocks until one byte has been read, the end of the source stream is detected or an exception is thrown.
Reads at most {@code length} bytes from this stream and stores them in the byte array {@code b} starting at {@code offset}.
Close this output stream and the socket associated with it.
Writes a single byte to this stream. Only the least significant byte of the integer {@code oneByte} is written to the stream.
Writes {@code count} bytes from the byte array {@code buffer} starting at position {@code offset} to this stream.
Create a BluetoothPan proxy object for interacting with the local Bluetooth Service which handles the Pan profile
Initiate connection to a profile of the remote bluetooth device. <p> This API returns false in scenarios like the profile on the device is already connected or Bluetooth is not turned on. When this API returns true, it is guaranteed that connection state intent for the profile will be broadcasted with the state. Users can get the connection state of the profile from this intent. <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
Create a BluetoothPbap proxy object.
Close the connection to the backing service. Other public functions of BluetoothPbap will return default error results once close() has been called. Multiple invocations of close() are ok.
Get the current state of the BluetoothPbap service.
Get the currently connected remote Bluetooth device (PCE).
Returns true if the specified Bluetooth device is connected (does not include connecting). Returns false if not connected, or if this proxy object is not currently connected to the Pbap service.
Disconnects the current Pbap client (PCE). Currently this call blocks, it may soon be made asynchronous. Returns false if this proxy object is not currently connected to the Pbap service.
Check class bits for possible PBAP support. This is a simple heuristic that tries to guess if a device with the given class bits might support PBAP. It is not accurate for all devices. It tries to err on the side of false positives.
Construct a socket for incoming connections.
Block until a connection is established. <p>Returns a connected {@link BluetoothSocket} on successful connection. <p>Once this call returns, it can be called again to accept subsequent incoming connections. <p>{@link #close} can be used to abort this call from another thread.
Block until a connection is established, with timeout. <p>Returns a connected {@link BluetoothSocket} on successful connection. <p>Once this call returns, it can be called again to accept subsequent incoming connections. <p>{@link #close} can be used to abort this call from another thread.
Immediately close this socket, and release all associated resources. <p>Causes blocked calls on this socket in other threads to immediately throw an IOException. <p>Closing the {@link BluetoothServerSocket} will <em>not</em> close any {@link BluetoothSocket} received from {@link #accept()}.
Returns the channel on which this socket is bound.
Construct a BluetoothSocket.
Construct a BluetoothSocket from address. Used by native code.
Attempt to connect to a remote device. <p>This method will block until a connection is made or the connection fails. If this method returns without an exception then this socket is now connected. <p>Creating new connections to remote Bluetooth devices should not be attempted while device discovery is in progress. Device discovery is a heavyweight procedure on the Bluetooth adapter and will significantly slow a device connection. Use {@link BluetoothAdapter#cancelDiscovery()} to cancel an ongoing discovery. Discovery is not managed by the Activity, but is run as a system service, so an application should always call {@link BluetoothAdapter#cancelDiscovery()} even if it did not directly request a discovery, just to be sure. <p>{@link #close} can be used to abort this call from another thread.
Immediately close this socket, and release all associated resources. <p>Causes blocked calls on this socket in other threads to immediately throw an IOException.
Get the remote device this socket is connecting, or connected, to.
Get the input stream associated with this socket. <p>The input stream will be returned even if the socket is not yet connected, but operations on that stream will throw IOException until the associated socket is connected.
Get the output stream associated with this socket. <p>The output stream will be returned even if the socket is not yet connected, but operations on that stream will throw IOException until the associated socket is connected.
Get the connection status of this socket, ie, whether there is an active connection with remote device.
Currently returns unix errno instead of throwing IOException, so that BluetoothAdapter can check the error code for EADDRINUSE
Begin monitoring connectivity
Disable connectivity to a network TODO: do away with return value after making MobileDataStateTracker async
Re-enable connectivity to a network after a {@link #teardown()}.
Turn the wireless radio off for a network.
Tells the underlying networking system that the caller wants to begin using the named feature. The interpretation of {@code feature} is completely up to each networking implementation. The interpretation of this value is specific to each networking implementation+feature combination, except that the value {@code -1} always indicates failure. TODO: needs to go away
Tells the underlying networking system that the caller is finished using the named feature. The interpretation of {@code feature} is completely up to each networking implementation. The interpretation of this value is specific to each networking implementation+feature combination, except that the value {@code -1} always indicates failure. TODO: needs to go away
Check if private DNS route is set for the network
Set a flag indicating private DNS route is set
Fetch NetworkInfo for the network
Fetch LinkProperties for the network
A capability is an Integer/String pair, the capabilities are defined in the class LinkSocket#Key.
Fetch default gateway address for the network
Check if default route is set
Set a flag indicating default route is set for the network
Return the system properties name associated with the tcp buffer sizes for this network.
Returns true if ParcelUuid is present in uuidArray
Returns true if there any common ParcelUuids in uuidA and uuidB.
Returns true if all the ParcelUuids in ParcelUuidB are present in ParcelUuidA
Extract the Service Identifier or the actual uuid from the Parcel Uuid. For example, if 0000110B-0000-1000-8000-00805F9B34FB is the parcel Uuid, this function will return 110B
Create from an existing rfcomm connection
Process an incoming AT command line
Register AT commands that are common to all Headset / Handsets. This function is called by the HeadsetBase constructor.
Returns true when either the asynchronous connect is in progress, or the connect is complete.  Call waitForAsyncConnect() to find out whether the connect is actually complete, or disconnect() to cancel.
Returns 1 when an async connect is complete, 0 on timeout, and -1 on error.  On error, handler will be called, and you need to re-initiate the async connect.
Note that if a remote side disconnects, this method will still return true until disconnect() is called.  You know when a remote side disconnects because you will receive the intent IBluetoothService.REMOTE_DEVICE_DISCONNECTED_ACTION.  If, when you get this intent, method isConnected() returns true, you know that the disconnect was initiated by the remote device.
Cast an IBinder object into an android.bluetooth.IBluetooth interface, generating a proxy if needed.
HID profile APIs
HDP profile APIs
Cast an IBinder object into an android.bluetooth.IBluetoothA2dp interface, generating a proxy if needed.
Public API
Internal APIs
Cast an IBinder object into an android.bluetooth.IBluetoothCallback interface, generating a proxy if needed.
Cast an IBinder object into an android.bluetooth.IBluetoothHeadset interface, generating a proxy if needed.
APIs that can be made public in future
Internal functions, not be made public
Cast an IBinder object into an android.bluetooth.IBluetoothHealthCallback interface, generating a proxy if needed.
Cast an IBinder object into an android.bluetooth.IBluetoothPbap interface, generating a proxy if needed.
Cast an IBinder object into an android.bluetooth.IBluetoothStateChangeCallback interface, generating a proxy if needed.
Convert Java change bits to native.
Unfortunately some developers (OpenFeint I am looking at you) have compared the configChanges bit field against absolute values, so if we introduce a new bit they break.  To deal with that, we will make sure the public field will not have a value that breaks them, and let the framework call here to get the real value.
Return the theme resource identifier to use for this activity.  If the activity defines a theme, that is used; else, the application theme is used.
Retrieve the textual description of the application.  This will call back on the given PackageManager to load the description from the application. the PackageManager from which you originally retrieved this item. If there is no description, null is returned.
Disable compatibility mode
Return whether this component and its enclosing application are enabled.
Return the icon resource identifier to use for this component.  If the component defines an icon, that is used; else, the application icon is used.
This method extracts the major and minor version of reqGLEsVersion attribute and returns it as a string. Say reqGlEsVersion value of 0x00010002 is returned as 1.2
Cast an IBinder object into an android.content.pm.IPackageDataObserver interface, generating a proxy if needed.
Cast an IBinder object into an android.content.pm.IPackageDeleteObserver interface, generating a proxy if needed.
Cast an IBinder object into an android.content.pm.IPackageInstallObserver interface, generating a proxy if needed.
Cast an IBinder object into an android.content.pm.IPackageManager interface, generating a proxy if needed.
This implements getInstalledPackages via a "last returned row" mechanism that is not exposed in the API. This is to get around the IPC limit that kicks in when flags are included that bloat up the data returned.
This implements getInstalledApplications via a "last returned row" mechanism that is not exposed in the API. This is to get around the IPC limit that kicks in when flags are included that bloat up the data returned.
Retrieve all applications that are marked as persistent.
Retrieve sync information for all content providers.
Install a package. {@link #REPLACE_EXISITING_PACKAGE} installation. This identifies which market the package came from.
Delete a package.
As per {@link android.content.pm.PackageManager#setComponentEnabledSetting}.
As per {@link android.content.pm.PackageManager#getComponentEnabledSetting}.
As per {@link android.content.pm.PackageManager#setApplicationEnabledSetting}.
As per {@link android.content.pm.PackageManager#getApplicationEnabledSetting}.
Set whether the given package should be considered stopped, making it not visible to implicit intents that filter out stopped packages.
Free storage by deleting LRU sorted list of cache files across all applications. If the currently available free storage on the device is greater than or equal to the requested free storage, no cache files are cleared. If the currently available storage on the device is less than the requested free storage, some or all of the cache files across all applications are deleted (based on last accessed time) to increase the free storage space on the device to the requested value. There is no guarantee that clearing all the cache files from all applications will clear up enough storage to achieve the desired value. freed by the system. Say if freeStorageSize is XX, and the current free storage is YY, if XX is less than YY, just return. if not free XX-YY number of bytes if possible. the operation is completed
Free storage by deleting LRU sorted list of cache files across all applications. If the currently available free storage on the device is greater than or equal to the requested free storage, no cache files are cleared. If the currently available storage on the device is less than the requested free storage, some or all of the cache files across all applications are deleted (based on last accessed time) to increase the free storage space on the device to the requested value. There is no guarantee that clearing all the cache files from all applications will clear up enough storage to achieve the desired value. freed by the system. Say if freeStorageSize is XX, and the current free storage is YY, if XX is less than YY, just return. if not free XX-YY number of bytes if possible. notify when the operation is completed.May be null to indicate that no call back is desired.
Delete all the cache files in an applications cache directory files need to be deleted
Clear the user data directory of an application. files need to be deleted
Get package statistics including the code, data and cache size for an already installed package retrieval of information is complete.
Get a list of shared libraries that are available on the system.
Get a list of features that are available on the system.
Ask the package manager to perform boot-time dex-opt of all existing packages.
Ask the package manager to perform dex-opt (if needed) on the given package, if it already hasn't done mode.  Only does this if running in the special development "no pre-dexopt" mode.
Update status of external media on the package manager to scan and install packages installed on the external media. Like say the MountService uses this to call into the package manager to update status of sdcard.
Cast an IBinder object into an android.content.pm.IPackageMoveObserver interface, generating a proxy if needed.
Cast an IBinder object into an android.content.pm.IPackageStatsObserver interface, generating a proxy if needed.
Create a labeled intent from the given intent, supplying the label and icon resources for it.
Create a labeled intent from the given intent, supplying a textual label and icon resource for it.
Create a labeled intent with no intent data but supplying the label and icon resources for it.
Create a labeled intent with no intent data but supplying a textual label and icon resource for it.
Return the name of the package holding label and icon resources.
Return any resource identifier that has been given for the label text.
Return any concrete text that has been given for the label text.
Return any resource identifier that has been given for the label icon.
Retrieve the label associated with this object.  If the object does not have a label, null will be returned, in which case you will probably want to load the label from the underlying resolved info for the Intent.
Retrieve the icon associated with this object.  If the object does not have a icon, null will be returned, in which case you will probably want to load the icon from the underlying resolved info for the Intent.
Retrieve the current textual label associated with this item.  This will call back on the given PackageManager to load the label from the application. the PackageManager from which you originally retrieved this item. item does not have a label, its name is returned.
Retrieve the current graphical icon associated with this item.  This will call back on the given PackageManager to load the icon from the application. the PackageManager from which you originally retrieved this item. item does not have an icon, the item's default icon is returned such as the default activity icon.
Retrieve the default graphical icon associated with this item. the PackageManager from which you originally retrieved this item. such as the default activity icon.
Retrieve the current graphical logo associated with this item. This will call back on the given PackageManager to load the logo from the application. the PackageManager from which you originally retrieved this item. does not have a logo, this method will return null.
Retrieve the default graphical logo associated with this item. the PackageManager from which you originally retrieved this item. or null if no default logo is available.
Load an XML resource attached to the meta-data of this item.  This will retrieved the name meta-data entry, and if defined call back on the given PackageManager to load its XML file from the application. the PackageManager from which you originally retrieved this item. assigned as the given meta-data.  If the meta-data name is not defined or the XML resource could not be found, null is returned.
Get the ApplicationInfo for the application to which this item belongs, if available, otherwise returns null.
Retrieve overall information about an application package that is installed on the system. <p> Throws {@link NameNotFoundException} if a package with the given name can not be found on the system.
Checks to see if the user id is the same for the two uids, i.e., they belong to the same user.
Returns the user id for a given uid.
Returns the uid that is composed from the userId and the appId.
Returns the app id (or base uid) for a given uid, stripping out the user id from it.
Generate and return the {@link PackageInfo} for a parsed package.
Utility method that retrieves just the package name and install location from the apk location at the given file path.
Appends a parcel to this list slice.
Populates a list and discards the internal state of the ParceledListSlice in the process. The instance should not be used anymore.
Sets whether this is the last list slice in the series.
Returns whether this is the last slice in a series of slices.
Retrieve the textual description of this permission.  This will call back on the given PackageManager to load the description from the application. the PackageManager from which you originally retrieved this item. If there is no description, null is returned.
Accessor for the registered authenticators.
registered authenticators.
Stops the monitoring of package additions, removals and changes.
Read all sync status back in to the initial engine state.
Write all sync status to the sync status file.
Retrieve the current textual label associated with this resolution.  This will call back on the given PackageManager to load the label from the application. the PackageManager from which you originally retrieved this item. item does not have a label, its name is returned.
Retrieve the current graphical icon associated with this resolution.  This will call back on the given PackageManager to load the icon from the application. the PackageManager from which you originally retrieved this item. item does not have an icon, the default activity icon is returned.
Return the icon resource identifier to use for this match.  If the match defines an icon, that is used; else if the activity defines an icon, that is used; else, the application icon is used.
Create Signature from an existing raw byte array.
Create Signature from a text representation previously returned by {@link #toChars} or {@link #toCharsString()}. Signatures are expected to be a hex-encoded ASCII string.
Encode the Signature as ASCII text.
Encode the Signature as ASCII text in to an existing array. to the array. to hold the ASCII representation, or a newly created char[] array if needed.
Return the result of {@link #toChars()} as a String.
Returns the public key for this signature.
Create a verifier device identity from a long.
Generate a new device identity.
Generate a new device identity using a provided random number generator class. This is used for testing.
TODO move this out to its own class (android.util.Base32)
Creates an object that represents a verifier info object.
Create a new AssetFileDescriptor from the given values. This must be 0 if length is UNKNOWN_LENGTH. {@link #UNKNOWN_LENGTH} if it extends to the end of the file.
The AssetFileDescriptor contains its own ParcelFileDescriptor, which in addition to the normal FileDescriptor object also allows you to close the descriptor when you are done with it.
Returns the FileDescriptor that can be used to read the data in the file.
Returns the byte offset where this asset entry's data starts.
Returns the total number of bytes of this asset entry's data.  May be {@link #UNKNOWN_LENGTH} if the asset extends to the end of the file. If the AssetFileDescriptor was constructed with {@link #UNKNOWN_LENGTH}, this will use {@link ParcelFileDescriptor#getStatSize() ParcelFileDescriptor.getStatSize()} to find the total size of the file, returning that number if found or {@link #UNKNOWN_LENGTH} if it could not be determined.
Return the actual number of bytes that were declared when the AssetFileDescriptor was constructed.  Will be {@link #UNKNOWN_LENGTH} if the length was not declared, meaning data should be read to the end of the file.
Convenience for calling <code>getParcelFileDescriptor().close()</code>.
Create and return a new auto-close input stream for this asset.  This will either return a full asset {@link AutoCloseInputStream}, or an underlying {@link ParcelFileDescriptor.AutoCloseInputStream ParcelFileDescriptor.AutoCloseInputStream} depending on whether the the object represents a complete file or sub-section of a file.  You should only call this once for a particular asset.
Create and return a new auto-close output stream for this asset.  This will either return a full asset {@link AutoCloseOutputStream}, or an underlying {@link ParcelFileDescriptor.AutoCloseOutputStream ParcelFileDescriptor.AutoCloseOutputStream} depending on whether the the object represents a complete file or sub-section of a file.  You should only call this once for a particular asset.
Parcelable interface
Create a new AssetManager containing only the basic system assets. Applications will not generally use this method, instead retrieving the appropriate asset manager with {@link Resources#getAssets}.    Not for use by applications. {@hide}
Return a global shared asset manager that provides access to only system assets (no application assets). {@hide}
Close this asset manager.
Retrieve the string value associated with a particular resource identifier for the current configuration / skin.
Retrieve the string value associated with a particular resource identifier for the current configuration / skin.
Retrieve the string array associated with a particular resource identifier.
Retrieve the text array associated with a particular resource identifier.
Open an asset using ACCESS_STREAMING mode.  This provides access to files that have been bundled with an application as assets -- that is, files placed in to the "assets" directory.
Open an asset using an explicit access mode, returning an InputStream to read its contents.  This provides access to files that have been bundled with an application as assets -- that is, files placed in to the "assets" directory.
Return a String array of all the assets at the given path.
{@hide} Open a non-asset file as an asset using a specific access mode.  This provides direct access to all of the files included in an application package (not only its assets).  Applications should not normally use this.
{@hide} Open a non-asset in a specified package.  Not for use by applications.
Retrieve a parser for a compiled XML file.
{@hide} Retrieve a non-asset as a compiled XML file.  Not for use by applications.
Add multiple sets of assets to the asset manager at once.  See {@link #addAssetPath(String)} for more information.  Returns array of cookies for each added asset with 0 indicating failure, or null if the input array of paths is null. {@hide}
Creates a ColorStateList that returns the specified mapping from states to colors.
Creates or retrieves a ColorStateList that always returns a single color.
Create a ColorStateList from an XML document, given a set of {@link Resources}.
Create from inside an XML document.  Called on a parser positioned at a tag in an XML document, tries to create a ColorStateList from that tag. Returns null if the tag is not a valid ColorStateList.
Creates a new ColorStateList that has the same states and colors as this one but where each color has the specified alpha value (0-255).
Fill in this object based on the contents of an XML "selector" element.
Return the color associated with the given set of {@link android.view.View} states. {@link ColorStateList} that matches the stateSet.
Return the default color in this {@link ColorStateList}.
Returns the translator which translates the coordinates in compatibility mode.
Translate the screen rect to the application frame.
Translate the region in window to screen.
Apply translation to the canvas that is necessary to draw the content.
Translate the motion event captured on screen to the application's window.
Translate the window's layout parameter, from application's view to Screen's view.
Translate a Rect in application's window to screen.
Translate a Rect in screen coordinates into the app window's coordinates.
Translate a Point in screen coordinates into the app window's coordinates.
Translate the location of the sub window.
Translate the content insets in application window to Screen. This uses the internal buffer for content insets to avoid extra object allocation.
Translate the visible insets in application window to Screen. This uses the internal buffer for visible insets to avoid extra object allocation.
Translate the touchable area in application window to Screen. This uses the internal buffer for touchable area to avoid extra object allocation.
Compute the frame Rect for applications runs under compatibility mode.
Check if the Configuration's current {@link #screenLayout} is at least the given size. {@link #SCREENLAYOUT_SIZE_NORMAL}, {@link #SCREENLAYOUT_SIZE_LARGE}, or {@link #SCREENLAYOUT_SIZE_XLARGE}. the given size.
Construct an invalid Configuration.  You must call {@link #setToDefaults} for this object to be valid.  {@more}
Makes a deep copy suitable for modification.
Set this object to the system defaults.
Copy the fields from delta into this Configuration object, keeping track of which ones have changed.  Any undefined fields in <var>delta</var> are ignored and not copied in to the current Configuration. {@link #diff}.
Return a bit mask of the differences between this Configuration object and the given one.  Does not change the values of either.  Any undefined fields in <var>delta</var> are ignored. values has changed, containing any combination of {@link android.content.pm.ActivityInfo#CONFIG_FONT_SCALE PackageManager.ActivityInfo.CONFIG_FONT_SCALE}, {@link android.content.pm.ActivityInfo#CONFIG_MCC PackageManager.ActivityInfo.CONFIG_MCC}, {@link android.content.pm.ActivityInfo#CONFIG_MNC PackageManager.ActivityInfo.CONFIG_MNC}, {@link android.content.pm.ActivityInfo#CONFIG_LOCALE PackageManager.ActivityInfo.CONFIG_LOCALE}, {@link android.content.pm.ActivityInfo#CONFIG_TOUCHSCREEN PackageManager.ActivityInfo.CONFIG_TOUCHSCREEN}, {@link android.content.pm.ActivityInfo#CONFIG_KEYBOARD PackageManager.ActivityInfo.CONFIG_KEYBOARD}, {@link android.content.pm.ActivityInfo#CONFIG_NAVIGATION PackageManager.ActivityInfo.CONFIG_NAVIGATION}, {@link android.content.pm.ActivityInfo#CONFIG_ORIENTATION PackageManager.ActivityInfo.CONFIG_ORIENTATION}, {@link android.content.pm.ActivityInfo#CONFIG_SCREEN_LAYOUT PackageManager.ActivityInfo.CONFIG_SCREEN_LAYOUT}, or {@link android.content.pm.ActivityInfo#CONFIG_SCREEN_SIZE PackageManager.ActivityInfo.CONFIG_SCREEN_SIZE}, or {@link android.content.pm.ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE PackageManager.ActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE}.
Determine if a new resource needs to be loaded from the bit set of configuration changes returned by {@link #updateFrom(Configuration)}. {@link #updateFrom(Configuration)}. can handled, as given in {@link android.util.TypedValue#changingConfigurations}.
that 'this' is your current sequence and 'other' is a new one you have received some how and want to compare with what you have.
Parcelable methods
Construct this Configuration object, reading from the Parcel.
Scan a file for OBB information.
Create a new Resources object on top of an existing set of assets in an AssetManager.
Creates a new Resources object with CompatibilityInfo. info when it's null.
Return a global shared Resources object that provides access to only system resources (no application resources), and is not configured for the current screen (can not use dimension units, does not change based on orientation, etc).
Return the string value associated with a particular resource ID.  The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled. {@more}
Return the character sequence associated with a particular resource ID for a particular numerical quantity. <p>See <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a> for more on quantity strings.
Return the string value associated with a particular resource ID.  It will be stripped of any styled text information. {@more} stripped of styled text information.
Return the string value associated with a particular resource ID, substituting the format arguments as defined in {@link java.util.Formatter} and {@link java.lang.String#format}. It will be stripped of any styled text information. {@more} stripped of styled text information.
Return the string value associated with a particular resource ID for a particular numerical quantity, substituting the format arguments as defined in {@link java.util.Formatter} and {@link java.lang.String#format}. It will be stripped of any styled text information. {@more} <p>See <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a> for more on quantity strings. stripped of styled text information.
Return the string value associated with a particular resource ID for a particular numerical quantity. <p>See <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a> for more on quantity strings. stripped of styled text information.
Return the string value associated with a particular resource ID.  The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled.
Return the styled text array associated with a particular resource ID.
Return the string array associated with a particular resource ID.
Return the int array associated with a particular resource ID.
Return an array of heterogeneous values. Be sure to call {@link TypedArray#recycle() TypedArray.recycle()} when done with it.
Retrieve a dimensional for a particular resource ID.  Unit conversions are based on the current {@link DisplayMetrics} associated with the resources. metric.
Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels.  This is the same as {@link #getDimension}, except the returned value is converted to integer pixels for you.  An offset conversion involves simply truncating the base value to an integer. metric and truncated to integer pixels.
Retrieve a dimensional for a particular resource ID for use as a size in raw pixels.  This is the same as {@link #getDimension}, except the returned value is converted to integer pixels for use as a size.  A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size. metric and truncated to integer pixels.
Retrieve a fractional unit for a particular resource ID. base value.
Return a drawable object associated with a particular resource ID. Various types of objects will be returned depending on the underlying resource -- for example, a solid color, PNG image, scalable image, etc. The Drawable API hides these implementation details.
Return a drawable object associated with a particular resource ID for the given screen density in DPI. This will set the drawable's density to be the device's density multiplied by the ratio of actual drawable density to requested density. This allows the drawable to be scaled up to the correct size if needed. Various types of objects will be returned depending on the underlying resource -- for example, a solid color, PNG image, scalable image, etc. The Drawable API hides these implementation details.
Return a movie object associated with the particular resource ID.
Return a color integer associated with a particular resource ID. If the resource holds a complex {@link android.content.res.ColorStateList}, then the default color from the set is returned.
Return a color state list associated with a particular resource ID.  The resource may contain either a single raw color value, or a complex {@link android.content.res.ColorStateList} holding multiple possible colors. solid color or multiple colors that can be selected based on a state.
Return a boolean associated with a particular resource ID.  This can be used with any integral resource value, and will return true if it is non-zero.
Return an integer associated with a particular resource ID.
Return an XmlResourceParser through which you can read a view layout description for the given resource ID.  This parser has limited functionality -- in particular, you can't change its input, and only the high-level events are available. <p>This function is really a simple wrapper for calling {@link #getXml} with a layout resource.
Return an XmlResourceParser through which you can read an animation description for the given resource ID.  This parser has limited functionality -- in particular, you can't change its input, and only the high-level events are available. <p>This function is really a simple wrapper for calling {@link #getXml} with an animation resource.
Return an XmlResourceParser through which you can read a generic XML resource for the given resource ID. <p>The XmlPullParser implementation returned here has some limited functionality.  In particular, you can't change its input, and only high-level parsing events are available (since the document was pre-parsed for you at build time, which involved merging text and stripping comments).
Open a data stream for reading a raw resource.  This can only be used with resources whose value is the name of an asset files -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources.
Open a data stream for reading a raw resource.  This can only be used with resources whose value is the name of an asset file -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources.
Open a file descriptor for reading a raw resource.  This can only be used with resources whose value is the name of an asset files -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources. <p>This function only works for resources that are stored in the package as uncompressed data, which typically includes things like mp3 files and png images. the resource.  This includes the file descriptor itself, as well as the offset and length of data where the resource appears in the file.  A null is returned if the file exists but is compressed.
Return the raw data associated with a particular resource ID.
Get the raw value associated with a resource with associated density.
Return the raw data associated with a particular resource ID. See getIdentifier() for information on how names are mapped to resource IDs, and getString(int) for information on how string resources are retrieved. <p>Note: use of this function is discouraged.  It is much more efficient to retrieve resources by identifier than by name.
Place new attribute values into the theme.  The style resource specified by <var>resid</var> will be retrieved from this Theme's resources, its values placed into the Theme object. <p>The semantics of this function depends on the <var>force</var> argument:  If false, only values that are not already defined in the theme will be copied from the system resource; otherwise, if any of the style's attributes are already defined in the theme, the current values in the theme will be overwritten.
Set this theme to hold the same contents as the theme <var>other</var>.  If both of these themes are from the same Resources object, they will be identical after this function returns.  If they are from different Resources, only the resources they have in common will be set in this theme.
Return a StyledAttributes holding the values defined by <var>Theme</var> which are listed in <var>attrs</var>. <p>Be sure to call StyledAttributes.recycle() when you are done with the array. Be sure to call {@link TypedArray#recycle() TypedArray.recycle()} when done with it.
Return a StyledAttributes holding the values defined by the style resource <var>resid</var> which are listed in <var>attrs</var>. <p>Be sure to call StyledAttributes.recycle() when you are done with the array. Be sure to call {@link TypedArray#recycle() TypedArray.recycle()} when done with it.
Return a StyledAttributes holding the attribute values in <var>set</var> that are listed in <var>attrs</var>.  In addition, if the given AttributeSet specifies a style class (through the "style" attribute), that style will be applied on top of the base attributes it defines. <p>Be sure to call StyledAttributes.recycle() when you are done with the array. <p>When determining the final value of a particular attribute, there are four inputs that come into play:</p> <ol> </ol> <p>Each of these inputs is considered in-order, with the first listed taking precedence over the following ones.  In other words, if in the AttributeSet you have supplied <code>&lt;Button textColor="#ff000000"&gt;</code>, then the button's text will <em>always</em> be black, regardless of what is specified in any of the styles. Be sure to call {@link TypedArray#recycle() TypedArray.recycle()} when done with it.
Retrieve the value of an attribute in the Theme.  The contents of <var>outValue</var> are ultimately filled in by {@link Resources#getValue}.
Print contents of this theme out to the log.  For debugging only.
Generate a new Theme object for this set of Resources.  It initially starts out empty.
Retrieve a set of basic attribute values from an AttributeSet, not performing styling of them using a theme and/or style resources. Be sure to call {@link TypedArray#recycle() TypedArray.recycle()} when done with it.
Store the newly updated configuration.
Update the system resources configuration if they have previously been initialized.
Return the current display metrics that are in effect for this resource object.  The returned object should be treated as read-only.
Return the current configuration that is in effect for this resource object.  The returned object should be treated as read-only.
Return the compatibility mode information for the application. The returned object should be treated as read-only.
This is just for testing.
Return a resource identifier for the given resource name.  A fully qualified resource name is of the form "package:type/entry".  The first two components (package and type) are optional if defType and defPackage, respectively, are specified here. <p>Note: use of this function is discouraged.  It is much more efficient to retrieve resources by identifier than by name.
Return the full name for a given resource identifier.  This name is a single string of the form "package:type/entry".
Return the package name for a given resource identifier. retrieved.
Return the type name for a given resource identifier. retrieved.
Return the entry name for a given resource identifier. retrieved.
Parse a series of {@link android.R.styleable#Extra &lt;extra&gt;} tags from an XML file.  You call this when you are at the parent tag of the extra tags, and it will return once all of the child tags have been parsed. This will call {@link #parseBundleExtra} for each extra tag encountered.
Parse a name/value pair out of an XML tag holding that data.  The AttributeSet must be holding the data defined by {@link android.R.styleable#Extra}.  The following value types are supported: <ul> <li> {@link TypedValue#TYPE_STRING}: {@link Bundle#putCharSequence Bundle.putCharSequence()} <li> {@link TypedValue#TYPE_INT_BOOLEAN}: {@link Bundle#putCharSequence Bundle.putBoolean()} <li> {@link TypedValue#TYPE_FIRST_INT}-{@link TypedValue#TYPE_LAST_INT}: {@link Bundle#putCharSequence Bundle.putBoolean()} <li> {@link TypedValue#TYPE_FLOAT}: {@link Bundle#putCharSequence Bundle.putFloat()} </ul> only used for reporting error messages.
Retrieve underlying AssetManager storage for these resources.
Call this to remove all cached loaded layout resources from the Resources object.  Only intended for use with performance testing tools.
Start preloading of resource data using this Resources object.  Only for use by the zygote process for loading common system resources. {@hide}
Called by zygote when it is done preloading resources, to change back to normal Resources operation.
If a translator has messed up the edges of paragraph-level markup, fix it to actually cover the entire paragraph that it is attached to instead of just whatever range they put it on.
Create from an existing string block native object.  This is -extremely- dangerous -- only use it if you absolutely know what you are doing!  The given native object must exist for the entire lifetime of this newly creating StringBlock.
Return the number of values in this array.
Return the number of indices in the array that actually have data.
Return an index in the array that has data. {@link #getIndexCount()}. {@link #getValue} and related APIs.
Return the Resources object this array was loaded from.
Retrieve the styled string value for the attribute at <var>index</var>.
Retrieve the string value for the attribute at <var>index</var>. removed.  Returns null if the attribute is not defined.
Retrieve the string value for the attribute at <var>index</var>, but only if that string comes from an immediate value in an XML file.  That is, this does not allow references to string resources, string attributes, or conversions from other types.  As such, this method will only return strings for TypedArray objects that come from attributes in an XML file. removed.  Returns null if the attribute is not defined or is not an immediate string value.
Retrieve the string value for the attribute at <var>index</var> that is not allowed to change with the given configurations. ActivityInfo that are allowed to change. removed.  Returns null if the attribute is not defined.
Retrieve the boolean value for the attribute at <var>index</var>.
Retrieve the integer value for the attribute at <var>index</var>.
Retrieve the float value for the attribute at <var>index</var>.
Retrieve the color value for the attribute at <var>index</var>.  If the attribute references a color resource holding a complex {@link android.content.res.ColorStateList}, then the default color from the set is returned.
Retrieve the ColorStateList for the attribute at <var>index</var>. The value may be either a single solid color or a reference to a color or complex {@link android.content.res.ColorStateList} description.
Retrieve the integer value for the attribute at <var>index</var>.
Retrieve a dimensional unit attribute at <var>index</var>.  Unit conversions are based on the current {@link DisplayMetrics} associated with the resources this {@link TypedArray} object came from. metric, or defValue if not defined.
Retrieve a dimensional unit attribute at <var>index</var> for use as an offset in raw pixels.  This is the same as {@link #getDimension}, except the returned value is converted to integer pixels for you.  An offset conversion involves simply truncating the base value to an integer. metric and truncated to integer pixels, or defValue if not defined.
Retrieve a dimensional unit attribute at <var>index</var> for use as a size in raw pixels.  This is the same as {@link #getDimension}, except the returned value is converted to integer pixels for use as a size.  A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size. metric and truncated to integer pixels, or defValue if not defined.
Special version of {@link #getDimensionPixelSize} for retrieving {@link android.view.ViewGroup}'s layout_width and layout_height attributes.  This is only here for performance reasons; applications should use {@link #getDimensionPixelSize}. metric and truncated to integer pixels.
Special version of {@link #getDimensionPixelSize} for retrieving {@link android.view.ViewGroup}'s layout_width and layout_height attributes.  This is only here for performance reasons; applications should use {@link #getDimensionPixelSize}. default or contains the wrong type of data. metric and truncated to integer pixels.
Retrieve a fractional unit attribute at <var>index</var>. base value, or defValue if not defined.
Retrieve the resource identifier for the attribute at <var>index</var>.  Note that attribute resource as resolved when the overall {@link TypedArray} object is retrieved.  As a result, this function will return the resource identifier of the final resource value that was found, <em>not</em> necessarily the original resource that was specified by the attribute.
Retrieve the Drawable for the attribute at <var>index</var>.  This gets the resource ID of the selected attribute, and uses {@link Resources#getDrawable Resources.getDrawable} of the owning Resources object to retrieve its Drawable.
Retrieve the CharSequence[] for the attribute at <var>index</var>. This gets the resource ID of the selected attribute, and uses {@link Resources#getTextArray Resources.getTextArray} of the owning Resources object to retrieve its String[].
Retrieve the raw TypedValue for the attribute at <var>index</var>.
Determines whether there is an attribute at <var>index</var>.
Retrieve the raw TypedValue for the attribute at <var>index</var> and return a temporary object holding its data.  This object is only valid until the next call on to {@link TypedArray}.
Returns a message about the parser state suitable for printing error messages.
Give back a previously retrieved StyledAttributes, for later re-use.
package*/ final class Parser implements XmlResourceParser {
Create from an existing xml block native object.  This is -extremely- dangerous -- only use it if you absolutely know what you are doing!  The given native object must exist for the entire lifetime of this newly creating XmlBlock.
Creates an {@link AbstractThreadedSyncAdapter}. {@link ContentResolver#SYNC_EXTRAS_INITIALIZE} set will be internally handled by {@link AbstractThreadedSyncAdapter} by calling {@link ContentResolver#setIsSyncable(android.accounts.Account, String, int)} with 1 if it is currently set to <0.
Creates an {@link AbstractThreadedSyncAdapter}. {@link ContentResolver#SYNC_EXTRAS_INITIALIZE} set will be internally handled by {@link AbstractThreadedSyncAdapter} by calling {@link ContentResolver#setIsSyncable(android.accounts.Account, String, int)} with 1 if it is currently set to <0. at the same time, each in their own thread. This must be consistent with the setting in the SyncAdapter's configuration file.
Indicates that a sync operation has been canceled. This will be invoked on a separate thread than the sync thread and so you must consider the multi-threaded implications of the work that you do in this method. <p> This will only be invoked when the SyncAdapter indicates that it doesn't support parallel syncs.
Indicates that a sync operation has been canceled. This will be invoked on a separate thread than the sync thread and so you must consider the multi-threaded implications of the work that you do in this method. <p> This will only be invoked when the SyncAdapter indicates that it does support parallel syncs.
This method begins an asynchronous query. When the query is done {@link #onQueryComplete} is called. the query.
Attempts to cancel operation that has not already started. Note that there is no guarantee that the operation will be canceled. They still may result in a call to on[Query/Insert/Update/Delete]Complete after this call has completed. If multiple operations have the same token they will all be canceled.
This method begins an asynchronous insert. When the insert operation is done {@link #onInsertComplete} is called. the insert operation.
This method begins an asynchronous update. When the update operation is done {@link #onUpdateComplete} is called. the update operation.
This method begins an asynchronous delete. When the delete operation is done {@link #onDeleteComplete} is called. the delete operation.
Called when an asynchronous query is completed.
Called when an asynchronous insert is completed.
Called when an asynchronous update is completed.
Called when an asynchronous delete is completed.
Set amount to throttle updates by.  This is the minimum time from when the last {@link #onLoadInBackground()} call has completed until a new load is scheduled.
Attempt to cancel the current load task. See {@link AsyncTask#cancel(boolean)} for more info.  Must be called on the main thread of the process. <p>Cancelling is not an immediate operation, since the load is performed in a background thread.  If there is currently a load in progress, this method requests that the load be cancelled, and notes this is the case; once the background thread has completed its work its remaining state will be cleared.  If another load request comes in during this time, it will be held until the cancelled load is complete.
Called on a worker thread to perform the actual load. Implementations should not deliver the result directly, but should return them from this method, which will eventually end up calling {@link #deliverResult} on the UI thread. If implementations need to process the results on the UI thread they may override {@link #deliverResult} and do so there.
Version of {@link BroadcastReceiver#setResultCode(int) BroadcastReceiver.setResultCode(int)} for asynchronous broadcast handling.
Version of {@link BroadcastReceiver#getResultCode() BroadcastReceiver.getResultCode()} for asynchronous broadcast handling.
Version of {@link BroadcastReceiver#setResultData(String) BroadcastReceiver.setResultData(String)} for asynchronous broadcast handling.
Version of {@link BroadcastReceiver#getResultData() BroadcastReceiver.getResultData()} for asynchronous broadcast handling.
Version of {@link BroadcastReceiver#setResultExtras(Bundle) BroadcastReceiver.setResultExtras(Bundle)} for asynchronous broadcast handling.
Version of {@link BroadcastReceiver#getResultExtras(boolean) BroadcastReceiver.getResultExtras(boolean)} for asynchronous broadcast handling.
Version of {@link BroadcastReceiver#setResult(int, String, Bundle) BroadcastReceiver.setResult(int, String, Bundle)} for asynchronous broadcast handling.
Version of {@link BroadcastReceiver#getAbortBroadcast() BroadcastReceiver.getAbortBroadcast()} for asynchronous broadcast handling.
Version of {@link BroadcastReceiver#abortBroadcast() BroadcastReceiver.abortBroadcast()} for asynchronous broadcast handling.
Version of {@link BroadcastReceiver#clearAbortBroadcast() BroadcastReceiver.clearAbortBroadcast()} for asynchronous broadcast handling.
Finish the broadcast.  The current result will be sent and the next broadcast will proceed.
This can be called by an application in {@link #onReceive} to allow it to keep the broadcast active after returning from that function. This does <em>not</em> change the expectation of being relatively responsive to the broadcast (finishing it within 10s), but does allow the implementation to move work related to it over to another thread to avoid glitching the main UI thread due to disk IO. the active broadcast.  The BroadcastRecord itself is no longer active; all data and other interaction must go through {@link PendingResult} APIs.  The {@link PendingResult#finish PendingResult.finish()} method must be called once processing of the broadcast is done.
Provide a binder to an already-running service.  This method is synchronous and will not start the target service if it is not present, so it is safe to call from {@link #onReceive}. Context#startService(Intent)} for more information.
Change the current result code of this broadcast; only works with broadcasts sent through {@link Context#sendOrderedBroadcast(Intent, String) Context.sendOrderedBroadcast}.  Often uses the Activity {@link android.app.Activity#RESULT_CANCELED} and {@link android.app.Activity#RESULT_OK} constants, though the actual meaning of this value is ultimately up to the broadcaster. <p class="note">This method does not work with non-ordered broadcasts such as those sent with {@link Context#sendBroadcast(Intent) Context.sendBroadcast}</p>
Retrieve the current result code, as set by the previous receiver.
Change the current result data of this broadcast; only works with broadcasts sent through {@link Context#sendOrderedBroadcast(Intent, String) Context.sendOrderedBroadcast}.  This is an arbitrary string whose interpretation is up to the broadcaster. <p><strong>This method does not work with non-ordered broadcasts such as those sent with {@link Context#sendBroadcast(Intent) Context.sendBroadcast}</strong></p>
Retrieve the current result data, as set by the previous receiver. Often this is null.
Change the current result extras of this broadcast; only works with broadcasts sent through {@link Context#sendOrderedBroadcast(Intent, String) Context.sendOrderedBroadcast}.  This is a Bundle holding arbitrary data, whose interpretation is up to the broadcaster.  Can be set to null.  Calling this method completely replaces the current map (if any). <p><strong>This method does not work with non-ordered broadcasts such as those sent with {@link Context#sendBroadcast(Intent) Context.sendBroadcast}</strong></p>
Retrieve the current result extra data, as set by the previous receiver. Any changes you make to the returned Map will be propagated to the next receiver.
Change all of the result data returned from this broadcasts; only works with broadcasts sent through {@link Context#sendOrderedBroadcast(Intent, String) Context.sendOrderedBroadcast}.  All current result data is replaced by the value given to this method. <p><strong>This method does not work with non-ordered broadcasts such as those sent with {@link Context#sendBroadcast(Intent) Context.sendBroadcast}</strong></p> Activity {@link android.app.Activity#RESULT_CANCELED} and {@link android.app.Activity#RESULT_OK} constants, though the actual meaning of this value is ultimately up to the broadcaster. string whose interpretation is up to the broadcaster; may be null. holding arbitrary data, whose interpretation is up to the broadcaster.  Can be set to null.  This completely replaces the current map (if any).
Returns the flag indicating whether or not this receiver should abort the current broadcast.
Sets the flag indicating that this receiver should abort the current broadcast; only works with broadcasts sent through {@link Context#sendOrderedBroadcast(Intent, String) Context.sendOrderedBroadcast}.  This will prevent any other broadcast receivers from receiving the broadcast. It will still call {@link #onReceive} of the BroadcastReceiver that the caller of {@link Context#sendOrderedBroadcast(Intent, String) Context.sendOrderedBroadcast} passed in. <p><strong>This method does not work with non-ordered broadcasts such as those sent with {@link Context#sendBroadcast(Intent) Context.sendBroadcast}</strong></p>
Clears the flag indicating that this receiver should abort the current broadcast.
Returns true if the receiver is currently processing an ordered broadcast.
Returns true if the receiver is currently processing the initial value of a sticky broadcast -- that is, the value that was last broadcast and is currently held in the sticky cache, so this is not directly the result of a broadcast right now.
For internal use, sets the hint about whether this BroadcastReceiver is running in ordered mode.
For internal use to set the result data that is active. @hide
For internal use to set the result data that is active. @hide
Control inclusion of debugging help for mismatched calls to {@ Context#registerReceiver(BroadcastReceiver, IntentFilter) Context.registerReceiver()}. If called with true, before given to registerReceiver(), then the callstack of the following {@link Context#unregisterReceiver(BroadcastReceiver) Context.unregisterReceiver()} call is retained, to be printed if a later incorrect unregister call is made.  Note that doing this requires retaining information about the BroadcastReceiver for the lifetime of the app, resulting in a leak -- this should only be used for debugging.
Return the last value given to {@link #setDebugUnregister}.
Sets the current primary clip on the clipboard.  This is the clip that is involved in normal cut and paste operations.
Returns the current primary clip on the clipboard.
Returns a description of the current primary clip on the clipboard but not a copy of its data.
Returns true if there is currently a primary clip on the clipboard.
the primary clip and tries to coerce it to a string.
creates a ClippedItem holding the given text and sets it as the primary clip.  It has no label or icon.
Create an Item consisting of a single block of (possibly styled) text.
Create an Item consisting of an arbitrary Intent.
Create an Item consisting of an arbitrary URI.
Create a complex Item, containing multiple representations of text, intent, and/or URI.
Retrieve the raw text contained in this Item.
Retrieve the raw Intent contained in this Item.
Retrieve the raw URI contained in this Item.
Turn this item into text, regardless of the type of data it actually contains. <p>The algorithm for deciding what text to return is: <ul> <li> If {@link #getText} is non-null, return that. <li> If {@link #getUri} is non-null, try to retrieve its data as a text stream from its content provider.  If this succeeds, copy the text into a String and return it.  If it is not a content: URI or the content provider does not supply a text representation, return the raw URI as a string. <li> If {@link #getIntent} is non-null, convert that to an intent: URI and returnit. <li> Otherwise, return an empty string. </ul> and other things can be retrieved. BEGIN_INCLUDE(coerceToText)
Create a new clip.
Create a new ClipData holding data of the type {@link ClipDescription#MIMETYPE_TEXT_PLAIN}.
Create a new ClipData holding an Intent with MIME type {@link ClipDescription#MIMETYPE_TEXT_INTENT}.
Create a new ClipData holding a URI.  If the URI is a content: URI, this will query the content provider for the MIME type of its data and use that as the MIME type.  Otherwise, it will use the MIME type {@link ClipDescription#MIMETYPE_TEXT_URILIST}.
Create a new ClipData holding an URI with MIME type {@link ClipDescription#MIMETYPE_TEXT_URILIST}. Unlike {@link #newUri(ContentResolver, CharSequence, Uri)}, nothing is inferred about the URI -- if it is a content: URI holding a bitmap, the reported type will still be uri-list.  Use this with care!
Return the {@link ClipDescription} associated with this data, describing what it contains.
Add a new Item to the overall ClipData container.
Return the number of items in the clip data.
Return a single item inside of the clip data.  The index can range from 0 to {@link #getItemCount()}-1.
Create a new clip.
Create a copy of a ClipDescription.
Helper to compare two MIME types, where one may be a pattern.
Return the label for this clip.
Check whether the clip description contains the given MIME type. matches the desired MIME type, else false.
Filter the clip description MIME types by the given MIME type.  Returns all MIME types in the clip that match the given MIME type. matching MIME types, null is returned.
Return the number of MIME types the clip is available in.
Return one of the possible clip MIME types.
Create a new component identifier. not be null. implements the component.  Can not be null.
Create a new component identifier from a Context and class name. from which the actual package name will be retrieved. implements the component.
Create a new component identifier from a Context and Class object. which the actual package name will be retrieved. actual class name will be retrieved.
Return the package name of this component.
Return the class name of this component.
Return the class name, either fully qualified or in a shortened form (with a leading '.') if it is a suffix of the package.
Return a String that unambiguously describes both the package and class names contained in the ComponentName.  You can later recover the ComponentName from this string through {@link #unflattenFromString(String)}. is represented as the package name, concatenated with a '/' and then the class name.
The same as {@link #flattenToString()}, but abbreviates the class name if it is a suffix of the package.  The result can still be used with {@link #unflattenFromString(String)}. is represented as the package name, concatenated with a '/' and then the class name.
Recover a ComponentName from a String that was previously created with {@link #flattenToString()}.  It splits the string at the first '/', taking the part before as the package name and the part after as the class name.  As a special convenience (to use, for example, when parsing component names on the command line), if the '/' is immediately followed by a '.' then the final class name will be the concatenation of the package name with the string following the '/'.  Thus "com.foo/.Blah" becomes package="com.foo" class="com.foo.Blah". names that were encoded in <var>str</var>
Return string representation of this class without the class's name as a prefix.
Write a ComponentName to a Parcel, handling null pointers.  Must be read with {@link #readFromParcel(Parcel)}.
Read a ComponentName from a Parcel that was previously written with {@link #writeToParcel(ComponentName, Parcel)}, returning either a null or new object as appropriate. object, or null if a null had been written.
Instantiate a new ComponentName from the data in a Parcel that was previously written with {@link #writeToParcel(Parcel, int)}.  Note that you must not use this with data written by {@link #writeToParcel(ComponentName, Parcel)} since it is not possible to handle a null ComponentObject here. positioned at the location in the buffer where it was written.
Constructor just for mocking. instance of {@link android.test.mock.MockContext}). test, which is available via {@link #getReadPermission()}. in the test, which is available via {@link #getWritePermission()}. in the test, which is available via {@link #getPathPermissions()}.
Given an IContentProvider, try to coerce it back to the real ContentProvider object if it is running in the local process.  This can be used if you know you are running in the same process as a provider, and want to get direct access to its implementation details.  Most clients should not nor have a reason to use it. ContentProvider instance.  Otherwise returns null.
Retrieves the Context this provider is running in.  Only available once {@link #onCreate} has been called -- this will return null in the constructor.
Change the permission required to read data from the content provider.  This is normally set for you from its manifest information when the provider is first created.
Return the name of the permission required for read-only access to this content provider.  This method can be called from multiple threads, as described in <a href="{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads">Processes and Threads</a>.
Change the permission required to read and write data in the content provider.  This is normally set for you from its manifest information when the provider is first created.
Return the name of the permission required for read/write access to this content provider.  This method can be called from multiple threads, as described in <a href="{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads">Processes and Threads</a>.
Change the path-based permission required to read and/or write data in the content provider.  This is normally set for you from its manifest information when the provider is first created.
Return the path-based permissions required for read and/or write access to this content provider.  This method can be called from multiple threads, as described in <a href="{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads">Processes and Threads</a>.
Override this to handle requests to insert a set of new rows, or the default implementation will iterate over the values and call {@link #insert} on each of them. As a courtesy, call {@link ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()} after inserting. This method can be called from multiple threads, as described in <a href="{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads">Processes and Threads</a>.
Override this to handle requests to open a file blob. The default implementation always throws {@link FileNotFoundException}. This method can be called from multiple threads, as described in <a href="{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads">Processes and Threads</a>. <p>This method returns a ParcelFileDescriptor, which is returned directly to the caller.  This way large data (such as images and documents) can be returned without copying the content. <p>The returned ParcelFileDescriptor is owned by the caller, so it is their responsibility to close it when done.  That is, the implementation of this method should create a new ParcelFileDescriptor for each call. "rw" for read and write access, or "rwt" for read and write access that truncates any existing file. the file. no file associated with the given URI or the mode is invalid. not have permission to access the file.
This is like {@link #openFile}, but can be implemented by providers that need to be able to return sub-sections of files, often assets inside of their .apk. This method can be called from multiple threads, as described in <a href="{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads">Processes and Threads</a>. <p>If you implement this, your clients must be able to deal with such file slices, either directly with {@link ContentResolver#openAssetFileDescriptor}, or by using the higher-level {@link ContentResolver#openInputStream ContentResolver.openInputStream} or {@link ContentResolver#openOutputStream ContentResolver.openOutputStream} methods. <p class="note">If you are implementing this to return a full file, you should create the AssetFileDescriptor with {@link AssetFileDescriptor#UNKNOWN_LENGTH} to be compatible with applications that can not handle sub-sections of files.</p> "w" for write-only access (erasing whatever data is currently in the file), "wa" for write-only access to append to any existing data, "rw" for read and write access on any existing data, and "rwt" for read and write access that truncates any existing file. the file. no file associated with the given URI or the mode is invalid. not have permission to access the file.
Convenience for subclasses that wish to implement {@link #openFile} by looking up a column named "_data" at the given URI. "w" for write-only access (erasing whatever data is currently in the file), "wa" for write-only access to append to any existing data, "rw" for read and write access on any existing data, and "rwt" for read and write access that truncates any existing file. client to access the file.
Called by a client to determine the types of data streams that this content provider supports for the given URI.  The default implementation returns null, meaning no types.  If your content provider stores data of a particular type, return that MIME type if it matches the given mimeTypeFilter.  If it can perform type conversions, return an array of all supported MIME types that match mimeTypeFilter. a pattern, such as *\/* to retrieve all possible data types. given mimeTypeFilter.  Otherwise returns an array of all available concrete MIME types.
Called by a client to open a read-only stream containing data of a particular MIME type.  This is like {@link #openAssetFile(Uri, String)}, except the file can only be read-only and the content provider may perform data conversions to generate data of the desired type. <p>The default implementation compares the given mimeType against the result of {@link #getType(Uri)} and, if the match, simple calls {@link #openAssetFile(Uri, String)}. <p>See {@link ClipData} for examples of the use and implementation of this method. a pattern, such as *\/*, if the caller does not have specific type requirements; in this case the content provider will pick its best type matching the pattern. these are specific to the content provider being called. read data of the desired type. no file associated with the given URI or the mode is invalid. not have permission to access the data. content provider does not support the requested MIME type.
A helper function for implementing {@link #openTypedAssetFile}, for creating a data pipe and background thread allowing you to stream generated data back to the client.  This function returns a new ParcelFileDescriptor that should be returned to the caller (the caller is responsible for closing it). stream the data. the pipe.  This should be returned to the caller for reading; the caller is responsible for closing it when done.
Returns true if this instance is a temporary content provider.
Returns the Binder object for this provider.
After being instantiated, this is called to tell the content provider about itself.
Override this to handle requests to perform a batch of operations, or the default implementation will iterate over the operations and call {@link ContentProviderOperation#apply} on each of them. If all calls to {@link ContentProviderOperation#apply} succeed then a {@link ContentProviderResult} array with as many elements as there were operations will be returned.  If any of the calls fail, it is up to the implementation how many of the others take effect. This method can be called from multiple threads, as described in <a href="{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads">Processes and Threads</a>.
Call a provider-defined method.  This can be used to implement interfaces that are cheaper and/or unnatural for a table-like model. the default for providers which don't implement any call methods.
Implement this to shut down the ContentProvider instance. You can then invoke this method in unit tests. <p> Android normally handles ContentProvider startup and shutdown automatically. You do not need to start up or shut down a ContentProvider. When you invoke a test method on a ContentProvider, however, a ContentProvider instance is started and keeps running after the test finishes, even if a succeeding test instantiates another ContentProvider. A conflict develops because the two instances are usually running against the same underlying data source (for example, an sqlite database). </p> <p> Implementing shutDown() avoids this conflict by providing a way to terminate the ContentProvider. This method can also prevent memory leaks from multiple instantiations of the ContentProvider, and it can ensure unit test isolation by allowing you to completely clean up the test fixture before moving on to the next test. </p>
See {@link ContentProvider#query ContentProvider.query}
See {@link ContentProvider#getType ContentProvider.getType}
See {@link ContentProvider#getStreamTypes ContentProvider.getStreamTypes}
See {@link ContentProvider#insert ContentProvider.insert}
See {@link ContentProvider#bulkInsert ContentProvider.bulkInsert}
See {@link ContentProvider#delete ContentProvider.delete}
See {@link ContentProvider#update ContentProvider.update}
See {@link ContentProvider#openFile ContentProvider.openFile}.  Note that this <em>does not</em> take care of non-content: URIs such as file:.  It is strongly recommended you use the {@link ContentResolver#openFileDescriptor ContentResolver.openFileDescriptor} API instead.
See {@link ContentProvider#openAssetFile ContentProvider.openAssetFile}. Note that this <em>does not</em> take care of non-content: URIs such as file:.  It is strongly recommended you use the {@link ContentResolver#openAssetFileDescriptor ContentResolver.openAssetFileDescriptor} API instead.
See {@link ContentProvider#openTypedAssetFile ContentProvider.openTypedAssetFile}
See {@link ContentProvider#applyBatch ContentProvider.applyBatch}
Call this to indicate to the system that the associated {@link ContentProvider} is no longer needed by this {@link ContentProviderClient}.
Get a reference to the {@link ContentProvider} that is associated with this client. If the {@link ContentProvider} is running in a different process then null will be returned. This can be used if you know you are running in the same process as a provider, and want to get direct access to its implementation details. Otherwise returns null.
Creates a {@link ContentProviderOperation} by copying the contents of a {@link Builder}.
Create a {@link Builder} suitable for building an insert {@link ContentProviderOperation}.
Create a {@link Builder} suitable for building an update {@link ContentProviderOperation}.
Create a {@link Builder} suitable for building a delete {@link ContentProviderOperation}.
Create a {@link Builder} suitable for building a {@link ContentProviderOperation} to assert a set of values as provided through {@link Builder#withValues(ContentValues)}.
Applies this operation using the given provider. The backRefs array is used to resolve any back references that were requested using {@link Builder#withValueBackReferences(ContentValues)} and {@link Builder#withSelectionBackReference}. to resolve any requested back references. row if this was an insert otherwise the number of rows affected. if the number of rows affected didn't match the expected count
The ContentValues back references are represented as a ContentValues object where the key refers to a column and the value is an index of the back reference whose valued should be associated with the column. <p> This is intended to be a private method but it is exposed for unit testing purposes expansion of back references. This can be called if either mValues or mValuesBackReferences is null
The Selection Arguments back references are represented as a Map of Integer->Integer where the key is an index into the selection argument array (see {@link Builder#withSelection}) and the value is the index of the previous result that should be used for that selection argument array slot. <p> This is intended to be a private method but it is exposed for unit testing purposes expansion of back references. This can be called if either mValues or mValuesBackReferences is null
Return the string representation of the requested back reference. the numBackRefs
Create a {@link Builder} of a given type. The uri must not be null.
Create a ContentProviderOperation from this {@link Builder}.
Add a {@link ContentValues} of back references. The key is the name of the column and the value is an integer that is the index of the previous result whose value should be used for the column. The value is added as a {@link String}. A column value from the back references takes precedence over a value specified in {@link #withValues}. This can only be used with builders of type insert, update, or assert.
Add a ContentValues back reference. A column value from the back references takes precedence over a value specified in {@link #withValues}. This can only be used with builders of type insert, update, or assert.
Add a back references as a selection arg. Any value at that index of the selection arg that was specified by {@link #withSelection} will be overwritten. This can only be used with builders of type update, delete, or assert.
The ContentValues to use. This may be null. These values may be overwritten by the corresponding value specified by {@link #withValueBackReference} or by future calls to {@link #withValues} or {@link #withValue}. This can only be used with builders of type insert, update, or assert.
A value to insert or update. This value may be overwritten by the corresponding value specified by {@link #withValueBackReference}. This can only be used with builders of type insert, update, or assert. {@link ContentValues#put}
The selection and arguments to use. An occurrence of '?' in the selection will be replaced with the corresponding occurence of the selection argument. Any of the selection arguments may be overwritten by a selection argument back reference as specified by {@link #withSelectionBackReference}. This can only be used with builders of type update, delete, or assert.
If set then if the number of rows affected by this operation do not match this count {@link OperationApplicationException} will be throw. This can only be used with builders of type update, delete, or assert.
Creates a ContentQueryMap that caches the content backing the cursor the map updated when changes do occur notifications of changes (if requested). Normally you pass null here, but if you know that the thread that is creating this isn't a thread that can receive messages then you can create your own handler and use that here.
Change whether or not the ContentQueryMap will register with the cursor's ContentProvider for change notifications. If you use a ContentQueryMap in an activity you should call this with false in onPause(), which means you need to call it with true in onResume() if want it to be kept updated. ContentProvider, false otherwise
Access the ContentValues for the row specified by rowName
Requeries the cursor and reads the contents into the cache
Providing a default implementation of this, to avoid having to change a lot of other things, but implementations of ContentResolver should implement it. @hide
Return the MIME type of the given content URL.
Query for the possible MIME types for the representations the given content URL can be returned when opened as as stream with {@link #openTypedAssetFileDescriptor}.  Note that the types here are not necessarily a superset of the type returned by {@link #getType} -- many content providers can not return a raw stream for the structured data that they contain. such as *\/*, to query for all available MIME types that match the pattern. data streams that match the given mimeTypeFilter.  If there are none, null is returned.
<p> Query the given URI, returning a {@link Cursor} over the result set. </p> <p> For best performance, the caller should follow these guidelines: <ul> <li>Provide an explicit projection, to prevent reading data from storage that aren't going to be used.</li> <li>Use question mark parameter markers such as 'phone=?' instead of explicit values in the {@code selection} parameter, so that queries that differ only by those values will be recognized as the same for caching purposes.</li> </ul> </p>
Open a stream on to the content associated with a content URI.  If there is no data associated with the URI, FileNotFoundException is thrown. <h5>Accepts the following URI schemes:</h5> <ul> <li>content ({@link #SCHEME_CONTENT})</li> <li>android.resource ({@link #SCHEME_ANDROID_RESOURCE})</li> <li>file ({@link #SCHEME_FILE})</li> </ul> <p>See {@link #openAssetFileDescriptor(Uri, String)} for more information on these schemes.
Synonym for {@link #openOutputStream(Uri, String) openOutputStream(uri, "w")}.
Open a stream on to the content associated with a content URI.  If there is no data associated with the URI, FileNotFoundException is thrown. <h5>Accepts the following URI schemes:</h5> <ul> <li>content ({@link #SCHEME_CONTENT})</li> <li>file ({@link #SCHEME_FILE})</li> </ul> <p>See {@link #openAssetFileDescriptor(Uri, String)} for more information on these schemes.
Open a raw file descriptor to access data under a URI.  This is like {@link #openAssetFileDescriptor(Uri, String)}, but uses the underlying {@link ContentProvider#openFile} ContentProvider.openFile()} method, so will <em>not</em> work with providers that return sub-sections of files.  If at all possible, you should use {@link #openAssetFileDescriptor(Uri, String)}.  You will receive a FileNotFoundException exception if the provider returns a sub-section of a file. <h5>Accepts the following URI schemes:</h5> <ul> <li>content ({@link #SCHEME_CONTENT})</li> <li>file ({@link #SCHEME_FILE})</li> </ul> <p>See {@link #openAssetFileDescriptor(Uri, String)} for more information on these schemes. ContentProvider.openFile}. own this descriptor and are responsible for closing it when done. file exists under the URI or the mode is invalid.
Open a raw file descriptor to access data under a URI.  This interacts with the underlying {@link ContentProvider#openAssetFile} method of the provider associated with the given URI, to retrieve any file stored there. <h5>Accepts the following URI schemes:</h5> <ul> <li>content ({@link #SCHEME_CONTENT})</li> <li>android.resource ({@link #SCHEME_ANDROID_RESOURCE})</li> <li>file ({@link #SCHEME_FILE})</li> </ul> <h5>The android.resource ({@link #SCHEME_ANDROID_RESOURCE}) Scheme</h5> <p> A Uri object can be used to reference a resource in an APK file.  The Uri should be one of the following formats: <ul> <code>package_name</code> is your package name as listed in your AndroidManifest.xml. For example <code>com.example.myapp</code><br/> <code>id_number</code> is the int form of the ID.<br/> The easiest way to construct this form is </li> <code>package_name</code> is your package name as listed in your AndroidManifest.xml. For example <code>com.example.myapp</code><br/> <code>type</code> is the string form of the resource type.  For example, <code>raw</code> or <code>drawable</code>. <code>name</code> is the string form of the resource name.  That is, whatever the file name was in your res directory, without the type extension. The easiest way to construct this form is </li> </ul> <p>Note that if this function is called for read-only input (mode is "r") on a content: URI, it will instead call {@link #openTypedAssetFileDescriptor} for you with a MIME type of "*\/*".  This allows such callers to benefit from any built-in data conversion that a provider implements. ContentProvider.openAssetFile}. own this descriptor and are responsible for closing it when done. file exists under the URI or the mode is invalid.
Open a raw file descriptor to access (potentially type transformed) data from a "content:" URI.  This interacts with the underlying {@link ContentProvider#openTypedAssetFile} method of the provider associated with the given URI, to retrieve retrieve any appropriate data stream for the data stored there. <p>Unlike {@link #openAssetFileDescriptor}, this function only works with "content:" URIs, because content providers are the only facility with an associated MIME type to ensure that the returned data stream is of the desired type. <p>All text/* streams are encoded in UTF-8. be a pattern such as *\/*, which will allow the content provider to select a type, though there is no way for you to determine what type it is returning. data stream from the provider.  Note that this may be a pipe, meaning you can't seek in it.  The only seek you should do is if the AssetFileDescriptor contains an offset, to move to that offset before reading.  You own this descriptor and are responsible for closing it when done. data of the desired type exists under the URI.
Resolves an android.resource URI to a {@link Resources} and a resource id.
Inserts a row into a table at the given URL. If the content provider supports transactions the insertion will be atomic.
Applies each of the {@link ContentProviderOperation} objects and returns an array of their results. Passes through OperationApplicationException, which may be thrown by the call to {@link ContentProviderOperation#apply}. If all the applications succeed then a {@link ContentProviderResult} array with the same number of elements as the operations will be returned. It is implementation-specific how many, if any, operations will have been successfully applied if a call to apply results in a {@link OperationApplicationException}. See {@link ContentProviderOperation#apply} for more information. to communicate with a remote provider.
Inserts multiple rows into a table at the given URL. This function make no guarantees about the atomicity of the insertions.
Deletes row(s) specified by a content URI. If the content provider supports transactions, the deletion will be atomic.
Update row(s) in a content URI. If the content provider supports transactions the update will be atomic.
Call an provider-defined method.  This can be used to implement read or write interfaces which are cheaper than using a Cursor and/or do not fit into the traditional table model. framework, but must be non-null. does not implement call.
Returns the content provider for the given content URI.
Returns the content provider for the given content URI if the process already has a reference on it.
Returns a {@link ContentProviderClient} that is associated with the {@link ContentProvider} that services the content at uri, starting the provider if necessary. Returns null if there is no provider associated wih the uri. The caller must indicate that they are done with the provider by calling {@link ContentProviderClient#release} which will allow the system to release the provider it it determines that there is no other reason for keeping it active. that services the content at uri or null if there isn't one.
Returns a {@link ContentProviderClient} that is associated with the {@link ContentProvider} with the authority of name, starting the provider if necessary. Returns null if there is no provider associated wih the uri. The caller must indicate that they are done with the provider by calling {@link ContentProviderClient#release} which will allow the system to release the provider it it determines that there is no other reason for keeping it active. with the authority of name or null if there isn't one.
Register an observer class that gets callbacks when data identified by a given content URI changes. for a whole class of content. will also cause notifications to be sent. If <code>false</code> only changes to the exact URI specified by <em>uri</em> will cause notifications to be sent. If true, than any URI values at or below the specified URI will also trigger a match.
Unregisters a change observer.
Notify registered observers that a row was updated. To register, call {@link #registerContentObserver(android.net.Uri , boolean, android.database.ContentObserver) registerContentObserver()}. By default, CursorAdapter objects will get this notification.
Start an asynchronous sync operation. If you want to monitor the progress of the sync you may register a SyncObserver. Only values of the following types may be used in the extras bundle: <ul> <li>Integer</li> <li>Long</li> <li>Boolean</li> <li>Float</li> <li>Double</li> <li>String</li> </ul>
Check that only values of the following types are in the Bundle: <ul> <li>Integer</li> <li>Long</li> <li>Boolean</li> <li>Float</li> <li>Double</li> <li>String</li> <li>Account</li> <li>null</li> </ul>
Cancel any active or pending syncs that match account and authority. The account and authority can each independently be set to null, which means that syncs with any account or authority, respectively, will match.
Get information about the SyncAdapters that are known to the system.
Check if the provider should be synced when a network tickle is received
Set whether or not the provider is synced when it receives a network tickle.
Specifies that a sync should be requested with the specified the account, authority, and extras at the given frequency. If there is already another periodic sync scheduled with the account, authority and extras then a new periodic sync won't be added, instead the frequency of the previous one will be updated. <p> These periodic syncs honor the "syncAutomatically" and "masterSyncAutomatically" settings. Although these sync are scheduled at the specified frequency, it may take longer for it to actually be started if other syncs are ahead of it in the sync operation queue. This means that the actual start time may drift. <p> Periodic syncs are not allowed to have any of {@link #SYNC_EXTRAS_DO_NOT_RETRY}, {@link #SYNC_EXTRAS_IGNORE_BACKOFF}, {@link #SYNC_EXTRAS_IGNORE_SETTINGS}, {@link #SYNC_EXTRAS_INITIALIZE}, {@link #SYNC_EXTRAS_FORCE}, {@link #SYNC_EXTRAS_EXPEDITED}, {@link #SYNC_EXTRAS_MANUAL} set to true. If any are supplied then an {@link IllegalArgumentException} will be thrown. are null.
Remove a periodic sync. Has no affect if account, authority and extras don't match an existing periodic sync.
Get the list of information about the periodic syncs for the given account and authority.
Check if this account/provider is syncable.
Set whether this account/provider is syncable.
Gets the master auto-sync setting that applies to all the providers and accounts. If this is false then the per-provider auto-sync setting is ignored.
Sets the master auto-sync setting that applies to all the providers and accounts. If this is false then the per-provider auto-sync setting is ignored.
Returns true if there is currently a sync operation for the given account or authority in the pending list, or actively being processed.
Returns a list with information about all the active syncs. This list will be empty if there are no active syncs.
Returns the status that matches the authority.
Return true if the pending status is true of any matching authorities.
Request notifications when the different aspects of the SyncManager change. The different items that can be requested are: <ul> <li> {@link #SYNC_OBSERVER_TYPE_PENDING} <li> {@link #SYNC_OBSERVER_TYPE_ACTIVE} <li> {@link #SYNC_OBSERVER_TYPE_SETTINGS} </ul> The caller can set one or more of the status types in the mask for any given listener registration.
Remove a previously registered status change listener.
Returns sampling percentage for a given duration. Always returns at least 1%.
Clear all scheduled sync operations that match the uri and cancel the active sync if they match the authority and account, if they are present.
Converts the last path segment to a long. <p>This supports a common convention for content URIs where an ID is stored in the last segment. empty
Appends the given ID to the end of the path.
Appends the given ID to the end of the path.
Creates an empty set of values using the default initial size
Creates an empty set of values using the given initial size
Creates a set of values copied from the given set
Creates a set of values copied from the given HashMap. This is used by the Parcel unmarshalling code. {@hide}
Adds a value to the set.
Adds all values from the passed in ContentValues.
Adds a null value to the set.
Returns the number of values.
Remove a single value.
Removes all values.
Returns true if this object has the named value.
Gets a value. Valid value types are {@link String}, {@link Boolean}, and {@link Number} implementations.
Gets a value and converts it to a String.
Gets a value and converts it to a Long.
Gets a value and converts it to an Integer.
Gets a value and converts it to a Short.
Gets a value and converts it to a Byte.
Gets a value and converts it to a Double.
Gets a value and converts it to a Float.
Gets a value and converts it to a Boolean.
Gets a value that is a byte array. Note that this method will not convert any other types to byte arrays.
Returns a set of all of the keys and values
Returns a set of all of the keys
Add a new {@link ComponentCallbacks} to the base application of the Context, which will be called at the same times as the ComponentCallbacks methods of activities and other components are called.  Note that you <em>must</em> be sure to use {@link #unregisterComponentCallbacks} when appropriate in the future; this will not be removed for you. {@link ComponentCallbacks} or {@link ComponentCallbacks2} interface.
Remove a {@link ComponentCallbacks} objec that was previously registered with {@link #registerComponentCallbacks(ComponentCallbacks)}.
you can't assume this actually means anything.
Retrieve styled attribute information in this Context's theme.  See {@link Resources.Theme#obtainStyledAttributes(int[])} for more information.
Retrieve styled attribute information in this Context's theme.  See {@link Resources.Theme#obtainStyledAttributes(int, int[])} for more information.
Retrieve styled attribute information in this Context's theme.  See {@link Resources.Theme#obtainStyledAttributes(AttributeSet, int[], int, int)} for more information.
Open a private file associated with this Context's application package for reading.
Set the base context for this ContextWrapper.  All calls will then be delegated to the base context.  Throws IllegalStateException if a base context has already been set.
Constructor that makes initializes the cursor such that the iterator points to the first Entity, if there are any.
Returns the entity that the cursor is currently pointing to. This must take care to advance the cursor past this entity. This will never be called if the cursor is at the end.
Returns the next object in the iteration, i.e. returns the element in front of the iterator and advances the iterator by one position.
Indicates that this iterator is no longer needed and that any associated resources may be released (such as a SQLite cursor).
Registers an observer to get notifications from the content provider when the cursor needs to be refreshed.
Cast an IBinder object into an android.content.IClipboard interface, generating a proxy if needed.
Returns true if the clipboard contains text; false otherwise.
Cast an IBinder object into an android.content.IContentService interface, generating a proxy if needed.
Get the frequency of the periodic poll, if any. will take place.
Set whether or not the provider is to be synced on a periodic basis. zero or less then no periodic syncs will be performed.
Set whether or not the provider is to be synced on a periodic basis. zero or less then no periodic syncs will be performed.
Returns the types of the SyncAdapters that are registered with the system.
Returns the status that matches the authority. If there are multiples accounts for the authority, the one with the latest "lastSuccessTime" status is returned.
Cast an IBinder object into an android.content.IIntentReceiver interface, generating a proxy if needed.
Cast an IBinder object into an android.content.IIntentSender interface, generating a proxy if needed.
Creates a new ShortcutIconResource for the specified context and resource identifier.
No special parcel contents.
Convenience function for creating a {@link #ACTION_CHOOSER} Intent. to perform. {@link Context#startActivity(Intent) Context.startActivity()} and related methods.
Copy constructor.
Make a clone of only the parts of the Intent that are relevant for filter matching: the action, data, type, component, and categories.
Create an intent with a given action.  All other fields (data, type, class) are null.  Note that the action <em>must</em> be in a namespace because Intents are used globally in the system -- for example the system VIEW action is android.intent.action.VIEW; an application's custom action would be something like com.google.app.myapp.CUSTOM_ACTION.
Create an intent with a given action and for a given data url.  Note that the action <em>must</em> be in a namespace because Intents are used globally in the system -- for example the system VIEW action is android.intent.action.VIEW; an application's custom action would be something like com.google.app.myapp.CUSTOM_ACTION. <p><em>Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC.  As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case.</em></p>
Create an intent for a specific component.  All other fields (action, data, type, class) are null, though they can be modified later with explicit calls.  This provides a convenient way to create an intent that is intended to execute a hard-coded class name, rather than relying on the system to find an appropriate class for you; see {@link #setComponent} for more information on the repercussions of this. this class.
Create an intent for a specific component with a specified action and data. This is equivalent using {@link #Intent(String, android.net.Uri)} to construct the Intent and then calling {@link #setClass} to set its class. <p><em>Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC.  As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case.</em></p> this class.
Create an intent to launch the main (root) activity of a task.  This is the Intent that is started when the application's is launched from Home.  For anything else that wants to launch an application in the same way, it is important that they use an Intent structured the same way, and can use this function to ensure this is the case. <p>The returned Intent has the given Activity component as its explicit component, {@link #ACTION_MAIN} as its action, and includes the category {@link #CATEGORY_LAUNCHER}.  This does <em>not</em> have {@link #FLAG_ACTIVITY_NEW_TASK} set, though typically you will want to do that through {@link #addFlags(int)} on the returned Intent. launch. activity as a main application entry.
Make an Intent that can be used to re-launch an application's task in its base state.  This is like {@link #makeMainActivity(ComponentName)}, but also sets the flags {@link #FLAG_ACTIVITY_NEW_TASK} and {@link #FLAG_ACTIVITY_CLEAR_TASK}. task; this is the activity that has been published in the application's manifest as the main launcher icon. activity's task in its root state.
Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path. {@link #URI_INTENT_SCHEME}. it bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
Retrieve the general action to be performed, such as {@link #ACTION_VIEW}.  The action describes the general way the rest of the information in the intent should be interpreted -- most importantly, what to do with the data returned by {@link #getData}.
Retrieve data this intent is operating on.  This URI specifies the name of the data; often it uses the content: scheme, specifying data in a content provider.  Other schemes may be handled by specific activities, such as http: by the web browser.
The same as {@link #getData()}, but returns the URI as an encoded String.
Return the scheme portion of the intent's data.  If the data is null or does not include a scheme, null is returned.  Otherwise, the scheme prefix without the final ':' is returned, i.e. "http". <p>This is the same as calling getData().getScheme() (and checking for null data).
Retrieve any explicit MIME type included in the intent.  This is usually null, as the type is determined by the intent data.
Return the MIME data type of this intent.  If the type field is explicitly set, that is simply returned.  Otherwise, if the data is set, the type of that data is returned.  If neither fields are set, a null is returned.
Return the MIME data type of this intent, only if it will be needed for intent resolution.  This is not generally useful for application code; it is used by the frameworks for communicating with back-end system services.
Check if an category exists in the intent.
Return the set of all categories in the intent.  If there are no categories, returns NULL.
Sets the ClassLoader that will be used when unmarshalling any Parcelable values from the extras of this Intent. at the time of unmarshalling.
Returns true if an extra value is associated with the given name.
Returns true if the Intent's extras contain a parcelled file descriptor.
Retrieve extended data from the intent. type is stored with the given name. or the default value if none was found.
Retrieve extended data from the intent. type is stored with the given name. or the default value if none was found.
Retrieve extended data from the intent. type is stored with the given name. or the default value if none was found.
Retrieve extended data from the intent. type is stored with the given name. or the default value if none was found.
Retrieve extended data from the intent. type is stored with the given name. or the default value if none was found.
Retrieve extended data from the intent. type is stored with the given name. or the default value if none was found.
Retrieve extended data from the intent. type is stored with the given name. or the default value if no such item is present
Retrieve extended data from the intent. type is stored with the given name. or the default value if none was found.
Retrieve extended data from the intent. or null if no String value was found.
Retrieve extended data from the intent. or null if no CharSequence value was found.
Retrieve extended data from the intent. or null if no Parcelable value was found.
Retrieve extended data from the intent. or null if no Parcelable[] value was found.
Retrieve extended data from the intent. or null if no ArrayList<Parcelable> value was found.
Retrieve extended data from the intent. or null if no Serializable value was found.
Retrieve extended data from the intent. or null if no ArrayList<Integer> value was found.
Retrieve extended data from the intent. or null if no ArrayList<String> value was found.
Retrieve extended data from the intent. or null if no ArrayList<CharSequence> value was found.
Retrieve extended data from the intent. or null if no boolean array value was found.
Retrieve extended data from the intent. or null if no byte array value was found.
Retrieve extended data from the intent. or null if no short array value was found.
Retrieve extended data from the intent. or null if no char array value was found.
Retrieve extended data from the intent. or null if no int array value was found.
Retrieve extended data from the intent. or null if no long array value was found.
Retrieve extended data from the intent. or null if no float array value was found.
Retrieve extended data from the intent. or null if no double array value was found.
Retrieve extended data from the intent. or null if no String array value was found.
Retrieve extended data from the intent. or null if no CharSequence array value was found.
Retrieve extended data from the intent. or null if no Bundle value was found.
Retrieves a map of extended data from the intent. or null if none have been added.
Retrieve any special flags associated with this intent.  You will normally just set them with {@link #setFlags} and let the system take the appropriate action with them.
Retrieve the application package name this Intent is limited to.  When resolving an Intent, if non-null this limits the resolution to only components in the given application package.
Retrieve the concrete component associated with the intent.  When receiving an intent, this is the component that was found to best handle it (that is, yourself) and will always be non-null; in all other cases it will be null unless explicitly set.
Get the bounds of the sender of this intent, in screen coordinates.  This can be used as a hint to the receiver for animations and the like.  Null means that there is no source bounds.
Return the Activity component that should be used to handle this intent. The appropriate component is determined based on the information in the intent, evaluated as follows: <p>If {@link #getComponent} returns an explicit class, that is returned without any further consideration. <p>The activity must handle the {@link Intent#CATEGORY_DEFAULT} Intent category to be considered. <p>If {@link #getAction} is non-NULL, the activity must handle this action. <p>If {@link #resolveType} returns non-NULL, the activity must handle this type. <p>If {@link #addCategory} has added any categories, the activity must handle ALL of the categories specified. <p>If {@link #getPackage} is non-NULL, only activity components in that application package will be considered. <p>If there are no activities that satisfy all of these conditions, a null string is returned. <p>If multiple activities are found to satisfy the intent, the one with the highest priority will be used.  If there are multiple activities with the same priority, the system will either pick the best activity based on user preference, or resolve to a system class that will allow the user to pick an activity and forward from there. <p>This method is implemented simply by calling {@link PackageManager#resolveActivity} with the "defaultOnly" parameter true.</p> <p> This API is called for you as part of starting an activity from an intent.  You do not normally need to call it yourself.</p>
Resolve the Intent into an {@link ActivityInfo} describing the activity that should execute the intent.  Resolution follows the same rules as described for {@link #resolveActivity}, but you get back the completely information about the resolved activity instead of just its class name. {@link PackageManager#getActivityInfo(ComponentName, int) PackageManager.getActivityInfo()}.
Set the general action to be performed. into a single statement.
Set the data this intent is operating on.  This method automatically clears any type that was previously set by {@link #setType}. <p><em>Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC.  As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case.</em></p> into a single statement.
Set an explicit MIME data type.  This is used to create intents that only specify a type and not data, for example to indicate the type of data to return.  This method automatically clears any data that was previously set by {@link #setData}. <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types.  As a result, you should always write your MIME types with lower case letters, and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.</em></p> into a single statement.
(Usually optional) Set the data for the intent along with an explicit MIME data type.  This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here. <p><em>Note: MIME type, Uri scheme, and host name matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, and normalize any MIME types or Uris you receive from outside of Android to ensure these elements are lower case before supplying them here.</em></p> into a single statement.
Add a new category to the intent.  Categories provide additional detail about the action the intent is perform.  When resolving an intent, only activities that provide <em>all</em> of the requested categories will be used. into a single statement.
Remove an category from an intent.
Add extended data to the intent.  The name must include a package prefix, for example the app com.android.contacts would use names like "com.android.contacts.ShowAll". into a single statement.
Add extended data to the intent.  The name must include a package prefix, for example the app com.android.contacts would use names like "com.android.contacts.ShowAll". into a single statement.
Add extended data to the intent.  The name must include a package prefix, for example the app com.android.contacts would use names like "com.android.contacts.ShowAll". into a single statement.
Add extended data to the intent.  The name must include a package prefix, for example the app com.android.contacts would use names like "com.android.contacts.ShowAll". into a single statement.
Add extended data to the intent.  The name must include a package prefix, for example the app com.android.contacts would use names like "com.android.contacts.ShowAll". into a single statement.
Copy all extras in 'src' in to this intent.
Add a set of extended data to the intent.  The keys must include a package prefix, for example the app com.android.contacts would use names like "com.android.contacts.ShowAll".
Completely replace the extras in the Intent with the extras in the given Intent. into the target intent, replacing any that were previously there.
Completely replace the extras in the Intent with the given Bundle of extras. all extras.
Remove extended data from the intent.
Set special flags controlling how this intent is handled.  Most values here depend on the type of component being executed by the Intent, specifically the FLAG_ACTIVITY_* flags are all for use with {@link Context#startActivity Context.startActivity()} and the FLAG_RECEIVER_* flags are all for use with {@link Context#sendBroadcast(Intent) Context.sendBroadcast()}. <p>See the <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back Stack</a> documentation for important information on how some of these options impact the behavior of your application. into a single statement.
Add additional flags to the intent (or with existing flags value). into a single statement.
(Usually optional) Set an explicit application package name that limits the components this Intent will resolve to.  If left to the default value of null, all components in all applications will considered. If non-null, the Intent can only match the components in the given application package. intent, or null to allow any application package. into a single statement.
(Usually optional) Explicitly set the component to handle the intent. If left with the default value of null, the system will determine the appropriate class to use based on the other fields (action, data, type, categories) in the Intent.  If this class is defined, the specified class will always be used regardless of the other fields.  You should only set this value when you know you absolutely want a specific class to be used; otherwise it is better to let the system find the appropriate class so that you will respect the installed applications and user preferences. intent, or null to let the system find one for you. into a single statement.
Convenience for calling {@link #setComponent} with an explicit class name. this class. that will be used as the component for this Intent. into a single statement.
Convenience for calling {@link #setComponent} with an explicit application package name and class name. component. that will be used as the component for this Intent. into a single statement.
Convenience for calling {@link #setComponent(ComponentName)} with the name returned by a {@link Class} object. this class. into a single statement.
Set the bounds of the sender of this intent, in screen coordinates.  This can be used as a hint to the receiver for animations and the like.  Null means that there is no source bounds.
Copy the contents of <var>other</var> in to this object, but only where fields are not defined by this object.  For purposes of a field being defined, the following pieces of data in the Intent are considered to be separate fields: <ul> <li> action, as set by {@link #setAction}. <li> data URI and MIME type, as set by {@link #setData(Uri)}, {@link #setType(String)}, or {@link #setDataAndType(Uri, String)}. <li> categories, as set by {@link #addCategory}. <li> package, as set by {@link #setPackage}. <li> component, as set by {@link #setComponent(ComponentName)} or related methods. <li> source bounds, as set by {@link #setSourceBounds} <li> each top-level name in the associated extras. </ul> <p>In addition, you can use the {@link #FILL_IN_ACTION}, {@link #FILL_IN_DATA}, {@link #FILL_IN_CATEGORIES}, {@link #FILL_IN_PACKAGE}, and {@link #FILL_IN_COMPONENT} to override the restriction where the corresponding field will not be replaced if it is already set. <p>Note: The component field will only be copied if {@link #FILL_IN_COMPONENT} is explicitly specified. <p>For example, consider Intent A with {data="foo", categories="bar"} and Intent B with {action="gotit", data-type="some/thing", categories="one","two"}. <p>Calling A.fillIn(B, Intent.FILL_IN_DATA) will result in A now containing: {action="gotit", data-type="some/thing", categories="bar"}. the current one. {@link #FILL_IN_DATA}, {@link #FILL_IN_CATEGORIES}, {@link #FILL_IN_PACKAGE}, and {@link #FILL_IN_COMPONENT} indicating which fields were changed.
Return the Intent that this FilterComparison represents. not modify!
Determine if two intents are the same for the purposes of intent resolution (filtering). That is, if their action, data, type, class, and categories are the same.  This does <em>not</em> compare any extra data included in the intents.
Generate hash code that matches semantics of filterEquals().
Convert this Intent into a String holding a URI representation of it. The returned URI string has been properly URI encoded, so it can be used with {@link Uri#parse Uri.parse(String)}.  The URI contains the Intent's data as the base URI, with an additional fragment describing the action, categories, type, flags, package, component, and extras. <p>You can convert the returned string back to an Intent with {@link #getIntent}. {@link #URI_INTENT_SCHEME}. of the Intent.
Parses the "intent" element (and its children) from XML and instantiates an Intent object.  The given XML parser should be located at the tag where parsing should start (often named "intent"), from which the basic action, data, type, and package and class name will be retrieved.  The function will then parse in to any child elements, looking for <category android:name="xxx"> tags to add categories and <extra android:name="xxx" android:value="yyy"> to attach extra data to the intent. attribute data at the current <var>parser</var> location.
These functions are the start of more optimized code for managing the string sets...  not yet implemented.
Create a new IntentFilter instance with a specified action and MIME type, where you know the MIME type is correctly formatted.  This catches the {@link MalformedMimeTypeException} exception that the constructor can call and turns it into a runtime exception.
New empty IntentFilter.
New IntentFilter that matches a single action with no data.  If no data characteristics are subsequently specified, then the filter will only match intents that contain no data.
New IntentFilter that matches a single action and data type. <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types.  As a result, you should always write your MIME types with lower case letters, and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.</em></p> <p>Throws {@link MalformedMimeTypeException} if the given MIME type is not syntactically correct.
New IntentFilter containing a copy of an existing filter.
Modify priority of this filter.  The default priority is 0. Positive values will be before the default, lower values will be after it. Applications must use a value that is larger than {@link #SYSTEM_LOW_PRIORITY} and smaller than {@link #SYSTEM_HIGH_PRIORITY} .
Return the priority of this filter.
Add a new Intent action to match against.  If any actions are included in the filter, then an Intent's action must be one of those values for it to match.  If no actions are included, the Intent action is ignored.
Return the number of actions in the filter.
Return an action in the filter.
Is the given action included in the filter?  Note that if the filter does not include any actions, false will <em>always</em> be returned.
Match this filter against an Intent's action.  If the filter does not specify any actions, the match will always fail.
Return an iterator over the filter's actions.  If there are no actions, returns null.
Add a new Intent data type to match against.  If any types are included in the filter, then an Intent's data must be <em>either</em> one of these types <em>or</em> a matching scheme.  If no data types are included, then an Intent will only match if it specifies no data. <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types.  As a result, you should always write your MIME types with lower case letters, and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.</em></p> <p>Throws {@link MalformedMimeTypeException} if the given MIME type is not syntactically correct.
Is the given data type included in the filter?  Note that if the filter does not include any type, false will <em>always</em> be returned.
Return the number of data types in the filter.
Return a data type in the filter.
Return an iterator over the filter's data types.
Add a new Intent data scheme to match against.  If any schemes are included in the filter, then an Intent's data must be <em>either</em> one of these schemes <em>or</em> a matching data type.  If no schemes are included, then an Intent will match only if it includes no data. <p><em>Note: scheme matching in the Android framework is case-sensitive, unlike formal RFC schemes.  As a result, you should always write your schemes with lower case letters, and any schemes you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
Return the number of data schemes in the filter.
Return a data scheme in the filter.
Is the given data scheme included in the filter?  Note that if the filter does not include any scheme, false will <em>always</em> be returned.
Return an iterator over the filter's data schemes.
Determine whether this AuthorityEntry matches the given data Uri. <em>Note that this comparison is case-sensitive, unlike formal RFC host names.  You thus should always normalize to lower-case.</em> {@link IntentFilter#MATCH_CATEGORY_PORT}, or {@link IntentFilter#MATCH_CATEGORY_HOST}.
Add a new Intent data authority to match against.  The filter must include one or more schemes (via {@link #addDataScheme}) for the authority to be considered.  If any authorities are included in the filter, then an Intent's data must match one of them.  If no authorities are included, then only the scheme must match. <p><em>Note: host name in the Android framework is case-sensitive, unlike formal RFC host names.  As a result, you should always write your host names with lower case letters, and any host names you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
Return the number of data authorities in the filter.
Return a data authority in the filter.
Is the given data authority included in the filter?  Note that if the filter does not include any authorities, false will <em>always</em> be returned.
Return an iterator over the filter's data authorities.
Add a new Intent data path to match against.  The filter must include one or more schemes (via {@link #addDataScheme}) <em>and</em> one or more authorities (via {@link #addDataAuthority}) for the path to be considered.  If any paths are included in the filter, then an Intent's data must match one of them.  If no paths are included, then only the scheme/authority must match. <p>The path given here can either be a literal that must directly match or match against a prefix, or it can be a simple globbing pattern. If the latter, you can use '*' anywhere in the pattern to match zero or more instances of the previous character, '.' as a wildcard to match any character, and '\' to escape the next character. path, or a simple pattern, depending on <var>type</var>. determine a match: either {@link PatternMatcher#PATTERN_LITERAL}, {@link PatternMatcher#PATTERN_PREFIX}, or {@link PatternMatcher#PATTERN_SIMPLE_GLOB}.
Return the number of data paths in the filter.
Return a data path in the filter.
Is the given data path included in the filter?  Note that if the filter does not include any paths, false will <em>always</em> be returned.
Return an iterator over the filter's data paths.
Match this intent filter against the given Intent data.  This ignores the data scheme -- unlike {@link #matchData}, the authority will match regardless of whether there is a matching scheme. {@link #MATCH_CATEGORY_PORT}, {@link #NO_MATCH_DATA}.
Match this filter against an Intent's data (type, scheme and path). If the filter does not specify any types and does not specify any schemes/paths, the match will only succeed if the intent does not also specify a type or data. <p>Be aware that to match against an authority, you must also specify a base scheme the authority is in.  To match against a data path, both a scheme and authority must be specified.  If the filter does not specify any types or schemes that it matches against, it is considered to be empty (any authority or data path given is ignored, as if it were empty as well). <p><em>Note: MIME type, Uri scheme, and host name matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, and normalize any MIME types or Uris you receive from outside of Android to ensure these elements are lower case before supplying them here.</em></p> {@link #MATCH_CATEGORY_MASK} and {@link #MATCH_ADJUSTMENT_MASK}), or one of the error codes {@link #NO_MATCH_TYPE} if the type didn't match or {@link #NO_MATCH_DATA} if the scheme/path didn't match.
Add a new Intent category to match against.  The semantics of categories is the opposite of actions -- an Intent includes the categories that it requires, all of which must be included in the filter in order to match.  In other words, adding a category to the filter has no impact on matching unless that category is specified in the intent.
Return the number of categories in the filter.
Return a category in the filter.
Is the given category included in the filter?
Return an iterator over the filter's categories.
Match this filter against an Intent's categories.  Each category in the Intent must be specified by the filter; if any are not in the filter, the match fails.
Test whether this filter matches the given <var>intent</var>. {@link #MATCH_CATEGORY_MASK} and {@link #MATCH_ADJUSTMENT_MASK}), or one of the error codes {@link #NO_MATCH_TYPE} if the type didn't match, {@link #NO_MATCH_DATA} if the scheme/path didn't match, {@link #NO_MATCH_ACTION if the action didn't match, or {@link #NO_MATCH_CATEGORY} if one or more categories didn't match.
Test whether this filter matches the given intent data.  A match is only successful if the actions and categories in the Intent match against the filter, as described in {@link IntentFilter}; in that case, the match result returned will be as per {@link #matchData}. {@link #MATCH_CATEGORY_MASK} and {@link #MATCH_ADJUSTMENT_MASK}), or one of the error codes {@link #NO_MATCH_TYPE} if the type didn't match, {@link #NO_MATCH_DATA} if the scheme/path didn't match, {@link #NO_MATCH_ACTION if the action didn't match, or {@link #NO_MATCH_CATEGORY} if one or more categories didn't match.
Write the contents of the IntentFilter as an XML stream.
For debugging -- perform a check on the filter, return true if it passed or false if it failed. {@hide}
Perform the operation associated with this IntentSender, allowing the caller to specify information about the Intent to use and be notified when the send has completed. <var>intent</var> is also null. Intent.fillIn()} for information on how this is applied to the original Intent.  Use null to not modify the original Intent. completed, or null for no callback. should happen.  If null, the callback will happen from the thread pool of the process. is no longer allowing more intents to be sent through it.
Perform the operation associated with this IntentSender, allowing the caller to specify information about the Intent to use and be notified when the send has completed. <var>intent</var> is also null. Intent.fillIn()} for information on how this is applied to the original Intent.  Use null to not modify the original Intent. completed, or null for no callback. should happen.  If null, the callback will happen from the thread pool of the process. is required to hold.  This is only valid for broadcast intents, and corresponds to the permission argument in {@link Context#sendBroadcast(Intent, String) Context.sendOrderedBroadcast(Intent, String)}. If null, no permission is required. is no longer allowing more intents to be sent through it.
Return the package name of the application that created this IntentSender, that is the identity under which you will actually be sending the Intent.  The returned string is supplied by the system, so that an application can not spoof its package. none associated with it.
Convenience function for writing either a IntentSender or null pointer to a Parcel.  You must use this with {@link #readIntentSenderOrNullFromParcel} for later reading it.
Convenience function for reading either a Messenger or null pointer from a Parcel.  You must have previously written the Messenger with {@link #writeIntentSenderOrNullToParcel}. been written.
Cast an IBinder object into an android.content.IOnPrimaryClipChangedListener interface, generating a proxy if needed.
Cast an IBinder object into an android.content.ISyncAdapter interface, generating a proxy if needed.
Initiate a sync for this account. SyncAdapter-specific parameters may be specified in extras, which is guaranteed to not be null. the sync is finished (successfully or not) ISyncContext.onFinished() must be called.
Cancel the most recently initiated sync. Due to race conditions, this may arrive after the ISyncContext.onFinished() for that sync was called.
Initialize the SyncAdapter for this account and authority.
Cast an IBinder object into an android.content.ISyncContext interface, generating a proxy if needed.
Call to indicate that the SyncAdapter is making progress. E.g., if this SyncAdapter downloads or sends records to/from the server, this may be called after each record is downloaded or uploaded.
Signal that the corresponding sync session is completed.
Cast an IBinder object into an android.content.ISyncStatusObserver interface, generating a proxy if needed.
Starts an asynchronous load of the Loader's data. When the result is ready the callbacks will be called on the process's main thread. If a previous load has been completed and is still valid the result may be passed to the callbacks immediately. The loader will monitor the source of the data set and may deliver future callbacks if the source changes. Calling {@link #stopLoading} will stop the delivery of callbacks. <p>This updates the Loader's internal state so that {@link #isStarted()} and {@link #isReset()} will return the correct values, and then calls the implementation's {@link #onStartLoading()}. <p>Must be called from the process's main thread.
Stops delivery of updates until the next time {@link #startLoading()} is called. Implementations should <em>not</em> invalidate their data at this point -- clients are still free to use the last data the loader reported.  They will, however, typically stop reporting new data if the data changes; they can still monitor for changes, but must not report them to the client until and if {@link #startLoading()} is later called. <p>This updates the Loader's internal state so that {@link #isStarted()} will return the correct value, and then calls the implementation's {@link #onStopLoading()}. <p>Must be called from the process's main thread.
Tell the Loader that it is being abandoned.  This is called prior to {@link #reset} to have it retain its current data but not report any new data.
Resets the state of the Loader.  The Loader should at this point free all of its resources, since it may never be called again; however, its {@link #startLoading()} may later be called at which point it must be able to start running again. <p>This updates the Loader's internal state so that {@link #isStarted()} and {@link #isReset()} will return the correct values, and then calls the implementation's {@link #onReset()}. <p>Must be called from the process's main thread.
Change the base context for this ContextWrapper. All calls will then be delegated to the base context.  Unlike ContextWrapper, the base context can be changed even after one is already set.
Creates a new PeriodicSync, copying the Bundle
In order to use this class, you must extend it, and call this setup function from your constructor.  In your application or activities, you must provide the same values when you create the {@link android.provider.SearchRecentSuggestions} helper. database.  Note, this value should not change from run to run, because when it does change, your suggestions database may be wiped.
If false then the SyncManager will take care to only start one sync at a time using this SyncAdapter.
If true then the SyncManager will never issue an initialization sync to the SyncAdapter and will instead automatically call {@link ContentResolver#setIsSyncable(android.accounts.Account, String, int)} with a value of 1 for each account and provider that this sync adapter supports. SyncAdapter to treat it as syncable automatically.
May be null.
Call to update the status text for this sync. This internally invokes {@link #updateHeartbeat}, so it also takes the place of a call to that.
Call to indicate that the SyncAdapter is making progress. E.g., if this SyncAdapter downloads or sends records to/from the server, this may be called after each record is downloaded or uploaded.
Return a random value v that satisfies minValue <= v < maxValue. The difference between maxValue and minValue must be less than Integer.MAX_VALUE.
Initiate a sync. This can start a sync for all providers (pass null to url, set onlyTicklable to false), only those providers that are marked as ticklable (pass null to url, set onlyTicklable to true), or a specific provider (set url to the content url of the provider). <p>If the ContentResolver.SYNC_EXTRAS_UPLOAD boolean in extras is true then initiate a sync that just checks for local changes to send to the server, otherwise initiate a sync that first gets any changes from the server before sending local changes back to the server. <p>If a specific provider is being synced (the url is non-null) then the extras can contain SyncAdapter-specific information to control what gets synced (e.g. which specific feed to sync). <p>You'll start getting callbacks after this.
Cancel the active sync if it matches the authority and account.
Create and schedule a SyncOperation.
Remove scheduled sync operations.
Create an ActiveSyncContext for an impending sync and grab the wakelock for that sync adapter. Since this grabs the wakelock you need to be sure to call close() when you are done with this ActiveSyncContext, whether the sync succeeded or not. for this sync. This is used to attribute the wakelock hold to that application.
Performs the required cleanup, which is the releasing of the wakelock and unbinding from the sync adapter (if actually bound).
Call to let the tracker know that the sync state may have changed
Get how long we have been syncing, in ms
Turn any periodic sync operations that are ready to run into pending sync operations. in milliseconds since boot
Convert the error-containing SyncResult into the Sync.History error number. Since the SyncResult may indicate multiple errors at once, this method just returns the most "serious" error. If SyncResult.error() is true then it is safe to call this.
Checks whether an activity exists on the system image for the given intent.
Remove the specified operation if it is in the queue.
Create a "clean" SyncResult. If this is returned without any changes then the SyncManager will consider the sync to have completed successfully. The various fields can be set by the SyncAdapter in order to give the SyncManager more information as to the disposition of the sync. <p> The errors are classified into two broad categories: hard errors and soft errors. Soft errors are retried with exponential backoff. Hard errors are not retried (except when the hard error is for a {@link ContentResolver#SYNC_EXTRAS_UPLOAD} request, in which the request is retryed without the {@link ContentResolver#SYNC_EXTRAS_UPLOAD} extra set). The SyncManager checks the type of error by calling {@link SyncResult#hasHardError()} and  {@link SyncResult#hasSoftError()}. If both are true then the SyncManager treats it as a hard error, not a soft error.
Internal helper for creating a clean SyncResult or one that indicated that a sync is already in progress.
Convenience method for determining if the SyncResult indicates that a hard error occurred. See {@link #SyncResult()} for an explanation of what the SyncManager does when it sees a hard error. <p> A hard error is indicated when any of the following is true: <ul> <li> {@link SyncStats#numParseExceptions} > 0 <li> {@link SyncStats#numConflictDetectedExceptions} > 0 <li> {@link SyncStats#numAuthExceptions} > 0 <li> {@link #tooManyDeletions} <li> {@link #tooManyRetries} <li> {@link #databaseError}
Convenience method for determining if the SyncResult indicates that a soft error occurred. See {@link #SyncResult()} for an explanation of what the SyncManager does when it sees a soft error. <p> A soft error is indicated when any of the following is true: <ul> <li> {@link SyncStats#numIoExceptions} > 0 <li> {@link #syncAlreadyInProgress} </ul>
A convenience method for determining of the SyncResult indicates that an error occurred.
Clears the SyncResult to a clean state. Throws an {@link UnsupportedOperationException} if this is called when {@link #syncAlreadyInProgress} is set.
Generates a debugging string indicating the status. The string consist of a sequence of code letter followed by the count. Code letters are f - fullSyncRequested, r - partialSyncUnavailable, X - hardError, e - numParseExceptions, c - numConflictDetectedExceptions, a - numAuthExceptions, D - tooManyDeletions, R - tooManyRetries, b - databaseError, x - softError, l - syncAlreadyInProgress, I - numIoExceptions
Reset all the counters to 0.
Returns true if there is currently a sync operation for the given account or authority actively being processed.
Return a copy of the current array of pending operations.  The PendingOperation objects are the real objects stored inside, so that they can be used with deleteFromPending().
Return the number of currently pending operations.
Called when the set of account has changed, given the new array of active accounts.
Called when a sync is starting. Supply a valid ActiveSyncContext with information about the sync.
Called to indicate that a previously active sync is no longer active.
To allow others to send active change reports, to poke clients.
Note that sync has started for the given account and authority.
Return a list of the currently active syncs. Note that the returned items are the real, live active sync objects, so be careful what you do with it.
Return an array of the current sync status for all authorities.  Note that the objects inside the array are the real, live status objects, so be careful what you do with them.
Return an array of the current authorities. Note that the objects inside the array are the real, live objects, so be careful what you do with them.
Returns the status that matches the authority and account.
Return an array of the current sync status for all authorities.  Note that the objects inside the array are the real, live status objects, so be careful what you do with them.
Return an array of the current per-day statistics.  Note that the objects inside the array are the real, live status objects, so be careful what you do with them.
If sync is failing for any of the provider/accounts then determine the time at which it started failing and return the earliest time over all the provider/accounts. If none are failing then return 0.
Retrieve an authority, returning null if one does not exist. requested authority does not exist.
public for testing
Read all account information back in to the initial engine state.
some authority names have changed. copy over their settings and delete the old ones
Write all account information to the account file.
Load sync engine state from the old syncmanager database, and then erase it.  Note that we don't deal with pending operations, active sync, or history.
Read all sync status back in to the initial engine state.
Write all sync status to the sync status file.
Read all pending operations back in to the initial engine state.
Write all currently pending ops to the pending ops file.
Append the given operation to the pending ops file; if unable to, write all pending ops.
Read all sync statistics back in to the initial engine state.
Write all sync statistics to the sync status file.
Creates the root node of the URI tree.
Add a URI to match, and the code to return when this URI is matched. URI nodes may be exact match string, the token "*" that matches any text, or the token "#" that matches only numbers. any text, and # may be used as a wild card for numbers. against the given components. Must be positive.
Try to match against the path in a url. or -1 if there is no matched node.
close all database connections in the pool - even if they are in use!
get a free connection from the pool the compiled statement for this sql.
release the given database connection back to the pool.
Returns a list of all database connections in the pool (both free and busy connections). This method is used when "adb bugreport" is done.
package level access for testing purposes only. otherwise, private should be sufficient.
only for testing purposes
only used for testing purposes.
only used for testing purposes.
only used for testing purposes.
only used for testing purposes.
only for testing purposes
Begins a transaction in EXCLUSIVE mode. <p> Transactions can be nested. When the outer transaction is ended all of the work done in that transaction and all of the nested transactions will be committed or rolled back. The changes will be rolled back if any transaction is ended without being marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed. </p> <p>Here is the standard idiom for transactions: <pre> db.beginTransaction(); try { } finally { } </pre>
Begins a transaction in IMMEDIATE mode. Transactions can be nested. When the outer transaction is ended all of the work done in that transaction and all of the nested transactions will be committed or rolled back. The changes will be rolled back if any transaction is ended without being marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed. <p> Here is the standard idiom for transactions: <pre> db.beginTransactionNonExclusive(); try { } finally { } </pre>
Begins a transaction in EXCLUSIVE mode. <p> Transactions can be nested. When the outer transaction is ended all of the work done in that transaction and all of the nested transactions will be committed or rolled back. The changes will be rolled back if any transaction is ended without being marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed. </p> <p>Here is the standard idiom for transactions: <pre> db.beginTransactionWithListener(listener); try { } finally { } </pre> commits, or is rolled back, either explicitly or by a call to {@link #yieldIfContendedSafely}.
Begins a transaction in IMMEDIATE mode. Transactions can be nested. When the outer transaction is ended all of the work done in that transaction and all of the nested transactions will be committed or rolled back. The changes will be rolled back if any transaction is ended without being marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed. <p> Here is the standard idiom for transactions: <pre> db.beginTransactionWithListenerNonExclusive(listener); try { } finally { } </pre>
Marks the current transaction as successful. Do not do any more database work between calling this and calling endTransaction. Do as little non-database work as possible in that situation too. If any errors are encountered between this and endTransaction the transaction will still be committed. transaction is already marked as successful.
Returns true if the caller is considered part of the current transaction, if any. <p> Caller is part of the current transaction if either of the following is true <ol> <li>If transaction is started by calling beginTransaction() methods AND if the caller is in the same thread as the thread that started the transaction. </li> <li>If the transaction is started by calling {@link #execSQL(String)} like this: execSQL("BEGIN transaction"). In this case, every thread in the process is considered part of the current transaction.</li> </ol>
Open the database according to the flags {@link #OPEN_READWRITE} {@link #OPEN_READONLY} {@link #CREATE_IF_NECESSARY} and/or {@link #NO_LOCALIZED_COLLATORS}. <p>Sets the locale of the database to the  the system's current locale. Call {@link #setLocale} if you would like something else.</p> <p>Accepts input param: a concrete instance of {@link DatabaseErrorHandler} to be used to handle corruption when sqlite reports database corruption.</p> when sqlite reports database corruption
Equivalent to openDatabase(file.getPath(), factory, CREATE_IF_NECESSARY).
Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY).
Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY, errorHandler).
package level access for testing purposes
Registers a CustomFunction callback as a function that can be called from sqlite3 database triggers.
Compiles an SQL statement into a reusable pre-compiled statement object. The parameters are identical to {@link #execSQL(String)}. You may put ?s in the statement and fill in those values with {@link SQLiteProgram#bindString} and {@link SQLiteProgram#bindLong} each time you want to run the statement. Statements may not return result sets larger than 1x1. No two threads should be using the same {@link SQLiteStatement} at the same time. {@link SQLiteStatement}s are not synchronized, see the documentation for more details.
Convenience method for replacing a row in the database. the row.
Execute a single SQL statement that is NOT a SELECT or any other SQL statement that returns data. <p> It has no means to return any data (such as the number of affected rows). Instead, you're encouraged to use {@link #insert(String, String, ContentValues)}, {@link #update(String, ContentValues, String, String[])}, et al, when possible. </p> <p> When using {@link #enableWriteAheadLogging()}, journal_mode is automatically managed by this class. So, do not set journal_mode using "PRAGMA journal_mode'<value>" statement if your app is using {@link #enableWriteAheadLogging()} </p> not supported.
Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE. <p> For INSERT statements, use any of the following instead. <ul> <li>{@link #insert(String, String, ContentValues)}</li> <li>{@link #insertOrThrow(String, String, ContentValues)}</li> <li>{@link #insertWithOnConflict(String, String, ContentValues, int)}</li> </ul> <p> For UPDATE statements, use any of the following instead. <ul> <li>{@link #update(String, ContentValues, String, String[])}</li> <li>{@link #updateWithOnConflict(String, ContentValues, String, String[], int)}</li> </ul> <p> For DELETE statements, use any of the following instead. <ul> <li>{@link #delete(String, String, String[])}</li> </ul> <p> For example, the following are good candidates for using this method: <ul> <li>ALTER TABLE</li> <li>CREATE or DROP table / trigger / view / index / virtual table</li> <li>REINDEX</li> <li>RELEASE</li> <li>SAVEPOINT</li> <li>PRAGMA that returns no data</li> </ul> </p> <p> When using {@link #enableWriteAheadLogging()}, journal_mode is automatically managed by this class. So, do not set journal_mode using "PRAGMA journal_mode'<value>" statement if your app is using {@link #enableWriteAheadLogging()} </p> not supported.
Private constructor. corruption. may be NULL. connection handles.
Adds the given SQL and its compiled-statement-id-returned-by-sqlite to the cache of compiledQueries attached to 'this'. <p> If there is already a {@link SQLiteCompiledSql} in compiledQueries for the given SQL, the new {@link SQLiteCompiledSql} object is NOT inserted into the cache (i.e.,the current mapping is NOT replaced with the new mapping).
package-level access for testing purposes
From the compiledQueries cache, returns the compiled-statement-id for the given SQL. Returns null, if not found in the cache.
Sets the maximum size of the prepared-statement cache for this database. (size of the cache = number of compiled-sql-statements stored in the cache). Maximum cache size can ONLY be increased from its current size (default = 10). If this method is called with smaller size than the current maximum value, then IllegalStateException is thrown. This method is thread-safe. the value set with previous setMaxSqlCacheSize() call.
for testing only
This method enables parallel execution of queries from multiple threads on the same database. It does this by opening multiple handles to the database and using a different database handle for each query. <p> If a transaction is in progress on one connection handle and say, a table is updated in the transaction, then query on the same table on another connection handle will block for the transaction to complete. But this method enables such queries to execute by having them return old version of the data from the table. Most often it is the data that existed in the table prior to the above transaction updates on that table. <p> Maximum number of simultaneous handles used to execute queries in parallel is dependent upon the device memory and possibly other properties. <p> After calling this method, execution of queries in parallel is enabled as long as this database handle is open. To disable execution of queries in parallel, database should be closed and reopened. <p> If a query is part of a transaction, then it is executed on the same database handle the transaction was begun. <p> If the database has any attached databases, then execution of queries in paralel is NOT possible. In such cases, a message is printed to logcat and false is returned. <p> This feature is not available for :memory: databases. In such cases, a message is printed to logcat and false is returned. <p> A typical way to use this method is the following: <pre> </pre> <p> Writers should use {@link #beginTransactionNonExclusive()} or {@link #beginTransactionWithListenerNonExclusive(SQLiteTransactionListener)} to start a trsnsaction. Non-exclusive mode allows database file to be in readable by threads executing queries. </p>
This method disables the features enabled by {@link #enableWriteAheadLogging()}.
Returns list of full pathnames of all attached databases including the main database by executing 'pragma database_list' on the database. is not open.
Runs 'pragma integrity_check' on the given database (and all the attached databases) and returns true if the given database (and all its attached databases) pass integrity_check, false otherwise. If the result is false, then this method logs the errors reported by the integrity_check command execution. Note that 'pragma integrity_check' on a database can take a long time. false otherwise.
Create a helper object to create, open, and/or manage a database. The database is not actually created or opened until one of {@link #getWritableDatabase} or {@link #getReadableDatabase} is called. <p>Accepts input param: a concrete instance of {@link DatabaseErrorHandler} to be used to handle corruption when sqlite reports database corruption.</p> corruption.
Return the name of the SQLite database being opened, as given tp the constructor.
Create and/or open a database that will be used for reading and writing. The first time this is called, the database will be opened and {@link #onCreate}, {@link #onUpgrade} and/or {@link #onOpen} will be called. <p>Once opened successfully, the database is cached, so you can call this method every time you need to write to the database. (Make sure to call {@link #close} when you no longer need the database.) Errors such as bad permissions or a full disk may cause this method to fail, but future attempts may succeed if the problem is fixed.</p> <p class="caution">Database upgrade may take a long time, you should not call this method from the application main thread, including from {@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.
Create and/or open a database.  This will be the same object returned by {@link #getWritableDatabase} unless some problem, such as a full disk, requires the database to be opened read-only.  In that case, a read-only database object will be returned.  If the problem is fixed, a future call to {@link #getWritableDatabase} may succeed, in which case the read-only database object will be closed and the read/write object will be returned in the future. <p class="caution">Like {@link #getWritableDatabase}, this method may take a long time to return, so you should not call it from the application main thread, including from {@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.
Called when the database needs to be downgraded. This is stricly similar to onUpgrade() method, but is called whenever current version is newer than requested one. However, this method is not abstract, so it is not mandatory for a customer to implement it. If not overridden, default implementation will reject downgrade and throws SQLiteException
In the case of {@link SQLiteStatement}, this member stores the bindargs passed to the following methods, instead of actually doing the binding. <ul> <li>{@link #bindBlob(int, byte[])}</li> <li>{@link #bindDouble(int, double)}</li> <li>{@link #bindLong(int, long)}</li> <li>{@link #bindNull(int)}</li> <li>{@link #bindString(int, String)}</li> </ul> <p> Each entry in the array is a Pair of <ol> <li>bind arg position number</li> <li>the value to be bound to the bindarg</li> </ol> <p> It is lazily initialized in the above bind methods and it is cleared in {@link #clearBindings()} method. <p> It is protected (in multi-threaded environment) by {@link SQLiteProgram}.this package */ HashMap<Integer, Object> mBindArgs = null; package */ final int mStatementType; package */ static final int STATEMENT_CACHEABLE = 16; package */ static final int STATEMENT_DONT_PREPARE = 32; package */ static final int STATEMENT_USE_POOLED_CONN = 64; package */ static final int STATEMENT_TYPE_MASK = 0x0f;
used only for testing purposes
Bind a long value to this statement. The value remains bound until {@link #clearBindings} is called. addToBindArgs
Given an array of String bindArgs, this method binds all of them in one single call.
Constructor used to create new instance to replace a given instance of this class. This constructor is used when the current Query object is now associated with a different {@link SQLiteDatabase} object.
When set, the selection is verified against malicious arguments. When using this class to create a statement using {@link #buildQueryString(boolean, String, String[], String, String, String, String, String)}, non-numeric limits will raise an exception. If a projection map is specified, fields not in that map will be ignored. If this class is used to execute the statement directly using {@link #query(SQLiteDatabase, String[], String, String[], String, String, String)} {@link #query(SQLiteDatabase, String[], String, String[], String, String, String, String)}, additionally also parenthesis escaping selection are caught. To summarize: To get maximum protection against malicious third party apps (for example content provider consumers), make sure to do the following: <ul> <li>Set this value to true</li> <li>Use a projection map</li> <li>Use one of the query overloads instead of getting the statement as a sql string</li> </ul> By default, this value is false.
Verifies that a SQL statement is valid by compiling it. If the SQL statement is not valid, this method will throw a {@link SQLiteException}.
Construct a SELECT statement suitable for use in a group of SELECT statements that will be joined through UNION operators in buildUnionQuery. formatted as an SQL WHERE clause (excluding the WHERE itself).  Passing null will return all rows for the given URL. as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped. the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself).  Passing null will cause all row groups to be included, and is required when row grouping is not being used. ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered. formatted as LIMIT clause. Passing null denotes no LIMIT clause.
Construct a SELECT statement suitable for use in a group of SELECT statements that will be joined through UNION operators in buildUnionQuery. whose cells will contain the name of the table from which each row was drawn. result.  This may include columns that do not appear in the table this SELECT is querying (i.e. mTables), but that do appear in one of the other tables in the UNION query that we are constructing. that appear in this table (i.e. in the table whose name is mTables).  Since columns in unionColumns include columns that appear only in other tables, we use this array to distinguish which ones actually are present.  Other columns will have NULL values for results from this subquery. this index are included under the assumption that they're computed and therefore won't appear in columnsPresentInTable, e.g. "date * 1000 as normalized_date" type-discriminator column in this subquery formatted as an SQL WHERE clause (excluding the WHERE itself).  Passing null will return all rows for the given URL. as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped. the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself).  Passing null will cause all row groups to be included, and is required when row grouping is not being used.
Execute this SQL statement, if it is not a SELECT / INSERT / DELETE / UPDATE, for example CREATE / DROP table, view, trigger, index etc.
Execute this SQL statement, if the the number of rows affected by execution of this SQL statement is of any importance to the caller - for example, UPDATE / DELETE SQL statements.
Executes a statement that returns a 1 by 1 table with a blob value.
Called before every method in this class before executing a SQL statement, this method does the following: <ul> <li>make sure the database is open</li> <li>get a database connection from the connection pool,if possible</li> <li>notifies {@link BlockGuard} of read/write</li> <li>if the SQL statement is an update, start transaction if not already in one. otherwise, get lock on the database</li> <li>acquire reference on this object</li> <li>and then return the current time _after_ the database lock was acquired</li> </ul> <p> This method removes the duplicate code from the other public methods in this class.
this method releases locks and references acquired in {@link #acquireAndLock(boolean)}
If the cursor is backed by a {@link CursorWindow}, returns a pre-filled window with the contents of the cursor, otherwise null.
Sets a {@link Bundle} that will be returned by {@link #getExtras()}.  <code>null</code> will be converted into {@link Bundle#EMPTY}.
Sets a new cursor window for the cursor to use. <p> The cursor takes ownership of the provided cursor window; the cursor window will be closed when the cursor is closed or when the cursor adopts a new cursor window. </p><p> If the cursor previously had a cursor window, then it is closed when the new cursor window is assigned. </p>
Returns true if the cursor has an associated cursor window.
Closes the cursor window and sets {@link #mWindow} to null.
If there is a window, clear it. Otherwise, creates a local window.
Initializes the adaptor. Must be called before first use.
invokes dispatchUpdate on each observer, unless the observer doesn't want self-notifications and the update is from a self-notification
invokes onChange on each observer
onChange() will happen on the provider Handler.
Gets access to the binder transport object. Not for public consumption. {@hide}
Gets access to the binder transport object, and unlinks the transport object from the ContentObserver. Not for public consumption. {@hide}
Returns true if this observer is interested in notifications for changes made through the cursor the observer is registered with.
Initializes the CursorJoiner and resets the cursors to the first row. The left and right column name arrays must have the same number of columns.
Lookup the indicies of the each column name and return them in an array.
Returns whether or not there are more rows to compare using next().
Returns the comparison result of the next row from each cursor. If one cursor has no more rows but the other does then subsequent calls to this will indicate that the remaining rows are unique. <p> The caller must check that hasNext() returns true before calling this. <p> Once next() has been called the cursors specified in the result of the call to next() are guaranteed to point to the row that was indicated. Reading values from the cursor that was not indicated in the call to next() will result in undefined behavior. if the row pointed to by the right cursor is unique, BOTH if the rows in both cursors are the same.
Reads the strings from the cursor that are specifed in the columnIndicies array and saves them in values beginning at startingIndex, skipping a slot for each value. If columnIndicies has length 3 and startingIndex is 1, the values will be stored in slots 1, 3, and 5.
Increment the cursors past the rows indicated in the most recent call to next(). This will only have an affect once per call to next().
Compare the values. Values contains n pairs of strings. If all the pairs of strings match then returns 0. Otherwise returns the comparison result of the first non-matching pair of values, -1 if the first of the pair is less than the second of the pair or 1 if it is greater.
Create a ContentObserver from the observer and register it as an observer on the underlying cursor.
Unregister the observer if it is already registered.
Creates a new empty cursor window and gives it a name. <p> The cursor initially has no rows or columns.  Call {@link #setNumColumns(int)} to set the number of columns before adding any rows to the cursor. </p> false if it might be sent to another processes.
Creates a new empty cursor window. <p> The cursor initially has no rows or columns.  Call {@link #setNumColumns(int)} to set the number of columns before adding any rows to the cursor. </p> false if it might be sent to another processes.
Closes the cursor window and frees its underlying resources when all other remaining references have been released.
Clears out the existing contents of the window, making it safe to reuse for new data. <p> The start position ({@link #getStartPosition()}), number of rows ({@link #getNumRows()}), and number of columns in the cursor are all reset to zero. </p>
Gets the start position of this cursor window. <p> The start position is the zero-based index of the first row that this window contains relative to the entire result set of the {@link Cursor}. </p>
Sets the start position of this cursor window. <p> The start position is the zero-based index of the first row that this window contains relative to the entire result set of the {@link Cursor}. </p>
Gets the number of rows in this window.
Sets the number of columns in this window. <p> This method must be called before any rows are added to the window, otherwise it will fail to set the number of columns if it differs from the current number of columns. </p>
Allocates a new row at the end of this cursor window.
Frees the last row in this cursor window.
Returns the type of the field at the specified row and column index. <p> The returned field types are: <ul> <li>{@link Cursor#FIELD_TYPE_NULL}</li> <li>{@link Cursor#FIELD_TYPE_INTEGER}</li> <li>{@link Cursor#FIELD_TYPE_FLOAT}</li> <li>{@link Cursor#FIELD_TYPE_STRING}</li> <li>{@link Cursor#FIELD_TYPE_BLOB}</li> </ul> </p> start position ({@link #getStartPosition()}).
Gets the value of the field at the specified row and column index as a byte array. <p> The result is determined as follows: <ul> <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result is <code>null</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then the result is the blob value.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result is the array of bytes that make up the internal representation of the string value.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER} or {@link Cursor#FIELD_TYPE_FLOAT}, then a {@link SQLiteException} is thrown.</li> </ul> </p> start position ({@link #getStartPosition()}).
Gets the value of the field at the specified row and column index as a string. <p> The result is determined as follows: <ul> <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result is <code>null</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result is the string value.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result is a string representation of the integer in decimal, obtained by formatting the value with the <code>printf</code> family of functions using format specifier <code>%lld</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result is a string representation of the floating-point value in decimal, obtained by formatting the value with the <code>printf</code> family of functions using format specifier <code>%g</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a {@link SQLiteException} is thrown.</li> </ul> </p> start position ({@link #getStartPosition()}).
Copies the text of the field at the specified row and column index into a {@link CharArrayBuffer}. <p> The buffer is populated as follows: <ul> <li>If the buffer is too small for the value to be copied, then it is automatically resized.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the buffer is set to an empty string.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the buffer is set to the contents of the string.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the buffer is set to a string representation of the integer in decimal, obtained by formatting the value with the <code>printf</code> family of functions using format specifier <code>%lld</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the buffer is set to a string representation of the floating-point value in decimal, obtained by formatting the value with the <code>printf</code> family of functions using format specifier <code>%g</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a {@link SQLiteException} is thrown.</li> </ul> </p> start position ({@link #getStartPosition()}). resized if the requested string is larger than the buffer's current capacity.
Gets the value of the field at the specified row and column index as a <code>long</code>. <p> The result is determined as follows: <ul> <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result is <code>0L</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result is the value obtained by parsing the string value with <code>strtoll</code>. <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result is the <code>long</code> value.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result is the floating-point value converted to a <code>long</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a {@link SQLiteException} is thrown.</li> </ul> </p> start position ({@link #getStartPosition()}).
Gets the value of the field at the specified row and column index as a <code>double</code>. <p> The result is determined as follows: <ul> <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result is <code>0.0</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result is the value obtained by parsing the string value with <code>strtod</code>. <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result is the integer value converted to a <code>double</code>.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result is the <code>double</code> value.</li> <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a {@link SQLiteException} is thrown.</li> </ul> </p> start position ({@link #getStartPosition()}).
Gets the value of the field at the specified row and column index as a <code>short</code>. <p> The result is determined by invoking {@link #getLong} and converting the result to <code>short</code>. </p> start position ({@link #getStartPosition()}).
Gets the value of the field at the specified row and column index as an <code>int</code>. <p> The result is determined by invoking {@link #getLong} and converting the result to <code>int</code>. </p> start position ({@link #getStartPosition()}).
Gets the value of the field at the specified row and column index as a <code>float</code>. <p> The result is determined by invoking {@link #getDouble} and converting the result to <code>float</code>. </p> start position ({@link #getStartPosition()}).
Copies a byte array into the field at the specified row and column index. start position ({@link #getStartPosition()}).
Copies a string into the field at the specified row and column index. start position ({@link #getStartPosition()}).
Puts a long integer into the field at the specified row and column index. start position ({@link #getStartPosition()}).
Puts a double-precision floating point value into the field at the specified row and column index. start position ({@link #getStartPosition()}).
Puts a null value into the field at the specified row and column index. start position ({@link #getStartPosition()}).
Gets the underlying cursor that is wrapped by this instance.
Utility method to run the query on the db and return the blob value in the first column of the first row.
Utility method to run the pre-compiled query and return the blob value in the first column of the first row.
Creates a db and populates it with the sql statements in sqlStatements. of the form returned by sqlite3's <tt>.dump</tt> command (statements separated by semicolons)
Returns one of the following which represent the type of the given SQL statement. <ol> <li>{@link #STATEMENT_SELECT}</li> <li>{@link #STATEMENT_UPDATE}</li> <li>{@link #STATEMENT_ATTACH}</li> <li>{@link #STATEMENT_BEGIN}</li> <li>{@link #STATEMENT_COMMIT}</li> <li>{@link #STATEMENT_ABORT}</li> <li>{@link #STATEMENT_OTHER}</li> </ol>
Invokes onChanged on each observer. Called when the data set being observed has changed, and which when read contains the new state of the data.
Invokes onInvalidated on each observer. Called when the data set being monitored has changed such that it is no longer valid.
This method is called when the entire data set has changed, most likely through a call to {@link Cursor#requery()} on a {@link Cursor}.
This method is called when the entire data becomes invalid, most likely through a call to {@link Cursor#deactivate()} or {@link Cursor#close()} on a {@link Cursor}.
Cast an IBinder object into an android.database.IContentObserver interface, generating a proxy if needed.
This method is called when an update occurs to the cursor that is being observed. selfUpdate is true if the update was caused by a call to commit on the cursor that is being observed.
Adds an observer to the list. The observer cannot be null and it must not already be registered.
Removes a previously registered observer. The observer must not be null and it must already have been registered.
Remove all registered observer
Handle a chunk of data.
Set the application name.  Called when we get named, which may be before or after DDMS connects.  For the latter we need to send up an APNM message.
Send an APNM (APplication NaMe) chunk.
Register for the messages we're interested in.
Handle a chunk of data.  We're only registered for "EXIT".
Handle a "HeaP InFo" request.
Handle a "HeaP SeGment" or "Native Heap SeGment" request.
Handle a "HeaP DUmp" request. This currently just returns a result code.  We could pull up the entire contents of the file and return them, but hprof dump files can be a few megabytes.
Handle a "HeaP Dump Streaming" request. This tells the VM to create a heap dump and send it directly to DDMS.  The dumps are large enough that we don't want to copy the data into a byte[] and send it from here.
Handle a "HeaP Garbage Collection" request.
Handle a "REcent Allocation Enable" request.
Handle a "REcent Allocation Query" request.
Handle a "REcent ALlocations" request.
Called when the DDM server connects.  The handler is allowed to send messages to the server.
Called when the DDM server disconnects.  Can be used to disable periodic transmissions or clean up saved state.
Handle introductory packet.
Handle request for list of supported features.
Send up a WAIT chunk.  The only currently defined value for "reason" is zero, which means "waiting for a debugger".
Handle a "Native Heap GeT" request.
Handle a "Method PRofiling Start" request.
Handle a "Method PRofiling End" request.
Handle a "Method Profiling w/Streaming Start" request.
Handle a "Method Profiling w/Streaming End" request.
Handle a "Method PRofiling Query" request.
Handle a "THread notification ENable" request.
Handle a "THread STatus" request.  This is constructed by the VM.
Handle a STacK List request. This is done by threadId, which isn't great since those are recycled.  We need a thread serial ID.  The Linux tid is an okay answer as it's unlikely to recycle at the exact wrong moment. However, we're using the short threadId in THST messages, so we use them here for consistency.  (One thought is to keep the current thread ID in the low 16 bits and somehow serialize the top 16 bits.)
Serialize a StackTraceElement[] into an STKL chunk. We include the threadId in the response so the other side doesn't have to match up requests and responses as carefully.
Register handlers for all known chunk types. If you write a handler, add a registration call here. Note that this is invoked by the application (usually through a static initializer in the main class), not the VM.  It's done this way so that the handlers can use Android classes with native calls that aren't registered until after the VM is initialized (e.g. logging).  It also allows debugging of DDM handler initialization. The chunk dispatcher will pause until we call registrationComplete(), so that we don't have a race that causes us to drop packets before we finish here.
Construct the DrmConstraint.
Get the count constraint.
Get the start date constraint.
Get the end date constraint.
Get the Interval constraint.
Construct a DrmRawContent object.
Get rights address from raw Seperate Delivery content.
Get the type of the raw DRM content.
Get one InputStream object to read decrypted content.
Get the type of the decrypted media content.
Get the length of the decrypted media content.
Construct a DrmInputStream instance.
Get the constraint of the given permission on this rights object.
Consume the rights of the given permission.
Get the DrmRightsManager instance.
Install one DRM rights and return one instance of DrmRights.
Query DRM rights of specified DRM raw content.
Get the list of all DRM rights saved in local client.
Delete the specified DRM rights object.
Creates a <code>DrmConvertedStatus</code> object with the specified parameters.
Creates a <code>DrmErrorEvent</code> object with the specified parameters.
Creates a <code>DrmErrorEvent</code> object with the specified parameters. information provided by the plug-in.
Creates a <code>DrmEvent</code> object with the specified parameters.
Retrieves the unique session identifier associated with this object.
Retrieves the type of information that is associated with this object.
Retrieves the message description associated with this object.
Retrieves the attribute associated with the specified key. the key is found.
Creates a <code>DrmInfo</code> object with the given parameters.
Adds optional information as key-value pairs to this object. To add a custom object to the <code>DrmInfo</code> object, you must override the {@link #toString} implementation.
Retrieves the value of a given key.
Retrieves an iterator object that you can use to iterate over the keys associated with this <code>DrmInfo</code> object.
Retrieves an iterator object that you can use to iterate over the values associated with this <code>DrmInfo</code> object.
Retrieves the trigger data associated with this object.
Retrieves the MIME type associated with this object.
Retrieves the information type associated with this object.
Returns whether this instance is valid or not
Creates a <code>DrmInfoEvent</code> object with the specified parameters.
Creates a <code>DrmInfoEvent</code> object with the specified parameters. information provided by the plug-in.
Creates a <code>DrmInfoRequest</code> object with type and MIME type.
Adds optional information as key-value pairs to this object.
Retrieves the value of a given key. found.
Retrieves an iterator object that you can use to iterate over the keys associated with this <code>DrmInfoRequest</code> object.
Retrieves an iterator object that you can use to iterate over the values associated with this <code>DrmInfoRequest</code> object.
Creates a <code>DrmInfoStatus</code> object with the specified parameters.
Creates a <code>DrmManagerClient</code>.
Registers an {@link DrmManagerClient.OnInfoListener} callback, which is invoked when the DRM framework sends status or warning information during registration or rights acquisition.
Registers an {@link DrmManagerClient.OnEventListener} callback, which is invoked when the DRM framework sends information about DRM processing.
Registers an {@link DrmManagerClient.OnErrorListener} callback, which is invoked when the DRM framework sends error information.
Retrieves information about all the DRM plug-ins (agents) that are registered with the DRM framework.
Retrieves constraint information for rights-protected content. key-value pairs representing the constraints. Null in case of failure.
Retrieves metadata information for rights-protected content. key-value pairs representing the metadata. Null in case of failure.
Retrieves metadata information for rights-protected content. key-value pairs representing the constraints. Null in case of failure.
Saves rights to a specified path and associates that path with the content path. <p class="note"><strong>Note:</strong> For OMA or WM-DRM, <code>rightsPath</code> and <code>contentPath</code> can be null.</p> <code>rightsPath</code>.
Installs a new DRM plug-in (agent) at runtime. {@hide}
Checks whether the given MIME type or path can be handled.
Checks whether the given MIME type or URI can be handled.
Processes the given DRM information based on the information type.
Retrieves information for registering, unregistering, or acquiring rights. information being retrieved.
Processes a given {@link DrmInfoRequest} and returns the rights information asynchronously. This is a utility method that consists of an {@link #acquireDrmInfo(DrmInfoRequest) acquireDrmInfo()} and a {@link #processDrmInfo(DrmInfo) processDrmInfo()} method call. This utility method can be used only if the selected DRM plug-in (agent) supports this sequence of calls. Some DRM agents, such as OMA, do not support this utility method, in which case an application must invoke {@link #acquireDrmInfo(DrmInfoRequest) acquireDrmInfo()} and {@link #processDrmInfo(DrmInfo) processDrmInfo()} separately.
Retrieves the type of rights-protected object (for example, content object, rights object, and so on) using the specified path or MIME type. At least one parameter must be specified to retrieve the DRM object type.
Retrieves the type of rights-protected object (for example, content object, rights object, and so on) using the specified URI or MIME type. At least one parameter must be specified to retrieve the DRM object type.
Retrieves the MIME type embedded in the original content.
Checks whether the given content has valid rights.
Check whether the given content has valid rights.
Checks whether the given rights-protected content has valid rights for the specified {@link DrmStore.Action}.
Removes the rights associated with the given rights-protected content.
Removes all the rights information of every DRM plug-in (agent) associated with the DRM framework. Will be used during a master reset.
Initiates a new conversion session. An application must initiate a conversion session with this method each time it downloads a rights-protected file that needs to be converted. This method applies only to forward-locking (copy protection) DRM schemes.
Converts the input data (content) that is part of a rights-protected file. The converted data and status is returned in a {@link DrmConvertedStatus} object. This method should be called each time there is a new block of data received by the application. the converted data, and offset for the header and body signature. An application can ignore the offset because it is only relevant to the {@link #closeConvertSession closeConvertSession()} method.
Informs the DRM plug-in (agent) that there is no more data to convert or that an error has occurred. Upon successful conversion of the data, the DRM agent will provide an offset value indicating where the header and body signature should be added. Appending the signature is necessary to protect the integrity of the converted file. the converted data, and the offset for the header and body signature.
Creates a <code>DrmRights</code> object with the given parameters.
Retrieves the rights data associated with this <code>DrmRights</code> object.
Retrieves the MIME type associated with this <code>DrmRights</code> object.
Retrieves the account ID associated with this <code>DrmRights</code> object.
Retrieves the subscription ID associated with this <code>DrmRights</code> object.
Determines whether this instance is valid or not.
Adds the specified MIME type to the list of MIME types this DRM plug-in supports.
Adds the specified file suffix to the list of file suffixes this DRM plug-in supports.
Retrieves an iterator object that you can use to iterate over the MIME types that this DRM plug-in supports.
Retrieves an iterator object that you can use to iterate over the file suffixes that this DRM plug-in supports.
Sets a description for the DRM plug-in (agent).
Retrieves the DRM plug-in (agent) description.
Overridden hash code implementation.
Overridden <code>equals</code> implementation.
Determines whether a given MIME type is supported.
Determines whether a given file suffix is supported.
Should be used when we need to read from local file
Gets an instance of {@link DrmUtils.ExtendedMetadataParser}, which can be used to parse extended metadata embedded in DRM constraint information.
This will parse the following format KeyLengthValueLengthKeyValueKeyLength1ValueLength1Key1Value1..\0
Creates a <code>ProcessedData</code> object with the given parameters.
Retrieves the processed data.
Retrieves the account ID associated with this object.
Returns the subscription ID associated with this object.
Private constructor that must received an already allocated native EmojiFactory int (pointer). This can be called from JNI code.
Returns Bitmap object corresponding to the AndroidPua. Note that each Bitmap is cached by this class, which means that, if you modify a Bitmap object (using setPos() method), all same emoji Bitmap will be modified. If it is unacceptable, please copy the object before modifying it. Otherwise null is returned.
Returns Bitmap object corresponding to the vendor specified sjis. See comments in getBitmapFromAndroidPua(). null is returned.
Returns Bitmap object corresponding to the vendor specific Unicode. See comments in getBitmapFromAndroidPua(). null is returned.
Returns Unicode PUA for Android corresponding to the vendor specific sjis.
Returns vendor specific sjis corresponding to the Unicode AndroidPua.
Returns Unicode PUA for Android corresponding to the vendor specific Unicode. Unicode.
Returns vendor specific Unicode corresponding to the Unicode AndroidPua.
Returns the lowest code point corresponding to an Android emoji character.
Returns the highest code point corresponding to an Android emoji character.
Adds a stroke to the gesture.
Calculates the total length of the gesture. When there are multiple strokes in the gesture, this returns the sum of the lengths of all the strokes.
Sets the id of the gesture.
Creates a bitmap of the gesture with a transparent background.
Specify how the gesture library will handle orientation. Use ORIENTATION_INVARIANT or ORIENTATION_SENSITIVE
Get all the gesture entry names in the library
Recognize a gesture
Add a gesture for the entry
Remove a gesture from the library. If there are no more gestures for the given entry, the gesture entry will be removed.
Remove a entry of gestures
Get all the gestures of an entry
Save the gesture library
Load the gesture library
A constructor that constructs a gesture stroke from a list of gesture points.
A faster constructor specially for cloning a stroke.
Draws the stroke with a given canvas and paint.
Converts the stroke to a Path of a given number of points.
Invalidates the cached path that is used to render the stroke.
Computes an oriented bounding box of the stroke.
Samples the gesture spatially by rendering the gesture into a 2D grayscale bitmap. Scales the gesture to fit the size of the bitmap. The scaling does not necessarily keep the aspect ratio of the gesture.
Samples the gesture spatially by rendering the gesture into a 2D grayscale bitmap. Scales the gesture to fit the size of the bitmap.
Samples a stroke temporally into a given number of evenly-distributed points.
Calculates the centroid of a set of points.
Calculates the variance-covariance matrix of a set of points.
Calculates the squared Euclidean distance between two vectors.
Calculates the cosine distance between two instances.
Calculates the "minimum" cosine distance between two instances.
Computes an oriented, minimum bounding box of a set of points.
create a learning instance for a single stroke gesture
Add an instance to the learner
Retrieve all the instances
Remove an instance based on its id
Remove all the instances of a category
Currently used for debugging purpose only.
ArcShape constructor.
PathShape constructor.
Returns the RectF that defines this rectangle's bounds.
RoundRectShape constructor. Specifies an outer (round)rect and an optional inner (round)rect.
Returns the width of the Shape.
Returns the height of the Shape.
Resizes the dimensions of this shape. Must be called before {@link #draw(Canvas,Paint)}.
Checks whether the Shape is opaque. Default impl returns true. Override if your subclass can be opaque.
Returns the drawable rotated by this RotateDrawable.
<p>Starts the animation, looping if necessary. This method has no effect if the animation is running.</p>
<p>Stops the animation. This method has no effect if the animation is not running.</p>
<p>Indicates whether the animation is currently running or not.</p>
<p>This method exists for implementation purpose only and should not be called directly. Invoke {@link #start()} instead.</p>
specified index
Sets whether the animation should play once or repeat.
Add a frame to the animation
Create drawable from a bitmap, setting initial target density based on the display metrics of the resources.
Get the gravity used to position/stretch the bitmap within its bounds. See android.view.Gravity
Indicates the repeat behavior of this drawable on the X axis.
Indicates the repeat behavior of this drawable on the Y axis.
Sets the repeat behavior of this drawable on the X axis. By default, the drawable does not repeat its bitmap. Using {@link Shader.TileMode#REPEAT} or {@link Shader.TileMode#MIRROR} the bitmap can be repeated (or tiled) if the bitmap is smaller than this drawable.
Sets the repeat behavior of this drawable on the Y axis. By default, the drawable does not repeat its bitmap. Using {@link Shader.TileMode#REPEAT} or {@link Shader.TileMode#MIRROR} the bitmap can be repeated (or tiled) if the bitmap is smaller than this drawable.
Sets the repeat behavior of this drawable on both axis. By default, the drawable does not repeat its bitmap. Using {@link Shader.TileMode#REPEAT} or {@link Shader.TileMode#MIRROR} the bitmap can be repeated (or tiled) if the bitmap is smaller than this drawable.
overrides from Drawable.Callback
Creates a new black ColorDrawable.
Creates a new ColorDrawable with the specified color.
Gets the drawable's color value.
Sets the drawable's color value. This action will clobber the results of prior calls to {@link #setAlpha(int)} on this object, which side-affected the underlying color.
Returns the alpha value of this drawable's color.
Sets the color's alpha value.
Specify a bounding rectangle for the Drawable. This is where the drawable will draw when its draw() method is called.
Return a copy of the drawable's bounds in the specified Rect (allocated by the caller). The bounds specify where this will draw when its draw() method is called.
Return a copy of the drawable's bounds in a new Rect. This returns the same values as getBounds(), but the returned object is guaranteed to not be changed later by the drawable (i.e. it retains no reference to this rect). If the caller already has a Rect allocated, call copyBounds(rect).
Return the drawable's bounds Rect. Note: for efficiency, the returned object may be the same object stored in the drawable (though this is not guaranteed), so if a persistent copy of the bounds is needed, call copyBounds(rect) instead. You should also not change the object returned by this method as it may be the same object stored in the drawable.
Set a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. defined by {@link android.content.res.Configuration}.
Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created.  The default implementation returns whatever was provided through {@link #setChangingConfigurations(int)} or 0 by default.  Subclasses may extend this to or in the changing configurations of any other drawables they hold. defined by {@link android.content.res.Configuration}.
Bind a {@link Callback} object to this Drawable.  Required for clients that want to support animated drawables.
Return the current {@link Callback} implementation attached to this Drawable.
Use the current {@link Callback} implementation to have this Drawable redrawn.  Does nothing if there is no Callback attached to the Drawable.
Use the current {@link Callback} implementation to have this Drawable scheduled.  Does nothing if there is no Callback attached to the Drawable.
Use the current {@link Callback} implementation to have this Drawable unscheduled.  Does nothing if there is no Callback attached to the Drawable.
Use the current {@link android.graphics.drawable.Drawable.Callback2} implementation to get the resolved layout direction of this Drawable.
Specify a color and porterduff mode to be the colorfilter for this drawable.
Indicates whether this view will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.
Specify a set of states for the drawable. These are use-case specific, so see the relevant documentation. As an example, the background for widgets like Button understand the following states: [{@link android.R.attr#state_focused}, {@link android.R.attr#state_pressed}]. <p>If the new state you are supplying causes the appearance of the Drawable to change, then it is responsible for calling {@link #invalidateSelf} in order to have itself redrawn, <em>and</em> true will be returned from this function. <p>Note: The Drawable holds a reference on to <var>stateSet</var> until a new state array is given to it, so you must not modify this array during that time.</p> of the Drawable to change (hence requiring an invalidate), otherwise returns false.
Describes the current state, as a union of primitve states, such as {@link android.R.attr#state_focused}, {@link android.R.attr#state_selected}, etc. Some drawables may modify their imagery based on the selected state.
Specify the level for the drawable.  This allows a drawable to vary its imagery based on a continuous controller, for example to show progress or volume level. <p>If the new level you are supplying causes the appearance of the Drawable to change, then it is responsible for calling {@link #invalidateSelf} in order to have itself redrawn, <em>and</em> true will be returned from this function. of the Drawable to change (hence requiring an invalidate), otherwise returns false.
Retrieve the current level.
Set whether this Drawable is visible.  This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.
Return the appropriate opacity value for two source opacities.  If either is UNKNOWN, that is returned; else, if either is TRANSLUCENT, that is returned; else, if either is TRANSPARENT, that is returned; else, OPAQUE is returned. <p>This is to help in implementing {@link #getOpacity}.
Returns a Region representing the part of the Drawable that is completely transparent.  This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so. report, else a Region holding the parts of the Drawable's bounds that are transparent.
Return the intrinsic width of the underlying drawable object.  Returns -1 if it has no intrinsic width, such as with a solid color.
Return the intrinsic height of the underlying drawable object. Returns -1 if it has no intrinsic height, such as with a solid color.
Returns the minimum width suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its width. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.
Returns the minimum height suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its height. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.
Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. Positive values move toward the center of the Drawable (set Rect.inset). Returns true if this drawable actually has a padding, else false. When false is returned, the padding is always set to 0.
Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.
Create a drawable from an inputstream
Create a drawable from an inputstream, using the given resources and value to determine density information.
Create a drawable from an XML document. For more information on how to create resources in XML, see <a href="{@docRoot}guide/topics/resources/drawable-resource.html">Drawable Resources</a>.
Create from inside an XML document.  Called on a parser positioned at a tag in an XML document, tries to create a Drawable from that tag. Returns null if the tag is not a valid drawable.
Create a drawable from file path name.
Inflate this Drawable from an XML resource.
Inflate a Drawable from an XML resource.
Create a new Drawable instance from its constant state.  This must be implemented for drawables that change based on the target density of their caller (that is depending on whether it is in compatibility mode).
Return a {@link ConstantState} instance that holds the shared state of this Drawable.
Change the global fade duration when a new drawable is entering the scene.
Change the global fade duration when a new drawable is leaving the scene.
A boolean value indicating whether to use the maximum padding value of all frames in the set (false), or to use the padding value of the frame being shown (true). Default value is false.
Create a new gradient drawable given an orientation and an array of colors for the gradient.
Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left
Specify radius for the corners of the gradient. If this is > 0, then the drawable is drawn in a round-rectangle, rather than a rectangle.
Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn.
This checks mRectIsDirty, and if it is true, recomputes both our drawing rectangle (mRect) and the gradient itself, since it depends on our rectangle too.
Create a new layer drawable with the list of specified layers.
Create a new layer drawable with the specified list of layers and the specified constant state.
Add a new layer to this drawable. The new layer is identified by an id.
Look for a layer with the given id, and returns its {@link Drawable}.
Sets the ID of a layer.
Returns the number of layers contained within this.
Returns the drawable at the specified layer index.
Returns the id of the specified layer.
Sets (or replaces) the {@link Drawable} for the layer with the given id.
Specify modifiers to the bounds for the drawable[index].
Sets the opacity of this drawable directly, instead of collecting the states from the layers for the default behavior
Adds a Drawable to the list of available mipmap Drawables. The Drawable actually used when this MipmapDrawable is drawn is determined from its bounds. This method has no effect if drawable is null.
Returns the index of the child mipmap drawable that will best fit the provided bounds. This index is determined by comparing bounds' height and children intrinsic heights. The returned mipmap index is the smallest mipmap which height is greater or equal than the bounds' height. If the bounds' height is larger than the largest mipmap, the largest mipmap index is returned. are no children mipmaps.
Adds a Drawable to the list of available mipmap Drawables. This list can be retrieved using {@link DrawableContainer.DrawableContainerState#getChildren()} and this method ensures that it is always sorted by increasing {@link Drawable#getIntrinsicHeight()}.
Create drawable from raw nine-patch data, setting initial target density based on the display metrics of the resources.
Create drawable from existing nine-patch, setting initial target density based on the display metrics of the resources.
Specify radius for the corners of the rectangle. If this is > 0, then the drawable is drawn in a round-rectangle, rather than a rectangle.
Construct a new drawable referencing the specified picture. The picture may be null.
Return the picture associated with the drawable. May be null.
Associate a picture with this drawable. The picture may be null.
<p>Create a new rotating drawable with an empty state.</p>
<p>Create a new rotating drawable with the specified state. A copy of this state is used as the internal state for the newly created drawable.</p>
Returns the drawable scaled by this ScaleDrawable.
ShapeDrawable constructor.
Creates a ShapeDrawable with a specified Shape.
Returns the Shape of this ShapeDrawable.
Sets the Shape of this ShapeDrawable.
Sets a ShaderFactory to which requests for a {@link android.graphics.Shader} object will be made.
Returns the ShaderFactory used by this ShapeDrawable for requesting a {@link android.graphics.Shader}.
Returns the Paint used to draw the shape.
Sets padding for the shape.
Sets padding for this shape, defined by a Rect object. Define the padding in the Rect object as: left, top, right, bottom.
Sets the intrinsic (default) width for this shape.
Sets the intrinsic (default) height for this shape.
Called from the drawable's draw() method after the canvas has been set to draw the shape at (0,0). Subclasses can override for special effects such as multiple layers, stroking, etc.
Set the alpha level for this drawable [0..255]. Note that this drawable also has a color in its paint, which has an alpha as well. These two values are automatically combined during drawing. Thus if the color's alpha is 75% (i.e. 192) and the drawable's alpha is 50% (i.e. 128), then the combined alpha that will be used during drawing will be 37.5% (i.e. 96).
Subclasses override this to parse custom subelements. If you handle it, return true, else return <em>super.inflateTag(...)</em>.
Add a new image/string ID to the set of images.
Gets the number of states contained in this drawable.
Gets the state set at an index.
Gets the drawable at an index.
Gets the index of the drawable with the provided state set.
Create a new transition drawable with the specified list of layers. At least 2 layers are required for this drawable to work properly.
Create a new transition drawable with no layer. To work correctly, at least 2 layers must be added to this drawable.
Begin the second layer on top of the first layer.
Show only the first layer.
Reverses the transition, picking up where the transition currently is. If the transition is not currently running, this will start the transition with the specified duration. If the transition is already running, the last known duration will be used.
Enables or disables the cross fade of the drawables. When cross fade is disabled, the first drawable is always drawn opaque. With cross fade enabled, the first drawable is drawn with the opposite alpha of the second drawable. Cross fade is disabled by default.
Indicates whether the cross fade is enabled for this transition.
This xfermode draws, or doesn't draw, based on the destination's distance from an op-color. There are two modes, and each mode interprets a tolerance value. Avoid: In this mode, drawing is allowed only on destination pixels that are different from the op-color. Tolerance near 0: avoid any colors even remotely similar to the op-color Tolerance near 255: avoid only colors nearly identical to the op-color Target: In this mode, drawing only occurs on destination pixels that are similar to the op-color Tolerance near 0: draw only on colors that are nearly identical to the op-color Tolerance near 255: draw on any colors even remotely similar to the op-color
For backwards compatibility, allows the app layer to change the default density when running old apps.
Private constructor that must received an already allocated native
<p>Returns the density for this bitmap.</p> <p>The default density is the same density as the current display, unless the current application does not support different screen densities in which case it is {@link android.util.DisplayMetrics#DENSITY_DEFAULT}.  Note that compatibility mode is determined by the application that was initially loaded into a process -- applications that share the same process should all have the same compatibility, or ensure they explicitly set the density of their bitmaps appropriately.</p>
<p>Specifies the density for this bitmap.  When the bitmap is drawn to a Canvas that also has a density, it will be scaled appropriately.</p>
Sets the nine patch chunk.
Free the native object associated with this bitmap, and clear the reference to the pixel data. This will not free the pixel data synchronously; it simply allows it to be garbage collected if there are no other references. The bitmap is marked as "dead", meaning it will throw an exception if getPixels() or setPixels() is called, and will draw nothing. This operation cannot be reversed, so it should only be called if you are sure there are no further uses for the bitmap. This is an advanced call, and normally need not be called, since the normal GC process will free up this memory when there are no more references to this bitmap.
Returns true if this bitmap has been recycled. If so, then it is an error to try to access its pixels, and the bitmap will not draw.
Returns the generation ID of this bitmap. The generation ID changes whenever the bitmap is modified. This can be used as an efficient way to check if a bitmap has changed.
This is called by methods that want to throw an exception if the bitmap has already been recycled.
Common code for checking that x and y are >= 0
Common code for checking that width and height are > 0
Copy the bitmap's pixels into the specified buffer (allocated by the caller). An exception is thrown if the buffer is not large enough to hold all of the pixels (taking into account the number of bytes per pixel) or if the Buffer subclass is not one of the support types (ByteBuffer, ShortBuffer, IntBuffer).
Copy the pixels from the buffer, beginning at the current position, overwriting the bitmap's pixels. The data in the buffer is not changed in any way (unlike setPixels(), which converts from unpremultipled 32bit to whatever the bitmap's native format is.
Tries to make a new bitmap based on the dimensions of this bitmap, setting the new bitmap's config to the one specified, and then copying this bitmap's pixels into the new bitmap. If the conversion is not supported, or the allocator fails, then this returns NULL.  The returned bitmap initially has the same density as the original.
Creates a new bitmap, scaled from an existing bitmap.
Returns an immutable bitmap from the source bitmap. The new bitmap may be the same object as source, or a copy may have been made.  It is initialized with the same density as the original bitmap.
Returns an immutable bitmap from the specified subset of the source bitmap. The new bitmap may be the same object as source, or a copy may have been made.  It is initialized with the same density as the original bitmap.
Returns an immutable bitmap from subset of the source bitmap, transformed by the optional matrix.  It is initialized with the same density as the original bitmap.
Returns a mutable bitmap with the specified width and height.  Its initial density is as per {@link #getDensity}.
Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array.  Its initial density is as per {@link #getDensity}.
Returns an optional array of private data, used by the UI system for some bitmaps. Not intended to be called by applications.
Write a compressed version of the bitmap to the specified outputstream. If this returns true, the bitmap can be reconstructed by passing a corresponding inputstream to BitmapFactory.decodeStream(). Note: not all Formats support all bitmap configs directly, so it is possible that the returned bitmap from BitmapFactory could be in a different bitdepth, and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque pixels).
Returns true if the bitmap is marked as mutable (i.e. can be drawn into)
Returns the bitmap's width
Returns the bitmap's height
Convenience for calling {@link #getScaledWidth(int)} with the target density of the given {@link Canvas}.
Convenience for calling {@link #getScaledHeight(int)} with the target density of the given {@link Canvas}.
Convenience for calling {@link #getScaledWidth(int)} with the target density of the given {@link DisplayMetrics}.
Convenience for calling {@link #getScaledHeight(int)} with the target density of the given {@link DisplayMetrics}.
Convenience method that returns the width of this bitmap divided by the density scale factor.
Convenience method that returns the height of this bitmap divided by the density scale factor.
Return the number of bytes between rows in the bitmap's pixels. Note that this refers to the pixels as stored natively by the bitmap. If you call getPixels() or setPixels(), then the pixels are uniformly treated as 32bit values, packed according to the Color class.
Returns the number of bytes used to store this bitmap's pixels.
If the bitmap's internal config is in one of the public formats, return that config, otherwise return null.
Returns true if the bitmap's config supports per-pixel alpha, and if the pixels may contain non-opaque alpha values. For some configs, this is always false (e.g. RGB_565), since they do not support per-pixel alpha. However, for configs that do, the bitmap may be flagged to be known that all of its pixels are opaque. In this case hasAlpha() will also return false. If a config such as ARGB_8888 is not so flagged, it will return true by default.
Tell the bitmap if all of the pixels are known to be opaque (false) or if some of the pixels may contain non-opaque alpha values (true). Note, for some configs (e.g. RGB_565) this call is ignored, since it does not support per-pixel alpha values. This is meant as a drawing hint, as in some cases a bitmap that is known to be opaque can take a faster drawing case than one that may have non-opaque per-pixel alpha values.
Fills the bitmap's pixels with the specified {@link Color}.
Returns the {@link Color} at the specified location. Throws an exception if x or y are out of bounds (negative or >= to the width or height respectively).
Returns in pixels[] a copy of the data in the bitmap. Each value is a packed int representing a {@link Color}. The stride parameter allows the caller to allow for gaps in the returned pixels array between rows. For normal packed results, just pass width for the stride value.
Shared code to check for illegal arguments passed to getPixel() or setPixel()
Shared code to check for illegal arguments passed to getPixels() or setPixels()
Write the specified {@link Color} into the bitmap (assuming it is mutable) at the x,y coordinate.
Replace pixels in the bitmap with the colors in the array. Each element in the array is a packed int prepresenting a {@link Color}
Write the bitmap and its pixels to the parcel. The bitmap can be rebuilt from the parcel by calling CREATOR.createFromParcel().
Returns a new bitmap that captures the alpha values of the original. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call.
Returns a new bitmap that captures the alpha values of the original. These values may be affected by the optional Paint parameter, which can contain its own alpha, and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g. a blur maskfilter might enlarge the resulting bitmap). If offsetXY is not null, it returns the amount to offset the returned bitmap so that it will logically align with the original. For example, if the paint contains a blur of radius 2, then offsetXY[] would contains -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then drawing the original would result in the blur visually aligning with the original. <p>The initial density of the returned bitmap is the same as the original's.
Given another bitmap, return true if it has the same dimensions, config, and pixel data as this bitmap. If any of those differ, return false. If other is null, return false.
Rebuilds any caches associated with the bitmap that are used for drawing it. In the case of purgeable bitmaps, this call will attempt to ensure that the pixels have been decoded. If this is called on more than one bitmap in sequence, the priority is given in LRU order (i.e. the last bitmap called will be given highest priority). For bitmaps with no associated caches, this call is effectively a no-op, and therefore is harmless.
Create a default Options object, which if left unchanged will give the same result from the decoder as if null were passed.
This can be called from another thread while this options object is inside a decode... call. Calling this will notify the decoder that it should cancel its operation. This is not guaranteed to cancel the decode, but if it does, the decoder... operation will return null, or if inJustDecodeBounds is true, will set outWidth/outHeight to -1
Decode a file path into a bitmap. If the specified file name is null, or cannot be decoded into a bitmap, the function returns null.
Decode a new Bitmap from an InputStream. This InputStream was obtained from resources, which we pass to be able to scale the bitmap accordingly.
Synonym for opening the given resource and calling {@link #decodeResourceStream}.
Synonym for {@link #decodeResource(Resources, int, android.graphics.BitmapFactory.Options)} will null Options.
Decode an immutable bitmap from the specified byte array.
Decode an input stream into a bitmap. If the input stream is null, or cannot be used to decode a bitmap, the function returns null. The stream's position will be where ever it was after the encoded data was read.
Decode a bitmap from the file descriptor. If the bitmap cannot be decoded return null. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as-is.
Decode a bitmap from the file descriptor. If the bitmap cannot be decoded return null. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as is.
Set the default config used for decoding bitmaps. This config is presented to the codec if the caller did not specify a preferred config in their call to decode... The default value is chosen by the system to best match the device's screen and memory constraints. enough to expose if needed
Create a BitmapRegionDecoder from the specified byte array. Currently only the JPEG and PNG formats are supported.
Create a BitmapRegionDecoder from the file descriptor. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as is. Currently only the JPEG and PNG formats are supported.
Create a BitmapRegionDecoder from an input stream. The stream's position will be where ever it was after the encoded data was read. Currently only the JPEG and PNG formats are supported.
Create a BitmapRegionDecoder from a file path. Currently only the JPEG and PNG formats are supported.
Private constructor that must receive an already allocated native
Decodes a rectangle region in the image specified by rect.
Returns the original image's width
Returns the original image's height
Frees up the memory associated with this region decoder, and mark the region decoder as "dead", meaning it will throw an exception if decodeRegion(), getWidth() or getHeight() is called. <p>This operation cannot be reversed, so it should only be called if you are sure there are no further uses for the region decoder. This is an advanced call, and normally need not be called, since the normal GC process will free up this memory when there are no more references to this region decoder.
Returns true if this region decoder has been recycled. If so, then it is an error to try use its method.
Called by methods that want to throw an exception if the region decoder has already been recycled.
Call this to create a new shader that will draw with a bitmap.
Create a blur maskfilter.
Creates a new camera, with empty transformations.
Computes the matrix corresponding to the current transformation and copies it to the supplied matrix object.
Computes the matrix corresponding to the current transformation and applies it to the specified Canvas.
Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into.  The initial target density is {@link Bitmap#DENSITY_NONE}; this will typically be replaced when a target bitmap is set for the canvas.
Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. <p>The initial target density of the canvas is the same as the given bitmap's density.
Indicates whether this Canvas uses hardware acceleration. Note that this method does not define what type of hardware acceleration may or may not be used.
Specify a bitmap for the canvas to draw into.  As a side-effect, also updates the canvas's target density to match that of the bitmap.
<p>Returns the target density of the canvas.  The default density is derived from the density of its backing bitmap, or {@link Bitmap#DENSITY_NONE} if there is not one.</p> to determine the scaling factor when drawing a bitmap into it.
<p>Specifies the density for this Canvas' backing bitmap.  This modifies the target density of the canvas itself, as well as the density of its backing bitmap via {@link Bitmap#setDensity(int) Bitmap.setDensity(int)}. to determine the scaling factor when drawing a bitmap into it.  Use {@link Bitmap#DENSITY_NONE} to disable bitmap scaling.
Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error.
Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error.
This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored.
Helper version of saveLayer() that takes 4 values rather than a RectF.
This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored.
Helper for saveLayerAlpha() that takes 4 values instead of a RectF.
Preconcat the current matrix with the specified scale.
Preconcat the current matrix with the specified rotation.
Preconcat the current matrix with the specified matrix.
Completely replace the current matrix with the specified matrix. If the matrix parameter is null, then the current matrix is reset to identity.
Return, in ctm, the current transformation matrix. This does not alter the matrix in the canvas, but just returns a copy of it.
Return a new matrix with a copy of the canvas' current transformation matrix.
Modify the current clip with the specified rectangle.
Modify the current clip with the specified rectangle, which is expressed in local coordinates.
Modify the current clip with the specified path.
Intersect the current clip with the specified path.
Modify the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed.
Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed.
Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls).
Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not).
Retrieve the clip bounds, returning true if they are non-empty.
Retrieve the clip bounds.
Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode.
Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode.
Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode.
Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode.
Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint.
Helper for drawPoints() that assumes you want to draw the entire array
Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. NOTE: since a line is always "framed", the Style is ignored in the paint.
Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint.
Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint.
Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint.
Draw the specified circle using the specified paint. If radius is <= 0, then nothing will be drawn. The circle will be filled or framed based on the Style in the paint.
<p>Draw the specified arc, which will be scaled to fit inside the specified oval.</p> <p>If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360.</p> <p>If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360</p> <p>The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.)</p>
Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint.
Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint.
Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. <p>Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. <p>If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas.
Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. <p>Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. <p>This function <em>ignores the density associated with the bitmap</em>. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied.
Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often.
Legacy version of drawBitmap(int[] colors, ...) that took ints for x,y
Draw the bitmap using the specified matrix.
Draw the bitmap through the mesh, where mesh vertices are evenly distributed across the bitmap. There are meshWidth+1 vertices across, and meshHeight+1 vertices down. The verts array is accessed in row-major order, so that the first meshWidth+1 vertices are distributed across the top of the bitmap from left to right. A more general version of this methid is drawVertices().
Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order.
Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint.
Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint.
Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint.
Render a run of all LTR or all RTL text, with shaping. This does not run bidi on the provided text, but renders it as a uniform right-to-left or left-to-right run, as indicated by dir. Alignment of the text is as determined by the Paint's TextAlign value.
Draw the text in the array, with each character's origin specified by the pos array.
Draw the text, with origin at (x,y), using the specified paint, along the specified path. The paint's Align setting determins where along the path to start the text.
Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore.
Draw the picture, stretched to fit into the dst rectangle.
Return the alpha component of a color int. This is the same as saying color >>> 24
Return the red component of a color int. This is the same as saying (color >> 16) & 0xFF
Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
Return the blue component of a color int. This is the same as saying color & 0xFF
Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined.
Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined.
Returns the hue component of a color int.
Returns the saturation component of a color int.
Returns the brightness component of a color int.
Parse the color string, and return the corresponding color-int. If the string cannot be parsed, throws an IllegalArgumentException exception. Supported formats are: #RRGGBB #AARRGGBB 'red', 'blue', 'green', 'black', 'white', 'gray', 'cyan', 'magenta', 'yellow', 'lightgray', 'darkgray'
Convert HSB components to an ARGB color. Alpha set to 0xFF. If hsv values are out of range, they are pinned.
Convert RGB components to HSV.
Convert the argb color to its HSV components.
Convert HSV components to an ARGB color. Alpha set to 0xFF. If hsv values are out of range, they are pinned.
Convert HSV components to an ARGB color. The alpha component is passed through unchanged. If hsv values are out of range, they are pinned.
Create a new colormatrix initialized to identity (as if reset() had been called).
Create a new colormatrix initialized with the specified array of values.
Create a new colormatrix initialized with the specified colormatrix.
Set this colormatrix to identity: [ 1 0 0 0 0   - red vector 0 1 0 0 0   - green vector 0 0 1 0 0   - blue vector 0 0 0 1 0 ] - alpha vector
Assign the src colormatrix into this matrix, copying all of its values.
Assign the array of floats into this matrix, copying all of its values.
Set this colormatrix to scale by the specified values.
Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
Set this colormatrix to the concatenation of the two specified colormatrices, such that the resulting colormatrix has the same effect as applying matB and then applying matA. It is legal for either matA or matB to be the same colormatrix as this.
Concat this colormatrix with the specified prematrix. This is logically the same as calling setConcat(this, prematrix);
Concat this colormatrix with the specified postmatrix. This is logically the same as calling setConcat(postmatrix, this);
Set the matrix to affect the saturation of colors. A value of 0 maps the color to gray-scale. 1 is identity.
Set the matrix to convert RGB to YUV
Set the matrix to convert from YUV to RGB
Create a colorfilter that transforms colors through a 4x5 color matrix.
Construct a PathEffect whose effect is to apply first the inner effect and the the outer pathEffect (e.g. outer(inner(path))).
Create a new compose shader, given shaders A, B, and a combining mode.
Create a new compose shader, given shaders A, B, and a combining PorterDuff mode.
Transforms geometries that are drawn (either STROKE or FILL styles) by replacing any sharp angles between line segments into rounded angles of the specified radius.
The intervals array must contain an even number of entries (>=2), with the even indices specifying the "on" intervals, and the odd indices specifying the "off" intervals. phase is an offset into the intervals array (mod the sum of all of the intervals). The intervals array controls the length of the dashes. The paint's strokeWidth controls the thickness of the dashes. Note: this patheffect only affects drawing with the paint's style is set to STROKE or STROKE_AND_FILL. It is ignored if the drawing is done with style == FILL.
Chop the path into lines of segmentLength, randomly deviating from the original path by deviation.
this is set by subclasses, but don't make it public package */ int mNativeInt;    // pointer to native object
Create an emboss maskfilter
Use this function to retrieve the number of bits per pixel of an ImageFormat.
Reset the Interpolator to have the specified number of values and an implicit keyFrame count of 2 (just a start and end). After this call the values for each keyFrame must be assigned using setKeyFrame().
Reset the Interpolator to have the specified number of values and keyFrames. After this call the values for each keyFrame must be assigned using setKeyFrame().
Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values).
Assign the keyFrame (specified by index) a time value and an array of key values and blend array.
Set a repeat count (which may be fractional) for the interpolator, and whether the interpolator should mirror its repeats. The default settings are repeatCount = 1, and mirror = false.
Calls timeToValues(msec, values) with the msec set to now (by calling (int)SystemClock.uptimeMillis().)
Given a millisecond time value (msec), return the interpolated values and return whether the specified time was within the range of key times (NORMAL), was before the first key time (FREEZE_START) or after the last key time (FREEZE_END). In any event, computed values are always returned.
Private constructor that must received an already allocated native
Frees up the memory associated with this large bitmap, and mark the large bitmap as "dead", meaning it will throw an exception if decodeRegion(), getWidth() or getHeight() is called. This operation cannot be reversed, so it should only be called if you are sure there are no further uses for the large bitmap. This is an advanced call, and normally need not be called, since the normal GC process will free up this memory when there are no more references to this bitmap.
Returns true if this large bitmap has been recycled. If so, then it is an error to try use its method.
Called by methods that want to throw an exception if the bitmap has already been recycled.
Add a new layer (above any previous layers) to the rasterizer.
Create a colorfilter that multiplies the RGB channels by one color, and then adds a second color, pinning the result for each component to [0..255]. The alpha components of the mul and add arguments are ignored.
Create a shader that draws a linear gradient along a line.
Create an identity matrix
Create a matrix that is a (deep) copy of src
Returns true if the matrix is identity. This maybe faster than testing if (getType() == 0)
Returns true if will map a rectangle to another rectangle. This can be true if the matrix is identity, scale-only, or rotates a multiple of 90 degrees.
(deep) copy the src matrix into this matrix. If src is null, reset this matrix to the identity matrix.
Returns true iff obj is a Matrix and its values equal our values.
Set the matrix to identity
Set the matrix to translate by (dx, dy).
Set the matrix to scale by sx and sy, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
Set the matrix to scale by sx and sy.
Set the matrix to rotate by the specified number of degrees, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
Set the matrix to rotate about (0,0) by the specified number of degrees.
Set the matrix to rotate by the specified sine and cosine values, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
Set the matrix to rotate by the specified sine and cosine values.
Set the matrix to skew by sx and sy, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
Set the matrix to skew by sx and sy.
Set the matrix to the concatenation of the two specified matrices, returning true if the the result can be represented. Either of the two matrices may also be the target matrix. this = a * b
Preconcats the matrix with the specified translation. M' = M * T(dx, dy)
Preconcats the matrix with the specified scale. M' = M * S(sx, sy, px, py)
Preconcats the matrix with the specified scale. M' = M * S(sx, sy)
Preconcats the matrix with the specified rotation. M' = M * R(degrees, px, py)
Preconcats the matrix with the specified rotation. M' = M * R(degrees)
Preconcats the matrix with the specified skew. M' = M * K(kx, ky, px, py)
Preconcats the matrix with the specified skew. M' = M * K(kx, ky)
Preconcats the matrix with the specified matrix. M' = M * other
Postconcats the matrix with the specified translation. M' = T(dx, dy) * M
Postconcats the matrix with the specified scale. M' = S(sx, sy, px, py) * M
Postconcats the matrix with the specified scale. M' = S(sx, sy) * M
Postconcats the matrix with the specified rotation. M' = R(degrees, px, py) * M
Postconcats the matrix with the specified rotation. M' = R(degrees) * M
Postconcats the matrix with the specified skew. M' = K(kx, ky, px, py) * M
Postconcats the matrix with the specified skew. M' = K(kx, ky) * M
Postconcats the matrix with the specified matrix. M' = other * M
the native values must match those in SkMatrix.h
Set the matrix to the scale and translate values that map the source rectangle to the destination rectangle, returning true if the the result can be represented.
private helper to perform range checks on arrays of "points"
Set the matrix such that the specified src points would map to the specified dst points. The "points" are represented as an array of floats, order [x0, y0, x1, y1, ...], where each "point" is 2 float values.
If this matrix can be inverted, return true and if inverse is not null, set inverse to be the inverse of this matrix. If this matrix cannot be inverted, ignore inverse and return false.
Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. The two arrays represent their "points" as pairs of floats [x, y].
Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst. The two arrays represent their "vectors" as pairs of floats [x, y]. Note: this method does not apply the translation associated with the matrix. Use {@link Matrix#mapPoints(float[], int, float[], int, int)} if you want the translation to be applied.
Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst. The two arrays represent their "vectors" as pairs of floats [x, y]. Note: this method does not apply the translation associated with the matrix. Use {@link Matrix#mapPoints(float[], float[])} if you want the translation to be applied.
Apply this matrix to the array of 2D points, and write the transformed points back into the array
Apply this matrix to the array of 2D vectors, and write the transformed vectors back into the array. Note: this method does not apply the translation associated with the matrix. Use {@link Matrix#mapPoints(float[])} if you want the translation to be applied.
Apply this matrix to the src rectangle, and write the transformed rectangle into dst. This is accomplished by transforming the 4 corners of src, and then setting dst to the bounds of those points.
Apply this matrix to the rectangle, and write the transformed rectangle back into it. This is accomplished by transforming the 4 corners of rect, and then setting it to the bounds of those points
Return the mean radius of a circle after it has been mapped by this matrix. NOTE: in perspective this value assumes the circle has its center at the origin.
Copy 9 values from the matrix into the array.
Copy 9 values from the array into the matrix.
Print short string, to optimize dumping.
Create a drawable projection from a bitmap to nine patches.
Draw a bitmap of nine patches.
Return the underlying bitmap's density, as per {@link Bitmap#getDensity() Bitmap.getDensity()}.
Create a new paint with default settings.
Create a new paint with the specified flags. Use setFlags() to change these after the paint is created.
Create a new paint, initialized with the attributes in the specified paint parameter.
Restores the paint to its default settings.
Copy the fields from src into this paint. This is equivalent to calling get() on all of the src fields, and calling the corresponding set() methods on this.
Set all class variables using current values from the given {@link Paint}.
Return the bidi flags on the paint.
Set the bidi flags on the paint.
Helper for getFlags(), returning true if ANTI_ALIAS_FLAG bit is set AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. See setDither() and setFilterBitmap() to affect how colors are treated.
Helper for getFlags(), returning true if DITHER_FLAG bit is set Dithering affects how colors that are higher precision than the device are down-sampled. No dithering is generally faster, but higher precision colors are just truncated down (e.g. 8888 -> 565). Dithering tries to distribute the error inherent in this process, to reduce the visual artifacts.
Helper for getFlags(), returning true if LINEAR_TEXT_FLAG bit is set
Helper for getFlags(), returning true if SUBPIXEL_TEXT_FLAG bit is set
Helper for getFlags(), returning true if UNDERLINE_TEXT_FLAG bit is set
Helper for getFlags(), returning true if STRIKE_THRU_TEXT_FLAG bit is set
Helper for getFlags(), returning true if FAKE_BOLD_TEXT_FLAG bit is set
Whether or not the bitmap filter is activated. Filtering affects the sampling of bitmaps when they are transformed. Filtering does not affect how the colors in the bitmap are converted into device pixels. That is dependent on dithering and xfermodes.
Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE).
Set the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes Fill).
Helper to setColor(), that takes a,r,g,b and constructs the color int
Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated.
Set the paint's Cap.
Return the paint's stroke join type.
Set the paint's Join.
Applies any/all effects (patheffect, stroking) to src, returning the result in dst. The result is that drawing src with this paint will be the same as drawing dst with a default paint (at least from the geometric perspective).
Get the paint's shader object.
Set or clear the shader object. <p /> Pass null to clear any previous shader. As a convenience, the parameter passed is also returned.
Get the paint's colorfilter (maybe be null).
Set or clear the paint's colorfilter, returning the parameter.
Get the paint's xfermode object.
Set or clear the xfermode object. <p /> Pass null to clear any previous xfermode. As a convenience, the parameter passed is also returned.
Get the paint's patheffect object.
Set or clear the patheffect object. <p /> Pass null to clear any previous patheffect. As a convenience, the parameter passed is also returned.
Get the paint's maskfilter object.
Set or clear the maskfilter object. <p /> Pass null to clear any previous maskfilter. As a convenience, the parameter passed is also returned.
Get the paint's typeface object. <p /> The typeface object identifies which font to use when drawing or measuring text.
Set or clear the typeface object. <p /> Pass null to clear any previous typeface. As a convenience, the parameter passed is also returned.
Get the paint's rasterizer (or null). <p /> The raster controls/modifies how paths/text are turned into alpha masks.
Set or clear the rasterizer object. <p /> Pass null to clear any previous rasterizer. As a convenience, the parameter passed is also returned.
This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed.
Clear the shadow layer.
Return the paint's Align value for drawing text. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on.
Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on.
Allocates a new FontMetrics object, and then calls getFontMetrics(fm) with it, returning the object.
Return the recommend line spacing based on the current typeface and text size.
Return the width of the text.
Measure the text, stopping early if the measured width exceeds maxWidth. Return the number of chars that were measured, and if measuredWidth is not null, return in it the actual width measured.
Return the advance widths for the characters in the string.
Return the glyph Ids for the characters in the string. must be <= start must be >= end or {@link #DIRECTION_RTL} Used only for BiDi / RTL Tests
Convenience overload that takes a char array instead of a String.
Convenience overload that takes a CharSequence instead of a String.
Returns the total advance width for the characters in the run between start and end, and if advances is not null, the advance assigned to each of these characters (java chars). <p>The trailing surrogate in a valid surrogate pair is assigned an advance of 0.  Thus the number of returned advances is always equal to count, not to the number of unicode codepoints represented by the run. <p>In the case of conjuncts or combining marks, the total advance is assigned to the first logical character, and the following characters are assigned an advance of 0. <p>This generates the sum of the advances of glyphs for characters in a reordered cluster as the width of the first logical character in the cluster, and 0 for the widths of all other characters in the cluster.  In effect, such clusters are treated like conjuncts. <p>The shaping bounds limit the amount of context available outside start and end that can be used for shaping analysis. These bounds typically reflect changes in bidi level or font metrics across which shaping does not occur. must be <= start must be >= end or {@link #DIRECTION_RTL} can be null if only total advance is needed advance corresponding to the character at start
Returns the next cursor position in the run.  This avoids placing the cursor between surrogates, between characters that form conjuncts, between base characters and combining marks, or within a reordering cluster. <p>ContextStart and offset are relative to the start of text. The context is the shaping context for cursor movement, generally the bounds of the metric span enclosing the cursor in the direction of movement. <p>If cursorOpt is {@link #CURSOR_AT} and the offset is not a valid cursor position, this returns -1.  Otherwise this will never return a value before contextStart or after contextStart + contextLength. {@link #CURSOR_AT_OR_AFTER}, {@link #CURSOR_BEFORE}, {@link #CURSOR_AT_OR_BEFORE}, or {@link #CURSOR_AT}
Returns the next cursor position in the run.  This avoids placing the cursor between surrogates, between characters that form conjuncts, between base characters and combining marks, or within a reordering cluster. <p>ContextStart, contextEnd, and offset are relative to the start of text.  The context is the shaping context for cursor movement, generally the bounds of the metric span enclosing the cursor in the direction of movement. <p>If cursorOpt is {@link #CURSOR_AT} and the offset is not a valid cursor position, this returns -1.  Otherwise this will never return a value before contextStart or after contextEnd. {@link #CURSOR_AT_OR_AFTER}, {@link #CURSOR_BEFORE}, {@link #CURSOR_AT_OR_BEFORE}, or {@link #CURSOR_AT}
Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint.
Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint.
Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at (0,0).
Subclass of DrawFilter that affects every paint by first clearing the specified clearBits in the paint's flags, and then setting the specified setBits in the paint's flags.
Create an empty path
Create a new path, copying the contents from the src path.
Clear any lines and curves from the path, making it empty. This does NOT change the fill-type setting.
Rewinds the path: clears any lines and curves from the path but keeps the internal data structure for faster reuse.
Replace the contents of this with the contents of src.
Return the path's fill type. This defines how "inside" is computed. The default value is WINDING.
Set the path's fill type. This defines how "inside" is computed.
Returns true if the filltype is one of the INVERSE variants
Toggles the INVERSE state of the filltype
Returns true if the path is empty (contains no lines or curves)
Returns true if the path specifies a rectangle. If so, and if rect is not null, set rect to the bounds of the path. If the path does not specify a rectangle, return false and ignore rect.
Hint to the path to prepare for adding more points. This can allow the path to more efficiently allocate its storage.
Set the beginning of the next contour to the point (x,y).
Set the beginning of the next contour relative to the last point on the previous contour. If there is no previous contour, this is treated the same as moveTo().
Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).
Same as lineTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.
Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).
Same as quadTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.
Add a cubic bezier from the last point, approaching control points (x1,y1) and (x2,y2), and ending at (x3,y3). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).
Same as cubicTo, but the coordinates are considered relative to the current point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.
Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc. The sweep angle is tread mod 360.
Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc.
Close the current contour. If the current point is not equal to the first point of the contour, a line segment is automatically added.
Add a closed rectangle contour to the path
Add a closed oval contour to the path
Add a closed circle contour to the path
Add the specified arc to the path as a new contour.
Add a closed round-rectangle contour to the path
Add a closed round-rectangle contour to the path. Each corner receives two radius values [X, Y]. The corners are ordered top-left, top-right, bottom-right, bottom-left
Add a copy of src to the path, offset by (dx,dy)
Add a copy of src to the path
Add a copy of src to the path, transformed by matrix
Offset the path by (dx,dy), returning true on success
Sets the last point of the path.
Transform the points in this path by matrix, and write the answer into dst. If dst is null, then the the original path is modified.
Transform the points in this path by matrix.
Dash the drawn path by stamping it with the specified shape. This only applies to drawings when the paint's style is STROKE or STROKE_AND_FILL. If the paint's style is FILL, then this effect is ignored. The paint's strokeWidth does not affect the results.
Create an empty PathMeasure object. To uses this to measure the length of a path, and/or to find the position and tangent along it, call setPath. Note that once a path is associated with the measure object, it is undefined if the path is subsequently modified and the the measure object is used. If the path is modified, you must call setPath with the path.
Create a PathMeasure object associated with the specified path object (already created and specified). The meansure object can now return the path's length, and the position and tangent of any position along the path. Note that once a path is associated with the measure object, it is undefined if the path is subsequently modified and the the measure object is used. If the path is modified, you must call setPath with the path.
Assign a new path, or null to have none.
Return the total length of the current contour, or 0 if no path is associated with this measure object.
Pins distance to 0 <= distance <= getLength(), and then computes the corresponding position and tangent. Returns false if there is no path, or a zero-length path was specified, in which case position and tangent are unchanged.
Pins distance to 0 <= distance <= getLength(), and then computes the corresponding matrix. Returns false if there is no path, or a zero-length path was specified, in which case matrix is unchanged.
Given a start and stop distance, return in dst the intervening segment(s). If the segment is zero-length, return false, else return true. startD and stopD are pinned to legal values (0..getLength()). If startD <= stopD then return false (and leave dst untouched). Begin the segment with a moveTo if startWithMoveTo is true
Return true if the current contour is closed()
Move to the next contour in the path. Return true if one exists, or false if we're done with the path.
Create a picture by making a copy of what has already been recorded in src. The contents of src are unchanged, and if src changes later, those changes will not be reflected in this picture.
To record a picture, call beginRecording() and then draw into the Canvas that is returned. Nothing we appear on screen, but all of the draw commands (e.g. drawRect(...)) will be recorded. To stop recording, call endRecording(). At this point the Canvas that was returned must no longer be referenced, and nothing should be drawn into it.
Call endRecording when the picture is built. After this call, the picture may be drawn, but the canvas that was returned by beginRecording must not be referenced anymore. This is automatically called if Picture.draw() or Canvas.drawPicture() is called.
Draw this picture on the canvas. The picture may have the side effect of changing the matrix and clip of the canvas.
Create a new picture (already recorded) from the data in the stream. This data was generated by a previous call to writeToStream().
Write the picture contents to a stream. The data can be used to recreate the picture in this or another process by calling createFromStream.
Set the point's x and y coordinates
Negate the point's coordinates
Offset the point's coordinates by dx, dy
Returns true if the point's coordinates equal (x,y)
Set the point's coordinates from the data stored in the specified parcel. To write a point to a parcel, call writeToParcel().
Set the point's x and y coordinates to the coordinates of p
Return the euclidian distance from (0,0) to the point
Returns the euclidian distance from (0,0) to (x,y)
Create a colorfilter that uses the specified color and porter-duff mode.
Create an xfermode that uses the specified porter-duff mode.
Create a shader that draws a radial gradient given the center and radius.
Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom.
Create a new rectangle, initialized with the values in the specified rectangle (which is left unmodified).
Return a string representation of the rectangle in a compact form.
Return a string representation of the rectangle in a well-defined format. <p>You can later recover the Rect from this string through {@link #unflattenFromString(String)}.
Returns a Rect from a string of the form returned by {@link #flattenToString}, or null if the string is not of that form.
Print short representation to given writer.
Returns true if the rectangle is empty (left >= right or top >= bottom)
(i.e. left <= right) so the result may be negative.
(i.e. top <= bottom) so the result may be negative.
Set the rectangle to (0,0,0,0)
Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom.
Copy the coordinates from src into this rectangle.
Offset the rectangle by adding dx to its left and right coordinates, and adding dy to its top and bottom coordinates.
Offset the rectangle to a specific (left, top) position, keeping its width and height the same.
Inset the rectangle by (dx,dy). If dx is positive, then the sides are moved inwards, making the rectangle narrower. If dx is negative, then the sides are moved outwards, making the rectangle wider. The same holds true for dy and the top and bottom.
Returns true if (x,y) is inside the rectangle. The left and top are considered to be inside, while the right and bottom are not. This means that for a x,y to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point.
Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. i.e. is this rectangle a superset of the specified rectangle. An empty rectangle never contains another rectangle.
Returns true iff the specified rectangle r is inside or equal to this rectangle. An empty rectangle never contains another rectangle.
If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. Note: To just test for intersection, use {@link #intersects(Rect, Rect)}.
If the specified rectangle intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection, use intersects()
If rectangles a and b intersect, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection, use intersects()
Returns true if this rectangle intersects the specified rectangle. In no event is this rectangle modified. No check is performed to see if either rectangle is empty. To record the intersection, use intersect() or setIntersect().
Returns true iff the two specified rectangles intersect. In no event are either of the rectangles modified. To record the intersection, use {@link #intersect(Rect)} or {@link #setIntersect(Rect, Rect)}.
Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty, nothing is done. If this rectangle is empty it is set to the specified rectangle.
Update this Rect to enclose itself and the [x,y] coordinate. There is no check to see that this rectangle is non-empty.
Swap top/bottom or left/right if there are flipped (i.e. left > right and/or top > bottom). This can be called if the edges are computed separately, and may have crossed over each other. If the edges are already correct (i.e. left <= right and top <= bottom) then nothing is done.
Parcelable interface methods
Write this rectangle to the specified parcel. To restore a rectangle from a parcel, use readFromParcel()
Set the rectangle's coordinates from the data stored in the specified parcel. To write a rectangle to a parcel, call writeToParcel().
Scales up the rect by the given scale.
Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom.
Create a new rectangle, initialized with the values in the specified rectangle (which is left unmodified).
a valid rectangle (i.e. left <= right)
a valid rectangle (i.e. top <= bottom)
If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. Note: To just test for intersection, use intersects()
Returns true iff the two specified rectangles intersect. In no event are either of the rectangles modified. To record the intersection, use intersect() or setIntersect().
Set the dst integer Rect by rounding this rectangle's coordinates to their nearest integer values.
Set the dst integer Rect by rounding "out" this rectangle, choosing the floor of top and left, and the ceiling of right and bottom.
Create an empty region
Return a copy of the specified region
Return a region set to the specified rectangle
Set the region to the empty region
Set the region to the specified region.
Set the region to the specified rectangle
Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
Return a new Rect set to the bounds of the region. If the region is empty, the Rect will be set to [0, 0, 0, 0]
Set the Rect to the bounds of the region. If the region is empty, the Rect will be set to [0, 0, 0, 0]
Return the boundary of the region as a new Path. If the region is empty, the path will also be empty.
Set the path to the boundary of the region. If the region is empty, the path will also be empty.
Return true if the region is a single rectangle (not complex) and it contains the specified rectangle. Returning false is not a guarantee that the rectangle is not contained by this region, but return true is a guarantee that the rectangle is contained by this region.
Return true if the region is empty, or if the specified rectangle does not intersect the region. Returning false is not a guarantee that they intersect, but returning true is a guarantee that they do not.
Translate the region by [dx, dy]. If the region is empty, do nothing.
Scale the region by the given scale amount. This re-constructs new region by scaling the rects that this region consists of. New rectis are computed by scaling coordinates by float, then rounded by roundf() function to integers. This may results in less internal rects if 0 < scale < 1. Zero and Negative scale result in an empty region. If this region is empty, do nothing.
Perform the specified Op on this region and the specified rect. Return true if the result of the op is not empty.
Perform the specified Op on this region and the specified region. Return true if the result of the op is not empty.
Set this region to the result of performing the Op on the specified rect and region. Return true if the result is not empty.
Set this region to the result of performing the Op on the specified regions. Return true if the result is not empty.
Write the region and its pixels to the parcel. The region can be rebuilt from the parcel by calling CREATOR.createFromParcel().
Construct an iterator for all of the rectangles in a region. This effectively makes a private copy of the region, so any subsequent edits to region will not affect the iterator.
Return the next rectangle in the region. If there are no more rectangles this returns false and r is unchanged. If there is at least one more, this returns true and r is set to that rectangle.
Return true if the shader has a non-identity local matrix.
Set the shader's local matrix. Passing null will reset the shader's matrix to identity
Construct a PathEffect whose effect is to apply two effects, in sequence. (e.g. first(path) + second(path))
Construct a new SurfaceTexture to stream images to a given OpenGL texture.
Register a callback to be invoked when a new image frame becomes available to the SurfaceTexture.  Note that this callback may be called on an arbitrary thread, so it is not safe to call {@link #updateTexImage} without first binding the OpenGL ES context to the thread invoking the callback.
Set the size of buffers returned by requestBuffers when a width and height of zero is requested.
Update the texture image to the most recent frame from the image stream.  This may only be called while the OpenGL ES context that owns the texture is bound to the thread.  It will implicitly bind its texture to the GL_TEXTURE_EXTERNAL_OES texture target.
Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by the most recent call to updateTexImage. This transform matrix maps 2D homogeneous texture coordinates of the form (s, t, 0, 1) with s and t in the inclusive range [0, 1] to the texture coordinate that should be used to sample that location from the texture.  Sampling the texture outside of the range of this transform is undefined. The matrix is stored in column-major order so that it may be passed directly to OpenGL ES via the glLoadMatrixf or glUniformMatrix4fv functions.
Retrieve the timestamp associated with the texture image set by the most recent call to updateTexImage. This timestamp is in nanoseconds, and is normally monotonically increasing. The timestamp should be unaffected by time-of-day adjustments, and for a camera should be strictly monotonic but for a MediaPlayer may be reset when the position is set.  The specific meaning and zero point of the timestamp depends on the source providing images to the SurfaceTexture. Unless otherwise specified by the image source, timestamps cannot generally be compared across SurfaceTexture instances, or across multiple program invocations. It is mostly useful for determining time offsets between subsequent frames.
release() frees all the buffers and puts the SurfaceTexture into the 'abandoned' state. Once put in this state the SurfaceTexture can never leave it. When in the 'abandoned' state, all methods of the ISurfaceTexture interface will fail with the NO_INIT error. Note that while calling this method causes all the buffers to be freed from the perspective of the the SurfaceTexture, if there are additional references on the buffers (e.g. if a buffer is referenced by a client or by OpenGL ES as a texture) then those buffer will remain allocated. Always call this method when you are done with SurfaceTexture. Failing to do so may delay resource deallocation for a significant amount of time.
A subclass of Shader that draws a sweep gradient around a center point.
Returns the typeface's intrinsic style attributes
Returns true if getStyle() has the BOLD bit set.
Returns true if getStyle() has the ITALIC bit set.
Create a typeface object given a family name, and option style information. If null is passed for the name, then the "default" font will be chosen. The resulting typeface object can be queried (getStyle()) to discover what its "real" style characteristics are.
Create a typeface object that best matches the specified existing typeface and the specified Style. Use this call if you want to pick a new style from the same family of an existing typeface object. If family is null, this selects from the default font's family.
Returns one of the default typeface objects, based on the specified style
Create a new typeface from the specified font data.
Create a new typeface from the specified font file.
don't allow clients to call this directly
Construct an YuvImage.
Compress a rectangle region in the YuvImage to a jpeg. Only ImageFormat.NV21 and ImageFormat.YUY2 are supported for now.
Cast an IBinder object into an android.hardware.usb.IUsbManager interface, generating a proxy if needed.
Returns a list of all currently attached USB devices
Returns a file descriptor for communicating with the USB device. The native fd can be passed to usb_device_new() in libusbhost.
Returns the currently attached USB accessory
Returns a file descriptor for communicating with the USB accessory. This file descriptor can be used with standard Java file operations.
Sets the default package for a USB device (or clears it if the package name is null)
Sets the default package for a USB accessory (or clears it if the package name is null)
Returns true if the caller has permission to access the device.
Returns true if the caller has permission to access the accessory.
Requests permission for the given package to access the device. Will display a system dialog to query the user if permission had not already been given.
Requests permission for the given package to access the accessory. Will display a system dialog to query the user if permission had not already been given. Result is returned via pi.
Grants permission for the given UID to access the device
Grants permission for the given UID to access the accessory
Returns true if the USB manager has default preferences or permissions for the package
Clears default preferences and permissions for the package
Sets the current USB function.
Sets the file path for USB mass storage backing file.
UsbAccessory should only be instantiated by UsbService implementation
Returns the manufacturer name of the accessory.
Returns the model name of the accessory.
Returns a user visible description of the accessory.
Returns the version of the accessory.
Returns the URI for the accessory. This is an optional URI that might show information about the accessory or provide the option to download an application for the accessory
Returns the unique serial number for the accessory. This is an optional serial number that can be used to differentiate between individual accessories of the same model and manufacturer
UsbDevice should only be instantiated by UsbService implementation
Returns the name of the device. In the standard implementation, this is the path of the device file for the device in the usbfs file system.
Returns a unique integer ID for the device. This is a convenience for clients that want to use an integer to represent the device, rather than the device name. IDs are not persistent across USB disconnects.
Returns a vendor ID for the device.
Returns a product ID for the device.
Returns the devices's class field. Some useful constants for USB device classes can be found in {@link UsbConstants}.
Returns the device's subclass field.
Returns the device's protocol field.
Returns the number of {@link UsbInterface}s this device contains.
Returns the {@link UsbInterface} at the given index.
UsbDevice should only be instantiated by UsbService implementation
Releases all system resources related to the device. Once the object is closed it cannot be used again. The client must call {@link UsbManager#openDevice} again to retrieve a new instance to reestablish communication with the device.
Returns the native file descriptor for the device, or -1 if the device is not opened. This is intended for passing to native code to access the device.
Returns the raw USB descriptors for the device. This can be used to access descriptors not supported directly via the higher level APIs.
Claims exclusive access to a {@link android.hardware.usb.UsbInterface}. This must be done before sending or receiving data on any {@link android.hardware.usb.UsbEndpoint}s belonging to the interface.
Releases exclusive access to a {@link android.hardware.usb.UsbInterface}.
Performs a control transaction on endpoint zero for this device. The direction of the transfer is determined by the request type. If requestType & {@link UsbConstants#USB_ENDPOINT_DIR_MASK} is {@link UsbConstants#USB_DIR_OUT}, then the transfer is a write, and if it is {@link UsbConstants#USB_DIR_IN}, then the transfer is a read. or null if no data needs to be sent or received or negative value for failure
Performs a bulk transaction on the given endpoint. The direction of the transfer is determined by the direction of the endpoint or negative value for failure
Waits for the result of a {@link android.hardware.usb.UsbRequest#queue} operation Note that this may return requests queued on multiple {@link android.hardware.usb.UsbEndpoint}s. When multiple endpoints are in use, {@link android.hardware.usb.UsbRequest#getEndpoint} and {@link android.hardware.usb.UsbRequest#getClientData} can be useful in determining how to process the result of this function.
Returns the serial number for the device. This will return null if the device has not been opened.
UsbEndpoint should only be instantiated by UsbService implementation
Returns the endpoint's address field. The address is a bitfield containing both the endpoint number as well as the data direction of the endpoint. the endpoint number and direction can also be accessed via {@link #getEndpointNumber} and {@link #getDirection}.
Extracts the endpoint's endpoint number from its address
Returns the endpoint's direction. Returns {@link UsbConstants#USB_DIR_OUT} if the direction is host to device, and {@link UsbConstants#USB_DIR_IN} if the direction is device to host.
Returns the endpoint's attributes field.
Returns the endpoint's type. Possible results are: <ul> <li>{@link UsbConstants#USB_ENDPOINT_XFER_CONTROL} (endpoint zero) <li>{@link UsbConstants#USB_ENDPOINT_XFER_ISOC} (isochronous endpoint) <li>{@link UsbConstants#USB_ENDPOINT_XFER_BULK} (bulk endpoint) <li>{@link UsbConstants#USB_ENDPOINT_XFER_INT} (interrupt endpoint) </ul>
Returns the endpoint's maximum packet size.
Returns the endpoint's interval field.
UsbInterface should only be instantiated by UsbService implementation
Returns the interface's ID field. This is an integer that uniquely identifies the interface on the device.
Returns the interface's class field. Some useful constants for USB classes can be found in {@link UsbConstants}
Returns the interface's subclass field.
Returns the interface's protocol field.
Returns the number of {@link android.hardware.usb.UsbEndpoint}s this interface contains.
Returns the {@link android.hardware.usb.UsbEndpoint} at the given index.
Returns a HashMap containing all USB devices currently attached. USB device name is the key for the returned HashMap. The result will be empty if no devices are attached, or if USB host mode is inactive or unsupported.
Opens the device so it can be used to send and receive data using {@link android.hardware.usb.UsbRequest}.
Returns a list of currently attached USB accessories. (in the current implementation there can be at most one)
Opens a file descriptor for reading and writing data to the USB accessory.
Returns true if the caller has permission to access the device. Permission might have been granted temporarily via {@link #requestPermission(UsbDevice, PendingIntent)} or by the user choosing the caller as the default application for the device.
Returns true if the caller has permission to access the accessory. Permission might have been granted temporarily via {@link #requestPermission(UsbAccessory, PendingIntent)} or by the user choosing the caller as the default application for the accessory.
Requests temporary permission for the given package to access the device. This may result in a system dialog being displayed to the user if permission had not already been granted. Success or failure is returned via the {@link android.app.PendingIntent} pi. If successful, this grants the caller permission to access the device only until the device is disconnected. The following extras will be added to pi: <ul> <li> {@link #EXTRA_DEVICE} containing the device passed into this call <li> {@link #EXTRA_PERMISSION_GRANTED} containing boolean indicating whether permission was granted by the user </ul>
Requests temporary permission for the given package to access the accessory. This may result in a system dialog being displayed to the user if permission had not already been granted. Success or failure is returned via the {@link android.app.PendingIntent} pi. If successful, this grants the caller permission to access the accessory only until the device is disconnected. The following extras will be added to pi: <ul> <li> {@link #EXTRA_ACCESSORY} containing the accessory passed into this call <li> {@link #EXTRA_PERMISSION_GRANTED} containing boolean indicating whether permission was granted by the user </ul>
Returns true if the specified USB function is currently enabled. {@hide}
Returns the current default USB function. {@hide}
Sets the current USB function. If function is null, then the current function is set to the default function. {@hide}
Sets the file path for USB mass storage backing file. {@hide}
Initializes the request so it can read or write data on the given endpoint. Whether the request allows reading or writing depends on the direction of the endpoint.
Releases all resources related to this request.
Returns the endpoint for the request, or null if the request is not opened.
Returns the client data for the request. This can be used in conjunction with {@link #setClientData} to associate another object with this request, which can be useful for maintaining state between calls to {@link #queue} and {@link android.hardware.usb.UsbDeviceConnection#requestWait}
Sets the client data for the request. This can be used in conjunction with {@link #getClientData} to associate another object with this request, which can be useful for maintaining state between calls to {@link #queue} and {@link android.hardware.usb.UsbDeviceConnection#requestWait}
Queues the request to send or receive data on its endpoint. For OUT endpoints, the given buffer data will be sent on the endpoint. For IN endpoints, the endpoint will attempt to read the given number of bytes into the specified buffer. If the queueing operation is successful, we return true and the result will be returned via {@link android.hardware.usb.UsbDeviceConnection#requestWait} the results of a read
Cancels a pending queue operation.
Creates a new Camera object to access a particular hardware camera. <p>You must call {@link #release()} when you are done using the camera, otherwise it will remain locked and be unavailable to other applications. <p>Your application should only have one Camera object active at a time for a particular hardware camera. <p>Callbacks from other methods are delivered to the event loop of the thread which called open().  If this thread has no event loop, then callbacks are delivered to the main application event loop.  If there is no main application event loop, callbacks are not delivered. <p class="caution"><b>Caution:</b> On some devices, this method may take a long time to complete.  It is best to call this method from a worker thread (possibly using {@link android.os.AsyncTask}) to avoid blocking the main application UI thread.
Creates a new Camera object to access the first back-facing camera on the device. If the device does not have a back-facing camera, this returns null.
Disconnects and releases the Camera object resources. <p>You must call this as soon as you're done with the Camera object.</p>
Reconnects to the camera service after another process used it. After {@link #unlock()} is called, another process may use the camera; when the process is done, you must reconnect to the camera, which will re-acquire the lock and allow you to continue using the camera. <p>Since API level 14, camera is automatically locked for applications in {@link android.media.MediaRecorder#start()}. Applications can use the camera (ex: zoom) after recording starts. There is no need to call this after recording starts or stops. <p>If you are not recording video, you probably do not need this method.
Stops capturing and drawing preview frames to the surface, and resets the camera for a future call to {@link #startPreview()}.
Installs a callback to be invoked for every preview frame in addition to displaying them on the screen.  The callback will be repeatedly called for as long as preview is active.  This method can be called at any time, even while preview is live.  Any other preview callbacks are overridden.
Installs a callback to be invoked for the next preview frame in addition to displaying it on the screen.  After one invocation, the callback is cleared. This method can be called any time, even when preview is live. Any other preview callbacks are overridden.
Installs a callback to be invoked for every preview frame, using buffers supplied with {@link #addCallbackBuffer(byte[])}, in addition to displaying them on the screen.  The callback will be repeatedly called for as long as preview is active and buffers are available. Any other preview callbacks are overridden. <p>The purpose of this method is to improve preview efficiency and frame rate by allowing preview frame memory reuse.  You must call {@link #addCallbackBuffer(byte[])} at some point -- before or after calling this method -- or no callbacks will received. The buffer queue will be cleared if this method is called with a null callback, {@link #setPreviewCallback(Camera.PreviewCallback)} is called, or {@link #setOneShotPreviewCallback(Camera.PreviewCallback)} is called.
Adds a pre-allocated buffer to the preview callback buffer queue. Applications can add one or more buffers to the queue. When a preview frame arrives and there is still at least one available buffer, the buffer will be used and removed from the queue. Then preview callback is invoked with the buffer. If a frame arrives and there is no buffer left, the frame is discarded. Applications should add buffers back when they finish processing the data in them. <p>The size of the buffer is determined by multiplying the preview image width, height, and bytes per pixel. The width and height can be read from {@link Camera.Parameters#getPreviewSize()}. Bytes per pixel can be computed from {@link android.graphics.ImageFormat#getBitsPerPixel(int)} / 8, using the image format from {@link Camera.Parameters#getPreviewFormat()}. <p>This method is only necessary when {@link #setPreviewCallbackWithBuffer(PreviewCallback)} is used. When {@link #setPreviewCallback(PreviewCallback)} or {@link #setOneShotPreviewCallback(PreviewCallback)} are used, buffers are automatically allocated. When a supplied buffer is too small to hold the preview frame data, preview callback will return null and the buffer will be removed from the buffer queue.
Adds a pre-allocated buffer to the raw image callback buffer queue. Applications can add one or more buffers to the queue. When a raw image frame arrives and there is still at least one available buffer, the buffer will be used to hold the raw image data and removed from the queue. Then raw image callback is invoked with the buffer. If a raw image frame arrives but there is no buffer left, the frame is discarded. Applications should add buffers back when they finish processing the data in them by calling this method again in order to avoid running out of raw image callback buffers. <p>The size of the buffer is determined by multiplying the raw image width, height, and bytes per pixel. The width and height can be read from {@link Camera.Parameters#getPictureSize()}. Bytes per pixel can be computed from {@link android.graphics.ImageFormat#getBitsPerPixel(int)} / 8, using the image format from {@link Camera.Parameters#getPreviewFormat()}. <p>This method is only necessary when the PictureCallbck for raw image is used while calling {@link #takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback, Camera.PictureCallback)}. <p>Please note that by calling this method, the mode for application-managed callback buffers is triggered. If this method has never been called, null will be returned by the raw image callback since there is no image callback buffer available. Furthermore, When a supplied buffer is too small to hold the raw image data, raw image callback will return null and the buffer will be removed from the buffer queue. Camera.PictureCallback, Camera.PictureCallback, Camera.PictureCallback)}. {@hide}
Starts camera auto-focus and registers a callback function to run when the camera is focused.  This method is only valid when preview is active (between {@link #startPreview()} and before {@link #stopPreview()}). <p>Callers should check {@link android.hardware.Camera.Parameters#getFocusMode()} to determine if this method should be called. If the camera does not support auto-focus, it is a no-op and {@link AutoFocusCallback#onAutoFocus(boolean, Camera)} callback will be called immediately. <p>If your application should not be installed on devices without auto-focus, you must declare that your application uses auto-focus with the <a href="{@docRoot}guide/topics/manifest/uses-feature-element.html">&lt;uses-feature></a> manifest element.</p> <p>If the current flash mode is not {@link android.hardware.Camera.Parameters#FLASH_MODE_OFF}, flash may be fired during auto-focus, depending on the driver and camera hardware.<p> <p>Auto-exposure lock {@link android.hardware.Camera.Parameters#getAutoExposureLock()} and auto-white balance locks {@link android.hardware.Camera.Parameters#getAutoWhiteBalanceLock()} do not change during and after autofocus. But auto-focus routine may stop auto-exposure and auto-white balance transiently during focusing. <p>Stopping preview with {@link #stopPreview()}, or triggering still image capture with {@link #takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback)}, will not change the the focus position. Applications must call cancelAutoFocus to reset the focus.</p>
Cancels any auto-focus function in progress. Whether or not auto-focus is currently in progress, this function will return the focus position to the default. If the camera does not support auto-focus, this is a no-op.
Equivalent to takePicture(shutter, raw, null, jpeg).
Triggers an asynchronous image capture. The camera service will initiate a series of callbacks to the application as the image capture progresses. The shutter callback occurs after the image is captured. This can be used to trigger a sound to let the user know that image has been captured. The raw callback occurs when the raw image data is available (NOTE: the data will be null if there is no raw image callback buffer available or the raw image callback buffer is not large enough to hold the raw image). The postview callback occurs when a scaled, fully processed postview image is available (NOTE: not all hardware supports this). The jpeg callback occurs when the compressed image is available. If the application does not need a particular callback, a null can be passed instead of a callback method. <p>This method is only valid when preview is active (after {@link #startPreview()}).  Preview will be stopped after the image is taken; callers must call {@link #startPreview()} again if they want to re-start preview or take more pictures. This should not be called between {@link android.media.MediaRecorder#start()} and {@link android.media.MediaRecorder#stop()}. <p>After calling this method, you must not call {@link #startPreview()} or take another picture until the JPEG callback has returned.
Registers a listener to be notified when the zoom value is updated by the camera driver during smooth zoom.
Registers a listener to be notified about the faces detected in the preview frame.
Starts the face detection. This should be called after preview is started. The camera will notify {@link FaceDetectionListener} of the detected faces in the preview frame. The detected faces may be the same as the previous ones. Applications should call {@link #stopFaceDetection} to stop the face detection. This method is supported if {@link Parameters#getMaxNumDetectedFaces()} returns a number larger than 0. If the face detection has started, apps should not call this again. When the face detection is running, {@link Parameters#setWhiteBalance(String)}, {@link Parameters#setFocusAreas(List)}, and {@link Parameters#setMeteringAreas(List)} have no effect.
Stops the face detection.
Registers a callback to be invoked when an error occurs.
Changes the settings for this Camera service.
Returns the current settings for this Camera service. If modifications are made to the returned Parameters, they must be passed to {@link #setParameters(Camera.Parameters)} to take effect.
Sets the dimensions for pictures.
Create an area with specified rectangle and weight.
Writes the current Parameters to the log.
Creates a single string with all the parameters set in this Parameters object. <p>The {@link #unflatten(String)} method does the reverse.</p>
Takes a flattened string of parameters and adds each one to this Parameters object. <p>The {@link #flatten()} method does the reverse.</p>
Sets a String parameter.
Sets an integer parameter.
Returns the value of a String parameter.
Returns the value of an integer parameter.
Sets the dimensions for preview pictures. If the preview has already started, applications should stop the preview first before changing preview size. The sides of width and height are based on camera orientation. That is, the preview size is the size before it is rotated by display orientation. So applications need to consider the display orientation while setting preview size. For example, suppose the camera supports both 480x320 and 320x480 preview sizes. The application wants a 3:2 preview ratio. If the display orientation is set to 0 or 180, preview size should be set to 480x320. If the display orientation is set to 90 or 270, preview size should be set to 320x480. The display orientation should also be considered while setting picture size and thumbnail size.
Returns the dimensions setting for preview pictures.
Gets the supported preview sizes.
<p>Gets the supported video frame sizes that can be used by MediaRecorder.</p> <p>If the returned list is not null, the returned list will contain at least one Size and one of the sizes in the returned list must be passed to MediaRecorder.setVideoSize() for camcorder application if camera is used as the video source. In this case, the size of the preview can be different from the resolution of the recorded video during video recording.</p>
Returns the preferred or recommended preview size (width and height) in pixels for video recording. Camcorder applications should set the preview size to a value that is not larger than the preferred preview size. In other words, the product of the width and height of the preview size should not be larger than that of the preferred preview size. In addition, we recommend to choose a preview size that has the same aspect ratio as the resolution of video to be recorded.
<p>Sets the dimensions for EXIF thumbnail in Jpeg picture. If applications set both width and height to 0, EXIF will not contain thumbnail.</p> <p>Applications need to consider the display orientation. See {@link #setPreviewSize(int,int)} for reference.</p>
Returns the dimensions for EXIF thumbnail in Jpeg picture.
Gets the supported jpeg thumbnail sizes.
Sets the quality of the EXIF thumbnail in Jpeg picture.
Returns the quality setting for the EXIF thumbnail in Jpeg picture.
Sets Jpeg quality of captured picture.
Returns the quality setting for the JPEG picture.
Sets the maximum and maximum preview fps. This controls the rate of preview frames received in {@link PreviewCallback}. The minimum and maximum preview fps must be one of the elements from {@link #getSupportedPreviewFpsRange}.
Returns the current minimum and maximum preview fps. The values are one of the elements returned by {@link #getSupportedPreviewFpsRange}.
Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623.
Sets the image format for preview pictures. <p>If this is never called, the default format will be {@link android.graphics.ImageFormat#NV21}, which uses the NV21 encoding format.</p> by one of the {@link android.graphics.ImageFormat} constants. (E.g., <var>ImageFormat.NV21</var> (default),
Returns the image format for preview frames got from {@link PreviewCallback}.
Gets the supported preview formats. {@link android.graphics.ImageFormat#NV21} is always supported. {@link android.graphics.ImageFormat#YV12} is always supported since API level 12.
<p>Sets the dimensions for pictures.</p> <p>Applications need to consider the display orientation. See {@link #setPreviewSize(int,int)} for reference.</p>
Returns the dimension setting for pictures.
Gets the supported picture sizes.
Sets the image format for pictures.
Returns the image format for pictures.
Gets the supported picture formats.
Sets the rotation angle in degrees relative to the orientation of the camera. This affects the pictures returned from JPEG {@link PictureCallback}. The camera driver may set orientation in the EXIF header without rotating the picture. Or the driver may rotate the picture and the EXIF thumbnail. If the Jpeg picture is rotated, the orientation in the EXIF header will be missing or 1 (row #0 is top and column #0 is left side). <p>If applications want to rotate the picture to match the orientation of what users see, apps should use {@link android.view.OrientationEventListener} and {@link CameraInfo}. The value from OrientationEventListener is relative to the natural orientation of the device. CameraInfo.orientation is the angle between camera orientation and natural device orientation. The sum of the two is the rotation angle for back-facing camera. The difference of the two is the rotation angle for front-facing camera. Note that the JPEG pictures of front-facing cameras are not mirrored as in preview display. <p>For example, suppose the natural orientation of the device is portrait. The device is rotated 270 degrees clockwise, so the device orientation is 270. Suppose a back-facing camera sensor is mounted in landscape and the top side of the camera sensor is aligned with the right edge of the display in natural orientation. So the camera orientation is 90. The rotation should be set to 0 (270 + 90). <p>The reference code is as follows. <pre> public void onOrientationChanged(int orientation) { </pre>
Sets GPS latitude coordinate. This will be stored in JPEG EXIF header.
Sets GPS longitude coordinate. This will be stored in JPEG EXIF header.
Sets GPS altitude. This will be stored in JPEG EXIF header.
Sets GPS timestamp. This will be stored in JPEG EXIF header.
Sets GPS processing method. It will store up to 32 characters in JPEG EXIF header.
Removes GPS latitude, longitude, altitude, and timestamp from the parameters.
Gets the current white balance setting.
Sets the white balance. Changing the setting will release the auto-white balance lock.
Gets the supported white balance.
Gets the current color effect setting.
Sets the current color effect setting.
Gets the supported color effects.
Gets the current antibanding setting.
Sets the antibanding.
Gets the supported antibanding values.
Gets the current scene mode setting.
Sets the scene mode. Changing scene mode may override other parameters (such as flash mode, focus mode, white balance). For example, suppose originally flash mode is on and supported flash modes are on/off. In night scene mode, both flash mode and supported flash mode may be changed to off. After setting scene mode, applications should call getParameters to know if some parameters are changed.
Gets the supported scene modes.
Gets the current flash mode setting.
Sets the flash mode.
Gets the supported flash modes.
Gets the current focus mode setting.
Sets the focus mode.
Gets the supported focus modes.
Gets the focal length (in millimeter) of the camera.
Gets the horizontal angle of view in degrees.
Gets the vertical angle of view in degrees.
Gets the current exposure compensation index.
Sets the exposure compensation index.
Gets the maximum exposure compensation index.
Gets the minimum exposure compensation index.
Gets the exposure compensation step.
<p>Sets the auto-exposure lock state. Applications should check {@link #isAutoExposureLockSupported} before using this method.</p> <p>If set to true, the camera auto-exposure routine will immediately pause until the lock is set to false. Exposure compensation settings changes will still take effect while auto-exposure is locked.</p> <p>If auto-exposure is already locked, setting this to true again has no effect (the driver will not recalculate exposure values).</p> <p>Stopping preview with {@link #stopPreview()}, or triggering still image capture with {@link #takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback)}, will not change the lock.</p> <p>Exposure compensation, auto-exposure lock, and auto-white balance lock can be used to capture an exposure-bracketed burst of images, for example.</p> <p>Auto-exposure state, including the lock state, will not be maintained after camera {@link #release()} is called.  Locking auto-exposure after {@link #open()} but before the first call to {@link #startPreview()} will not allow the auto-exposure routine to run at all, and may result in severely over- or under-exposed images.</p>
Gets the state of the auto-exposure lock. Applications should check {@link #isAutoExposureLockSupported} before using this method. See {@link #setAutoExposureLock} for details about the lock.
Returns true if auto-exposure locking is supported. Applications should call this before trying to lock auto-exposure. See {@link #setAutoExposureLock} for details about the lock.
<p>Sets the auto-white balance lock state. Applications should check {@link #isAutoWhiteBalanceLockSupported} before using this method.</p> <p>If set to true, the camera auto-white balance routine will immediately pause until the lock is set to false.</p> <p>If auto-white balance is already locked, setting this to true again has no effect (the driver will not recalculate white balance values).</p> <p>Stopping preview with {@link #stopPreview()}, or triggering still image capture with {@link #takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback)}, will not change the the lock.</p> <p> Changing the white balance mode with {@link #setWhiteBalance} will release the auto-white balance lock if it is set.</p> <p>Exposure compensation, AE lock, and AWB lock can be used to capture an exposure-bracketed burst of images, for example. Auto-white balance state, including the lock state, will not be maintained after camera {@link #release()} is called.  Locking auto-white balance after {@link #open()} but before the first call to {@link #startPreview()} will not allow the auto-white balance routine to run at all, and may result in severely incorrect color in captured images.</p>
Gets the state of the auto-white balance lock. Applications should check {@link #isAutoWhiteBalanceLockSupported} before using this method. See {@link #setAutoWhiteBalanceLock} for details about the lock.
Returns true if auto-white balance locking is supported. Applications should call this before trying to lock auto-white balance. See {@link #setAutoWhiteBalanceLock} for details about the lock.
Gets current zoom value. This also works when smooth zoom is in progress. Applications should check {@link #isZoomSupported} before using this method.
Sets current zoom value. If the camera is zoomed (value > 0), the actual picture size may be smaller than picture size setting. Applications can check the actual picture size after picture is returned from {@link PictureCallback}. The preview size remains the same in zoom. Applications should check {@link #isZoomSupported} before using this method.
Returns true if zoom is supported. Applications should call this before using other zoom methods.
Gets the maximum zoom value allowed for snapshot. This is the maximum value that applications can set to {@link #setZoom(int)}. Applications should call {@link #isZoomSupported} before using this method. This value may change in different preview size. Applications should call this again after setting preview size.
Gets the zoom ratios of all zoom values. Applications should check {@link #isZoomSupported} before using this method.
Returns true if smooth zoom is supported. Applications should call this before using other smooth zoom methods.
<p>Gets the distances from the camera to where an object appears to be in focus. The object is sharpest at the optimal focus distance. The depth of field is the far focus distance minus near focus distance.</p> <p>Focus distances may change after calling {@link #autoFocus(AutoFocusCallback)}, {@link #cancelAutoFocus}, or {@link #startPreview()}. Applications can call {@link #getParameters()} and this method anytime to get the latest focus distances. If the focus mode is FOCUS_MODE_CONTINUOUS_VIDEO, focus distances may change from time to time.</p> <p>This method is intended to estimate the distance between the camera and the subject. After autofocus, the subject distance may be within near and far focus distance. However, the precision depends on the camera hardware, autofocus algorithm, the focus area, and the scene. The error can be large and it should be only used as a reference.</p> <p>Far focus distance >= optimal focus distance >= near focus distance. If the focus distance is infinity, the value will be {@code Float.POSITIVE_INFINITY}.</p>
Gets the maximum number of focus areas supported. This is the maximum length of the list in {@link #setFocusAreas(List)} and {@link #getFocusAreas()}.
<p>Gets the current focus areas. Camera driver uses the areas to decide focus.</p> <p>Before using this API or {@link #setFocusAreas(List)}, apps should call {@link #getMaxNumFocusAreas()} to know the maximum number of focus areas first. If the value is 0, focus area is not supported.</p> <p>Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of {@link #setDisplayOrientation(int)}. Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative.</p> <p>The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region.</p> <p>A special case of a {@code null} focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to {@code null} if they want the driver to completely control focusing.</p> <p>Focus areas are relative to the current field of view ({@link #getZoom()}). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom.</p> <p>Focus area only has effect if the current focus mode is {@link #FOCUS_MODE_AUTO}, {@link #FOCUS_MODE_MACRO}, {@link #FOCUS_MODE_CONTINUOUS_VIDEO}, or {@link #FOCUS_MODE_CONTINUOUS_PICTURE}.</p>
Sets focus areas. See {@link #getFocusAreas()} for documentation.
Gets the maximum number of metering areas supported. This is the maximum length of the list in {@link #setMeteringAreas(List)} and {@link #getMeteringAreas()}.
<p>Gets the current metering areas. Camera driver uses these areas to decide exposure.</p> <p>Before using this API or {@link #setMeteringAreas(List)}, apps should call {@link #getMaxNumMeteringAreas()} to know the maximum number of metering areas first. If the value is 0, metering area is not supported.</p> <p>Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of {@link #setDisplayOrientation(int)}. Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative.</p> <p>The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result.  Metering areas can partially overlap and the driver will add the weights in the overlap region.</p> <p>A special case of a {@code null} metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to {@code null} if they want the driver to completely control metering.</p> <p>Metering areas are relative to the current field of view ({@link #getZoom()}). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom.</p> <p>No matter what metering areas are, the final exposure are compensated by {@link #setExposureCompensation(int)}.</p>
Sets metering areas. See {@link #getMeteringAreas()} for documentation.
Gets the maximum number of detected faces supported. This is the maximum length of the list returned from {@link FaceDetectionListener}. If the return value is 0, face detection of the specified type is not supported.
Sets recording mode hint. This tells the camera that the intent of the application is to record videos {@link android.media.MediaRecorder#start()}, not to take still pictures {@link #takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback, Camera.PictureCallback)}. Using this hint can allow MediaRecorder.start() to start faster or with fewer glitches on output. This should be called before starting preview for the best result, but can be changed while the preview is active. The default value is false. The app can still call takePicture() when the hint is true or call MediaRecorder.start() when the hint is false. But the performance may be worse.
Returns true if video snapshot is supported. That is, applications can call {@link #takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback, Camera.PictureCallback)} during recording. Applications do not need to call {@link #startPreview()} after taking a picture. The preview will be still active. Other than that, taking a picture during recording is identical to taking a picture normally. All settings and methods related to takePicture work identically. Ex: {@link #getPictureSize()}, {@link #getSupportedPictureSizes()}, {@link #setJpegQuality(int)}, {@link #setRotation(int)}, and etc. The picture will have an EXIF header. {@link #FLASH_MODE_AUTO} and {@link #FLASH_MODE_ON} also still work, but the video will record the flash. Applications can set shutter callback as null to avoid the shutter sound. It is also recommended to set raw picture and post view callbacks to null to avoid the interrupt of preview display. Field-of-view of the recorded video may be different from that of the captured pictures.
<p>Enables and disables video stabilization. Use {@link #isVideoStabilizationSupported} to determine if calling this method is valid.</p> <p>Video stabilization reduces the shaking due to the motion of the camera in both the preview stream and in recorded videos, including data received from the preview callback. It does not reduce motion blur in images captured with {@link Camera#takePicture takePicture}.</p> <p>Video stabilization can be enabled and disabled while preview or recording is active, but toggling it may cause a jump in the video stream that may be undesirable in a recorded video.</p> disable video stabilization.
Get the current state of video stabilization. See {@link #setVideoStabilization} for details of video stabilization.
Returns true if video stabilization is supported. See {@link #setVideoStabilization} for details of video stabilization.
Splits a comma delimited string to an ArrayList of String. Return null if the passing string is null or the size is 0.
Splits a comma delimited string to an ArrayList of Integer. Return null if the passing string is null or the size is 0.
Splits a comma delimited string to an ArrayList of Float.
Returns the value of a float parameter.
Returns the value of a integer parameter.
Splits a comma delimited string to an ArrayList of Size. Return null if the passing string is null or the size is 0.
Parses a string (ex: "480x320") to Size object. Return null if the passing string is null.
Splits a comma delimited string to an ArrayList of int array. Example string: "(10000,26623),(10000,30000)". Return null if the passing string is null or the size is 0.
Splits a comma delimited string to an ArrayList of Area objects. Example string: "(-10,-10,0,0,300),(0,0,10,10,700)". Return null if the passing string is null or the size is 0 or (0,0,0,0,0).
Estimate the magnetic field at a given point and time.
Compute the ration between the Gauss-normalized associated Legendre functions and the Schmidt quasi-normalized version. This is equivalent to sqrt((m==0?1:2)*(n-m)!/(n+m!))*(2n-1)!!/(n-m)!
or zero if this sensor only returns a value when the data it's measuring changes.
must be called with sListeners lock
Use this method to get the list of available sensors of a certain type. Make multiple calls to get sensors of different types or use {@link android.hardware.Sensor#TYPE_ALL Sensor.TYPE_ALL} to get all the sensors.
Use this method to get the default sensor for a given type. Note that the returned sensor could be a composite sensor, and its data could be averaged or filtered. If you need to access the raw sensors use {@link SensorManager#getSensorList(int) getSensorList}.
Unregisters a listener for the sensors with which it is registered.
Unregisters a listener for all sensors.
Registers a {@link android.hardware.SensorEventListener SensorEventListener} for the given sensor.
<p> Computes the inclination matrix <b>I</b> as well as the rotation matrix <b>R</b> transforming a vector from the device coordinate system to the world's coordinate system which is defined as a direct orthonormal basis, where: </p> <ul> <li>X is defined as the vector product <b>Y.Z</b> (It is tangential to the ground at the device's current location and roughly points East).</li> <li>Y is tangential to the ground at the device's current location and points towards the magnetic North Pole.</li> <li>Z points towards the sky and is perpendicular to the ground.</li> </ul> <p> <center><img src="../../../images/axis_globe.png" alt="World coordinate-system diagram." border="0" /></center> </p> <p> <hr> <p> By definition: <p> [0 0 g] = <b>R</b> * <b>gravity</b> (g = magnitude of gravity) <p> [0 m 0] = <b>I</b> * <b>R</b> * <b>geomagnetic</b> (m = magnitude of geomagnetic field) <p> <b>R</b> is the identity matrix when the device is aligned with the world's coordinate system, that is, when the device's X axis points toward East, the Y axis points to the North Pole and the device is facing the sky. <p> <b>I</b> is a rotation matrix transforming the geomagnetic vector into the same coordinate space as gravity (the world's coordinate space). <b>I</b> is a simple rotation around the X axis. The inclination angle in radians can be computed with {@link #getInclination}. <hr> <p> Each matrix is returned either as a 3x3 or 4x4 row-major matrix depending on the length of the passed array: <p> <u>If the array length is 16:</u> <pre> /  M[ 0]   M[ 1]   M[ 2]   M[ 3]  \ |  M[ 4]   M[ 5]   M[ 6]   M[ 7]  | |  M[ 8]   M[ 9]   M[10]   M[11]  | \  M[12]   M[13]   M[14]   M[15] </pre> This matrix is ready to be used by OpenGL ES's {@link javax.microedition.khronos.opengles.GL10#glLoadMatrixf(float[], int) glLoadMatrixf(float[], int)}. <p> Note that because OpenGL matrices are column-major matrices you must transpose the matrix before using it. However, since the matrix is a rotation matrix, its transpose is also its inverse, conveniently, it is often the inverse of the rotation that is needed for rendering; it can therefore be used with OpenGL ES directly. <p> Also note that the returned matrices always have this form: <pre> /  M[ 0]   M[ 1]   M[ 2]   0  \ |  M[ 4]   M[ 5]   M[ 6]   0  | |  M[ 8]   M[ 9]   M[10]   0  | \      0       0       0   1 </pre> <p> <u>If the array length is 9:</u> <pre> /  M[ 0]   M[ 1]   M[ 2]  \ |  M[ 3]   M[ 4]   M[ 5]  | \  M[ 6]   M[ 7]   M[ 8] </pre> <hr> <p> The inverse of each matrix can be computed easily by taking its transpose. <p> The matrices returned by this function are meaningful only when the device is not free-falling and it is not close to the magnetic north. If the device is accelerating, or placed into a strong magnetic field, the returned matrices may be inaccurate.
Computes the geomagnetic inclination angle in radians from the inclination matrix <b>I</b> returned by {@link #getRotationMatrix}.
<p> Rotates the supplied rotation matrix so it is expressed in a different coordinate system. This is typically used when an application needs to compute the three orientation angles of the device (see {@link #getOrientation}) in a different coordinate system. </p> <p> When the rotation matrix is used for drawing (for instance with OpenGL ES), it usually <b>doesn't need</b> to be transformed by this function, unless the screen is physically rotated, in which case you can use {@link android.view.Display#getRotation() Display.getRotation()} to retrieve the current rotation of the screen. Note that because the user is generally free to rotate their screen, you often should consider the rotation in deciding the parameters to use here. </p> <p> <u>Examples:</u> <p> <ul> <li>Using the camera (Y axis along the camera's axis) for an augmented reality application where the rotation angles are needed:</li> <p> <ul> <code>remapCoordinateSystem(inR, AXIS_X, AXIS_Z, outR);</code> </ul> </p> <li>Using the device as a mechanical compass when rotation is {@link android.view.Surface#ROTATION_90 Surface.ROTATION_90}:</li> <p> <ul> <code>remapCoordinateSystem(inR, AXIS_Y, AXIS_MINUS_X, outR);</code> </ul> </p> Beware of the above example. This call is needed only to account for a rotation from its natural orientation when calculating the rotation angles (see {@link #getOrientation}). If the rotation matrix is also used for rendering, it may not need to be transformed, for instance if your {@link android.app.Activity Activity} is running in landscape mode. </ul> <p> Since the resulting coordinate system is orthonormal, only two axes need to be specified.
Computes the device's orientation based on the rotation matrix. <p> When it returns, the array values is filled with the result: <ul> <li>values[0]: <i>azimuth</i>, rotation around the Z axis.</li> <li>values[1]: <i>pitch</i>, rotation around the X axis.</li> <li>values[2]: <i>roll</i>, rotation around the Y axis.</li> </ul> <p>The reference coordinate-system used is different from the world coordinate-system defined for the rotation matrix:</p> <ul> <li>X is defined as the vector product <b>Y.Z</b> (It is tangential to the ground at the device's current location and roughly points West).</li> <li>Y is tangential to the ground at the device's current location and points towards the magnetic North Pole.</li> <li>Z points towards the center of the Earth and is perpendicular to the ground.</li> </ul> <p> <center><img src="../../../images/axis_globe_inverted.png" alt="Inverted world coordinate-system diagram." border="0" /></center> </p> <p> All three angles above are in <b>radians</b> and <b>positive</b> in the <b>counter-clockwise</b> direction.
Computes the Altitude in meters from the atmospheric pressure and the pressure at sea level. <p> Typically the atmospheric pressure is read from a {@link Sensor#TYPE_PRESSURE} sensor. The pressure at sea level must be known, usually it can be retrieved from airport databases in the vicinity. If unknown, you can use {@link #PRESSURE_STANDARD_ATMOSPHERE} as an approximation, but absolute altitudes won't be accurate. </p> <p> To calculate altitude differences, you must calculate the difference between the altitudes at both points. If you don't know the altitude as sea level, you can use {@link #PRESSURE_STANDARD_ATMOSPHERE} instead, which will give good results considering the range of pressure typically involved. </p> <p> <code><ul> float altitude_difference = </ul></code> </p>
Helper function to convert the specified sensor's data to the windows's coordinate space from the device's coordinate space. output: 3,4,5: values in the old API format
Helper function to compute the angle change between two rotation matrices. Given a current rotation matrix (R) and a previous rotation matrix (prevR) computes the rotation around the x,y, and z axes which transforms prevR to R. outputs a 3 element vector containing the x,y, and z angle change at indexes 0, 1, and 2 respectively. <p> Each input matrix is either as a 3x3 or 4x4 row-major matrix depending on the length of the passed array: <p>If the array length is 9, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8] </pre> <p>If the array length is 16, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   R[ 3]  \ |  R[ 4]   R[ 5]   R[ 6]   R[ 7]  | |  R[ 8]   R[ 9]   R[10]   R[11]  | \  R[12]   R[13]   R[14]   R[15] </pre>
Helper function to convert a rotation vector to a rotation matrix. Given a rotation vector (presumably from a ROTATION_VECTOR sensor), returns a 9  or 16 element rotation matrix in the array R.  R must have length 9 or 16. If R.length == 9, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8] </pre> If R.length == 16, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   0  \ |  R[ 4]   R[ 5]   R[ 6]   0  | |  R[ 8]   R[ 9]   R[10]   0  | \  0       0       0       1 </pre>
Helper function to convert a rotation vector to a normalized quaternion. Given a rotation vector (presumably from a ROTATION_VECTOR sensor), returns a normalized quaternion in the array Q.  The quaternion is stored as [w, x, y, z]
Instantiate a new client session for the input method, by calling back to {@link AbstractInputMethodService#onCreateInputMethodSessionInterface() AbstractInputMethodService.onCreateInputMethodSessionInterface()}.
Take care of enabling or disabling an existing session by calling its {@link AbstractInputMethodSessionImpl#revokeSelf() AbstractInputMethodSessionImpl.setEnabled()} method.
Take care of killing an existing session by calling its {@link AbstractInputMethodSessionImpl#revokeSelf() AbstractInputMethodSessionImpl.revokeSelf()} method.
Check whether this session has been enabled by the system.  If not enabled, you should not execute any calls on to it.
Check whether this session has been revoked by the system.  Revoked session is also always disabled, so there is generally no need to explicitly check for this.
Change the enabled state of the session.  This only works if the session has not been revoked.
Revoke the session from the client.  This disabled the session, and prevents it from ever being enabled again.
Take care of dispatching incoming key events to the appropriate callbacks on the service, and tell the client when this is done.
Take care of dispatching incoming trackball events to the appropriate callbacks on the service, and tell the client when this is done.
Return the global {@link KeyEvent.DispatcherState KeyEvent.DispatcherState} for used for processing events from the target application. Normally you will not need to use this directly, but just use the standard high-level event callbacks like {@link #onKeyDown}.
Pretend like the window this view is in always has focus, so it will highlight when selected.
Finishes a possibly started action mode.
Start making changes that will not be reported to the client.  That is, {@link #onSelectionChanged(int, int)} will not result in sending the new selection to the client
Finish making changes that will not be reported to the client.  That is, {@link #onSelectionChanged(int, int)} will not result in sending the new selection to the client
Implement just to keep track of when we are setting text from the client (vs. seeing changes in ourself from the user).
Report to the underlying text editor about selection changes.
Redirect clicks to the IME for handling there.  First allows any on click handler to run, though.
Return true if the edit text is currently showing a scroll bar.
Pretend like the window this view is in always has focus, so its highlight and cursor will be displayed.
Pretend like this view always has focus, so its highlight and cursor will be displayed.
Pretend like this view always has focus, so its highlight and cursor will be displayed.
Take care of attaching the given window token provided by the system.
Handle a new input binding, calling {@link InputMethodService#onBindInput InputMethodService.onBindInput()} when done.
Clear the current input binding.
Handle a request by the system to hide the soft input area.
Handle a request by the system to show the soft input area.
Call {@link InputMethodService#onDisplayCompletions InputMethodService.onDisplayCompletions()}.
Call {@link InputMethodService#onUpdateExtractedText InputMethodService.onUpdateExtractedText()}.
Call {@link InputMethodService#onUpdateSelection InputMethodService.onUpdateSelection()}.
Call {@link InputMethodService#onUpdateCursor InputMethodService.onUpdateCursor()}.
Call {@link InputMethodService#onAppPrivateCommand InputMethodService.onAppPrivateCommand()}.
This is a hook that subclasses can use to perform initialization of their interface.  It is called for you prior to any of your UI objects being created, both after the service is first created and after a configuration change happens.
Take care of handling configuration changes.  Subclasses of InputMethodService generally don't need to deal directly with this on their own; the standard implementation here takes care of regenerating the input method UI as a result of the configuration change, so you can rely on your {@link #onCreateInputView} and other methods being called as appropriate due to a configuration change. <p>When a configuration change does happen, {@link #onInitializeInterface()} is guaranteed to be called the next time prior to any of the other input or UI creation callbacks.  The following will be called immediately depending if appropriate for current state: {@link #onStartInput} if input is active, and {@link #onCreateInputView} and {@link #onStartInputView} and related appropriate functions if the UI is displayed.
Return the maximum width, in pixels, available the input method. Input methods are positioned at the bottom of the screen and, unless running in fullscreen, will generally want to be as short as possible so should compute their height based on their contents.  However, they can stretch as much as needed horizontally.  The function returns to you the maximum amount of space available horizontally, which you can use if needed for UI placement. <p>In many cases this is not needed, you can just rely on the normal view layout mechanisms to position your views within the full horizontal space given to the input method. <p>Note that this value can change dynamically, in particular when the screen orientation changes.
Return the currently active InputBinding for the input method, or null if there is none.
Retrieve the currently active InputConnection that is bound to the input method, or null if there is none.
Re-evaluate whether the input method should be running in fullscreen mode, and update its UI if this has changed since the last time it was evaluated.  This will call {@link #onEvaluateFullscreenMode()} to determine whether it should currently run in fullscreen mode.  You can use {@link #isFullscreenMode()} to determine if the input method is currently running in fullscreen mode.
Update the given window's parameters for the given mode.  This is called when the window is first displayed and each time the fullscreen or candidates only mode changes. <p>The default implementation makes the layout for the window MATCH_PARENT x MATCH_PARENT when in fullscreen mode, and MATCH_PARENT x WRAP_CONTENT when in non-fullscreen mode. and intended to cover the entire application display. candidates view and none of the rest of its UI.  This is mutually exclusive with fullscreen mode.
Return whether the input method is <em>currently</em> running in fullscreen mode.  This is the mode that was last determined and applied by {@link #updateFullscreenMode()}.
Override this to control when the input method should run in fullscreen mode.  The default implementation runs in fullsceen only when the screen is in landscape mode.  If you change what this returns, you will need to call {@link #updateFullscreenMode()} yourself whenever the returned value may have changed to have it re-evaluated and applied.
Controls the visibility of the extracted text area.  This only applies when the input method is in fullscreen mode, and thus showing extracted text.  When false, the extracted text will not be shown, allowing some of the application to be seen behind.  This is normally set for you by {@link #onUpdateExtractingVisibility}.  This controls the visibility of both the extracted text and candidate view; the latter since it is not useful if there is no text to see.
Return whether the fullscreen extract view is shown.  This will only return true if {@link #isFullscreenMode()} returns true, and in that case its value depends on the last call to {@link #setExtractViewShown(boolean)}.  This effectively lets you determine if the application window is entirely covered (when this returns true) or if some part of it may be shown (if this returns false, though if {@link #isFullscreenMode()} returns true in that case then it is probably only a sliver of the application).
Compute the interesting insets into your UI.  The default implementation uses the top of the candidates frame for the visible insets, and the top of the input frame for the content insets.  The default touchable insets are {@link Insets#TOUCHABLE_INSETS_VISIBLE}. <p>Note that this method is not called when {@link #isExtractViewShown} returns true, since in that case the application is left as-is behind the input method and not impacted by anything in its UI.
Re-evaluate whether the soft input area should currently be shown, and update its UI if this has changed since the last time it was evaluated.  This will call {@link #onEvaluateInputViewShown()} to determine whether the input view should currently be shown.  You can use {@link #isInputViewShown()} to determine if the input view is currently shown.
Returns true if we have been asked to show our input view.
Return whether the soft input view is <em>currently</em> shown to the user.  This is the state that was last determined and applied by {@link #updateInputViewShown()}.
Override this to control when the soft input area should be shown to the user.  The default implementation only shows the input view when there is no hard keyboard or the keyboard is hidden.  If you change what this returns, you will need to call {@link #updateInputViewShown()} yourself whenever the returned value may have changed to have it re-evaluated and applied.
Controls the visibility of the candidates display area.  By default it is hidden.
Returns the visibility mode (either {@link View#INVISIBLE View.INVISIBLE} or {@link View#GONE View.GONE}) of the candidates view when it is not shown.  The default implementation returns GONE when {@link #isExtractViewShown} returns true, otherwise VISIBLE.  Be careful if you change this to return GONE in other situations -- if showing or hiding the candidates view causes your window to resize, this can cause temporary drawing artifacts as the resize takes place.
Force switch to a new input method, as identified by <var>id</var>.  This input method will be destroyed, and the requested one started on the current input field.
Replaces the current candidates view with a new one.  You only need to call this when dynamically changing the view; normally, you should implement {@link #onCreateCandidatesView()} and create your view when first needed by the input method.
Replaces the current input view with a new one.  You only need to call this when dynamically changing the view; normally, you should implement {@link #onCreateInputView()} and create your view when first needed by the input method.
Called by the framework to create the layout for showing extacted text. Only called when in fullscreen mode.  The returned view hierarchy must have an {@link ExtractEditText} whose ID is {@link android.R.id#inputExtractEditText}.
Create and return the view hierarchy used to show candidates.  This will be called once, when the candidates are first displayed.  You can return null to have no candidates view; the default implementation returns null. <p>To control when the candidates view is displayed, use {@link #setCandidatesViewShown(boolean)}. function, use {@link #setCandidatesView(View)}.
Create and return the view hierarchy used for the input area (such as a soft keyboard).  This will be called once, when the input area is first displayed.  You can return null to have no input area; the default implementation returns null. <p>To control when the input view is displayed, implement {@link #onEvaluateInputViewShown()}. function, use {@link #setInputView(View)}.
Called when the input view is being shown and input has started on a new editor.  This will always be called after {@link #onStartInput}, allowing you to do your general setup there and just view-specific setup here.  You are guaranteed that {@link #onCreateInputView()} will have been called some time before this function is called. same text field as before.
Called when the input view is being hidden from the user.  This will be called either prior to hiding the window, or prior to switching to another target for editing. <p>The default implementation uses the InputConnection to clear any active composing text; you can override this (not calling the base class implementation) to perform whatever behavior you would like. called immediately after.
Called when only the candidates view has been shown for showing processing as the user enters text through a hard keyboard. This will always be called after {@link #onStartInput}, allowing you to do your general setup there and just view-specific setup here.  You are guaranteed that {@link #onCreateCandidatesView()} will have been called some time before this function is called. <p>Note that this will <em>not</em> be called when the input method is running in full editing mode, and thus receiving {@link #onStartInputView} to initiate that operation.  This is only for the case when candidates are being shown while the input method editor is hidden but wants to show its candidates UI as text is entered through some other mechanism. same text field as before.
Called when the candidates view is being hidden from the user.  This will be called either prior to hiding the window, or prior to switching to another target for editing. <p>The default implementation uses the InputConnection to clear any active composing text; you can override this (not calling the base class implementation) to perform whatever behavior you would like. called immediately after.
The system has decided that it may be time to show your input method. This is called due to a corresponding call to your {@link InputMethod#showSoftInput InputMethod.showSoftInput()} method.  The default implementation uses {@link #onEvaluateInputViewShown()}, {@link #onEvaluateFullscreenMode()}, and the current configuration to decide whether the input view should be shown at this point. as per {@link InputMethod#showSoftInput InputMethod.showSoftInput()}. configuration change.
Called when the input method window has been shown to the user, after previously not being visible.  This is done after all of the UI setup for the window has occurred (creating its views etc).
Called when the input method window has been hidden from the user, after previously being visible.
Called when a new client has bound to the input method.  This may be followed by a series of {@link #onStartInput(EditorInfo, boolean)} and {@link #onFinishInput()} calls as the user navigates through its UI.  Upon this call you know that {@link #getCurrentInputBinding} and {@link #getCurrentInputConnection} return valid objects.
Called when the previous bound client is no longer associated with the input method.  After returning {@link #getCurrentInputBinding} and {@link #getCurrentInputConnection} will no longer return valid objects.
Called to inform the input method that text input has started in an editor.  You should use this callback to initialize the state of your input to match the state of the editor given to it. in. editor such as because the application has changed the text in the editor.  Otherwise will be false, indicating this is a new session with the editor.
Called to inform the input method that text input has finished in the last editor.  At this point there may be a call to {@link #onStartInput(EditorInfo, boolean)} to perform input in a new editor, or the input method may be left idle.  This method is <em>not</em> called when input restarts in the same editor. <p>The default implementation uses the InputConnection to clear any active composing text; you can override this (not calling the base class implementation) to perform whatever behavior you would like.
Called when the application has reported auto-completion candidates that it would like to have the input method displayed.  Typically these are only used when an input method is running in full-screen mode, since otherwise the user can see and interact with the pop-up window of completions shown by the application. <p>The default implementation here does nothing.
Called when the application has reported new extracted text to be shown due to changes in its current text state.  The default implementation here places the new text in the extract edit text, when the input method is running in fullscreen mode.
Called when the application has reported a new selection region of the text.  This is called whether or not the input method has requested extracted text updates, although if so it will not receive this call if the extracted text has changed as well. <p>The default implementation takes care of updating the cursor in the extract text, if it is being shown.
Called when the user tapped or clicked a text view. IMEs can't rely on this method being called because this was not part of the original IME protocol, so applications with custom text editing written before this method appeared will not call to inform the IME of this interaction.
Called when the application has reported a new location of its text cursor.  This is only called if explicitly requested by the input method. The default implementation does nothing.
Close this input method's soft input area, removing it from the display. The input method will continue running, but the user can no longer use it to generate input by touching the screen. 0 or have the {@link InputMethodManager#HIDE_IMPLICIT_ONLY InputMethodManager.HIDE_IMPLICIT_ONLY} bit set.
Show the input method. This is a call back to the IMF to handle showing the input method. Close this input method's soft input area, removing it from the display. The input method will continue running, but the user can no longer use it to generate input by touching the screen. 0 or have the {@link InputMethodManager#SHOW_FORCED InputMethodManager.} bit set.
Override this to intercept key down events before they are processed by the application.  If you return true, the application will not itself process the event.  If you return true, the normal application processing will occur as if the IME had not seen the event at all. <p>The default implementation intercepts {@link KeyEvent#KEYCODE_BACK KeyEvent.KEYCODE_BACK} if the IME is currently shown, to possibly hide it when the key goes up (if not canceled or long pressed).  In addition, in fullscreen mode only, it will consume DPAD movement events to move the cursor in the extracted text view, not allowing them to perform navigation in the underlying application.
Override this to intercept special key multiple events before they are processed by the application.  If you return true, the application will not itself process the event.  If you return true, the normal application processing will occur as if the IME had not seen the event at all. <p>The default implementation always returns false, except when in fullscreen mode, where it will consume DPAD movement events to move the cursor in the extracted text view, not allowing them to perform navigation in the underlying application.
Override this to intercept key up events before they are processed by the application.  If you return true, the application will not itself process the event.  If you return true, the normal application processing will occur as if the IME had not seen the event at all. <p>The default implementation intercepts {@link KeyEvent#KEYCODE_BACK KeyEvent.KEYCODE_BACK} to hide the current IME UI if it is shown.  In addition, in fullscreen mode only, it will consume DPAD movement events to move the cursor in the extracted text view, not allowing them to perform navigation in the underlying application.
Handle a request by the system to toggle the soft input area.
Send the given key event code (as defined by {@link KeyEvent}) to the current input connection is a key down + key up event pair.  The sent events have {@link KeyEvent#FLAG_SOFT_KEYBOARD KeyEvent.FLAG_SOFT_KEYBOARD} set, so that the recipient can identify them as coming from a software input method, and {@link KeyEvent#FLAG_KEEP_TOUCH_MODE KeyEvent.FLAG_KEEP_TOUCH_MODE}, so that they don't impact the current touch mode of the UI. {@link KeyEvent}.
Ask the input target to execute its default action via {@link InputConnection#performEditorAction InputConnection.performEditorAction()}. pressed an enter key on the keyboard, that is it will <em>not</em> be done if the editor has set {@link EditorInfo#IME_FLAG_NO_ENTER_ACTION EditorInfo.IME_FLAG_NO_ENTER_ACTION}.  If false, the action will be sent regardless of how the editor has set that flag. If false, either the editor did not specify a default action or it does not want an action from the enter key.  If true, the action was sent (or there was no input connection at all).
Send the given UTF-16 character to the current input connection.  Most characters will be delivered simply by calling {@link InputConnection#commitText InputConnection.commitText()} with the character; some, however, may be handled different.  In particular, the enter character ('\n') will either be delivered as an action code or a raw key event, as appropriate.
This is called when the user has moved the cursor in the extracted text view, when running in fullsreen mode.  The default implementation performs the corresponding selection change on the underlying text editor.
This is called when the user has clicked on the extracted text view, when running in fullscreen mode.  The default implementation hides the candidates view when this happens, but only if the extracted text editor has a vertical scroll bar because its text doesn't fit. Re-implement this to provide whatever behavior you want.
This is called when the user has performed a cursor movement in the extracted text view, when it is running in fullscreen mode.  The default implementation hides the candidates view when a vertical movement happens, but only if the extracted text editor has a vertical scroll bar because its text doesn't fit. Re-implement this to provide whatever behavior you want.
This is called when the user has selected a context menu item from the extracted text view, when running in fullscreen mode.  The default implementation sends this action to the current InputConnection's {@link InputConnection#performContextMenuAction(int)}, for it to be processed in underlying "real" editor.  Re-implement this to provide whatever behavior you want.
Return text that can be used as a button label for the given {@link EditorInfo#imeOptions EditorInfo.imeOptions}.  Returns null if there is no action requested.  Note that there is no guarantee that the returned text will be relatively short, so you probably do not want to use it as text on a soft keyboard key label.
Called when the fullscreen-mode extracting editor info has changed, to determine whether the extracting (extract text and candidates) portion of the UI should be shown.  The standard implementation hides or shows the extract area depending on whether it makes sense for the current editor.  In particular, a {@link InputType#TYPE_NULL} input type or {@link EditorInfo#IME_FLAG_NO_EXTRACT_UI} flag will turn off the extract area since there is no text to be shown.
Called when the fullscreen-mode extracting editor info has changed, to update the state of its UI such as the action buttons shown. You do not need to deal with this if you are using the standard full screen extract UI.  If replacing it, you will need to re-implement this to put the appropriate action button in your own UI and handle it, and perform any other changes. <p>The standard implementation turns on or off its accessory area depending on whether there is an action button, and hides or shows the entire extract area depending on whether it makes sense for the current editor.  In particular, a {@link InputType#TYPE_NULL} or {@link InputType#TYPE_TEXT_VARIATION_FILTER} input type will turn off the extract area since there is no text to be shown.
This is called when, while currently displayed in extract mode, the current input target changes.  The default implementation will auto-hide the IME if the new target is not a full editor, since this can be an confusing experience for the user.
TODO: Handle the subtype change event Called when the subtype was changed.
Performs a dump of the InputMethodService's internal state.  Override to add your own information to the dump.
Create an empty key with no attributes.
Create a key with the given top-left coordinate and extract its attributes from the XML parser. a {@link Keyboard}.
Informs the key that it has been pressed, in case it needs to change its appearance or state.
Changes the pressed state of the key. If it is a sticky key, it will also change the toggled state of the key if the finger was release inside.
Detects if a point falls inside this key. it will assume that all points between the key and the edge are considered to be inside the key.
Returns the square of the distance between the center of the key and the given point.
Returns the drawable state for the key, based on the current state and type of the key.
Creates a keyboard from the given xml key layout file.
Creates a keyboard from the given xml key layout file. Weeds out rows that have a keyboard mode defined but don't match the specified mode.
<p>Creates a blank keyboard from the given resource file and populates it with the specified characters in left-to-right, top-to-bottom fashion, using the specified number of columns. </p> <p>If the specified number of columns is -1, then the keyboard will fit as many keys as possible in each row.</p> for each character. number of keys that can fit in a row, it will be ignored. If this number is -1, the keyboard will fit as many keys as possible in each row.
Returns the total height of the keyboard
Returns the indices of the keys that are closest to the given point. point is out of range, then an array of size zero is returned.
Returns the {@link OnKeyboardActionListener} object.
Attaches a keyboard to this view. The keyboard can be switched at any time and the view will re-layout itself to accommodate the keyboard.
Returns the current keyboard being displayed by this view.
Sets the state of the shift key of the keyboard, if any.
Returns the state of the shift key of the keyboard, if any. no shift key on the keyboard or there is no keyboard attached, it returns false.
Enables or disables the key feedback popup. This is a popup that shows a magnified version of the depressed key. By default the preview is enabled.
Returns the enabled state of the key feedback popup.
When enabled, calls to {@link OnKeyboardActionListener#onKey} will include key codes for adjacent keys.  When disabled, only the primary key code will be reported.
Returns true if proximity correction is enabled.
Popup keyboard close button clicked.
Compute the average distance between adjacent keys (horizontally and vertically) and square it to get the proximity threshold. We use a square here and in computing the touch distance from a key's center to avoid taking a square root.
Handle multi-tap keys by producing the key label for the current multi-tap state.
Requests a redraw of the entire keyboard. Calling {@link #invalidate} is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer.
Invalidates a key so that it will be redrawn on the next repaint. Use this method if only one key is changing it's content. Any changes that affect the position or size of the key may not be honored.
Called when a key is long pressed. By default this will open any popup keyboard associated with this key through the attributes popupLayout and popupCharacters. method on the base class if the subclass doesn't wish to handle the call.
Create a DockWindow that uses a custom style.
Get the size of the DockWindow.
Set the size of the DockWindow.
Set which boundary of the screen the DockWindow sticks to.
Constructs a new Address object set to the given Locale and with all other fields initialized to null or false.
Returns the Locale associated with this address.
Returns the largest index currently in use to specify an address line. If no address lines are specified, -1 is returned.
Returns a line of the address numbered by the given index (starting at 0), or null if no such line is present.
Sets the line of the address numbered by index (starting at 0) to the given String, which may be null.
Returns the feature name of the address, for example, "Golden Gate Bridge", or null if it is unknown
Sets the feature name of the address to the given String, which may be null
Returns the administrative area name of the address, for example, "CA", or null if it is unknown
Sets the administrative area name of the address to the given String, which may be null
Returns the sub-administrative area name of the address, for example, "Santa Clara County", or null if it is unknown
Sets the sub-administrative area name of the address to the given String, which may be null
Returns the locality of the address, for example "Mountain View", or null if it is unknown.
Sets the locality of the address to the given String, which may be null.
Returns the sub-locality of the address, or null if it is unknown. For example, this may correspond to the neighborhood of the locality.
Sets the sub-locality of the address to the given String, which may be null.
Returns the thoroughfare name of the address, for example, "1600 Ampitheater Parkway", which may be null
Sets the thoroughfare name of the address, which may be null.
Returns the sub-thoroughfare name of the address, which may be null. This may correspond to the street number of the address.
Sets the sub-thoroughfare name of the address, which may be null.
Returns the premises of the address, or null if it is unknown.
Sets the premises of the address to the given String, which may be null.
Returns the postal code of the address, for example "94110", or null if it is unknown.
Sets the postal code of the address to the given String, which may be null.
Returns the country code of the address, for example "US", or null if it is unknown.
Sets the country code of the address to the given String, which may be null.
Returns the localized country name of the address, for example "Iceland", or null if it is unknown.
Sets the country name of the address to the given String, which may be null.
Returns true if a latitude has been assigned to this Address, false otherwise.
Returns the latitude of the address if known. a latitude.
Sets the latitude associated with this address.
Removes any latitude associated with this address.
Returns true if a longitude has been assigned to this Address, false otherwise.
Returns the longitude of the address if known. a longitude.
Sets the longitude associated with this address.
Removes any longitude associated with this address.
Returns the phone number of the address if known, or null if it is unknown. a latitude.
Sets the phone number associated with this address.
Returns the public URL for the address if known, or null if it is unknown.
Sets the public URL associated with this address.
Returns additional provider-specific information about the address as a Bundle.  The keys and values are determined by the provider.  If no additional information is available, null is returned. <!-- <p> A number of common key/value pairs are listed below. Providers that use any of the keys on this list must provide the corresponding value as described below. <ul> </ul> -->
Sets the extra information associated with this fix to the given Bundle.
Compare the specified country to this country object ignoring the mSource field, return true if the countryIso fields are equal
Constructs a new Criteria object that is a copy of the given criteria.
Indicates the desired horizontal accuracy (latitude and longitude). Accuracy may be {@link #ACCURACY_LOW}, {@link #ACCURACY_MEDIUM}, {@link #ACCURACY_HIGH} or {@link #NO_REQUIREMENT}. More accurate location may consume more power and may take longer.
Returns a constant indicating the desired horizontal accuracy (latitude and longitude). Accuracy may be {@link #ACCURACY_LOW}, {@link #ACCURACY_MEDIUM}, {@link #ACCURACY_HIGH} or {@link #NO_REQUIREMENT}.
Indicates the desired vertical accuracy (altitude). Accuracy may be {@link #ACCURACY_LOW}, {@link #ACCURACY_MEDIUM}, {@link #ACCURACY_HIGH} or {@link #NO_REQUIREMENT}. More accurate location may consume more power and may take longer.
Returns a constant indicating the desired vertical accuracy (altitude). Accuracy may be {@link #ACCURACY_LOW}, {@link #ACCURACY_HIGH}, or {@link #NO_REQUIREMENT}.
Indicates the desired speed accuracy. Accuracy may be {@link #ACCURACY_LOW}, {@link #ACCURACY_HIGH}, or {@link #NO_REQUIREMENT}. More accurate location may consume more power and may take longer.
Returns a constant indicating the desired speed accuracy Accuracy may be {@link #ACCURACY_LOW}, {@link #ACCURACY_HIGH}, or {@link #NO_REQUIREMENT}.
Indicates the desired bearing accuracy. Accuracy may be {@link #ACCURACY_LOW}, {@link #ACCURACY_HIGH}, or {@link #NO_REQUIREMENT}. More accurate location may consume more power and may take longer.
Returns a constant indicating the desired bearing accuracy. Accuracy may be {@link #ACCURACY_LOW}, {@link #ACCURACY_HIGH}, or {@link #NO_REQUIREMENT}.
Indicates the desired accuracy for latitude and longitude. Accuracy may be {@link #ACCURACY_FINE} if desired location is fine, else it can be {@link #ACCURACY_COARSE}. More accurate location may consume more power and may take longer.
Returns a constant indicating desired accuracy of location Accuracy may be {@link #ACCURACY_FINE} if desired location is fine, else it can be {@link #ACCURACY_COARSE}.
Indicates the desired maximum power level.  The level parameter must be one of NO_REQUIREMENT, POWER_LOW, POWER_MEDIUM, or POWER_HIGH.
Returns a constant indicating the desired power requirement.  The returned
Indicates whether the provider is allowed to incur monetary cost.
Returns whether the provider is allowed to incur monetary cost.
Indicates whether the provider must provide altitude information. Not all fixes are guaranteed to contain such information.
Returns whether the provider must provide altitude information. Not all fixes are guaranteed to contain such information.
Indicates whether the provider must provide speed information. Not all fixes are guaranteed to contain such information.
Returns whether the provider must provide speed information. Not all fixes are guaranteed to contain such information.
Indicates whether the provider must provide bearing information. Not all fixes are guaranteed to contain such information.
Returns whether the provider must provide bearing information. Not all fixes are guaranteed to contain such information.
Returns true if the Geocoder methods getFromLocation and getFromLocationName are implemented.  Lack of network connectivity may still cause these methods to return null or empty lists.
Constructs a Geocoder whose responses will be localized for the given Locale.
Constructs a Geocoder whose responses will be localized for the default system Locale.
Returns an array of Addresses that are known to describe the area immediately surrounding the given latitude and longitude. The returned addresses will be localized for the locale provided to this class's constructor. <p> The returned values may be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. found or there is no backend service available. less than -90 or greater than 90 less than -180 or greater than 180 I/O problem occurs
Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc..  The returned addresses will be localized for the locale provided to this class's constructor. <p> The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. found or there is no backend service available. I/O problem occurs
Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc..  The returned addresses will be localized for the locale provided to this class's constructor. <p> You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box. <p> The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. found or there is no backend service available. less than -90 or greater than 90 less than -180 or greater than 180 I/O problem occurs
This object is only constructed by the Geocoder class
returns the Geocoder's locale
returns the package name of the Geocoder's client
Used by {@link LocationManager#getGpsStatus} to copy LocationManager's cached GpsStatus instance to the client's copy.
Returns the PRN (pseudo-random number) for the satellite.
Returns the signal to noise ratio for the satellite.
Returns the elevation of the satellite in degrees. The elevation can vary between 0 and 90.
Returns the azimuth of the satellite in degrees. The azimuth can vary between 0 and 360.
Returns true if the GPS engine has ephemeris data for the satellite.
Returns true if the GPS engine has almanac data for the satellite.
Returns true if the satellite was used by the GPS engine when calculating the most recent GPS fix.
Used internally within {@link LocationManager} to copy GPS status data from the Location Manager Service to its cached GpsStatus instance. Is synchronized to ensure that GPS status updates are atomic.
Used by {@link LocationManager#getGpsStatus} to copy LocationManager's cached GpsStatus instance to the client's copy. Since this method is only used within {@link LocationManager#getGpsStatus}, it does not need to be synchronized.
Returns the time required to receive the first fix since the most recent restart of the GPS engine.
Returns an array of {@link GpsSatellite} objects, which represent the current state of the GPS engine.
Returns the maximum number of satellites that can be in the satellite list that can be returned by {@link #getSatellites()}.
Cast an IBinder object into an android.location.ICountryDetector interface, generating a proxy if needed.
Add a listener to receive the notification when the country is detected or changed.
Cast an IBinder object into an android.location.ICountryListener interface, generating a proxy if needed.
Cast an IBinder object into an android.location.IGeocodeProvider interface, generating a proxy if needed.
Cast an IBinder object into an android.location.IGpsStatusListener interface, generating a proxy if needed.
Cast an IBinder object into an android.location.IGpsStatusProvider interface, generating a proxy if needed.
Cast an IBinder object into an android.location.ILocationListener interface, generating a proxy if needed.
Cast an IBinder object into an android.location.ILocationManager interface, generating a proxy if needed.
for reporting callback completion
Used by location providers to tell the location manager when it has a new location. Passive is true if the location is coming from the passive provider, in which case it need not be shared with other providers.
for NI support
Cast an IBinder object into an android.location.ILocationProvider interface, generating a proxy if needed.
Cast an IBinder object into an android.location.INetInitiatedListener interface, generating a proxy if needed.
Constructs a new Location.  By default, time, latitude, longitude, and numSatellites are 0; hasAltitude, hasSpeed, and hasBearing are false; and there is no extra information. location fix.
Constructs a new Location object that is a copy of the given location.
Sets the contents of the location to the values from the given location.
Clears the contents of the location.
Converts a coordinate to a String representation. The outputType may be one of FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS. The coordinate must be a valid double between -180.0 and 180.0. -180.0, greater than 180.0, or is not a number. FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS.
Converts a String in one of the formats described by FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS into a double. in one of the valid formats.
Computes the approximate distance in meters between two locations, and optionally the initial and final bearings of the shortest path between them.  Distance and bearing are defined using the WGS84 ellipsoid. <p> The computed distance is stored in results[0].  If results has length 2 or greater, the initial bearing is stored in results[1]. If results has length 3 or greater, the final bearing is stored in results[2].
Returns the approximate distance in meters between this location and the given location.  Distance is defined using the WGS84 ellipsoid.
Returns the approximate initial bearing in degrees East of true North when traveling along the shortest path between this location and the given location.  The shortest path is defined using the WGS84 ellipsoid.  Locations that are (nearly) antipodal may produce meaningless results.
Returns the name of the provider that generated this fix, or null if it is not associated with a provider.
Sets the name of the provider that generated this fix.
Returns the UTC time of this fix, in milliseconds since January 1, 1970.
Sets the UTC time of this fix, in milliseconds since January 1, 1970.
Returns the latitude of this fix.
Sets the latitude of this fix.
Returns the longitude of this fix.
Sets the longitude of this fix.
Returns true if this fix contains altitude information, false otherwise.
Returns the altitude of this fix.  If {@link #hasAltitude} is false, 0.0f is returned.
Sets the altitude of this fix.  Following this call, hasAltitude() will return true.
Clears the altitude of this fix.  Following this call, hasAltitude() will return false.
Returns true if this fix contains speed information, false otherwise.  The default implementation returns false.
Returns the speed of the device over ground in meters/second. If hasSpeed() is false, 0.0f is returned.
Sets the speed of this fix, in meters/second.  Following this call, hasSpeed() will return true.
Clears the speed of this fix.  Following this call, hasSpeed() will return false.
Returns true if the provider is able to report bearing information, false otherwise.  The default implementation returns false.
Returns the direction of travel in degrees East of true North. If hasBearing() is false, 0.0 is returned.
Sets the bearing of this fix.  Following this call, hasBearing() will return true.
Clears the bearing of this fix.  Following this call, hasBearing() will return false.
Returns true if the provider is able to report accuracy information, false otherwise.  The default implementation returns false.
Returns the accuracy of the fix in meters. If hasAccuracy() is false, 0.0 is returned.
Sets the accuracy of this fix.  Following this call, hasAccuracy() will return true.
Clears the accuracy of this fix.  Following this call, hasAccuracy() will return false.
Returns additional provider-specific information about the location fix as a Bundle.  The keys and values are determined by the provider.  If no additional information is available, null is returned. <p> A number of common key/value pairs are listed below. Providers that use any of the keys on this list must provide the corresponding value as described below. <ul> <li> satellites - the number of satellites used to derive the fix </ul>
of type ILocationManager, which is a system private class. The right way to create an instance of this class is using the factory Context.getSystemService.
Returns a list of the names of all known location providers.  All providers are returned, including ones that are not permitted to be accessed by the calling activity or are currently disabled.
Returns a list of the names of location providers.  Only providers that are permitted to be accessed by the calling activity will be returned. enabled are returned.
Returns the information associated with the location provider of the given name, or null if no provider exists by that name. given provider.
Returns a list of the names of LocationProviders that satisfy the given criteria, or null if none do.  Only providers that are permitted to be accessed by the calling activity will be returned. enabled are returned.
Returns the name of the provider that best meets the given criteria. Only providers that are permitted to be accessed by the calling activity will be returned.  If several providers meet the criteria, the one with the best accuracy is returned.  If no provider meets the criteria, the criteria are loosened in the following sequence: <ul> <li> power requirement <li> accuracy <li> bearing <li> speed <li> altitude </ul> <p> Note that the requirement on monetary cost is not removed in this process.
Registers the current activity to be notified periodically by the named provider.  Periodically, the supplied LocationListener will be called with the current Location or with status updates. <p> It may take a while to receive the most recent location. If an immediate location is required, applications may use the {@link #getLastKnownLocation(String)} method. <p> In case the provider is disabled by the user, updates will stop, and the {@link LocationListener#onProviderDisabled(String)} method will be called. As soon as the provider is enabled again, the {@link LocationListener#onProviderEnabled(String)} method will be called and location updates will start again. <p> The frequency of notification may be controlled using the minTime and minDistance parameters. If minTime is greater than 0, the LocationManager could potentially rest for minTime milliseconds between location updates to conserve power. If minDistance is greater than 0, a location will only be broadcasted if the device moves by minDistance meters. To obtain notifications as frequently as possible, set both parameters to 0. <p> Background services should be careful about setting a sufficiently high minTime so that the device doesn't consume too much power by keeping the GPS or wireless radios on all the time. In particular, values under 60000ms are not recommended. <p> The calling thread must be a {@link android.os.Looper} thread such as the main thread of the calling Activity. milliseconds. This field is only used as a hint to conserve power, and actual time between location updates may be greater or lesser than this value. in meters {@link LocationListener#onLocationChanged} method will be called for each location update
Registers the current activity to be notified periodically by the named provider.  Periodically, the supplied LocationListener will be called with the current Location or with status updates. <p> It may take a while to receive the most recent location. If an immediate location is required, applications may use the {@link #getLastKnownLocation(String)} method. <p> In case the provider is disabled by the user, updates will stop, and the {@link LocationListener#onProviderDisabled(String)} method will be called. As soon as the provider is enabled again, the {@link LocationListener#onProviderEnabled(String)} method will be called and location updates will start again. <p> The frequency of notification may be controlled using the minTime and minDistance parameters. If minTime is greater than 0, the LocationManager could potentially rest for minTime milliseconds between location updates to conserve power. If minDistance is greater than 0, a location will only be broadcasted if the device moves by minDistance meters. To obtain notifications as frequently as possible, set both parameters to 0. <p> Background services should be careful about setting a sufficiently high minTime so that the device doesn't consume too much power by keeping the GPS or wireless radios on all the time. In particular, values under 60000ms are not recommended. <p> The supplied Looper is used to implement the callback mechanism. milliseconds. This field is only used as a hint to conserve power, and actual time between location updates may be greater or lesser than this value. in meters {@link LocationListener#onLocationChanged} method will be called for each location update implement the callback mechanism. If looper is null then the callbacks will be called on the main thread.
Registers the current activity to be notified periodically based on the specified criteria.  Periodically, the supplied LocationListener will be called with the current Location or with status updates. <p> It may take a while to receive the most recent location. If an immediate location is required, applications may use the {@link #getLastKnownLocation(String)} method. <p> In case the provider is disabled by the user, updates will stop, and the {@link LocationListener#onProviderDisabled(String)} method will be called. As soon as the provider is enabled again, the {@link LocationListener#onProviderEnabled(String)} method will be called and location updates will start again. <p> The frequency of notification may be controlled using the minTime and minDistance parameters. If minTime is greater than 0, the LocationManager could potentially rest for minTime milliseconds between location updates to conserve power. If minDistance is greater than 0, a location will only be broadcasted if the device moves by minDistance meters. To obtain notifications as frequently as possible, set both parameters to 0. <p> Background services should be careful about setting a sufficiently high minTime so that the device doesn't consume too much power by keeping the GPS or wireless radios on all the time. In particular, values under 60000ms are not recommended. <p> The supplied Looper is used to implement the callback mechanism. milliseconds. This field is only used as a hint to conserve power, and actual time between location updates may be greater or lesser than this value. in meters appropriate provider and parameters to compute the location {@link LocationListener#onLocationChanged} method will be called for each location update implement the callback mechanism. If looper is null then the callbacks will be called on the main thread. the location services.
Registers the current activity to be notified periodically by the named provider.  Periodically, the supplied PendingIntent will be broadcast with the current Location or with status updates. <p> Location updates are sent with a key of KEY_LOCATION_CHANGED and a Location value. <p> It may take a while to receive the most recent location. If an immediate location is required, applications may use the {@link #getLastKnownLocation(String)} method. <p> The frequency of notification or new locations may be controlled using the minTime and minDistance parameters. If minTime is greater than 0, the LocationManager could potentially rest for minTime milliseconds between location updates to conserve power. If minDistance is greater than 0, a location will only be broadcast if the device moves by minDistance meters. To obtain notifications as frequently as possible, set both parameters to 0. <p> Background services should be careful about setting a sufficiently high minTime so that the device doesn't consume too much power by keeping the GPS or wireless radios on all the time. In particular, values under 60000ms are not recommended. <p> In case the provider is disabled by the user, updates will stop, and an intent will be sent with an extra with key KEY_PROVIDER_ENABLED and a boolean value of false.  If the provider is re-enabled, an intent will be sent with an extra with key KEY_PROVIDER_ENABLED and a boolean value of true and location updates will start again. <p> If the provider's status changes, an intent will be sent with an extra with key KEY_STATUS_CHANGED and an integer value indicating the new status.  Any extras associated with the status update will be sent as well. milliseconds. This field is only used as a hint to conserve power, and actual time between location updates may be greater or lesser than this value. in meters
Registers the current activity to be notified periodically based on the specified criteria.  Periodically, the supplied PendingIntent will be broadcast with the current Location or with status updates. <p> Location updates are sent with a key of KEY_LOCATION_CHANGED and a Location value. <p> It may take a while to receive the most recent location. If an immediate location is required, applications may use the {@link #getLastKnownLocation(String)} method. <p> The frequency of notification or new locations may be controlled using the minTime and minDistance parameters. If minTime is greater than 0, the LocationManager could potentially rest for minTime milliseconds between location updates to conserve power. If minDistance is greater than 0, a location will only be broadcast if the device moves by minDistance meters. To obtain notifications as frequently as possible, set both parameters to 0. <p> Background services should be careful about setting a sufficiently high minTime so that the device doesn't consume too much power by keeping the GPS or wireless radios on all the time. In particular, values under 60000ms are not recommended. <p> In case the provider is disabled by the user, updates will stop, and an intent will be sent with an extra with key KEY_PROVIDER_ENABLED and a boolean value of false.  If the provider is re-enabled, an intent will be sent with an extra with key KEY_PROVIDER_ENABLED and a boolean value of true and location updates will start again. <p> If the provider's status changes, an intent will be sent with an extra with key KEY_STATUS_CHANGED and an integer value indicating the new status.  Any extras associated with the status update will be sent as well. milliseconds. This field is only used as a hint to conserve power, and actual time between location updates may be greater or lesser than this value. in meters appropriate provider and parameters to compute the location
Requests a single location update from the named provider. <p> It may take a while to receive the most recent location. If an immediate location is required, applications may use the {@link #getLastKnownLocation(String)} method. <p> In case the provider is disabled by the user, the update will not be received, and the {@link LocationListener#onProviderDisabled(String)} method will be called. As soon as the provider is enabled again, the {@link LocationListener#onProviderEnabled(String)} method will be called and location updates will start again. <p> The supplied Looper is used to implement the callback mechanism. {@link LocationListener#onLocationChanged} method will be called when the location update is available implement the callback mechanism. If looper is null then the callbacks will be called on the main thread.
Requests a single location update based on the specified criteria. <p> It may take a while to receive the most recent location. If an immediate location is required, applications may use the {@link #getLastKnownLocation(String)} method. <p> In case the provider is disabled by the user, the update will not be received, and the {@link LocationListener#onProviderDisabled(String)} method will be called. As soon as the provider is enabled again, the {@link LocationListener#onProviderEnabled(String)} method will be called and location updates will start again. <p> The supplied Looper is used to implement the callback mechanism. appropriate provider and parameters to compute the location {@link LocationListener#onLocationChanged} method will be called when the location update is available implement the callback mechanism. If looper is null then the callbacks will be called on the current thread. the location services.
Requests a single location update from the named provider. <p> It may take a while to receive the most recent location. If an immediate location is required, applications may use the {@link #getLastKnownLocation(String)} method. <p> Location updates are sent with a key of KEY_LOCATION_CHANGED and a Location value. <p> In case the provider is disabled by the user, the update will not be received, and the {@link LocationListener#onProviderDisabled(String)} method will be called. As soon as the provider is enabled again, the {@link LocationListener#onProviderEnabled(String)} method will be called and location updates will start again.
Requests a single location update based on the specified criteria. <p> It may take a while to receive the most recent location. If an immediate location is required, applications may use the {@link #getLastKnownLocation(String)} method. <p> Location updates are sent with a key of KEY_LOCATION_CHANGED and a Location value. <p> In case the provider is disabled by the user, the update will not be received, and the {@link LocationListener#onProviderDisabled(String)} method will be called. As soon as the provider is enabled again, the {@link LocationListener#onProviderEnabled(String)} method will be called and location updates will start again. appropriate provider and parameters to compute the location
Removes any current registration for location updates of the current activity with the given LocationListener.  Following this call, updates will no longer occur for this listener.
Removes any current registration for location updates of the current activity with the given PendingIntent.  Following this call, updates will no longer occur for this intent.
Sets a proximity alert for the location given by the position (latitude, longitude) and the given radius.  When the device detects that it has entered or exited the area surrounding the location, the given PendingIntent will be used to create an Intent to be fired. <p> The fired Intent will have a boolean extra added with key {@link #KEY_PROXIMITY_ENTERING}. If the value is true, the device is entering the proximity region; if false, it is exiting. <p> Due to the approximate nature of position estimation, if the device passes through the given area briefly, it is possible that no Intent will be fired.  Similarly, an Intent could be fired if the device passes very close to the given area but does not actually enter it. <p> After the number of milliseconds given by the expiration parameter, the location manager will delete this proximity alert and no longer monitor it.  A value of -1 indicates that there should be no expiration time. <p> In case the screen goes to sleep, checks for proximity alerts happen only once every 4 minutes. This conserves battery life by ensuring that the device isn't perpetually awake. <p> Internally, this method uses both {@link #NETWORK_PROVIDER} and {@link #GPS_PROVIDER}. alert region alert region alert region, in meters or -1 to indicate no expiration fire when entry to or exit from the alert region is detected providers.
Removes the proximity alert with the given PendingIntent. proximity alerts
Returns the current enabled/disabled status of the given provider. If the user has enabled this provider in the Settings menu, true is returned otherwise false is returned
Returns a Location indicating the data from the last known location fix obtained from the given provider.  This can be done without starting the provider.  Note that this location could be out-of-date, for example if the device was turned off and moved to another location. <p> If the provider is currently disabled, null is returned.
Creates a mock location provider and adds it to the set of active providers. or the {@link android.provider.Settings.Secure#ALLOW_MOCK_LOCATION Settings.Secure.ALLOW_MOCK_LOCATION} system setting is not enabled
Removes the mock location provider with the given name. or the {@link android.provider.Settings.Secure#ALLOW_MOCK_LOCATION Settings.Secure.ALLOW_MOCK_LOCATION}} system setting is not enabled
Sets a mock location for the given provider.  This location will be used in place of any actual location from the provider. or the {@link android.provider.Settings.Secure#ALLOW_MOCK_LOCATION Settings.Secure.ALLOW_MOCK_LOCATION}} system setting is not enabled
Removes any mock location associated with the given provider. or the {@link android.provider.Settings.Secure#ALLOW_MOCK_LOCATION Settings.Secure.ALLOW_MOCK_LOCATION}} system setting is not enabled
Sets a mock enabled value for the given provider.  This value will be used in place of any actual value from the provider. or the {@link android.provider.Settings.Secure#ALLOW_MOCK_LOCATION Settings.Secure.ALLOW_MOCK_LOCATION}} system setting is not enabled
Removes any mock enabled value associated with the given provider. or the {@link android.provider.Settings.Secure#ALLOW_MOCK_LOCATION Settings.Secure.ALLOW_MOCK_LOCATION}} system setting is not enabled
Sets mock status values for the given provider.  These values will be used in place of any actual values from the provider. or the {@link android.provider.Settings.Secure#ALLOW_MOCK_LOCATION Settings.Secure.ALLOW_MOCK_LOCATION}} system setting is not enabled
Removes any mock status values associated with the given provider. or the {@link android.provider.Settings.Secure#ALLOW_MOCK_LOCATION Settings.Secure.ALLOW_MOCK_LOCATION}} system setting is not enabled
Adds a GPS status listener.
Removes a GPS status listener.
Adds an NMEA listener.
Removes an NMEA listener.
Retrieves information about the current status of the GPS engine. This should only be called from the {@link GpsStatus.Listener#onGpsStatusChanged} callback to ensure that the data is copied atomically. The caller may either pass in a {@link GpsStatus} object to set with the latest status information, or pass null to create a new {@link GpsStatus} object.
Sends additional commands to a location provider. Can be used to support provider specific extensions to the Location Manager API The provider may optionally fill the extras Bundle with results from the command.
Used by NetInitiatedActivity to report user response for network initiated GPS fix requests. {@hide}
Constructs a LocationProvider with the given name.   Provider names must consist only of the characters [a-zA-Z0-9]. {@hide}
Returns the name of this provider.
Returns true if this provider meets the given criteria, false otherwise.
Class constructor. <p> The application must catch exceptions when creating an AcousticEchoCanceler as the constructor is not guarantied to succeed: <ul> <li>IllegalArgumentException is thrown if the device does not implement an AEC</li> <li>UnsupportedOperationException is thrown is the resources allocated to audio pre-procesing are currently exceeded.</li> </ul> will be applied to the AudioRecord with the same audio session.
-------------------------------------------------------------------------- Constructor, Finalize -------------------- Class constructor.
Releases the native AudioEffect resources. It is a good practice to release the effect engine when not in use as control can be returned to other applications or the native resources released.
Get the effect descriptor.
Query all effects available on the platform. Returns an array of {@link android.media.audiofx.AudioEffect.Descriptor} objects
Query all audio pre processing effects applied to the AudioRecord with the supplied audio session ID. Returns an array of {@link android.media.audiofx.AudioEffect.Descriptor} objects.
Enable or disable the effect. Creating an audio effect does not automatically apply this effect on the audio source. It creates the resources necessary to process this effect but the audio signal is still bypassed through the effect engine. Calling this method will make that the effect is actually applied or not to the audio content being played in the corresponding audio session.
Set effect parameter. The setParameter method is provided in several forms addressing most common parameter formats. This form is the most generic one where the parameter and its value are both specified as an array of bytes. The parameter and value type and length are therefore totally free. For standard effect defined by OpenSL ES, the parameter format and values must match the definitions in the corresponding OpenSL ES interface.
Set effect parameter. The parameter and its value are integers.
Set effect parameter. The parameter is an integer and the value is a short integer.
Set effect parameter. The parameter is an integer and the value is an array of bytes.
Set effect parameter. The parameter is an array of 1 or 2 integers and the value is also an array of 1 or 2 integers
Set effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of 1 or 2 short integers
Set effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of bytes
Get effect parameter. The getParameter method is provided in several forms addressing most common parameter formats. This form is the most generic one where the parameter and its value are both specified as an array of bytes. The parameter and value type and length are therefore totally free. {@link #ERROR_BAD_VALUE}, {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure.
Get effect parameter. The parameter is an integer and the value is an array of bytes.
Get effect parameter. The parameter is an integer and the value is an array of 1 or 2 integers In case of success, returns the number of meaningful integers in value array.
Get effect parameter. The parameter is an integer and the value is an array of 1 or 2 short integers In case of success, returns the number of meaningful short integers in value array.
Get effect parameter. The parameter is an array of 1 or 2 integers and the value is also an array of 1 or 2 integers In case of success, the returns the number of meaningful integers in value array.
Get effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of 1 or 2 short integers In case of success, returns the number of meaningful short integers in value array.
Get effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of bytes
Send a command to the effect engine. This method is intended to send proprietary commands to a particular effect implementation. In case of success, returns the number of meaningful bytes in reply array. In case of failure, the returned value is negative and implementation specific.
Returns effect unique identifier. This system wide unique identifier can be used to attach this effect to a MediaPlayer or an AudioTrack when the effect is an auxiliary effect (Reverb)
Returns effect enabled state
Checks if this AudioEffect object is controlling the effect engine.
-------------------------------------------------------------------------- Initialization / configuration -------------------- Sets the listener AudioEffect notifies when the effect engine is enabled or disabled.
Sets the listener AudioEffect notifies when the effect engine control is taken or returned.
Sets the listener AudioEffect notifies when a parameter is changed.
Convenience method for the creation of the native event handler It is called only when a non-null event listener is set. precondition: mNativeEventHandler is null
Class constructor. <p> The application must catch exceptions when creating an AutomaticGainControl as the constructor is not guarantied to succeed: <ul> <li>IllegalArgumentException is thrown if the device does not implement an AGC</li> <li>UnsupportedOperationException is thrown is the resources allocated to audio pre-procesing are currently exceeded.</li> </ul> will be applied to the AudioRecord with the same audio session.
Class constructor. engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. attached to the MediaPlayer or AudioTrack in the same audio session.
Indicates whether setting strength is supported. If this method returns false, only one strength is supported and the setStrength() method always rounds to that value.
Sets the strength of the bass boost effect. If the implementation does not support per mille accuracy for setting the strength, it is allowed to round the given strength to the nearest supported value. You can use the {@link #getRoundedStrength()} method to query the (possibly rounded) value that was actually set. where 0 per mille designates the mildest effect and 1000 per mille designates the strongest.
Gets the current strength of the effect. mille designates the mildest effect and 1000 per mille the strongest
Registers an OnParameterChangeListener interface.
Settings class constructor from a key=value; pairs formatted string. The string is typically returned by Settings.toString() method.
Gets the bass boost properties. This method is useful when a snapshot of current bass boost settings must be saved by the application.
Sets the bass boost properties. This method is useful when bass boost settings have to be applied from a previous backup.
Class constructor. EnvironmentalReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. is not 0, the EnvironmentalReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the EnvironmentalReverb will apply to the output mix. As the EnvironmentalReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output.
Sets the master volume level of the environmental reverb effect.
Gets the master volume level of the environmental reverb effect.
Sets the volume level at 5 kHz relative to the volume level at low frequencies of the overall reverb effect. <p>This controls a low-pass filter that will reduce the level of the high-frequency.
Gets the room HF level.
Sets the time taken for the level of reverberation to decay by 60 dB.
Gets the decay time.
Sets the ratio of high frequency decay time (at 5 kHz) relative to the decay time at low frequencies. [100, 2000]. A ratio of 1000 indicates that all frequencies decay at the same rate.
Gets the ratio of high frequency decay time (at 5 kHz) relative to low frequencies.
Sets the volume level of the early reflections. <p>This level is combined with the overall room level (set using {@link #setRoomLevel(short)}).
Gets the volume level of the early reflections.
Sets the delay time for the early reflections. <p>This method sets the time between when the direct path is heard and when the first reflection is heard.
Gets the reflections delay.
Sets the volume level of the late reverberation. <p>This level is combined with the overall room level (set using {@link #setRoomLevel(short)}).
Gets the reverb level.
Sets the time between the first reflection and the reverberation.
Gets the reverb delay.
Sets the echo density in the late reverberation decay. <p>The scale should approximately map linearly to the perceived change in reverberation. [0, 1000]. A value of 1000 o/oo indicates a smooth reverberation decay. Values below this level give a more <i>grainy</i> character.
Gets diffusion level.
Controls the modal density of the late reverberation decay. <p> The scale should approximately map linearly to the perceived change in reverberation. A lower density creates a hollow sound that is useful for simulating small reverberation spaces such as bathrooms. A value of 1000 o/oo indicates a natural sounding reverberation. Values below this level produce a more colored effect.
Gets the density level.
Gets the environmental reverb properties. This method is useful when a snapshot of current reverb settings must be saved by the application.
Sets the environmental reverb properties. This method is useful when reverb settings have to be applied from a previous backup.
Class constructor. engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. attached to the MediaPlayer or AudioTrack in the same audio session.
Gets the number of frequency bands supported by the Equalizer engine.
Gets the level range for use by {@link #setBandLevel(short,short)}. The level is expressed in milliBel. limit of the range, the second element the upper limit.
Sets the given equalizer band to the given gain value. from 0 and ends at (number of bands - 1). will define the maximum and minimum values.
Gets the gain set for the given equalizer band. from 0 and ends at (number of bands - 1).
Gets the center frequency of the given band. starts from 0 and ends at (number of bands - 1).
Gets the frequency range of the given frequency band. starts from 0 and ends at (number of bands - 1). lower limit of the range, the second element the upper limit.
Gets the band that has the most effect on the given frequency.
Gets current preset.
Sets the equalizer according to the given preset. number of presets-1].
Gets the total number of presets the equalizer supports. The presets will have indices [0, number of presets-1].
Gets the preset name based on the index.
Gets the equalizer properties. This method is useful when a snapshot of current equalizer settings must be saved by the application.
Sets the equalizer properties. This method is useful when equalizer settings have to be applied from a previous backup.
Class constructor. <p> The application must catch exceptions when creating an NoiseSuppressor as the constructor is not guarantied to succeed: <ul> <li>IllegalArgumentException is thrown if the device does not implement an NS</li> <li>UnsupportedOperationException is thrown is the resources allocated to audio pre-procesing are currently exceeded.</li> </ul> will be applied to the AudioRecord with the same audio session.
Class constructor. PresetReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. is not 0, the PresetReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the PresetReverb will apply to the output mix. As the PresetReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output.
Enables a preset on the reverb. <p>The reverb PRESET_NONE disables any reverb from the current output but does not free the resources associated with the reverb. For an application to signal to the implementation to free the resources, it must call the release() method. e.g. {@link #PRESET_SMALLROOM}
Gets current reverb preset.
Gets the preset reverb properties. This method is useful when a snapshot of current preset reverb settings must be saved by the application.
Sets the preset reverb properties. This method is useful when preset reverb settings have to be applied from a previous backup.
Class constructor. engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. be attached to the MediaPlayer or AudioTrack in the same audio session.
Sets the strength of the virtualizer effect. If the implementation does not support per mille accuracy for setting the strength, it is allowed to round the given strength to the nearest supported value. You can use the {@link #getRoundedStrength()} method to query the (possibly rounded) value that was actually set. where 0 per mille designates the mildest effect and 1000 per mille designates the strongest.
Gets the virtualizer properties. This method is useful when a snapshot of current virtualizer settings must be saved by the application.
Sets the virtualizer properties. This method is useful when virtualizer settings have to be applied from a previous backup.
-------------------------------------------------------------------------- Constructor, Finalize -------------------- Class constructor. is not 0, the visualizer will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the Visualizer will apply to the output mix.
Releases the native Visualizer resources. It is a good practice to release the visualization engine when not in use.
Enable or disable the visualization engine. {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure.
Get current activation state of the visualizer.
Sets the capture size, i.e. the number of bytes returned by {@link #getWaveForm(byte[])} and {@link #getFft(byte[])} methods. The capture size must be a power of 2 in the range returned by {@link #getCaptureSizeRange()}. This method must not be called when the Visualizer is enabled. {@link #ERROR_BAD_VALUE} in case of failure.
Returns current capture size.
Returns the sampling rate of the captured audio.
Returns a waveform capture of currently playing audio content. The capture consists in a number of consecutive 8-bit (unsigned) mono PCM samples equal to the capture size returned by {@link #getCaptureSize()}. <p>This method must be called when the Visualizer is enabled. {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure.
Returns a frequency capture of currently playing audio content. <p>This method must be called when the Visualizer is enabled. <p>The capture is an 8-bit magnitude FFT, the frequency range covered being 0 (DC) to half of the sampling rate returned by {@link #getSamplingRate()}. The capture returns the real and imaginary parts of a number of frequency points equal to half of the capture size plus one. <p>Note: only the real part is returned for the first point (DC) and the last point (sampling frequency / 2). <p>The layout in the returned byte array is as follows: <ul> <li> n is the capture size returned by getCaptureSize()</li> <li> Rfk, Ifk are respectively  the real and imaginary parts of the kth frequency component</li> <li> If Fs is the sampling frequency retuned by getSamplingRate() the kth frequency is: (k*Fs)/(n/2) </li> </ul> <table border="0" cellspacing="0" cellpadding="0"> <tr><td>Index </p></td> <tr><td>Data </p></td> </table> {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure.
Registers an OnDataCaptureListener interface and specifies the rate at which the capture should be updated as well as the type of capture requested. <p>Call this method with a null listener to stop receiving the capture updates. method will be called on the OnDataCaptureListener interface. called on the OnDataCaptureListener interface. {@link #ERROR_NO_INIT} or {@link #ERROR_BAD_VALUE} in case of failure.
Get the id of the audio track
Get the filename for this audio track source.
Get the number of audio channels in the source of this audio track
Get the audio codec of the source of this audio track {@link android.media.videoeditor.MediaProperties}
Get the audio sample frequency of the audio track
Get the audio bitrate of the audio track
Set the volume of this audio track as percentage of the volume in the original audio source file.
Get the volume of the audio track as percentage of the volume in the original audio source file.
Mute/Unmute the audio track
Check if the audio track is muted
Get the start time of this audio track relative to the storyboard timeline.
Get the audio track duration
Get the audio track timeline duration
Sets the start and end marks for trimming an audio track
Get the boundary begin time
Get the boundary end time
Enable the loop mode for this audio track. Note that only one of the audio tracks in the timeline can have the loop mode enabled. When looping is enabled the samples between mBeginBoundaryTimeMs and mEndBoundaryTimeMs are looped.
Disable the loop mode
Check if looping is enabled
Disable the audio duck effect
Enable ducking by specifying the required parameters
Check if ducking is enabled
Get the ducking threshold.
Get the ducked track volume.
This API allows to generate a file containing the sample volume levels of this audio track object. This function may take significant time and is blocking. The filename can be retrieved using getAudioWaveformFilename().
Get the audio waveform file name if extractAudioWaveform was successful.
Delete the waveform file
Get the audio waveform data.
Get the id of the effect.
Set the duration of the effect. If a preview or export is in progress, then this change is effective for next preview or export session.
Get the duration of the effect
Set start time of the effect. If a preview or export is in progress, then this change is effective for next preview or export session.
Get the start time of the effect
Set the start time and duration
Get the media item owner.
Get the effect type.
Get the color if effect type is TYPE_COLOR or TYPE_GRADIENT.
Get the start rectangle.
Get the end rectangle.
Get the KenBurn effect start and end rectangle coordinates rectangle coordinates rectangle coordinates
Method which returns the current VIDEOEDITOR version
Invalidates the PCM file
Release the native helper object
Populates the Effect Settings in EffectSettings
Populates the Overlay Settings in EffectSettings
get Video Editor aspect ratio
Sets the export audio codec
Sets the export video codec
Sets the audio regenerate flag
Gets the audio regenerate flag
Maps the average frame rate to one of the defined enum values
Helper function to adjust the effect or overlay start time depending on the begin and end boundary time of meddia item
Generates the clip for preview or export a clip for preview or export
Init function to initialiZe the  ClipSettings reference to default values
Populates the settings for generating an effect clip needs to be generated clips data
Populates the settings for generating a Ken Burn effect clip needs to be generated
Calculates the output resolution for transition clip
Populates the settings for generating an transition clip clip specific data
Populates effects and overlays in EffectSettings structure and also adjust the start time and duration of effects and overlays w.r.t to total story board time
Adjusts the media item boundaries for use in export or preview
Generates the transition if transition is present and is in invalidated state
Sets the volume for current media item in clip properties array
Checks for odd size image width and height
Populates the media item properties and calculates the maximum height among all the clips than all previous clips height
Populates the background music track properties
Calculates all the effects in all the media items in media items list
This function is responsible for forming clip settings array and clip properties array including transition clips and effect settings for preview purpose or export.
This function is responsible for starting the preview the callback is needed
This function is responsible for stopping the preview
This function is responsible for rendering a single frame from the complete story board on the surface and rendered
This function is responsible for rendering a single frame from a single media item on the surface and rendered
This function sets the flag to invalidate the preview array and for generating the preview again
Calculates the aspect ratio from widht and height
Maps the file type used in native layer to file type used in JAVA layer
Maps the video codec type used in native layer to video codec type used in JAVA layer
Maps the audio codec type used in native layer to audio codec type used in JAVA layer
Returns the frame rate as integer
Maps the file type used in JAVA layer to file type used in native layer
Maps the rendering mode used in native layer to rendering mode used in JAVA layer
Maps the transition behavior used in JAVA layer to transition behavior used in native layer
Maps the transition slide direction used in JAVA layer to transition slide direction used in native layer in JAVA layer
Maps the effect color type used in JAVA layer to effect color type used in native layer
Calculates video resolution for output clip based on clip's height and aspect ratio of storyboard
Calculate a reasonable bitrate for generating intermediate clips.
This method is responsible for exporting a movie
This methods takes care of stopping the Export process
This method extracts a frame from the input file and returns the frame as a bitmap. See getPixelsList() for more information.
This method extracts a list of frame from the input file and returns the frame in bitmap array
This method generates the audio graph
Grab the semaphore which arbitrates access to the editor
Release the semaphore which arbitrates access to the editor
in RGB format
This method will adjust the duration of bounding transitions, effects and overlays if the current duration of the transactions become greater than the maximum allowable duration.
Invalidate the begin transition if any effects and overlays overlap with the begin transition.
Invalidate the end transition if any effects and overlays overlap with the end transition.
Adjust the start time and/or duration of effects.
Adjust the start time and/or duration of overlays.
This function get the proper width by given aspect ratio and height.
This function invalidates the rgb image clip,ken burns effect clip, and scaled image clip
needed to generate the clip
generated clip name
properties data populated.If the image has Ken Burns effect applied, then file path contains generated image clip name with Ken Burns effect
Resize a bitmap to the specified width and height
If aspect ratio of the MediaItem is different from the aspect ratio of the editor then this API controls the rendering mode.
Add the specified effect to this media item. Note that certain types of effects cannot be applied to video and to image media items. For example in certain implementation a Ken Burns implementation cannot be applied to video media item. This method invalidates transition video clips if the effect overlaps with the beginning and/or the end transition.
Remove the effect with the specified id. This method invalidates a transition video clip if the effect overlaps with a transition.
Set the filepath of the generated image clip when the effect is added.
Get the filepath of the generated image clip when the effect is added.
Find the effect with the specified id
Get the list of effects.
Add an overlay to the storyboard. This method invalidates a transition video clip if the overlay overlaps with a transition.
Remove the overlay with the specified id. This method invalidates a transition video clip if the overlay overlaps with a transition.
Find the overlay with the specified id
Get the list of overlays associated with this media item Note that if any overlay source files are not accessible anymore, this method will still provide the full list of overlays.
Create a thumbnail at specified time in a video stream in Bitmap format
This is for compatibility, only used in tests.
Check if two items overlap in time
Adjust the duration transitions.
Initialises ClipSettings fields to default value {@link android.media.videoeditor.MediaArtistNativeHelper.ClipSettings}
{@link android.media.videoeditor.MediaArtistNativeHelper.ClipSettings}
Generates a black frame to be used for generating begin transition at first media item in storyboard or end transition at last media item in storyboard {@link android.media.videoeditor.MediaArtistNativeHelper.ClipSettings}
Invalidates the blank frame generated
Get the supported resolutions for the specified aspect ratio.
Sets the start and end marks for trimming a video media item. This method will adjust the duration of bounding transitions, effects and overlays if the current duration of the transactions become greater than the maximum allowable duration.
Render a frame according to the playback (in the native aspect ratio) for the specified media item. All effects and overlays applied to the media item are ignored. The extract boundaries are also ignored. This method can be used to playback frames when implementing trimming functionality.
This API allows to generate a file containing the sample volume levels of the Audio track of this media item. This function may take significant time and is blocking. The file can be retrieved using getAudioWaveformFilename().
Get the audio waveform file name if {@link #extractAudioWaveform()} was successful. The file format is as following: <ul> <li>first 4 bytes provide the number of samples for each value, as big-endian signed</li> <li>4 following bytes is the total number of values in the file, as big-endian signed</li> <li>all values follow as bytes Name is unique.</li> </ul>
Invalidate the AudioWaveform File
Set volume of the Audio track of this mediaItem
Get the volume value of the audio track as percentage. Call of this method before calling setVolume will always return 100%
{@link android.media.videoeditor.MediaArtistNativeHelper.ClipSettings}
Get the overlay ID.
Get the duration of overlay.
If a preview or export is in progress, then this change is effective for next preview or export session.
Get the start time of overlay.
Set the start time for the overlay. If a preview or export is in progress, then this change is effective for next preview or export session.
Set a user attribute
Get the current user attributes set.
Constructor for an OverlayFrame
Constructor for an OverlayFrame. This constructor can be used to restore the overlay after it was saved internally by the video editor.
Get the overlay bitmap.
Get the overlay bitmap.
Set the overlay bitmap.
Get the file name of this overlay
Set the file name of this overlay
Save the overlay to the project folder
Get the OverlayFrame Height
Get the OverlayFrame Width
Set the OverlayFrame Height
Set the OverlayFrame Width
Set the resized RGB widht and height
Get the resized RGB Height
Get the resized RGB Width
Delete the overlay files
Delete the overlay related files
Get the ID of the transition.
Get the media item at the end of which the transition is applied.
Get the media item at the beginning of which the transition is applied.
Set the duration of the transition.
Get the duration of the transition.
The duration of a transition cannot be greater than half of the minimum duration of the bounding media items.
Get the behavior of the transition.
Get the transition data. {@link android.media.videoeditor.MediaArtistNativeHelper.TransitionSettings}
Checks if the effect and overlay applied on a media item overlaps with the transition on media item. associated with current transition)for which the effect clip should be generated
Generate the video clip for the specified transition. This method may block for a significant amount of time. Before the method completes execution it sets the mFilename to the name of the newly generated transition video clip file.
Set the transition filename.
Get the transition filename.
Remove any resources associated with this transition
Check if the transition is generated.
Get the blending percentage
Get the filename of the mask.
Check if the alpha blending direction is inverted.
Get the sliding direction.
Default constructor
Releases the bitmap
Check if the overlay needs to be rendered
Store the overlay data
Clear the overlay
Render the overlay by either clearing it or by rendering the overlay bitmap with the specified rendering mode
This is the factory method for creating a new VideoEditor instance.
This is the factory method for instantiating a VideoEditor from the internal state previously saved with the {@link VideoEditor#save(String)} method.
Force updates the timeline duration
the project form XML
Parse the media item
Parse the transition
Parse the overlay
Parse the effect
Parse the audio track
Remove transitions associated with the specified media item
Remove the transition before this media item
Remove the transition after this media item
Compute the duration
Generate the project thumbnail
Clears the preview surface and needs to be cleared.
Tries to grab the semaphore with a specified time out which arbitrates access to the editor
Dumps the heap memory usage information to file
Returns the videoeditor profile
Returns the supported profile by given video codec
Returns the supported level by given video codec
Private constructor called by JNI
Constructor The file format is as following: <ul> <li>first 4 bytes provide the number of samples for each value, as big-endian signed</li> <li>4 following bytes is the total number of values in the file, as big-endian signed</li> <li>then, all values follow as bytes</li> </ul>
Create a new AmrInputStream, which converts 16 bit PCM to AMR
Construct an AsyncPlayer object.
Start playing the sound.  It will actually start playing at some point in the future.  There are no guarantees about latency here. Calling this before another audio file is done playing will stop that one and start the new one.
Stop a previously played sound.  It can't be played again or unpaused at this point.  Calling this multiple times has no ill effects.
We want to hold a wake lock while we do the prepare and play.  The stop probably is optional, but it won't hurt to have it too.  The problem is that if you start a sound while you're holding a wake lock (e.g. an alarm starting a notification), you want the sound to play, but if the CPU turns off before mThread gets to work, it won't.  The simplest way to deal with this is to make it so there is a wake lock held while the thread is starting or running.  You're going to need the WAKE_LOCK permission if you're going to call this. This must be called before the first time play is called.
Adjusts the volume of a particular stream by one step in a direction. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. {@link #STREAM_SYSTEM}, {@link #STREAM_RING}, {@link #STREAM_MUSIC} or {@link #STREAM_ALARM}
Adjusts the volume of the most relevant stream. For example, if a call is active, it will have the highest priority regardless of if the in-call screen is showing. Another example, if music is playing in the background and a call is not active, the music stream will be adjusted. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
Adjusts the volume of the most relevant stream, or the given fallback stream. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
Returns the current ringtone mode.
Checks valid ringer mode values.
Returns the maximum volume index for a particular stream.
Returns the current volume index for a particular stream.
Get last audible volume before stream was muted.
Sets the ringer mode. <p> Silent mode will mute the volume and will not vibrate. Vibrate mode will mute the volume and vibrate. Normal mode will be audible and may vibrate according to user settings.
Sets the volume index for a particular stream.
Solo or unsolo a particular stream. All other streams are muted. <p> The solo command is protected against client process death: if a process with an active solo request on a stream dies, all streams that were muted because of this request will be unmuted automatically. <p> The solo requests for a given stream are cumulative: the AudioManager can receive several solo requests from one or more clients and the stream will be unsoloed only when the same number of unsolo requests are received. <p> For a better user experience, applications MUST unsolo a soloed stream in onPause() and solo is again in onResume() if appropriate.
Mute or unmute an audio stream. <p> The mute command is protected against client process death: if a process with an active mute request on a stream dies, this stream will be unmuted automatically. <p> The mute requests for a given stream are cumulative: the AudioManager can receive several mute requests from one or more clients and the stream will be unmuted only when the same number of unmute requests are received. <p> For a better user experience, applications MUST unmute a muted stream in onPause() and mute is again in onResume() if appropriate. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
get stream mute state.
forces the stream controlled by hard volume keys specifying streamType == -1 releases control to the logic.
Returns whether a particular type should vibrate according to user settings and the current ringer mode. <p> This shouldn't be needed by most clients that use notifications to vibrate. The notification manager will not vibrate if the policy doesn't allow it, so the client should always set a vibrate pattern and let the notification manager control whether or not to actually vibrate.
Returns whether the user's vibrate setting for a vibrate type. <p> This shouldn't be needed by most clients that want to vibrate, instead see {@link #shouldVibrate(int)}.
Sets the setting for when the vibrate type should vibrate. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
Sets the speakerphone on or off. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
Checks whether the speakerphone is on or off.
Indicates if current platform supports use of SCO for off call use cases. Application wanted to use bluetooth SCO audio when the phone is not in call must first call thsi method to make sure that the platform supports this feature.
Start bluetooth SCO audio connection. <p>Requires Permission: {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS}. <p>This method can be used by applications wanting to send and received audio to/from a bluetooth SCO headset while the phone is not in call. <p>As the SCO connection establishment can take several seconds, applications should not rely on the connection to be available when the method returns but instead register to receive the intent {@link #ACTION_SCO_AUDIO_STATE_UPDATED} and wait for the state to be {@link #SCO_AUDIO_STATE_CONNECTED}. <p>As the ACTION_SCO_AUDIO_STATE_UPDATED intent is sticky, the application can check the SCO audio state before calling startBluetoothSco() by reading the intent returned by the receiver registration. If the state is already CONNECTED, no state change will be received via the intent after calling startBluetoothSco(). It is however useful to call startBluetoothSco() so that the connection stays active in case the current initiator stops the connection. <p>Unless the connection is already active as described above, the state will always transition from DISCONNECTED to CONNECTING and then either to CONNECTED if the connection succeeds or back to DISCONNECTED if the connection fails (e.g no headset is connected). <p>When finished with the SCO connection or if the establishment fails, the application must call {@link #stopBluetoothSco()} to clear the request and turn down the bluetooth connection. <p>Even if a SCO connection is established, the following restrictions apply on audio output streams so that they can be routed to SCO headset: <ul> <li> the stream type must be {@link #STREAM_VOICE_CALL} </li> <li> the format must be mono </li> <li> the sampling must be 16kHz or 8kHz </li> </ul> <p>The following restrictions apply on input streams: <ul> <li> the format must be mono </li> <li> the sampling must be 8kHz </li> </ul> <p>Note that the phone application always has the priority on the usage of the SCO connection for telephony. If this method is called while the phone is in call it will be ignored. Similarly, if a call is received or sent while an application is using the SCO connection, the connection will be lost for the application and NOT returned automatically when the call ends.
Stop bluetooth SCO audio connection. <p>Requires Permission: {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS}. <p>This method must be called by applications having requested the use of bluetooth SCO audio with {@link #startBluetoothSco()} when finished with the SCO connection or if connection fails.
Request use of Bluetooth SCO headset for communications. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
Checks whether communications use Bluetooth SCO.
Checks whether A2DP audio routing to the Bluetooth headset is on or off.
Checks whether a wired headset is connected or not. <p>This is not a valid indication that audio playback is actually over the wired headset as audio routing depends on other conditions.
Sets the microphone mute on or off. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
Checks whether the microphone mute is on or off.
Sets the audio mode. <p> The audio mode encompasses audio routing AND the behavior of the telephony layer. Therefore this method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. In particular, the {@link #MODE_IN_CALL} mode should only be used by the telephony application when it places a phone call, as it will cause signals from the radio layer to feed the platform mixer.
Returns the current audio mode.
Checks whether any music is active.
Sets a generic audio configuration parameter. The use of these parameters are platform dependant, see libaudio ** Temporary interface - DO NOT USE TODO: Replace with a more generic key:value get/set mechanism param key   name of parameter to set. Must not be null. param value value of parameter. Must not be null.
Sets a variable number of parameter values to audio hardware.
Sets a varaible number of parameter values to audio hardware.
Plays a sound effect (Key clicks, lid open/close...) NOTE: This version uses the UI settings to determine whether sounds are heard or not.
Plays a sound effect (Key clicks, lid open/close...) The volume value is a raw scalar so UI controls should be scaled logarithmically. If a volume of -1 is specified, the AudioManager.STREAM_MUSIC stream volume minus 3dB will be used. NOTE: This version is for applications that have their own settings panel for enabling and controlling volume.
Settings has an in memory cache, so this is fast.
Load Sound effects. This method must be called when sound effects are enabled.
Unload Sound effects. This method can be called to free some memory when sound effects are disabled.
Registers a listener to be called when audio focus changes. Calling this method is optional before calling {@link #requestAudioFocus(OnAudioFocusChangeListener, int, int)}, as it will register the listener as well if it wasn't registered already.
Causes the specified listener to not be called anymore when focus is gained or lost.
Request audio focus. Send a request to obtain the audio focus
Abandon audio focus. Causes the previous focus owner, if any, to receive focus.
==================================================================== Remote Control Register a component to be the sole receiver of MEDIA_BUTTON intents.
no-op if (pi == null) or (eventReceiver == null)
Unregister the receiver of MEDIA_BUTTON intents.
Registers the remote control client for providing information to display on the remote controls.
Unregisters the remote control client that was providing information to display on the remote controls.
Registers a remote control display that will be sent information by remote control clients.
Unregisters a remote control display that was sent information by remote control clients.
Sets the artwork size a remote control display expects when receiving bitmaps. useless to send artwork. useless to send artwork.
Reload audio settings. This method is called by Settings backup agent when audio settings are restored and causes the AudioService to read and apply restored settings.
Checks whether the phone is in silent mode, with or without vibrate.
Return the enabled devices for the specified output stream type. The implementation may support additional device codes beyond those listed, so the application should ignore any bits which it does not recognize. Note that the information may be imprecise when the implementation cannot distinguish whether a particular device is enabled. {@hide}
--------------------------------------------------------- Constructor, Finalize -------------------- Class constructor. rate that is guaranteed to work on all devices, but other rates such as 22050, 16000, and 11025 may work on some devices. See {@link AudioFormat#CHANNEL_IN_MONO} and {@link AudioFormat#CHANNEL_IN_STEREO}.  {@link AudioFormat#CHANNEL_IN_MONO} is guaranteed to work on all devices. See {@link AudioFormat#ENCODING_PCM_16BIT} and {@link AudioFormat#ENCODING_PCM_8BIT} to during the recording. New audio data can be read from this buffer in smaller chunks than this size. See {@link #getMinBufferSize(int, int, int)} to determine the minimum required buffer size for the successful creation of an AudioRecord instance. Using values smaller than getMinBufferSize() will result in an initialization failure.
Convenience method for the constructor's parameter checks. This is where constructor IllegalArgumentException-s are thrown postconditions:
Convenience method for the contructor's audio buffer size check. preconditions: postcondition:
Releases the native AudioRecord resources. The object can no longer be used and the reference should be set to null after a call to release()
-------------------------------------------------------------------------- Getters -------------------- Returns the configured audio data sample rate in Hz
Returns the audio recording source.
Returns the configured audio data format. See {@link AudioFormat#ENCODING_PCM_16BIT} and {@link AudioFormat#ENCODING_PCM_8BIT}.
Returns the configured channel configuration. See {@link AudioFormat#CHANNEL_IN_MONO} and {@link AudioFormat#CHANNEL_IN_STEREO}.
Returns the configured number of channels.
Returns the state of the AudioRecord instance. This is useful after the AudioRecord instance has been created to check if it was initialized properly. This ensures that the appropriate hardware resources have been acquired.
Returns the recording state of the AudioRecord instance.
Returns the notification marker position expressed in frames.
Returns the notification update period expressed in frames.
Returns the minimum buffer size required for the successful creation of an AudioRecord object. Note that this size doesn't guarantee a smooth recording under load, and higher values should be chosen according to the expected frequency at which the AudioRecord instance will be polled for new data. See {@link AudioFormat#CHANNEL_IN_MONO} and {@link AudioFormat#CHANNEL_IN_STEREO} See {@link AudioFormat#ENCODING_PCM_16BIT}. hardware, or an invalid parameter was passed, or {@link #ERROR} if the implementation was unable to query the hardware for its output properties, or the minimum buffer size expressed in bytes. configuration values.
Returns the audio session ID.
--------------------------------------------------------- Transport control methods -------------------- Starts recording from the AudioRecord instance.
Stops recording.
--------------------------------------------------------- Audio data supply -------------------- Reads audio data from the audio hardware for recording into a buffer.
Reads audio data from the audio hardware for recording into a buffer.
Reads audio data from the audio hardware for recording into a direct buffer. If this buffer is not a direct buffer, this method will always return 0.
-------------------------------------------------------------------------- Initialization / configuration -------------------- Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update.
Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update. Use this method to receive AudioRecord events in the Handler associated with another thread than the one in which you created the AudioTrack instance.
Sets the marker position at which the listener is called, if set with {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener)} or {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler)}. {@link #ERROR_INVALID_OPERATION}
Sets the period at which the listener is called, if set with {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener)} or {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler)}.
--------------------------------------------------------- Utility methods ------------------
UI update and Broadcast Intent
Sets the stream state's index, and posts a message to set system volume. This will not call out to the UI. Assumes a valid stream type. as the current volume.
must be called synchronized on mSetModeDeathHandlers setModeInt() returns a valid PID if the audio mode was successfully set to any mode other than NORMAL.
pre-condition: oldMode != newMode
Loads samples into the soundpool. This method must be called at when sound effects are enabled
Unloads samples from the sound pool. This method can be called to free some memory when sound effects are disabled.
Checks if the adjustment should change ringer mode instead of just adjusting volume. If so, this will set the proper ringer mode and volume indices on the stream states.
Message helper methods
Helper function: Display in the log the current entries in the audio focus stack
Helper function: Called synchronized on mAudioFocusLock Remove a focus listener from the focus stack. focus, notify the next item in the stack it gained focus.
Helper function: Called synchronized on mAudioFocusLock Remove focus listeners from the focus stack for a particular client.
Helper function: Returns true if the system is in a state where the focus can be reevaluated, false otherwise.
precondition: mediaIntent != null, eventReceiver != null
Helper function: Display in the log the current entries in the remote control focus stack
Helper function: Remove any entry in the remote control stack that has the same package name as packageName Pre-condition: packageName != null
Helper function: Restore remote control receiver from the system settings.
Helper function: Set the new remote control receiver at the top of the RC focus stack. precondition: mediaIntent != null, target != null
Helper function: Remove the remote control receiver from the RC focus stack. precondition: pi != null
Helper function: Called synchronized on mRCStack
========================================================================================== Remote control display / client ========================================================================================== Update the remote control displays with the new "focused" client generation
Update the remote control clients with the new "focused" client generation
Update the displays and clients with the new "focused" client generation and name
Called when processing MSG_RCDISPLAY_CLEAR event
Called when processing MSG_RCDISPLAY_UPDATE event
Helper function: Called synchronized on mRCStack
Helper function for code readability: only to be called from Preconditions:
Helper function: Called synchronized on mAudioFocusLock, then mRCStack Check whether the remote control display should be updated, triggers the update if required
see AudioManager.registerMediaButtonIntent(PendingIntent pi, ComponentName c) precondition: mediaIntent != null, target != null
see AudioManager.unregisterMediaButtonIntent(PendingIntent mediaIntent) precondition: mediaIntent != null, eventReceiver != null
see AudioManager.registerRemoteControlClient(ComponentName eventReceiver, ...) Note: using this method with rcClient == null is a way to "disable" the IRemoteControlClient
see AudioManager.unregisterRemoteControlClient(PendingIntent pi, ...) rcClient is guaranteed non-null
Register an IRemoteControlDisplay. Notify all IRemoteControlClient of the new display and cause the RemoteControlClient at the top of the stack to update the new display with its information. Since only one IRemoteControlDisplay is supported, this will unregister the previous display.
Unregister an IRemoteControlDisplay. Since only one IRemoteControlDisplay is supported, this has no effect if the one to
-------------------------------------------------------------------------- Constructor, Finalize -------------------- Class constructor. {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC} and {@link AudioManager#STREAM_ALARM} not limited to) 44100, 22050 and 11025. See {@link AudioFormat#CHANNEL_OUT_MONO} and {@link AudioFormat#CHANNEL_OUT_STEREO} See {@link AudioFormat#ENCODING_PCM_16BIT} and {@link AudioFormat#ENCODING_PCM_8BIT} from for playback. If using the AudioTrack in streaming mode, you can write data into this buffer in smaller chunks than this size. If using the AudioTrack in static mode, this is the maximum size of the sound that will be played for this instance. See {@link #getMinBufferSize(int, int, int)} to determine the minimum required buffer size for the successful creation of an AudioTrack instance in streaming mode. Using values smaller than getMinBufferSize() will result in an initialization failure.
Class constructor with audio session. Use this constructor when the AudioTrack must be attached to a particular audio session. The primary use of the audio session ID is to associate audio effects to a particular instance of AudioTrack: if an audio session ID is provided when creating an AudioEffect, this effect will be applied only to audio tracks and media players in the same session and not to the output mix. When an AudioTrack is created without specifying a session, it will create its own session which can be retreived by calling the {@link #getAudioSessionId()} method. If a session ID is provided, this AudioTrack will share effects attached to this session with all other media players or audio tracks in the same session. {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC} and {@link AudioManager#STREAM_ALARM} not limited to) 44100, 22050 and 11025. See {@link AudioFormat#CHANNEL_OUT_MONO} and {@link AudioFormat#CHANNEL_OUT_STEREO} See {@link AudioFormat#ENCODING_PCM_16BIT} and {@link AudioFormat#ENCODING_PCM_8BIT} from for playback. If using the AudioTrack in streaming mode, you can write data into this buffer in smaller chunks than this size. If using the AudioTrack in static mode, this is the maximum size of the sound that will be played for this instance. See {@link #getMinBufferSize(int, int, int)} to determine the minimum required buffer size for the successful creation of an AudioTrack instance in streaming mode. Using values smaller than getMinBufferSize() will result in an initialization failure.
Releases the native AudioTrack resources.
-------------------------------------------------------------------------- Getters -------------------- Returns the minimum valid volume value. Volume values set under this one will be clamped at this value.
Returns the maximum valid volume value. Volume values set above this one will be clamped at this value.
Returns the configured audio data sample rate in Hz
Returns the current playback rate in Hz.
Returns the type of audio stream this AudioTrack is configured for. Compare the result against {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC} or {@link AudioManager#STREAM_ALARM}
Returns the configured channel configuration. See {@link AudioFormat#CHANNEL_OUT_MONO} and {@link AudioFormat#CHANNEL_OUT_STEREO}.
Returns the state of the AudioTrack instance. This is useful after the AudioTrack instance has been created to check if it was initialized properly. This ensures that the appropriate hardware resources have been acquired.
Returns the playback state of the AudioTrack instance.
Returns the native frame count used by the hardware.
Returns marker position expressed in frames.
Returns the playback head position expressed in frames
Returns the hardware output sample rate
Returns the minimum buffer size required for the successful creation of an AudioTrack object to be created in the {@link #MODE_STREAM} mode. Note that this size doesn't guarantee a smooth playback under load, and higher values should be chosen according to the expected frequency at which the buffer will be refilled with additional data to play. See {@link AudioFormat#CHANNEL_OUT_MONO} and {@link AudioFormat#CHANNEL_OUT_STEREO} See {@link AudioFormat#ENCODING_PCM_16BIT} and {@link AudioFormat#ENCODING_PCM_8BIT} or {@link #ERROR} if the implementation was unable to query the hardware for its output or the minimum buffer size expressed in bytes.
-------------------------------------------------------------------------- Initialization / configuration -------------------- Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update. Notifications will be received in the same thread as the one in which the AudioTrack instance was created.
Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update. Use this method to receive AudioTrack events in the Handler associated with another thread than the one in which you created the AudioTrack instance.
Sets the specified left/right output volume values on the AudioTrack. Values are clamped to the ({@link #getMinVolume()}, {@link #getMaxVolume()}) interval if outside this range.
Sets the playback sample rate for this track. This sets the sampling rate at which the audio data will be consumed and played back, not the original sampling rate of the content. Setting it to half the sample rate of the content will cause the playback to last twice as long, but will also result in a negative pitch shift. The valid sample rate range if from 1Hz to twice the value returned by {@link #getNativeOutputSampleRate(int)}.
Sets the position of the notification marker. {@link #ERROR_INVALID_OPERATION}
Sets the period for the periodic notification event.
Sets the playback head position. The track must be stopped for the position to be changed.
Sets the loop points and the loop count. The loop can be infinite.
Sets the initialization state of the instance. To be used in an AudioTrack subclass constructor to set a subclass-specific post-initialization state.
--------------------------------------------------------- Transport control methods -------------------- Starts playing an AudioTrack.
Stops playing the audio data.
Pauses the playback of the audio data. Data that has not been played back will not be discarded. Subsequent calls to {@link #play} will play this data back.
Flushes the audio data currently queued for playback. Any data that has not been played back will be discarded.
Writes the audio data to the audio hardware for playback. Will block until all data has been written to the audio mixer. Note that the actual playback of this data might occur after this function returns. This function is thread safe with respect to {@link #stop} calls, in which case all of the specified data might not be written to the mixer.
Notifies the native resource to reuse the audio data already loaded in the native layer. This call is only valid with AudioTrack instances that don't use the streaming model. {@link #ERROR_INVALID_OPERATION}
Attaches an auxiliary effect to the audio track. A typical auxiliary effect is a reverberation effect which can be applied on any sound source that directs a certain amount of its energy to this effect. This amount is defined by setAuxEffectSendLevel(). {@see #setAuxEffectSendLevel(float)}. <p>After creating an auxiliary effect (e.g. {@link android.media.audiofx.EnvironmentalReverb}), retrieve its ID with {@link android.media.audiofx.AudioEffect#getId()} and use it when calling this method to attach the audio track to the effect. <p>To detach the effect from the audio track, call this method with a null effect id.
Sets the send level of the audio track to the attached auxiliary effect {@link #attachAuxEffect(int)}. The level value range is 0 to 1.0. <p>By default the send level is 0, so even if an effect is attached to the player this method must be called for the effect to be applied. <p>Note that the passed level value is a raw scalar. UI controls should be scaled logarithmically: the gain applied by audio framework ranges from -72dB to 0dB, so an appropriate conversion from linear UI input x to level is: x == 0 -> level = 0 0 < x <= R -> level = 10^(72*(x-R)/20/R)
Returns the camcorder profile for the first back-facing camera on the device at the given quality level. If the device has no back-facing camera, this returns null.
Returns the camcorder profile for the given camera at the given quality level. Quality levels QUALITY_LOW, QUALITY_HIGH are guaranteed to be supported, while other levels may or may not be supported. The supported levels can be checked using {@link #hasProfile(int, int)}. QUALITY_LOW refers to the lowest quality available, while QUALITY_HIGH refers to the highest quality available. QUALITY_LOW/QUALITY_HIGH have to match one of qcif, cif, 480p, 720p, or 1080p. E.g. if the device supports 480p, 720p, and 1080p, then low is 480p and high is 1080p. The same is true for time lapse quality levels, i.e. QUALITY_TIME_LAPSE_LOW, QUALITY_TIME_LAPSE_HIGH are guaranteed to be supported and have to match one of qcif, cif, 480p, 720p, or 1080p. A camcorder recording session with higher quality level usually has higher output bit rate, better video and/or audio recording quality, larger video frame resolution and higher audio sampling rate, etc, than those with lower quality level.
Returns true if camcorder profile exists for the first back-facing camera at the given quality level.
Returns true if camcorder profile exists for the given camera at the given quality level.
Private constructor called by JNI
Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the first back-facing camera on the device. If the device has no back-facing camera, this returns 0.
Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the specified camera.
Returns the list of video decoder types
Returns the list of audio decoder types
Private constructor called by JNI
Private constructor called by JNI
Returns the array of supported output file formats.
Returns the capabilities of the supported video encoders.
Returns the capabilities of the supported audio encoders.
Reads Exif tags from the specified JPEG file.
Returns the value of the specified tag or {@code null} if there is no such tag in the JPEG file.
Returns the integer value of the specified tag. If there is no such tag in the JPEG file or the value cannot be parsed as integer, return <var>defaultValue</var>.
Returns the double value of the specified rational tag. If there is no such tag in the JPEG file or the value cannot be parsed as double, return <var>defaultValue</var>.
Set the value of the specified tag.
Initialize mAttributes with the attributes from the file mFilename. mAttributes is a HashMap which stores the Exif attributes of the file. The key is the standard tag name and the value is the tag's value: e.g. Model -> Nikon. Numeric values are stored as strings. This function also initialize mHasThumbnail to indicate whether the file has a thumbnail inside.
Save the tag data into the JPEG file. This is expensive because it involves copying all the JPG data from one file to another and deleting the old file and renaming the other. It's best to use {@link #setAttribute(String,String)} to set all attributes to write and make a single call rather than multiple calls for each attribute.
Returns true if the JPEG file has a thumbnail.
Returns the thumbnail inside the JPEG file, or {@code null} if there is no thumbnail. The returned data is in JPEG format and can be decoded using {@link android.graphics.BitmapFactory#decodeByteArray(byte[],int,int)}
Stores the latitude and longitude value in a float array. The first element is the latitude, and the second element is the longitude. Returns false if the Exif tags are not available.
Return the altitude in meters. If the exif tag does not exist, return <var>defaultValue</var>.
Returns number of milliseconds since Jan. 1, 1970, midnight. Returns -1 if the date time information if not available.
Returns number of milliseconds since Jan. 1, 1970, midnight UTC. Returns -1 if the date time information if not available.
Returns a confidence factor between 0 and 1. This indicates how certain what has been found is actually a face. A confidence factor above 0.3 is usually good enough.
Sets the position of the mid-point between the eyes.
Returns the distance between the eyes.
Returns the face's pose. That is, the rotations around either the X, Y or Z axis (the positions in 3-dimensional Euclidean space).
Creates a FaceDetector, configured with the size of the images to be analysed and the maximum number of faces that can be detected. These parameters cannot be changed once the object is constructed. Note that the width of the image must be even.
Finds all the faces found in a given {@link android.graphics.Bitmap}. The supplied array is populated with {@link FaceDetector.Face}s for each face found. The bitmap must be in 565 format (for now).
Cast an IBinder object into an android.media.IAudioFocusDispatcher interface, generating a proxy if needed.
Cast an IBinder object into an android.media.IAudioService interface, generating a proxy if needed.
Cast an IBinder object into an android.media.IMediaScannerListener interface, generating a proxy if needed.
Called when a IMediaScannerService.scanFile() call has completed. and the file was added to the media database, or null if scanning failed.
Cast an IBinder object into an android.media.IMediaScannerService interface, generating a proxy if needed.
Requests the media scanner to scan a file. If mimeType is null, then the mimeType will be inferred from the file extension. If specified, the caller will be notified when scanning is complete via the listener.
Older API, left in for backward compatibility. Requests the media scanner to scan a file. If mimeType is null, then the mimeType will be inferred from the file extension.
Cast an IBinder object into an android.media.IRemoteControlClient interface, generating a proxy if needed.
Notifies a remote control client that information for the given generation ID is requested. If the flags contains {@link RemoteControlClient#FLAG_INFORMATION_REQUESTED_ALBUM_ART} then the width and height parameters are valid. FIXME: is infoFlags required? since the RCC pushes info, this might always be called
Sets the generation counter of the current client that is displayed on the remote control.
Cast an IBinder object into an android.media.IRemoteControlDisplay interface, generating a proxy if needed.
Sets the generation counter of the current client that is displayed on the remote control.
To combine metadata text and artwork in one binder call
-------------------------------------------- Constructor, finalize ------------------------ Factory method for the JetPlayer class.
Cloning a JetPlayer instance is not supported. Calling clone() will generate an exception.
Stops the current JET playback, and releases all associated native resources. The object can no longer be used and the reference should be set to null after a call to release().
-------------------------------------------- Getters ------------------------ Returns the maximum number of simultaneous MIDI tracks supported by JetPlayer
-------------------------------------------- Jet functionality ------------------------ Loads a .jet file from a given path.
Loads a .jet file from an asset file descriptor.
Closes the resource containing the JET content.
Starts playing the JET segment queue.
Pauses the playback of the JET segment queue.
Queues the specified segment in the JET queue.
Queues the specified segment in the JET queue.
Modifies the mute flags.
Modifies the mute flags for the current active segment.
Mutes or unmutes a single track.
Schedules the playback of a clip. This will automatically update the mute flags in sync with the JET Clip Marker (controller 103). The parameter clipID must be in the range of 0-63. After the call to triggerClip, when JET next encounters a controller event 103 with bits 0-5 of the value equal to clipID and bit 6 set to 1, it will automatically unmute the track containing the controller event. When JET encounters the complementary controller event 103 with bits 0-5 of the value equal to clipID and bit 6 set to 0, it will mute the track again.
Empties the segment queue, and clears all clips that are scheduled for playback.
-------------------------------------------- Jet event listener ------------------------ Sets the listener JetPlayer notifies when a JET event is generated by the rendering and playback engine. Notifications will be received in the same thread as the one in which the JetPlayer instance was created.
Sets the listener JetPlayer notifies when a JET event is generated by the rendering and playback engine. Use this method to receive JET events in the Handler associated with another thread than the one in which you created the JetPlayer instance.
generates a title based on file name
Sets the data source (file pathname) to use. Call this method before the rest of the methods in this class. This method may be time-consuming.
Sets the data source as a content Uri. Call this method before the rest of the methods in this class. This method may be time-consuming. permission.
Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. {@link #OPTION_PREVIOUS_SYNC} if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use {@link #OPTION_NEXT_SYNC} if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use {@link #OPTION_CLOSEST_SYNC} if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use {@link #OPTION_CLOSEST} if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. {@link #OPTION_CLOSEST} often has larger performance overhead compared to the other options if there is no sync frame located at timeUs.
Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call {@link #getFrameAtTime(long, int)}. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned.
Call this method after setDataSource(). This method finds a representative frame at any time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care about where the frame is located; otherwise, please call {@link #getFrameAtTime(long)} or {@link #getFrameAtTime(long, int)}
Call this method after setDataSource(). This method finds the optional graphic or album/cover art associated associated with the data source. If there are more than one pictures, (any) one of them is returned.
Default constructor. Consider using one of the create() methods for synchronously instantiating a MediaPlayer from a Uri or resource. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances may result in an exception.</p>
Create a request parcel which can be routed to the native media player using {@link #invoke(Parcel, Parcel)}. The Parcel returned has the proper InterfaceToken set. The caller should not overwrite that token, i.e it can only append data to the Parcel. player. {@hide}
Invoke a generic method on the native player using opaque parcels for the request and reply. Both payloads' format is a convention between the java caller and the native player. Must be called after setDataSource to make sure a native player exists. caller must use {@link #newRequest()} to get one. native player. {@hide}
Sets the {@link SurfaceHolder} to use for displaying the video portion of the media. Either a surface holder or surface must be set if a display or video sink is needed.  Not calling this method or {@link #setSurface(Surface)} when playing back a video will result in only the audio track being played. A null surface holder or surface will result in only the audio track being played.
Sets the {@link Surface} to be used as the sink for the video portion of the media. This is similar to {@link #setDisplay(SurfaceHolder)}, but does not support {@link #setScreenOnWhilePlaying(boolean)}.  Setting a Surface will un-set any Surface or SurfaceHolder that was previously set. A null surface will result in only the audio track being played. If the Surface sends frames to a {@link SurfaceTexture}, the timestamps returned from {@link SurfaceTexture#getTimestamp()} will have an unspecified zero point.  These timestamps cannot be directly compared between different media sources, different instances of the same media source, or multiple runs of the same program.  The timestamp is normally monotonically increasing and is unaffected by time-of-day adjustments, but it is reset when the position is set. the media.
Convenience method to create a MediaPlayer for a given Uri. On success, {@link #prepare()} will already have been called and must not be called again. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances will result in an exception.</p>
Convenience method to create a MediaPlayer for a given resource id. On success, {@link #prepare()} will already have been called and must not be called again. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances will result in an exception.</p>
Sets the data source as a content Uri.
Sets the data source (file-path or http/rtsp URL) to use.
Sets the data source (FileDescriptor) to use.  The FileDescriptor must be seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.
Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring.  This is the preferred method over {@link #setWakeMode} where possible, since it doesn't require that the application have permission for low-level wake lock access. to turn off.
Seeks to specified time position. initialized
Set a filter for the metadata update notification and update retrieval. The caller provides 2 set of metadata keys, allowed and blocked. The blocked set always takes precedence over the allowed one. Metadata.MATCH_ALL and Metadata.MATCH_NONE are 2 sets available as shorthands to allow/block all or no metadata. By default, there is no filter set. FIXME: unhide. {@hide}
Releases resources associated with this MediaPlayer object. It is considered good practice to call this method when you're done using the MediaPlayer. For instance, whenever the Activity of an application is paused, this method should be invoked to release the MediaPlayer object. In addition to unnecessary resources (such as memory and instances of codecs) being hold, failure to call this method immediately if a MediaPlayer object is no longer needed may also lead to continuous battery consumption for mobile devices, and playback failure if no multiple instances of the same codec is supported on a device.
Resets the MediaPlayer to its uninitialized state. After calling this method, you will have to initialize it again by setting the data source and calling prepare().
Currently not implemented, returns null.
Sets the parameter indicated by key. {@hide}
Gets the value of the parameter indicated by key. The caller is responsible for recycling the returned parcel. {@hide}
Gets the value of the parameter indicated by key. {@hide}
Gets the value of the parameter indicated by key. {@hide}
Enables the first timed text track if any. {@hide}
Disables timed text display. {@hide}
Called from native code when an interesting event happens.  This method just uses the EventHandler system to post the event back to the main app thread. We use a weak reference to the original MediaPlayer object so that the native code is safe from the object disappearing from underneath it.  (This is the cookie passed to native_setup().)
Register a callback to be invoked when the media source is ready for playback.
Register a callback to be invoked when the end of a media source has been reached during playback.
Register a callback to be invoked when the status of a network stream's buffer has changed.
Register a callback to be invoked when a seek operation has been completed.
Register a callback to be invoked when the video size is known or updated.
Register a callback to be invoked when a timed text is available for display. {@hide}
Register a callback to be invoked when an error has happened during an asynchronous operation.
Register a callback to be invoked when an info/warning is available.
Default constructor.
Sets a Surface to show a preview of recorded media (video). Calls this before prepare() to make sure that the desirable preview display is set.
Sets the audio source to be used for recording. If this method is not called, the output file will not contain an audio track. The source needs to be specified before setting recording-parameters or encoders. Call this only before setOutputFormat().
Sets the video source to be used for recording. If this method is not called, the output file will not contain an video track. The source needs to be specified before setting recording-parameters or encoders. Call this only before setOutputFormat().
Set video frame capture rate. This can be used to set a different video frame capture rate than the recorded video's playback rate. Currently this works only for time lapse mode. The fps can go as low as desired. However the fastest fps will be limited by the hardware. For resolutions that can be captured by the video camera, the fastest fps can be computed using {@link android.hardware.Camera.Parameters#getPreviewFpsRange(int[])}. For higher resolutions the fastest fps may be more restrictive. Note that the recorder cannot guarantee that frames will be captured at the given rate due to camera/encoder limitations. However it tries to be as close as possible.
Sets the orientation hint for output video playback. This method should be called before prepare(). This method will not trigger the source video frame to rotate during video recording, but to add a composition matrix containing the rotation angle in the output video if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4 so that a video player can choose the proper orientation for playback. Note that some video players may choose to ignore the compostion matrix in a video during playback. The supported angles are 0, 90, 180, and 270 degrees.
Set and store the geodata (latitude and longitude) in the output file. This method should be called before prepare(). The geodata is stored in udta box if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4, and is ignored for other output formats. The geodata is stored according to ISO-6709 standard. range [-90, 90]. range [-180, 180]. longitude is out of range.
Sets the format of the output file produced during recording. Call this after setAudioSource()/setVideoSource() but before prepare(). <p>It is recommended to always use 3GP format when using the H.263 video encoder and AMR audio encoder. Using an MPEG-4 container format may confuse some desktop players.</p> needs to be specified before setting recording-parameters or encoders. setAudioSource()/setVideoSource().
Sets the number of audio channels for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified number of audio channels are applicable. (stereo).
Sets the audio encoding bit rate for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified bit rate is applicable, and sometimes the passed bitRate will be clipped internally to ensure the audio recording can proceed smoothly based on the capabilities of the platform.
Sets the video encoding bit rate for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified bit rate is applicable, and sometimes the passed bitRate will be clipped internally to ensure the video recording can proceed smoothly based on the capabilities of the platform.
Currently not implemented. It does nothing. is not desirable, and will not be supported.
Pass in the file descriptor of the file to be written. Call this after setOutputFormat() but before prepare(). setOutputFormat() or after prepare()
Sets the path of the output file to be produced. Call this after setOutputFormat() but before prepare(). setOutputFormat() or after prepare()
native implementation
Begins capturing and encoding data to the file specified with setOutputFile(). Call this after prepare(). <p>Since API level 13, if applications set a camera via {@link #setCamera(Camera)}, the apps can use the camera after this method call. The apps do not need to lock the camera again. However, if this method fails, the apps should still lock the camera back. The apps should not start another recording session during recording. prepare().
Returns the maximum absolute amplitude that was sampled since the last call to this method. Call this only after the setAudioSource(). 0 when called for the first time the audio source has been set.
Register a callback to be invoked when an error occurs while recording.
Register a callback to be invoked when an informational event occurs while recording.
Called from native code when an interesting event happens.  This method just uses the EventHandler system to post the event back to the main app thread. We use a weak reference to the original MediaRecorder object so that the native code is safe from the object disappearing from underneath it.  (This is the cookie passed to native_setup().)
Formats the data into a values array suitable for use with the Media Content Provider.
this function is used to scan a single file
returns the number of matching file/directory names, starting from the right
Releases resouces associated with this MediaScanner object. It is considered good practice to call this method when one is done using the MediaScanner object. After this method is called, the MediaScanner object can no longer be used.
Constructs a new MediaScannerConnection object. the media scanner service. interface, for receiving notifications from the media scanner.
Initiates a connection to the media scanner service. {@link MediaScannerConnectionClient#onMediaScannerConnected()} will be called when the connection is established.
Releases the connection to the media scanner service.
Returns whether we are connected to the media scanner service
Requests the media scanner to scan a file. Success or failure of the scanning operation cannot be determined until {@link MediaScannerConnectionClient#onScanCompleted(String, Uri)} is called. If mimeType is null, then the mimeType will be inferred from the file extension.
Convenience for constructing a {@link MediaScannerConnection}, calling {@link #connect} on it, and calling {@link #scanFile} with the given <var>path</var> and <var>mimeType</var> when the connection is established. the media scanner service. Success or failure of the scanning operation cannot be determined until {@link MediaScannerConnectionClient#onScanCompleted(String, Uri)} is called. If mimeType is null, then the mimeType will be inferred from the file extension. scanned URI and MIME type; If null, the file will be scanned but you will not get a result back.
Part of the ServiceConnection interface.  Do not call.
Part of the ServiceConnection interface.  Do not call.
Go over all the records, collecting metadata keys and records' type field offset in the Parcel. These are stored in mKeyToPosMap for latter retrieval. Format of a metadata record:
Check a parcel containing metadata is well formed. The header is checked as well as the individual records format. However, the data inside the record is not checked because we do lazy access (we check/unmarshall only data the user asks for.) Format of a metadata parcel: {@hide}
Get the boolean value indicated by key
Check val is either a system id or a custom one.
Check the type of the data match what is expected.
We store different types of thumbnails in different files. To remain backward compatibility,
Get the magic number for the specified id in the mini-thumb file. Returns 0 if the magic is not available.
Gallery app can use this method to retrieve mini-thumbnail. Full size images share the same IDs with their corresponding thumbnails.
Class constructor.
Class constructor for a remote control client whose internal event handling happens on a user-provided Looper.
Adds textual information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed.
Adds numerical information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed.
Sets the album / artwork picture to be displayed on the remote control.
Clears all the metadata that has been set since the MetadataEditor instance was
Associates all the metadata that has been set since the MetadataEditor instance was
Creates a {@link MetadataEditor}.
Sets the current playback state.
Sets the flags for the media transport control buttons that this client supports.
Accessor to media button intent description (includes target component)
Accessor to IRemoteControlClient
The IRemoteControlClient implementation
Scale a bitmap to fit the smallest dimension by uniformly scaling the incoming bitmap. If the bitmap fits, then do nothing and return the original.
Fast routine to go through an array of allowed keys and return whether the key is part of that array
Create a new ResampleInputStream, which converts the sample rate This only handles rateIn == rateOut / 2 for the moment.
Sets the stream type where this ringtone will be played.
Gets the stream type where this ringtone will be played.
Returns a human-presentable title for ringtone. Looks in media and DRM content providers. If not in either, uses the filename
Plays the ringtone.
Stops a playing ringtone.
Whether this ringtone is currently playing.
Constructs a RingtoneManager. This constructor is recommended as its constructed instance manages cursor(s).
Constructs a RingtoneManager. The instance constructed by this constructor will not manage the cursor(s), so the client should handle this itself.
Sets which type(s) of ringtones will be listed by this.
Infers the playback stream type based on what type of ringtones this manager is returning.
Whether retrieving another {@link Ringtone} will stop playing the previously retrieved {@link Ringtone}. <p> If this is false, make sure to {@link Ringtone#stop()} any previous ringtones to free resources.
Stops playing the last {@link Ringtone} retrieved from this.
Returns whether DRM ringtones will be included.
Sets whether to include DRM ringtones.
Returns a {@link Cursor} of all the ringtones available. The returned cursor will be the same cursor returned each time this method is called, so do not {@link Cursor#close()} the cursor. The cursor can be {@link Cursor#deactivate()} safely. <p> If {@link RingtoneManager#RingtoneManager(Activity)} was not used, the caller should manage the returned cursor through its activity's life cycle to prevent leaking the cursor.
Gets a {@link Ringtone} for the ringtone at the given position in the {@link Cursor}.
Gets a {@link Uri} for the ringtone at the given position in the {@link Cursor}.
Gets the position of a {@link Uri} within this {@link RingtoneManager}.
Returns a valid ringtone URI. No guarantees on which it returns. If it cannot find one, returns null.
Constructs a where clause that consists of at least one column being 1 (true). This is used to find all matching sounds for the given sound types (ringtone, notifications, etc.)
Returns a {@link Ringtone} for a given sound URI. <p> If the given URI cannot be opened for any reason, this method will attempt to fallback on another sound. If it cannot find any, it will return null.
Returns a {@link Ringtone} for a given sound URI on the given stream type. Normally, if you change the stream type on the returned {@link Ringtone}, it will re-create the {@link MediaPlayer}. This is just an optimized route to avoid that.
Gets the current default sound's {@link Uri}. This will give the actual sound {@link Uri}, instead of using this, most clients can use {@link System#DEFAULT_RINGTONE_URI}.
Sets the {@link Uri} of the default sound for a given sound type.
Returns whether the given {@link Uri} is one of the default ringtones.
Returns the type of a default {@link Uri}.
Returns the {@link Uri} for the default ringtone of a particular type. Rather than returning the actual ringtone's sound {@link Uri}, this will return the symbolic {@link Uri} which will resolved to the actual sound when played.
Constructor. Constructs a SoundPool object with the following characteristics:
Load the sound from the specified path.
Load the sound from the specified APK resource. Note that the extension is dropped. For example, if you want to load a sound from the raw resource file "explosion.mp3", you would specify "R.raw.explosion" as the resource ID. Note that this means you cannot have both an "explosion.wav" and an "explosion.mp3" in the res/raw directory.
Load the sound from an asset file descriptor.
Load the sound from a FileDescriptor. This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.
Sets the callback hook for the OnLoadCompleteListener.
post event from native code to message handler
This method first examines if the thumbnail embedded in EXIF is bigger than our target size. If not, then it'll create a thumbnail from original image. Due to efficiency consideration, we want to let MediaThumbRequest avoid calling this method twice for both kinds, so it only requests for MICRO_KIND and set saveImage to true. This method always returns a "square thumbnail" for MICRO_KIND thumbnail.
Create a video thumbnail for a video. May return null if the video is corrupt or the format is not supported.
Creates a centered bitmap of the desired size.
Compute the sample size as a function of minSideLength and maxNumOfPixels. minSideLength is used to specify that minimal width or height of a bitmap. maxNumOfPixels is used to specify the maximal size in pixels that is tolerable in terms of memory usage. The function returns a sample size based on the constraints. Both size and minSideLength can be passed in as IImage.UNCONSTRAINED, which indicates no care of the corresponding constraint. The functions prefers returning a sample size that generates a smaller bitmap, unless minSideLength = IImage.UNCONSTRAINED. Also, the function rounds up the sample size to a power of 2 or multiple of 8 because BitmapFactory only honors sample size this way. For example, BitmapFactory downsamples an image by 2 even though the request is 3. So we round up the sample size to avoid OOM.
Make a bitmap from a given Uri, minimal side length, and maximum number of pixels. The image data will be read from specified pfd if it's not null, otherwise a new input stream will be created using specified ContentResolver. Clients are allowed to pass their own BitmapFactory.Options used for bitmap decoding. A new BitmapFactory.Options will be created if options is null.
Transform source Bitmap to targeted width and height.
Creates a bitmap by either downsampling from the thumbnail in EXIF or the full image. The functions returns a SizedThumbnailBitmap, which contains a downsampled bitmap and the thumbnail data in EXIF if exists.
Go over all the records, collecting metadata keys and fields in the Parcel. These are stored in mKeyObjectMap for application to retrieve.
To parse and store the Style list.
To parse and store the Font list
To parse and store the Highlight list
To parse and store the Karaoke list
To parse and store HyperText list
To parse and store blinking text list
To check whether the given key is valid.
To check whether the given key is contained in this TimedText object.
To retrieve the object associated with the key. Caller must make sure the key is present using the containsKey method otherwise a RuntimeException will occur. any of the helper classes such as TextPos, Justification, and Text.
ToneGenerator class contructor specifying output stream type and volume.
This method starts the playback of a tone of the specified type. only one tone can play at a time: if a tone is playing while this method is called, this tone is stopped and replaced by the one requested. <ul> <li>{@link #TONE_DTMF_0} <li>{@link #TONE_DTMF_1} <li>{@link #TONE_DTMF_2} <li>{@link #TONE_DTMF_3} <li>{@link #TONE_DTMF_4} <li>{@link #TONE_DTMF_5} <li>{@link #TONE_DTMF_6} <li>{@link #TONE_DTMF_7} <li>{@link #TONE_DTMF_8} <li>{@link #TONE_DTMF_9} <li>{@link #TONE_DTMF_A} <li>{@link #TONE_DTMF_B} <li>{@link #TONE_DTMF_C} <li>{@link #TONE_DTMF_D} <li>{@link #TONE_SUP_DIAL} <li>{@link #TONE_SUP_BUSY} <li>{@link #TONE_SUP_CONGESTION} <li>{@link #TONE_SUP_RADIO_ACK} <li>{@link #TONE_SUP_RADIO_NOTAVAIL} <li>{@link #TONE_SUP_ERROR} <li>{@link #TONE_SUP_CALL_WAITING} <li>{@link #TONE_SUP_RINGTONE} <li>{@link #TONE_PROP_BEEP} <li>{@link #TONE_PROP_ACK} <li>{@link #TONE_PROP_NACK} <li>{@link #TONE_PROP_PROMPT} <li>{@link #TONE_PROP_BEEP2} <li>{@link #TONE_SUP_INTERCEPT} <li>{@link #TONE_SUP_INTERCEPT_ABBREV} <li>{@link #TONE_SUP_CONGESTION_ABBREV} <li>{@link #TONE_SUP_CONFIRM} <li>{@link #TONE_SUP_PIP} <li>{@link #TONE_CDMA_DIAL_TONE_LITE} <li>{@link #TONE_CDMA_NETWORK_USA_RINGBACK} <li>{@link #TONE_CDMA_INTERCEPT} <li>{@link #TONE_CDMA_ABBR_INTERCEPT} <li>{@link #TONE_CDMA_REORDER} <li>{@link #TONE_CDMA_ABBR_REORDER} <li>{@link #TONE_CDMA_NETWORK_BUSY} <li>{@link #TONE_CDMA_CONFIRM} <li>{@link #TONE_CDMA_ANSWER} <li>{@link #TONE_CDMA_NETWORK_CALLWAITING} <li>{@link #TONE_CDMA_PIP} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PAT3} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PAT5} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PAT6} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PAT7} <li>{@link #TONE_CDMA_HIGH_L} <li>{@link #TONE_CDMA_MED_L} <li>{@link #TONE_CDMA_LOW_L} <li>{@link #TONE_CDMA_HIGH_SS} <li>{@link #TONE_CDMA_MED_SS} <li>{@link #TONE_CDMA_LOW_SS} <li>{@link #TONE_CDMA_HIGH_SSL} <li>{@link #TONE_CDMA_MED_SSL} <li>{@link #TONE_CDMA_LOW_SSL} <li>{@link #TONE_CDMA_HIGH_SS_2} <li>{@link #TONE_CDMA_MED_SS_2} <li>{@link #TONE_CDMA_LOW_SS_2} <li>{@link #TONE_CDMA_HIGH_SLS} <li>{@link #TONE_CDMA_MED_SLS} <li>{@link #TONE_CDMA_LOW_SLS} <li>{@link #TONE_CDMA_HIGH_S_X4} <li>{@link #TONE_CDMA_MED_S_X4} <li>{@link #TONE_CDMA_LOW_S_X4} <li>{@link #TONE_CDMA_HIGH_PBX_L} <li>{@link #TONE_CDMA_MED_PBX_L} <li>{@link #TONE_CDMA_LOW_PBX_L} <li>{@link #TONE_CDMA_HIGH_PBX_SS} <li>{@link #TONE_CDMA_MED_PBX_SS} <li>{@link #TONE_CDMA_LOW_PBX_SS} <li>{@link #TONE_CDMA_HIGH_PBX_SSL} <li>{@link #TONE_CDMA_MED_PBX_SSL} <li>{@link #TONE_CDMA_LOW_PBX_SSL} <li>{@link #TONE_CDMA_HIGH_PBX_SLS} <li>{@link #TONE_CDMA_MED_PBX_SLS} <li>{@link #TONE_CDMA_LOW_PBX_SLS} <li>{@link #TONE_CDMA_HIGH_PBX_S_X4} <li>{@link #TONE_CDMA_MED_PBX_S_X4} <li>{@link #TONE_CDMA_LOW_PBX_S_X4} <li>{@link #TONE_CDMA_ALERT_NETWORK_LITE} <li>{@link #TONE_CDMA_ALERT_AUTOREDIAL_LITE} <li>{@link #TONE_CDMA_ONE_MIN_BEEP} <li>{@link #TONE_CDMA_KEYPAD_VOLUME_KEY_LITE} <li>{@link #TONE_CDMA_PRESSHOLDKEY_LITE} <li>{@link #TONE_CDMA_ALERT_INCALL_LITE} <li>{@link #TONE_CDMA_EMERGENCY_RINGBACK} <li>{@link #TONE_CDMA_ALERT_CALL_GUARD} <li>{@link #TONE_CDMA_SOFT_ERROR_LITE} <li>{@link #TONE_CDMA_CALLDROP_LITE} <li>{@link #TONE_CDMA_NETWORK_BUSY_ONE_SHOT} <li>{@link #TONE_CDMA_ABBR_ALERT} <li>{@link #TONE_CDMA_SIGNAL_OFF} </ul>
Returns true if the object is abstract (that is, it has no representation in the underlying file system).
MtpClient constructor
Opens the MTP device.  Once the device is open it takes ownership of the {@link android.hardware.usb.UsbDeviceConnection}. The connection will be closed when you call {@link #close()} The connection will also be closed if this method fails.
Closes all resources related to the MtpDevice object. After this is called, the object can not be used until {@link #open} is called again with a new {@link android.hardware.usb.UsbDeviceConnection}.
Returns the name of the USB device This returns the same value as {@link android.hardware.usb.UsbDevice#getDeviceName} for the device's {@link android.hardware.usb.UsbDevice}
Returns the USB ID of the USB device. This returns the same value as {@link android.hardware.usb.UsbDevice#getDeviceId} for the device's {@link android.hardware.usb.UsbDevice}
Returns the {@link MtpDeviceInfo} for this device
Returns the list of IDs for all storage units on this device Information about each storage unit can be accessed via {@link #getStorageInfo}.
Returns the list of object handles for all objects on the given storage unit, with the given format and parent. Information about each object can be accessed via {@link #getObjectInfo}.
Returns the data for an object as a byte array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.
Returns the thumbnail data for an object as a byte array. The size and format of the thumbnail data can be determined via {@link MtpObjectInfo#getThumbCompressedSize} and {@link MtpObjectInfo#getThumbFormat}. For typical devices the format is JPEG.
Retrieves the {@link MtpStorageInfo} for a storage unit.
Retrieves the {@link MtpObjectInfo} for an object.
Deletes an object on the device.  This call may block, since deleting a directory containing many files may take a long time on some devices.
Retrieves the object handle for the parent of an object on the device.
Retrieves the ID of the storage unit containing the given object on the device.
Copies the data for an object to a file in external storage. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.
Returns the manufacturer's name for the MTP device
Returns the model name for the MTP device
Returns the version string the MTP device
Returns the unique serial number for the MTP device
Returns the object handle for the MTP object
Returns the storage ID for the MTP object's storage unit
Returns the format code for the MTP object
Returns the protection status for the MTP object Possible values are: <ul> <li> {@link android.mtp.MtpConstants#PROTECTION_STATUS_NONE} <li> {@link android.mtp.MtpConstants#PROTECTION_STATUS_READ_ONLY} <li> {@link android.mtp.MtpConstants#PROTECTION_STATUS_NON_TRANSFERABLE_DATA} </ul>
Returns the size of the MTP object
Returns the format code for the MTP object's thumbnail Will be zero for objects with no thumbnail
Returns the size of the MTP object's thumbnail Will be zero for objects with no thumbnail
Returns the width of the MTP object's thumbnail in pixels Will be zero for objects with no thumbnail
Returns the height of the MTP object's thumbnail in pixels Will be zero for objects with no thumbnail
Returns the width of the MTP object in pixels Will be zero for non-image objects
Returns the height of the MTP object in pixels Will be zero for non-image objects
Returns the depth of the MTP object in bits per pixel Will be zero for non-image objects
Returns the object handle for the object's parent Will be zero for the root directory of a storage unit
Returns the association type for the MTP object Will be zero objects that are not of format {@link android.mtp.MtpConstants#FORMAT_ASSOCIATION} For directories the association type is typically {@link android.mtp.MtpConstants#ASSOCIATION_TYPE_GENERIC_FOLDER}
Returns the association description for the MTP object Will be zero objects that are not of format {@link android.mtp.MtpConstants#FORMAT_ASSOCIATION}
Returns the sequence number for the MTP object This field is typically not used for MTP devices, but is sometimes used to define a sequence of photos on PTP cameras.
Returns the name of the MTP object
Returns the creation date of the MTP object The value is represented as milliseconds since January 1, 1970
Returns the modification date of the MTP object The value is represented as milliseconds since January 1, 1970
Returns a comma separated list of keywords for the MTP object
constructs a property group for a list of properties
constructor only called from MtpDatabase
Returns the storage ID for the storage unit
Generates a storage ID for storage of given index. Index 0 is for primary external storage
Returns the file path for the storage unit's storage in the file system
Returns the description string for the storage unit
Returns the amount of space to reserve on the storage file system. This can be set to a non-zero value to prevent MTP from filling up the entire storage.
Returns true if the storage is removable.
Returns maximum file size for the storage, or zero if it is unbounded.
Returns the storage ID for the storage unit. The storage ID uniquely identifies the storage unit on the MTP device.
Returns the maximum storage capacity for the storage unit in bytes
Returns the amount of free space in the storage unit in bytes
Returns the description string for the storage unit. This is typically displayed to the user in the user interface on the MTP host.
Returns the volume identifier for the storage unit
Fills in a packet with the requested ACK parameters.
Adds the optional parameters to the client-generated ACK packet.
Un-boxes an Integer, returning 0 if a null reference is supplied.
Notifies the specified state machine of the ACK packet parameters.
Generates a DECLINE packet with the specified parameters.
Fills in a packet with the requested DECLINE attributes.
Adds optional parameters to the DECLINE packet.
Informs the state machine of the arrival of a DECLINE packet.
Generates a DISCOVER packet with the specified parameters.
Fills in a packet with the requested DISCOVER parameters.
Adds optional parameters to a DISCOVER packet.
Informs the state machine of the arrival of a DISCOVER packet.
Generates an INFORM packet with the specified parameters.
Builds an INFORM packet.
Adds additional parameters to the INFORM packet.
Informs the state machine of the arrival of an INFORM packet.  Not used currently.
Generates a NAK packet with the specified parameters.
Fills in a packet with the requested NAK attributes.
Adds the optional parameters to the client-generated NAK packet.
Notifies the specified state machine of the newly-arrived NAK packet.
Generates a OFFER packet with the specified parameters.
Fills in a packet with the specified OFFER attributes.
Adds the optional parameters to the server-generated OFFER packet.
Notifies the state machine of the OFFER packet parameters.
Returns the transaction ID.
Creates a new L3 packet (including IP header) containing the DHCP udp packet.  This method relies upon the delegated method finishPacket() to insert the per-packet contents.
Converts a signed short value to an unsigned int value.  Needed because Java does not have unsigned types.
Performs an IP checksum (used in IP header and across UDP payload) on the specified portion of a ByteBuffer.  The seed allows the checksum to commence with a specified value.
Adds an optional parameter containing a single byte value.
Adds an optional parameter containing an array of bytes.
Adds an optional parameter containing an IP address.
Adds an optional parameter containing a list of IP addresses.
Adds an optional parameter containing a simple integer
Adds an optional parameter containing and ASCII string.
Adds the special end-of-optional-parameters indicator.
Converts a MAC from an array of octets to an ASCII string.
Reads a four-octet value from a ByteBuffer and construct an IPv4 address from that value.
Reads a string of specified length from the buffer.
Creates a concrete DhcpPacket from the supplied ByteBuffer.  The buffer may have an L2 encapsulation (which is the full EthernetII format starting with the source-address MAC) or an L3 encapsulation (which starts with the IP header). <br> A subset of the optional parameters are parsed and are stored in object fields.
Parse a packet from an array of bytes.
Builds a DHCP-DISCOVER packet from the required specified parameters.
Builds a DHCP-OFFER packet from the required specified parameters.
Builds a DHCP-ACK packet from the required specified parameters.
Builds a DHCP-NAK packet from the required specified parameters.
Builds a DHCP-REQUEST packet from the required specified parameters.
Generates a REQUEST packet with the specified parameters.
Fills in a packet with the requested REQUEST attributes.
Adds the optional parameters to the client-generated REQUEST packet.
Notifies the specified state machine of the REQUEST packet parameters.
Create a new HttpClient with reasonable defaults (which you can update).
Modifies a request to indicate to the server that we would like a gzipped response.  (Uses the "Accept-Encoding" HTTP header.)
Gets the input stream from a response entity.  If the entity is gzipped then this will get a stream over the uncompressed data.
Release resources associated with this client.  You must call this, or significant resources (sockets and memory) may be leaked.
Compress data to send to server. Creates a Http Entity holding the gzipped data. The data will not be compressed if it is too short.
Retrieves the minimum size for compressing data. Shorter data will not be compressed.
Returns true if logging is turned on for this configuration.
Prints a message using this configuration.
Enables cURL request logging for this client.
Disables cURL logging for this client.
Generates a cURL command equivalent to the given request.
Returns the date of the given HTTP date string. This method can identify and parse the date formats emitted by common HTTP servers, such as C's asctime()</a>.
Bind socket and set HttpParams to AndroidHttpClientConnection
Sends the request line and all headers over the connection.
Sends the request entity over the connection.
Parses the response headers and adds them to the given {@code headers} object, and returns the response StatusLine
Return the next response entity.
Checks whether this connection has gone down. Network connections may get closed during some time of inactivity for several reasons. The next time a read is attempted on such a connection it will throw an IOException. This method tries to alleviate this inconvenience by trying to find out if a connection is still usable. Implementations may do that by attempting a read with a very small timeout. Thus this method may block for a small amount of time before returning a result. It is therefore an <i>expensive</i> operation.
Returns a collection of connection metrcis
Performs the handshake and server certificates validation Notice a new chain will be rebuilt by tracing the issuer and subject before calling checkServerTrusted(). And if the last traced certificate is self issued and it is expired, it will be dropped.
Similar to doHandshakeAndValidateServerCertificates but exposed to JNI for use by Chromium HTTPS stack to validate the cert chain.
Common code of doHandshakeAndValidateServerCertificates and verifyServerCertificates. Calls DomainNamevalidator to verify the domain, and TrustManager to verify the certs.
Returns true if the buffer contains the given string. Ignores leading whitespace and case.
Returns index of first occurence ch. Lower cases characters leading up to first occurrence of ch.
connection factory: returns an HTTP or HTTPS connection as necessary
connection (null if the connection is not secure)
Close current network connection Note: this runs in non-network thread
Process requests in queue pipelines requests
After a send/receive failure, any pipelined requests must be cleared back to the mRequest queue
Helper.  Calls the mEventHandler's error() method only if request failed permanently.  Increments mFailcount on failure. Increments failcount only if the network is believed to be connected RETRY_REQUEST_LIMIT failures have occurred).
Use same logic as ConnectionReuseStrategy
Loop until app shutdown. Runs connections in priority order.
Get the localized error message resource for the given error code. If the code is unknown, we'll return a generic error message.
Get the localized error message resource for the given error code. If the code is unknown, we'll return a generic error message.
Reports all non-null headers to the callback
Creates a new HTTP-authentication header object from the input header string. The header string is assumed to contain parameters of at most one authentication-scheme (ensured by the caller).
Marks this header as a proxy authentication header.
Sets the username string.
Sets the password string.
support two schemes: HttpAuthHeader.BASIC  - basic, and HttpAuthHeader.DIGEST - digest (algorithm=MD5, QOP="auth").
the client was rejected because the nonce value was stale.
there is none. The QOP value is always lower-case.
none. By default, MD5 is used.
server is supported; currently supported schemes: BASIC, DIGEST (only algorithm="md5", no qop or qop="auth).
Parses the header scheme name and then scheme parameters if the scheme is supported.
Parses the authentication scheme name. If we have a Digest scheme, sets the algorithm value to the default of MD5. parsed later (if the scheme is supported) or null if failed to parse the scheme (the header value is null?).
Parses a comma-separated list of authentification scheme parameters.
Parses a single authentication scheme parameter. The parameter string is expected to follow the format: PARAMETER=VALUE.
If the token is a known parameter name, parses and initializes the token value.
Parses and initializes the 'stale' paramer value. Any value different from case-insensitive "true" is considered "false".
Trims double-quotes around a parameter value if there are any. quotes or null if the original value is null.
Closes the low level connection. If an exception is thrown then it is assumed that the connection will have been closed (to the extent possible) anyway and the caller does not need to take any further action.
Restart a secure connection suspended waiting for user interaction.
Returns the currently-installed {@code HttpResponseCache}, or null if there is no cache installed or it is not a {@code HttpResponseCache}.
Creates a new HTTP response cache and {@link ResponseCache#setDefault sets it} as the system default cache.
Returns the number of bytes currently being used to store the values in this cache. This may be greater than the {@link #maxSize} if a background deletion is pending.
Force buffered operations to the filesystem. This ensures that responses written to the cache will be available the next time the cache is opened, even if this process is killed.
Returns the number of HTTP requests that required the network to either supply a response or validate a locally cached response.
Returns the number of HTTP requests whose response was provided by the cache. This may include conditional {@code GET} requests that were validated over the network.
Returns the total number of HTTP requests that were made. This includes both client requests and requests that were made on the client's behalf to handle a redirects and retries.
Uninstalls the cache and releases any active resources. Stored contents will remain on the filesystem.
Contructor for a https connection.
Sets the server SSL certificate associated with this connection.
Caches connection, if there is room.
Instantiates a new Request. this interface
Add header represented by given pair to request.  Header will be formatted in request as "name: value\r\n".
Add all headers in given map to this request.  This is a helper method: it calls addHeader for each pair in the map.
Send the request line and headers
Receive a single http response.
Data will not be sent to or received from server after cancel() call.  Does not close connection--use close() below for that. Called by RequestHandle from non-network thread
for debugging
If this request has been sent once and failed, it must be reset before it can be sent again.
Pause thread request completes.  Used for synchronous requests, and testing
Decide whether a response comes with an entity. The implementation in this class is based on RFC 2616. Unknown methods and response codes are supposed to indicate responses with an entity. <br/> Derived executors can override this method to handle methods and response codes not specified in RFC 2616.
Supply an InputStream that provides the body of a request.  It's not great that the caller must also provide the length of the data returned by that InputStream, but the client needs to know up front, and I'm not sure how to get this out of the InputStream itself without a costly readthrough.  I'm not sure skip() would do what we want.  If you know a better way, please let me know.
Handles SSL error(s) on the way down from the user (the user has already provided their feedback).
Helper: calls error() on eventhandler with appropriate message This should not be called before the mConnection is set.
Creates a new request session.
Creates a new request session with a given Connection. This connection is used during a synchronous load to handle this request.
Cancels this request
Pauses the loading of this request. For example, called from the WebCore thread when the plugin can take no more data.
Create and queue a redirect request. count exceeded, body provider unable to rewind on 307 redirect)
Create and queue an HTTP authentication-response (basic) request.
Create and queue an HTTP authentication-response (digest) request.
Computes a random cnonce value based on the current time.
"Double-quotes" the argument.
Creates and queues new request.
Turns off persistence on all live connections
A RequestQueue class instance maintains a set of queued requests.  It orders them, makes the requests against HTTP servers, and makes callbacks to supplied eventHandlers as data is read.  It supports request prioritization, connection reuse and pipelining.
Enables data state and proxy tracking
If platform notifications have been enabled, call this method to disable before destroying RequestQueue
Because our IntentReceiver can run within a different thread, synchronize setting the proxy
used by webkit
Queues an HTTP request data.  Callbacks will be made on the supplied instance.
Chooses between the proxy and the request's host.
debug tool: prints request queue to log
RequestFeeder implementation
Put request back on head of queue
This must be called to cleanly shutdown RequestQueue
Saves the certificate state to a bundle
Restores the certificate stored in the bundle
Creates a new SSL certificate object from an X509 certificate
"" if none has been set
"" if none has been set
Convenience for UI presentation, not intended as public API.
Convenience for UI presentation, not intended as public API.
Parse an ISO 8601 date converting ParseExceptions to a null result;
Format a date as an ISO 8601 string, return "" for a null date
Clone a possibly null Date
Creates a new distinguished name
Inflates the SSL certificate view (helper method). issued-on, expires-on, and possibly other fields set.
Formats the certificate date to a properly localized date string. the "" if it fails to localize.
Creates a new SslError object using the supplied error, certificate and URL.
Creates an SslError object from a chromium error code.
Gets the SSL certificate associated with this object.
Gets the URL associated with this object.
Adds the supplied SSL error to the set.
Determines whether this object includes the supplied error.
Gets the most severe SSL error in this object's set of errors. Returns -1 if the set is empty.
Returns system supported audio codecs.
Creates an AudioCodec according to the given configuration.
Creates an empty AudioGroup.
Returns the {@link AudioStream}s in this group.
Returns the current mode.
Changes the current mode. It must be one of {@link #MODE_ON_HOLD}, {@link #MODE_MUTED}, {@link #MODE_NORMAL}, and {@link #MODE_ECHO_SUPPRESSION}.
Package-private method used by AudioStream.join().
Package-private method used by AudioStream.join().
Sends a DTMF digit to every {@link AudioStream} in this group. Currently only event {@code 0} to {@code 15} are supported.
Removes every {@link AudioStream} in this group.
Creates an AudioStream on the given local address. Note that the local port is assigned automatically to conform with RFC 3550.
Returns the joined {@link AudioGroup}.
Joins an {@link AudioGroup}. Each stream can join only one group at a time. The group can be changed by passing a different one or removed by calling this method with {@code null}.
Returns the {@link AudioCodec}, or {@code null} if it is not set.
Sets the {@link AudioCodec}.
Returns the RTP payload type for dual-tone multi-frequency (DTMF) digits, or {@code -1} if it is not enabled.
Sets the RTP payload type for dual-tone multi-frequency (DTMF) digits. The primary usage is to send digits to the remote gateway to perform certain tasks, such as second-stage dialing. According to RFC 2833, the RTP payload type for DTMF is assigned dynamically, so it must be in the range of 96 and 127. One can use {@code -1} to disable DTMF and free up the previous assigned type. This method cannot be called when the stream already joined an {@link AudioGroup}.
Creates a RtpStream on the given local address. Note that the local port is assigned automatically to conform with RFC 3550.
Returns the network port of the local host.
Returns the network address of the remote host or {@code null} if the stream is not associated.
Returns the network port of the remote host or {@code -1} if the stream is not associated.
Returns {@code true} if the stream is busy. In this case most of the setter methods are disabled. This method is intended to be overridden by subclasses.
Changes the current mode. It must be one of {@link #MODE_NORMAL}, {@link #MODE_SEND_ONLY}, and {@link #MODE_RECEIVE_ONLY}.
Associates with a remote host. This defines the destination of the outgoing packets.
Releases allocated resources. The stream becomes inoperable after calling this method.
Cast an IBinder object into an android.net.sip.ISipService interface, generating a proxy if needed.
Cast an IBinder object into an android.net.sip.ISipSession interface, generating a proxy if needed.
Gets the IP address of the local host on which this SIP session runs.
Gets the SIP profile that this session is associated with.
Gets the SIP profile that this session is connected to. Only available when the session is associated with a SIP dialog.
Gets the session state. The value returned must be one of the states in {@link SipSessionState}.
Checks if the session is in a call.
Gets the call ID of the session.
Sets the listener to listen to the session events. A {@link ISipSession} can only hold one listener at a time. Subsequent calls to this method override the previous listener.
Performs registration to the server specified by the associated local profile. The session listener is called back upon success or failure of registration. The method is only valid to call when the session state is in {@link SipSessionState#READY_TO_CALL}.
Performs unregistration to the server specified by the associated local profile. Unregistration is technically the same as registration with zero expiration duration. The session listener is called back upon success or failure of unregistration. The method is only valid to call when the session state is in {@link SipSessionState#READY_TO_CALL}.
Initiates a call to the specified profile. The session listener is called back upon defined session events. The method is only valid to call when the session state is in {@link SipSessionState#READY_TO_CALL}.
Answers an incoming call with the specified session description. The method is only valid to call when the session state is in {@link SipSessionState#INCOMING_CALL}.
Ends an established call, terminates an outgoing call or rejects an incoming call. The method is only valid to call when the session state is in {@link SipSessionState#IN_CALL}, {@link SipSessionState#INCOMING_CALL}, {@link SipSessionState#OUTGOING_CALL} or {@link SipSessionState#OUTGOING_CALL_RING_BACK}.
Changes the session description during a call. The method is only valid to call when the session state is in {@link SipSessionState#IN_CALL}.
Cast an IBinder object into an android.net.sip.ISipSessionListener interface, generating a proxy if needed.
Called when an INVITE request is sent to initiate a new call.
Called when an INVITE request is received.
Called when a RINGING response is received for the INVITE request sent
Called when the session is established.
Called when the session is terminated.
Called when the peer is busy during session initialization.
Called when the call is being transferred to a new one.
Called when an error occurs during session initialization and termination.
Called when an error occurs during session modification negotiation.
Called when a registration request is sent.
Called when registration is successfully done.
Called when the registration fails.
Called when the registration gets timed out.
Creates a minimal session description from the given session ID and unicast address. The address is used in the origin field ("o=") and the connection field ("c="). See {@link SimpleSessionDescription} for an example of its usage.
Creates a session description from the given message.
Creates a new media description in this session description.
Returns all the media descriptions in this session description.
Encodes the session description and all its media descriptions in a string. Note that the result might be incomplete if a required field has never been added before.
Returns the connection address or {@code null} if it is not present.
Sets the connection address. The field will be removed if the address is {@code null}.
Returns the encryption method or {@code null} if it is not present.
Returns the encryption key or {@code null} if it is not present.
Sets the encryption method and the encryption key. The field will be removed if the method is {@code null}.
Returns the types of the bandwidth limits.
Returns the bandwidth limit of the given type or {@code -1} if it is not present.
Sets the bandwith limit for the given type. The field will be removed if the value is negative.
Returns the names of all the attributes.
Returns the attribute of the given name or {@code null} if it is not present.
Sets the attribute for the given name. The field will be removed if the value is {@code null}. To set a binary attribute, use an empty string as the value.
Returns the media type.
Returns the first transport port used by this media.
Returns the number of contiguous ports used by this media.
Returns the transport protocol.
Returns the media formats.
Returns the {@code fmtp} attribute of the given format or {@code null} if it is not present.
Sets a format and its {@code fmtp} attribute. If the attribute is {@code null}, the corresponding field will be removed.
Removes a format and its {@code fmtp} attribute.
Returns the RTP payload types.
Returns the {@code rtpmap} attribute of the given RTP payload type or {@code null} if it is not present.
Returns the {@code fmtp} attribute of the given RTP payload type or {@code null} if it is not present.
Sets a RTP payload type and its {@code rtpmap} and {@code fmtp} attributes. If any of the attributes is {@code null}, the corresponding field will be removed. See {@link SimpleSessionDescription} for an example of its usage.
Removes a RTP payload and its {@code rtpmap} and {@code fmtp} attributes.
Returns the bandwidth limit of the given type or {@code -1} if it is not present.
Sets the bandwith limit for the given type. The field will be removed if the value is negative.
Invokes {@link #set} after splitting the line into three parts.
Finds the key with the given prefix and returns its suffix.
Returns the index of the key.
Sets the key with the value or removes the key if the value is {@code null}.
Returns the value of the key.
Called when the call object is ready to make another call. The default implementation calls {@link #onChanged}.
Called when a request is sent out to initiate a new call. The default implementation calls {@link #onChanged}.
Called when a new call comes in. The default implementation calls {@link #onChanged}.
Called when a RINGING response is received for the INVITE request sent. The default implementation calls {@link #onChanged}.
Called when the session is established. The default implementation calls {@link #onChanged}.
Called when the session is terminated. The default implementation calls {@link #onChanged}.
Called when the peer is busy during session initialization. The default implementation calls {@link #onChanged}.
Called when the call is on hold. The default implementation calls {@link #onChanged}.
Called when an error occurs. The default implementation is no op.
Called when an event occurs and the corresponding callback is not overridden. The default implementation is no op. Error events are not re-directed to this callback and are handled in {@link #onError}.
Creates a call object with the local SIP profile.
Sets the listener to listen to the audio call events. The method calls {@link #setListener setListener(listener, false)}.
Sets the listener to listen to the audio call events. A {@link SipAudioCall} can only hold one listener at a time. Subsequent calls to this method override the previous listener.
Checks if the call is established.
Checks if the call is on hold.
Closes this object. This object is not usable after being closed.
Gets the local SIP profile.
Gets the peer's SIP profile.
Gets the state of the {@link SipSession} that carries this call. The value returned must be one of the states in {@link SipSession.State}.
Gets the {@link SipSession} that carries this call.
Attaches an incoming call to this call object.
Initiates an audio call to the specified profile. The attempt will be timed out if the call is not established within {@code timeout} seconds and {@link Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)} will be called.
Ends a call.
Puts a call on hold.  When succeeds, {@link Listener#onCallHeld} is called. The attempt will be timed out if the call is not established within {@code timeout} seconds and {@link Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)} will be called.
Answers a call. The attempt will be timed out if the call is not established within {@code timeout} seconds and {@link Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)} will be called.
Continues a call that's on hold. When succeeds, {@link Listener#onCallEstablished} is called. The attempt will be timed out if the call is not established within {@code timeout} seconds and {@link Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)} will be called.
Toggles mute.
Checks if the call is muted.
Puts the device to speaker mode. <p class="note"><strong>Note:</strong> Requires the {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS} permission.</p>
event 0--9 maps to decimal value 0--9, '*' to 10, '#' to 11, event 'A'--'D' to 12--15, and event flash to 16. Currently, event flash is not supported.
Gets the {@link AudioStream} object used in this call. The object represents the RTP stream that carries the audio data to and from the peer. The object may not be created before the call is established. And it is undefined after the call ends or the {@link #close} method is called.
Gets the {@link AudioGroup} object which the {@link AudioStream} object joins. The group object may not exist before the call is established. Also, the {@code AudioStream} may change its group during a call (e.g., after the call is held/un-held). Finally, the {@code AudioGroup} object returned by this method is undefined after the call ends or the {@link #close} method is called. If a group object is set by {@link #setAudioGroup(AudioGroup)}, then this method returns that object.
Sets the {@link AudioGroup} object which the {@link AudioStream} object joins. If {@code audioGroup} is null, then the {@code AudioGroup} object will be dynamically created when needed. Note that the mode of the {@code AudioGroup} is not changed according to the audio settings (i.e., hold, mute, speaker phone) of this object. This is mainly used to merge multiple {@code SipAudioCall} objects to form a conference call. The settings of the first object (that merges others) override others'.
Starts the audio for the established call. This method should be called after {@link Listener#onCallEstablished} is called. <p class="note"><strong>Note:</strong> Requires the {@link android.Manifest.permission#RECORD_AUDIO}, {@link android.Manifest.permission#ACCESS_WIFI_STATE} and {@link android.Manifest.permission#WAKE_LOCK} permissions.</p>
set audio group mode based on current audio configuration
Creates a manager instance. Returns null if SIP API is not supported.
Returns true if the SIP API is supported by the system.
Returns true if the system supports SIP-based VOIP API.
Returns true if SIP is only available on WIFI.
Opens the profile for making generic SIP calls. The caller may make subsequent calls through {@link #makeAudioCall}. If one also wants to receive calls on the profile, use {@link #open(SipProfile, PendingIntent, SipRegistrationListener)} instead.
Opens the profile for making calls and/or receiving generic SIP calls. The caller may make subsequent calls through {@link #makeAudioCall}. If the auto-registration option is enabled in the profile, the SIP service will register the profile to the corresponding SIP provider periodically in order to receive calls from the provider. When the SIP service receives a new call, it will send out an intent with the provided action string. The intent contains a call ID extra and an offer session description string extra. Use {@link #getCallId} and {@link #getOfferSessionDescription} to retrieve those extras.
Sets the listener to listen to registration events. No effect if the profile has not been opened to receive calls (see {@link #open(SipProfile, PendingIntent, SipRegistrationListener)}).
Closes the specified profile to not make/receive calls. All the resources that were allocated to the profile are also released.
Checks if the specified profile is opened in the SIP service for making and/or receiving calls.
Checks if the SIP service has successfully registered the profile to the SIP provider (specified in the profile) for receiving calls. Returning true from this method also implies the profile is opened ({@link #isOpened}).
Creates a {@link SipAudioCall} to make a call. The attempt will be timed out if the call is not established within {@code timeout} seconds and {@link SipAudioCall.Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)} will be called.
Creates a {@link SipAudioCall} to make an audio call. The attempt will be timed out if the call is not established within {@code timeout} seconds and {@link SipAudioCall.Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)} will be called.
Creates a {@link SipAudioCall} to take an incoming call. Before the call is returned, the listener will receive a {@link SipAudioCall.Listener#onRinging} callback.
Checks if the intent is an incoming call broadcast intent.
Gets the call ID from the specified incoming call broadcast intent.
Gets the offer session description from the specified incoming call broadcast intent.
Creates an incoming call broadcast intent.
Manually registers the profile to the corresponding SIP provider for receiving calls. {@link #open(SipProfile, PendingIntent, SipRegistrationListener)} is still needed to be called at least once in order for the SIP service to notify the caller with the {@link android.app.PendingIntent} when an incoming call is received.
Manually unregisters the profile from the corresponding SIP provider for stop receiving further calls. This may interference with the auto registration process in the SIP service if the auto-registration option in the profile is enabled.
Gets the {@link SipSession} that handles the incoming call. For audio calls, consider to use {@link SipAudioCall} to handle the incoming call. See {@link #takeAudioCall}. Note that the method may be called only once for the same intent. For subsequent calls on the same intent, the method returns null.
Creates a {@link SipSession} with the specified profile. Use other methods, if applicable, instead of interacting with {@link SipSession} directly.
Gets the list of profiles hosted by the SIP service. The user information (username, password and display name) are crossed out.
listener must not be null
Creates a builder based on the given profile.
Sets the username used for authentication.
Sets the name of the profile. This name is given by user.
Sets the password of the SIP account
Sets the port number of the server. By default, it is 5060.
Sets the protocol used to connect to the SIP server. Currently, only "UDP" and "TCP" are supported.
Sets the outbound proxy of the SIP server.
Sets the display name of the user.
Sets the send keep-alive flag.
Sets the auto. registration flag.
Builds and returns the SIP profile object.
Gets the SIP URI of this profile.
Gets the SIP URI string of this profile.
Gets the SIP address of this profile.
Gets the display name of the user.
Gets the username.
Gets the username for authentication. If it is null, then the username is used in authentication instead.
Gets the SIP domain.
Gets the port number of the SIP server.
Gets the protocol used to connect to the server.
Gets the network address of the server outbound proxy.
Gets the (user-defined) name of the profile.
Gets the flag of 'Sending keep-alive'.
Gets the flag of 'Auto Registration'.
Sets the calling process's Uid in the sip service.
Gets the calling process's Uid in the sip settings.
Converts the state to string.
Gets the session state. The value returned must be one of the states in {@link State}.
Sets the listener to listen to the session events. A {@code SipSession} can only hold one listener at a time. Subsequent calls to this method override the previous listener.
Performs registration to the server specified by the associated local profile. The session listener is called back upon success or failure of registration. The method is only valid to call when the session state is in {@link State#READY_TO_CALL}.
Performs unregistration to the server specified by the associated local profile. Unregistration is technically the same as registration with zero expiration duration. The session listener is called back upon success or failure of unregistration. The method is only valid to call when the session state is in {@link State#READY_TO_CALL}.
Initiates a call to the specified profile. The session listener is called back upon defined session events. The method is only valid to call when the session state is in {@link State#READY_TO_CALL}.
Answers an incoming call with the specified session description. The method is only valid to call when the session state is in {@link State#INCOMING_CALL}.
Ends an established call, terminates an outgoing call or rejects an incoming call. The method is only valid to call when the session state is in {@link State#IN_CALL}, {@link State#INCOMING_CALL}, {@link State#OUTGOING_CALL} or {@link State#OUTGOING_CALL_RING_BACK}.
Changes the session description during a call. The method is only valid to call when the session state is in {@link State#IN_CALL}.
Cast an IBinder object into an android.net.wifi.p2p.IWifiP2pManager interface, generating a proxy if needed.
P2P-GO-NEG-REQUEST 42:fc:89:a8:96:09 dev_passwd_id=4 {@hide}
copy constructor
Implement the Parcelable interface
P2P-DEVICE-FOUND fa:7b:7a:42:02:13 p2p_dev_addr=fa:7b:7a:42:02:13 pri_dev_type=1-0050F204-1 name='p2p-TEST1' config_methods=0x188 dev_capab=0x27 group_capab=0x0 P2P-DEVICE-LOST p2p_dev_addr=fa:7b:7a:42:02:13 fa:7b:7a:42:02:13 P2P-PROV-DISC-PBC-REQ 42:fc:89:e1:e2:27 p2p_dev_addr=42:fc:89:e1:e2:27 pri_dev_type=1-0050F204-1 name='p2p-TEST2' config_methods=0x188 dev_capab=0x27 group_capab=0x0 P2P-PROV-DISC-ENTER-PIN 42:fc:89:e1:e2:27 p2p_dev_addr=42:fc:89:e1:e2:27 pri_dev_type=1-0050F204-1 name='p2p-TEST2' config_methods=0x188 dev_capab=0x27 group_capab=0x0 P2P-PROV-DISC-SHOW-PIN 42:fc:89:e1:e2:27 44490607 p2p_dev_addr=42:fc:89:e1:e2:27 pri_dev_type=1-0050F204-1 name='p2p-TEST2' config_methods=0x188 dev_capab=0x27 group_capab=0x0 Note: The events formats can be looked up in the wpa_supplicant code
Returns true if WPS push button configuration is supported
Returns true if WPS keypad configuration is supported
Returns true if WPS display configuration is supported
Returns true if the device is capable of service discovery
Returns true if the device is a group owner
copy constructor
supported formats: 0x1abc, 0X1abc, 1abc
copy constructor
Get the list of devices
P2P-GROUP-STARTED p2p-wlan0-0 [client|GO] ssid="DIRECT-W8" freq=2437 [psk=2182b2e50e53f260d04f3c7b25ef33c965a3291b9b36b455a82d77fd82ca15bc| passphrase="fKG4jMe3"] go_dev_addr=fa:7b:7a:42:02:13 P2P-GROUP-REMOVED p2p-wlan0-0 [client|GO] reason=REQUESTED P2P-INVITATION-RECEIVED sa=fa:7b:7a:42:02:13 go_dev_addr=f8:7b:7a:42:02:13 bssid=fa:7b:7a:42:82:13 unknown-network Note: The events formats can be looked up in the wpa_supplicant code
Get the network name (SSID) of the group. Legacy Wi-Fi clients will discover the p2p group using the network name.
Check whether this device is the group owner of the created p2p group
Get the details of the group owner as a {@link WifiP2pDevice} object
Get the list of clients currently part of the p2p group
Get the passphrase of the group. This function will return a valid passphrase only at the group owner. Legacy Wi-Fi clients will need this passphrase alongside network name obtained from {@link #getNetworkName()} to join the group
Get the interface name on which the group is created
copy constructor
copy constructor
Create a new WifiP2pManager instance. Applications use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_P2P_SERVICE Context.WIFI_P2P_SERVICE}. is a system private class.
Registers the application with the Wi-Fi framework. This function must be the first to be called before any p2p operations are performed.
Sends in a request to the system to enable p2p. This will pop up a dialog to the user and upon authorization will enable p2p.
Sends in a request to the system to disable p2p. This will pop up a dialog to the user and upon authorization will enable p2p.
Initiate peer discovery. A discovery process involves scanning for available Wi-Fi peers for the purpose of establishing a connection. <p> The function call immediately returns after sending a discovery request to the framework. The application is notified of a success or failure to initiate discovery through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}. <p> The discovery remains active until a connection is initiated or a p2p group is formed. Register for {@link #WIFI_P2P_PEERS_CHANGED_ACTION} intent to determine when the framework notifies of a change as peers are discovered. <p> Upon receiving a {@link #WIFI_P2P_PEERS_CHANGED_ACTION} intent, an application can request for the list of peers using {@link #requestPeers}.
Start a p2p connection to a device with the specified configuration. <p> The function call immediately returns after sending a connection request to the framework. The application is notified of a success or failure to initiate connect through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}. <p> Register for {@link #WIFI_P2P_CONNECTION_CHANGED_ACTION} intent to determine when the framework notifies of a change in connectivity. <p> If the current device is not part of a p2p group, a connect request initiates a group negotiation with the peer. <p> If the current device is part of an existing p2p group or has created a p2p group with {@link #createGroup}, an invitation to join the group is sent to the peer device.
Cancel any ongoing p2p group negotiation <p> The function call immediately returns after sending a connection cancellation request to the framework. The application is notified of a success or failure to initiate cancellation through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.
Create a p2p group with the current device as the group owner. This essentially creates an access point that can accept connections from legacy clients as well as other p2p devices. <p class="note"><strong>Note:</strong> This function would normally not be used unless the current device needs to form a p2p connection with a legacy client <p> The function call immediately returns after sending a group creation request to the framework. The application is notified of a success or failure to initiate group creation through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}. <p> Application can request for the group details with {@link #requestGroupInfo}.
Remove the current p2p group. <p> The function call immediately returns after sending a group removal request to the framework. The application is notified of a success or failure to initiate group removal through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.
Request the current list of peers.
Request device connection info.
Request p2p group info.
Get a reference to WifiP2pService handler. This is used to establish an AsyncChannel communication with WifiService
We use the 4 digits of the ANDROID_ID to have a friendly default that has low likelihood of collision with a peer
Get a reference to handler. This is used by a client to establish an AsyncChannel communication with WifiP2pService
TODO: implement when wpa_supplicant is fixed
State machine initiated requests can have replyTo set to null indicating there are no recepients, we ignore those reply actions
arg2 on the source message has a hash code that needs to be retained in replies see WifiP2pManager for details
Cast an IBinder object into an android.net.wifi.IWifiManager interface, generating a proxy if needed.
We'd like to obtain the following attributes, but they are not reported via the socket interface, even though they are known internally by wpa_supplicant. {@hide}
Implement the Parcelable interface {@hide}
Implement the Parcelable interface {@hide}
Returns {@code true} if the supplicant state is valid and {@code false} otherwise. otherwise.
Supplicant associating or authenticating is considered a handshake state
Implement the Parcelable interface {@hide}
Implement the Parcelable interface {@hide}
Initialize context, fetch the list of configured networks and enable all stored networks in supplicant.
Fetch the list of currently configured networks
enable all networks and save config. This will be a no-op if the list of configured networks indicates all networks as being enabled
Selects the specified network config for connection. This involves addition/update of the specified config, updating the priority of all the networks and enabling the given network while disabling others. Selecting a network will leave the other networks disabled and a call to enableAllNetworks() needs to be issued upon a connection or a failure event from supplicant
Selects the specified network for connection. This involves updating the priority of all the networks and enabling the given network while disabling others. Selecting a network will leave the other networks disabled and a call to enableAllNetworks() needs to be issued upon a connection or a failure event from supplicant
Add/update the specified configuration and save config
Forget the specified network and save config
Add/update a network. Note that there is no saveConfig operation. This function is retained for compatibility with the public API. The more powerful saveNetwork() is used by the state machine
Remove a network. Note that there is no saveConfig operation. This function is retained for compatibility with the public API. The more powerful forgetNetwork() is used by the state machine for network removal
Enable a network. Note that there is no saveConfig operation. This function is retained for compatibility with the public API. The more powerful selectNetwork()/saveNetwork() is used by the state machine for connecting to a network
Disable a network. Note that there is no saveConfig operation.
Save the configured networks in supplicant to disk
Start WPS pin method configuration with pin obtained from the access point
Start WPS pin method configuration with pin obtained from the device
Start WPS push button configuration
Fetch the link properties for a given network id
get IP configuration for a given network id TODO: We cannot handle IPv6 addresses for configuration
set IP configuration for a given network id
clear IP configuration for a given network id
Fetch the proxy properties for a given network id
Return if the specified network is using static IP
Mark all networks except specified netId as disabled
Compare current and new configuration and write to file on change
Read the variables from the supplicant daemon that are needed to fill in the WifiConfiguration object.
Returns a unique for a given configuration
copy constructor {@hide}
Copy constructor
Returns the service set identifier (SSID) of the current 802.11 network. If the SSID is an ASCII string, it will be returned surrounded by double quotation marks.Otherwise, it is returned as a string of hex digits. The SSID may be {@code null} if there is no network currently connected.
Return the basic service set identifier (BSSID) of the current access point. The BSSID may be {@code null} if there is no network currently connected.
Returns the received signal strength indicator of the current 802.11 network. <p><strong>This is not normalized, but should be!</strong></p>
Returns the current link speed in {@link #LINK_SPEED_UNITS}.
Record the MAC address of the WLAN interface
Each configured network has a unique small integer ID, used to identify the network when performing operations on the supplicant. This method returns the ID for the currently connected network.
Return the detailed state of the supplicant's negotiation with an access point, in the form of a {@link SupplicantState SupplicantState} object.
SSID-specific probe request must be used for scans.
Map a supplicant state into a fine-grained network connectivity state.
Set the <code>SupplicantState</code> from the string name of the state. in an event sent by {@code wpa_supplicant}.
Create a new WifiManager instance. Applications will almost always want to use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_SERVICE Context.WIFI_SERVICE}. is a system private class.
Return a list of all the networks configured in the supplicant. Not all fields of WifiConfiguration are returned. Only the following fields are filled in: <ul> <li>networkId</li> <li>SSID</li> <li>BSSID</li> <li>priority</li> <li>allowedProtocols</li> <li>allowedKeyManagement</li> <li>allowedAuthAlgorithms</li> <li>allowedPairwiseCiphers</li> <li>allowedGroupCiphers</li> </ul> of {@link WifiConfiguration} objects.
Add a new network description to the set of configured networks. The {@code networkId} field of the supplied configuration object is ignored. <p/> The new network will be marked DISABLED by default. To enable it, called {@link #enableNetwork}.
Update the network description of an existing configured network.
Internal method for doing the RPC that creates a new network description or updates an existing one.
Remove the specified network from the list of configured networks. This may result in the asynchronous delivery of state change events. to the supplicant
Allow a previously configured network to be associated with. If <code>disableOthers</code> is true, then all other configured networks are disabled, and an attempt to connect to the selected network is initiated. This may result in the asynchronous delivery of state change events. select a particular network to connect to is specify {@code true} for this parameter.
Disable a configured network. The specified network will not be a candidate for associating. This may result in the asynchronous delivery of state change events.
Disable a configured network asynchronously.  This call is for abnormal network events, and the user may be notified of network change, if they recently attempted to connect to the specified network.
Disassociate from the currently active access point. This may result in the asynchronous delivery of state change events.
Reconnect to the currently active access point, if we are currently disconnected. This may result in the asynchronous delivery of state change events.
Reconnect to the currently active access point, even if we are already connected. This may result in the asynchronous delivery of state change events.
Check that the supplicant daemon is responding to requests. it returned the expected response to the PING message.
Request a scan for access points. Returns immediately. The availability of the results is made known later by means of an asynchronous event sent on completion of the scan.
Request a scan for access points. Returns immediately. The availability of the results is made known later by means of an asynchronous event sent on completion of the scan. This is a variant of startScan that forces an active scan, even if passive scans are the current default
Return dynamic information about the current Wi-Fi connection, if any is active.
Return the results of the latest access point scan.
Tell the supplicant to persist the current list of configured networks. <p> Note: It is possible for this method to change the network IDs of existing networks. You should assume the network IDs can be different after calling this method.
Set the country code.
Set the operational frequency band.
Get the operational frequency band.
Check if the chipset supports dual frequency band (2.4 GHz and 5 GHz)
Return the DHCP-assigned addresses from the last successful DHCP request, if any.
Enable or disable Wi-Fi.
Gets the Wi-Fi enabled state.
Return whether Wi-Fi is enabled or disabled.
Calculates the level of the signal. This should be used any time a signal is being shown.
Compares two signal strengths.
Start AccessPoint mode with the specified configuration. If the radio is already running in AP mode, update the new configuration Note that starting in access point mode disables station mode operation
Gets the Wi-Fi enabled state.
Return whether Wi-Fi AP is enabled or disabled.
Gets the Wi-Fi AP Configuration.
Sets the Wi-Fi AP Configuration.
Start the driver and connect to network. This function will over-ride WifiLock and device idle status. For example, even if the device is idle or there is only a scan-only lock held, a start wifi would mean that wifi connection is kept active until a stopWifi() is sent. This API is used by WifiStateTracker
Disconnect from a network (if any) and stop the driver. This function will over-ride WifiLock and device idle status. Wi-Fi stays inactive until a startWifi() is issued. This API is used by WifiStateTracker
Add a bssid to the supplicant blacklist This API is used by WifiWatchdogService
Clear the supplicant blacklist This API is used by WifiWatchdogService
Initiate an asynchronous channel connection setup
Connect to a network with the given configuration. The network also gets added to the supplicant configuration. For a new network, this function is used instead of a sequence of addNetwork(), enableNetwork(), saveConfiguration() and reconnect()
Connect to a network with the given networkId. This function is used instead of a enableNetwork(), saveConfiguration() and reconnect()
Save the given network in the supplicant config. If the network already exists, the configuration is updated. A new network is enabled by default. For a new network, this function is used instead of a sequence of addNetwork(), enableNetwork() and saveConfiguration(). For an existing network, it accomplishes the task of updateNetwork() and saveConfiguration()
Delete the network in the supplicant config. This function is used instead of a sequence of removeNetwork() and saveConfiguration().
Start Wi-fi Protected Setup
Get a reference to WifiService handler. This is used by a client to establish an AsyncChannel communication with WifiService
Returns the file in which IP and proxy configuration data is stored
Locks the Wi-Fi radio on until {@link #release} is called. If this WifiLock is reference-counted, each call to {@code acquire} will increment the reference count, and the radio will remain locked as long as the reference count is above zero. If this WifiLock is not reference-counted, the first call to {@code acquire} will lock the radio, but subsequent calls will be ignored.  Only one call to {@link #release} will be required, regardless of the number of times that {@code acquire} is called.
Unlocks the Wi-Fi radio, allowing it to turn off when the device is idle. If this WifiLock is reference-counted, each call to {@code release} will decrement the reference count, and the radio will be unlocked only when the reference count reaches zero.  If the reference count goes below zero (that is, if {@code release} is called a greater number of times than {@link #acquire}), an exception is thrown. If this WifiLock is not reference-counted, the first call to {@code release} (after the radio was locked using {@link #acquire}) will unlock the radio, and subsequent calls will be ignored.
Controls whether this is a reference-counted or non-reference-counted WifiLock. Reference-counted WifiLocks keep track of the number of calls to {@link #acquire} and {@link #release}, and only allow the radio to sleep when every call to {@link #acquire} has been balanced with a call to {@link #release}.  Non-reference-counted WifiLocks lock the radio whenever {@link #acquire} is called and it is unlocked, and unlock the radio whenever {@link #release} is called and it is locked.
Checks whether this WifiLock is currently held.
Creates a new WifiLock. {@link #WIFI_MODE_FULL_HIGH_PERF} and {@link #WIFI_MODE_SCAN_ONLY} for descriptions of the types of Wi-Fi locks.
Creates a new WifiLock.
Create a new MulticastLock
Locks Wifi Multicast on until {@link #release} is called. If this MulticastLock is reference-counted each call to {@code acquire} will increment the reference count, and the wifi interface will receive multicast packets as long as the reference count is above zero. If this MulticastLock is not reference-counted, the first call to {@code acquire} will turn on the multicast packets, but subsequent calls will be ignored.  Only one call to {@link #release} will be required, regardless of the number of times that {@code acquire} is called. Note that other applications may also lock Wifi Multicast on. Only they can relinquish their lock. Also note that applications cannot leave Multicast locked on. When an app exits or crashes, any Multicast locks will be released.
Unlocks Wifi Multicast, restoring the filter of packets not addressed specifically to this device and saving power. If this MulticastLock is reference-counted, each call to {@code release} will decrement the reference count, and the multicast packets will only stop being received when the reference count reaches zero.  If the reference count goes below zero (that is, if {@code release} is called a greater number of times than {@link #acquire}), an exception is thrown. If this MulticastLock is not reference-counted, the first call to {@code release} (after the radio was multicast locked using {@link #acquire}) will unlock the multicast, and subsequent calls will be ignored. Note that if any other Wifi Multicast Locks are still outstanding this {@code release} call will not have an immediate effect.  Only when all applications have released all their Multicast Locks will the Multicast filter be turned back on. Also note that when an app exits or crashes all of its Multicast Locks will be automatically released.
Controls whether this is a reference-counted or non-reference- counted MulticastLock. Reference-counted MulticastLocks keep track of the number of calls to {@link #acquire} and {@link #release}, and only stop the reception of multicast packets when every call to {@link #acquire} has been balanced with a call to {@link #release}.  Non-reference- counted MulticastLocks allow the reception of multicast packets whenever {@link #acquire} is called and stop accepting multicast packets whenever {@link #release} is called. count
Checks whether this MulticastLock is currently held.
Check multicast filter status.
Initialize the multicast filtering to 'on'
Handle all supplicant events except STATE-CHANGE event name and &quot;&#8195;&#8212;&#8195;&quot;
Handle p2p events
Handle hostap events
Handle the supplicant STATE-CHANGE event id=network-id state=new-state
Send the state machine a notification that the state of Wifi connectivity has changed. NetworkInfo.DetailedState.CONNECTED}, this is the MAC address of the access point. Otherwise, it is {@code null}.
Send the state machine a notification that the state of the supplicant has changed.
Sleep for a period of time.
Example output: RSSI=-65 LINKSPEED=48 NOISE=9999 FREQUENCY=0
Invite a peer to a group
Reinvoke a persistent connection
TODO: doc
TODO: doc
TODO: doc
TODO: doc
TODO: doc
TODO: doc
TODO: doc
TODO: doc
Get status information for the current connection, if any.
TODO: doc
TODO: doc
TODO: doc
TODO: doc
Disconnect from Access Point
Initiate a reconnection to AP
Initiate a re-association to AP
Add a network synchronously
Delete a network
Enable a network
Disable a network
Blacklist a BSSID. This will avoid the AP if there are alternate APs to connect
Clear the blacklist list
Start filtering Multicast v4 packets
Stop filtering Multicast v4 packets
Start filtering Multicast v4 packets
Stop filtering Multicast v4 packets
Set high performance mode of operation. Enabling would set active power mode and disable suspend optimizations; disabling would set auto power mode and enable suspend optimizations
Set the country code
Set the operational frequency band
Returns the operational frequency band
Returns the wifi configuration file
Send a message indicating bluetooth adapter connection state changed
Save configuration on supplicant TODO: deprecate this
Request a wakelock with connectivity service to keep the device awake until we hand-off from wifi to an alternate network
Internal private functions
Set the country code from the system setting value, if any.
Set the frequency band from the system setting value, if any.
Parse the scan result line passed to us by wpa_supplicant (helper).
scanResults input format 00:bb:cc:dd:cc:ee       2427    166     [WPA-EAP-TKIP][WPA2-EAP-CCMP]   Net1 00:bb:cc:dd:cc:ff       2412    165     [WPA-EAP-TKIP][WPA2-EAP-CCMP]   Net2
Fetch RSSI and linkspeed on current connection
Record the detailed state of a network.
Resets the Wi-Fi Connections by clearing any state, resetting any sockets using the interface, stopping DHCP & disabling interface
Current design is to not set the config on a running hostapd but instead stop and start tethering when user changes config on a running access point TODO: Add control channel setup through hostapd that allows changing config on a running daemon
TODO: could move logging into a common class
Begin monitoring wifi connectivity
Wi-Fi is considered available as long as we have a connection to the supplicant daemon and there is at least one enabled network. If a teardown was explicitly requested, then Wi-Fi can be restarted with a reconnect request, so it is considered available. If the driver has been stopped for any reason other than a teardown request, Wi-Fi is considered unavailable.
STATE MAP Disabled     Enabled NotConnected      Connected
Observes the watchdog on/off setting, and takes action when changed.
Observes watchdogs secure setting changes.
DNS based detection techniques do not work at all hotspots. The one sure way to check a walled garden is to see if a URL fetch on a known address fetches the data we expect
Helper to return wait time left given a min interval and last run
Uses {@link #mConnectionInfo}.
Times a dns check with an interval based on {@link #signalUnstable}
Convenience function for retrieving a single secure settings value as a string with a default value.
Convenience function for retrieving a single secure settings value as a boolean.  Note that internally setting values are always stored as strings; this function converts the string to a boolean for you.  The default value will be returned if the setting is not defined or not a valid boolean. or not a valid boolean.
Convenience function for updating a single settings value as an integer. This will either create a new entry in the table if the given name does not exist, or modify the value of the existing row with that name.  Note that internally setting values are always stored as strings, so this function converts the given value to a string before storing it.
Copy constructor
copy constructor {@hide}
Tells the underlying networking system that the caller wants to begin using the named feature. The interpretation of {@code feature} is completely up to each networking implementation. The interpretation of this value is specific to each networking implementation+feature combination, except that the value {@code -1} always indicates failure.
Tells the underlying networking system that the caller is finished using the named feature. The interpretation of {@code feature} is completely up to each networking implementation. The interpretation of this value is specific to each networking implementation+feature combination, except that the value {@code -1} always indicates failure.
Ensure that a network route exists to deliver traffic to the specified host via the specified network interface. An attempt to add a route that already exists is ignored, but treated as successful. host is to be routed
Ensure that a network route exists to deliver traffic to the specified host via the specified network interface. An attempt to add a route that already exists is ignored, but treated as successful. host is to be routed
copy constructor {@hide}
This sends a notification right before DHCP request/renewal so that the controller can do certain actions before DHCP packets are sent out. When the controller is ready, it sends a CMD_PRE_DHCP_ACTION_COMPLETE message to indicate DHCP can continue This is used by Wifi at this time for the purpose of doing BT-Wifi coex handling during Dhcp
Returns a list of DNS addresses, coming from either the link properties of the specified connection or the default system DNS if the link properties has no dnses.
Send a ping.  The response will come via a {@link #DNS_PING_RESULT} to the handler specified at creation.
Returns whether the download is completed
Returns whether the download is successful
Gets a Cursor pointing to the download(s) of the current system update.
Returns a StatusInfo with the result of trying to download the given URL.  Returns null if no attempts have been made.
The column for the id in the Cursor returned by getProgressCursor()
The column for the current byte count in the Cursor returned by getProgressCursor()
The column for the total byte count in the Cursor returned by getProgressCursor()
Returns a Cursor representing the progress of the download identified by the ID.
Get the mime tupe of the download specified by the download id
Delete a download by Id
Open a filedescriptor to a particular download
Open a stream to a particular download
Initiate a download where the download will be tracked by its URI.
Gets the status of a download.
Create a new DummyDataStateTracker
Begin monitoring data connectivity.
Report whether data connectivity is possible.
Tear down mobile data connectivity, i.e., disable the ability to create mobile data connections. TODO - make async and return nothing?
Record the detailed state of a network, and if it is a change from the previous state, send a notification to any listeners. if one was supplied. May be {@code null}.
Re-enable mobile data connectivity after a {@link #teardown()}. TODO - make async and always get a notification?
Turn on or off the mobile radio. No connectivity will be possible while the radio is off. The operation is a no-op if the radio is already in the desired state.
Policy control over specific {@link NetworkStateTracker}.
Return list of interface pairs that are actively tethered.  Even indexes are remote interface, and odd indexes are corresponding local interfaces.
Cast an IBinder object into an android.net.INetworkManagementEventObserver interface, generating a proxy if needed.
Interface configuration status has changed.
Interface physical-layer link state has changed.  For Ethernet, this method is invoked when the cable is plugged in or unplugged.
An interface has been added to the system
An interface has been removed from the system
A networking quota limit has been reached. The quota might not be specific to an interface.
Control UID policies.
Control network policies atomically.
Snooze limit on policy matching given template.
Control if background data is restricted system-wide.
Cast an IBinder object into an android.net.INetworkStatsService interface, generating a proxy if needed.
Return historical network layer stats for traffic that matches template.
Return historical network layer stats for specific UID traffic that matches template.
Return network layer usage summary for traffic that matches template.
Return network layer usage summary per UID for traffic that matches template.
Return data layer snapshot of UID network usage.
Increment data layer count of operations performed for UID and tag.
Mark given UID as being in foreground for stats purposes.
Force update of statistics.
This function determines if the interface is up and has a valid IP configuration (IP address has a non zero octet). Note: It is supposed to be quick and hence should not initiate any network activity
Cast an IBinder object into an android.net.IThrottleManager interface, generating a proxy if needed.
Returns whether this map contains the specified key.
Returns whether this map contains the specified value.
Returns a set containing all of the mappings in this map. Each mapping is an instance of {@link Map.Entry}. As the set is backed by this map, changes in one will be reflected in the other.
Default constructor
Creates a new unconnected socket.
Creates a new unconnected socket usign the given proxy type.
Set the {@code LinkCapabilies} needed for this socket.  If the socket is already connected or is a duplicate socket the request is ignored and {@code false} will be returned. A needs map can be created via the {@code createNeedsMap} static method.
Returns this LinkSockets set of capabilities, filtered according to the given {@code Set}.  Capabilities in the Set but not available from the link will not be reported in the results.  Capabilities of the link but not listed in the Set will also not be reported in the results.
Provide the set of capabilities the application is interested in tracking for this LinkSocket.
Connects this socket to the given remote host address and port specified by dstName and dstPort.
Connect a duplicate socket socket to the same remote host address and port as the original with a timeout parameter.
Connect a duplicate socket socket to the same remote host address and port as the original.
Request that a new LinkSocket be created using a different radio (such as WiFi or 3G) than the current LinkSocket.  If a different radio is available a call back will be made via {@code onBetterLinkAvail}. If unable to find a better radio, application will be notified via {@code onNewLinkUnavailable}
Crewates a new server socket listening at specified name. On the Android platform, the name is created in the Linux abstract namespace (instead of on the filesystem).
Create a LocalServerSocket from a file descriptor that's already been created and bound. listen() will be called immediately on it. Used for cases where file descriptors are passed in via environment variables
Obtains the socket's local address
Accepts a new connection to the socket. Blocks until a new connection arrives.
Returns file descriptor or null if not yet open/already closed
Closes server socket.
Creates a AF_LOCAL/UNIX domain stream socket.
for use with AndroidServerSocket
It's difficult to discern from the spec when impl.create() should be called, but it seems like a reasonable rule is "as soon as possible, but not in a context where IOException cannot be thrown"
Connects this socket to an endpoint. May only be called on an instance that has not yet been connected. not exist.
Binds this socket to an endpoint name. May only be called on an instance that has not yet been bound.
Retrieves the name that this socket is bound to, if any.
Retrieves the input stream for this instance.
Retrieves the output stream for this instance.
Closes the socket.
Shuts down the input side of the socket.
Shuts down the output side of the socket.
Enqueues a set of file descriptors to send to the peer. The queue is one deep. The file descriptors will be sent with the next write of normal data, and will be delivered in a single ancillary message. See "man 7 unix" SCM_RIGHTS on a desktop Linux machine.
Retrieves a set of file descriptors that a peer has sent through an ancillary message. This method retrieves the most recent set sent, and then returns null until a new set arrives. File descriptors may only be passed along with regular data, so this method can only return a non-null after a read operation.
Retrieves the credentials of this socket's peer. Only valid on connected sockets.
Creates an instance with a given name.
Creates an instance with a given name in the {@link Namespace#ABSTRACT} namespace
Retrieves the string name of this address
Returns the namespace used by this address.
Create a new instance from a file descriptor representing a bound socket. The state of the file descriptor is not checked here but the caller can verify socket state by calling listen().
Creates a socket in the underlying OS. datagram.
note timeout presently ignored
Returns the number of bytes available for reading without blocking.
Retrieves the socket name from the OS.
Test to see if the given string is a mailto URL
Parse and decode a mailto scheme string. This parser implements RFC 2368. The returned object can be queried for the parsed parameters.
Retrieve the To address line from the parsed mailto URL. This could be several email address that are comma-space delimited. If no To line was specified, then null is return
Retrieve the CC address line from the parsed mailto URL. This could be several email address that are comma-space delimited. If no CC line was specified, then null is return
Retrieve the subject line from the parsed mailto URL. If no subject line was specified, then null is return
Retrieve the body line from the parsed mailto URL. If no body line was specified, then null is return
Retrieve all the parsed email headers from the mailto URL
Private constructor. The only way to build a Mailto object is through the parse() method.
Create a new MobileDataStateTracker
carrier dependency is met/unmet
Internal method supporting the ENABLE_MMS feature. {@code false} to disable it.
input string from config.xml resource.  Uses the form: [Connection name],[ConnectivityManager connection type], [associated radio-type],[priority],[dependencyMet]
Indicates if this network is supposed to be default-routable
Build a {@link NetworkIdentity} from the given {@link NetworkState}, assuming that any mobile networks are using the current IMSI.
Reports the type of network (currently mobile or Wi-Fi) to which the info in this object pertains.
Return a network-type-specific integer describing the subtype of the network.
Return a human-readable name describe the type of the network, for example "WIFI" or "MOBILE".
Return a human-readable name describing the subtype of the network.
Indicates whether network connectivity exists or is in the process of being established. This is good for applications that need to do anything related to the network other than read or write data. For the latter, call {@link #isConnected()} instead, which guarantees that the network is fully usable. of being established, {@code false} otherwise.
Indicates whether network connectivity exists and it is possible to establish connections and pass data.
Indicates whether network connectivity is possible. A network is unavailable when a persistent or semi-persistent condition prevents the possibility of connecting to that network. Examples include <ul> <li>The device is out of the coverage area for any network of this type.</li> <li>The device is on a network other than the home network (i.e., roaming), and data roaming has been disabled.</li> <li>The device's radio is turned off, e.g., because airplane mode is enabled.</li> </ul>
Sets if the network is available, ie, if the connectivity is possible.
Indicates whether the current attempt to connect to the network resulted from the ConnectivityManager trying to fail over to this network following a disconnect from another network. otherwise.
Set the failover boolean. as a failover.
Indicates whether the device is currently roaming on this network. When {@code true}, it suggests that use of data on this network may incur extra costs.
Reports the current coarse-grained state of the network.
Reports the current fine-grained state of the network.
Sets the fine-grained state of the network. if one was supplied. May be {@code null}. information passed up from the lower networking layers.
Report the reason an attempt to establish connectivity failed, if one is available.
Report the extra information about the network state, if any was provided by the lower networking layers., if one is available.
Snap to the cycle day for the current month given; when cycle day doesn't exist, it snaps to 1st of following month.
Check if given UID can have a {@link #setUidPolicy(int, int)} defined, usually to protect critical system services.
Add new stats entry, copying from given {@link Entry}. The {@link Entry} object can be recycled across multiple calls.
Return specific stats entry.
Return age of this {@link NetworkStats} object with respect to {@link SystemClock#elapsedRealtime()}.
Combine given values with an existing row, or create a new row if {@link #findIndex(String, int, int, int)} is unable to find match. Can also be used to subtract values from existing rows.
Combine all values from another {@link NetworkStats} into this object.
Find first stats index that matches the requested parameters.
Splice in {@link #operations} from the given {@link NetworkStats} based on matching {@link #uid} and {@link #tag} rows. Ignores {@link #iface}, since operation counts are at data layer.
Return list of unique interfaces known by this data structure.
Return list of unique UIDs known by this data structure.
Return total bytes represented by this snapshot object, usually used when checking if a {@link #subtract(NetworkStats)} delta passes a threshold.
Return total of all fields represented by this snapshot object.
Return total of all fields represented by this snapshot object matching the requested {@link #uid}.
Return total of all fields represented by this snapshot object matching the requested {@link #iface}.
Return total of all fields represented by this snapshot object matching the requested {@link #iface} and {@link #uid}.
Subtract the given {@link NetworkStats}, effectively leaving the delta between two snapshots in time. Assumes that statistics rows collect over time, and that none of them have disappeared.
Subtract the given {@link NetworkStats}, effectively leaving the delta between two snapshots in time. Assumes that statistics rows collect over time, and that none of them have disappeared. <p> Instead of throwing when counters are non-monotonic, this variant clamps results to never be negative.
Return total statistics grouped by {@link #iface}; doesn't mutate the original structure.
Return total statistics grouped by {@link #uid}; doesn't mutate the original structure.
Return text description of {@link #set} value.
Return text description of {@link #tag} value.
Return index of bucket that contains or is immediately before the requested time.
Return index of bucket that contains or is immediately after the requested time.
Record that data traffic occurred in the given time range. Will distribute across internal buckets, creating new buckets as needed.
Record an entire {@link NetworkStatsHistory} into this history. Usually for combining together stats for external reporting.
Ensure that buckets exist for given time range, creating as needed.
Insert new bucket at requested index and starting time.
Remove buckets older than requested cutoff.
Return interpolated data usage across the requested range. Interpolates across buckets, so values may be rounded slightly.
Read variable-length {@link Long} using protobuf-style approach.
Write variable-length {@link Long} using protobuf-style approach.
Template to combine all {@link ConnectivityManager#TYPE_MOBILE} style networks together. Only uses statistics for requested IMSI.
Template to combine all {@link ConnectivityManager#TYPE_MOBILE} style networks together that roughly meet a "3G" definition, or lower. Only uses statistics for requested IMSI.
Template to combine all {@link ConnectivityManager#TYPE_MOBILE} style networks together that meet a "4G" definition. Only uses statistics for requested IMSI.
Template to combine all {@link ConnectivityManager#TYPE_WIFI} style networks together.
Return the proxy object to be used for the URL given as parameter. {@hide}
Return the proxy host set by the user.
Return the proxy port set by the user.
Return the default proxy host specified by the carrier. this carrier.
Return the default proxy port specified by the carrier. no proxy for this carrier.
Returns the preferred proxy to be used by clients. This is a wrapper around {@link android.net.Proxy#getHost()}. {@link android.net.Proxy#getHost()} android.permission.ACCESS_NETWORK_STATE is no proxy. {@hide}
Validate syntax of hostname, port and exclusion list entries {@hide}
comma separated
Sends an SNTP request to the given host and processes the response.
Returns the time computed from the NTP transaction.
Returns the reference clock value (value of SystemClock.elapsedRealtime()) corresponding to the NTP time.
Returns the round trip time of the NTP transaction
Reads an unsigned 32 bit big endian number from the given offset in the buffer.
Reads the NTP time stamp at the given offset in the buffer and returns it as a system time (milliseconds since January 1, 1970).
Writes system time (milliseconds since January 1, 1970) as an NTP time stamp at the given offset in the buffer.
Returns a new socket factory instance with an optional handshake timeout.
Returns a new socket factory instance with an optional handshake timeout and SSL session cache.
Returns a new instance of a socket factory with all SSL security checks disabled, using an optional handshake timeout and SSL session cache. <p class="caution"><b>Warning:</b> Sockets created using this factory are vulnerable to man-in-the-middle attacks!</p>
Returns a socket factory (also named SSLSocketFactory, but in a different namespace) for use with the Apache HTTP stack.
Verify the hostname of the certificate used by the other end of a connected socket.  You MUST call this if you did not supply a hostname to {@link #createSocket()}.  It is harmless to call this method redundantly if the hostname has already been verified. <p>Wildcard certificates are allowed to verify any matching hostname, so "foo.bar.example.com" is verified if the peer has a certificate for "*.example.com".
Sets the {@link TrustManager}s to be used for connections made by this factory.
Sets the {@link KeyManager}s to be used for connections made by this factory.
Create a session cache using the specified directory. Individual session entries will be files within the directory. Multiple instances for the same directory share data internally.
Create a session cache at the default location for this app. Multiple instances share data internally.
returns a long of the ms from the epoch to the time the current cycle ends for the named interface {@hide}
returns a long of the ms from the epoch to the time the current cycle started for the named interface {@hide}
returns a long of the byte count either read or written on the named interface for the period described.  Direction is either DIRECTION_RX or DIRECTION_TX and period may only be PERIOD_CYCLE for the current cycle (other periods may be supported in the future).  Ago indicates the number of periods in the past to lookup - 0 means the current period, 1 is the last one, 2 was two periods ago.. {@hide}
returns the number of bytes read+written after which a particular cliff takes effect on the named iface.  Currently only cliff #1 is supported (1 step) {@hide}
returns the thottling bandwidth (bps) for a given cliff # on the named iface. only cliff #1 is currently supported. {@hide}
returns the help URI for throttling {@hide}
Set active tag to use when accounting {@link Socket} traffic originating from the current thread. Only one active tag per thread is supported. <p> Changes only take effect during subsequent calls to {@link #tagSocket(Socket)}. <p> Tags between {@code 0xFFFFFF00} and {@code 0xFFFFFFFF} are reserved and used internally by system services like {@link DownloadManager} when performing traffic on behalf of an application.
Set specific UID to use when accounting {@link Socket} traffic originating from the current thread. Designed for use when performing an operation on behalf of another application. <p> Changes only take effect during subsequent calls to {@link #tagSocket(Socket)}. <p> To take effect, caller must hold {@link android.Manifest.permission#UPDATE_DEVICE_STATS} permission. {@hide}
Start profiling data usage for current UID. Only one profiling session can be active at a time.
Stop profiling data usage for current UID.
Return detailed {@link NetworkStats} for the current UID. Requires no special permission.
Return a string representation of the URI that is safe to print to logs and other places where PII should be avoided.
Creates a Uri from a file. The URI has the form '/'. <p>Example: "file:///tmp/android.txt"
Clears the the previously set query.
Returns a set of the unique names of all query parameters. Iterating over the set will return the names in order of their first occurrence.
Searches the query string for the first value with the given key and interprets it as a boolean value. "false" and "0" are interpreted as <code>false</code>, everything else is interpreted as <code>true</code>.
Writes a Uri to a Parcel.
Construct a parameter-value tuple.
Construct a sanitizer. The parameters set the behavior of the sanitizer.
Sanitize a value. <ol> <li>If script URLs are not OK, the will be removed. <li>If neither spaces nor other white space is OK, then white space will be trimmed from the beginning and end of the URL. (Just the actual white space characters are trimmed, not other control codes.) <li> Illegal characters will be replaced with either ' ' or '_', depending on whether a space is itself a legal character. </ol>
Trim whitespace from the beginning and end of a string. <p> Note: can't use {@link String#trim} because {@link String#trim} has a different definition of whitespace than we want.
Check if c is whitespace.
Check whether an individual character is legal. Uses the flag bit-set passed into the constructor.
Get the current value sanitizer used when processing unregistered parameter values. <p> <b>Note:</b> The default unregistered parameter value sanitizer is one that doesn't allow any special characters, similar to what is returned by calling createAllIllegal. parameter values.
Set the value sanitizer used when processing unregistered parameter values. parameter values.
Return a value sanitizer that does not allow any special characters, and also does not allow script URLs.
Return a value sanitizer that allows everything except Nul ('\0') characters. Script URLs are allowed.
Return a value sanitizer that allows everything except Nul ('\0') characters, space (' '), and other whitespace characters. Script URLs are allowed.
Return a value sanitizer that allows all the characters used by encoded URLs. Does not allow script URLs.
Return a value sanitizer that allows all the characters used by encoded URLs and allows spaces, which are not technically legal in encoded URLs, but commonly appear anyway. Does not allow script URLs.
Return a value sanitizer that does not allow any special characters except ampersand ('&'). Does not allow script URLs.
Return a value sanitizer that does not allow any special characters except ampersand ('&') and space (' '). Does not allow script URLs.
Return a value sanitizer that does not allow any special characters except space (' '). Does not allow script URLs.
Return a value sanitizer that allows any special characters except angle brackets ('<' and '>') and Nul ('\0'). Allows script URLs.
Constructs a UrlQuerySanitizer and parse a URL. This constructor is provided for convenience when the default parsing behavior is acceptable. <p> Because the URL is parsed before the constructor returns, there isn't a chance to configure the sanitizer to change the parsing behavior. <p> <code> UrlQuerySanitizer sanitizer = new UrlQuerySanitizer(myUrl); String name = sanitizer.getValue("name"); </code> <p> Defaults: <ul> <li>unregistered parameters <em>are</em> allowed. <li>the last instance of a repeated parameter is preferred. <li>The default value sanitizer is an AllIllegal value sanitizer. <ul>
Parse the query parameters out of an encoded URL. Works by extracting the query portion from the URL and then calling parseQuery(). If there is no query portion it is treated as if the query portion is an empty string.
Parse a query. A query string is any number of parameter-value clauses separated by any non-zero number of ampersands. A parameter-value clause is a parameter followed by an equal sign, followed by a value. If the equal sign is missing, the value is assumed to be the empty string.
Get a set of all of the parameters found in the sanitized query. <p> Note: Do not modify this set. Treat it as a read-only set.
An array list of all of the parameter value pairs in the sanitized query, in the order they appeared in the query. May contain duplicate parameters. <p class="note"><b>Note:</b> Do not modify this list. Treat it as a read-only list.</p>
Check if a parameter exists in the current sanitized query.
Get the value for a parameter in the current sanitized query. Returns null if the parameter does not exit. or null if the parameter does not exist.
Register a value sanitizer for a particular parameter. Can also be used to replace or remove an already-set value sanitizer. <p> Registering a non-null value sanitizer for a particular parameter makes that parameter a registered parameter. parameter. May be null in order to unregister that parameter.
Register a value sanitizer for an array of parameters.
Set whether or not unregistered parameters are allowed. If they are not allowed, then they will be dropped when a query is sanitized. <p> Defaults to false.
Get whether or not unregistered parameters are allowed. If not allowed, they will be dropped when a query is parsed.
Set whether or not the first occurrence of a repeated parameter is preferred. True means the first repeated parameter is preferred. False means that the last repeated parameter is preferred. <p> The preferred parameter is the one that is returned when getParameter is called. <p> defaults to false. parameter is preferred.
Get whether or not the first occurrence of a repeated parameter is preferred. preferred.
Parse an escaped parameter-value pair. The default implementation unescapes both the parameter and the value, then looks up the effective value sanitizer for the parameter and uses it to sanitize the value. If all goes well then addSanitizedValue is called with the unescaped parameter and the sanitized unescaped value.
Record a sanitized parameter-value pair. Override if you want to do additional filtering or validation.
Get the value sanitizer for a parameter. Returns null if there is no value sanitizer registered for the parameter.
Get the effective value sanitizer for a parameter. Like getValueSanitizer, except if there is no value sanitizer registered for a parameter, and unregistered paramaters are allowed, then the default value sanitizer is returned.
Unescape an escaped string. <ul> <li>'+' characters are replaced by ' ' characters. <li>Valid "%xx" escape sequences are replaced by the corresponding unescaped character. <li>Invalid escape sequences such as %1z", are passed through unchanged. <ol>
Test if a character is a hexidecimal digit. Both upper case and lower case hex digits are allowed.
Convert a character that represents a hexidecimal digit into an integer. If the character is not a hexidecimal digit, then -1 is returned. Both upper case and lower case hex digits are allowed.
Clear the existing entries. Called to get ready to parse a new query string.
Use IConnectivityManager since those methods are hidden and not available in ConnectivityManager.
Prepare to establish a VPN connection. This method returns {@code null} if the VPN application is already prepared. Otherwise, it returns an {@link Intent} to a system activity. The application should launch the activity using {@link Activity#startActivityForResult} to get itself prepared. The activity may pop up a dialog to require user action, and the result will come back via its {@link Activity#onActivityResult}. If the result is {@link Activity#RESULT_OK}, the application becomes prepared and is granted to use other methods in this class. <p>Only one application can be granted at the same time. The right is revoked when another application is granted. The application losing the right will be notified via its {@link #onRevoke}. Unless it becomes prepared again, subsequent calls to other methods in this class will fail.
Protect a socket from VPN connections. The socket will be bound to the current default network interface, so its traffic will not be forwarded through VPN. This method is useful if some connections need to be kept outside of VPN. For example, a VPN tunnel should protect itself if its destination is covered by VPN routes. Otherwise its outgoing packets will be sent back to the VPN interface and cause an infinite loop. This method will fail if the application is not prepared or is revoked. <p class="note">The socket is NOT closed by this method.
Convenience method to protect a {@link Socket} from VPN connections.
Convenience method to protect a {@link DatagramSocket} from VPN connections.
Invoked when the application is revoked. At this moment, the VPN interface is already deactivated by the system. The application should close the file descriptor and shut down gracefully. The default implementation of this method is calling {@link Service#stopSelf()}. <p class="note">Calls to this method may not happen on the main thread of the process.
Set the name of this session. It will be displayed in system-managed dialogs and notifications. This is recommended not required.
Set the {@link PendingIntent} to an activity for users to configure the VPN connection. If it is not set, the button to configure will not be shown in system-managed dialogs.
Set the maximum transmission unit (MTU) of the VPN interface. If it is not set, the default value in the operating system will be used.
Private method to validate address and prefixLength.
Add a network address to the VPN interface. Both IPv4 and IPv6 addresses are supported. At least one address must be set before calling {@link #establish}.
Convenience method to add a network address to the VPN interface using a numeric address string. See {@link InetAddress} for the definitions of numeric address formats.
Add a network route to the VPN interface. Both IPv4 and IPv6 routes are supported.
Convenience method to add a network route to the VPN interface using a numeric address string. See {@link InetAddress} for the definitions of numeric address formats.
Add a DNS server to the VPN connection. Both IPv4 and IPv6 addresses are supported. If none is set, the DNS servers of the default network will be used.
Convenience method to add a DNS server to the VPN connection using a numeric address string. See {@link InetAddress} for the definitions of numeric address formats.
Add a search domain to the DNS resolver.
Create a VPN interface using the parameters supplied to this builder. The interface works on IP packets, and a file descriptor is returned for the application to access them. Each read retrieves an outgoing packet which was routed to the interface. Each write injects an incoming packet just like it was received from the interface. The file descriptor is put into non-blocking mode by default to avoid blocking Java threads. To use the file descriptor completely in native space, see {@link ParcelFileDescriptor#detachFd()}. The application MUST close the file descriptor when the VPN connection is terminated. The VPN interface will be removed and the network will be restored by the system automatically. <p>To avoid conflicts, there can be only one active VPN interface at the same time. Usually network parameters are never changed during the lifetime of a VPN connection. It is also common for an application to create a new file descriptor after closing the previous one. However, it is rare but not impossible to have two interfaces while performing a seamless handover. In this case, the old interface will be deactivated when the new one is created successfully. Both file descriptors are valid but now outgoing packets will be routed to the new interface. Therefore, after draining the old file descriptor, the application MUST close it and start using the new file descriptor. If the new interface cannot be created, the existing interface and its file descriptor remain untouched. <p>An exception will be thrown if the interface cannot be created for any reason. However, this method returns {@code null} if the application is not prepared or is revoked. This helps solve possible race conditions between other VPN applications.
parses given uriString.
package*/ final Tag mTag; package*/ boolean mIsConnected; package*/ int mSelectedTechnology;
Internal helper to throw IllegalStateException if the technology isn't connected
Internal getMaxTransceiveLength()
Internal transceive
Get an instance of {@link IsoDep} for the given tag. <p>Does not cause any RF activity and does not block. <p>Returns null if {@link IsoDep} was not enumerated in {@link Tag#getTechList}. This indicates the tag does not support ISO-DEP.
Set the timeout of {@link #transceive} in milliseconds. <p>The timeout only applies to ISO-DEP {@link #transceive}, and is reset to a default value when {@link #close} is called. <p>Setting a longer timeout may be useful when performing transactions that require a long processing time on the tag such as key generation. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Get the current timeout for {@link #transceive} in milliseconds. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Return the ISO-DEP historical bytes for {@link NfcA} tags. <p>Does not cause any RF activity and does not block. <p>The historical bytes can be used to help identify a tag. They are present only on {@link IsoDep} tags that are based on {@link NfcA} RF technology. If this tag is not {@link NfcA} then null is returned. <p>In ISO 14443-4 terminology, the historical bytes are a subset of the RATS response.
Return the higher layer response bytes for {@link NfcB} tags. <p>Does not cause any RF activity and does not block. <p>The higher layer response bytes can be used to help identify a tag. They are present only on {@link IsoDep} tags that are based on {@link NfcB} RF technology. If this tag is not {@link NfcB} then null is returned. <p>In ISO 14443-4 terminology, the higher layer bytes are a subset of the ATTRIB response.
Send raw ISO-DEP data to the tag and receive the response. <p>Applications must only send the INF payload, and not the start of frame and end of frame indicators. Applications do not need to fragment the payload, it will be automatically fragmented and defragmented by {@link #transceive} if it exceeds FSD/FSC limits. <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum number of bytes that can be sent with {@link #transceive}. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Return the maximum number of bytes that can be sent with {@link #transceive}.
Get an instance of {@link MifareClassic} for the given tag. <p>Does not cause any RF activity and does not block. <p>Returns null if {@link MifareClassic} was not enumerated in {@link Tag#getTechList}. This indicates the tag is not MIFARE Classic compatible, or this Android device does not support MIFARE Classic.
Return the type of this MIFARE Classic compatible tag. <p>One of {@link #TYPE_UNKNOWN}, {@link #TYPE_CLASSIC}, {@link #TYPE_PLUS} or {@link #TYPE_PRO}. <p>Does not cause any RF activity and does not block.
Return the size of the tag in bytes <p>One of {@link #SIZE_MINI}, {@link #SIZE_1K}, {@link #SIZE_2K}, {@link #SIZE_4K}. These constants are equal to their respective size in bytes. <p>Does not cause any RF activity and does not block.
Return true if the tag is emulated, determined at discovery time. These are actually smart-cards that emulate a MIFARE Classic interface. They can be treated identically to a MIFARE Classic tag.
Return the number of MIFARE Classic sectors. <p>Does not cause any RF activity and does not block.
Return the total number of MIFARE Classic blocks. <p>Does not cause any RF activity and does not block.
Return the number of blocks in the given sector. <p>Does not cause any RF activity and does not block.
Return the sector that contains a given block. <p>Does not cause any RF activity and does not block.
Return the first block of a given sector. <p>Does not cause any RF activity and does not block.
Authenticate a sector with key A. <p>Successful authentication of a sector with key A enables other I/O operations on that sector. The set of operations granted by key A key depends on the ACL bits set in that sector. For more information <p>A failed authentication attempt causes an implicit reconnection to the tag, so authentication to other sectors will be lost. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Authenticate a sector with key B. <p>Successful authentication of a sector with key B enables other I/O operations on that sector. The set of operations granted by key B depends on the ACL bits set in that sector. For more information <p>A failed authentication attempt causes an implicit reconnection to the tag, so authentication to other sectors will be lost. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Read 16-byte block. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Write 16-byte block. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Increment a value block, storing the result in the temporary block on the tag. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Decrement a value block, storing the result in the temporary block on the tag. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Copy from the temporary block to a value block. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Copy from a value block to the temporary block. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Send raw NfcA data to a tag and receive the response. <p>This is equivalent to connecting to this tag via {@link NfcA} and calling {@link NfcA#transceive}. Note that all MIFARE Classic tags are based on {@link NfcA} technology. <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum number of bytes that can be sent with {@link #transceive}. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Set the {@link #transceive} timeout in milliseconds. <p>The timeout only applies to {@link #transceive} on this object, and is reset to a default value when {@link #close} is called. <p>Setting a longer timeout may be useful when performing transactions that require a long processing time on the tag such as key generation. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Get the current {@link #transceive} timeout in milliseconds. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Get an instance of {@link MifareUltralight} for the given tag. <p>Returns null if {@link MifareUltralight} was not enumerated in {@link Tag#getTechList} - this indicates the tag is not MIFARE Ultralight compatible, or that this Android device does not implement MIFARE Ultralight. <p>Does not cause any RF activity and does not block.
Return the MIFARE Ultralight type of the tag. <p>One of {@link #TYPE_ULTRALIGHT} or {@link #TYPE_ULTRALIGHT_C} or {@link #TYPE_UNKNOWN}. <p>Depending on how the tag has been formatted, it can be impossible to accurately classify between original MIFARE Ultralight and Ultralight C. So treat this method as a hint. <p>Does not cause any RF activity and does not block.
Read 4 pages (16 bytes). <p>The MIFARE Ultralight protocol always reads 4 pages at a time, to reduce the number of commands required to read an entire tag. <p>If a read spans past the last readable block, then the tag will return pages that have been wrapped back to the first blocks. MIFARE Ultralight tags have readable blocks 0x00 through 0x0F. So a read to block offset 0x0E would return blocks 0x0E, 0x0F, 0x00, 0x01. MIFARE Ultralight C tags have readable blocks 0x00 through 0x2B. So a read to block 0x2A would return blocks 0x2A, 0x2B, 0x00, 0x01. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Write 1 page (4 bytes). <p>The MIFARE Ultralight protocol always writes 1 page at a time, to minimize EEPROM write cycles. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Get an instance of {@link Ndef} for the given tag. <p>Returns null if {@link Ndef} was not enumerated in {@link Tag#getTechList}. This indicates the tag is not NDEF formatted, or that this tag is NDEF formatted but under a vendor specification that this Android device does not implement. <p>Does not cause any RF activity and does not block.
Internal constructor, to be used by NfcAdapter
Get the {@link NdefMessage} that was read from the tag at discovery time. <p>If the NDEF Message is modified by an I/O operation then it will not be updated here, this function only returns what was discovered when the tag entered the field. <p>Does not cause any RF activity and does not block.
Get the NDEF tag type. <p>Returns one of {@link #NFC_FORUM_TYPE_1}, {@link #NFC_FORUM_TYPE_2}, {@link #NFC_FORUM_TYPE_3}, {@link #NFC_FORUM_TYPE_4}, {@link #MIFARE_CLASSIC} or another NDEF tag type that has not yet been formalized in this Android API. <p>Does not cause any RF activity and does not block.
Get the maximum NDEF message size in bytes. <p>Does not cause any RF activity and does not block.
Determine if the tag is writable. <p>NFC Forum tags can be in read-only or read-write states. <p>Does not cause any RF activity and does not block. <p>Requires {@link android.Manifest.permission#NFC} permission.
Read the current {@link android.nfc.NdefMessage} on this tag. <p>This always reads the current NDEF Message stored on the tag. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread.
Overwrite the {@link NdefMessage} on this tag. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Indicates whether a tag can be made read-only with {@link #makeReadOnly()}. <p>Does not cause any RF activity and does not block.
Make a tag read-only. <p>This sets the CC field to indicate the tag is read-only, and where possible permanently sets the lock bits to prevent any further modification of the memory. <p>This is a one-way process and cannot be reverted! <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Get an instance of {@link NdefFormatable} for the given tag. <p>Does not cause any RF activity and does not block. <p>Returns null if {@link NdefFormatable} was not enumerated in {@link Tag#getTechList}. This indicates the tag is not NDEF formatable by this Android device.
Internal constructor, to be used by NfcAdapter
Format a tag as NDEF, and write a {@link NdefMessage}. <p>This is a multi-step process, an IOException is thrown if any one step fails. <p>The card is left in a read-write state after this operation. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Formats a tag as NDEF, write a {@link NdefMessage}, and make read-only. <p>This is a multi-step process, an IOException is thrown if any one step fails. <p>The card is left in a read-only state if this method returns successfully. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Get an instance of {@link NfcA} for the given tag. <p>Returns null if {@link NfcA} was not enumerated in {@link Tag#getTechList}. This indicates the tag does not support NFC-A. <p>Does not cause any RF activity and does not block.
Return the ATQA/SENS_RES bytes from tag discovery. <p>Does not cause any RF activity and does not block.
Return the SAK/SEL_RES bytes from tag discovery. <p>Does not cause any RF activity and does not block.
Send raw NFC-A commands to the tag and receive the response. <p>Applications must not append the EoD (CRC) to the payload, it will be automatically calculated. <p>Applications must only send commands that are complete bytes, for example a SENS_REQ is not possible (these are used to manage tag polling and initialization). <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum number of bytes that can be sent with {@link #transceive}. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Get an instance of {@link NfcB} for the given tag. <p>Returns null if {@link NfcB} was not enumerated in {@link Tag#getTechList}. This indicates the tag does not support NFC-B. <p>Does not cause any RF activity and does not block.
Return the Application Data bytes from ATQB/SENSB_RES at tag discovery. <p>Does not cause any RF activity and does not block.
Return the Protocol Info bytes from ATQB/SENSB_RES at tag discovery. <p>Does not cause any RF activity and does not block.
Send raw NFC-B commands to the tag and receive the response. <p>Applications must not append the EoD (CRC) to the payload, it will be automatically calculated. <p>Applications must not send commands that manage the polling loop and initialization (SENSB_REQ, SLOT_MARKER etc). <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum number of bytes that can be sent with {@link #transceive}. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Get an instance of {@link NfcF} for the given tag. <p>Returns null if {@link NfcF} was not enumerated in {@link Tag#getTechList}. This indicates the tag does not support NFC-F. <p>Does not cause any RF activity and does not block.
Return the System Code bytes from tag discovery. <p>Does not cause any RF activity and does not block.
Return the Manufacturer bytes from tag discovery. <p>Does not cause any RF activity and does not block.
Send raw NFC-F commands to the tag and receive the response. <p>Applications must not append the SoD (length) or EoD (CRC) to the payload, it will be automatically calculated. <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum amount of bytes that can be sent with {@link #transceive}. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Get an instance of {@link NfcV} for the given tag. <p>Returns null if {@link NfcV} was not enumerated in {@link Tag#getTechList}. This indicates the tag does not support NFC-V. <p>Does not cause any RF activity and does not block.
Return the Response Flag bytes from tag discovery. <p>Does not cause any RF activity and does not block.
Return the DSF ID bytes from tag discovery. <p>Does not cause any RF activity and does not block.
Send raw NFC-V commands to the tag and receive the response. <p>Applications must not append the CRC to the payload, it will be automatically calculated. The application does provide FLAGS, CMD and PARAMETER bytes. <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum amount of bytes that can be sent with {@link #transceive}. <p>This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with {@link IOException} if {@link #close} is called from another thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Cast an IBinder object into an android.nfc.INdefPushCallback interface, generating a proxy if needed.
Cast an IBinder object into an android.nfc.INfcAdapter interface, generating a proxy if needed.
Cast an IBinder object into an android.nfc.INfcAdapterExtras interface, generating a proxy if needed.
Cast an IBinder object into an android.nfc.INfcTag interface, generating a proxy if needed.
Creates a LlcpPacket to be sent to a remote Service Access Point number (SAP)
Returns the remote Service Access Point number
Returns the data buffer
Create an NDEF message from raw bytes. <p> Validation is performed to make sure the Record format headers are valid, and the ID + TYPE + PAYLOAD fields are of the correct size.
Create an NDEF message from NDEF records.
Get the NDEF records inside this NDEF message.
Returns a byte array representation of this entire NDEF message.
Construct an NDEF Record. <p> Applications should not attempt to manually chunk NDEF Records - the implementation of android.nfc will automatically chunk an NDEF Record when necessary (and only present a single logical NDEF Record to the application). So applications should not use TNF_UNCHANGED.
Construct an NDEF Record from raw bytes. <p> Validation is performed to make sure the header is valid, and that the id, type and payload sizes appear to be valid.
Returns the 3-bit TNF. <p> TNF is the top-level type.
Returns the variable length Type field. <p> This should be used in conjunction with the TNF field to determine the payload format.
Returns the variable length ID.
Returns the variable length payload.
Helper to return the NdefRecord as a URI. TODO: Consider making a member method instead of static TODO: Consider more validation that this is a URI record TODO: Make a public API
Creates an Android application NDEF record. <p> This record indicates to other Android devices the package that should be used to handle the rest of the NDEF message. You can embed this record anywhere into your NDEF message to ensure that the intended package receives the message. <p> When an Android device dispatches an {@link NdefMessage} containing one or more Android application records, the applications contained in those records will be the preferred target for the NDEF_DISCOVERED intent, in the order in which they appear in the {@link NdefMessage}. This dispatch behavior was first added to Android in Ice Cream Sandwich. <p> If none of the applications are installed on the device, a Market link will be opened to the first application. <p> Note that Android application records do not overrule applications that have called {@link NfcAdapter#enableForegroundDispatch}.
Creates an NDEF record of well known type URI.
Returns this entire NDEF Record as a byte array.
onResume hook from fragment attached to activity
onPause hook from fragment attached to activity
onDestroy hook from fragment attached to activity
Get the NfcActivityState for the specified Activity. If create is true, then create it if it doesn't already exist, and ensure the NFC fragment is attached to the activity.
If the NfcActivityState is empty then remove it, and detach it from the Activity.
Register NfcActivityState with the NFC service.
Helper to check if this device has FEATURE_NFC, but without using a context. Equivalent to context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_NFC)
Returns the singleton, or throws if NFC is not available.
get handle to NFC service interface
Helper to get the default NFC Adapter. <p> Most Android devices will only have one NFC Adapter (NFC Controller). <p> This helper is the equivalent of: <pre>{@code NfcManager manager = (NfcManager) context.getSystemService(Context.NFC_SERVICE); NfcAdapter adapter = manager.getDefaultAdapter(); }</pre>
Does not currently need a context.
Returns the binder interface to the service.
Returns the binder interface to the tag service.
NFC service dead - attempt best effort recovery
Return true if this NFC Adapter has any features enabled. <p>Application may use this as a helper to suggest that the user should turn on NFC in Settings. <p>If this method returns false, the NFC hardware is guaranteed not to generate or respond to any NFC transactions.
Return the state of this NFC Adapter. <p>Returns one of {@link #STATE_ON}, {@link #STATE_TURNING_ON}, {@link #STATE_OFF}, {@link #STATE_TURNING_OFF}. <p>{@link #isEnabled()} is equivalent to <code>{@link #getAdapterState()} == {@link #STATE_ON}</code>
Enable NFC hardware. <p>This call is asynchronous. Listen for {@link #ACTION_ADAPTER_STATE_CHANGED} broadcasts to find out when the operation is complete. <p>If this returns true, then either NFC is already on, or a {@link #ACTION_ADAPTER_STATE_CHANGED} broadcast will be sent to indicate a state transition. If this returns false, then there is some problem that prevents an attempt to turn NFC on (for example we are in airplane mode and NFC is not toggleable in airplane mode on this platform).
Disable NFC hardware. <p>No NFC features will work after this call, and the hardware will not perform or respond to any NFC communication. <p>This call is asynchronous. Listen for {@link #ACTION_ADAPTER_STATE_CHANGED} broadcasts to find out when the operation is complete. <p>If this returns true, then either NFC is already off, or a {@link #ACTION_ADAPTER_STATE_CHANGED} broadcast will be sent to indicate a state transition. If this returns false, then there is some problem that prevents an attempt to turn NFC off.
Set the {@link NdefMessage} to push over NFC during the specified activities. <p>This method may be called at any time, but the NDEF message is only made available for NDEF push when one of the specified activities is in resumed (foreground) state. <p>Only one NDEF message can be pushed by the currently resumed activity. If both {@link #setNdefPushMessage} and {@link #setNdefPushMessageCallback} are set then the callback will take priority. <p>Pass a null NDEF message to disable foreground NDEF push in the specified activities. <p>At least one activity must be specified, and usually only one is necessary. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Set the callback to create a {@link NdefMessage} to push over NFC. <p>This method may be called at any time, but this callback is only made if one of the specified activities is in resumed (foreground) state. <p>Only one NDEF message can be pushed by the currently resumed activity. If both {@link #setNdefPushMessage} and {@link #setNdefPushMessageCallback} are set then the callback will take priority. <p>Pass a null callback to disable the callback in the specified activities. <p>At least one activity must be specified, and usually only one is necessary. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Set the callback on a successful NDEF push over NFC. <p>This method may be called at any time, but NDEF push and this callback can only occur when one of the specified activities is in resumed (foreground) state. <p>One or more activities must be specified. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Enable foreground dispatch to the given Activity. <p>This will give give priority to the foreground activity when dispatching a discovered {@link Tag} to an application. <p>If any IntentFilters are provided to this method they are used to match dispatch Intents for both the {@link NfcAdapter#ACTION_NDEF_DISCOVERED} and {@link NfcAdapter#ACTION_TAG_DISCOVERED}. Since {@link NfcAdapter#ACTION_TECH_DISCOVERED} relies on meta data outside of the IntentFilter matching for that dispatch Intent is handled by passing in the tech lists separately. Each first level entry in the tech list represents an array of technologies that must all be present to match. If any of the first level sets match then the dispatch is routed through the given PendingIntent. In other words, the second level is ANDed together and the first level entries are ORed together. <p>If you pass {@code null} for both the {@code filters} and {@code techLists} parameters that acts a wild card and will cause the foreground activity to receive all tags via the {@link NfcAdapter#ACTION_TAG_DISCOVERED} intent. <p>This method must be called from the main thread, and only when the activity is in the foreground (resumed). Also, activities must call {@link #disableForegroundDispatch} before the completion of their {@link Activity#onPause} callback to disable foreground dispatch after it has been enabled. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Disable foreground dispatch to the given activity. <p>After calling {@link #enableForegroundDispatch}, an activity must call this method before its {@link Activity#onPause} callback completes. <p>This method must be called from the main thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Disable NDEF message push over P2P. <p>After calling {@link #enableForegroundNdefPush}, an activity must call this method before its {@link Activity#onPause} callback completes. <p>Strongly recommend to use the new {@link #setNdefPushMessage} instead: it automatically hooks into your activity life-cycle, so you do not need to call enable/disable in your onResume/onPause. <p>This method must be called from the main thread. <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
Enable NDEF Push feature. <p>This API is for the Settings application.
Disable NDEF Push feature. <p>This API is for the Settings application.
Return true if NDEF Push feature is enabled. <p>This function can return true even if NFC is currently turned-off. This indicates that NDEF Push is not currently active, but it has been requested by the user and will be active as soon as NFC is turned on. <p>If you want to check if NDEF PUsh sharing is currently active, use <code>{@link #isEnabled()} && {@link #isNdefPushEnabled()}</code>
Attach NfcFragment to an activity (if not already attached).
Remove NfcFragment from activity.
Get the default NFC Adapter for this device.
Hidden constructor to be used by NFC service and internal classes.
Construct a mock Tag. <p>This is an application constructed tag, so NfcAdapter methods on this Tag may fail with {@link IllegalArgumentException} since it does not represent a physical Tag. <p>This constructor might be useful for mock testing.
For use by NfcService only.
Get the Tag Identifier (if it has one). <p>The tag identifier is a low level serial number, used for anti-collision and identification. <p> Most tags have a stable unique identifier (UID), but some tags will generate a random ID every time they are discovered (RID), and there are some tags with no ID at all (the byte array will be zero-sized). <p> The size and format of an ID is specific to the RF technology used by the tag. <p> This function retrieves the ID as determined at discovery time, and does not perform any further RF communication or block.
Get the technologies available in this tag, as fully qualified class names. <p> A technology is an implementation of the {@link TagTechnology} interface, and can be instantiated by calling the static <code>get(Tag)</code> method on the implementation with this Tag. The {@link TagTechnology} object can then be used to perform advanced, technology-specific operations on a tag. <p> Android defines a mandatory set of technologies that must be correctly enumerated by all Android NFC devices, and an optional set of proprietary technologies. See {@link TagTechnology} for more details. <p> The ordering of the returned array is undefined and should not be relied upon.
Rediscover the technologies available on this tag. <p> The technologies that are available on a tag may change due to operations being performed on a tag. For example, formatting a tag as NDEF adds the {@link Ndef} technology. The {@link rediscover} method reenumerates the available technologies on the tag and returns a new {@link Tag} object containing these technologies. <p> You may not be connected to any of this {@link Tag}'s technologies when calling this method. This method guarantees that you will be returned the same Tag if it is still in the field. <p>May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with {@link IOException} by calling {@link #close} from another thread. <p>Does not remove power from the RF field, so a tag having a random ID should not change its ID. TODO See if we need TagLostException TODO Unhide for ICS TODO Update documentation to make sure it matches with the final
For internal use only.
For internal use only.
For internal use only.
Convenience method to load an ETC1 texture whether or not the active OpenGL context supports the ETC1 texture compression format. Must be GL_RGB. Can be either GL_UNSIGNED_SHORT_5_6_5, which implies 16-bits-per-pixel, or GL_UNSIGNED_BYTE, which implies 24-bits-per-pixel.
Check if ETC1 texture compression is supported by the active OpenGL ES context.
Create a new ETC1Texture from an input stream containing a PKM formatted compressed texture.
Helper function that compresses an image into an ETC1Texture.
Helper function that writes an ETC1Texture to an output stream formatted as a PKM file.
Wrap an existing EGL interface in a new EGL interface that adds support for error checking and/or logging. optionally implement EGL11 as well.
--------------------------------------------------------------------- GL10 methods:
Draw Texture Extension
Control whether the EGL context is preserved when the GLSurfaceView is paused and resumed. <p> If set to true, then the EGL context may be preserved when the GLSurfaceView is paused. Whether the EGL context is actually preserved or not depends upon whether the Android device that the program is running on can support an arbitrary number of EGL contexts or not. Devices that can only support a limited number of EGL contexts must release the  EGL context in order to allow multiple applications to share the GPU. <p> If set to false, the EGL context will be released when the GLSurfaceView is paused, and recreated when the GLSurfaceView is resumed. <p> The default is false.
Install a custom EGLConfigChooser. <p>If this method is called, it must be called before {@link #setRenderer(Renderer)} is called. <p> If no setEGLConfigChooser method is called, then by default the view will choose an EGLConfig that is compatible with the current android.view.Surface, with a depth buffer depth of at least 16 bits.
Install a config chooser which will choose a config as close to 16-bit RGB as possible, with or without an optional depth buffer as close to 16-bits as possible. <p>If this method is called, it must be called before {@link #setRenderer(Renderer)} is called. <p> If no setEGLConfigChooser method is called, then by default the view will choose an RGB_565 surface with a depth buffer depth of at least 16 bits.
Install a config chooser which will choose a config with at least the specified depthSize and stencilSize, and exactly the specified redSize, greenSize, blueSize and alphaSize. <p>If this method is called, it must be called before {@link #setRenderer(Renderer)} is called. <p> If no setEGLConfigChooser method is called, then by default the view will choose an RGB_565 surface with a depth buffer depth of at least 16 bits.
return the internal format as defined by OpenGL ES of the supplied bitmap.
Return the type as defined by OpenGL ES of the supplied bitmap, if there is one. If the bitmap is stored in a compressed format, it may not have a valid OpenGL ES type.
Calls glTexImage2D() on the current OpenGL context. If no context is current the behavior is the same as calling glTexImage2D() with  no current context, that is, eglGetError() will return the appropriate error. Unlike glTexImage2D() bitmap cannot be null and will raise an exception in that case. All other parameters are identical to those used for glTexImage2D(). NOTE: this method doesn't change GL_UNPACK_ALIGNMENT, you must make sure to set it properly according to the supplied bitmap. Whether or not bitmap can have non power of two dimensions depends on the current OpenGL context. Always check glGetError() some time after calling this method, just like when using OpenGL directly.
A version of texImage2D() that takes an explicit type parameter as defined by the OpenGL ES specification. The actual type and internalformat of the bitmap must be compatible with the specified type and internalformat parameters.
A version of texImage2D that determines the internalFormat and type automatically.
Calls glTexSubImage2D() on the current OpenGL context. If no context is current the behavior is the same as calling glTexSubImage2D() with  no current context, that is, eglGetError() will return the appropriate error. Unlike glTexSubImage2D() bitmap cannot be null and will raise an exception in that case. All other parameters are identical to those used for glTexSubImage2D(). NOTE: this method doesn't change GL_UNPACK_ALIGNMENT, you must make sure to set it properly according to the supplied bitmap. Whether or not bitmap can have non power of two dimensions depends on the current OpenGL context. Always check glGetError() some time after calling this method, just like when using OpenGL directly.
A version of texSubImage2D() that takes an explicit type parameter as defined by the OpenGL ES specification.
Return a string for the EGL error code, or the hex representation if the error is unknown.
Override this method with an implementation that contructs and InputStream from the given filename.  For example, if the source files are to be retrieved using an AssetManager, the implementation would use AssetManager.load() to get the input stream.
Texture maps have the following format.  All integers are 16 bits, high byte first.  Pixels are in 5/6/5 RGB format, low byte first. width height pixel (0, 0) pixel (1, 0) ... pixel (width - 1, height - 1)
Registers an IMountServiceListener for receiving async notifications.
Unregisters an IMountServiceListener
Returns true if a USB mass storage host is connected
Enables / disables USB mass storage. The caller should check actual status of enabling/disabling USB mass storage via StorageEventListener.
Returns true if a USB mass storage host is enabled (media is shared)
Mount external storage at given mount point. Returns an int consistent with MountServiceResultCode
Safely unmount external storage at given mount point. The unmount is an asynchronous operation. Applications should register StorageEventListener for storage related status changes.
Format external storage given a mount point. Returns an int consistent with MountServiceResultCode
Returns an array of pids with open files on the specified path.
Gets the state of a volume via its mountpoint.
Creates a secure container with the specified parameters. Returns an int consistent with MountServiceResultCode
Destroy a secure container, and free up all resources associated with it. NOTE: Ensure all references are released prior to deleting. Returns an int consistent with MountServiceResultCode
Finalize a container which has just been created and populated. After finalization, the container is immutable. Returns an int consistent with MountServiceResultCode
Mount a secure container with the specified key and owner UID. Returns an int consistent with MountServiceResultCode
Unount a secure container. Returns an int consistent with MountServiceResultCode
Returns true if the specified container is mounted
Rename an unmounted secure container. Returns an int consistent with MountServiceResultCode
Returns the filesystem path of a mounted secure container.
Gets an Array of currently known secure container IDs
Shuts down the MountService and gracefully unmounts all external media. Invokes call back once the shutdown is complete.
Call into MountService by PackageManager to notify that its done processing the media status update request.
Mounts an Opaque Binary Blob (OBB) with the specified decryption key and only allows the calling process's UID access to the contents. MountService will call back to the supplied IObbActionListener to inform it of the terminal state of the call.
Unmounts an Opaque Binary Blob (OBB). When the force flag is specified, any program using it will be forcibly killed to unmount the image. MountService will call back to the supplied IObbActionListener to inform it of the terminal state of the call.
Checks whether the specified Opaque Binary Blob (OBB) is mounted somewhere.
Gets the path to the mounted Opaque Binary Blob (OBB).
Returns whether the external storage is emulated.
Returns the filesystem path of a mounted secure container.
Cast an IBinder object into an IMountService interface, generating a proxy if needed.
Cast an IBinder object into an IMountServiceListener interface, generating a proxy if needed.
Detection state of USB Mass Storage has changed
Storage state has changed.
Cast an IBinder object into an IMountShutdownObserver interface, generating a proxy if needed.
This method is called when the shutdown of MountService completed.
Cast an IBinder object into an IObbActionListener interface, generating a proxy if needed.
Return from an OBB action result.
Constructs a StorageManager object through which an application can can communicate with the systems mount service. <p>Applications can get instance of this class by calling {@link android.content.Context#getSystemService(java.lang.String)} with an argument of {@link android.content.Context#STORAGE_SERVICE}.
Registers a {@link android.os.storage.StorageEventListener StorageEventListener}.
Unregisters a {@link android.os.storage.StorageEventListener StorageEventListener}.
Enables USB Mass Storage (UMS) on the device.
Disables USB Mass Storage (UMS) on the device.
Query if a USB Mass Storage (UMS) host is connected.
Query if a USB Mass Storage (UMS) is enabled on the device.
Mount an Opaque Binary Blob (OBB) file. If a <code>key</code> is specified, it is supplied to the mounting process to be used in any encryption used in the OBB. <p> The OBB will remain mounted for as long as the StorageManager reference is held by the application. As soon as this reference is lost, the OBBs in use will be unmounted. The {@link OnObbStateChangeListener} registered with this call will receive the success or failure of this operation. <p> <em>Note:</em> you can only mount OBB files for which the OBB tag on the file matches a package ID that is owned by the calling program's UID. That is, shared UID applications can attempt to mount any other application's OBB that shares its UID.
Unmount an Opaque Binary Blob (OBB) file asynchronously. If the <code>force</code> flag is true, it will kill any application needed to unmount the given OBB (even the calling application). <p> The {@link OnObbStateChangeListener} registered with this call will receive the success or failure of this operation. <p> <em>Note:</em> you can only mount OBB files for which the OBB tag on the file matches a package ID that is owned by the calling program's UID. That is, shared UID applications can obtain access to any other application's OBB that shares its UID. <p>
Check whether an Opaque Binary Blob (OBB) is mounted or not.
Check the mounted path of an Opaque Binary Blob (OBB) file. This will give you the path to where you can obtain access to the internals of the OBB.
Returns list of all mountable volumes.
Returns list of paths for all mountable volumes.
for parcelling only
Returns the mount path for the volume.
Returns a user visible description of the volume.
Returns true if the volume is removable.
Returns true if the volume is emulated.
Returns the MTP storage ID for the volume. this is also used for the storage_id column in the media provider.
Do not call this unless you are MountService
Number of megabytes of space to leave unallocated by MTP. MTP will subtract this value from the free space it reports back to the host via GetStorageInfo, and will not allow new files to be added via MTP if there is less than this amount left free in the storage. If MTP has dedicated storage this value should be zero, but if MTP is sharing storage with the rest of the system, set this to a positive value to ensure that MTP activity does not result in the storage being too close to full.
Returns true if this volume can be shared via USB mass storage.
Returns maximum file size for the volume, or zero if it is unbounded.
Checkin version of wakelock printer. Prints simple comma-separated list.
Dump a comma-separated line of values for terse checkin mode.
Checkin server version of dump to produce more compact, computer-readable log. NOTE: all times are expressed in 'ms'.
Default constructor initializes the object.
Convenience method for associating a specific interface with the Binder. After calling, queryLocalInterface() will be implemented for you to return the given owner IInterface when the corresponding descriptor is requested.
Default implementation returns an empty interface name.
Default implementation always returns true -- if you got here, the object is alive.
{@inheritDoc} Note that if you're calling on a local binder, this always returns true because your process is alive if you're calling it.
Use information supplied to attachInterface() to return the associated IInterface if it matches the requested descriptor.
Default implementation is a stub that returns false.  You will want to override this to do the appropriate unmarshalling of transactions. <p>If you want to call this, call transact().
Implemented to call the more convenient version {@link #dump(FileDescriptor, PrintWriter, String[])}.
Like {@link #dump(FileDescriptor, String[])}, but ensures the target executes asynchronously.
Default implementation rewinds the parcels and calls onTransact.  On the remote side, transact calls into the binder to do the IPC.
Local implementation is a no-op.
Entry point from android_util_Binder.cpp's onTransact
Sign up for notifications about something. When this broadcaster pushes a message with senderWhat in the what field, target will be sent a copy of that message with targetWhat in the what field.
Send out msg.  Anyone who has registered via the request() method will be sent the message.
Returns the version string for the radio firmware.  May return null (if, for instance, the radio is not currently on).
Constructs a new, empty Bundle.
Constructs a Bundle whose data is stored as a Parcel.  The data will be unparcelled on first contact, using the assigned ClassLoader.
Constructs a new, empty Bundle that uses a specific ClassLoader for instantiating Parcelable and Serializable objects. inside of the Bundle.
Constructs a new, empty Bundle sized to hold the given number of elements. The Bundle will grow as needed.
Constructs a Bundle containing a copy of the mappings from the given Bundle.
Make a Bundle for a single key/value pair.
TODO: optimize this later (getting just the value part of a Bundle with a single pair) once Bundle.forPair() above is implemented with a special single-value Map implementation/serialization. Note: value in single-pair Bundle may be null.
Changes the ClassLoader this Bundle uses when instantiating objects. inside of the Bundle.
Return the ClassLoader currently associated with this Bundle.
If the underlying data are stored as a Parcel, unparcel them using the currently assigned class loader.
Returns the number of mappings contained in this Bundle.
Returns true if the mapping of this Bundle is empty, false otherwise.
Removes all elements from the mapping of this Bundle.
Returns true if the given key is contained in the mapping of this Bundle.
Returns the entry with the given key as an object.
Removes any entry with the given key from the mapping of this Bundle.
Inserts all mappings from the given Bundle into this Bundle.
Returns a Set containing the Strings used as keys in this Bundle.
Reports whether the bundle contains any parcelled file descriptors.
Inserts a Boolean value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a byte value into the mapping of this Bundle, replacing any existing value for the given key.
Inserts a char value into the mapping of this Bundle, replacing any existing value for the given key.
Inserts a short value into the mapping of this Bundle, replacing any existing value for the given key.
Inserts an int value into the mapping of this Bundle, replacing any existing value for the given key.
Inserts a long value into the mapping of this Bundle, replacing any existing value for the given key.
Inserts a float value into the mapping of this Bundle, replacing any existing value for the given key.
Inserts a double value into the mapping of this Bundle, replacing any existing value for the given key.
Inserts a String value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a CharSequence value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a Parcelable value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts an array of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a List of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a SparceArray of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts an ArrayList<Integer> value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts an ArrayList<String> value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts an ArrayList<CharSequence> value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a Serializable value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a boolean array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a byte array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a short array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a char array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts an int array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a long array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a float array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a double array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a String array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a CharSequence array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Inserts a Bundle value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.
Returns the value associated with the given key, or false if no mapping of the desired type exists for the given key.
Log a message if the value was non-null but not of the expected type
Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or (byte) 0 if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or false if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or (char) 0 if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or (short) 0 if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or 0 if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or 0L if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or 0.0f if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or 0.0 if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
Report the nature of this Parcelable's contents
Writes the Bundle contents to a Parcel, typically in order for it to be passed through an IBinder connection.
Reads the Parcel contents into this Bundle, typically in order for it to be passed through an IBinder connection.
Create the ConditionVariable in the default closed state.
Create the ConditionVariable with the given state. <p> Pass true for opened and false for closed.
Open the condition, and release all threads that are blocked. <p> Any threads that later approach block() will not block unless close() is called.
Reset the condition to the closed state. <p> Any threads that call block() will block until someone calls open.
Block the current thread until the condition is opened. <p> If the condition is already opened, return immediately.
Block the current thread until the condition is opened or until timeout milliseconds have passed. <p> If the condition is already opened, return immediately. because of the timeout.
to {@link #start()} until the countdown is done and {@link #onFinish()} is called. {@link #onTick(long)} callbacks.
Cancel the countdown.
Start the countdown.
handles counting down
Return total PSS memory usage in kB.
Return total private dirty memory usage in kB.
Return total shared dirty memory usage in kB.
Wait until a debugger attaches.  As soon as the debugger attaches, this returns, so you will need to place a breakpoint after the waitForDebugger() call if you want to start tracing immediately.
Returns "true" if one or more threads is waiting for a debugger to attach.
Determine if a debugger is currently attached.
Returns an array of strings that identify VM features.  This is used by DDMS to determine what sorts of operations the VM can perform.
Enable qemu tracing. For this to work requires running everything inside the qemu emulator; otherwise, this method will have no effect. The trace file is specified on the command line when the emulator is started. For example, the following command line <br /> <code>emulator -trace foo</code><br /> will start running the emulator and create a trace file named "foo". This method simply enables writing the trace records to the trace file. <p> The main differences between this and {@link #startMethodTracing()} are that tracing in the qemu emulator traces every cpu instruction of every process, including kernel code, so we have more complete information, including all context switches. We can also get more detailed information such as cache misses. The sequence of calls is determined by post-processing the instruction trace. The qemu tracing is also done without modifying the application or perturbing the timing of calls because no instrumentation is added to the application being traced. </p> <p> One limitation of using this method compared to using {@link #startMethodTracing()} on the real device is that the emulator does not model all of the real hardware effects such as memory and bus contention.  The emulator also has a simple cache model and cannot capture all the complexities of a real cache. </p>
Stop qemu tracing.  See {@link #startNativeTracing()} to start tracing. <p>Tracing can be started and stopped as many times as desired.  When the qemu emulator itself is stopped then the buffered trace records are flushed and written to the trace file.  In fact, it is not necessary to call this method at all; simply killing qemu is sufficient.  But starting and stopping a trace is useful for examining a specific region of code.</p>
Enable "emulator traces", in which information about the current method is made available to the "emulator -trace" feature.  There is no corresponding "disable" call -- this is intended for use by the framework when tracing should be turned on and left that way, so that traces captured with F9/F10 will include the necessary data. This puts the VM into "profile" mode, which has performance consequences. To temporarily enable tracing, use {@link #startNativeTracing()}.
Start method tracing with default log name and buffer size. See <a information about reading these files. Call stopMethodTracing() to stop tracing.
Start method tracing, specifying the trace log file name.  The trace file will be put under "/sdcard" unless an absolute path is given. See <a information about reading trace files. If no name argument is given, this value defaults to "/sdcard/dmtrace.trace". If the files already exist, they will be truncated. If the trace file given does not end in ".trace", it will be appended for you.
Start method tracing, specifying the trace log file name and the buffer size. The trace files will be put under "/sdcard" unless an absolute path is given. See <a information about reading trace files. If no name argument is given, this value defaults to "/sdcard/dmtrace.trace". If the files already exist, they will be truncated. If the trace file given does not end in ".trace", it will be appended for you.
Start method tracing, specifying the trace log file name and the buffer size. The trace files will be put under "/sdcard" unless an absolute path is given. See <a information about reading trace files. <p> When method tracing is enabled, the VM will run more slowly than usual, so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2).  The times for native methods will not change, so don't try to use this to compare the performance of interpreted and native implementations of the same method.  As an alternative, consider using "native" tracing in the emulator via {@link #startNativeTracing()}. </p> If no name argument is given, this value defaults to "/sdcard/dmtrace.trace". If the files already exist, they will be truncated. If the trace file given does not end in ".trace", it will be appended for you.
Like startMethodTracing(String, int, int), but taking an already-opened FileDescriptor in which the trace is written.  The file name is also supplied simply for logging.  Makes a dup of the file descriptor. Not exposed in the SDK unless we are really comfortable with supporting this and find it would be useful.
Starts method tracing without a backing file.  When stopMethodTracing is called, the result is sent directly to DDMS.  (If DDMS is not attached when tracing ends, the profiling data will be discarded.)
Determine whether method tracing is currently active.
Stop method tracing.
Get an indication of thread CPU usage.  The value returned indicates the amount of time that the current thread has spent executing code or waiting for certain types of I/O. The time is expressed in nanoseconds, and is only meaningful when compared to the result from an earlier call.  Note that nanosecond resolution does not imply nanosecond accuracy. On system which don't support this operation, the call returns -1.
Start counting the number and aggregate size of memory allocations. <p>The {@link #startAllocCounting() start} function resets the counts and enables counting. The {@link #stopAllocCounting() stop} function disables the counting so that the analysis code doesn't cause additional allocations.  The various <code>get</code> functions return the specified value. And the various <code>reset</code> functions reset the specified count.</p> <p>Counts are kept for the system as a whole and for each thread. The per-thread counts for threads other than the current thread are not cleared by the "reset" or "start" calls.</p>
Stop counting the number and aggregate size of memory allocations.
Dump a list of all currently loaded class to the log file.
Get the number of loaded classes.
Dump "hprof" data to the specified file.  This may cause a GC.
Like dumpHprofData(String), but takes an already-opened FileDescriptor to which the trace is written.  The file name is also supplied simply for logging.  Makes a dup of the file descriptor. Primarily for use by the "am" shell command.
Collect "hprof" and send it to DDMS.  This may cause a GC.
Returns a count of the extant instances of a class.
Primes the register map cache. Only works for classes in the bootstrap class loader.  Does not cause classes to be loaded if they're not already present. The classAndMethodDesc argument is a concatentation of the VM-internal class descriptor, method name, and method descriptor.  Examples:
Dumps the contents of VM reference tables (e.g. JNI locals and globals) to the log file.
Reset counters and ensure counts are running.  Counts may have already been running.
Collect instruction counts.  May or may not stop the counting process.
Return the total number of instructions executed globally (i.e. in all threads).
Return the total number of method-invocation instructions executed globally.
Returns true if the type of the field matches the specified class. Handles the case where the class is, e.g., java.lang.Boolean, but the field is of the primitive "boolean" type.  Also handles all of the java.lang.Number subclasses.
Looks up the property that corresponds to the field, and sets the field's value if the types match.
Equivalent to <code>setFieldsOn(cl, false)</code>.
Reflectively sets static fields of a class based on internal debugging properties.  This method is a no-op if false is false. <p> <strong>NOTE TO APPLICATION DEVELOPERS</strong>: false will always be false in release builds.  This API is typically only useful for platform developers. </p> Class setup: define a class whose only fields are non-final, static primitive types (except for "char") or Strings.  In a static block after the field definitions/initializations, pass the class to this method, Debug.setFieldsOn(). Example: <pre> package com.example; import android.os.Debug; public class MyDebugVars { </pre> setFieldsOn() may override the value of any field in the class based on internal properties that are fixed at boot time. <p> These properties are only set during platform debugging, and are not meant to be used as a general-purpose properties store. {@hide}
Get a debugging dump of a system service by name. <p>Most services require the caller to hold android.permission.DUMP.
Create a new empty Entry with no contents.
Create a new Entry with plain text contents.
Create a new Entry with byte array contents. The data array must not be modified after creating this entry.
Create a new Entry with streaming data contents. Takes ownership of the ParcelFileDescriptor.
Create a new Entry with the contents read from a file. The file will be read when the entry's contents are requested.
Close the input stream associated with this entry.
Stores human-readable text.  The data may be discarded eventually (or even immediately) if space is limited, or ignored entirely if the tag has been blocked (see {@link #isTagEnabled}).
Stores binary data, which may be ignored or discarded as with {@link #addText}.
Stores the contents of a file, which may be ignored or discarded as with {@link #addText}.
Checks any blacklists (set in system settings) to see whether a certain tag is allowed.  Entries with disabled tags will be dropped immediately, so you can save the work of actually constructing and sending the data.
Gets the next entry from the drop box <em>after</em> the specified time. Requires <code>android.permission.READ_LOGS</code>.  You must always call {@link Entry#close()} on the return value!
Gets the Android root directory.
Gets the system directory available for secure storage. If Encrypted File system is enabled, it returns an encrypted directory (/data/secure/system). Otherwise, it returns the unencrypted /data/system directory.
Gets the data directory for secure storage. If Encrypted File system is enabled, it returns an encrypted directory (/data/secure). Otherwise, it returns the unencrypted /data directory.
Returns whether the Encrypted File System feature is enabled on the device or not. if disabled.
Gets the Android data directory.
Gets the Android external storage directory.  This directory may not currently be accessible if it has been mounted by the user on their computer, has been removed from the device, or some other problem has happened.  You can determine its current state with {@link #getExternalStorageState()}. <p><em>Note: don't be confused by the word "external" here.  This directory can better be thought as media/shared storage.  It is a filesystem that can hold a relatively large amount of data and that is shared across all applications (does not enforce permissions). Traditionally this is an SD card, but it may also be implemented as built-in storage in a device that is distinct from the protected internal storage and can be mounted as a filesystem on a computer.</em></p> <p>In devices with multiple "external" storage directories (such as both secure app storage and mountable shared storage), this directory represents the "primary" external storage that the user will interact with.</p> <p>Applications should not directly use this top-level directory, in order to avoid polluting the user's root namespace.  Any files that are private to the application should be placed in a directory returned by {@link android.content.Context#getExternalFilesDir Context.getExternalFilesDir}, which the system will take care of deleting if the application is uninstalled.  Other shared files should be placed in one of the directories returned by {@link #getExternalStoragePublicDirectory}. <p>Here is an example of typical code to monitor the state of external storage:</p> {@sample development/samples/ApiDemos/src/com/example/android/apis/content/ExternalStorage.java monitor_storage}
Get a top-level public external storage directory for placing files of a particular type.  This is where the user will typically place and manage their own files, so you should be careful about what you put here to ensure you don't erase their files or get in the way of their own organization. <p>Here is an example of typical code to manipulate a picture on the public external storage:</p> {@sample development/samples/ApiDemos/src/com/example/android/apis/content/ExternalStorage.java public_picture} {@link #DIRECTORY_MUSIC}, {@link #DIRECTORY_PODCASTS}, {@link #DIRECTORY_RINGTONES}, {@link #DIRECTORY_ALARMS}, {@link #DIRECTORY_NOTIFICATIONS}, {@link #DIRECTORY_PICTURES}, {@link #DIRECTORY_MOVIES}, {@link #DIRECTORY_DOWNLOADS}, or {@link #DIRECTORY_DCIM}.  May not be null. directory may not yet exist, so you must make sure it exists before using it such as with {@link File#mkdirs File.mkdirs()}.
Returns the path for android-specific data on the SD card.
Generates the raw path to an application's data
Generates the raw path to an application's media
Generates the raw path to an application's OBB files
Generates the path to an application's files.
Generates the path to an application's cache.
Gets the Android Download/Cache content directory.
Gets the current state of the primary "external" storage device. <p>See {@link #getExternalStorageDirectory()} for more information.
Returns whether the primary "external" storage device is removable. If true is returned, this device is for example an SD card that the user can remove.  If false is returned, the storage is built into the device and can not be physically removed. <p>See {@link #getExternalStorageDirectory()} for more information.
Returns whether the device has an external storage device which is emulated. If true, the device does not have real external storage, and the directory returned by {@link #getExternalStorageDirectory()} will be allocated using a portion of the internal storage system. <p>Certain system services, such as the package manager, use this to determine where to install an application. <p>Emulated external storage may also be encrypted - see {@link android.app.admin.DevicePolicyManager#setStorageEncryption( android.content.ComponentName, boolean)} for additional details.
Equivalent to FileObserver(path, FileObserver.ALL_EVENTS).
Create a new file observer for a certain file or directory. Monitoring does not start on creation!  You must call {@link #startWatching()} before you will receive events.
Start watching for events.  The monitored file or directory must exist at this time, or else no events will be reported (even if it appears later). If monitoring is already started, this call has no effect.
Stop watching for events.  Some events may be in process, so events may continue to be reported even after this method completes.  If monitoring is already stopped, this call has no effect.
Get the status for the given path. This is equivalent to the POSIX stat(2) system call. exists. permission to stat the file, then this method will return false.
copy a file from srcFile to destFile, return true if succeed, return false if fail
Copy data from a source stream to destFile. Return true if succeed, return false if failed.
Check if a filename is "safe" (no metacharacters or spaces).
Read a text file into a String, optionally limiting the length.
Writes string to file. Basically same as "echo -n $string > $filename"
Computes the checksum of a file using the CRC32 checksum routine. The value of the checksum is returned.
Handle system messages here.
Default constructor associates this handler with the queue for the current thread. If there isn't one, this handler won't be able to receive messages.
Constructor associates this handler with the queue for the current thread and takes a callback interface in which you can handle messages.
Use the provided queue instead of the default one.
Use the provided queue instead of the default one and take a callback interface in which to handle messages.
Returns a string representing the name of the specified message. The default implementation will either return the class name of the message callback if any, or the hexadecimal representation of the message "what" field.
Returns a new {@link android.os.Message Message} from the global message pool. More efficient than creating and allocating new instances. The retrieved message has its handler set to this instance (Message.target == this). If you don't want that facility, just call Message.obtain() instead.
Same as {@link #obtainMessage()}, except that it also sets the what member of the returned Message.
Same as {@link #obtainMessage()}, except that it also sets the what and obj members of the returned Message.
Same as {@link #obtainMessage()}, except that it also sets the what, arg1 and arg2 members of the returned Message.
Same as {@link #obtainMessage()}, except that it also sets the what, obj, arg1,and arg2 values on the returned Message.
Pushes a message onto the end of the message queue after all pending messages before the current time. It will be received in {@link #handleMessage}, in the thread attached to this handler.
Enqueue a message into the message queue after all pending messages before (current time + delayMillis). You will receive it in {@link #handleMessage}, in the thread attached to this handler.
Enqueue a message into the message queue after all pending messages before the absolute time (in milliseconds) <var>uptimeMillis</var>. <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b> You will receive it in {@link #handleMessage}, in the thread attached to this handler.
Enqueue a message at the front of the message queue, to be processed on the next iteration of the message loop.  You will receive it in {@link #handleMessage}, in the thread attached to this handler. <b>This method is only for use in very special circumstances -- it can easily starve the message queue, cause ordering problems, or have other unexpected side-effects.</b>
Remove any pending posts of messages with code 'what' and whose obj is 'object' that are in the message queue.  If <var>token</var> is null, all messages will be removed.
if we can get rid of this method, the handler need not remember its loop we could instead export a getMessageQueue() method...
Constructs a HandlerThread. {@link android.os.Process} and not from java.lang.Thread.
This method returns the Looper associated with this thread. If this thread not been started or for any reason is isAlive() returns false, this method will return null. If this thread has been started, this method will block until the looper has been initialized.
Ask the currently running looper to quit.  If the thread has not been started or has finished (that is if {@link #getLooper} returns null), then false is returned.  Otherwise the looper is asked to quit and true is returned.
Returns the identifier of this thread. See Process.myTid().
Get the canonical name of the interface supported by this binder.
Cast an IBinder object into an android.os.IHardwareService interface, generating a proxy if needed.
obsolete flashlight support
Cast an IBinder object into an android.os.IMessenger interface, generating a proxy if needed.
Cast an IBinder object into an android.os.INetworkManagementService interface, generating a proxy if needed.
GENERAL Register an observer to receive events
Unregister an observer from receiving events.
Returns a list of currently known network interfaces
Retrieves the specified interface config
Sets the configuration of the specified interface
Clear all IP addresses on the specified interface
Set interface down
Set interface up
Set interface IPv6 privacy extensions
Disable IPv6 on an interface
Enable IPv6 on an interface
Retrieves the network routes currently configured on the specified interface
Add the specified route to the interface.
Remove the specified route from the interface.
Shuts down the service
TETHERING RELATED Returns true if IP forwarding is enabled
Enables/Disables IP Forwarding
Start tethering services with the specified dhcp server range arg is a set of start end pairs defining the ranges.
Stop currently running tethering services
Returns true if tethering services are started
Tethers the specified interface
Untethers the specified interface
Returns a list of currently tethered interfaces
Sets the list of DNS forwarders (in order of priority)
Returns the list of DNS fowarders (in order of priority)
Enables Network Address Translation between two interfaces. The address and netmask of the external interface is used for the NAT'ed network.
Disables Network Address Translation between two interfaces.
PPPD Returns the list of currently known TTY devices on the system
Attaches a PPP server daemon to the specified TTY with the specified local/remote addresses.
Detaches a PPP server daemon from the specified TTY.
Load firmware for operation in the given mode. Currently the three modes supported are "AP", "STA" and "P2P".
Start Wifi Access Point
Stop Wifi Access Point
Set Access Point config
DATA USAGE RELATED Return global network statistics summarized at an interface level, without any UID-level granularity.
Return detailed network statistics with UID-level granularity, including interface and tag details.
Return detailed network statistics for the requested UID, including interface and tag details.
Return summary of network statistics for the requested pairs of tethering interfaces.  Even indexes are remote interface, and odd indexes are corresponding local interfaces.
Set quota for an interface.
Remove quota for an interface.
Set alert for an interface; requires that iface already has quota.
Remove alert for an interface.
Set alert across all interfaces.
Control network activity of a UID over interfaces with a quota limit.
Return status of bandwidth control module.
Configures bandwidth throttling on an interface.
Returns the currently configured RX throttle values for the specified interface
Returns the currently configured TX throttle values for the specified interface
Sets the name of the default interface in the DNS resolver.
Bind name servers to an interface in the DNS resolver.
Flush the DNS cache associated with the default interface.
Flush the DNS cache associated with the specified interface.
Cast an IBinder object into an android.os.IPermissionController interface, generating a proxy if needed.
Cast an IBinder object into an android.os.IPowerManager interface, generating a proxy if needed.
WARNING: changes in acquireWakeLock() signature must be reflected in IPowerManager.cpp/h
WARNING: changes in releaseWakeLock() signature must be reflected in IPowerManager.cpp/h
sets the brightness of the backlights (screen, keyboard, button) 0-255
Cast an IBinder object into an android.os.IRemoteCallback interface, generating a proxy if needed.
Cast an IBinder object into an android.os.IVibratorService interface, generating a proxy if needed.
Creates a LatencyTimer object
Add a sample delay for averaging. this called.
Initialize the current thread as a looper. This gives you a chance to create handlers that then reference this looper, before actually starting the loop. Be sure to call {@link #loop()} after calling this method, and end it by calling {@link #quit()}.
Initialize the current thread as a looper, marking it as an application's main looper. The main looper for your application to call this function yourself.  See also: {@link #prepare()}
Returns the application's main looper, which lives in the main thread of the application.
Run the message queue in this thread. Be sure to call {@link #quit()} to end the loop.
Return the Looper object associated with the current thread.  Returns null if the calling thread is not associated with a Looper.
Control logging of messages as they are processed by this Looper.  If enabled, a log message will be written to <var>printer</var> at the beginning and ending of each message dispatch, identifying the target Handler and message contents. null to disable message logging.
Return the {@link MessageQueue} object associated with the current thread.  This must be called from a thread running a Looper, or a NullPointerException will be thrown.
Return the Thread associated with this Looper.
Closes the memory file. If there are no other open references to the memory file, it will be deleted.
Unmaps the memory file from the process's memory space, but does not close it. After this method has been called, read and write operations through this object will fail, but {@link #getFileDescriptor()} will still return a valid file descriptor.
Checks whether the memory file has been deactivated.
Checks whether the memory file has been closed.
Returns the length of the memory file.
Is memory file purging enabled?
Enables or disables purging of the memory file. of the file in low memory situations
Creates a new InputStream for reading from the memory file.
Creates a new OutputStream for writing to the memory file.
Reads bytes from the memory file. Will throw an IOException if the file has been purged.
Write bytes to the memory file. Will throw an IOException if the file has been purged.
Gets a FileDescriptor for the memory file. The returned file descriptor is not duplicated.
Returns the size of the memory file that the file descriptor refers to, or -1 if the file descriptor does not refer to a memory file.
Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
Same as {@link #obtain()}, but copies the values of an existing message (including its target) into the new one.
Same as {@link #obtain()}, but sets the value for the <em>target</em> member on the Message returned.
Same as {@link #obtain(Handler)}, but assigns a callback Runnable on the Message that is returned.
Same as {@link #obtain()}, but sets the values for both <em>target</em> and <em>what</em> members on the Message.
Same as {@link #obtain()}, but sets the values of the <em>target</em>, <em>what</em>, and <em>obj</em> members.
Same as {@link #obtain()}, but sets the values of the <em>target</em>, <em>what</em>, <em>arg1</em>, and <em>arg2</em> members.
Same as {@link #obtain()}, but sets the values of the <em>target</em>, <em>what</em>, <em>arg1</em>, <em>arg2</em>, and <em>obj</em> members.
Return a Message instance to the global pool.  You MUST NOT touch the Message after calling this function -- it has effectively been freed.
Make this message like o.  Performs a shallow copy of the data field. Does not copy the linked list fields, nor the timestamp or target/callback of the original message.
Return the targeted delivery time of this message, in milliseconds.
Retrieve the a {@link android.os.Handler Handler} implementation that will receive this message. The object must implement {@link android.os.Handler#handleMessage(android.os.Message) Handler.handleMessage()}. Each Handler has its own name-space for message codes, so you do not need to worry about yours conflicting with other handlers.
Retrieve callback object that will execute when this message is handled. This object must implement Runnable. This is called by the <em>target</em> {@link Handler} that is receiving this Message to dispatch it.  If not set, the message will be dispatched to the receiving Handler's {@link Handler#handleMessage(Message Handler.handleMessage())}.
Obtains a Bundle of arbitrary data associated with this event, lazily creating it if necessary. Set this value by calling {@link #setData(Bundle)}.  Note that when transferring data across processes via {@link Messenger}, you will need to set your ClassLoader on the Bundle via {@link Bundle#setClassLoader(ClassLoader) Bundle.setClassLoader()} so that it can instantiate your objects when you retrieve them.
Like getData(), but does not lazily create the Bundle.  A null is returned if the Bundle does not already exist.  See {@link #getData} for further information on this.
Sets a Bundle of arbitrary data values. Use arg1 and arg1 members as a lower cost way to send a few simple integer values, if you can.
Sends this Message to the Handler specified by {@link #getTarget}. Throws a null pointer exception if this field has not been set.
Add a new {@link IdleHandler} to this message queue.  This may be removed automatically for you by returning false from {@link IdleHandler#queueIdle IdleHandler.queueIdle()} when it is invoked, or explicitly removing it with {@link #removeIdleHandler}. <p>This method is safe to call from any thread.
Remove an {@link IdleHandler} from the queue that was previously added with {@link #addIdleHandler}.  If the given object is not currently in the idle list, nothing is done.
Create a new Messenger pointing to the given Handler.  Any Message objects sent through this Messenger will appear in the Handler as if {@link Handler#sendMessage(Message) Handler.sendMessage(Message)} had been called directly.
Send a Message to this Messenger's Handler. {@link Message#obtain() Message.obtain()}. Handler no longer exists.
Retrieve the IBinder that this Messenger is using to communicate with its associated Handler.
Comparison operator on two Messenger objects, such that true is returned then they both point to the same Handler.
Convenience function for writing either a Messenger or null pointer to a Parcel.  You must use this with {@link #readMessengerOrNullFromParcel} for later reading it.
Convenience function for reading either a Messenger or null pointer from a Parcel.  You must have previously written the Messenger with {@link #writeMessengerOrNullToParcel}. been written.
Create a Messenger from a raw IBinder, which had previously been retrieved with {@link #getBinder}.
Retrieve a new Parcel object from the pool.
Put a Parcel object back into the pool.  You must not touch the object after this call.
Write a byte array into the parcel at the current {@link #dataPosition}, growing {@link #dataCapacity} if needed.
Write an byte array into the parcel at the current {@link #dataPosition}, growing {@link #dataCapacity} if needed.
Write a CharSequence value into the parcel at the current dataPosition(), growing dataCapacity() if needed.
Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed.
Write an byte value into the parcel at the current dataPosition(), growing dataCapacity() if needed.
Please use {@link #writeBundle} instead.  Flattens a Map into the parcel at the current dataPosition(), growing dataCapacity() if needed.  The Map keys must be String objects. The Map values are written using {@link #writeValue} and must follow the specification there. <p>It is strongly recommended to use {@link #writeBundle} instead of this method, since the Bundle class provides a type-safe API that allows you to avoid mysterious type errors at the point of marshalling.
Flatten a Map into the parcel at the current dataPosition(), growing dataCapacity() if needed.  The Map keys must be String objects.
Flatten a Bundle into the parcel at the current dataPosition(), growing dataCapacity() if needed.
Flatten a List into the parcel at the current dataPosition(), growing dataCapacity() if needed.  The List values are written using {@link #writeValue} and must follow the specification there.
Flatten an Object array into the parcel at the current dataPosition(), growing dataCapacity() if needed.  The array values are written using {@link #writeValue} and must follow the specification there.
Flatten a generic SparseArray into the parcel at the current dataPosition(), growing dataCapacity() if needed.  The SparseArray values are written using {@link #writeValue} and must follow the specification there.
Flatten a List containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed.  The type of the objects in the list must be one that implements Parcelable. Unlike the generic writeList() method, however, only the raw data of the objects is written and not their type, so you must use the corresponding readTypedList() to unmarshall them.
Flatten a List containing String objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed.  They can later be retrieved with {@link #createStringArrayList} or {@link #readStringList}.
Flatten a List containing IBinder objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed.  They can later be retrieved with {@link #createBinderArrayList} or {@link #readBinderList}.
Flatten a heterogeneous array containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed.  The type of the objects in the array must be one that implements Parcelable. Unlike the {@link #writeParcelableArray} method, however, only the raw data of the objects is written and not their type, so you must use {@link #readTypedArray} with the correct corresponding {@link Parcelable.Creator} implementation to unmarshall them. {@link Parcelable#writeToParcel(Parcel, int) Parcelable.writeToParcel()}.
Flatten a generic object in to a parcel.  The given Object value may currently be one of the following types: <ul> <li> null <li> String <li> Byte <li> Short <li> Integer <li> Long <li> Float <li> Double <li> Boolean <li> String[] <li> boolean[] <li> byte[] <li> int[] <li> long[] <li> Object[] (supporting objects of the same type defined here). <li> {@link Bundle} <li> Map (as supported by {@link #writeMap}). <li> Any object that implements the {@link Parcelable} protocol. <li> Parcelable[] <li> CharSequence (as supported by {@link TextUtils#writeToParcel}). <li> List (as supported by {@link #writeList}). <li> {@link SparseArray} (as supported by {@link #writeSparseArray(SparseArray)}). <li> {@link IBinder} <li> Any object that implements Serializable (but see </ul> <p class="caution">{@link Parcelable} objects are written with {@link Parcelable#writeToParcel} using contextual flags of 0.  When serializing objects containing {@link ParcelFileDescriptor}s, this may result in file descriptor leaks when they are returned from Binder calls (where {@link Parcelable#PARCELABLE_WRITE_RETURN_VALUE} should be used).</p>
Flatten the name of the class of the Parcelable and its contents into the parcel. {@link Parcelable#writeToParcel(Parcel, int) Parcelable.writeToParcel()}.
Write a generic serializable object in to a Parcel.  It is strongly recommended that this method be avoided, since the serialization overhead is extremely large, and this approach will be much slower than using the other approaches to writing data in to a Parcel.
Special function for writing an exception result at the header of a parcel, to be used when returning an exception from a transaction. Note that this currently only supports a few exception types; any other exception will be re-thrown by this function as a RuntimeException (to be caught by the system's last-resort exception handling when dispatching a transaction). <p>The supported exception types are: <ul> <li>{@link BadParcelableException} <li>{@link IllegalArgumentException} <li>{@link IllegalStateException} <li>{@link NullPointerException} <li>{@link SecurityException} </ul>
Special function for writing information at the front of the Parcel indicating that no exception occurred.
Special function for reading an exception result from the header of a parcel, to be used after receiving the result of a transaction.  This will throw the exception for you if it had been written to the Parcel, otherwise return and let you read the normal result data from the Parcel.
Parses the header of a Binder call's response Parcel and returns the exception code.  Deals with lite or fat headers. In the common successful case, this header is generally zero. In less common cases, it's a small negative number and will be followed by an error string. This exists purely for android.database.DatabaseUtils and insulating it from having to handle fat headers as returned by e.g. StrictMode-induced RPC responses.
Use this function for customized exception handling. customized method call this method for all unknown case
Read a CharSequence value from the parcel at the current dataPosition().
Read a FileDescriptor from the parcel at the current dataPosition().
Please use {@link #readBundle(ClassLoader)} instead (whose data must have been written with {@link #writeBundle}.  Read into an existing Map object from the parcel at the current dataPosition().
Read into an existing List object from the parcel at the current dataPosition(), using the given class loader to load any enclosed Parcelables.  If it is null, the default class loader is used.
Please use {@link #readBundle(ClassLoader)} instead (whose data must have been written with {@link #writeBundle}.  Read and return a new HashMap object from the parcel at the current dataPosition(), using the given class loader to load any enclosed Parcelables.  Returns null if the previously written map object was null.
Read and return a new Bundle object from the parcel at the current dataPosition().  Returns null if the previously written Bundle object was null.
Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects. Returns null if the previously written Bundle object was null.
Read a byte[] object from the parcel and copy it into the given byte array.
Read and return a String[] object from the parcel. {@hide}
Read and return a CharSequence[] object from the parcel. {@hide}
Read and return a new ArrayList object from the parcel at the current dataPosition().  Returns null if the previously written list object was null.  The given class loader will be used to load any enclosed Parcelables.
Read and return a new Object array from the parcel at the current dataPosition().  Returns null if the previously written array was null.  The given class loader will be used to load any enclosed Parcelables.
Read and return a new SparseArray object from the parcel at the current dataPosition().  Returns null if the previously written list object was null.  The given class loader will be used to load any enclosed Parcelables.
Read and return a new SparseBooleanArray object from the parcel at the current dataPosition().  Returns null if the previously written list object was null.
Read and return a new ArrayList containing a particular object type from the parcel that was written with {@link #writeTypedList} at the current dataPosition().  Returns null if the previously written list object was null.  The list <em>must</em> have previously been written via {@link #writeTypedList} with the same object type.
Read into the given List items containing a particular object type that were written with {@link #writeTypedList} at the current dataPosition().  The list <em>must</em> have previously been written via {@link #writeTypedList} with the same object type.
Read and return a new ArrayList containing String objects from the parcel that was written with {@link #writeStringList} at the current dataPosition().  Returns null if the previously written list object was null.
Read and return a new ArrayList containing IBinder objects from the parcel that was written with {@link #writeBinderList} at the current dataPosition().  Returns null if the previously written list object was null.
Read into the given List items String objects that were written with {@link #writeStringList} at the current dataPosition().
Read into the given List items IBinder objects that were written with {@link #writeBinderList} at the current dataPosition().
Read and return a new array containing a particular object type from the parcel at the current dataPosition().  Returns null if the previously written array was null.  The array <em>must</em> have previously been written via {@link #writeTypedArray} with the same object type.
Write a heterogeneous array of Parcelable objects into the Parcel. Each object in the array is written along with its class name, so that the correct class can later be instantiated.  As a result, this has significantly more overhead than {@link #writeTypedArray}, but will correctly handle an array containing more than one type of object. {@link Parcelable#writeToParcel(Parcel, int) Parcelable.writeToParcel()}.
Read a typed object from a parcel.  The given class loader will be used to load any enclosed Parcelables.  If it is null, the default class loader will be used.
Read and return a new Parcelable from the parcel.  The given class loader will be used to load any enclosed Parcelables.  If it is null, the default class loader will be used. object, or null for the default class loader. object has been written. was an error trying to instantiate the Parcelable.
Read and return a new Parcelable array from the parcel. The given class loader will be used to load any enclosed Parcelables.
Read and return a new Serializable object from the parcel. wasn't found in the parcel.
Create a new ParcelFileDescriptor accessing a given file. {@link #MODE_READ_ONLY}, {@link #MODE_WRITE_ONLY}, or {@link #MODE_READ_WRITE}; may also be any combination of {@link #MODE_CREATE}, {@link #MODE_TRUNCATE}, {@link #MODE_WORLD_READABLE}, and {@link #MODE_WORLD_WRITEABLE}. file. file does not exist or can not be opened with the requested mode.
Create a new ParcelFileDescriptor that is a dup of an existing FileDescriptor.  This obeys standard POSIX semantics, where the new file descriptor shared state such as file position with the original file descriptor.
Create a new ParcelFileDescriptor that is a dup of the existing FileDescriptor.  This obeys standard POSIX semantics, where the new file descriptor shared state such as file position with the original file descriptor.
Create a new ParcelFileDescriptor from a raw native fd.  The new ParcelFileDescriptor holds a dup of the original fd passed in here, so you must still close that fd as well as the new ParcelFileDescriptor. for a dup of the given fd.
Extracts the file descriptor from the specified socket and returns it untouched
Create a new ParcelFileDescriptor from the specified Socket.  The new ParcelFileDescriptor holds a dup of the original FileDescriptor in the Socket, so you must still close the Socket as well as the new ParcelFileDescriptor.
Create a new ParcelFileDescriptor from the specified DatagramSocket.
Create two ParcelFileDescriptors structured as a data pipe.  The first ParcelFileDescriptor in the returned array is the read side; the second is the write side.
Retrieve the actual FileDescriptor associated with this object.
Return the native fd int for this ParcelFileDescriptor.  The ParcelFileDescriptor still owns the fd, and it still must be closed through this API.
Return the native fd int for this ParcelFileDescriptor and detach it from the object here.  You are now responsible for closing the fd in native code.
Close the ParcelFileDescriptor. This implementation closes the underlying OS resources allocated to represent this stream.
{@inheritDoc} If {@link Parcelable#PARCELABLE_WRITE_RETURN_VALUE} is set in flags, the file descriptor will be closed after a copy is written to the Parcel.
Constructor creates a ParcelUuid instance from the given {@link UUID}.
Creates a new ParcelUuid from a string representation of {@link UUID}.
Get the {@link UUID} represented by the ParcelUuid.
Begin collection of memory usage information.
End collection of memory usage information. Returns collected data in a Bundle object.
Start measurement of user and cpu time.
Add a measured segment, and start measuring the next segment. Returns collected data in a Bundle object.
Stop measurement of user and cpu time.
Add an integer type measurement to the collector.
Add a float type measurement to the collector.
Add a string field to the collector.
Starts tracking memory usage, binder transactions, and real & cpu timing.
Stops tracking memory usage, binder transactions, and real & cpu timing. Stores collected data as type long into Bundle object for reporting.
Returns a bundle with the counts for various binder counts for this process. Currently the only two that are reported are the number of send and the number of received transactions.
can't instantiate this class
Reboot the device.
Sets whether this WakeLock is ref counted. <p>Wake locks are reference counted by default.
Makes sure the device is on at the level you asked when you created the wake lock.
Makes sure the device is on at the level you asked when you created the wake lock. The lock will be released after the given timeout.
Release your claim to the CPU or screen being on. <p> It may turn off shortly after you release it, or it may not if there are other wake locks held.
Release your claim to the CPU or screen being on. <p> It may turn off shortly after you release it, or it may not if there are other wake locks held. {@hide}
Get a wake lock at the level of the flags parameter.  Call {@link WakeLock#acquire() acquire()} on the object to acquire the wake lock, and {@link WakeLock#release release()} when you are done. {@samplecode PowerManager pm = (PowerManager)mContext.getSystemService( PowerManager.WakeLock wl = pm.newWakeLock( wl.acquire(); // ... wl.release(); <p class="note">If using this to keep the screen on, you should strongly consider using {@link android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON} instead. This window flag will be correctly managed by the platform as the user moves between applications and doesn't require a special permission.</p>
User activity happened. <p> Turns the device from whatever state it's in to full on, and resets the auto-off timer.
Force the device to go to sleep. Overrides all the wake locks that are held.
sets the brightness of the backlights (screen, keyboard, button). {@hide}
Returns the set of flags for {@link #newWakeLock(int, String) newWakeLock()} that are supported on the device. For example, to test to see if the {@link #PROXIMITY_SCREEN_OFF_WAKE_LOCK} is supported: {@samplecode PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE); int supportedFlags = pm.getSupportedWakeLockFlags(); boolean proximitySupported = ((supportedFlags & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) {@hide}
Returns whether the screen is currently on. The screen could be bright or dim. {@samplecode PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE); boolean isScreenOn = pm.isScreenOn();
Reboot the device.  Will not return if the reboot is successful.  Requires the {@link android.Manifest.permission#REBOOT} permission.
Start a new process. <p>If processes are enabled, a new process is created and the static main() function of a <var>processClass</var> is executed there. The process will continue running after this function returns. <p>If processes are not enabled, a new thread in the caller's process is created and main() of <var>processClass</var> called there. <p>The niceName parameter, if not an empty string, is a custom name to give to the process instead of using processClass.  This allows you to make easily identifyable processes even if you are using the same base <var>processClass</var> to start them. {@hide}
Tries to open socket to Zygote process if not already open. If already open, does nothing.  May block and retry.
Sends an argument list to the zygote process, which starts a new child and returns the child's pid. Please note: the present implementation replaces newlines in the argument list with spaces.
Starts a new process via the zygote mechanism. new process should setgroup() to.
Returns a uid for a currently running process.
Returns the parent process id for a currently running process.
Set the priority of a thread, based on Linux priorities. priority to 19 for lowest scheduling priority. <var>tid</var> does not exist. not have permission to modify the given thread, or to use the given priority.
Kill the process with the given PID. Note that, though this API allows us to request to kill any process based on its PID, the kernel will still impose standard restrictions on which PIDs you are actually able to kill.  Typically this means only the process running the caller's packages/application sharing a common UID will also be able to kill each other's processes.
Private impl for avoiding a log message...  DO NOT USE without doing your own log, or the Android Illuminati will find you some night and beat you up.
Verify the cryptographic signature of a system update package before installing it.  Note that the package is also verified separately by the installer once the device is rebooted into the recovery system.  This function will return only if the package was successfully verified; otherwise it will throw an exception. Verification of a package can take significant time, so this function should not be called from a UI thread.  Interrupting the thread while this function is in progress will result in a SecurityException being thrown (and the thread's interrupt flag will be cleared). updates as verification proceeds.  May be null. public keys we will accept.  Verification succeeds if the package is signed by the private key corresponding to any public key in this file.  May be null to use the system default file (currently "/system/etc/security/otacerts.zip"). package or certs files.
Reboots the device in order to install the given update package. Requires the {@link android.Manifest.permission#REBOOT} permission. a partition mountable by recovery.  (The set of partitions known to recovery may vary from device to device.  Generally, /cache and /data are safe.) fails, or if the reboot itself fails.
Reboots the device and wipes the user data partition.  This is sometimes called a "factory reset", which is something of a misnomer because the system partition is not restored to its factory state. Requires the {@link android.Manifest.permission#REBOOT} permission. fails, or if the reboot itself fails.
Reboot into the recovery system to wipe the /cache partition.
Reboot into the recovery system with the supplied argument.
Called after booting to process and remove recovery-related files.
package*/ void
Simple version of {@link RemoteCallbackList#register(E, Object)} that does not take a cookie object.
Add a new callback to the list.  This callback will remain in the list until a corresponding call to {@link #unregister} or its hosting process goes away.  If the callback was already registered (determined by checking to see if the {@link IInterface#asBinder callback.asBinder()} object is already in the list), then it will be left as-is. Registrations are not counted; a single call to {@link #unregister} will remove a callback after any number calls to register it. not be null -- passing null here will cause a NullPointerException. Most services will want to check for null before calling this with an object given from a client, so that clients can't crash the service with bad data. callback. Returns false if it was not added, either because {@link #kill} had previously been called or the callback's process has gone away.
Remove from the list a callback that was previously added with {@link #register}.  This uses the {@link IInterface#asBinder callback.asBinder()} object to correctly find the previous registration. Registrations are not counted; a single unregister call will remove a callback after any number calls to {@link #register} for it. null here will cause a NullPointerException, so you will generally want to check for null before calling. false if the given callback was not found on the list.
Disable this callback list.  All registered callbacks are unregistered, and the list is disabled so that future calls to {@link #register} will fail.  This should be used when a Service is stopping, to prevent clients from registering callbacks after it is stopped.
Called when the process hosting a callback in the list has gone away. The default implementation calls {@link #onCallbackDied(E)} for backwards compatibility. its process has died, you can not make any calls on to this interface. You can, however, retrieve its IBinder and compare it with another IBinder to see if it is the same object. {@link #register(E, Object)}.
Prepare to start making calls to the currently registered callbacks. This creates a copy of the callback list, which you can retrieve items from using {@link #getBroadcastItem}.  Note that only one broadcast can be active at a time, so you must be sure to always call this from the same thread (usually by scheduling with {@link Handler}) or do your own synchronization.  You must call {@link #finishBroadcast} when done. <p>A typical loop delivering a broadcast looks like this: <pre> int i = callbacks.beginBroadcast(); while (i &gt; 0) { callbacks.finishBroadcast();</pre> with {@link #getBroadcastItem} to determine the range of indices you can supply.
Retrieve an item in the active broadcast that was previously started with {@link #beginBroadcast}.  This can <em>only</em> be called after the broadcast is started, and its data is no longer valid after calling {@link #finishBroadcast}. <p>Note that it is possible for the process of one of the returned callbacks to go away before you call it, so you will need to catch {@link RemoteException} when calling on to the returned object. The callback list itself, however, will take care of unregistering these objects once it detects that it is no longer valid, so you can handle such an exception by simply ignoring it. retrieve.  Ranges from 0 to 1-{@link #beginBroadcast}. always be non-null.
Retrieve the cookie associated with the item returned by {@link #getBroadcastItem(int)}.
Clean up the state of a broadcast previously initiated by calling {@link #beginBroadcast}.  This must always be called when you are done with a broadcast.
Returns a reference to a service with the given name.
Place a new @a service called @a name into the service manager.
Retrieve an existing service called @a name from the service manager.  Non-blocking.
Return a list of all currently running services.
This is only intended to be called when the process is first being brought up and bound by the activity manager. There is only one thread in the process at that time, so no locking is done.
Cast a Binder object into a service manager interface, generating a proxy if needed.
Create a Builder that detects nothing and has no violations.  (but note that {@link #build} will default to enabling {@link #penaltyLog} if no other penalties are specified)
Initialize a Builder from an existing ThreadPolicy.
Detect everything that's potentially suspect. <p>As of the Gingerbread release this includes network and disk operations but will likely expand in future releases.
Disable the detection of everything.
Enable detection of network operations.
Disable detection of network operations.
Enable detection of disk reads.
Disable detection of disk reads.
Enable detection of disk reads.
Enable detection of disk reads.
Enable detection of disk writes.
Disable detection of disk writes.
Show an annoying dialog to the developer on detected violations, rate-limited to be only a little annoying.
Crash the whole process on violation.  This penalty runs at the end of all enabled penalties so you'll still get see logging or other violations before the process dies. <p>Unlike {@link #penaltyDeathOnNetwork}, this applies to disk reads, disk writes, and network usage if their corresponding detect flags are set.
Crash the whole process on any network usage.  Unlike {@link #penaltyDeath}, this penalty runs <em>before</em> anything else.  You must still have called {@link #detectNetwork} to enable this. <p>In the Honeycomb or later SDKs, this is on by default.
Flash the screen during a violation.
Log detected violations to the system log.
Enable detected violations log a stacktrace and timing data to the {@link android.os.DropBoxManager DropBox} on policy violation.  Intended mostly for platform integrators doing beta user field data collection.
Construct the ThreadPolicy instance. <p>Note: if no penalties are enabled before calling <code>build</code>, {@link #penaltyLog} is implicitly set.
Build upon an existing VmPolicy.
Set an upper bound on how many instances of a class can be in memory at once.  Helps to prevent object leaks.
Detect leaks of {@link android.app.Activity} subclasses.
Detect everything that's potentially suspect. <p>In the Honeycomb release this includes leaks of SQLite cursors, Activities, and other closable objects but will likely expand in future releases.
Detect when an {@link android.database.sqlite.SQLiteCursor} or other SQLite object is finalized without having been closed. <p>You always want to explicitly close your SQLite cursors to avoid unnecessary database contention and temporary memory leaks.
Detect when an {@link java.io.Closeable} or other object with a explict termination method is finalized without having been closed. <p>You always want to explicitly close such objects to avoid unnecessary resources leaks.
Crashes the whole process on violation.  This penalty runs at the end of all enabled penalties so yo you'll still get your logging or other violations before the process dies.
Construct the VmPolicy instance. <p>Note: if no penalties are enabled before calling <code>build</code>, {@link #penaltyLog} is implicitly set.
Sets the policy for what actions on the current thread should be detected, as well as the penalty if such actions occur. <p>Internally this sets a thread-local variable which is propagated across cross-process IPC calls, meaning you can catch violations when a system service or another process accesses the disk or network on your behalf.
Sets the policy in Dalvik/libcore (BlockGuard)
Sets up CloseGuard in Dalvik/libcore
Returns the bitmask of the current thread's policy.
Returns the current thread's policy.
A convenience wrapper that takes the current {@link ThreadPolicy} from {@link #getThreadPolicy}, modifies it to permit both disk reads &amp; writes, and sets the new policy with {@link #setThreadPolicy}, returning the old policy so you can restore it at the end of a block.
A convenience wrapper that takes the current {@link ThreadPolicy} from {@link #getThreadPolicy}, modifies it to permit disk reads, and sets the new policy with {@link #setThreadPolicy}, returning the old policy so you can restore it at the end of a block.
We don't want to flash the screen red in the system server process, nor do we want to modify all the call sites of conditionallyEnableDebugLogging() in the system server, so instead we use this to determine if we are the system server.
Enable DropBox logging for debug phone builds.
Used by the framework to make network usage on the main thread a fatal error.
Parses the BlockGuard policy mask out from the Exception's getMessage() String value.  Kinda gross, but least invasive.  : Input is of the following forms: Returns 0 on failure, which is a valid policy, but not a valid policy during a violation (else there must've been some policy in effect to violate).
Like parsePolicyFromMessage(), but returns the violation.
Note: only access this once verifying the thread has a Looper.
Part of BlockGuard.Policy interface:
Part of BlockGuard.Policy interface:
Not part of BlockGuard.Policy; just part of StrictMode:
Part of BlockGuard.Policy interface:
Part of BlockGuard.Policy interface:
Start handling a violation that just started and hasn't actually run yet (e.g. no disk write or network operation has yet occurred).  This sees if we're in an event loop thread and, if so, uses it to roughly measure how long the violation took.
Attempts to fill in the provided ViolationInfo's durationMillis field if this thread has a Looper we can use to measure with.  We measure from the time of violation until the time the looper is idle again (right before the next epoll_wait)
Note: It's possible (even quite likely) that the thread-local policy mask has changed from the time the violation fired and now (after the violating code ran) due to people who push/pop temporary policy in regions of code, hence the policy being passed around.
In the common case, as set by conditionallyEnableDebugLogging, we're just dropboxing any violations but not showing a dialog, not loggging, and not killing the process.  In these cases we don't need to do a synchronous call to the ActivityManager. This is used by both per-thread and vm-wide violations when applicable.
Called from Parcel.writeNoException()
Called from Parcel.writeException(), so we drop this memory and don't incorrectly attribute it to the wrong caller on the next Binder call on this thread.
Sets the policy for what actions in the VM process (on any thread) should be detected, as well as the penalty if such actions occur.
Gets the current VM policy.
Enable the recommended StrictMode defaults, with violations just being logged. <p>This catches disk and network access on the main thread, as well as leaked SQLite cursors and unclosed resources.  This is simply a wrapper around {@link #setVmPolicy} and {@link #setThreadPolicy}.
Called from Parcel.writeNoException()
Called from Parcel.readException() when the exception is EX_STRICT_MODE_VIOLATIONS, we here read back all the encoded violations.
Called from android_util_Binder.cpp's android_os_Parcel_enforceInterface when an incoming Binder call requires changing the StrictMode policy mask.  The role of this function is to ask Binder for its current (native) thread-local policy value and synchronize it to libcore's (Java) thread-local policy value.
Empty constructor for the NO_OP_SPAN
To be called when the critical span is complete (i.e. the animation is done animating).  This can be called on any thread (even a different one from where the animation was taking place), but that's only a defensive implementation measure.  It really makes no sense for you to call this on thread other than that where you created it.
The no-op span that's used in user builds.
Enter a named critical span (e.g. an animation) <p>The name is an arbitary label (or tag) that will be applied to any strictmode violation that happens while this span is active.  You must call finish() on the span when done. <p>This will never return null, but on devices without debugging enabled, this may return a dummy object on which the finish() method is a no-op. <p>TODO: add CloseGuard to this, verifying callers call finish.
For code to note that it's slow.  This is a no-op unless the current thread's {@link android.os.StrictMode.ThreadPolicy} has {@link android.os.StrictMode.ThreadPolicy.Builder#detectCustomSlowCalls} enabled.
Returns an object that is used to track instances of activites. The activity should store a reference to the tracker object in one of its fields.
Create an uninitialized instance of ViolationInfo
Create an instance of ViolationInfo initialized from an exception.
Create an instance of ViolationInfo initialized from a Parcel.
Create an instance of ViolationInfo initialized from a Parcel. and the gathering penalty should be removed.
Save a ViolationInfo instance to a parcel.
Dump a ViolationInfo instance to a Printer.
This class is uninstantiable.
Waits a given number of milliseconds (of uptimeMillis) before returning. Similar to {@link java.lang.Thread#sleep(long)}, but does not throw {@link InterruptedException}; {@link Thread#interrupt()} events are deferred until the next interruptible operation.  Does not return until at least the specified number of milliseconds has elapsed.
Get the value for the given key.
Get the value for the given key, and return as an integer.
Get the value for the given key, and return as a long.
Get the value for the given key, returned as a boolean. Values 'n', 'no', '0', 'false' or 'off' are considered false. Values 'y', 'yes', '1', 'true' or 'on' are considered true. (case sensitive). If the key does not exist, or has any other value, then the default result is returned.
Set the value for the given key.
Request that the init daemon start a named service.
Request that the init daemon stop a named service.
Request that the init daemon restart a named service.
Construct the TokenWatcher on.  If you don't care, just call it like this, although your thread will have to be a Looper thread. <code>new TokenWatcher(new Handler())</code>
Record that this token has been acquired.  When acquire is called, and the current count is 0, the acquired method is called on the given handler.
Removes every key/value pair where value=observer from mObservers
Begin observation of UEvent's.<p> This method will cause the UEvent thread to start if this is the first invocation of startObserving in this process.<p> Once called, the UEvent thread will call onUEvent() when an incoming UEvent matches the specified string.<p> This method can be called multiple times to register multiple matches. Only one call to stopObserving is required even with multiple registered matches.
End observation of UEvent's.<p> This process's UEvent thread will never call onUEvent() on this UEventObserver after this call. Repeated calls have no effect.
Check whether the hardware has a vibrator.  Returns true if a vibrator exists, else false.
Turn the vibrator on.
Vibrate with a given pattern. <p> Pass in an array of ints that are the durations for which to turn on or off the vibrator in milliseconds.  The first value indicates the number of milliseconds to wait before turning the vibrator on.  The next value indicates the number of milliseconds for which to keep the vibrator on before turning it off.  Subsequent values alternate between durations in milliseconds to turn the vibrator off or to turn the vibrator on. </p><p> To cause the pattern to repeat, pass the index into the pattern array at which to start the repeat, or -1 to disable repeating. </p>
Turn the vibrator off.
Create an empty work source.
Create a new WorkSource that is a copy of an existing one. If <var>orig</var> is null, an empty WorkSource is created.
Clear this WorkSource to be empty.
Compare this WorkSource with another.
Replace the current contents of this work source with the given work source.  If <var>other</var> is null, the current work source will be made empty.
Merge the contents of <var>other</var> WorkSource in to this one.
Used to see if the requested call / connection has a different caller attached to it than the one we currently have in the CallCard.
Simple setter for the CallerInfo object.
Convenience method used to retrieve the URI representing the Photo file recorded in the attached CallerInfo Object.
Simple setter for the Photo state.
Simple getter for the Photo state.
Private constructor for static class
Convenience method for calls that do not want to deal with listeners and tokens.
Convenience method for calls that do not want to deal with listeners and tokens, but have a CallerInfo object to cache the image to.
Start an image load, attach the result to the specified CallerInfo object. Note, when the query is started, we make the ImageView INVISIBLE if the placeholderImageResource value is -1.  When we're given a valid (!= -1) placeholderImageResource value, we make sure the image is visible.
Shows the dialog associated with this Preference. This is normally initiated automatically on clicking on the preference. Call this method if you need to show the dialog on some other event.
Gets the dialog that is shown by this preference.
Saves the text to the {@link SharedPreferences}.
Gets the text from the {@link SharedPreferences}.
Adds the EditText widget of this preference to the dialog's view.
Returns the {@link EditText} widget that will be shown in the dialog.
Create a new inflater instance associated with a particular Context.
Create a new inflater instance that is a copy of an existing inflater, optionally with its Context changed. For use in implementing {@link #cloneInContext}.
Sets the default package that will be searched for classes to construct for tag names that have no explicit package.
Returns the default package, or null if it is not set.
Return the current factory (or null). This is called on each element name. If the factory returns an item, add that to the hierarchy. If it returns null, proceed to call onCreateItem(name).
Attach a custom Factory interface for creating items while using this inflater. This must not be null, and can only be set once; after setting, you can not change the factory. This is called on each element name as the XML is parsed. If the factory returns an item, that is added to the hierarchy. If it returns null, the next factory default {@link #onCreateItem} method is called. <p> If you have an existing inflater and want to add your own factory to it, use {@link #cloneInContext} to clone the existing instance and then you can use this function (once) on the returned new instance. This will merge your own factory with whatever factory the original instance is using.
Inflate a new hierarchy from the specified xml node. Throws InflaterException if there is an error. <p> <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance reasons, inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use inflater with an XmlPullParser over a plain XML file at runtime.
Inflate a new hierarchy from the specified xml resource. Throws InflaterException if there is an error.
Before this inflater tries to create an item from the tag, this method will be called. The parser will be pointing to the start of a tag, you must stop parsing and return when you reach the end of this element!
Perform inflation from XML and apply a class-specific base style. This constructor of Preference allows subclasses to use their own base style when they are inflating. For example, a {@link CheckBoxPreference} constructor calls this version of the super class constructor and supplies {@code android.R.attr.checkBoxPreferenceStyle} for <var>defStyle</var>. This allows the theme's checkbox preference style to modify all of the base preference attributes as well as the {@link CheckBoxPreference} class's attributes.
Sets the layout resource that is inflated as the {@link View} to be shown for this Preference. In most cases, the default layout is sufficient for custom Preference objects and only the widget layout needs to be changed. <p> This layout should contain a {@link ViewGroup} with ID {@link android.R.id#widget_frame} to be the parent of the specific widget for this Preference. It should similarly contain {@link android.R.id#title} and {@link android.R.id#summary}.
Sets The layout for the controllable widget portion of this Preference. This is inflated into the main layout. For example, a {@link CheckBoxPreference} would specify a custom layout (consisting of just the CheckBox) here, instead of creating its own main layout.
Gets the View that will be shown in the {@link PreferenceActivity}.
Creates the View to be shown for this Preference in the {@link PreferenceActivity}. The default behavior is to inflate the main layout of this Preference (see {@link #setLayoutResource(int)}. If changing this behavior, please specify a {@link ViewGroup} with ID {@link android.R.id#widget_frame}. <p> Make sure to call through to the superclass's implementation.
Binds the created View to the data for this Preference. <p> This is a good place to grab references to custom Views in the layout and set properties on them. <p> Make sure to call through to the superclass's implementation.
Sets the title for this Preference with a CharSequence. This title will be placed into the ID {@link #onCreateView(ViewGroup)}.
Returns the title resource ID of this Preference.  If the title did not come from a resource, 0 is returned.
Sets the icon for this Preference with a Drawable. This icon will be placed into the ID {@link #onCreateView(ViewGroup)}.
Sets the key for this Preference, which is used as a key to the {@link SharedPreferences}. This should be unique for the package.
Checks whether the key is present, and if it isn't throws an exception. This should be called by subclasses that store preferences in the {@link SharedPreferences}.
Checks whether this Preference is persistent. If it is, it stores its value(s) into the persistent {@link SharedPreferences} storage.
Checks whether, at the given time this method is called, this Preference should store/restore its value(s) into the {@link SharedPreferences}. This, at minimum, checks whether this Preference is persistent and it currently has a key. Before you save/restore from the {@link SharedPreferences}, check this first.
Sets whether this Preference is persistent. When persistent, it stores its value(s) into the persistent {@link SharedPreferences} storage.
Allows a Preference to intercept key events without having focus. For example, SeekBarPreference uses this to intercept +/- to adjust the progress.
Returns the {@link android.content.Context} of this Preference. Each Preference in a Preference hierarchy can be from different Context (for example, if multiple activities provide preferences into a single {@link PreferenceActivity}). This Context will be used to save the Preference values.
Returns the {@link SharedPreferences} where this Preference can read its value(s). Usually, it's easier to use one of the helper read methods: {@link #getPersistedBoolean(boolean)}, {@link #getPersistedFloat(float)}, {@link #getPersistedInt(int)}, {@link #getPersistedLong(long)}, {@link #getPersistedString(String)}. To save values, see {@link #getEditor()}. <p> In some cases, writes to the {@link #getEditor()} will not be committed right away and hence not show up in the returned {@link SharedPreferences}, this is intended behavior to improve performance.
Returns an {@link SharedPreferences.Editor} where this Preference can save its value(s). Usually it's easier to use one of the helper save methods: {@link #persistBoolean(boolean)}, {@link #persistFloat(float)}, {@link #persistInt(int)}, {@link #persistLong(long)}, {@link #persistString(String)}. To read values, see {@link #getSharedPreferences()}. If {@link #shouldCommit()} returns true, it is this Preference's responsibility to commit. <p> In some cases, writes to this will not be committed right away and hence not show up in the SharedPreferences, this is intended behavior to improve performance.
Returns whether the {@link Preference} should commit its saved value(s) in {@link #getEditor()}. This may return false in situations where batch committing is being done (by the manager) to improve performance.
Compares Preference objects based on order (if set), otherwise alphabetically on the titles.
Called when the Preference hierarchy has been attached to the {@link PreferenceActivity}. This can also be called when this Preference has been attached to a group that was already attached to the {@link PreferenceActivity}.
Attempts to persist a set of Strings to the {@link android.content.SharedPreferences}. <p> This will check if this Preference is persistent, get an editor from the {@link PreferenceManager}, put in the strings, and check if we should commit (and commit if so).
Attempts to get a persisted set of Strings from the {@link android.content.SharedPreferences}. <p> This will check if this Preference is persistent, get the SharedPreferences from the {@link PreferenceManager}, and get the value.
Return the currently set title.  If {@link #titleRes} is set, this resource is loaded from <var>res</var> and returned.  Otherwise {@link #title} is returned.
Return the currently set summary.  If {@link #summaryRes} is set, this resource is loaded from <var>res</var> and returned.  Otherwise {@link #summary} is returned.
Return the currently set bread crumb title.  If {@link #breadCrumbTitleRes} is set, this resource is loaded from <var>res</var> and returned.  Otherwise {@link #breadCrumbTitle} is returned.
Return the currently set bread crumb short title.  If {@link #breadCrumbShortTitleRes} is set, this resource is loaded from <var>res</var> and returned.  Otherwise {@link #breadCrumbShortTitle} is returned.
Returns true if this activity is currently showing the header list.
Returns true if this activity is showing multiple panes -- the headers and a preference fragment.
Called to determine if the activity should run in multi-pane mode. The default implementation returns true if the screen is large enough.
Called to determine whether the header list should be hidden. The default implementation returns the value given in {@link #EXTRA_NO_HEADERS} or false if it is not supplied. This is set to false, for example, when the activity is being re-launched to show a particular preference activity.
Called to determine the initial header to be shown.  The default implementation simply returns the fragment of the first header.  Note that the returned Header object does not actually need to exist in your header list -- whatever its fragment is will simply be used to show for the initial UI.
Called after the header list has been updated ({@link #onBuildHeaders} has been called and returned due to {@link #invalidateHeaders()}) to specify the header that should now be selected.  The default implementation returns null to keep whatever header is currently selected.
Called when the activity needs its list of headers build.  By implementing this and adding at least one item to the list, you will cause the activity to run in its modern fragment mode.  Note that this function may not always be called; for example, if the activity has been asked to display a particular fragment without the header list, there is no need to build the headers. <p>Typical implementations will use {@link #loadHeadersFromResource} to fill in the list from a resource.
Call when you need to change the headers being displayed.  Will result in onBuildHeaders() later being called to retrieve the new list.
Parse the given XML file as a header description, adding each parsed Header into the target list.
Set a footer that should be shown at the bottom of the header list.
Called when the user selects an item in the header list.  The default implementation will call either {@link #startWithFragment(String, Bundle, Fragment, int, int, int)} or {@link #switchToHeader(Header)} as appropriate.
Called by {@link #startWithFragment(String, Bundle, Fragment, int, int, int)} when in single-pane mode, to build an Intent to launch a new activity showing the selected fragment.  The default implementation constructs an Intent that re-launches the current activity with the appropriate arguments to display the fragment. fragment.
Like {@link #startWithFragment(String, Bundle, Fragment, int, int, int)} but uses a 0 titleRes.
Start a new instance of this activity, showing only the given preference fragment.  When launched in this mode, the header list will be hidden and the given preference fragment will be instantiated and fill the entire activity. the activity launch. code in which to report the result. this set of preferences. this set of preferences.
Change the base title of the bread crumbs for the current preferences. This will normally be called for you.  See {@link android.app.FragmentBreadCrumbs} for more information.
Should be called after onCreate to ensure that the breadcrumbs, if any, were created. This prepends a title to the fragment breadcrumbs and attaches a listener to any clicks on the parent entry.
When in two-pane mode, switch the fragment pane to show the given preference fragment.
When in two-pane mode, switch to the fragment pane to show the given preference fragment.
Start a new fragment. the current fragment will be replaced.
Start a new fragment containing a preference panel.  If the prefences are being displayed in multi-pane mode, the given fragment class will be instantiated and placed in the appropriate pane.  If running in single-pane mode, a new activity will be launched in which to show the fragment. fragment. If non-null, resultTo.onActivityResult() will be called when this preference panel is done.  The launched panel must use {@link #finishPreferencePanel(Fragment, int, Intent)} when done. request code to be received with the resut.
Called by a preference panel fragment to finish itself. launching fragment. launching fragment.
Posts a message to bind the preferences to the list view. <p> Binding late is preferred as any custom preference types created in {@link #onCreate(Bundle)} are able to have their views recycled.
give subclasses access to the Next button
Adds preferences from activities that match the given {@link Intent}.
This constructor should ONLY be used when getting default values from an XML preference hierarchy. <p> The {@link PreferenceManager#PreferenceManager(Activity)} should be used ANY time a preference will be displayed, since some preference types need an Activity for managed queries.
Sets the owning preference fragment
Returns the owning preference fragment, if any.
Returns a list of {@link Activity} (indirectly) that match a given {@link Intent}.
Inflates a preference hierarchy from the preference hierarchies of {@link Activity Activities} that match the given {@link Intent}. An {@link Activity} defines its preference hierarchy with meta-data using the {@link #METADATA_KEY_PREFERENCES} key. <p> If a preference hierarchy is given, the new preference hierarchies will be merged in.
Sets the default values from a preference hierarchy in XML. This should be called by the application's main activity. <p> If {@code readAgain} is false, this will only set the default values if this method has never been called in the past (or the {@link #KEY_HAS_SET_DEFAULT_VALUES} in the default value shared preferences file is false). To attempt to set the default values again bypassing this check, set {@code readAgain} to true.
Similar to {@link #setDefaultValues(Context, int, boolean)} but allows the client to provide the filename and mode of the shared preferences file.
Returns the activity that shows the preferences. This is useful for doing managed queries, but in most cases the use of {@link #getContext()} is preferred. <p> This will return null if this class was instantiated with a Context instead of Activity. For example, when setting the default values.
Returns the context. This is preferred over {@link #getActivity()} when possible.
Registers a listener.
Unregisters a listener.
Called by the {@link PreferenceManager} to dispatch a subactivity result.
Registers a listener.
Unregisters a listener.
Called by the {@link PreferenceManager} to dispatch the activity stop event.
Registers a listener.
Unregisters a listener.
Called by the {@link PreferenceManager} to dispatch the activity destroy event.
Returns a request code that is unique for the activity. Each subsequent call to this method should return another unique request code.
Called by {@link PreferenceActivity} to dispatch the new Intent event.
Returns an adapter that can be attached to a {@link PreferenceActivity} or {@link PreferenceFragment} to show the preferences contained in this {@link PreferenceScreen}. <p> This {@link PreferenceScreen} will NOT appear in the returned adapter, instead it appears in the hierarchy above this {@link PreferenceScreen}. <p> This adapter's {@link Adapter#getItem(int)} should always return a subclass of {@link Preference}.
Creates the root adapter.
Binds a {@link ListView} to the preferences contained in this {@link PreferenceScreen} via {@link #getRootAdapter()}. It also handles passing list item clicks to the corresponding {@link Preference} contained by this {@link PreferenceScreen}.
Used to get a handle to the dialog. This is useful for cases where we want to manipulate the dialog as we would with any other activity or view.
Returns the sound type(s) that are shown in the picker.
Sets the sound type(s) that are shown in the picker.
Returns whether to a show an item for the default sound/ringtone.
Sets whether to show an item for the default sound/ringtone. The default to use will be deduced from the sound type(s) being shown.
Returns whether to a show an item for 'Silent'.
Sets whether to show an item for 'Silent'.
Prepares the intent to launch the ringtone picker. This can be modified to adjust the parameters of the ringtone picker.
Called when a ringtone is chosen. <p> By default, this saves the ringtone URI to the persistent storage as a string.
Called when the chooser is about to be shown and the current ringtone should be marked. Can return null to not mark any ringtone. <p> By default, this restores the previous ringtone URI from the persistent storage.
Allow subclasses to override the action buttons
Persist the seekBar's progress value if callChangeListener returns true, otherwise set the seekBar's progress to the stored value
Sets the checked state and saves it to the {@link SharedPreferences}.
Sync a summary view contained within view's subhierarchy with the correct summary text.
Do clean up.  This can be called multiple times!
Gets a cursor with application search results. See {@link ApplicationColumns} for the columns available in the returned cursor.
Gets the application component name from an application URI. <code>null</code> if the given URI was <code>null</code> or malformed.
Gets the URI for an application component.
Open an activity to save a bookmark. Launch with a title and/or a url, both of which can be edited by the user before saving.
Sends the given string using an Intent with {@link Intent#ACTION_SEND} and a mime type of text/plain. The string is put into {@link Intent#EXTRA_TEXT}.
Find an application to handle the given string and, if found, invoke it with the given string as a parameter. to select between multiple applications that are all capable of handling the string.
Return a cursor pointing to a list of all the bookmarks. The cursor will have a single column, {@link BookmarkColumns#URL}. <p> Requires {@link android.Manifest.permission#READ_HISTORY_BOOKMARKS}
Return a cursor pointing to a list of all visited site urls. The cursor will have a single column, {@link BookmarkColumns#URL}. <p> Requires {@link android.Manifest.permission#READ_HISTORY_BOOKMARKS}
Update the visited history to acknowledge that a site has been visited. Requires {@link android.Manifest.permission#READ_HISTORY_BOOKMARKS} Requires {@link android.Manifest.permission#WRITE_HISTORY_BOOKMARKS}
Returns all the URLs in the history. Requires {@link android.Manifest.permission#READ_HISTORY_BOOKMARKS}
If there are more than MAX_HISTORY_COUNT non-bookmark history items in the bookmark/history table, delete TRUNCATE_N_OLDEST of them.  This is used to keep our history table to a reasonable size.  Note: it does not prune bookmarks.  If the user wants 1000 bookmarks, the user gets 1000 bookmarks. Requires {@link android.Manifest.permission#READ_HISTORY_BOOKMARKS} Requires {@link android.Manifest.permission#WRITE_HISTORY_BOOKMARKS}
Returns whether there is any history to clear. Requires {@link android.Manifest.permission#READ_HISTORY_BOOKMARKS}
Delete all entries from the bookmarks/history table which are not bookmarks.  Also set all visited bookmarks to unvisited. Requires {@link android.Manifest.permission#WRITE_HISTORY_BOOKMARKS}
Helper function to delete all history items and release the icons for them in the {@link WebIconDatabase}. Requires {@link android.Manifest.permission#READ_HISTORY_BOOKMARKS} Requires {@link android.Manifest.permission#WRITE_HISTORY_BOOKMARKS}
Delete all history items from begin to end. Requires {@link android.Manifest.permission#WRITE_HISTORY_BOOKMARKS}
Remove a specific url from the history database. Requires {@link android.Manifest.permission#WRITE_HISTORY_BOOKMARKS}
Add a search string to the searches database. Requires {@link android.Manifest.permission#READ_HISTORY_BOOKMARKS} Requires {@link android.Manifest.permission#WRITE_HISTORY_BOOKMARKS}
Remove all searches from the search database. Requires {@link android.Manifest.permission#WRITE_HISTORY_BOOKMARKS}
Request all icons from the database.  This call must either be called in the main thread or have had Looper.prepare() invoked in the calling thread. Requires {@link android.Manifest.permission#READ_HISTORY_BOOKMARKS}
Builds a URI that points to a specific folder.
Returns true if bookmark sync is enabled
Sets the bookmark sync enabled setting.
Creates an entity iterator for the given cursor. It assumes the cursor contains a calendars query.
Queries all attendees associated with the given event. This is a blocking call and should not be done on the UI thread.
Creates a new iterator for events
Performs a query to return all visible instances in the given range. This is a blocking function and should not be done on the UI thread. This will cause an expansion of recurring events to fill this time range if they are not already expanded and will slow down for larger time ranges with many recurring events.
Performs a query to return all visible instances in the given range that match the given query. This is a blocking function and should not be done on the UI thread. This will cause an expansion of recurring events to fill this time range if they are not already expanded and will slow down for larger time ranges with many recurring events.
Retrieves the days with events for the Julian days starting at "startDay" for "numDays". It returns a cursor containing startday and endday representing the max range of days for all events beginning on each startday.This is a blocking function and should not be done on the UI thread.
Queries all reminders associated with the given event. This is a blocking call and should not be done on the UI thread.
Helper for inserting an alarm time associated with an event TODO move to Provider
Finds the next alarm after (or equal to) the given time and returns the time of that alarm or -1 if no such alarm exists. This is a blocking call and should not be done on the UI thread. TODO move to provider
Searches the CalendarAlerts table for alarms that should have fired but have not and then reschedules them. This method can be called at boot time to restore alarms that may have been lost due to a phone reboot. TODO move to provider
Schedules an alarm intent with the system AlarmManager that will notify listeners when a reminder should be fired. The provider will keep scheduled reminders up to date but apps may use this to implement snooze functionality without modifying the reminders table. Scheduled alarms will generate an intent using {@link #ACTION_EVENT_REMINDER}. TODO Move to provider
Searches for an entry in the CalendarAlerts table that matches the given event id, begin time and alarm time. If one is found then this alarm already exists and this method returns true. TODO Move to provider
Adds a call to the call log. if the contact is unknown. {@hide}
Query the call log database for the last dialed number. string if none exist yet.
Notifies the system of a change in the list of directories handled by a particular directory provider. The Contacts provider will turn around and send a query to the directory provider for the full list of directories, which will replace the previous list.
Builds a {@link #CONTENT_LOOKUP_URI} style {@link Uri} describing the requested {@link Contacts} entry.
Build a {@link #CONTENT_LOOKUP_URI} lookup {@link Uri} using the given {@link ContactsContract.Contacts#_ID} and {@link #LOOKUP_KEY}.
Computes a content URI (see {@link #CONTENT_URI}) given a lookup URI. <p> Returns null if the contact cannot be found.
Mark a contact as having been contacted. Updates two fields: {@link #TIMES_CONTACTED} and {@link #LAST_TIME_CONTACTED}. The TIMES_CONTACTED field is incremented by 1 and the LAST_TIME_CONTACTED field is populated with the current system time.
Optional existing contact ID.  If it is not provided, the search will be based exclusively on the values supplied with {@link #addParameter}.
A value that can be used when searching for an aggregation suggestion.
Opens an InputStream for the contacts's photo and returns the photo as a byte stream. either a {@link #CONTENT_URI} or a {@link #CONTENT_LOOKUP_URI} URI. available, it is returned. If false, this function always tries to get the thumbnail
Opens an InputStream for the contacts's thumbnail photo and returns the photo as a byte stream. either a {@link #CONTENT_URI} or a {@link #CONTENT_LOOKUP_URI} URI. of the thumbnail the high-res picture is preferred
This method can be used to identify whether the given ID is associated with profile data.  It does not necessarily indicate that the ID is tied to valid data, merely that accessing data using this ID will result in profile access checks and will only return data from the profile.
Build a {@link android.provider.ContactsContract.Contacts#CONTENT_LOOKUP_URI} style {@link Uri} for the parent {@link android.provider.ContactsContract.Contacts} entry of the given {@link RawContacts} entry.
TODO: javadoc
<p> Build a {@link android.provider.ContactsContract.Contacts#CONTENT_LOOKUP_URI} style {@link Uri} for the parent {@link android.provider.ContactsContract.Contacts} entry of the given {@link ContactsContract.Data} entry. </p> <p> Returns the Uri for the contact in the first entry returned by {@link ContentResolver#query(Uri, String[], String, String[], String)} for the provided {@code dataUri}.  If the query returns null or empty results, silently returns null. </p>
Gets the resource ID for the proper presence icon.
Returns the precedence of the status code the higher number being the higher precedence.
Return the string resource that best describes the given {@link #TYPE}. Will always return a valid resource.
Return a {@link CharSequence} that best describes the given type, possibly substituting the given {@link #LABEL} value for {@link #TYPE_CUSTOM}.
Return the string resource that best describes the given {@link #PROTOCOL}. Will always return a valid resource.
Return a {@link CharSequence} that best describes the given protocol, possibly substituting the given {@link #CUSTOM_PROTOCOL} value for {@link #PROTOCOL_CUSTOM}.
Return the string resource that best describes the given {@link #TYPE}. Will always return a valid resource.
Trigger a dialog that lists the various methods of interacting with the requested {@link Contacts} entry. This may be based on available {@link ContactsContract.Data} rows under that contact, and may also include social status and presence details.
Creates a snippet out of the given content that matches the given query.
Helper method for splitting a string into tokens.  The lists passed in are populated with the tokens and offsets into the content of each token.  The tokenization function parses e-mail addresses as a single token; otherwise it splits on any non-alphanumeric character.
Utility function for inserting a file into the DRM content provider.
Utility function for inserting a file stream into the DRM content provider.
Utility function to enforce any permissions required to access DRM content.
given volume.
For use only by the MTP implementation.
Used to implement the MTP GetObjectReferences and SetObjectReferences commands.
This method cancels the thumbnail request so clients waiting for getThumbnail will be interrupted and return immediately. Only the original process which made the getThumbnail requests can cancel their own requests.
This method ensure thumbnails associated with origId are generated and decode the byte stream from database (MICRO_KIND) or file (MINI_KIND). Special optimization has been done to avoid further IPC communication for MICRO_KIND thumbnails.
Retrieves an image for the given url as a {@link Bitmap}.
Insert an image and create a thumbnail for it.
This method checks if the thumbnails of the specified image (origId) has been created. It will be blocked until the thumbnails are generated.
Converts a name to a "key" that can be used for grouping, sorting and searching. The rules that govern this conversion are: - remove 'special' characters like ()[]'!?., - remove leading/trailing spaces - convert everything to lowercase - remove leading "the ", "an " and "a " - remove trailing ", the|an|a" - remove accents. This step leaves us with CollationKey data, which is not human readable
with the given the volume and audioID
Convenience method to move a playlist item to a new location
Uri for querying the state of the media scanner.
Get the media provider's version. Applications that import data from the media provider into their own caches can use this to detect that the media provider changed, and reimport data as needed. No other assumptions should be made about the meaning of the version.
Although provider utility classes are typically static, this one must be constructed because it needs to be initialized using the same values that you provided in your {@link android.content.SearchRecentSuggestionsProvider}. database.  Note, this value should not change from run to run, because when it does change, your suggestions database may be wiped.
Add a query to the recent queries list.  Returns immediately, performing the save in the background. the suggestion, and if the user clicks on the suggestion, this string will be sent to your searchable activity (as a new search query). {@link android.content.SearchRecentSuggestionsProvider#DATABASE_MODE_2LINES}, you can pass a second line of text here.  It will be shown in a smaller font, below the primary suggestion.  When typing, matches in either line of text will be displayed in the list. If you did not configure two-line mode, or if a given suggestion does not have any additional text to display, you can pass null here.
Visible for testing.
Completely delete the history.  Use this call to implement a "clear history" UI. Any application that implements search suggestions based on previous actions (such as recent queries, page/items viewed, etc.) should provide a way for the user to clear the history.  This gives the user a measure of privacy, if they do not wish for their recent searches to be replayed by other users of the device (via suggestions).
Reduces the length of the history table, to prevent it from growing too large.
Look up a name in the database.
Store a name/value pair into the database.
Construct the content URI for a particular name/value pair, useful for monitoring changes with a ContentObserver.
Convenience function for retrieving a single system settings value as an integer.  Note that internally setting values are always stored as strings; this function converts the string to an integer for you.  The default value will be returned if the setting is not defined or not an integer. or not a valid integer.
Convenience function for retrieving a single system settings value as an integer.  Note that internally setting values are always stored as strings; this function converts the string to an integer for you. <p> This version does not take a default value.  If the setting has not been set, or the string value is not a number, it throws {@link SettingNotFoundException}. name can't be found or the setting value is not an integer.
Convenience function for updating a single settings value as an integer. This will either create a new entry in the table if the given name does not exist, or modify the value of the existing row with that name.  Note that internally setting values are always stored as strings, so this function converts the given value to a string before storing it.
Convenience function for retrieving a single system settings value as a {@code long}.  Note that internally setting values are always stored as strings; this function converts the string to a {@code long} for you.  The default value will be returned if the setting is not defined or not a {@code long}. or not a valid {@code long}.
Convenience function for retrieving a single system settings value as a {@code long}.  Note that internally setting values are always stored as strings; this function converts the string to a {@code long} for you. <p> This version does not take a default value.  If the setting has not been set, or the string value is not a number, it throws {@link SettingNotFoundException}. name can't be found or the setting value is not an integer.
Convenience function for updating a single settings value as a long integer. This will either create a new entry in the table if the given name does not exist, or modify the value of the existing row with that name.  Note that internally setting values are always stored as strings, so this function converts the given value to a string before storing it.
Convenience function for retrieving a single system settings value as a floating point number.  Note that internally setting values are always stored as strings; this function converts the string to an float for you. The default value will be returned if the setting is not defined or not a valid float. or not a valid float.
Convenience function for retrieving a single system settings value as a float.  Note that internally setting values are always stored as strings; this function converts the string to a float for you. <p> This version does not take a default value.  If the setting has not been set, or the string value is not a number, it throws {@link SettingNotFoundException}. name can't be found or the setting value is not a float.
Convenience function for updating a single settings value as a floating point number. This will either create a new entry in the table if the given name does not exist, or modify the value of the existing row with that name.  Note that internally setting values are always stored as strings, so this function converts the given value to a string before storing it.
Convenience function to read all of the current configuration-related settings into a {@link Configuration} object.
by the settings.
Convenience function to write a batch of configuration-related settings from a {@link Configuration} object.
Convenience function for retrieving a single secure settings value as an integer.  Note that internally setting values are always stored as strings; this function converts the string to an integer for you.  The default value will be returned if the setting is not defined or not an integer. or not a valid integer.
Convenience function for retrieving a single secure settings value as an integer.  Note that internally setting values are always stored as strings; this function converts the string to an integer for you. <p> This version does not take a default value.  If the setting has not been set, or the string value is not a number, it throws {@link SettingNotFoundException}. name can't be found or the setting value is not an integer.
Convenience function for retrieving a single secure settings value as a {@code long}.  Note that internally setting values are always stored as strings; this function converts the string to a {@code long} for you.  The default value will be returned if the setting is not defined or not a {@code long}. or not a valid {@code long}.
Convenience function for retrieving a single secure settings value as a {@code long}.  Note that internally setting values are always stored as strings; this function converts the string to a {@code long} for you. <p> This version does not take a default value.  If the setting has not been set, or the string value is not a number, it throws {@link SettingNotFoundException}. name can't be found or the setting value is not an integer.
Convenience function for updating a secure settings value as a long integer. This will either create a new entry in the table if the given name does not exist, or modify the value of the existing row with that name.  Note that internally setting values are always stored as strings, so this function converts the given value to a string before storing it.
Convenience function for retrieving a single secure settings value as a floating point number.  Note that internally setting values are always stored as strings; this function converts the string to an float for you. The default value will be returned if the setting is not defined or not a valid float. or not a valid float.
Convenience function for retrieving a single secure settings value as a float.  Note that internally setting values are always stored as strings; this function converts the string to a float for you. <p> This version does not take a default value.  If the setting has not been set, or the string value is not a number, it throws {@link SettingNotFoundException}. name can't be found or the setting value is not a float.
Get the key that retrieves a bluetooth headset's priority.
Get the key that retrieves a bluetooth a2dp sink's priority.
Get the key that retrieves a bluetooth Input Device's priority.
Helper method for determining if a location provider is enabled.
Thread-safe method for enabling or disabling a single location provider.
Convenience function to retrieve the bookmarked Intent for a particular shortcut key.
Add a new bookmark to the system.
Return the folder name as it should be displayed to the user.  This takes care of localizing special folders.
Return the title as it should be displayed to the user. This takes care of localizing bookmarks that point to activities.
Returns the device ID that we should use when connecting to the mobile gtalk server. This is a string like "android-0x1242", where the hex string is the Android ID obtained from the GoogleLoginService.
Get the sync state that is associated with the account or null. with the {@link android.content.ContentProvider} that contains the sync state. {@link android.content.ContentProvider}
Assigns the data array as the sync state for the given account. with the {@link android.content.ContentProvider} that contains the sync state. {@link android.content.ContentProvider}
Creates and returns a ContentProviderOperation that assigns the data array as the sync state for the given account. account's sync state
Creates and returns a ContentProviderOperation that assigns the data array as the sync state for the given account. account's sync state
Add an SMS to the given URI with thread_id specified.
Move a message to the given folder.
Add an SMS to the Draft box.
Save over an existing draft message.
Add an SMS to the Out box.
Read the PDUs out of an {@link #SMS_RECEIVED_ACTION} or a {@link #DATA_SMS_RECEIVED_ACTION} intent.
This is a single-recipient version of getOrCreateThreadId.  It's convenient for use with SMS messages.
Given the recipients list and subject of an unsaved message, return its thread ID.  If the message starts a new thread, allocate a new thread ID.  Otherwise, use the appropriate existing thread ID. Find the thread ID of the same set of recipients (in any order, without any additions). If one is found, return it.  Otherwise, return a unique thread ID.
Returns true if the address is an email address
Returns true if the number is a Phone number
Adds a word to the dictionary, with the given frequency and the specified specified locale type. empty. {@link #LOCALE_TYPE_ALL} or {@link #LOCALE_TYPE_CURRENT}.
A convenience method to build voicemail URI specific to a source package by appending {@link VoicemailContract#PARAM_KEY_SOURCE_PACKAGE} param to the base URI.
A convenience method to build status URI specific to a source package by appending {@link VoicemailContract#PARAM_KEY_SOURCE_PACKAGE} param to the base URI.
Copy an allocation from an array.  This variant is not type checked which allows an application to fill in structured data from an array.
Copy an allocation from an array.  This variant is type checked and will generate exceptions if the Allocation type is not a 32 bit integer type.
Copy an allocation from an array.  This variant is type checked and will generate exceptions if the Allocation type is not a 16 bit integer type.
Copy an allocation from an array.  This variant is type checked and will generate exceptions if the Allocation type is not a 8 bit integer type.
Copy an allocation from an array.  This variant is type checked and will generate exceptions if the Allocation type is not a 32 bit float type.
Copy an allocation from a bitmap.  The height, width, and format of the bitmap must match the existing allocation.
This is only intended to be used by auto-generate code reflected from the renderscript script files.
Generate a mipmap chain.  Requires the type of the allocation include mipmaps. This function will generate a complete set of mipmaps from the top level lod and place them into the script memoryspace. If the allocation is also using other memory spaces a followup sync will be required.
Copy part of an allocation from an array.  This variant is not type checked which allows an application to fill in structured data from an array.
Copy part of an allocation from an array.  This variant is type checked and will generate exceptions if the Allocation type is not a 32 bit integer type.
Copy part of an allocation from an array.  This variant is type checked and will generate exceptions if the Allocation type is not a 16 bit integer type.
Copy part of an allocation from an array.  This variant is type checked and will generate exceptions if the Allocation type is not a 8 bit integer type.
Copy part of an allocation from an array.  This variant is type checked and will generate exceptions if the Allocation type is not a 32 bit float type.
Copy part of an allocation from another allocation.
Copy a rectangular region from the array into the allocation. The incoming array is assumed to be tightly packed.
Copy a rectangular region into the allocation from another allocation.
Copy a bitmap into an allocation.  The height and width of the update will use the height and width of the incoming bitmap.
Copy from the Allocation into a Bitmap.  The bitmap must match the dimensions of the Allocation.
Copy from the Allocation into a byte array.  The array must be at least as large as the Allocation.  The allocation must be of an 8 bit elemental type.
Copy from the Allocation into a short array.  The array must be at least as large as the Allocation.  The allocation must be of an 16 bit elemental type.
Copy from the Allocation into a int array.  The array must be at least as large as the Allocation.  The allocation must be of an 32 bit elemental type.
Copy from the Allocation into a float array.  The array must be at least as large as the Allocation.  The allocation must be of an 32 bit float elemental type.
Resize a 1D allocation.  The contents of the allocation are preserved.  If new elements are allocated objects are created with null contents and the new region is otherwise undefined. If the new region is smaller the references of any objects outside the new region will be released. A new type will be created with the new dimension.
Creates a renderscript allocation with the size specified by the type and no mipmaps generated by default
Creates a renderscript allocation for use by the script with the size specified by the type and no mipmaps generated by default
Creates a renderscript allocation with a specified number of given elements
Creates a renderscript allocation from a bitmap
Creates a non-mipmapped renderscript allocation to use as a graphics texture
Creates a cubemap allocation from a bitmap containing the horizontal list of cube faces. Each individual face must be the same size and power of 2
Creates a non-mipmapped cubemap allocation for use as a graphics texture from a bitmap containing the horizontal list of cube faces. Each individual face must be the same size and power of 2
Creates a cubemap allocation from 6 bitmaps containing the cube faces. All the faces must be the same size and power of 2
Creates a non-mipmapped cubemap allocation for use as a graphics texture from 6 bitmaps containing the cube faces. All the faces must be the same size and power of 2
Creates a renderscript allocation from the bitmap referenced by resource id
Creates a non-mipmapped renderscript allocation to use as a graphics texture from the bitmap referenced by resource id
Creates a renderscript allocation containing string data encoded in UTF-8 format
Set the active LOD.  The LOD must be within the range for the type being adapted.  The base allocation must have mipmaps. Because this changes the dimensions of the adapter the current Y and Z will be reset.
Set the active Face.  The base allocation must be of a type that includes faces.
Set the active Y.  The y value must be within the range for the allocation being adapted.  The base allocation must contain the Y dimension.
Set the active Z.  The z value must be within the range for the allocation being adapted.  The base allocation must contain the Z dimension.
Override the Allocation resize.  Resizing adapters is not allowed and will throw a RSInvalidStateException.
setName assigns a name to an object.  This object can later be looked up by this name.  This name will also be retained if the object is written to an A3D file.
destroy disconnects the object from the native object effectively rendering this java object dead.  The primary use is to force immediate cleanup of resources when it is believed the GC will not respond quickly enough.
If an object came from an a3d file, java fields need to be created with objects from the native layer
Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER.
Returns the name of a renderscript object the index entry describes describes
Returns the type of a renderscript object the index entry describes
Used to load the object described by the index entry
Used to load the mesh described by the index entry, object described by the index entry must be a renderscript mesh
Returns the number of objects stored inside the a3d file
Returns an index entry from the list of all objects inside FileA3D
Creates a FileA3D object from an asset stored on disk
Creates a FileA3D object from a file stored on disk
Creates a FileA3D object from an application resource
Takes a specific file name as an argument
Accepts one of the following family names as an argument and will attempt to produce the best match with a system font: "sans-serif" "arial" "helvetica" "tahoma" "verdana" "serif" "times" "times new roman" "palatino" "georgia" "baskerville" "goudy" "fantasy" "cursive" "ITC Stone Serif" "monospace" "courier" "courier new" "monaco" Returns default font if no match could be found.
Creates builder object
Adds a vertex data type to the builder object
Adds an index set data type to the builder object
Adds an index set primitive type to the builder object
Create a Mesh object from the current state of the builder
Adds an allocation containing vertex buffer data to the builder
Adds an allocation containing index buffer data and index type to the builder
Adds an index set type to the builder
Adds a float2 vertex to the mesh
Adds a float3 vertex to the mesh
Sets the texture coordinate for the last added vertex
Sets the normal vector for the last added vertex
Sets the color for the last added vertex
Adds a new triangle to the mesh builder
Creates the mesh object from the current state of the builder
Binds a constant buffer to be used as uniform inputs to the program
Binds a texture to be used in the program
Binds an object that describes how a texture at the corresponding location is sampled
Sets the GLSL shader code to be used in the program
Queries the index of the last added constant buffer type
Queries the index of the last added texture type
Adds constant (uniform) inputs to the program
Adds a texture input to the Program
Creates ProgramFragment from the current state of the builder
Creates ProgramFragmentFixedFunction from the current state of the builder
Creates a builder for fixed function fragment program
Adds a texture to be fetched as part of the fixed function fragment program
Specifies whether the texture coordinate passed from the vertex program is replaced with an openGL internal point sprite texture coordinate
Specifies whether the varying color passed from the vertex program or the constant color set on the fragment program is used in the final color calculation in the fixed function fragment shader
Creates the fixed function fragment program from the current state of the builder.
Returns a pre-defined program store object with the following characteristics: - incoming pixels are drawn if their depth value is less than - incoming pixels override the value stored in the color
Returns a pre-defined program store object with the following characteristics: - incoming pixels always pass the depth test and their value - incoming pixels override the value stored in the color
Returns a pre-defined program store object with the following characteristics: - incoming pixels are drawn if their depth value is less than - if the incoming (Source) pixel passes depth test, its value Final.RGB = Source.RGB * Source.A + Dest.RGB * (1 - Source.A)
Returns a pre-defined program store object with the following characteristics: - incoming pixels always pass the depth test and their value - incoming pixel's value is combined with the stored color Final.RGB = Source.RGB * Source.A + Dest.RGB * (1 - Source.A)
Specifies the depth testing behavior
Enables writes into the depth buffer
Enables writes into the color buffer
Specifies how incoming pixels are combined with the pixels stored in the framebuffer
Enables dithering
Creates a program store from the current state of the builder
Add varying inputs to the program
Creates ProgramVertex from the current state of the builder
Binds the constant buffer containing fixed function emulation matrices
Creates ProgramVertexFixedFunction from the current state of the builder
Creates a builder for fixed function vertex program
Specifies whether texture matrix calculations are to be added to the shader
Creates a buffer to store fixed function emulation matrices
Forces deallocation of memory backing the contant matrices. Normally, this is unnecessary and will be garbage collected
Sets the modelview matrix in the fixed function matrix buffer
Sets the projection matrix in the fixed function matrix buffer
Sets the texture matrix in the fixed function matrix buffer. Texture matrix must be enabled in the ProgramVertexFixedFunction builder for the shader to utilize it.
Create a basic RenderScript context.
Wait for any commands in the fifo between the java bindings and native to be processed.
Destroy this renderscript context.  Once this function is called its no
Set the per-component bit depth for color (red, green, blue).  This configures the surface for an unsigned integer buffer type.
Set the bit depth for alpha. This configures the surface for an unsigned integer buffer type.
Set the bit depth for the depth buffer. This configures the surface for an unsigned integer buffer type.  If a minimum of 0 is specified then its possible no depth buffer will be allocated.
Configure the multisample rendering.
Construct a new RenderScriptGL context.
Bind an os surface
Bind an os surface
return the height of the last set surface.
return the width of the last set surface.
Temporarly halt calls to the root rendering script.
Resume calls to the root rendering script.
Set the script to handle calls to render the primary surface.
Set the default ProgramStore object seen as the parent state by the root rendering script.
Set the default ProgramFragment object seen as the parent state by the root rendering script.
Set the default ProgramRaster object seen as the parent state by the root rendering script.
Set the default ProgramVertex object seen as the parent state by the root rendering script.
Standard View constructor. In order to render something, you must call {@link android.opengl.GLSurfaceView#setRenderer} to register a renderer.
This method is part of the SurfaceHolder.Callback interface, and is not normally called or subclassed by clients of RSSurfaceView.
This method is part of the SurfaceHolder.Callback interface, and is not normally called or subclassed by clients of RSSurfaceView.
This method is part of the SurfaceHolder.Callback interface, and is not normally called or subclassed by clients of RSSurfaceView.
Inform the view that the activity is paused. The owner of this view must call this method when the activity is paused. Calling this method will pause the rendering thread. Must not be called before a renderer has been set.
Inform the view that the activity is resumed. The owner of this view must call this method when the activity is resumed. Calling this method will recreate the OpenGL display and resume the rendering thread. Must not be called before a renderer has been set.
Standard View constructor. In order to render something, you must call {@link android.opengl.GLSurfaceView#setRenderer} to register a renderer.
Create a new RenderScriptGL object and attach it to the TextureView if present.
Destroy the RenderScriptGL object associated with this TextureView.
Set a new RenderScriptGL object.  This also will attach the new object to the TextureView if present.
Returns the previously set RenderScriptGL object.
Retrieve a sampler with ag set to linear, min linear mipmap linear, and to and wrap modes set to clamp.
Retrieve a sampler with min and mag set to nearest and wrap modes set to wrap.
Retrieve a sampler with ag set to linear, min linear mipmap linear, and to and wrap modes set to wrap.
Validate structure and create a new type.
Looks up a child by name and creates a new one if necessary.
Looks up a child by name.
Gets the child element with the given name. Uses an empty string as the namespace.
Gets the child element with the given name.
Gets the child element with the given name. Uses an empty string as the namespace. We will throw a {@link org.xml.sax.SAXException} at parsing time if the specified child is missing. This helps you ensure that your listeners are called.
Gets the child element with the given name. We will throw a {@link org.xml.sax.SAXException} at parsing time if the specified child is missing. This helps you ensure that your listeners are called.
Sets start and end element listeners at the same time.
Sets start and end text element listeners at the same time.
Sets a listener for the start of this element.
Sets a listener for the end of this element.
Sets a listener for the end of this text element.
Clears flags on required children.
Throws an exception if a required child was not present.
Constructs a new root element with the given name.
Constructs a new root element with the given name. Uses an empty string as the namespace.
Gets the SAX {@code ContentHandler}. Pass this to your SAX parser.
Convert objects to a PEM format, which is used for CA_CERTIFICATE, USER_CERTIFICATE, and USER_PRIVATE_KEY entries.
Convert objects from PEM format, which is used for CA_CERTIFICATE, USER_CERTIFICATE, and USER_PRIVATE_KEY entries.
Cast an IBinder object into an android.security.IKeyChainAliasCallback interface, generating a proxy if needed.
Cast an IBinder object into an android.security.IKeyChainService interface, generating a proxy if needed.
APIs used by KeyChain
APIs used by CertInstaller
APIs used by Settings
APIs used by KeyChainActivity
Returns an {@code Intent} that can be used for credential installation. The intent may be used without any extras, in which case the user will be able to install credentials from their own source. <p>Alternatively, {@link #EXTRA_CERTIFICATE} or {@link #EXTRA_PKCS12} maybe used to specify the bytes of an X.509 certificate or a PKCS#12 key store for installation. These extras may be combined with {@link #EXTRA_NAME} to provide a default alias name for credentials being installed. <p>When used with {@link Activity#startActivityForResult}, {@link Activity#RESULT_OK} will be returned if a credential was successfully installed, otherwise {@link Activity#RESULT_CANCELED} will be returned.
Launches an {@code Activity} for the user to select the alias for a private key and certificate pair for authentication. The selected alias or null will be returned via the KeyChainAliasCallback callback. <p>{@code keyTypes} and {@code issuers} may be used to highlight suggested choices to the user, although to cope with sometimes erroneous values provided by servers, the user may be able to override these suggestions. <p>{@code host} and {@code port} may be used to give the user more context about the server requesting the credentials. <p>{@code alias} allows the chooser to preselect an existing alias which will still be subject to user confirmation. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#USE_CREDENTIALS}.
Returns the {@code PrivateKey} for the requested alias, or null if no there is no result. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#USE_CREDENTIALS}. returned via {@link KeyChainAliasCallback#alias}.
Returns the {@code X509Certificate} chain for the requested alias, or null if no there is no result. <p>This method requires the caller to hold the permission {@link android.Manifest.permission#USE_CREDENTIALS}. returned via {@link KeyChainAliasCallback#alias}.
Caller should call unbindService on the result when finished.
Constructs a new {@code KeyChainException} with the current stack trace and the specified detail message.
Constructs a new {@code KeyChainException} with the current stack trace, the specified detail message and the specified cause.
Constructs a new {@code KeyChainException} with the current stack trace and the specified cause.
Look up, or construct, based on the activity. The activities fall into three cases, based on meta-data found in the manifest entry: <ol> <li>The activity itself implements search.  This is indicated by the presence of a "android.app.searchable" meta-data attribute. The value is a reference to an XML file containing search information.</li> <li>A related activity implements search.  This is indicated by the presence of a "android.app.default_searchable" meta-data attribute. The value is a string naming the activity implementing search.  In this case the factory will "redirect" and return the searchable data.</li> <li>No searchability data is provided.  We return null here and other code will insert the "default" (e.g. contacts) search. TODO: cache the result in the map, and check the map first. TODO: it might make sense to implement the searchable reference as an application meta-data entry.  This way we don't have to pepper each and every activity. TODO: can we skip the constructor step if it's a non-searchable? TODO: does it make sense to plug the default into a slot here for automatic return?  Probably not, but it's one way to do it. activity does not define any explicit searchable metadata.
Builds an entire list (suitable for display) of activities that are searchable, by iterating the entire set of ACTION_SEARCH & ACTION_WEB_SEARCH intents. Also clears the hash of all activities -> searches which will refill as the user clicks "search". This should only be done at startup and again if we know that the list has changed. TODO: every activity that provides a ACTION_SEARCH intent should also provide searchability meta-data.  There are a bunch of checks here that, if data is not found, silently skip to the next activity.  This won't help a developer trying to figure out why their activity isn't showing up in the list, but an exception here is too rough.  I would like to find a better notification mechanism. TODO: sort the list somehow?  UI choice.
Returns a sorted list of installed search providers as per the following heuristics: (a) System apps are given priority over non system apps. (b) Among system apps and non system apps, the relative ordering is defined by their declared priority.
Finds the global search activity.
Checks whether the global search provider with a given component name is installed on the system or not. This deals with cases such as the removal of an installed provider.
Returns the highest ranked search provider as per the ranking defined in {@link #getGlobalSearchActivities()}.
Finds the web search activity. Only looks in the package of the global search activity.
Returns the list of searchable activities.
Returns a list of the searchable activities that can be included in global search.
Returns a list of activities that handle the global search intent.
Initializes the Search Manager service in the provided system context. Only one instance of this object should be created!
Returns the SearchableInfo for a given activity. or null if no searchable metadata was available.
Called by native code on a PropertyChanged signal from org.bluez.AudioSink. values.
Called by native code for the async response to a Connect method call to org.bluez.AudioSink.
Turn on Bluetooth Module, Load firmware, and do all the preparation needed to get the Bluetooth Module ready but keep it not discoverable and not connectable. The last step of this method sets up the local service record DB. There will be a event reporting the status of the SDP setup.
Return the public BluetoothAdapter state
bluetoothd has crashed and recovered, the adapter state machine has to reset itself and try to return to previous state
reason is ignored unless state == BOND_NOT_BONDED
This function adds a bluetooth address to the auto pairing blacklist file. These addresses are added to DynamicAddressBlacklistSection
Set service priority of Hid, A2DP and Headset profiles depending on the bond state change
Called by native code on a DeviceFound signal from org.bluez.Adapter.
Called by native code on a DeviceDisappeared signal from org.bluez.Adapter.
Called by native code on a DisconnectRequested signal from org.bluez.Device.
Called by native code for the async response to a CreatePairedDevice method call to org.bluez.Adapter.
Called by native code on a DeviceCreated signal from org.bluez.Adapter.
Called by native code on a DeviceRemoved signal from org.bluez.Adapter.
Called by native code on a PropertyChanged signal from org.bluez.Adapter. This method is also called from {@link BluetoothAdapterStateMachine} to set the "Pairable" property when Bluetooth is enabled. values.
Called by native code on a PropertyChanged signal from org.bluez.Device. values.
Called by native code on a PropertyChanged signal from org.bluez.Input. values.
Called by native code on a PropertyChanged signal from org.bluez.Network. values.
Called by native code on a RequestPairingConsent method call to org.bluez.Agent.
Called by native code on a RequestConfirmation method call to org.bluez.Agent.
Called by native code on a RequestPasskey method call to org.bluez.Agent.
Called by native code on a RequestPinCode method call to org.bluez.Agent.
Called by native code on a DisplayPasskey method call to org.bluez.Agent.
Called by native code on a RequestOobData method call to org.bluez.Agent.
Called by native code on an Authorize method call to org.bluez.Agent.
Called by native code on a Cancel method call to org.bluez.Agent.
Called by native code for the async response to a DiscoverServices method call to org.bluez.Adapter.
Called by native code for the async response to a CreateDevice method call to org.bluez.Adapter. {@link #CREATE_DEVICE_ALREADY_EXISTS} or {@link #CREATE_DEVICE_FAILED}}
Called by native code for the async response to a Connect method call to org.bluez.Input.
Called by native code for the async response to a Connect method call to org.bluez.Network.
Called by native code for the async response to a Connect method call to org.bluez.Health
Called by native code on a DeviceDisconnected signal from org.bluez.NetworkServer.
Called by native code on a DeviceConnected signal from org.bluez.NetworkServer.
Called by native code on a PropertyChanged signal from org.bluez.HealthDevice.
Called by native code on a ChannelCreated/Deleted signal from org.bluez.HealthDevice.
This function sends the intent for the updates on the connection status to the remote device. Note that multiple channels can be connected to the remote device by multiple applications. This sends an intent for the update to the device connection status and not the channel connection status. Only the following state transitions are possible: {@link BluetoothHealth#STATE_DISCONNECTED} to {@link BluetoothHealth#STATE_CONNECTING} {@link BluetoothHealth#STATE_CONNECTING} to {@link BluetoothHealth#STATE_CONNECTED} {@link BluetoothHealth#STATE_CONNECTED} to {@link BluetoothHealth#STATE_DISCONNECTING} {@link BluetoothHealth#STATE_DISCONNECTING} to {@link BluetoothHealth#STATE_DISCONNECTED} {@link BluetoothHealth#STATE_DISCONNECTED} to {@link BluetoothHealth#STATE_CONNECTED} {@link BluetoothHealth#STATE_CONNECTED} to {@link BluetoothHealth#STATE_DISCONNECTED} {@link BluetoothHealth#STATE_CONNECTING} to {{@link BluetoothHealth#STATE_DISCONNECTED}
This function converts the channel connection state to device connection state.
configured when we start tethering
Bring down bluetooth and disable BT in settings. Returns true on success.
Bring down bluetooth. Returns true on success.
The Bluetooth has been turned off, but hot. Do bonding, profile cleanup
Local clean up after broadcasting STATE_OFF intent
power off Bluetooth
Data clean up after Bluetooth shutoff
Bring up BT and persist BT on in settings
Enable this Bluetooth device, asynchronously. This turns on/off the underlying hardware.
Turn on Bluetooth Module, Load firmware, and do all the preparation needed to get the Bluetooth Module ready but keep it not discoverable and not connectable.
This function is called from Bluetooth Event Loop when onPropertyChanged for adapter comes in with UUID property.
This method is called immediately before Bluetooth module is turned on after the adapter became pariable. It inits bond state and profile state before STATE_ON intent is broadcasted.
This method is called immediately after Bluetooth module is turned on. It starts auto-connection and places bluetooth on sign onto the battery stats
TODO(): setPropertyString, setPropertyInteger, setPropertyBoolean Either have a single property function with Object as the parameter or have a function for each property and then obfuscate in the JNI layer. The following looks dirty.
